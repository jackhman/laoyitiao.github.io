import{_ as o,j as e,o as t,h as r,k as p,f as s,Q as l,s as a}from"./chunks/framework.d3daa342.js";const _=JSON.parse('{"title":"44元数据方案深度剖析，如何避免注册中心数据量膨胀？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4281) 44  元数据方案深度剖析，如何避免注册中心数据量膨胀？.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4281) 44  元数据方案深度剖析，如何避免注册中心数据量膨胀？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4281) 44  元数据方案深度剖析，如何避免注册中心数据量膨胀？.md"},E=l(`<h1 id="_44元数据方案深度剖析-如何避免注册中心数据量膨胀" tabindex="-1">44元数据方案深度剖析，如何避免注册中心数据量膨胀？ <a class="header-anchor" href="#_44元数据方案深度剖析-如何避免注册中心数据量膨胀" aria-label="Permalink to &quot;44元数据方案深度剖析，如何避免注册中心数据量膨胀？&quot;">​</a></h1><p>在上一课时，我们详细介绍了 Dubbo 传统架构面临的挑战，以及 Dubbo 2.7.5 版本引入的服务自省方案是如何应对这些挑战的。</p><p>本课时我们将从服务自省方案的基础设施开始介绍其具体实现。我们首先会介绍元数据相关的基础类的定义，然后介绍元数据的上报以及元数据服务的相关内容，同时还会介绍 Service ID 与 Service Name 是如何映射的。</p><h3 id="serviceinstance" tabindex="-1">ServiceInstance <a class="header-anchor" href="#serviceinstance" aria-label="Permalink to &quot;ServiceInstance&quot;">​</a></h3><p><strong>Service Instance 唯一标识一个服务实例</strong>，在 Dubbo 的源码中对应 ServiceInstance 接口，该接口的具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceInstance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 唯一标识</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance所属的Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getServiceName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance的host</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance的port</span></span>
<span class="line"><span style="color:#E1E4E8;">    Integer </span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当前ServiceInstance的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isEnabled</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检测当前ServiceInstance的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isHealthy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance关联的元数据，这些元数据以KV格式存储</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 计算当前ServiceInstance对象的hashCode值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hashCode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 比较两个ServiceInstance对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">another</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceInstance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 唯一标识</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance所属的Service Name</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getServiceName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance的host</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance的port</span></span>
<span class="line"><span style="color:#24292E;">    Integer </span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 当前ServiceInstance的状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isEnabled</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检测当前ServiceInstance的状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isHealthy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance关联的元数据，这些元数据以KV格式存储</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 计算当前ServiceInstance对象的hashCode值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 比较两个ServiceInstance对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">another</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>DefaultServiceInstance 是 ServiceInstance 的唯一实现</strong>，DefaultServiceInstance 是一个普通的 POJO 类，其中的核心字段如下。</p><ul><li><p>id（String 类型）：ServiceInstance 唯一标识。</p></li><li><p>serviceName（String 类型）：ServiceInstance 关联的 Service Name。</p></li><li><p>host（String 类型）：ServiceInstance 的 host。</p></li><li><p>port（Integer 类型）：ServiceInstance 的 port。</p></li><li><p>enabled（boolean 类型）：ServiceInstance 是否可用的状态。</p></li><li><p>healthy（boolean 类型）：ServiceInstance 的健康状态。</p></li><li><p>metadata（Map&lt;String, String&gt; 类型）：ServiceInstance 关联的元数据。</p></li></ul><h3 id="servicedefinition" tabindex="-1">ServiceDefinition <a class="header-anchor" href="#servicedefinition" aria-label="Permalink to &quot;ServiceDefinition&quot;">​</a></h3><p>Dubbo 元数据服务与我们业务中发布的 Dubbo 服务无异，<strong>Consumer 端可以调用一个 ServiceInstance 的元数据服务获取其发布的全部服务的元数据</strong>。</p><p>说到元数据，就不得不提到 ServiceDefinition 这个类，它可以来描述一个服务接口的定义，其核心字段如下。</p><ul><li><p>canonicalName（String 类型）：接口的完全限定名称。</p></li><li><p>codeSource（String 类型）：服务接口所在的完整路径。</p></li><li><p>methods（List 类型）：接口中定义的全部方法描述信息。在 MethodDefinition 中记录了方法的名称、参数类型、返回值类型以及方法参数涉及的所有 TypeDefinition。</p></li><li><p>types（List 类型）：接口定义中涉及的全部类型描述信息，包括方法的参数和字段，如果遇到复杂类型，TypeDefinition 会递归获取复杂类型内部的字段。在 dubbo-metadata-api 模块中，提供了多种类型对应的 TypeBuilder 用于创建对应的 TypeDefinition，对于没有特定 TypeBuilder 实现的类型，会使用 DefaultTypeBuilder。</p></li></ul>`,12),y=a("p",null,"TypeBuilder 接口实现关系图",-1),i=a("p",null,[a("strong",null,"在服务发布的时候，会将服务的 URL 中的部分数据封装为 FullServiceDefinition 对象，然后作为元数据存储起来"),s("。FullServiceDefinition 继承了 ServiceDefinition，并在 ServiceDefinition 基础之上扩展了 params 集合（Map<String, String> 类型），用来存储 URL 上的参数。")],-1),d=a("h3",{id:"metadataservice",tabindex:"-1"},[s("MetadataService "),a("a",{class:"header-anchor",href:"#metadataservice","aria-label":'Permalink to "MetadataService"'},"​")],-1),F=a("p",null,[s("接下来看 MetadataService 接口，在上一讲我们提到"),a("strong",null,"Dubbo 中的每个 ServiceInstance 都会发布 MetadataService 接口供 Consumer 端查询元数据"),s("，下图展示了 MetadataService 接口的继承关系：")],-1),u=l(`<p>MetadataService 接口继承关系图</p><p>在 MetadataService 接口中定义了查询当前 ServiceInstance 发布的元数据的相关方法，具体如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetadataService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">serviceName</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取当前ServiceInstance所属服务的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">version</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> VERSION; </span><span style="color:#6A737D;">// 获取当前MetadataService接口的版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance订阅的全部URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getSubscribedURLs</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This operation is not supported for consumer.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance发布的全部URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(ALL_SERVICE_INTERFACES);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据服务接口查找当前ServiceInstance暴露的全部接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceInterface</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(serviceInterface, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据服务接口和group两个条件查找当前ServiceInstance暴露的全部接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceInterface</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">group</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(serviceInterface, group, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据服务接口、group和version三个条件查找当前ServiceInstance暴露的全部接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceInterface</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">group</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">version</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(serviceInterface, group, version, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据服务接口、group、version和protocol四个条件查找当前ServiceInstance暴露的全部接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    SortedSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceInterface</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">group</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">version</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">protocol</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据指定条件查询ServiceDefinition</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getServiceDefinition</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">interfaceName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">version</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">group</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getServiceDefinition</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceKey</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetadataService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">serviceName</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取当前ServiceInstance所属服务的名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">version</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> VERSION; </span><span style="color:#6A737D;">// 获取当前MetadataService接口的版本</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance订阅的全部URL</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getSubscribedURLs</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This operation is not supported for consumer.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前ServiceInstance发布的全部URL</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(ALL_SERVICE_INTERFACES);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据服务接口查找当前ServiceInstance暴露的全部接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceInterface</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(serviceInterface, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据服务接口和group两个条件查找当前ServiceInstance暴露的全部接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceInterface</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">group</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(serviceInterface, group, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据服务接口、group和version三个条件查找当前ServiceInstance暴露的全部接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceInterface</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">group</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">version</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(serviceInterface, group, version, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据服务接口、group、version和protocol四个条件查找当前ServiceInstance暴露的全部接口</span></span>
<span class="line"><span style="color:#24292E;">    SortedSet&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceInterface</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">group</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">version</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">protocol</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据指定条件查询ServiceDefinition</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getServiceDefinition</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">interfaceName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">version</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">group</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getServiceDefinition</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceKey</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>在 MetadataService 接口中定义的都是查询元数据的方法，在其子接口 WritableMetadataService 中添加了一些发布元数据的写方法</strong>，具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span><span style="color:#E1E4E8;">(DEFAULT_METADATA_STORAGE_TYPE)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WritableMetadataService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetadataService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">serviceName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ServiceName默认是从ApplicationModel中获取</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ExtensionLoader、DubboBootstrap以及ApplicationModel是单个Dubbo进程范围内的单例对象，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ExtensionLoader用于Dubbo SPI机制加载扩展实现，DubboBootstrap用于启动Dubbo进程，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ApplicationModel用于表示一个Dubbo实例，其中维护了多个ProviderModel对象表示当前Dubbo实例发布的服务，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 维护了多个ConsumerModel对象表示当前Dubbo实例引用的服务。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ApplicationModel.</span><span style="color:#B392F0;">getApplication</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exportURL</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 发布该URL所代表的服务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unexportURL</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 注销该URL所代表的服务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refreshMetadata</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">exportedRevision</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">subscribedRevision</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 刷新元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subscribeURL</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 订阅该URL所代表的服务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unsubscribeURL</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 取消订阅该URL所代表的服务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发布Provider端的ServiceDefinition</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishServiceDefinition</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">providerUrl</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取WritableMetadataService的默认扩展实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> WritableMetadataService </span><span style="color:#B392F0;">getDefaultExtension</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(WritableMetadataService.class).</span><span style="color:#B392F0;">getDefaultExtension</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取WritableMetadataService接口指定的扩展实现（无指定扩展名称，则返回默认扩展实现）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> WritableMetadataService </span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(WritableMetadataService.class).</span><span style="color:#B392F0;">getOrDefaultExtension</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span><span style="color:#24292E;">(DEFAULT_METADATA_STORAGE_TYPE)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WritableMetadataService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetadataService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">serviceName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ServiceName默认是从ApplicationModel中获取</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ExtensionLoader、DubboBootstrap以及ApplicationModel是单个Dubbo进程范围内的单例对象，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ExtensionLoader用于Dubbo SPI机制加载扩展实现，DubboBootstrap用于启动Dubbo进程，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ApplicationModel用于表示一个Dubbo实例，其中维护了多个ProviderModel对象表示当前Dubbo实例发布的服务，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 维护了多个ConsumerModel对象表示当前Dubbo实例引用的服务。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ApplicationModel.</span><span style="color:#6F42C1;">getApplication</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exportURL</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 发布该URL所代表的服务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unexportURL</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 注销该URL所代表的服务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refreshMetadata</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">exportedRevision</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">subscribedRevision</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 刷新元数据</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subscribeURL</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 订阅该URL所代表的服务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unsubscribeURL</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 取消订阅该URL所代表的服务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 发布Provider端的ServiceDefinition</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishServiceDefinition</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">providerUrl</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取WritableMetadataService的默认扩展实现</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> WritableMetadataService </span><span style="color:#6F42C1;">getDefaultExtension</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(WritableMetadataService.class).</span><span style="color:#6F42C1;">getDefaultExtension</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取WritableMetadataService接口指定的扩展实现（无指定扩展名称，则返回默认扩展实现）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> WritableMetadataService </span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(WritableMetadataService.class).</span><span style="color:#6F42C1;">getOrDefaultExtension</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>WritableMetadataService 接口被 @SPI 注解修饰，是一个扩展接口，在前面的继承关系图中也可以看出，<strong>它有两个比较基础的扩展实现，分别是 InMemoryWritableMetadataService（默认扩展实现） 和 RemoteWritableMetadataServiceDelegate，对应扩展名分别是 local 和 remote</strong>。</p><p>下面我们先来看 InMemoryWritableMetadataService 的实现，其中维护了三个核心集合。</p><ul><li><p>exportedServiceURLs（ConcurrentSkipListMap&lt;String, SortedSet<code>&lt;URL&gt;</code>&gt; 类型）：用于记录当前 ServiceInstance 发布的 URL 集合，其中 Key 是 ServiceKey（即 interface、group 和 version 三部分构成），Value 是对应的 URL 集合。</p></li><li><p>subscribedServiceURLs（ConcurrentSkipListMap&lt;String, SortedSet<code>&lt;URL&gt;</code>&gt; 类型）：用于记录当前 ServiceInstance 引用的 URL 集合，其中 Key 是 ServiceKey（即 interface、group 和 version 三部分构成），Value 是对应的 URL 集合。</p></li><li><p>serviceDefinitions（ConcurrentSkipListMap&lt;String, String&gt; 类型）：用于记录当前 ServiceInstance 发布的 ServiceDefinition 信息，其中 Key 为 Provider URL 的ServiceKey，Value 为对应的 ServiceDefinition 对象序列化之后的 JSON 字符串。</p></li></ul><p>InMemoryWritableMetadataService 对 getExportedURLs()、getSubscribedURLs() 以及 getServiceDefinition() 方法的实现，就是<strong>查询</strong> 上述三个集合的数据；对 (un)exportURL()、(un)subscribeURL() 和 publishServiceDefinition() 方法的实现，就是<strong>增删</strong>上述三个集合的数据。</p><p>(un)exportURL()、(un)subscribeURL() 等方法都是非常简单的集合操作，我们就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。 这里我们重点来看一下 publishServiceDefinition() 方法对 ServiceDefinition 的处理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishServiceDefinition</span><span style="color:#E1E4E8;">(URL providerUrl) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取服务接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    String interfaceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> providerUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(INTERFACE_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(interfaceName)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ProtocolUtils.</span><span style="color:#B392F0;">isGeneric</span><span style="color:#E1E4E8;">(providerUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(GENERIC_KEY))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class interfaceClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(interfaceName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建服务接口对应的ServiceDefinition对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        ServiceDefinition serviceDefinition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ServiceDefinitionBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(interfaceClass);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Gson gson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Gson</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将ServiceDefinition对象序列化为JSON对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        String data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gson.</span><span style="color:#B392F0;">toJson</span><span style="color:#E1E4E8;">(serviceDefinition);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将ServiceDefinition对象序列化之后的JSON字符串记录到serviceDefinitions集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceDefinitions.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(providerUrl.</span><span style="color:#B392F0;">getServiceKey</span><span style="color:#E1E4E8;">(), data);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishServiceDefinition</span><span style="color:#24292E;">(URL providerUrl) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取服务接口</span></span>
<span class="line"><span style="color:#24292E;">    String interfaceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> providerUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(INTERFACE_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(interfaceName)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ProtocolUtils.</span><span style="color:#6F42C1;">isGeneric</span><span style="color:#24292E;">(providerUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(GENERIC_KEY))) {</span></span>
<span class="line"><span style="color:#24292E;">        Class interfaceClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(interfaceName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建服务接口对应的ServiceDefinition对象</span></span>
<span class="line"><span style="color:#24292E;">        ServiceDefinition serviceDefinition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServiceDefinitionBuilder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(interfaceClass);</span></span>
<span class="line"><span style="color:#24292E;">        Gson gson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Gson</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将ServiceDefinition对象序列化为JSON对象</span></span>
<span class="line"><span style="color:#24292E;">        String data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gson.</span><span style="color:#6F42C1;">toJson</span><span style="color:#24292E;">(serviceDefinition);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将ServiceDefinition对象序列化之后的JSON字符串记录到serviceDefinitions集合</span></span>
<span class="line"><span style="color:#24292E;">        serviceDefinitions.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(providerUrl.</span><span style="color:#6F42C1;">getServiceKey</span><span style="color:#24292E;">(), data);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>在 RemoteWritableMetadataService 实现中封装了一个 InMemoryWritableMetadataService 对象，并对 publishServiceDefinition() 方法进行了覆盖</strong>，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishServiceDefinition</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取URL中的side参数值，决定调用publishProvider()还是publishConsumer()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    String side </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(SIDE_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (PROVIDER_SIDE.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(side)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">publishProvider</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">publishConsumer</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishServiceDefinition</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取URL中的side参数值，决定调用publishProvider()还是publishConsumer()方法</span></span>
<span class="line"><span style="color:#24292E;">    String side </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(SIDE_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (PROVIDER_SIDE.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(side)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">publishProvider</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">publishConsumer</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 publishProvider() 方法中，首先会根据 Provider URL 创建对应的 FullServiceDefinition 对象，然后通过 MetadataReport 进行上报，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishProvider</span><span style="color:#E1E4E8;">(URL providerUrl) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 删除pid、timestamp、bind.ip、bind.port等参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    providerUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> providerUrl.</span><span style="color:#B392F0;">removeParameters</span><span style="color:#E1E4E8;">(PID_KEY, TIMESTAMP_KEY, Constants.BIND_IP_KEY,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Constants.BIND_PORT_KEY, TIMESTAMP_KEY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取服务接口名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    String interfaceName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> providerUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(INTERFACE_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(interfaceName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class interfaceClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(interfaceName); </span><span style="color:#6A737D;">// 反射</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建服务接口对应的FullServiceDefinition对象，URL中的参数会记录到FullServiceDefinition的params集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        FullServiceDefinition fullServiceDefinition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ServiceDefinitionBuilder.</span><span style="color:#B392F0;">buildFullDefinition</span><span style="color:#E1E4E8;">(interfaceClass,</span></span>
<span class="line"><span style="color:#E1E4E8;">                providerUrl.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取MetadataReport并上报FullServiceDefinition</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getMetadataReport</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">storeProviderMetadata</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetadataIdentifier</span><span style="color:#E1E4E8;">(providerUrl.</span><span style="color:#B392F0;">getServiceInterface</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                providerUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(VERSION_KEY), providerUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(GROUP_KEY),</span></span>
<span class="line"><span style="color:#E1E4E8;">                PROVIDER_SIDE, providerUrl.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(APPLICATION_KEY)), fullServiceDefinition);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishProvider</span><span style="color:#24292E;">(URL providerUrl) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 删除pid、timestamp、bind.ip、bind.port等参数</span></span>
<span class="line"><span style="color:#24292E;">    providerUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> providerUrl.</span><span style="color:#6F42C1;">removeParameters</span><span style="color:#24292E;">(PID_KEY, TIMESTAMP_KEY, Constants.BIND_IP_KEY,</span></span>
<span class="line"><span style="color:#24292E;">            Constants.BIND_PORT_KEY, TIMESTAMP_KEY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取服务接口名称</span></span>
<span class="line"><span style="color:#24292E;">    String interfaceName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> providerUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(INTERFACE_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(interfaceName)) {</span></span>
<span class="line"><span style="color:#24292E;">        Class interfaceClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(interfaceName); </span><span style="color:#6A737D;">// 反射</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建服务接口对应的FullServiceDefinition对象，URL中的参数会记录到FullServiceDefinition的params集合中</span></span>
<span class="line"><span style="color:#24292E;">        FullServiceDefinition fullServiceDefinition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServiceDefinitionBuilder.</span><span style="color:#6F42C1;">buildFullDefinition</span><span style="color:#24292E;">(interfaceClass,</span></span>
<span class="line"><span style="color:#24292E;">                providerUrl.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取MetadataReport并上报FullServiceDefinition</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getMetadataReport</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">storeProviderMetadata</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetadataIdentifier</span><span style="color:#24292E;">(providerUrl.</span><span style="color:#6F42C1;">getServiceInterface</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                providerUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(VERSION_KEY), providerUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(GROUP_KEY),</span></span>
<span class="line"><span style="color:#24292E;">                PROVIDER_SIDE, providerUrl.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(APPLICATION_KEY)), fullServiceDefinition);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>publishConsumer() 方法则相对比较简单：首先会清理 Consumer URL 中 pid、timestamp 等参数，然后将 Consumer URL 中的参数集合进行上报。</p><p>不过，在 RemoteWritableMetadataService 中的 exportURL()、subscribeURL()、getExportedURLs()、getServiceDefinition() 等一系列方法都是空实现，这是为什么呢？其实我们从 RemoteWritableMetadataServiceDelegate 中就可以找到答案，注意，<strong>RemoteWritableMetadataServiceDelegate 才是 MetadataService 接口的 remote 扩展实现</strong>。</p><p><strong>在 RemoteWritableMetadataServiceDelegate 中同时维护了一个 InMemoryWritableMetadataService 对象和 RemoteWritableMetadataService 对象</strong>，exportURL()、subscribeURL() 等发布订阅相关的方法会同时委托给这两个 MetadataService 对象，getExportedURLs()、getServiceDefinition() 等查询方法则只会调用 InMemoryWritableMetadataService 对象进行查询。这里我们以 exportURL() 方法为例进行说明：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exportURL</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doFunction</span><span style="color:#E1E4E8;">(WritableMetadataService</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">exportURL, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doFunction</span><span style="color:#E1E4E8;">(BiFunction</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">WritableMetadataService, URL, Boolean</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> func, URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 同时调用InMemoryWritableMetadataService对象和RemoteWritableMetadataService对象的exportURL()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> func.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(defaultWritableMetadataService, url) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> func.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(remoteWritableMetadataService, url);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exportURL</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFunction</span><span style="color:#24292E;">(WritableMetadataService</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">exportURL, url);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFunction</span><span style="color:#24292E;">(BiFunction</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">WritableMetadataService, URL, Boolean</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> func, URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 同时调用InMemoryWritableMetadataService对象和RemoteWritableMetadataService对象的exportURL()方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(defaultWritableMetadataService, url) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(remoteWritableMetadataService, url);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="metadatareport" tabindex="-1">MetadataReport <a class="header-anchor" href="#metadatareport" aria-label="Permalink to &quot;MetadataReport&quot;">​</a></h3><p>元数据中心是 Dubbo 2.7.0 版本之后新增的一项优化，其主要目的是将 URL 中的一部分内容存储到元数据中心，从而减少注册中心的压力。</p><p><strong>元数据中心的数据只是给本端自己使用的，改动不需要告知对端</strong>，例如，Provider 修改了元数据，不需要实时通知 Consumer。这样，在注册中心存储的数据量减少的同时，还减少了因为配置修改导致的注册中心频繁通知监听者情况的发生，很好地减轻了注册中心的压力。</p><p><strong>MetadataReport 接口是 Dubbo 节点与元数据中心交互的桥梁</strong>，其继承关系如下图所示：</p>`,23),v=l(`<p>MetadataReport 继承关系图</p><p>我们先来看一下 MetadataReport 接口的核心定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetadataReport</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 存储Provider元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">storeProviderMetadata</span><span style="color:#E1E4E8;">(MetadataIdentifier </span><span style="color:#FFAB70;">providerMetadataIdentifier</span><span style="color:#E1E4E8;">, ServiceDefinition </span><span style="color:#FFAB70;">serviceDefinition</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 存储Consumer元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">storeConsumerMetadata</span><span style="color:#E1E4E8;">(MetadataIdentifier </span><span style="color:#FFAB70;">consumerMetadataIdentifier</span><span style="color:#E1E4E8;">, Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">serviceParameterMap</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 存储、删除Service元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveServiceMetadata</span><span style="color:#E1E4E8;">(ServiceMetadataIdentifier </span><span style="color:#FFAB70;">metadataIdentifier</span><span style="color:#E1E4E8;">, URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeServiceMetadata</span><span style="color:#E1E4E8;">(ServiceMetadataIdentifier </span><span style="color:#FFAB70;">metadataIdentifier</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询暴露的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">(ServiceMetadataIdentifier </span><span style="color:#FFAB70;">metadataIdentifier</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询订阅数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveSubscribedData</span><span style="color:#E1E4E8;">(SubscriberMetadataIdentifier </span><span style="color:#FFAB70;">subscriberMetadataIdentifier</span><span style="color:#E1E4E8;">, Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">urls</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getSubscribedURLs</span><span style="color:#E1E4E8;">(SubscriberMetadataIdentifier </span><span style="color:#FFAB70;">subscriberMetadataIdentifier</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询ServiceDefinition</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getServiceDefinition</span><span style="color:#E1E4E8;">(MetadataIdentifier </span><span style="color:#FFAB70;">metadataIdentifier</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetadataReport</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 存储Provider元数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">storeProviderMetadata</span><span style="color:#24292E;">(MetadataIdentifier </span><span style="color:#E36209;">providerMetadataIdentifier</span><span style="color:#24292E;">, ServiceDefinition </span><span style="color:#E36209;">serviceDefinition</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 存储Consumer元数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">storeConsumerMetadata</span><span style="color:#24292E;">(MetadataIdentifier </span><span style="color:#E36209;">consumerMetadataIdentifier</span><span style="color:#24292E;">, Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">serviceParameterMap</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 存储、删除Service元数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveServiceMetadata</span><span style="color:#24292E;">(ServiceMetadataIdentifier </span><span style="color:#E36209;">metadataIdentifier</span><span style="color:#24292E;">, URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeServiceMetadata</span><span style="color:#24292E;">(ServiceMetadataIdentifier </span><span style="color:#E36209;">metadataIdentifier</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询暴露的URL</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">(ServiceMetadataIdentifier </span><span style="color:#E36209;">metadataIdentifier</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询订阅数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveSubscribedData</span><span style="color:#24292E;">(SubscriberMetadataIdentifier </span><span style="color:#E36209;">subscriberMetadataIdentifier</span><span style="color:#24292E;">, Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">urls</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getSubscribedURLs</span><span style="color:#24292E;">(SubscriberMetadataIdentifier </span><span style="color:#E36209;">subscriberMetadataIdentifier</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询ServiceDefinition</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getServiceDefinition</span><span style="color:#24292E;">(MetadataIdentifier </span><span style="color:#E36209;">metadataIdentifier</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>了解了 MetadataReport 接口定义的核心行为之后，接下来我们就按照其实现的顺序来介绍：先来分析 AbstractMetadataReport 抽象类提供的公共实现，然后以 ZookeeperMetadataReport 这个具体实现为例，介绍 MetadataReport 如何与 ZooKeeper 配合实现元数据上报。</p><h4 id="_1-abstractmetadatareport" tabindex="-1">1. AbstractMetadataReport <a class="header-anchor" href="#_1-abstractmetadatareport" aria-label="Permalink to &quot;1. AbstractMetadataReport&quot;">​</a></h4><p><strong>AbstractMetadataReport 中提供了所有 MetadataReport 的公共实现</strong>，其核心字段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> URL reportURL; </span><span style="color:#6A737D;">// 元数据中心的URL，其中包含元数据中心的地址</span></span>
<span class="line"><span style="color:#6A737D;">// 本地磁盘缓存，用来缓存上报的元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">File file;</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 内存缓存</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">MetadataIdentifier</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; allMetadataReports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 该线程池除了用来同步本地内存缓存与文件缓存，还会用来完成异步上报的功能</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ExecutorService reportCacheExecutor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newFixedThreadPool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamedThreadFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DubboSaveMetadataReport&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 用来暂存上报失败的元数据，后面会有定时任务进行重试</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">MetadataIdentifier</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; failedReports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> syncReport; </span><span style="color:#6A737D;">// 是否同步上报元数据</span></span>
<span class="line"><span style="color:#6A737D;">// 记录最近一次元数据上报的版本，单调递增</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AtomicLong lastCacheChanged </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicLong</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 用于重试的定时任务</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MetadataReportRetry metadataReportRetry;</span></span>
<span class="line"><span style="color:#6A737D;">// 当前MetadataReport实例是否已经初始化</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AtomicBoolean initialized </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicBoolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> URL reportURL; </span><span style="color:#6A737D;">// 元数据中心的URL，其中包含元数据中心的地址</span></span>
<span class="line"><span style="color:#6A737D;">// 本地磁盘缓存，用来缓存上报的元数据</span></span>
<span class="line"><span style="color:#24292E;">File file;</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 内存缓存</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">MetadataIdentifier</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; allMetadataReports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 该线程池除了用来同步本地内存缓存与文件缓存，还会用来完成异步上报的功能</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ExecutorService reportCacheExecutor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NamedThreadFactory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DubboSaveMetadataReport&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 用来暂存上报失败的元数据，后面会有定时任务进行重试</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">MetadataIdentifier</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; failedReports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> syncReport; </span><span style="color:#6A737D;">// 是否同步上报元数据</span></span>
<span class="line"><span style="color:#6A737D;">// 记录最近一次元数据上报的版本，单调递增</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AtomicLong lastCacheChanged </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicLong</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 用于重试的定时任务</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MetadataReportRetry metadataReportRetry;</span></span>
<span class="line"><span style="color:#6A737D;">// 当前MetadataReport实例是否已经初始化</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AtomicBoolean initialized </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicBoolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span></code></pre></div><p>在 AbstractMetadataReport 的构造方法中，首先会初始化本地的文件缓存，然后创建 MetadataReportRetry 重试任务，并启动一个周期性刷新的定时任务，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractMetadataReport</span><span style="color:#E1E4E8;">(URL reportServerURL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setUrl</span><span style="color:#E1E4E8;">(reportServerURL);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 默认的本地文件缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    String defaultFilename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user.home&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/.dubbo/dubbo-metadata-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> reportServerURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(APPLICATION_KEY) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> reportServerURL.</span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.cache&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    String filename </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reportServerURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(FILE_KEY, defaultFilename);</span></span>
<span class="line"><span style="color:#E1E4E8;">    File file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ConfigUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(filename)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(filename);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">file.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> file.</span><span style="color:#B392F0;">getParentFile</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">file.</span><span style="color:#B392F0;">getParentFile</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">file.</span><span style="color:#B392F0;">getParentFile</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">mkdirs</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">initialized.</span><span style="color:#B392F0;">getAndSet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> file.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            file.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> file;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将file文件中的内容加载到properties字段中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">loadProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 是否同步上报元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    syncReport </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reportServerURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(SYNC_REPORT_KEY, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建重试任务</span></span>
<span class="line"><span style="color:#E1E4E8;">    metadataReportRetry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetadataReportRetry</span><span style="color:#E1E4E8;">(reportServerURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(RETRY_TIMES_KEY, DEFAULT_METADATA_REPORT_RETRY_TIMES),</span></span>
<span class="line"><span style="color:#E1E4E8;">            reportServerURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(RETRY_PERIOD_KEY, DEFAULT_METADATA_REPORT_RETRY_PERIOD));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 是否周期性地上报元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (reportServerURL.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(CYCLE_REPORT_KEY, DEFAULT_METADATA_REPORT_CYCLE_REPORT)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ScheduledExecutorService scheduler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newSingleThreadScheduledExecutor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamedThreadFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DubboMetadataReportTimer&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 默认每隔1天将本地元数据全部刷新到元数据中心</span></span>
<span class="line"><span style="color:#E1E4E8;">        scheduler.</span><span style="color:#B392F0;">scheduleAtFixedRate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">publishAll, </span><span style="color:#B392F0;">calculateStartTime</span><span style="color:#E1E4E8;">(), ONE_DAY_IN_MILLISECONDS, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractMetadataReport</span><span style="color:#24292E;">(URL reportServerURL) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setUrl</span><span style="color:#24292E;">(reportServerURL);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 默认的本地文件缓存</span></span>
<span class="line"><span style="color:#24292E;">    String defaultFilename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user.home&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/.dubbo/dubbo-metadata-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> reportServerURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(APPLICATION_KEY) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> reportServerURL.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.cache&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    String filename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reportServerURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(FILE_KEY, defaultFilename);</span></span>
<span class="line"><span style="color:#24292E;">    File file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ConfigUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(filename)) {</span></span>
<span class="line"><span style="color:#24292E;">        file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(filename);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">file.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> file.</span><span style="color:#6F42C1;">getParentFile</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">file.</span><span style="color:#6F42C1;">getParentFile</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">file.</span><span style="color:#6F42C1;">getParentFile</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">mkdirs</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">initialized.</span><span style="color:#6F42C1;">getAndSet</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> file.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            file.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> file;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将file文件中的内容加载到properties字段中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">loadProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 是否同步上报元数据</span></span>
<span class="line"><span style="color:#24292E;">    syncReport </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reportServerURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(SYNC_REPORT_KEY, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建重试任务</span></span>
<span class="line"><span style="color:#24292E;">    metadataReportRetry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetadataReportRetry</span><span style="color:#24292E;">(reportServerURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(RETRY_TIMES_KEY, DEFAULT_METADATA_REPORT_RETRY_TIMES),</span></span>
<span class="line"><span style="color:#24292E;">            reportServerURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(RETRY_PERIOD_KEY, DEFAULT_METADATA_REPORT_RETRY_PERIOD));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 是否周期性地上报元数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (reportServerURL.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(CYCLE_REPORT_KEY, DEFAULT_METADATA_REPORT_CYCLE_REPORT)) {</span></span>
<span class="line"><span style="color:#24292E;">        ScheduledExecutorService scheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newSingleThreadScheduledExecutor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NamedThreadFactory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DubboMetadataReportTimer&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 默认每隔1天将本地元数据全部刷新到元数据中心</span></span>
<span class="line"><span style="color:#24292E;">        scheduler.</span><span style="color:#6F42C1;">scheduleAtFixedRate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">publishAll, </span><span style="color:#6F42C1;">calculateStartTime</span><span style="color:#24292E;">(), ONE_DAY_IN_MILLISECONDS, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 AbstractMetadataReport.storeProviderMetadata() 方法中，首先会根据 syncReport 字段值决定是同步上报还是异步上报：如果是同步上报，则在当前线程执行上报操作；如果是异步上报，则在 reportCacheExecutor 线程池中执行上报操作。具体的上报操作是在storeProviderMetadataTask() 方法中完成的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">storeProviderMetadataTask</span><span style="color:#E1E4E8;">(MetadataIdentifier providerMetadataIdentifier, ServiceDefinition serviceDefinition) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将元数据记录到allMetadataReports集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        allMetadataReports.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(providerMetadataIdentifier, serviceDefinition);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果之前上报失败，则在failedReports集合中有记录，这里上报成功之后会将其删除</span></span>
<span class="line"><span style="color:#E1E4E8;">        failedReports.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(providerMetadataIdentifier);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将元数据序列化成JSON字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">        Gson gson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Gson</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gson.</span><span style="color:#B392F0;">toJson</span><span style="color:#E1E4E8;">(serviceDefinition);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 上报序列化后的元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">doStoreProviderMetadata</span><span style="color:#E1E4E8;">(providerMetadataIdentifier, data);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将序列化后的元数据保存到本地文件缓存中</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">saveProperties</span><span style="color:#E1E4E8;">(providerMetadataIdentifier, data, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">syncReport);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果上报失败，则在failedReports集合中进行记录，然后由metadataReportRetry任务中进行重试</span></span>
<span class="line"><span style="color:#E1E4E8;">        failedReports.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(providerMetadataIdentifier, serviceDefinition);</span></span>
<span class="line"><span style="color:#E1E4E8;">        metadataReportRetry.</span><span style="color:#B392F0;">startRetryTask</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">storeProviderMetadataTask</span><span style="color:#24292E;">(MetadataIdentifier providerMetadataIdentifier, ServiceDefinition serviceDefinition) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将元数据记录到allMetadataReports集合</span></span>
<span class="line"><span style="color:#24292E;">        allMetadataReports.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(providerMetadataIdentifier, serviceDefinition);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果之前上报失败，则在failedReports集合中有记录，这里上报成功之后会将其删除</span></span>
<span class="line"><span style="color:#24292E;">        failedReports.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(providerMetadataIdentifier);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将元数据序列化成JSON字符串</span></span>
<span class="line"><span style="color:#24292E;">        Gson gson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Gson</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gson.</span><span style="color:#6F42C1;">toJson</span><span style="color:#24292E;">(serviceDefinition);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 上报序列化后的元数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doStoreProviderMetadata</span><span style="color:#24292E;">(providerMetadataIdentifier, data);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将序列化后的元数据保存到本地文件缓存中</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">saveProperties</span><span style="color:#24292E;">(providerMetadataIdentifier, data, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">syncReport);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果上报失败，则在failedReports集合中进行记录，然后由metadataReportRetry任务中进行重试</span></span>
<span class="line"><span style="color:#24292E;">        failedReports.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(providerMetadataIdentifier, serviceDefinition);</span></span>
<span class="line"><span style="color:#24292E;">        metadataReportRetry.</span><span style="color:#6F42C1;">startRetryTask</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以看到这里调用了 doStoreProviderMetadata() 方法和 saveProperties() 方法。其中， doStoreProviderMetadata() 方法是一个抽象方法，对于不同的元数据中心实现有不同的实现，这个方法的具体实现在后面会展开分析。saveProperties() 方法中会更新 properties 字段，递增本地缓存文件的版本号，最后（同步/异步）执行 SaveProperties 任务，更新本地缓存文件的内容，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveProperties</span><span style="color:#E1E4E8;">(MetadataIdentifier metadataIdentifier, String value, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> add, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> sync) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (file </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (add) { </span><span style="color:#6A737D;">// 更新properties中的元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(metadataIdentifier.</span><span style="color:#B392F0;">getUniqueKey</span><span style="color:#E1E4E8;">(KeyTypeEnum.UNIQUE_KEY), value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(metadataIdentifier.</span><span style="color:#B392F0;">getUniqueKey</span><span style="color:#E1E4E8;">(KeyTypeEnum.UNIQUE_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 递增版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lastCacheChanged.</span><span style="color:#B392F0;">incrementAndGet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sync) { </span><span style="color:#6A737D;">// 同步更新本地缓存文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SaveProperties</span><span style="color:#E1E4E8;">(version).</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 异步更新本地缓存文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        reportCacheExecutor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SaveProperties</span><span style="color:#E1E4E8;">(version));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveProperties</span><span style="color:#24292E;">(MetadataIdentifier metadataIdentifier, String value, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> add, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> sync) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (file </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (add) { </span><span style="color:#6A737D;">// 更新properties中的元数据</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(metadataIdentifier.</span><span style="color:#6F42C1;">getUniqueKey</span><span style="color:#24292E;">(KeyTypeEnum.UNIQUE_KEY), value);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(metadataIdentifier.</span><span style="color:#6F42C1;">getUniqueKey</span><span style="color:#24292E;">(KeyTypeEnum.UNIQUE_KEY));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 递增版本</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastCacheChanged.</span><span style="color:#6F42C1;">incrementAndGet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sync) { </span><span style="color:#6A737D;">// 同步更新本地缓存文件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SaveProperties</span><span style="color:#24292E;">(version).</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 异步更新本地缓存文件</span></span>
<span class="line"><span style="color:#24292E;">        reportCacheExecutor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SaveProperties</span><span style="color:#24292E;">(version));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面我们再来看 SaveProperties 任务的核心方法------ doSaveProperties() 方法，该方法中<strong>实现了刷新本地缓存文件的全部操作</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSaveProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> version) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (version </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> lastCacheChanged.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 对比当前版本号和此次SaveProperties任务的版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (file </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 检测本地缓存文件是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建lock文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        File lockfile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(file.</span><span style="color:#B392F0;">getAbsolutePath</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.lock&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">lockfile.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            lockfile.</span><span style="color:#B392F0;">createNewFile</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (RandomAccessFile raf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RandomAccessFile</span><span style="color:#E1E4E8;">(lockfile, </span><span style="color:#9ECBFF;">&quot;rw&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                FileChannel channel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> raf.</span><span style="color:#B392F0;">getChannel</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            FileLock lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> channel.</span><span style="color:#B392F0;">tryLock</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 对lock文件加锁</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lock </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IOException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can not lock the metadataReport cache file &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> file.</span><span style="color:#B392F0;">getAbsolutePath</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, ignore and retry later, maybe multi java process use the file, please config: dubbo.metadata.file=xxx.properties&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">file.</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 保证本地缓存文件存在</span></span>
<span class="line"><span style="color:#E1E4E8;">                    file.</span><span style="color:#B392F0;">createNewFile</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将properties中的元数据保存到本地缓存文件中</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (FileOutputStream outputFile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FileOutputStream</span><span style="color:#E1E4E8;">(file)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    properties.</span><span style="color:#B392F0;">store</span><span style="color:#E1E4E8;">(outputFile, </span><span style="color:#9ECBFF;">&quot;Dubbo metadataReport Cache&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                lock.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 释放lock文件上的锁</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (version </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> lastCacheChanged.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 比较版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 如果写文件失败，则重新提交SaveProperties任务，再次尝试</span></span>
<span class="line"><span style="color:#E1E4E8;">            reportCacheExecutor.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SaveProperties</span><span style="color:#E1E4E8;">(lastCacheChanged.</span><span style="color:#B392F0;">incrementAndGet</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSaveProperties</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> version) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (version </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> lastCacheChanged.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 对比当前版本号和此次SaveProperties任务的版本号</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (file </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 检测本地缓存文件是否存在</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建lock文件</span></span>
<span class="line"><span style="color:#24292E;">        File lockfile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(file.</span><span style="color:#6F42C1;">getAbsolutePath</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.lock&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">lockfile.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            lockfile.</span><span style="color:#6F42C1;">createNewFile</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (RandomAccessFile raf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(lockfile, </span><span style="color:#032F62;">&quot;rw&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                FileChannel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> raf.</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            FileLock lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">tryLock</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 对lock文件加锁</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lock </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IOException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Can not lock the metadataReport cache file &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> file.</span><span style="color:#6F42C1;">getAbsolutePath</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, ignore and retry later, maybe multi java process use the file, please config: dubbo.metadata.file=xxx.properties&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">file.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 保证本地缓存文件存在</span></span>
<span class="line"><span style="color:#24292E;">                    file.</span><span style="color:#6F42C1;">createNewFile</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将properties中的元数据保存到本地缓存文件中</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileOutputStream outputFile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(file)) {</span></span>
<span class="line"><span style="color:#24292E;">                    properties.</span><span style="color:#6F42C1;">store</span><span style="color:#24292E;">(outputFile, </span><span style="color:#032F62;">&quot;Dubbo metadataReport Cache&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                lock.</span><span style="color:#6F42C1;">release</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 释放lock文件上的锁</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (version </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> lastCacheChanged.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 比较版本号</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果写文件失败，则重新提交SaveProperties任务，再次尝试</span></span>
<span class="line"><span style="color:#24292E;">            reportCacheExecutor.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SaveProperties</span><span style="color:#24292E;">(lastCacheChanged.</span><span style="color:#6F42C1;">incrementAndGet</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>了解了刷新本地缓存文件的核心逻辑之后，我们再来看 AbstractMetadataReport 中<strong>失败重试</strong>的逻辑。MetadataReportRetry 中维护了如下核心字段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 执行重试任务的线程池</span></span>
<span class="line"><span style="color:#E1E4E8;">ScheduledExecutorService retryExecutor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newScheduledThreadPool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamedThreadFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DubboMetadataReportRetryTimer&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 重试任务关联的Future对象</span></span>
<span class="line"><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> ScheduledFuture retryScheduledFuture;</span></span>
<span class="line"><span style="color:#6A737D;">// 记录重试任务的次数</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AtomicInteger retryCounter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicInteger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 重试任务的时间间隔</span></span>
<span class="line"><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> retryPeriod;</span></span>
<span class="line"><span style="color:#6A737D;">// 无失败上报的元数据之后，重试任务会再执行600次，才会销毁</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> retryTimesIfNonFail </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">600</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 失败重试的次数上限，默认为100次，即重试失败100次之后会放弃</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> retryLimit;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 执行重试任务的线程池</span></span>
<span class="line"><span style="color:#24292E;">ScheduledExecutorService retryExecutor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newScheduledThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NamedThreadFactory</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DubboMetadataReportRetryTimer&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 重试任务关联的Future对象</span></span>
<span class="line"><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> ScheduledFuture retryScheduledFuture;</span></span>
<span class="line"><span style="color:#6A737D;">// 记录重试任务的次数</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AtomicInteger retryCounter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicInteger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 重试任务的时间间隔</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> retryPeriod;</span></span>
<span class="line"><span style="color:#6A737D;">// 无失败上报的元数据之后，重试任务会再执行600次，才会销毁</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> retryTimesIfNonFail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">600</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 失败重试的次数上限，默认为100次，即重试失败100次之后会放弃</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> retryLimit;</span></span></code></pre></div><p>在 startRetryTask() 方法中，MetadataReportRetry 会创建一个重试任务，并提交到 retryExecutor 线程池中等待执行（如果已存在重试任务，则不会创建新任务）。在重试任务中会调用 AbstractMetadataReport.retry() 方法完成重新上报，当然也会判断 retryLimit 等执行条件，具体实现比较简单，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>AbstractMetadataReport.retry() 方法的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">retry</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doHandleMetadataCollection</span><span style="color:#E1E4E8;">(failedReports);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doHandleMetadataCollection</span><span style="color:#E1E4E8;">(Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">MetadataIdentifier, Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> metadataMap) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (metadataMap.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 没有上报失败的元数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历failedReports集合中失败上报的元数据，逐个调用storeProviderMetadata()方法或storeConsumerMetadata()方法重新上报</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;</span><span style="color:#F97583;">Map</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">Entry</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">MetadataIdentifier</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;&gt; iterable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> metadataMap.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (iterable.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map.Entry&lt;</span><span style="color:#F97583;">MetadataIdentifier</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iterable.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (PROVIDER_SIDE.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(item.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSide</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">storeProviderMetadata</span><span style="color:#E1E4E8;">(item.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), (FullServiceDefinition) item.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CONSUMER_SIDE.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(item.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSide</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">storeConsumerMetadata</span><span style="color:#E1E4E8;">(item.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), (Map) item.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">retry</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doHandleMetadataCollection</span><span style="color:#24292E;">(failedReports);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doHandleMetadataCollection</span><span style="color:#24292E;">(Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">MetadataIdentifier, Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> metadataMap) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (metadataMap.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 没有上报失败的元数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历failedReports集合中失败上报的元数据，逐个调用storeProviderMetadata()方法或storeConsumerMetadata()方法重新上报</span></span>
<span class="line"><span style="color:#24292E;">    Iterator&lt;</span><span style="color:#D73A49;">Map</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">MetadataIdentifier</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;&gt; iterable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> metadataMap.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (iterable.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        Map.Entry&lt;</span><span style="color:#D73A49;">MetadataIdentifier</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iterable.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (PROVIDER_SIDE.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(item.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSide</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">storeProviderMetadata</span><span style="color:#24292E;">(item.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), (FullServiceDefinition) item.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CONSUMER_SIDE.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(item.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSide</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">storeConsumerMetadata</span><span style="color:#24292E;">(item.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), (Map) item.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 AbstractMetadataReport 的构造方法中，会根据 reportServerURL（也就是后面的 metadataReportURL）参数启动一个&quot;天&quot;级别的定时任务，该定时任务会执行 publishAll() 方法，其中会通过 doHandleMetadataCollection() 方法将 allMetadataReports 集合中的全部元数据重新进行上报。该定时任务默认是在凌晨 02:00~06:00 启动，每天执行一次。</p><p>到此为止，AbstractMetadataReport 为子类实现的公共能力就介绍完了，其他方法都是委托给了相应的 do*() 方法，这些 do*() 方法都是在 AbstractMetadataReport 子类中实现的。</p>`,22),g=a("h4",{id:"_2-basemetadataidentifier",tabindex:"-1"},[s("2. BaseMetadataIdentifier "),a("a",{class:"header-anchor",href:"#_2-basemetadataidentifier","aria-label":'Permalink to "2. BaseMetadataIdentifier"'},"​")],-1),D=a("p",null,"在 AbstractMetadataReport 上报元数据的时候，元数据对应的 Key 都是BaseMetadataIdentifier 类型的对象，其继承关系如下图所示：",-1),A=l(`<p>BaseMetadataIdentifier 继承关系图</p><ul><li><p>MetadataIdentifier 中包含了服务接口、version、group、side 和 application 五个核心字段。</p></li><li><p>ServiceMetadataIdentifier 中包含了服务接口、version、group、side、revision 和 protocol 六个核心字段。</p></li><li><p>SubscriberMetadataIdentifier 中包含了服务接口、version、group、side 和 revision 五个核心字段。</p></li></ul><h4 id="_3-metadatareportfactory-metadatareportinstance" tabindex="-1">3. MetadataReportFactory &amp; MetadataReportInstance <a class="header-anchor" href="#_3-metadatareportfactory-metadatareportinstance" aria-label="Permalink to &quot;3. MetadataReportFactory \\&amp; MetadataReportInstance&quot;">​</a></h4><p>MetadataReportFactory 是用来创建 MetadataReport 实例的工厂，具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;redis&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetadataReportFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Adaptive</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&quot;protocol&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    MetadataReport </span><span style="color:#B392F0;">getMetadataReport</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;redis&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetadataReportFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Adaptive</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&quot;protocol&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    MetadataReport </span><span style="color:#6F42C1;">getMetadataReport</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MetadataReportFactory 是个扩展接口，从 @SPI 注解的默认值可以看出<strong>Dubbo 默认使用 Redis 实现元数据中心</strong> 。</p><p>Dubbo 提供了针对 ZooKeeper、Redis、Consul 等作为元数据中心的 MetadataReportFactory 实现，如下图所示：</p>`,7),S=l(`<p>MetadataReportFactory 继承关系图</p><p>这些 MetadataReportFactory 实现都继承了 AbstractMetadataReportFactory，在 AbstractMetadataReportFactory 提供了缓存 MetadataReport 实现的功能，并定义了一个 createMetadataReport() 抽象方法供子类实现。另外，AbstractMetadataReportFactory 实现了 MetadataReportFactory 接口的 getMetadataReport() 方法，下面我们就来简单看一下该方法的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MetadataReport </span><span style="color:#B392F0;">getMetadataReport</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 清理export、refer参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">setPath</span><span style="color:#E1E4E8;">(MetadataReport.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">removeParameters</span><span style="color:#E1E4E8;">(EXPORT_KEY, REFER_KEY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">toServiceString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    LOCK.</span><span style="color:#B392F0;">lock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从SERVICE_STORE_MAP集合（ConcurrentHashMap&lt;String, MetadataReport&gt;类型）中查询是否已经缓存有对应的MetadataReport对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        MetadataReport metadataReport </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SERVICE_STORE_MAP.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (metadataReport </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 直接返回缓存的MetadataReport对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> metadataReport;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建新的MetadataReport对象，createMetadataReport()方法由子类具体实现</span></span>
<span class="line"><span style="color:#E1E4E8;">        metadataReport </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMetadataReport</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将MetadataReport缓存到SERVICE_STORE_MAP集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        SERVICE_STORE_MAP.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, metadataReport);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> metadataReport;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        LOCK.</span><span style="color:#B392F0;">unlock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MetadataReport </span><span style="color:#6F42C1;">getMetadataReport</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 清理export、refer参数</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">setPath</span><span style="color:#24292E;">(MetadataReport.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">removeParameters</span><span style="color:#24292E;">(EXPORT_KEY, REFER_KEY);</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">toServiceString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    LOCK.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从SERVICE_STORE_MAP集合（ConcurrentHashMap&lt;String, MetadataReport&gt;类型）中查询是否已经缓存有对应的MetadataReport对象</span></span>
<span class="line"><span style="color:#24292E;">        MetadataReport metadataReport </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SERVICE_STORE_MAP.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (metadataReport </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 直接返回缓存的MetadataReport对象</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> metadataReport;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建新的MetadataReport对象，createMetadataReport()方法由子类具体实现</span></span>
<span class="line"><span style="color:#24292E;">        metadataReport </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMetadataReport</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将MetadataReport缓存到SERVICE_STORE_MAP集合中</span></span>
<span class="line"><span style="color:#24292E;">        SERVICE_STORE_MAP.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, metadataReport);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> metadataReport;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        LOCK.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MetadataReportInstance 是一个单例对象，其中会获取 MetadataReportFactory 的适配器，并根据 init() 方法传入的 metadataReportURL 选择对应的 MetadataReportFactory 创建 MetadataReport 实例，这也是当前 Dubbo 进程全局唯一的 MetadataReport 实例。</p><p>MetadataReportInstance 的具体实现比较简单，这里就不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/dubbo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><h4 id="_4-zookeepermetadatareport" tabindex="-1">4. ZookeeperMetadataReport <a class="header-anchor" href="#_4-zookeepermetadatareport" aria-label="Permalink to &quot;4. ZookeeperMetadataReport&quot;">​</a></h4><p>下面我们来看 dubbo-metadata-report-zookeeper 模块是如何接入 ZooKeeper 作为元数据中心的。</p><p>我们首先关注 dubbo-metadata-report-zookeeper 模块的 SPI 文件，可以看到 ZookeeperMetadataReportFactory 的扩展名称是 zookeeper：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zookeeper</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zookeeper</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory</span></span></code></pre></div><p>在 ZookeeperMetadataReportFactory 的 createMetadataReport() 方法中会创建 ZookeeperMetadataReport 这个 MetadataReport 实现类的对象。</p><p><strong>在 ZookeeperMetadataReport 中维护了一个 ZookeeperClient 实例用来和 ZooKeeper 进行交互</strong>。ZookeeperMetadataReport 读写元数据的根目录是 metadataReportURL 的 group 参数值，默认值为 dubbo。</p><p>下面再来看 ZookeeperMetadataReport 对 AbstractMetadataReport 中各个 do*() 方法的实现，这些方法核心都是通过 ZookeeperClient 创建、查询、删除对应的 ZNode 节点，没有什么复杂的逻辑，<strong>关键是明确一下操作的 ZNode 节点的 path 是什么</strong>。</p><p>doStoreProviderMetadata() 方法和 doStoreConsumerMetadata() 方法会调用 storeMetadata() 创建相应的 ZNode 节点：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">storeMetadata</span><span style="color:#E1E4E8;">(MetadataIdentifier metadataIdentifier, String v) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    zkClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getNodePath</span><span style="color:#E1E4E8;">(metadataIdentifier), v, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">getNodePath</span><span style="color:#E1E4E8;">(BaseMetadataIdentifier metadataIdentifier) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toRootDir</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> metadataIdentifier.</span><span style="color:#B392F0;">getUniqueKey</span><span style="color:#E1E4E8;">(KeyTypeEnum.PATH);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">storeMetadata</span><span style="color:#24292E;">(MetadataIdentifier metadataIdentifier, String v) {</span></span>
<span class="line"><span style="color:#24292E;">    zkClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getNodePath</span><span style="color:#24292E;">(metadataIdentifier), v, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">String </span><span style="color:#6F42C1;">getNodePath</span><span style="color:#24292E;">(BaseMetadataIdentifier metadataIdentifier) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toRootDir</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> metadataIdentifier.</span><span style="color:#6F42C1;">getUniqueKey</span><span style="color:#24292E;">(KeyTypeEnum.PATH);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MetadataIdentifier 对象对应 ZNode 节点的 path 默认格式是 :</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">metadata</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">服务接口</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">group</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">side</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">application</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">metadata</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">服务接口</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">group</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">side</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">application</span></span></code></pre></div><p>对应 ZNode 节点的 Value 是 ServiceDefinition 序列化后的 JSON 字符串。</p><p>doSaveMetadata()、doRemoveMetadata() 以及 doGetExportedURLs() 方法参数是 ServiceMetadataIdentifier 对象，对应的 ZNode 节点 path 是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">metadata</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">服务接口</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">group</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">side</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">protocol</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">revision</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">metadata</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">服务接口</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">group</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">side</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">protocol</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">revision</span></span></code></pre></div><p>doSaveSubscriberData()、doGetSubscribedURLs() 方法的参数是 SubscriberMetadataIdentifier 对象，对应的 ZNode 节点 path 是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">metadata</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">服务接口</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">group</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">side</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">revision</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">metadata</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">服务接口</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">group</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">side</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">revision</span></span></code></pre></div><h3 id="metadataserviceexporter" tabindex="-1">MetadataServiceExporter <a class="header-anchor" href="#metadataserviceexporter" aria-label="Permalink to &quot;MetadataServiceExporter&quot;">​</a></h3><p>了解了 MetadataService 接口的核心功能和底层实现之后，我们接着再来看 MetadataServiceExporter 接口，这个接口<strong>负责将 MetadataService 接口作为一个 Dubbo 服务发布出去</strong>。</p><p>下面来看 MetadataServiceExporter 接口的具体定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MetadataServiceExporter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将MetadataService作为一个Dubbo服务发布出去</span></span>
<span class="line"><span style="color:#E1E4E8;">    MetadataServiceExporter </span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注销掉MetadataService服务</span></span>
<span class="line"><span style="color:#E1E4E8;">    MetadataServiceExporter </span><span style="color:#B392F0;">unexport</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// MetadataService可能以多种协议发布，这里返回发布MetadataService服务的所有URL</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getExportedURLs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检测MetadataService服务是否已经发布</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isExported</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MetadataServiceExporter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将MetadataService作为一个Dubbo服务发布出去</span></span>
<span class="line"><span style="color:#24292E;">    MetadataServiceExporter </span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注销掉MetadataService服务</span></span>
<span class="line"><span style="color:#24292E;">    MetadataServiceExporter </span><span style="color:#6F42C1;">unexport</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// MetadataService可能以多种协议发布，这里返回发布MetadataService服务的所有URL</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getExportedURLs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检测MetadataService服务是否已经发布</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isExported</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>MetadataServiceExporter 只有 ConfigurableMetadataServiceExporter 这一个实现</strong>，如下图所示：</p>`,26),C=l(`<p>MetadataServiceExporter 继承关系图</p><p>ConfigurableMetadataServiceExporter 的核心实现是 export() 方法，其中会创建一个 ServiceConfig 对象完成 MetadataService 服务的发布：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ConfigurableMetadataServiceExporter </span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isExported</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建ServiceConfig对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        ServiceConfig&lt;</span><span style="color:#F97583;">MetadataService</span><span style="color:#E1E4E8;">&gt; serviceConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ServiceConfig&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceConfig.</span><span style="color:#B392F0;">setApplication</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getApplicationConfig</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceConfig.</span><span style="color:#B392F0;">setRegistries</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getRegistries</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceConfig.</span><span style="color:#B392F0;">setProtocol</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">generateMetadataProtocol</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 设置Protocol（默认是Dubbo）</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceConfig.</span><span style="color:#B392F0;">setInterface</span><span style="color:#E1E4E8;">(MetadataService.class); </span><span style="color:#6A737D;">// 设置服务接口</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceConfig.</span><span style="color:#B392F0;">setRef</span><span style="color:#E1E4E8;">(metadataService); </span><span style="color:#6A737D;">// 设置MetadataService对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceConfig.</span><span style="color:#B392F0;">setGroup</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getApplicationConfig</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 设置group</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceConfig.</span><span style="color:#B392F0;">setVersion</span><span style="color:#E1E4E8;">(metadataService.</span><span style="color:#B392F0;">version</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 设置version</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 发布MetadataService服务，ServiceConfig发布服务的流程在前面已经详细分析过了，这里不再展开</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceConfig.</span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.serviceConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceConfig;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 输出日志</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ConfigurableMetadataServiceExporter </span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isExported</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建ServiceConfig对象</span></span>
<span class="line"><span style="color:#24292E;">        ServiceConfig&lt;</span><span style="color:#D73A49;">MetadataService</span><span style="color:#24292E;">&gt; serviceConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ServiceConfig&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        serviceConfig.</span><span style="color:#6F42C1;">setApplication</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getApplicationConfig</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        serviceConfig.</span><span style="color:#6F42C1;">setRegistries</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getRegistries</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        serviceConfig.</span><span style="color:#6F42C1;">setProtocol</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">generateMetadataProtocol</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 设置Protocol（默认是Dubbo）</span></span>
<span class="line"><span style="color:#24292E;">        serviceConfig.</span><span style="color:#6F42C1;">setInterface</span><span style="color:#24292E;">(MetadataService.class); </span><span style="color:#6A737D;">// 设置服务接口</span></span>
<span class="line"><span style="color:#24292E;">        serviceConfig.</span><span style="color:#6F42C1;">setRef</span><span style="color:#24292E;">(metadataService); </span><span style="color:#6A737D;">// 设置MetadataService对象</span></span>
<span class="line"><span style="color:#24292E;">        serviceConfig.</span><span style="color:#6F42C1;">setGroup</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getApplicationConfig</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 设置group</span></span>
<span class="line"><span style="color:#24292E;">        serviceConfig.</span><span style="color:#6F42C1;">setVersion</span><span style="color:#24292E;">(metadataService.</span><span style="color:#6F42C1;">version</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 设置version</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发布MetadataService服务，ServiceConfig发布服务的流程在前面已经详细分析过了，这里不再展开</span></span>
<span class="line"><span style="color:#24292E;">        serviceConfig.</span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceConfig;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 输出日志</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="servicenamemapping" tabindex="-1">ServiceNameMapping <a class="header-anchor" href="#servicenamemapping" aria-label="Permalink to &quot;ServiceNameMapping&quot;">​</a></h3><p><strong>ServiceNameMapping 接口的主要功能是实现 Service ID 到 Service Name 之间的转换，底层会依赖配置中心实现数据存储和查询</strong>。ServiceNameMapping 接口的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceNameMapping</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 服务接口、group、version、protocol四部分构成了Service ID，并与当前Service Name之间形成映射，记录到配置中心</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceInterface</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">group</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">version</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">protocol</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据服务接口、group、version、protocol四部分构成的Service ID，查询对应的Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceInterface</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">group</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">version</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">protocol</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取默认的ServiceNameMapping接口的扩展实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ServiceNameMapping </span><span style="color:#B392F0;">getDefaultExtension</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(ServiceNameMapping.class).</span><span style="color:#B392F0;">getDefaultExtension</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceNameMapping</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 服务接口、group、version、protocol四部分构成了Service ID，并与当前Service Name之间形成映射，记录到配置中心</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceInterface</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">group</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">version</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">protocol</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据服务接口、group、version、protocol四部分构成的Service ID，查询对应的Service Name</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceInterface</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">group</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">version</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">protocol</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取默认的ServiceNameMapping接口的扩展实现</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ServiceNameMapping </span><span style="color:#6F42C1;">getDefaultExtension</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(ServiceNameMapping.class).</span><span style="color:#6F42C1;">getDefaultExtension</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>DynamicConfigurationServiceNameMapping 是 ServiceNameMapping 的默认实现</strong>，也是唯一实现，其中会依赖 DynamicConfiguration 读写配置中心，完成 Service ID 和 Service Name 的映射。首先来看 DynamicConfigurationServiceNameMapping 的 map() 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String serviceInterface, String group, String version, String protocol) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 跳过MetadataService接口的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (IGNORED_SERVICE_INTERFACES.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(serviceInterface)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    DynamicConfiguration dynamicConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DynamicConfiguration.</span><span style="color:#B392F0;">getDynamicConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从ApplicationModel中获取Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    String content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在配置中心创建映射关系，这里的buildGroup()方法虽然接收四个参数，但是只使用了serviceInterface</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 也就是使用创建了服务接口到Service Name的映射</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 可以暂时将配置中心理解为一个KV存储，这里的Key是buildGroup()方法返回值+Service Name构成的，value是content（即时间戳）</span></span>
<span class="line"><span style="color:#E1E4E8;">        dynamicConfiguration.</span><span style="color:#B392F0;">publishConfig</span><span style="color:#E1E4E8;">(key, </span><span style="color:#B392F0;">buildGroup</span><span style="color:#E1E4E8;">(serviceInterface, group, version, protocol), content);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String serviceInterface, String group, String version, String protocol) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 跳过MetadataService接口的处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (IGNORED_SERVICE_INTERFACES.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(serviceInterface)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#24292E;">    DynamicConfiguration dynamicConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DynamicConfiguration.</span><span style="color:#6F42C1;">getDynamicConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从ApplicationModel中获取Service Name</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    String content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在配置中心创建映射关系，这里的buildGroup()方法虽然接收四个参数，但是只使用了serviceInterface</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 也就是使用创建了服务接口到Service Name的映射</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 可以暂时将配置中心理解为一个KV存储，这里的Key是buildGroup()方法返回值+Service Name构成的，value是content（即时间戳）</span></span>
<span class="line"><span style="color:#24292E;">        dynamicConfiguration.</span><span style="color:#6F42C1;">publishConfig</span><span style="color:#24292E;">(key, </span><span style="color:#6F42C1;">buildGroup</span><span style="color:#24292E;">(serviceInterface, group, version, protocol), content);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 DynamicConfigurationServiceNameMapping.get() 方法中，会根据传入的服务接口名称、group、version、protocol 组成 Service ID，查找对应的 Service Name，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Set</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(String serviceInterface, String group, String version, String protocol) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    DynamicConfiguration dynamicConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DynamicConfiguration.</span><span style="color:#B392F0;">getDynamicConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据Service ID从配置查找Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; serviceNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dynamicConfiguration.</span><span style="color:#B392F0;">getConfigKeys</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">buildGroup</span><span style="color:#E1E4E8;">(serviceInterface, group, version, protocol));</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceNames.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(keys);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回查找到的全部Service Name</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">unmodifiableSet</span><span style="color:#E1E4E8;">(serviceNames);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Set</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(String serviceInterface, String group, String version, String protocol) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取DynamicConfiguration对象</span></span>
<span class="line"><span style="color:#24292E;">    DynamicConfiguration dynamicConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DynamicConfiguration.</span><span style="color:#6F42C1;">getDynamicConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据Service ID从配置查找Service Name</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; serviceNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dynamicConfiguration.</span><span style="color:#6F42C1;">getConfigKeys</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">buildGroup</span><span style="color:#24292E;">(serviceInterface, group, version, protocol));</span></span>
<span class="line"><span style="color:#24292E;">        serviceNames.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(keys);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回查找到的全部Service Name</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">unmodifiableSet</span><span style="color:#24292E;">(serviceNames);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们重点介绍了服务自省架构中元数据相关的实现。</p><ul><li><p>首先我们介绍了 ServiceInstance 和 ServiceDefinition 是如何抽象一个服务实例以及服务定义的。</p></li><li><p>紧接着讲解了元数据服务接口的定义，也就是 MetadataService 接口及核心的扩展实现。</p></li><li><p>接下来详细分析了 MetadataReport 接口的实现，了解了它是如何与元数据中心配合，实现元数据上报功能的。</p></li><li><p>然后还说明了 MetadataServiceExporter 的实现，了解了发布元数据服务的核心原理。</p></li><li><p>最后，我们介绍了 ServiceNameMapping 接口以及其默认实现，它实现了 Service ID 与 Service Name 的映射，也是服务自省架构中不可或缺的一部分。</p></li></ul><p>下一课时，我们将继续介绍服务实例注册相关的实现，记得按时来听课。</p>`,14);function f(b,m,R,h,M,B){const n=e("Image");return t(),r("div",null,[E,p(n,{alt:"6.png",src:"https://s0.lgstatic.com/i/image/M00/8C/22/CgqCHl_lrYOAIzjeAAFEk3cUdpg570.png"}),s(),y,i,d,F,p(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image2/M01/03/FC/CgpVE1_lrZGANC4vAAGdcllZU9o940.png"}),s(),u,p(n,{alt:"2.png",src:"https://s0.lgstatic.com/i/image2/M01/03/FA/Cip5yF_lramAYf82AAFkkbA0N2g785.png"}),s(),v,p(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/8B/DD/CgqCHl_hcauAR9AQAAG7kMJSlc8827.png"}),s(),g,D,p(n,{alt:"3.png",src:"https://s0.lgstatic.com/i/image/M00/8C/17/Ciqc1F_lrb-Ad3a5AAGJ2ySdyBE643.png"}),s(),A,p(n,{alt:"4.png",src:"https://s0.lgstatic.com/i/image/M00/8C/22/CgqCHl_lrcmAEIYBAAFSOVpEU1Y779.png"}),s(),S,p(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image2/M01/03/B6/Cip5yF_hcfmAMtHdAABVR_mzQyg047.png"}),s(),C])}const P=o(c,[["render",f]]);export{_ as __pageData,P as default};
