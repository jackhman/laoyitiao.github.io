import{_ as a,j as l,o as p,g as o,k as e,Q as s}from"./chunks/framework.4e7d56ce.js";const C=JSON.parse('{"title":"代码规范检查 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5247) 19  性能优化：Go 语言如何进行代码检查和优化？.md","filePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5247) 19  性能优化：Go 语言如何进行代码检查和优化？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/22 讲通关 Go 语言_文档/(5247) 19  性能优化：Go 语言如何进行代码检查和优化？.md"},t=s(`<p>在上节课中，我为你留了一个小作业：在运行 go test 命令时，使用 -benchmem 这个 Flag 进行内存统计。该作业的答案比较简单，命令如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-bench=.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-benchmem</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">./ch18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-bench=.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-benchmem</span><span style="color:#24292E;">  </span><span style="color:#032F62;">./ch18</span></span></code></pre></div><p>运行这一命令就可以查看内存统计的结果了。这种通过 -benchmem 查看内存的方法<strong>适用于所有的基准测试用例</strong>。</p><p>今天要讲的内容是 Go 语言的代码检查和优化，下面我们开始本讲内容的讲解。</p><p>在项目开发中，<strong>保证代码质量和性能的手段不只有单元测试和基准测试</strong> ，<strong>还有代码规范检查和性能优化</strong>。</p><ul><li><p><strong>代码规范检查</strong>是对单元测试的一种补充，它可以从非业务的层面检查你的代码是否还有优化的空间，比如变量是否被使用、是否是死代码等等。</p></li><li><p><strong>性能优化</strong>是通过基准测试来衡量的，这样我们才知道优化部分是否真的提升了程序的性能。</p></li></ul><h3 id="代码规范检查" tabindex="-1">代码规范检查 <a class="header-anchor" href="#代码规范检查" aria-label="Permalink to &quot;代码规范检查&quot;">​</a></h3><h4 id="什么是代码规范检查" tabindex="-1">什么是代码规范检查 <a class="header-anchor" href="#什么是代码规范检查" aria-label="Permalink to &quot;什么是代码规范检查&quot;">​</a></h4><p>代码规范检查，顾名思义，是从 Go 语言层面出发，依据 Go 语言的规范，对你写的代码进行的<strong>静态扫描检查</strong>，这种检查和你的业务无关。</p><p>比如你定义了个常量，从未使用过，虽然对代码运行并没有造成什么影响，但是这个常量是可以删除的，代码如下所示：</p><p><em>ch19/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>示例中的常量 name 其实并没有使用，所以为了节省内存你可以删除它，这种<strong>未使用常量</strong>的情况就可以通过代码规范检查检测出来。</p><p>再比如，你调用了一个函数，该函数返回了一个 error，但是你并没有对该 error 做判断，这种情况下，程序也可以正常编译运行。但是代码写得不严谨，因为返回的 error 被我们忽略了。代码如下所示：</p><p><em>ch19/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   os.</span><span style="color:#79B8FF;">Mkdir</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tmp&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0666</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   os.</span><span style="color:#005CC5;">Mkdir</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tmp&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0666</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>示例代码中，Mkdir 函数是有返回 error 的，但是你并没有对返回的 error 做判断，这种情况下，哪怕创建目录失败，你也不知道，因为错误被你忽略了。如果你使用代码规范检查，这类潜在的问题也会被检测出来。</p><p>以上两个例子可以帮你理解什么是代码规范检查、它有什么用。除了这两种情况，还有拼写问题、死代码、代码简化检测、命名中带下划线、冗余代码等，都可以使用代码规范检查检测出来。</p><h4 id="golangci-lint" tabindex="-1">golangci-lint <a class="header-anchor" href="#golangci-lint" aria-label="Permalink to &quot;golangci-lint&quot;">​</a></h4><p>要想对代码进行检查，则需要对代码进行扫描，静态分析写的代码是否存在规范问题。</p><blockquote><p>小提示：静态代码分析是不会运行代码的。</p></blockquote><p>可用于 Go 语言代码分析的工具有很多，比如 golint、gofmt、misspell 等，如果一一引用配置，就会比较烦琐，所以通常我们不会单独地使用它们，而是使用 golangci-lint。</p><p><a href="https://github.com/golangci/golangci-lint" target="_blank" rel="noreferrer">golangci-lint</a> 是一个<strong>集成工具</strong>，它集成了很多静态代码分析工具，便于我们使用。通过配置这一工具，我们可以很灵活地启用需要的代码规范检查。</p><p>如果要使用 golangci-lint，首先需要安装。因为 golangci-lint 本身就是 Go 语言编写的，所以我们可以从源代码安装它，打开终端，输入如下命令即可安装。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/golangci/golangci-lint/cmd/golangci-lint@v1.32.2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/golangci/golangci-lint/cmd/golangci-lint@v1.32.2</span></span></code></pre></div><p>使用这一命令安装的是 v1.32.2 版本的 golangci-lint，安装完成后，在终端输入如下命令，检测是否安装成功。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">golangci-lint</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">version</span></span>
<span class="line"><span style="color:#B392F0;">golangci-lint</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">has</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">version</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1.32.2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">golangci-lint</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span></span>
<span class="line"><span style="color:#6F42C1;">golangci-lint</span><span style="color:#24292E;"> </span><span style="color:#032F62;">has</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1.32.2</span></span></code></pre></div><blockquote><p>小提示：在 MacOS 下也可以使用 brew 来安装 golangci-lint。</p></blockquote><p>好了，安装成功 golangci-lint 后，就可以使用它进行代码检查了，我以上面示例中的常量 name 和 Mkdir 函数为例，演示 golangci-lint 的使用。在终端输入如下命令回车：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">golangci-lint</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ch19/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">golangci-lint</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ch19/</span></span></code></pre></div><p>这一示例表示要检测目录中 ch19 下的代码，运行后可以看到如下输出结果。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ch19/main.go:5:7:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">name</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unused</span><span style="color:#E1E4E8;"> (deadcode)</span></span>
<span class="line"><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">^</span></span>
<span class="line"><span style="color:#B392F0;">ch19/main.go:8:10:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Error</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">os.Mkdir</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checked</span><span style="color:#E1E4E8;"> (errcheck)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">os.Mkdir(</span><span style="color:#B392F0;">&quot;tmp&quot;</span><span style="color:#B392F0;">,0666</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ch19/main.go:5:7:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">name</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unused</span><span style="color:#24292E;"> (deadcode)</span></span>
<span class="line"><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">^</span></span>
<span class="line"><span style="color:#6F42C1;">ch19/main.go:8:10:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Error</span><span style="color:#24292E;"> </span><span style="color:#032F62;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">os.Mkdir</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checked</span><span style="color:#24292E;"> (errcheck)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">os.Mkdir(</span><span style="color:#6F42C1;">&quot;tmp&quot;</span><span style="color:#6F42C1;">,0666</span><span style="color:#24292E;">)</span></span></code></pre></div><p>通过代码检测结果可以看到，我上一小节提到的两个代码规范问题都被检测出来了。检测出问题后，你就可以修复它们，让代码更加符合规范。</p><h4 id="golangci-lint-配置" tabindex="-1">golangci-lint 配置 <a class="header-anchor" href="#golangci-lint-配置" aria-label="Permalink to &quot;golangci-lint 配置&quot;">​</a></h4><p>golangci-lint 的配置比较灵活，比如你可以自定义要启用哪些 linter。golangci-lint 默认启用的 linter，包括这些：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">deadcode</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">死代码检查</span></span>
<span class="line"><span style="color:#B392F0;">errcheck</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">返回错误是否使用检查</span></span>
<span class="line"><span style="color:#B392F0;">gosimple</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">检查代码是否可以简化</span></span>
<span class="line"><span style="color:#B392F0;">govet</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">代码可疑检查，比如格式化字符串和类型不一致</span></span>
<span class="line"><span style="color:#B392F0;">ineffassign</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">检查是否有未使用的代码</span></span>
<span class="line"><span style="color:#B392F0;">staticcheck</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">静态分析检查</span></span>
<span class="line"><span style="color:#B392F0;">structcheck</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">查找未使用的结构体字段</span></span>
<span class="line"><span style="color:#B392F0;">typecheck</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">类型检查</span></span>
<span class="line"><span style="color:#B392F0;">unused</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">未使用代码检查</span></span>
<span class="line"><span style="color:#B392F0;">varcheck</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">未使用的全局变量和常量检查</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">deadcode</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">死代码检查</span></span>
<span class="line"><span style="color:#6F42C1;">errcheck</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">返回错误是否使用检查</span></span>
<span class="line"><span style="color:#6F42C1;">gosimple</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">检查代码是否可以简化</span></span>
<span class="line"><span style="color:#6F42C1;">govet</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">代码可疑检查，比如格式化字符串和类型不一致</span></span>
<span class="line"><span style="color:#6F42C1;">ineffassign</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">检查是否有未使用的代码</span></span>
<span class="line"><span style="color:#6F42C1;">staticcheck</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">静态分析检查</span></span>
<span class="line"><span style="color:#6F42C1;">structcheck</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">查找未使用的结构体字段</span></span>
<span class="line"><span style="color:#6F42C1;">typecheck</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">类型检查</span></span>
<span class="line"><span style="color:#6F42C1;">unused</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">未使用代码检查</span></span>
<span class="line"><span style="color:#6F42C1;">varcheck</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">未使用的全局变量和常量检查</span></span></code></pre></div><blockquote><p>小提示：golangci-lint 支持的更多 linter，可以在终端中输入 golangci-lint linters 命令查看，并且可以看到每个 linter 的说明。</p></blockquote><p>如果要修改默认启用的 linter，就需要对 golangci-lint 进行配置。即在项目根目录下新建一个名字为 .golangci.yml 的文件，这就是 golangci-lint 的配置文件。在运行代码规范检查的时候，golangci-lint 会自动使用它。假设我只启用 unused 检查，可以这样配置：</p><p><em>.golangci.yml</em></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">linters</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">disable-all</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">enable</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">unused</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">linters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">disable-all</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">enable</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">unused</span></span></code></pre></div><p>在团队多人协作开发中，有一个固定的 golangci-lint 版本是非常重要的，这样大家就可以<strong>基于同样的标准检查代码</strong>。要配置 golangci-lint 使用的版本也比较简单，在配置文件中添加如下代码即可：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">service</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">golangci-lint-version</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1.32.2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># use the fixed version to not introduce new linters unexpectedly</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">service</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">golangci-lint-version</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.32.2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># use the fixed version to not introduce new linters unexpectedly</span></span></code></pre></div><p>此外，你还可以针对每个启用的 linter 进行配置，比如要设置拼写检测的语言为 US，可以使用如下代码设置：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">linters-settings</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">misspell</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">locale</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">US</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">linters-settings</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">misspell</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">locale</span><span style="color:#24292E;">: </span><span style="color:#032F62;">US</span></span></code></pre></div><p>golangci-lint 的配置比较多，你自己可以灵活配置。关于 golangci-lint 的更多配置可以参考<a href="https://golangci-lint.run/usage/configuration/" target="_blank" rel="noreferrer">官方文档</a>，这里我给出一个常用的配置，代码如下：</p><p><em>.golangci.yml</em></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">linters-settings</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">golint</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">min-confidence</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">misspell</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">locale</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">US</span></span>
<span class="line"><span style="color:#85E89D;">linters</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">disable-all</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">enable</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">typecheck</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">goimports</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">misspell</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">govet</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">golint</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">ineffassign</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">gosimple</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">deadcode</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">structcheck</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">unused</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">errcheck</span></span>
<span class="line"><span style="color:#85E89D;">service</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">golangci-lint-version</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1.32.2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># use the fixed version to not introduce new linters unexpectedly</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">linters-settings</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">golint</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">min-confidence</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">misspell</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">locale</span><span style="color:#24292E;">: </span><span style="color:#032F62;">US</span></span>
<span class="line"><span style="color:#22863A;">linters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">disable-all</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">enable</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">typecheck</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">goimports</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">misspell</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">govet</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">golint</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">ineffassign</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">gosimple</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">deadcode</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">structcheck</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">unused</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">errcheck</span></span>
<span class="line"><span style="color:#22863A;">service</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">golangci-lint-version</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.32.2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># use the fixed version to not introduce new linters unexpectedly</span></span></code></pre></div><h4 id="集成-golangci-lint-到-ci" tabindex="-1">集成 golangci-lint 到 CI <a class="header-anchor" href="#集成-golangci-lint-到-ci" aria-label="Permalink to &quot;集成 golangci-lint 到 CI&quot;">​</a></h4><p><strong>代码检查一定要集成到 CI 流程中</strong>，效果才会更好，这样开发者提交代码的时候，CI 就会自动检查代码，及时发现问题并进行修正。</p><p>不管你是使用 Jenkins，还是 Gitlab CI，或者 Github Action，都可以通过<strong>Makefile</strong>的方式运行 golangci-lint。现在我在项目根目录下创建一个 Makefile 文件，并添加如下代码：</p><p><em>Makefile</em></p><div class="language-makefile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">getdeps</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   @mkdir -p </span><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">GOPATH</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">/bin</span></span>
<span class="line"><span style="color:#E1E4E8;">   @which golangci-lint 1&gt;/dev/null || (echo &quot;Installing golangci-lint&quot; &amp;&amp; go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.32.2)</span></span>
<span class="line"><span style="color:#B392F0;">lint</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   @echo &quot;Running </span><span style="color:#79B8FF;">$@</span><span style="color:#E1E4E8;"> check&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @GO111MODULE=on </span><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">GOPATH</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">/bin/golangci-lint cache clean</span></span>
<span class="line"><span style="color:#E1E4E8;">   @GO111MODULE=on </span><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">GOPATH</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">/bin/golangci-lint run --timeout=5m --config ./.golangci.yml</span></span>
<span class="line"><span style="color:#B392F0;">verifiers</span><span style="color:#E1E4E8;">: getdeps lint</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getdeps</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   @mkdir -p </span><span style="color:#032F62;">\${</span><span style="color:#24292E;">GOPATH</span><span style="color:#032F62;">}</span><span style="color:#24292E;">/bin</span></span>
<span class="line"><span style="color:#24292E;">   @which golangci-lint 1&gt;/dev/null || (echo &quot;Installing golangci-lint&quot; &amp;&amp; go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.32.2)</span></span>
<span class="line"><span style="color:#6F42C1;">lint</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   @echo &quot;Running </span><span style="color:#005CC5;">$@</span><span style="color:#24292E;"> check&quot;</span></span>
<span class="line"><span style="color:#24292E;">   @GO111MODULE=on </span><span style="color:#032F62;">\${</span><span style="color:#24292E;">GOPATH</span><span style="color:#032F62;">}</span><span style="color:#24292E;">/bin/golangci-lint cache clean</span></span>
<span class="line"><span style="color:#24292E;">   @GO111MODULE=on </span><span style="color:#032F62;">\${</span><span style="color:#24292E;">GOPATH</span><span style="color:#032F62;">}</span><span style="color:#24292E;">/bin/golangci-lint run --timeout=5m --config ./.golangci.yml</span></span>
<span class="line"><span style="color:#6F42C1;">verifiers</span><span style="color:#24292E;">: getdeps lint</span></span></code></pre></div><blockquote><p>小提示：关于 Makefile 的知识可以网上搜索学习一下，比较简单，这里不再进行讲述。</p></blockquote><p>好了，现在你就可以把如下命令添加到你的 CI 中了，它可以帮你自动安装 golangci-lint，并检查你的代码。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">verifiers</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">verifiers</span></span></code></pre></div><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><p>性能优化的目的是让程序更好、更快地运行，但是它不是必要的，这一点一定要记住。所以在程序开始的时候，你不必刻意追求性能优化，先大胆地写你的代码就好了，<strong>写正确的代码是性能优化的前提</strong> 。</p>`,57),r=s(`<h4 id="堆分配还是栈" tabindex="-1">堆分配还是栈 <a class="header-anchor" href="#堆分配还是栈" aria-label="Permalink to &quot;堆分配还是栈&quot;">​</a></h4><p>在比较古老的 C 语言中，内存分配是手动申请的，内存释放也需要手动完成。</p><ul><li><p>手动控制有一个很大的<strong>好处</strong> 就是你需要多少就申请多少，可以最大化地<strong>利用内存</strong>；</p></li><li><p>但是这种方式也有一个明显的<strong>缺点</strong> ，就是如果忘记释放内存，就会导致<strong>内存泄漏</strong>。</p></li></ul><p>所以，为了让程序员更好地专注于业务代码的实现，Go 语言增加了垃圾回收机制，自动地回收不再使用的内存。</p><p>Go 语言有两部分内存空间：<strong>栈内存</strong> 和<strong>堆内存</strong>。</p><ul><li><p><strong>栈内存</strong>由编译器自动分配和释放，开发者无法控制。栈内存一般存储函数中的局部变量、参数等，函数创建的时候，这些内存会被自动创建；函数返回的时候，这些内存会被自动释放。</p></li><li><p><strong>堆内存</strong>的生命周期比栈内存要长，如果函数返回的值还会在其他地方使用，那么这个值就会被编译器自动分配到堆上。堆内存相比栈内存来说，不能自动被编译器释放，只能通过垃圾回收器才能释放，所以栈内存效率会很高。</p></li></ul><h4 id="逃逸分析" tabindex="-1">逃逸分析 <a class="header-anchor" href="#逃逸分析" aria-label="Permalink to &quot;逃逸分析&quot;">​</a></h4><p>既然栈内存的效率更高，肯定是优先使用栈内存。那么 Go 语言是如何判断一个变量应该分配到堆上还是栈上的呢？这就需要<strong>逃逸分析</strong>了。下面我通过一个示例来讲解逃逸分析，代码如下：</p><p><em>ch19/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newString</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   s</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newString</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   s</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个示例中：</p><ul><li><p>通过 new 函数申请了一块内存；</p></li><li><p>然后把它赋值给了指针变量 s；</p></li><li><p>最后通过 return 关键字返回。</p></li></ul><blockquote><p>小提示：以上 newString 函数是没有意义的，这里只是为了方便演示。</p></blockquote><p>现在我通过逃逸分析来看下是否发生了逃逸，命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-gcflags=</span><span style="color:#9ECBFF;">&quot;-m -l&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./ch19/main.go</span></span>
<span class="line"><span style="color:#6A737D;"># command-line-arguments</span></span>
<span class="line"><span style="color:#B392F0;">ch19/main.go:16:8:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">escapes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">heap</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-gcflags=</span><span style="color:#032F62;">&quot;-m -l&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./ch19/main.go</span></span>
<span class="line"><span style="color:#6A737D;"># command-line-arguments</span></span>
<span class="line"><span style="color:#6F42C1;">ch19/main.go:16:8:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">) </span><span style="color:#032F62;">escapes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">heap</span></span></code></pre></div><p>在这一命令中，-m 表示打印出逃逸分析信息，-l 表示禁止内联，可以更好地观察逃逸。从以上输出结果可以看到，发生了逃逸，<strong>也就是说指针作为函数返回值的时候</strong> ，<strong>一定会发生逃逸</strong>。</p><p>逃逸到堆内存的变量不能马上被回收，只能通过垃圾回收标记清除，增加了垃圾回收的压力，所以要尽可能地避免逃逸，让变量分配在栈内存上，这样函数返回时就可以回收资源，提升效率。</p><p>下面我对 newString 函数进行了避免逃逸的优化，优化后的函数代码如下：</p><p><em>ch19/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newString</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   s</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">s</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newString</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   s</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">s</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再次通过命令查看以上代码的逃逸分析，命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-gcflags=</span><span style="color:#9ECBFF;">&quot;-m -l&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./ch19/main.go</span></span>
<span class="line"><span style="color:#6A737D;"># command-line-arguments</span></span>
<span class="line"><span style="color:#B392F0;">ch19/main.go:14:8:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">does</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">escape</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-gcflags=</span><span style="color:#032F62;">&quot;-m -l&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./ch19/main.go</span></span>
<span class="line"><span style="color:#6A737D;"># command-line-arguments</span></span>
<span class="line"><span style="color:#6F42C1;">ch19/main.go:14:8:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">) </span><span style="color:#032F62;">does</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">escape</span></span></code></pre></div><p>通过分析结果可以看到，虽然还是声明了指针变量 s，但是函数返回的并不是指针，所以没有发生逃逸。</p><p>这就是关于指针作为函数返回逃逸的例子，那么是不是不使用指针就不会发生逃逸了呢？下面看个例子，代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>同样运行逃逸分析，你会看到如下结果：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-gcflags=</span><span style="color:#9ECBFF;">&quot;-m -l&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./ch19/main.go</span></span>
<span class="line"><span style="color:#6A737D;"># command-line-arguments</span></span>
<span class="line"><span style="color:#B392F0;">ch19/main.go:13:13:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">argument</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">does</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">escape</span></span>
<span class="line"><span style="color:#B392F0;">ch19/main.go:13:14:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">escapes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">heap</span></span>
<span class="line"><span style="color:#B392F0;">ch19/main.go:17:8:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">does</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">escape</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-gcflags=</span><span style="color:#032F62;">&quot;-m -l&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./ch19/main.go</span></span>
<span class="line"><span style="color:#6A737D;"># command-line-arguments</span></span>
<span class="line"><span style="color:#6F42C1;">ch19/main.go:13:13:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">argument</span><span style="color:#24292E;"> </span><span style="color:#032F62;">does</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">escape</span></span>
<span class="line"><span style="color:#6F42C1;">ch19/main.go:13:14:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">escapes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">heap</span></span>
<span class="line"><span style="color:#6F42C1;">ch19/main.go:17:8:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">) </span><span style="color:#032F62;">does</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">escape</span></span></code></pre></div><p>观察这一结果，你会发现「飞雪无情」这个字符串逃逸到了堆上，这是因为「飞雪无情」这个字符串被已经逃逸的指针变量引用，所以它也跟着逃逸了，引用代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (p </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">pp) </span><span style="color:#B392F0;">printArg</span><span style="color:#E1E4E8;">(arg </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}, verb </span><span style="color:#F97583;">rune</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p.arg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arg</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//省略其他无关代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">pp) </span><span style="color:#6F42C1;">printArg</span><span style="color:#24292E;">(arg </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}, verb </span><span style="color:#D73A49;">rune</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   p.arg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arg</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//省略其他无关代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>所以<strong>被已经逃逸的指针引用的变量也会发生逃逸</strong>。</p><p>Go 语言中有 3 个比较特殊的类型，它们是 slice、map 和 chan，被这三种类型引用的指针也会发生逃逸，看个这样的例子：</p><p><em>ch19/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   m</span><span style="color:#F97583;">:=map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">*</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">   s</span><span style="color:#F97583;">:=</span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   m[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">s</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   m</span><span style="color:#D73A49;">:=map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">*</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">   s</span><span style="color:#D73A49;">:=</span><span style="color:#032F62;">&quot;飞雪无情&quot;</span></span>
<span class="line"><span style="color:#24292E;">   m[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">s</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同样运行逃逸分析，你看到的结果是：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">➜</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">gotour</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-gcflags=</span><span style="color:#9ECBFF;">&quot;-m -l&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./ch19/main.go</span></span>
<span class="line"><span style="color:#6A737D;"># command-line-arguments</span></span>
<span class="line"><span style="color:#B392F0;">ch19/main.go:16:2:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">moved</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">heap:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">s</span></span>
<span class="line"><span style="color:#B392F0;">ch19/main.go:15:20:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">map[int]</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">literal</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">does</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">escape</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">➜</span><span style="color:#24292E;">  </span><span style="color:#032F62;">gotour</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-gcflags=</span><span style="color:#032F62;">&quot;-m -l&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./ch19/main.go</span></span>
<span class="line"><span style="color:#6A737D;"># command-line-arguments</span></span>
<span class="line"><span style="color:#6F42C1;">ch19/main.go:16:2:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">moved</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">heap:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">s</span></span>
<span class="line"><span style="color:#6F42C1;">ch19/main.go:15:20:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">map[int]</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">literal</span><span style="color:#24292E;"> </span><span style="color:#032F62;">does</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">escape</span></span></code></pre></div><p>从这一结果可以看到，变量 m 没有逃逸，反而被变量 m 引用的变量 s 逃逸到了堆上。<strong>所以被map</strong> 、<strong>slice 和 chan 这三种类型引用的指针一定会发生逃逸的</strong>。</p><p>逃逸分析是判断变量是分配在堆上还是栈上的一种方法，在实际的项目中要尽可能避免逃逸，这样就不会被 GC 拖慢速度，从而提升效率。</p><blockquote><p>小技巧：从逃逸分析来看，指针虽然可以减少内存的拷贝，但它同样会引起逃逸，所以要根据实际情况选择是否使用指针。</p></blockquote><h4 id="优化技巧" tabindex="-1">优化技巧 <a class="header-anchor" href="#优化技巧" aria-label="Permalink to &quot;优化技巧&quot;">​</a></h4><p>通过前面小节的介绍，相信你已经了解了栈内存和堆内存，以及变量什么时候会逃逸，那么在优化的时候思路就比较清晰了，因为都是基于以上原理进行的。下面我总结几个优化的小技巧：</p><p><strong>第 1 个</strong>需要介绍的技巧是尽可能避免逃逸，因为栈内存效率更高，还不用 GC。比如小对象的传参，array 要比 slice 效果好。</p><p>如果避免不了逃逸，还是在堆上分配了内存，那么对于频繁的内存申请操作，我们要学会重用内存，比如使用 sync.Pool，这是<strong>第 2 个</strong>技巧。</p><p><strong>第 3 个</strong>技巧就是选用合适的算法，达到高性能的目的，比如空间换时间。</p><blockquote><p>小提示：性能优化的时候，要结合基准测试，来验证自己的优化是否有提升。</p></blockquote><p>以上是基于 GO 语言的内存管理机制总结出的 3 个方向的技巧，基于这 3 个大方向基本上可以优化出你想要的效果。除此之外，还有一些小技巧，比如要尽可能避免使用锁、并发加锁的范围要尽可能小、使用 StringBuilder 做 string 和 [ ] byte 之间的转换、defer 嵌套不要太多等等。</p><p>最后推荐一个 Go 语言自带的性能剖析的工具 pprof，通过它你可以查看 CPU 分析、内存分析、阻塞分析、互斥锁分析，它的使用不是太复杂，你可以搜索下它的使用教程，这里就不展开介绍。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这节课主要介绍了代码规范检查和性能优化两部分内容，其中代码规范检查是从工具使用的角度讲解，而性能优化可能涉及的点太多，所以是从原理的角度讲解，你明白了原理，就能更好地优化你的代码。</p><p>我认为是否进行性能优化取决于两点：<strong>业务需求和自我驱动</strong>。所以不要刻意地去做性能优化，尤其是不要提前做，先保证代码正确并上线，然后再根据业务需要，决定是否进行优化以及花多少时间优化。自我驱动其实是一种编码能力的体现，比如有经验的开发者在编码的时候，潜意识地就避免了逃逸，减少了内存拷贝，在高并发的场景中设计了低延迟的架构。</p><p>最后给你留个作业，把 golangci-lint 引入自己的项目吧，相信你的付出会有回报的。</p><p>下一讲我将介绍&quot;协作开发：模块化管理为什么能够提升研发效能&quot;，记得来听课！</p>`,51);function E(y,i,g,F,d,h){const n=l("Image");return p(),o("div",null,[t,e(n,{alt:"19金句.png",src:"https://s0.lgstatic.com/i/image2/M01/04/4A/CgpVE1_sUrmATX3ZAAU9yqs6HjM626.png"}),r])}const m=a(c,[["render",E]]);export{C as __pageData,m as default};
