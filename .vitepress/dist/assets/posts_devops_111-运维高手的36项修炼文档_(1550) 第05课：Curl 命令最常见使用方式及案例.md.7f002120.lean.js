import{_ as s,j as n,o as a,g as p,k as r,s as e,h as l,Q as o}from"./chunks/framework.4e7d56ce.js";const W=JSON.parse('{"title":"Curl 使用用途 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/111-运维高手的36项修炼文档/(1550) 第05课：Curl 命令最常见使用方式及案例.md","filePath":"posts/devops/111-运维高手的36项修炼文档/(1550) 第05课：Curl 命令最常见使用方式及案例.md","lastUpdated":1696417798000}'),c={name:"posts/devops/111-运维高手的36项修炼文档/(1550) 第05课：Curl 命令最常见使用方式及案例.md"},u=e("p",null,"本课时我们主要了解 Curl 命令的使用和常见案例。在学习本课时的内容之前，你需要先了解 HTTP 的请求过程，以及 Linux 操作系统的基础知识。",-1),i=e("br",null,null,-1),_=e("p",null,"首先，我们先来介绍一下 Curl ，Curl 是一个Linux命令行中的工具，它模拟客户端请求，遵循 请求协议为HTTP 或 HTTPS，我们在之前的课程里了解了 Chrome 浏览器下的开发者工具，它就是一个类似的工具，只不过它非 IDE 工具，是一个命令行工具。",-1),d=e("br",null,null,-1),h=e("p",null,"其实很多场景中我们是需要命令行工具的，如你现在有一套脚本，你需要调用 HTTP API 接口，或是监控自己的网站服务端的状态，那就需要用命令做 HTTP\\HTTPS 的请求调用，并获取结果。",-1),b=e("br",null,null,-1),T=e("p",null,"另外当你需要使用一个工具能快速分析一个网站出现的故障或问题，而非必要用浏览器的方式，这个时候你也需要一个命令行工具来方便使用，所以运维工程师了解 Curl 命令的使用是十分必要的。",-1),C=e("h2",{id:"curl-使用用途",tabindex:"-1"},[l("Curl 使用用途 "),e("a",{class:"header-anchor",href:"#curl-使用用途","aria-label":'Permalink to "Curl 使用用途"'},"​")],-1),P=e("p",null,"本课时内容围绕 Curl 命令展开 ，并分享一些场景案例的使用经验。",-1),g=e("br",null,null,-1),m=e("br",null,null,-1),w=e("p",null,"Curl 的使用主要分为两大类。",-1),f=e("br",null,null,-1),v=e("p",null,"一个是网站服务的分析，工程师会希望了解查看网站的返回状态如何；希望了解整个 HTTP 通信过程；想知道特定场景如 IPV6 的服务站点环境下进行模拟检测，等等。",-1),I=e("br",null,null,-1),H=e("p",null,"第二个类型就是功能用途的使用。这里我们会了解 Curl 如何上传文件、下载文件；如何做断点续传，如何发起多种 HTTP 的请求；如何使用到 Curl 的代理模式来进行访问。",-1),j=e("h2",{id:"网站服务分析",tabindex:"-1"},[l("网站服务分析 "),e("a",{class:"header-anchor",href:"#网站服务分析","aria-label":'Permalink to "网站服务分析"'},"​")],-1),k=o("",33),A=o("",55),x=e("br",null,null,-1),S=e("p",null,"首先第一个方式就是代理模式，我们看到 Curl 命令可以支持借用代理的方式请求。",-1),q=e("br",null,null,-1),y=e("p",null,"假设我这里的代理的 IP 是 200.200.200.200，那么只要加入一个 -x，也就是通过 200.200.200.200 这台机器去请求服务端站点，这就是通过代理去访问的一种方式。",-1),D=e("br",null,null,-1),E=e("br",null,null,-1),L=e("p",null,"另外就是文件的上传和下载，我们可以通过这样的一些格式去做文件的上传。也可以通过 FTP 协议的方式，是直接去下载文件。如果加入一个 -C 就是开启断点续传，关于断点续传可以看一下这个图，客户端跟服务端作一个下载下载的时候会获取到这个包的索引，当出现网络抖动或者波动的时候再去下载，就可以直接在基于这个索引的值继续基于原有断点长度的范围数值继续下载，所以如果为了稳定的下载一个文件，就可以使用断点续传的方式。",-1),R=e("h2",{id:"curl-的-http-请求方法",tabindex:"-1"},[l("Curl 的 HTTP 请求方法 "),e("a",{class:"header-anchor",href:"#curl-的-http-请求方法","aria-label":'Permalink to "Curl 的 HTTP 请求方法"'},"​")],-1),N=e("p",null,"最后一个部分就是介绍 Curl 命令的 HTTP 请求方法。",-1),V=e("br",null,null,-1),M=e("p",null,"在前面我们介绍的 Curl 时都是使用 get 方法去获取服务端的内容，除了 get 方法以外，我们还有 HTTP 的请求方法，包括了 post，add，option 等相关方法。但如果我们想指定请求方法，就可以通过 -X 选项中加请求方式来完成。",-1),O=e("br",null,null,-1),F=e("p",null,"比如 -X post 表示向服务端 POST 一个请求，arg1 是这个参数的名称，后面是参数的值,然后是第二个参数arg2以及参数的值，这样的话就是以 post 方式去传传递请求的数据信息。另外就是 put 方法，我们同样也可以通过 -X put 的方式去传递。-d 就是我传递的这个数值。如果使用 delete 方式，就是请求服务器并且删除 URL 的标识资源。",-1);function U(B,J,$,Q,X,z){const t=n("Image");return a(),p("div",null,[u,i,_,d,h,b,T,C,P,g,r(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/6D/CC/CgpOIF5eIOCABTEDAAEA2ZcJPmg686.png"}),m,w,f,v,I,H,j,r(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/6D/CC/Cgq2xl5eIQCAcdemAADr6L5_rSE693.png"}),k,r(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/6D/CD/Cgq2xl5eIS6AOfjaAAIwCTPcHBc162.png"}),A,r(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/6D/CF/CgpOIF5eJPuAcTrFAAFf3jurHwE260.png"}),x,S,q,y,D,r(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/6D/D0/CgpOIF5eJTiAcOqIAAC2MiN5M3Q570.png"}),E,L,R,N,V,M,O,F])}const Z=s(c,[["render",U]]);export{W as __pageData,Z as default};
