import{_ as o,j as e,o as t,g as c,k as l,h as n,Q as p,s}from"./chunks/framework.4e7d56ce.js";const Bs=JSON.parse('{"title":"08 排序：如何利用合并与快排的小技巧，解决算法难题？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6697) 08  排序：如何利用合并与快排的小技巧，解决算法难题？.md","filePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6697) 08  排序：如何利用合并与快排的小技巧，解决算法难题？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/数据结构与算法面试宝典_文档/(6697) 08  排序：如何利用合并与快排的小技巧，解决算法难题？.md"},E=p('<h1 id="_08-排序-如何利用合并与快排的小技巧-解决算法难题" tabindex="-1">08 排序：如何利用合并与快排的小技巧，解决算法难题？ <a class="header-anchor" href="#_08-排序-如何利用合并与快排的小技巧-解决算法难题" aria-label="Permalink to &quot;08 排序：如何利用合并与快排的小技巧，解决算法难题？&quot;">​</a></h1><p>今天我们开始学习一个非常有用的算法技能，排序。</p><p><strong>排序在工程应用中有非常重要的作用</strong>，比如你随意点开一个搜索引擎，通过搜索得到的结果就是经过排序处理的；你参加互联网电商的秒杀活动，用户请求到达服务器之后，服务端程序会根据请求到达的时间进行排序处理。在数据库的设计中，字段的有序性也会影响我们的查询性能。</p><p>因此，<strong>面试</strong> 中出现关于排序的算法题也就不足为奇了。但是，这里我们并不去介绍所有的排序算法，而是通过面试中<strong>最经常出现的</strong>两种排序算法进行深度展开。</p><ul><li><p><strong>合并排序</strong></p></li><li><p><strong>快速排序</strong></p></li></ul><p>学完本讲，你将收获相应的代码模板、排序的考点，以及排序在面试中的变化。现在，开始我们的算法旅程与探险！</p><h3 id="合并排序" tabindex="-1">合并排序 <a class="header-anchor" href="#合并排序" aria-label="Permalink to &quot;合并排序&quot;">​</a></h3><p><strong>合并排序</strong> 是将一个数组里面的元素进行排序的有效手段。它应该是在读书时学习的一个非常经典的排序算法了。不过这里我们不再采用教科书上的讲解方式，而是采用与&quot;<strong>二叉树</strong> &quot;进行结合的方式来学习。<strong>合并排序本质上与二叉树的后序遍历非常类似的</strong>。</p><p>如果你还能回想起来我们学习二叉树的时候，<strong>后序遍历</strong> 有个重要的特点：<strong>拿到子树的信息，利用子树的信息，整合出整棵树的信息</strong>。</p><p>如果我们把<strong>有序性</strong> 也当成<strong>信息</strong> ，那么<strong>合并排序本质上就是一个后序遍历。这时新知识就和我们的旧知识产生了化学反应</strong> 。合并排序的思路可以用<strong>二叉树</strong>表示如下：</p>',10),y=p(`<p>可以用伪代码表示如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function 后序遍历</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">合并排序()</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    sub_info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 子结构(子树</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">子数组)</span></span>
<span class="line"><span style="color:#E1E4E8;">    full_info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 整合(sub_info)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function 后序遍历</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">合并排序()</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    sub_info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 子结构(子树</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">子数组)</span></span>
<span class="line"><span style="color:#24292E;">    full_info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 整合(sub_info)</span></span></code></pre></div><p>那么<strong>合并排序/后序遍历</strong>的考点就可以总结为以下 3 点：</p><ul><li><p>如何划分子结构</p></li><li><p>获取子结构的信息</p></li><li><p>利用子结构的信息，整合出整棵树的信息</p></li></ul><p>我们可以把<strong>关联信息</strong>表达如下：</p>`,5),i=s("p",null,"那么接下来我们就从这三方面入手。并且与二叉树的后序遍历的代码对照着一起看。",-1),A=s("p",null,[n("在正式开始讲题目之前，我们先学习一下"),s("strong",null,"开闭原则"),n("。实际上，绝大部分语言在设计的时候，都是按照这个原则。比如数组的第一个元素取下标 0，那么长度为 n 的数组，就需要用开闭原则区间 [0, n) 来表示。")],-1),g=s("p",null,"这样表示好处理，区间长度直接就是右边界减去左边界。比如 [0, 10) 的区间长度就是 10。但是如果使用双闭区间，比如 [0, 9]，那么求区间长度时，运行式为：9 - 0 + 1。还需要在减法的基础上加 1。",-1),F=s("h4",{id:"_1-划分",tabindex:"-1"},[n("1. 划分 "),s("a",{class:"header-anchor",href:"#_1-划分","aria-label":'Permalink to "1. 划分"'},"​")],-1),D=s("p",null,"首先我们看一下如何划分子数组。对于二叉树而言，子树的划分是天然的，已经在数据结构里面约定好了，比如 TreeNode.left、TreeNode.right。",-1),u=s("p",null,"但是对于数组而言，在切分的时候，如果想到达最优的效率，那么将数组切为平均的两半效率应该是最高的（可以联想到二叉平衡树的效率）。为了帮助你理解，我绘制了动图演示，如下所示：",-1),h=p(`<p>二叉树的写法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 二叉树的后序遍历左右子树</span></span>
<span class="line"><span style="color:#E1E4E8;">root.left, root.right; 可以直接通过root的结构体信息得到。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 二叉树的后序遍历左右子树</span></span>
<span class="line"><span style="color:#24292E;">root.left, root.right; 可以直接通过root的结构体信息得到。</span></span></code></pre></div><p>合并排序的写法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 合并排序切分左右子数组</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((e</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b)</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">数组a, [b, m) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> 表示左子数组。</span></span>
<span class="line"><span style="color:#E1E4E8;">数组a, [m, e) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> 表示右子数组。</span></span>
<span class="line"><span style="color:#E1E4E8;">需要通过计算得到。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 合并排序切分左右子数组</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((e</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b)</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">数组a, [b, m) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> 表示左子数组。</span></span>
<span class="line"><span style="color:#24292E;">数组a, [m, e) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> 表示右子数组。</span></span>
<span class="line"><span style="color:#24292E;">需要通过计算得到。</span></span></code></pre></div><h4 id="_2-子数组的信息" tabindex="-1">2. 子数组的信息 <a class="header-anchor" href="#_2-子数组的信息" aria-label="Permalink to &quot;2. 子数组的信息&quot;">​</a></h4><p>由于这里是排序，那么就分别需要对左子数组和右子数组进行排序。如果你还能想起来我们在&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6691&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 06 讲</a>&quot;介绍过的&quot;二叉树的后序遍历&quot;，那么对子数组的排序，只需要递归就可以了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 二叉树的后序遍历拿左右子树的信息</span></span>
<span class="line"><span style="color:#B392F0;">postOrder</span><span style="color:#E1E4E8;">(root.left);</span></span>
<span class="line"><span style="color:#B392F0;">postOrder</span><span style="color:#E1E4E8;">(root.right);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 二叉树的后序遍历拿左右子树的信息</span></span>
<span class="line"><span style="color:#6F42C1;">postOrder</span><span style="color:#24292E;">(root.left);</span></span>
<span class="line"><span style="color:#6F42C1;">postOrder</span><span style="color:#24292E;">(root.right);</span></span></code></pre></div><p>合并排序则需要这样写：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 合并排序去拿左右子数组的信息</span></span>
<span class="line"><span style="color:#B392F0;">merge_sort</span><span style="color:#E1E4E8;">(a, b, m);</span></span>
<span class="line"><span style="color:#B392F0;">merge_sort</span><span style="color:#E1E4E8;">(a, m, e);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 合并排序去拿左右子数组的信息</span></span>
<span class="line"><span style="color:#6F42C1;">merge_sort</span><span style="color:#24292E;">(a, b, m);</span></span>
<span class="line"><span style="color:#6F42C1;">merge_sort</span><span style="color:#24292E;">(a, m, e);</span></span></code></pre></div><h4 id="_3-信息的整合" tabindex="-1">3. 信息的整合 <a class="header-anchor" href="#_3-信息的整合" aria-label="Permalink to &quot;3. 信息的整合&quot;">​</a></h4><p>接下来，我们需要将从子树/子数组里面拿到的信息进行加工。不同的需求会导致加工的方式也不太一样。对于合并排序而言，我们需要将两个有序的子数组，合并成一个大的有序的数组。</p><p>最后，还需要考虑一下<strong>边界</strong>：</p><ul><li><p>当 b &gt;= e，说明这个区间是一个空区间，没有必要再排序；</p></li><li><p>当 b + 1 == e，说明只有一个元素，也没有必要排序。</p></li></ul><p><strong>以上两种边界情况分别可以对应到当二叉树为空，以及二叉树只有一个结点的情况</strong>。</p><p>【<strong>代码</strong>】到这里，我们已经可以写出合并排序的代码了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">msort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 空区间 或 只有一个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 为了防止b + 1溢出，这里用b &gt;= e先判断一下</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 分成两半, 二叉树可以自动取得root.left, root.right</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里我们需要通过计算来得到左右子数组。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((e </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 类比二叉树分别遍历左子树和右子树。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">msort</span><span style="color:#E1E4E8;">(a, b, m, t);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">msort</span><span style="color:#E1E4E8;">(a, m, e, t);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// i指向左子数组的开头，j指向右子数组的开头</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// to指向要临时数组t与区间[b, e)对应的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> m;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将两个子数组进行合并, 注意下面是一个很重要的模板</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里的判断条是，只要两个子数组中还有元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果右子数组没有元素 或 左子数组开头的元素小于右子数组开头的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 那么取走左子数组开头的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 考点：a[i] &lt;= a[j]这样可以保证合并排序是稳定的，不要写错!</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> a[i] </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> a[j]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        t[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 否则就是取右子数组开头的元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        t[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 把合并的结果拷回原来的数组a[]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> e; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      a[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeSort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果传进来的数组为空</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nums </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> nums.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// t是一个临时中转的数组</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[nums.length];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">msort</span><span style="color:#E1E4E8;">(nums, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, nums.length, t);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">msort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">t</span><span style="color:#24292E;">[]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 空区间 或 只有一个元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 为了防止b + 1溢出，这里用b &gt;= e先判断一下</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 分成两半, 二叉树可以自动取得root.left, root.right</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里我们需要通过计算来得到左右子数组。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((e </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 类比二叉树分别遍历左子树和右子树。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">msort</span><span style="color:#24292E;">(a, b, m, t);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">msort</span><span style="color:#24292E;">(a, m, e, t);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// i指向左子数组的开头，j指向右子数组的开头</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// to指向要临时数组t与区间[b, e)对应的位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将两个子数组进行合并, 注意下面是一个很重要的模板</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里的判断条是，只要两个子数组中还有元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果右子数组没有元素 或 左子数组开头的元素小于右子数组开头的元素</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 那么取走左子数组开头的元素</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 考点：a[i] &lt;= a[j]这样可以保证合并排序是稳定的，不要写错!</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a[i] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> a[j]) {</span></span>
<span class="line"><span style="color:#24292E;">        t[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 否则就是取右子数组开头的元素</span></span>
<span class="line"><span style="color:#24292E;">        t[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 把合并的结果拷回原来的数组a[]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> e; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      a[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t[i];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mergeSort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果传进来的数组为空</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nums </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> nums.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// t是一个临时中转的数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[nums.length];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">msort</span><span style="color:#24292E;">(nums, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, nums.length, t);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/mergeSort.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/mergeSort.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/mergeSort.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(NlgN)，空间复杂度 O(N)。</p><p>【<strong>小结</strong>】这里我们归纳一下合并排序的考点：</p><ul><li><p>如何切分左右子数组；</p></li><li><p>如何进行合并，合并时注意循环的条件，以及稳定排序的写法；</p></li><li><p>开闭原则。</p></li></ul><p>所以解决这道题目的考点可以总结如下：</p>`,21),d=p('<p><strong>拓展思路</strong>：如果你已经成功获得了合并排序的秘籍，那么可以进一步尝试一下解决链表的合并排序。</p><p><strong>思考题</strong>：给定一个链表，如何排序，使其时间复杂度能够达到 O(NlogN)。空间复杂度为 O(1)。小提示：会用到合并排序，以及前面介绍的链表小技巧。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>我们还注意到：排序与<strong>二叉树的后序遍历</strong> 联系在一起了。在&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6691&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 06 讲</a>&quot;中我们提到过，后序遍历有一个非常有趣的用法就是&quot;<strong>项庄舞剑，意在沛公</strong>&quot;，那么合并排序是不是也有同样的性质呢？</p><p>当然可以了，那么接下来，我们利用合并排序再玩一下这个套路。</p><h4 id="例-1-逆序对" tabindex="-1">例 1：逆序对 <a class="header-anchor" href="#例-1-逆序对" aria-label="Permalink to &quot;例 1：逆序对&quot;">​</a></h4><p>【<strong>题目</strong>】一个整数数组，当 a[i] &gt; a[j]，并且 i &lt; j 的时候，(a[i], a[j]) 构成一个逆序对。求一个数组中逆序对的数目。</p><p>输入：[1, 2, 3, 4, 0]</p><p>输出：4</p><p><strong>解释</strong>：数字 0 会和前面的每一个数构成逆序对。一共有 4 对。所以输出 4。</p><p>【<strong>分析</strong> 】我们打算用<strong>合并排序</strong> 解决这个问题。其中，合并排序提供的信息是&quot;有序性&quot;，那么我们就找到了&quot;项庄&quot;------<strong>有序性</strong> 。而我们真正要求解的是&quot;<strong>逆序对</strong>&quot;，所以&quot;沛公&quot;也找到了。</p><p>下面我们回顾一下&quot;<a href="http://%E6%89%80%E4%BB%A5%E8%A7%A3%E5%86%B3%E8%BF%99%E4%B8%AA%E9%A2%98%E7%9B%AE%E7%9A%84%E8%80%83%E7%82%B9%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%80%BB%E7%BB%93%E5%A6%82%E4%B8%8B%EF%BC%9A?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 06 讲</a>&quot;学习后序遍历的时候，我们总是利用左右子树的信息进行整合，进而得到&quot;沛公&quot;。对于合并排序而言，当得到有序的左右子数组之后，应该怎么得到逆序对信息呢？</p><p>这里我们用画图来表示一下：</p>',13),b=p(`<p>当两个有序的子数组合并的时候，如果 a[i] &lt;= a[j]，此时应该执行 t[to++] = a[i++]。那么左子数组的 [b, i)，以及右子数组 [m, j) 里面的元素肯定都在 a[i] 之前就被合并掉了。</p><p>由于 a[i] 在左子数组，所以 a[i] 与 [m, j) 这个范围里面的元素就构成逆序对。 因此，在此时可以得到的逆序对的数目需要加上 j - m。</p><p>【<strong>代码</strong>】到这里我们就一起来写一下代码吧（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> cnt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">msort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((e </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">msort</span><span style="color:#E1E4E8;">(a, b, m, t);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">msort</span><span style="color:#E1E4E8;">(a, m, e, t);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> m;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> a[i] </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> a[j]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        t[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        cnt </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> m; </span><span style="color:#6A737D;">// 是的，就在这里加一行代码就可以了。</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        t[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> e; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      a[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reversePairs</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nums </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> nums.length </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[nums.length];</span></span>
<span class="line"><span style="color:#E1E4E8;">    cnt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">msort</span><span style="color:#E1E4E8;">(nums, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, nums.length, t);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cnt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">msort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((e </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">msort</span><span style="color:#24292E;">(a, b, m, t);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">msort</span><span style="color:#24292E;">(a, m, e, t);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a[i] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> a[j]) {</span></span>
<span class="line"><span style="color:#24292E;">        t[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        cnt </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> m; </span><span style="color:#6A737D;">// 是的，就在这里加一行代码就可以了。</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        t[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> e; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      a[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t[i];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reversePairs</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nums </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> nums.length </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[nums.length];</span></span>
<span class="line"><span style="color:#24292E;">    cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">msort</span><span style="color:#24292E;">(nums, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, nums.length, t);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cnt;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/reversePairs.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Jafva</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/reversePairs.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/reversePairs.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>【<strong>小结</strong>】我们再总结一下合并排序的特点和用法。关于逆序对这道题目，还可以做一个小更改：求解拿到顺序对的数目。开动你的聪明大脑想一想吧！你可以把想法写在留言区，我们一起交流。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/seqNumber.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/seqNumber.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/seqNumber.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>接下来我们再<strong>从求逆序对那句关键的代码</strong>进行展开：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> a[i] </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> a[j]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  t[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  cnt </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> m; </span><span style="color:#6A737D;">// 是的，就在这里加一行代码就可以了。</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a[i] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> a[j]) {</span></span>
<span class="line"><span style="color:#24292E;">  t[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  cnt </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> m; </span><span style="color:#6A737D;">// 是的，就在这里加一行代码就可以了。</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由上述代码可以得知，这里求出来的逆序对是属于 a[i] 的，根据前面的分析，我们可以拓展出下面这道思考题。</p><p><strong>深度扩展</strong>：给定一个数组 A[]，你能够返回一个数组 ans[]，ans[i] 存放 A[i] 的逆序对数目。如果做出来这道题目，你能想一下增加的考点和变化是什么吗？可以写在留言区哦。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/315.%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/315.%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/315.%E8%AE%A1%E7%AE%97%E5%8F%B3%E4%BE%A7%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>接下来我们看一下<strong>广度扩展</strong>。</p><h4 id="例-2-找出两个有序数组的中位数" tabindex="-1">例 2：找出两个有序数组的中位数 <a class="header-anchor" href="#例-2-找出两个有序数组的中位数" aria-label="Permalink to &quot;例 2：找出两个有序数组的中位数&quot;">​</a></h4><p>【<strong>题目</strong>】给定两个有序数组，请找出这两个有序数组的中位数。</p><p>输入：A = [1, 2], B = [3, 4]</p><p>输出：(2 + 3) / 2 = 2.5</p><p><strong>解释</strong>：当个数为奇数时，取排序之后的中间那个数。当个数为偶数时，取排序后中间两个数的平均值。</p><p>【<strong>分析</strong> 】这是一道来自<strong>百度</strong> 的面试题。解法有很多，我们重点介绍<strong>基于合并模板</strong>的解法。</p><p>通过合并排序，我们已经能够将两个有序的数组合并成一个有序的数组了。<strong>合并</strong> 是一个非常经典的<strong>模板代码</strong> ，你一定要理解并且<strong>背下来</strong>，很多地方都会用。比如合并有序链表，合并数组。</p><p>你可能会想到直接将两个有序数组合并成一个有序的数组，再取这个有序数组的中位数。但是这样操作的话，时间复杂度就变成 O(N)，并且空间复杂度也是 O(N)。</p><p>如果在面试现场，面试官一定会问你，<strong>有没有更好的办法</strong> ？所以我们应该有效地利用<strong>两个数组的有序性</strong>解决这道题。下面我会从简单的情况开始分析。</p><p>首先我们看<strong>一维有序数组</strong>的情况，如果我们要拿第 5 小的数。（注：第 1 小就是最小的数。）只需要将前面 4 个数扔掉，然后排在前面的数就是第 5 小的数。</p>`,23),C=s("p",null,[n("那么二个有序数组应该怎么办呢？不过现在非常确定的是，我们一定"),s("strong",null,"会扔掉 4 个数"),n("。那么接下来，你再思考一下在两个数组 A，B 中如何扔掉这 4 个数？")],-1),m=s("ul",null,[s("li",null,[s("strong",null,"第 1 步：要扔掉 4 个数，我们需要看一下两个数组前 2 个元素"),n("，如下图所示：")])],-1),B=s("p",null,"此时，我们当然不知道 K、L、V、W 这四个数之间的关系。假设 L >= W，就需要证明：当 L >= W 的时候，[V, W] 都不可能是第 5 小的数，可以扔掉。",-1),_=s("p",null,[s("strong",null,"解"),n(" ：利用"),s("strong",null,"反证法，假设 W 可以成为第 5 小的数"),n("。推导过程如下：")],-1),f=s("p",null,[n("同样的方法可以证明，V 也不可能成为第 5 小的数。所以如果当 "),s("strong",null,"L"),n(" >="),s("strong",null,"W"),n(" 的时候，可以把 [V, W] 扔掉，不影响去拿第 5 小的数。")],-1),k=s("ul",null,[s("li",null,[s("strong",null,"第 2 步：当我们扔掉 2 个数之后，两个有序数组已经变成如下图所示的样子"),n("：")])],-1),v=s("p",null,[n("由于我们的目标是扔掉 4 个数，扔掉 2 个数之后，"),s("strong",null,"还需要再扔 2 个数"),n("。此时我们只需要比较数组开头的一个元素 K, X 的大小，谁小就把谁扔掉。这里我们假设 K 比较小。")],-1),j=s("ul",null,[s("li",null,[s("strong",null,"第 3 步：此时还剩下 1 个数需要扔掉，那么只需要扔掉 M 和 X 中较小的就可以了"),n("。")])],-1),x=s("p",null,[n("【"),s("strong",null,"结论"),n("】当我们需要扔掉 k 个元素：")],-1),q=s("ul",null,[s("li",null,[s("p",null,"k 是偶数的时候，我们只需要比较 A[k/2-1] 和 B[k/2-1] 的大小，谁小就扔掉对应的 [0...k/2-1] 这一段；")]),s("li",null,[s("p",null,"k 是奇数的时候，我们只需要比较 A[k/2] 和 B[k/2] 的大小，谁小就扔掉对应的 [0...k/2] 这一段。")])],-1),T=s("p",null,"如前面所展示的推导过程，无论 k 是偶数还是奇数，这两种情况都可以用反证法来证明。这里我总结一下偶数的情况：",-1),S=p(`<p><strong>思考题</strong>：你能证明 k 为奇数的情况吗？</p><p><strong>分析</strong>：不过由于整数在程序中的整除特性，我们可以将奇数和偶数的情况统一起来。需要扔掉 k 个数的时候，p = (k-1)/ 2，你只需要比较 A[p] 和 B[p] 的大小即可。如果 A[p] &gt;= B[p]，那么就可以把 B[0....p] 这段都扔掉。</p><p>【<strong>代码</strong>】根据之前的思考，我们可以得到如下解法（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findMedianSortedArrays</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] B) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A.length </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> B.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A.length, blen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> B.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果两个数组的总长度为0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//那么不用再找了，肯定是没有中位数的，这里直接返回一个0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (len </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 总长度为偶数的情况：</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果有4个数，那么当扔掉1个数之后</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 接下来需要合并的两个数排[2,3]就是中位数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 总长度为奇数的情况：</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 比如如果有5个数，那么当合并掉2个数之后</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 接下来的那个排[3]位的就是中位数。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 所以这里k表示：要扔掉的数的个数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (len </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 我们需要比较A[p]与B[p]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 只不过当数组的起始位置是i和j的时候。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 比较的元素就变成 A[i+p], B[j+p]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这时直接比较A[i + p]和B[j+p]来决定谁可以被扔掉掉</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意这里扔掉的时候，只需要前移p + 1即可。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> blen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">B</span><span style="color:#E1E4E8;">[j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      i </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      j </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    k </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 把排在前面的数取出来</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> front </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    (j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> blen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">B</span><span style="color:#E1E4E8;">[j])) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">B</span><span style="color:#E1E4E8;">[j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果总长度为奇数，那么这个时候，front就是我们要找的中位数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((len </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> front;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 此时总的数目为偶数，那么需要再取一个数，求平均值。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> back </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">     (j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> blen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">B</span><span style="color:#E1E4E8;">[j])) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">B</span><span style="color:#E1E4E8;">[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (front </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> back) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findMedianSortedArrays</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] B) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A.length </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> B.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A.length, blen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> B.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果两个数组的总长度为0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//那么不用再找了，肯定是没有中位数的，这里直接返回一个0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 总长度为偶数的情况：</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果有4个数，那么当扔掉1个数之后</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 接下来需要合并的两个数排[2,3]就是中位数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 总长度为奇数的情况：</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 比如如果有5个数，那么当合并掉2个数之后</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 接下来的那个排[3]位的就是中位数。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 所以这里k表示：要扔掉的数的个数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 我们需要比较A[p]与B[p]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 只不过当数组的起始位置是i和j的时候。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 比较的元素就变成 A[i+p], B[j+p]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这时直接比较A[i + p]和B[j+p]来决定谁可以被扔掉掉</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意这里扔掉的时候，只需要前移p + 1即可。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> blen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">B</span><span style="color:#24292E;">[j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p])) {</span></span>
<span class="line"><span style="color:#24292E;">      i </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      j </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    k </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 把排在前面的数取出来</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> front </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    (j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> blen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">B</span><span style="color:#24292E;">[j])) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">B</span><span style="color:#24292E;">[j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果总长度为奇数，那么这个时候，front就是我们要找的中位数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((len </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> front;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 此时总的数目为偶数，那么需要再取一个数，求平均值。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> back </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">     (j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> blen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">B</span><span style="color:#24292E;">[j])) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">B</span><span style="color:#24292E;">[j];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (front </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> back) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/4.%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/4.%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/4.%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：一共要合并的长度可以认为是 N/2，然后每次取一半进行合并。因此，合并次数为 O(lgN)，空间复杂度为 O(1)。</p><p>【<strong>小结</strong>】至此，我们需要总结一下这道有点数学趣味的题目（实际上只是用了一个简单的反证法）。</p><p>如果，我们再看一下合并排序的过程（这里我加了一个变量 k）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> blen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> B.length;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> blen, to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[k];</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> blen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">B</span><span style="color:#E1E4E8;">[j]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    t[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    i </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    t[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">B</span><span style="color:#E1E4E8;">[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">    j </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  k </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> blen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> B.length;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> blen, to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[k];</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> blen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">B</span><span style="color:#24292E;">[j]) {</span></span>
<span class="line"><span style="color:#24292E;">    t[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    t[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">B</span><span style="color:#24292E;">[j];</span></span>
<span class="line"><span style="color:#24292E;">    j </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  k </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再看<strong>这道题</strong>的核心循环的写法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A.length, blen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> B.length;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> blen;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (len </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> blen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">B</span><span style="color:#E1E4E8;">[j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> p])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    i </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    j </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  k </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A.length, blen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> B.length;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> blen;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> blen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">B</span><span style="color:#24292E;">[j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p])) {</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    j </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  k </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们发现，正常情况下的合并排序，就是步长 p = 0 的时候的特例。那么接下来我们归纳一下合并的用法：</p>`,12),V=p('<p>那么合并模板还有没有别的用法呢？这里我给你留了两道练习题。</p><p><strong>练习题 1</strong>：给定两个有序数组 A，B。假设 A 数组中有足够的空间，不借助外部存储空间的情况下，请将 A，B，两个数组合并至 A 数组中。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/88.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/88.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/88.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 2</strong>：合并两个有序链表</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/21.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/21.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/21.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>如果你做完练习，应该就可以将合并模板的知识图谱补充如下了：</p>',6),P=p('<p>一个小小的合并模板可就以解决这么多问题，多积累模版可以帮助我们在面试中快速答题，希望你理解并且背下来这个模板！你自己还整理过其他的通用性较强的模板吗？可以在留言区和我分享。</p><h3 id="快速排序" tabindex="-1">快速排序 <a class="header-anchor" href="#快速排序" aria-label="Permalink to &quot;快速排序&quot;">​</a></h3><p>快速排序也是我们在算法书里面认识的老朋友了。不过今天我仍然不会按照书里面的套路来介绍快速排序。前面我介绍了合并排序与二叉树的后序遍历有非常类似的地方，那么快速排序又和什么遍历相似呢？</p><p>是二叉树的<strong>前序遍历</strong>！前序遍历有两个重要的特点：</p><ul><li><p>拿到根结点的信息</p></li><li><p>将根结点的信息，传递给左右子树</p></li></ul><p>对于排序来说，有序性就是信息。因此，我们要做的事情就是把能拿到的有序信息，传递给左子数组和右子数组。</p><h4 id="_1-有序性的传递" tabindex="-1">1. 有序性的传递 <a class="header-anchor" href="#_1-有序性的传递" aria-label="Permalink to &quot;1. 有序性的传递&quot;">​</a></h4><p>对于快排而言，它传递有序性的手段就是将选择一个数 x，并且利用这个数，将数组分成三部分：</p><ul><li><p>小于 x 的部分放在数组的最前面</p></li><li><p>等于 x 的部分放在数组的中间</p></li><li><p>大于 x 的部分放在数组的最后面</p></li></ul><h4 id="_2-左右子数组的处理" tabindex="-1">2. 左右子数组的处理 <a class="header-anchor" href="#_2-左右子数组的处理" aria-label="Permalink to &quot;2. 左右子数组的处理&quot;">​</a></h4><p>此时，可以把小于 x 的部分当成二叉树中的左子树，大于 x 的部分当成二叉树的右子树。等于 x 的部分当成二叉树的根结点。</p><p>那么接下来要做的事情就是像前序遍历一样，递归地处理左子数组和右子数组。</p><p>这里我们模拟一下像前序遍历一样的快速排序，演示如下动图所示：</p>',13),w=p(`<p>相对于二叉树的前序遍历来说，快速排序也有它自己的特点：</p><ul><li><p>根结点的处理，需要执行&quot;三路切分&quot;操作，将一个数组切分为三段；</p></li><li><p>左右子区间是由切分动态生成的，并不像二叉树那样由指针固定。</p></li></ul><p>可以用伪代码表示如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function 前序遍历</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">快速排序()</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    获取根结点的信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    将根结点的信息传递左右子树</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">左右子数组</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function 前序遍历</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">快速排序()</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    获取根结点的信息</span></span>
<span class="line"><span style="color:#24292E;">    将根结点的信息传递左右子树</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">左右子数组</span></span></code></pre></div><p>那么<strong>前序遍历/快速排序</strong>的考点就可以总结为以下 3 点：</p><ul><li><p>如何划分子结构</p></li><li><p>获取根结点的信息</p></li><li><p>如何将根结点的信息，传递给左右子树/左右子数组。</p></li></ul><p>我们可以把前序遍历与快速排序<strong>关联信息</strong>表达如下：</p>`,7),N=s("p",null,"那么接下来我们就从上图中展示的三个方面入手，并且与二叉树的前序遍历的代码对照着一起看。",-1),H=s("h4",{id:"_1-划分-1",tabindex:"-1"},[n("1. 划分 "),s("a",{class:"header-anchor",href:"#_1-划分-1","aria-label":'Permalink to "1. 划分"'},"​")],-1),R=s("p",null,"首先我们看一下如何划分子数组。对于二叉树而言，子树的划分是天然的，已经在数据结构里面约定好了，比如 TreeNode.left、TreeNode.right。",-1),K=s("p",null,[n("但是对于数组而言，切分的时候，如果想到达最优的效率，那么将数组切为平均的两半效率应该是最高的（可以联想到二叉平衡树的效率）。"),s("strong",null,"但是快排不能保证选择一个数，就一定能将数组切分成为两半"),n("。")],-1),X=p(`<p>切分的结果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">利用x将数组 </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[]切分为三段，[小于x的部分，等于x的部分，大于x的部分]</span></span>
<span class="line"><span style="color:#E1E4E8;">左子树 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [小于x的部分] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [b, l)</span></span>
<span class="line"><span style="color:#E1E4E8;">根结点 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [等于x的部分] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [l, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">右 子树 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [大 于x的部分] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [i, e)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">利用x将数组 </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[]切分为三段，[小于x的部分，等于x的部分，大于x的部分]</span></span>
<span class="line"><span style="color:#24292E;">左子树 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [小于x的部分] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [b, l)</span></span>
<span class="line"><span style="color:#24292E;">根结点 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [等于x的部分] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [l, i)</span></span>
<span class="line"><span style="color:#24292E;">右 子树 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [大 于x的部分] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [i, e)</span></span></code></pre></div><h4 id="_2-子数组的递归" tabindex="-1">2. 子数组的递归 <a class="header-anchor" href="#_2-子数组的递归" aria-label="Permalink to &quot;2. 子数组的递归&quot;">​</a></h4><p>由于这里是排序，就需要分别对左子数组和右子数组进行排序。如果你还能想起来我们之前介绍过的&quot;二叉树的前序遍历&quot;，那么对子数组的排序应该也只需要递归就可以了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 二叉树的前序遍历拿左右子树的信息</span></span>
<span class="line"><span style="color:#B392F0;">preOrder</span><span style="color:#E1E4E8;">(root.left);</span></span>
<span class="line"><span style="color:#B392F0;">preOrder</span><span style="color:#E1E4E8;">(root.right);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 二叉树的前序遍历拿左右子树的信息</span></span>
<span class="line"><span style="color:#6F42C1;">preOrder</span><span style="color:#24292E;">(root.left);</span></span>
<span class="line"><span style="color:#6F42C1;">preOrder</span><span style="color:#24292E;">(root.right);</span></span></code></pre></div><p>快速排序则需要这么写：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 快速排序去拿左右子数组的信息</span></span>
<span class="line"><span style="color:#B392F0;">qsort</span><span style="color:#E1E4E8;">(a, b, l);</span></span>
<span class="line"><span style="color:#B392F0;">qsort</span><span style="color:#E1E4E8;">(a, i, e);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 快速排序去拿左右子数组的信息</span></span>
<span class="line"><span style="color:#6F42C1;">qsort</span><span style="color:#24292E;">(a, b, l);</span></span>
<span class="line"><span style="color:#6F42C1;">qsort</span><span style="color:#24292E;">(a, i, e);</span></span></code></pre></div><p>最后，我们还需要考虑一下<strong>边界</strong>情况：</p><ul><li><p>当 b &gt;= e 的时候，说明这个区间是一个空区间，没有必要再排序；</p></li><li><p>当 b + 1 == e 的时候，说明只有一个元素，也没有必要排序。</p></li></ul><p>以上两种边界情况可以对应到当二叉树为空，以及二叉树只有一个结点的情况。</p><p>【<strong>代码</strong>】让我们一起写一下快速排序的代码吧（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 交换数组中两个元素的值 </span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 将数组[b, e)范围的元素进行排序 </span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">qsort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 像二叉树一样，如果空树/只有一个结点，那么不需要再递归了 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果给定的区间段为空，或者只有一个结点。 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 取数组中间的元素作为x</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((e </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[m];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 三路切分,这部分代码在例 3详细介绍!</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b, i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b, r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> r) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(A, l</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">, i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(A, r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">, i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 像二叉树的前序遍历一样，分别遍历左子树与右子树。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">qsort</span><span style="color:#E1E4E8;">(A, b, l);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">qsort</span><span style="color:#E1E4E8;">(A, i, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 主函数，将数组nums排序 </span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">quickSort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nums </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">qsort</span><span style="color:#E1E4E8;">(nums, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, nums.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 交换数组中两个元素的值 </span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 将数组[b, e)范围的元素进行排序 </span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">qsort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 像二叉树一样，如果空树/只有一个结点，那么不需要再递归了 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果给定的区间段为空，或者只有一个结点。 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 取数组中间的元素作为x</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((e </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[m];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 三路切分,这部分代码在例 3详细介绍!</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b, i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b, r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> r) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(A, l</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">, i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">      i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(A, r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">, i);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 像二叉树的前序遍历一样，分别遍历左子树与右子树。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">qsort</span><span style="color:#24292E;">(A, b, l);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">qsort</span><span style="color:#24292E;">(A, i, e);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 主函数，将数组nums排序 </span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">quickSort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] nums) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nums </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">qsort</span><span style="color:#24292E;">(nums, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, nums.length);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>复杂度分析</strong> ：快速排序在较优情况下是 O(NlgN)，在较差情况下是 O(N^2^)。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/75.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB.qsort.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/75.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB.qsort.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/75.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB.qsort.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>不过，我们好像还没有详细地介绍怎么进行切分操作，也就是如何将数组切分成三部分。由于切分非常重要（在 EMC 的面试中曾经单独出现过），所以我们重点介绍一下，暂且把它叫作&quot;<strong>三路切分</strong>&quot;。</p><h4 id="例-3-三路切分" tabindex="-1">例 3：三路切分 <a class="header-anchor" href="#例-3-三路切分" aria-label="Permalink to &quot;例 3：三路切分&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个只包含 [0, 1, 2] 的数组，如何只通过 swap 操作，将这个数组进行排序？</p><p>输入：[2, 1, 0]</p><p>输出：[0, 1, 2]</p><p><strong>要求</strong>：你的时间复杂度需要是 O(N)，空间复杂度需要是 O(1)。</p><p>【<strong>分析</strong>】回想一下，我们前面学过的&quot;三路切分&quot;，在快速排序的时候，我们通过一个整数 x 将数组切分成小于、等于、大于三部分。分别可以映射到三个值上：</p><ul><li><p>0 的部分对应到小于 x 的部分</p></li><li><p>1 的部分对应到等于 x 的部分</p></li><li><p>2 的部分对应到大于 x 的部分</p></li></ul><p>问题的关键就是如何在时间复杂度 O(N)，空间复杂度 O(1) 条件下完成这个操作。我们假设数组已经被切分成 4 段，如下图所示：</p>`,23),Q=p("<p>对于这 4 段区间，我们需要有以下约束（注意这里都要满足开闭原则）：</p><ul><li><p>[0, L) 表示全是 0 的区间</p></li><li><p>[L, i) 表示全是 1 的区间</p></li><li><p>[i, r] 表示还是未处理的数的区间</p></li><li><p>(r, N) 表示全是 2 的区间</p></li></ul><p>后续所有的操作都必须满足这个性质。</p><p><strong>初始条件</strong>：L = 0, i = 0, r = N - 1。形成的 4 个区间就是：[0, 0), [0, 0), [0, N-1], (N-1, N)，除了 [0, N-1] 非空以外，另外 3 个区间都是空集，所以满足前面对区间的约束原则。</p><p><strong>推导</strong>：在 [i, r) 区间中的值 x 取值只可能是下面 3 种情况（x = 0, x = 1, x = 2），我们分别处理如下。</p><ul><li>当 x = 0 的时候，我们想要把 0 放到 [0, L) 区间里面，也就是插入到所有的 1 的前面。</li></ul>",6),G=s("p",null,"除了像插入排序一样一个一个地移动 1，还有没有更好的办法呢？",-1),I=s("p",null,"答案是，不需要一个一个移动！因为 [L, i) 区间里面全都是 1，只需要将 A[L] 与 A[i] 进行交换即可。",-1),O=s("p",null,"不过由于 A[L] 与 A[i] 交换完成之后，看起来像是一个新来的 0 插入到区间 [L, i) 的前面，[L, i) 区间整体向右平移了一样。所以需要执行 L++, i++。经此操作，变更后的区间仍然满足约束。",-1),W=s("ul",null,[s("li",null,"当 x = 1 的时候，就比较简单了。只需要为 1 的区间 [L, i) 向右扩展一下就可以了。")],-1),M=s("p",null,"由于像 [L, i) 尾部增加了一个元素一样，所以只需要执行 i++ 就可以。区间变更后，仍然满足约束。",-1),L=s("ul",null,[s("li",null,"当 x = 2 的时候。首先需要执行 swap(A[i], A[r])。")],-1),J=p(`<p>但是，如此一来，(r, N) 应该把左边新来的 2 包含进去，所以还需要在这个基础上执行 r--。区间变更后，仍然满足约束。</p><p><strong>最终状态</strong>：所有的数都被处理之后，[i, r] 区间肯定为空集。由于两边都是取闭，那么必然当 i &gt; r 的时候，[i, r] 才是空集。原本的四个区间，变成三个区间。</p><ul><li><p>[0, L) 等于 0 的区间</p></li><li><p>[L, i) 等于 1 的区间</p></li><li><p>[i, N) 等于 2 的区间。注意此时由于 i &gt; r，实际上 i = r + 1，那么区间 (r, N) 就是 [i, N)。</p></li></ul><p>由于最终状态是将一个乱序的数组切分成三部分，所以这个方法又叫<strong>三路切分</strong>。</p><p>【<strong>代码</strong>】到此为止，相信你已经可以根据思路写出代码了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> r) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// case 0: 需要将0元素放到左区间。l++, i++完成[L, i)区间的平移。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(A, l</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">, i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// case 1: 元素1直接append在[L, i)区间的后面就可以了。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// case 2: 元素2需要与A[r]交换。然后区间(r, N)向左扩张</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(A, r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">, i);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> r) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// case 0: 需要将0元素放到左区间。l++, i++完成[L, i)区间的平移。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(A, l</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">, i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// case 1: 元素1直接append在[L, i)区间的后面就可以了。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// case 2: 元素2需要与A[r]交换。然后区间(r, N)向左扩张</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(A, r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">, i);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>复杂度分析</strong>：时间复杂度是 O(N)，空间复杂度是 O(1)。因此满足题目要求。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/75.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB.%E4%B8%89%E8%B7%AF%E5%BF%AB%E6%8E%92.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/75.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB.%E4%B8%89%E8%B7%AF%E5%BF%AB%E6%8E%92.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/75.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB.%E4%B8%89%E8%B7%AF%E5%BF%AB%E6%8E%92.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>【<strong>小结</strong>】这道题目如果没有只能用 swap 操作这个限制还是很简单的，但加上这个限制之后。你就只能使用&quot;三路切分&quot;的绝技了。三路切分的考点可以总结如下：</p>`,9),U=p('<p>由上图可以知，三路切分的考点比较单一。 这里我还给你留了一道练习题，帮你巩固下这个知识点。</p><p><strong>练习题 3</strong>：数组中有 0 和非 0 元素，请把 0 元素移动到数组末尾。其他元素保持相对顺序不变。</p><blockquote><p>代码:<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/283.%E7%A7%BB%E5%8A%A8%E9%9B%B6.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/283.%E7%A7%BB%E5%8A%A8%E9%9B%B6.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/283.%E7%A7%BB%E5%8A%A8%E9%9B%B6.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>三路切分不仅可以用在快速排序中，还有其他一些非常有趣的应用，让我们一起来看一下。</p><h4 id="例-4-只出现一次的数" tabindex="-1">例 4：只出现一次的数 <a class="header-anchor" href="#例-4-只出现一次的数" aria-label="Permalink to &quot;例 4：只出现一次的数&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个数组，除一个数以外，其他的数都出现了两次，请把这个数找出来。</p><p>输入：nums = [3,3,1,2,2]</p><p>输出：1</p><p>要求：时间复杂度 O(N)</p><p>【<strong>分析</strong>】对于这道题，这里我们不采用异或的做法，而是利用三路切分的方式来求解这道题，思路如下：</p><p>首先任意选择一个数 x，将数组进行&quot;三路切分&quot;，得到的情况可能有以下 3 种（因为其他的数都是出现了两次）。</p>',11),Y=s("p",null,"Case 1：只出现一次的数在左边，那么左区间的长度为奇数。",-1),z=s("p",null,"Case 2：只出现一次的数在中间，那么中间的数的长度为 1。直接返回 x。",-1),Z=p(`<p>Case 3：只出现一次的数在右边，那么右区间的长度为奇数。</p><p>通过分析可知，前面 3 种情况中，只有 Case 2 得到了结果。接下来我们分别讨论 Case 1 和 Case3：在 Case 1 中，只出现 1 次的数在左区间时，只需要递归地处理左区间；在 Case 3 中，只出现 1 次的数在右区间时，只需要递归地处理右区间。</p><p>【<strong>代码</strong>】题目的思路还是相当简洁的，下面我们开始写代码吧（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 辅助函数：交换数组中的两个元素</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 三路切分</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">threeSplit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 我们取数组中间的数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((e </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[m];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 注意我们的初始区间有四个：</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// [b, l) [l, i) [i, r] (r, N)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// [小于)  [等于) [未知]  (大于)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> r) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(A, l</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">, i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(A, r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">, i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 切分完毕之后，只有三个区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// [b, l) [l, i) [i, N)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 首先看中间的区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[l];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 再看左区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (((l </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x01</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">threeSplit</span><span style="color:#E1E4E8;">(A, b, l);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 再看右区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">threeSplit</span><span style="color:#E1E4E8;">(A, i, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">singleNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> A.length </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">threeSplit</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, A.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 辅助函数：交换数组中的两个元素</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 三路切分</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">threeSplit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 我们取数组中间的数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((e </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[m];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 注意我们的初始区间有四个：</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// [b, l) [l, i) [i, r] (r, N)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// [小于)  [等于) [未知]  (大于)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> r) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(A, l</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">, i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">      i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(A, r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">, i);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 切分完毕之后，只有三个区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// [b, l) [l, i) [i, N)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 首先看中间的区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[l];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 再看左区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (((l </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x01</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">threeSplit</span><span style="color:#24292E;">(A, b, l);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 再看右区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">threeSplit</span><span style="color:#24292E;">(A, i, e);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">singleNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> A.length </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">threeSplit</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, A.length);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/136.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/136.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/136.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：严格的时间复杂度计算是非常复杂的，《算法导论》中专门花了大量篇幅来分析。不过在本讲，我们可以简单地分析，每次扔掉的数组长度大概是 N/2，那么取极限累计求和，复杂度大概是 O(2N)，也就是 O(N)。而变量只用了 O(1)，如果栈也算上空间，那么大概是 O(H)。H 就是递归的深度。</p><p>【<strong>小结</strong> 】尽管与位运算相比，这种解法算不上最优，不过也不失一种有趣的解法。下面我们再深挖一下这种解法的特点，与我们以前学过的知识<strong>联动</strong>一下。</p><p>这里我们与&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6695&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 06 讲</a>&quot;中介绍的&quot;<strong>二叉搜索树的查找</strong>&quot;（练习题，你做了吗？）进行一下对比。二叉搜索树的查找代码可以写成如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TreeNode </span><span style="color:#B392F0;">searchBST</span><span style="color:#E1E4E8;">(TreeNode root, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 首先看中间的结点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> root.val </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 把右子树扔掉，只看左子树</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.val </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">searchBST</span><span style="color:#E1E4E8;">(root.left, val);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 把左子树扔掉，只看右子树</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">searchBST</span><span style="color:#E1E4E8;">(root.right, val);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TreeNode </span><span style="color:#6F42C1;">searchBST</span><span style="color:#24292E;">(TreeNode root, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 首先看中间的结点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> root.val </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 把右子树扔掉，只看左子树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.val </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">searchBST</span><span style="color:#24292E;">(root.left, val);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 把左子树扔掉，只看右子树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">searchBST</span><span style="color:#24292E;">(root.right, val);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>将上述代码与我们当前这道题的代码进行比较，会发现很多有趣的地方。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">threeSplit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这里进行三路切分....代码省略掉。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 首先看中间的区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[l];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 把右边的扔掉，只看左区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (((l </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x01</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">threeSplit</span><span style="color:#E1E4E8;">(A, b, l);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 把左边的扔掉，只看右区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">threeSplit</span><span style="color:#E1E4E8;">(A, i, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">threeSplit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这里进行三路切分....代码省略掉。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 首先看中间的区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[l];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 把右边的扔掉，只看左区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (((l </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x01</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">threeSplit</span><span style="color:#24292E;">(A, b, l);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 把左边的扔掉，只看右区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">threeSplit</span><span style="color:#24292E;">(A, i, e);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了方便你理解，我把这两部分代码的联系整理在下方的思维导图中，其中有非常有趣的联系：</p>`,12),$=p('<p>可以得出结论，数组其实是另外一种形式的二叉树，只不过有时候需要我们动态地把左/右子树给切分出来，不同的切分方式，可以解决不同的问题。</p><p><strong>练习题 4</strong>：只出现一次的数，其他的数都出现了 3 次。请你把只出现一次的数找出来。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/136.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/136.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/136.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>三路切分还有其他一些有趣的应用，让我们继续前进。</p><h4 id="例-5-第-k-小的数" tabindex="-1">例 5：第 k 小的数 <a class="header-anchor" href="#例-5-第-k-小的数" aria-label="Permalink to &quot;例 5：第 k 小的数&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个数组，请找出第 k 小的数（最小的数为第 1 小）。</p><p>输入：A = [2, 4, 1, 5, 3], k = 3</p><p>输出：3</p><p>【<strong>分析</strong>】如果我们把数组排序之后，直接取 A[k-1] 的数。那么就可以得到结果。但是有没有复杂度更低一点的算法呢？</p><p>仔细观察题目的特点：可以发现题目没有要求所有的数都有序，只是要求第 k 小的数即可。</p>',10),ss=s("p",null,"因此，这道题，应该可以用堆来解决。你能想一想吗？",-1),ns=s("blockquote",null,[s("p",null,[n("代码："),s("a",{href:"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.Sort/786.%E7%AC%ACk%E4%B8%AA%E6%95%B0.heap.java?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"Java"),n("/"),s("a",{href:"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.Sort/786.%E7%AC%ACk%E4%B8%AA%E6%95%B0.heap.cpp?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"C++"),n("/"),s("a",{href:"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.Sort/786.%E7%AC%ACk%E4%B8%AA%E6%95%B0.heap.py?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"Python")])],-1),as=s("p",null,"我们再回顾一下前面的例 4 和例 5 两道题目。例 4 要求找出那个唯一的数。而例 5 中找到的第 k 小的数，也是唯一的。",-1),ls=s("p",null,[n('这里我们从题目的"'),s("strong",null,"唯一性"),n('"这个特点着手，可以发现：在例 4 中是需要判断这个唯一的数在哪个区间，那么就把其他的区间扔掉。如果能扔掉不要的区间，然后在余下的区间上递归，那我们就可以达到 O(N) 的时间复杂度了（和例 4 一样了）。')],-1),ps=s("p",null,"可是怎样才能判断第 k 小的数在哪个区间呢？三路切分完毕之后，应该有三个区间，下面我们基于这三个区间分别讨论。",-1),os=s("p",null,[s("strong",null,"注意"),n("：在写代码之前，我们还是要注意一下边界。由于题目中给定的 k 的值是从 1 开始。也就是当 k = 1 时，实际上对应的是最小的数，而我们数组的下标是从 0 开始的，先执行 k -- 可以让 k 从 0 开始。（后面的 k 都是从 0 开始了！）")],-1),es=s("p",null,"Case 1. 第 k 小的数在左区间，此时 k < lcnt，其中 lcnt 是左区间中数的个数。",-1),ts=s("p",null,"Case 2. 第 k 小的数在中间，此时 lcnt <= k < lcnt + mcnt。其中 mcnt 是中间区间的数的个数。",-1),cs=p(`<p>Case 3. 第 k 小的数在右区间，此时 k &gt;= lcnt + mcnt。</p><p>那么，此时条件就会变成：</p><ul><li><p>k &lt; lcnt 表示在左区间</p></li><li><p>k &gt;= lcnt &amp;&amp; k &lt; lcnt + mcnt 表示在中间</p></li><li><p>k &gt;= lcnt + mcnt 表示在右区间</p></li></ul><p>【<strong>代码</strong>】有了前面的思路，那么我们一起来写一下这道题的代码（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 注意这里区间为[b, e), k也是从0开始算的</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kth</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> e, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果为空</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果只有一个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[b];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 进行三路切分</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((e </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> r) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> x)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(A, l</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">, i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> x)</span></span>
<span class="line"><span style="color:#E1E4E8;">      i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(A, r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">, i);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 分别拿到三段的长度</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> lcnt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> mcnt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> l;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果第k个数落在左区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> lcnt)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kth</span><span style="color:#E1E4E8;">(A, b, l, k);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果第k个数落在右区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> (lcnt </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> mcnt))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kth</span><span style="color:#E1E4E8;">(A, i, e, k </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> lcnt </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> mcnt);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果第k个数落在中间，那么直接返回x</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kthNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kth</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, n, k </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 注意这里区间为[b, e), k也是从0开始算的</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kth</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> e, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果为空</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果只有一个元素</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[b];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 进行三路切分</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((e </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> r) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> x)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(A, l</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">, i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> x)</span></span>
<span class="line"><span style="color:#24292E;">      i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(A, r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">, i);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 分别拿到三段的长度</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> lcnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mcnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> l;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果第k个数落在左区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> lcnt)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kth</span><span style="color:#24292E;">(A, b, l, k);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果第k个数落在右区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> (lcnt </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> mcnt))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kth</span><span style="color:#24292E;">(A, i, e, k </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> lcnt </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> mcnt);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果第k个数落在中间，那么直接返回x</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kthNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kth</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, n, k </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/786.%E7%AC%ACk%E4%B8%AA%E6%95%B0.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/786.%E7%AC%ACk%E4%B8%AA%E6%95%B0.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/786.%E7%AC%ACk%E4%B8%AA%E6%95%B0.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N)，严格地分析非常复杂，你可以查看《算法导论》中推导，空间复杂度 O(H)，H 是递归的深度。</p><p>【<strong>小结</strong>】如果我们将例 3 与例 5 放在一起，就可以总结出这些题的考点：</p>`,8),rs=p('<p>如果你已经掌握了例 5 里面的解题技巧与代码模板。那么接下来我们再进行一下<strong>深度扩展</strong>，你可以尝试思考下面这道练习题。</p><p><strong>练习题 5</strong>：给定一个整数数组，请找出里面 k 个最小的数。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/%E5%89%91%E6%8C%87Offer40.%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0.kth.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/%E5%89%91%E6%8C%87Offer40.%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0.kth.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/%E5%89%91%E6%8C%87Offer40.%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0.kth.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>广度扩展</strong>：&quot;三路切分&quot;本质上是将二叉树的一些思路移到数组上，那么是否可以适用到其他数据结构上呢？你可以在链表上试试，比如下面这道练习题。</p><p><strong>练习题 6</strong>：排序一个单向链表（这里我们需要使用快速排序）</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.qsort.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.qsort.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/08.Sort/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.qsort.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><h3 id="总结与延伸" tabindex="-1">总结与延伸 <a class="header-anchor" href="#总结与延伸" aria-label="Permalink to &quot;总结与延伸&quot;">​</a></h3><p>在这里，我们一起学习了关于排序的两个知识点，合并排序和快速排序。我们再把介绍过的知识点进行一个汇总：</p>',8),Es=s("p",null,'在本讲，虽然只讲了两个排序，但经过不断地浇灌，我们的知识树从萌芽逐渐长成了一棵大树。前面我们也提到过，实际上，堆在上浮或者上沉的时候，操作会与"插入排序"非常类似。由于篇幅的限制，这里我们不再去详细地挖掘插入排序了。',-1),ys=s("p",null,'你可以自己思考和尝试，期待你还能发现更多排序的特点和巧妙用法，并且将它们总结下来，让你"大树"（思维导图）像花儿一样开得绚烂多姿。也欢迎你在评论区和我交流，期待看到大家的奇思妙想。',-1),is=s("h3",{id:"思考题",tabindex:"-1"},[n("思考题 "),s("a",{class:"header-anchor",href:"#思考题","aria-label":'Permalink to "思考题"'},"​")],-1),As=s("p",null,[n("我再给你留一道"),s("strong",null,"思考题"),n("：给定一个链表，请使用插入排序对这个链表排序吧。")],-1),gs=s("p",null,"你可以把答案写在评论区，我们一起讨论。接下来请和我一起踏上更加奇妙的算法与数据结构的旅程。让我们继续前进。下一讲将介绍 09 | 二分搜索：为什么说有序皆可用二分？记得按时来探险。",-1);function Fs(Ds,us,hs,ds,bs,Cs){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"1.gif",src:"https://s0.lgstatic.com/i/image6/M00/26/47/CioPOWBa1D-AO_IyABbezYcjvnc676.gif"}),n(),y,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4A/Cgp9HWBa1EmAafFZAAEIbICXCH8196.png"}),n(),i,A,g,F,D,u,l(a,{alt:"2.gif",src:"https://s0.lgstatic.com/i/image6/M00/26/47/CioPOWBa1F-AdVjkAAW3LaUuQBI088.gif"}),n(),h,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/26/4A/Cgp9HWBa1IiAdYjFAAD5CqCiV9s051.png"}),n(),d,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M01/26/4A/Cgp9HWBa1KaAW4PrAACHWC33XvY027.png"}),n(),b,l(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M01/26/47/CioPOWBa1LSANaspAACnv4r9rY4076.png"}),n(),C,l(a,{alt:"3.gif",src:"https://s0.lgstatic.com/i/image6/M00/26/47/CioPOWBa1VSAUvT8AAW3QKZNDKo893.gif"}),n(),m,l(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/26/47/CioPOWBa1MyAO-hIAAC5HXxgqTU581.png"}),n(),B,_,l(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M01/26/4C/Cgp9HWBa1dSAFbuyAADZMsuD8Ow586.png"}),n(),f,k,l(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image6/M01/26/4C/Cgp9HWBa1fOAIoAkAACiXXbxAyQ531.png"}),n(),v,j,l(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M01/26/4C/Cgp9HWBa1fyARh_eAAChVnnqza8481.png"}),n(),x,q,T,l(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image6/M00/26/49/CioPOWBa1gSARtRHAADy4Q6lRic201.png"}),n(),S,l(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image6/M00/26/49/CioPOWBa1hCAQFCXAACzeuL27BA859.png"}),n(),V,l(a,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4D/Cgp9HWBa1hmARdhgAAE4KKhQNNk730.png"}),n(),P,l(a,{alt:"4.gif",src:"https://s0.lgstatic.com/i/image6/M00/26/4D/Cgp9HWBa1j-ALNp1ABgNWSm15-g263.gif"}),n(),w,l(a,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4A/CioPOWBa1k6ARbllAAEScdmg-qE957.png"}),n(),N,H,R,K,l(a,{alt:"5.gif",src:"https://s0.lgstatic.com/i/image6/M01/26/4B/CioPOWBa1nyASnSGAAVDCbYUIkI338.gif"}),n(),X,l(a,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4E/Cgp9HWBa1pKANA4tAACo1XkrwR8163.png"}),n(),Q,l(a,{alt:"Drawing 18.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4C/CioPOWBa1v-AAIJ0AAC982gygBM237.png"}),n(),G,l(a,{alt:"Drawing 19.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4F/Cgp9HWBa1waAUggGAAC5a2hQFcY926.png"}),n(),I,l(a,{alt:"Drawing 20.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4F/Cgp9HWBa1w6ACb84AAFajqHAao8089.png"}),n(),O,W,l(a,{alt:"Drawing 21.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4F/Cgp9HWBa1xeAR5k5AAE7tiU3JNs442.png"}),n(),M,L,l(a,{alt:"Drawing 22.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4F/Cgp9HWBa1yGAYzAPAAE2795PdwA120.png"}),n(),J,l(a,{alt:"Drawing 23.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4C/CioPOWBa1y6AKiDXAACdNXyT-iM446.png"}),n(),U,l(a,{alt:"Drawing 24.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4F/Cgp9HWBa1z6AY5MBAADdMHlfEo0699.png"}),n(),Y,l(a,{alt:"Drawing 25.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4C/CioPOWBa10SAHug2AACvcZWpRb0183.png"}),n(),z,l(a,{alt:"Drawing 26.png",src:"https://s0.lgstatic.com/i/image6/M00/26/50/Cgp9HWBa10yAdrcgAADb9niMdDU093.png"}),n(),Z,l(a,{alt:"Drawing 27.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4C/CioPOWBa11mAYIeqAAEKqbsIKUc687.png"}),n(),$,l(a,{alt:"Drawing 28.png",src:"https://s0.lgstatic.com/i/image6/M00/26/50/Cgp9HWBa12aAJAvPAADQtdqxOSg472.png"}),n(),ss,ns,as,l(a,{alt:"Drawing 29.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4C/CioPOWBa126ABdszAADUJRcYiwA778.png"}),n(),ls,ps,os,l(a,{alt:"Drawing 30.png",src:"https://s0.lgstatic.com/i/image6/M00/26/50/Cgp9HWBa14-AfibNAACmG9lcp3w742.png"}),n(),es,l(a,{alt:"Drawing 31.png",src:"https://s0.lgstatic.com/i/image6/M00/26/4C/CioPOWBa15aARbkjAACsa_IopOo721.png"}),n(),ts,l(a,{alt:"Drawing 32.png",src:"https://s0.lgstatic.com/i/image6/M00/26/50/Cgp9HWBa15uAKuRJAACsaFjbbdM444.png"}),n(),cs,l(a,{alt:"Drawing 33.png",src:"https://s0.lgstatic.com/i/image6/M00/26/50/Cgp9HWBa16SAXU4SAAEW-ldWtII513.png"}),n(),rs,l(a,{alt:"Drawing 34.png",src:"https://s0.lgstatic.com/i/image6/M00/26/50/Cgp9HWBa166AD9hdAAKp0wZR38g493.png"}),n(),Es,ys,is,As,gs])}const _s=o(r,[["render",Fs]]);export{Bs as __pageData,_s as default};
