import{_ as o,j as e,o as t,g as r,k as n,h as a,Q as p,s as l}from"./chunks/framework.b3d8e22e.js";const m=JSON.parse('{"title":"线上安全运营 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3536) 19  安全保障：Flutter 工具化实现线上安全与稳定.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3536) 19  安全保障：Flutter 工具化实现线上安全与稳定.md","lastUpdated":1696417798000}'),c={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3536) 19  安全保障：Flutter 工具化实现线上安全与稳定.md"},E=p(`<p>本课时将实现一个通用的 Flutter 异常上报模块，为线上运营提供上报与监控安全保障，其次借助 Sentry 平台实现异常告警和管理功能。我们先来看下 App 的线上安全包括哪些点。</p><h3 id="线上安全运营" tabindex="-1">线上安全运营 <a class="header-anchor" href="#线上安全运营" aria-label="Permalink to &quot;线上安全运营&quot;">​</a></h3><p>在上线每个客户端版本时，我们都要有一个 crash 标准，由于客户端发布后是无法回滚的，因此在发布时需要使用数据来辅助判断，这里就需要使用 crash 率来辅助判断是否需要进一步灰度更多用户。要做到这点，就需要将客户端异常的报错问题，上报到平台。Android 和 iOS 都有类似的功能模块，在 <a href="https://flutter.cn/docs/cookbook/maintenance/error-reporting" target="_blank" rel="noreferrer">Flutter 官网</a>也介绍了相应的理论方法，大家可以前往官网进行了解。写这篇专栏的目的是希望将该功能作为通用模块，并且实践该过程。</p><p>接下来我们就看看，如何利用官网的理论知识，将该功能封装为一个通用的异常上报模块。</p><h3 id="通用上报模块" tabindex="-1">通用上报模块 <a class="header-anchor" href="#通用上报模块" aria-label="Permalink to &quot;通用上报模块&quot;">​</a></h3><p>根据官网的文档，我们将该过程分为三个步骤：</p><ol><li><p>修改 main.dart 中的 main 函数；</p></li><li><p>异常捕获；</p></li><li><p>捕获内容上报。</p></li></ol><p>接下来我们就分别看看三个过程中的实现原理。</p><h4 id="第一步-修改-main-dart-中-main-函数" tabindex="-1">第一步：修改 main.dart 中 main 函数 <a class="header-anchor" href="#第一步-修改-main-dart-中-main-函数" aria-label="Permalink to &quot;第一步：修改 main.dart 中 main 函数&quot;">​</a></h4><p>在我们之前项目代码逻辑的 main 函数中，都是使用下面的代码方式来启动运行 Flutter 项目。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// App 核心入口文件 </span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runApp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">MyApp</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// App 核心入口文件 </span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runApp</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">MyApp</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于需要 catch 异常，因此我们将 runApp 执行放到异常捕获模块中去执行，修改如下的方式。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/tools/app_sentry.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// App 核心入口文件 </span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">AppSentry</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">runWithCatchError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">MyApp</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/tools/app_sentry.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// App 核心入口文件 </span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">AppSentry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">runWithCatchError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">MyApp</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里引入了通用异常捕获模块，后续你在项目中，也可以直接使用该模块实现上报，接下来我们来看下 AppSentry 的实现异常捕获逻辑。</p><h4 id="第二步-异常捕获" tabindex="-1">第二步：异常捕获 <a class="header-anchor" href="#第二步-异常捕获" aria-label="Permalink to &quot;第二步：异常捕获&quot;">​</a></h4><p>该功能的实现会应用到 FlutterError 和 runZonedGuarded 两个知识点。</p><p>在 Flutter 中可以通过 FlutterError 来捕获到运行期间的错误，包括构建期间、布局期间和绘制期间。</p><p>runZonedGuarded 则是使用 Zone.fork 创建一片新的区域去运行代码逻辑，也就是 runApp，当遇到错误时会执行其回调函数 onError，其次如果在项目使用了 Zone.current.handleUncaughtError 也会将错误抛出执行 onError 逻辑，具体我们看下代码，如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// catch 组件异常 </span></span>
<span class="line"><span style="color:#6A737D;">/// </span></span>
<span class="line"><span style="color:#6A737D;">/// 开发模式下，本地打印，上线时则调用 sentry 平台 </span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runWithCatchError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> appMain) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 捕获并上报 Flutter 异常 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">FlutterError</span><span style="color:#E1E4E8;">.onError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">FlutterErrorDetails</span><span style="color:#E1E4E8;"> details) </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">inProduction) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">FlutterError</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">dumpErrorToConsole</span><span style="color:#E1E4E8;">(details); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Zone</span><span style="color:#E1E4E8;">.current.</span><span style="color:#B392F0;">handleUncaughtError</span><span style="color:#E1E4E8;">(details.exception, details.stack); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  }; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runZonedGuarded</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Null</span><span style="color:#E1E4E8;">&gt;&gt;(() </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">runApp</span><span style="color:#E1E4E8;">(appMain); </span></span>
<span class="line"><span style="color:#E1E4E8;">  }, (error, stackTrace) </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_reportError</span><span style="color:#E1E4E8;">(error, stackTrace); </span></span>
<span class="line"><span style="color:#E1E4E8;">  }); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// catch 组件异常 </span></span>
<span class="line"><span style="color:#6A737D;">/// </span></span>
<span class="line"><span style="color:#6A737D;">/// 开发模式下，本地打印，上线时则调用 sentry 平台 </span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runWithCatchError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> appMain) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 捕获并上报 Flutter 异常 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">FlutterError</span><span style="color:#24292E;">.onError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">FlutterErrorDetails</span><span style="color:#24292E;"> details) </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">inProduction) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">FlutterError</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dumpErrorToConsole</span><span style="color:#24292E;">(details); </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">Zone</span><span style="color:#24292E;">.current.</span><span style="color:#6F42C1;">handleUncaughtError</span><span style="color:#24292E;">(details.exception, details.stack); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  }; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runZonedGuarded</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Null</span><span style="color:#24292E;">&gt;&gt;(() </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">runApp</span><span style="color:#24292E;">(appMain); </span></span>
<span class="line"><span style="color:#24292E;">  }, (error, stackTrace) </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_reportError</span><span style="color:#24292E;">(error, stackTrace); </span></span>
<span class="line"><span style="color:#24292E;">  }); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>FlutterError.onError 来捕获异常，这里会判断是否在正式环境，如果是则在本地打印错误日志，如果不是则去执行 runZonedGuarded onError 逻辑。在 runZonedGuarded 代码中执行 runApp，遇到异常时则调用 _reportError 实现错误上报，接下来我们就看下 _reportError 的实现部分。</p><h4 id="第三步-异常上报" tabindex="-1">第三步：异常上报 <a class="header-anchor" href="#第三步-异常上报" aria-label="Permalink to &quot;第三步：异常上报&quot;">​</a></h4><p>上面已经获取到了客户端的具体异常信息，接下来我们利用 Sentry 平台将异常信息进行上报。应用 Sentry 平台前，需要去申请接入，具体接入方法在本课时的&quot;Sentry 平台&quot;中介绍，成功接入 Sentry 平台后，会提供一个 dsn。这里我们需要将其配置在该文件中，如下代码。因为 Sentry 是一个第三方库，因此需要在 pubspec.yaml 增加库依赖，并更新本地库。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 创建 SentryClient 用于将异常日志上报给 sentry 平台 </span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SentryClient</span><span style="color:#E1E4E8;"> _sentry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SentryClient</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">  dsn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://f886adfd35e64062b01feb5e9a8723f6@o425523.ingest.sentry.io/5362342&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#6A737D;">/// 判断当前环境类型 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> inProduction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fromEnvironment</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dart.vm.product&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 创建 SentryClient 用于将异常日志上报给 sentry 平台 </span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SentryClient</span><span style="color:#24292E;"> _sentry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SentryClient</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">  dsn</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://f886adfd35e64062b01feb5e9a8723f6@o425523.ingest.sentry.io/5362342&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#6A737D;">/// 判断当前环境类型 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> inProduction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">fromEnvironment</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dart.vm.product&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>_sentry 就是利用 Sentry 第三方库创建的上报句柄，dsn 则是我们测试的上报标识，请大家测试时自己前往申请，不然无法看到自己的异常上报内容。上述代码中 inProduction 是用来获取是否为正式环境的逻辑。接下来我们看下上报逻辑，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 上报异常的函数 </span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">_reportError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;"> error, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;"> stackTrace) </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">inProduction) { </span><span style="color:#6A737D;">// 判断是否为正式环境 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(stackTrace); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// sentry 上报 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SentryResponse</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> _sentry.</span><span style="color:#B392F0;">captureException</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    exception</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> error, </span></span>
<span class="line"><span style="color:#E1E4E8;">    stackTrace</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> stackTrace, </span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response.isSuccessful) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Success! Event ID: \${</span><span style="color:#79B8FF;">response</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">eventId</span><span style="color:#9ECBFF;">}&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Failed to report to Sentry.io: \${</span><span style="color:#79B8FF;">response</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">error</span><span style="color:#9ECBFF;">}&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 上报异常的函数 </span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">_reportError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;"> error, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;"> stackTrace) </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">inProduction) { </span><span style="color:#6A737D;">// 判断是否为正式环境 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(stackTrace); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// sentry 上报 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SentryResponse</span><span style="color:#24292E;"> response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> _sentry.</span><span style="color:#6F42C1;">captureException</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    exception</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> error, </span></span>
<span class="line"><span style="color:#24292E;">    stackTrace</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> stackTrace, </span></span>
<span class="line"><span style="color:#24292E;">  ); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response.isSuccessful) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Success! Event ID: \${</span><span style="color:#005CC5;">response</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">eventId</span><span style="color:#032F62;">}&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Failed to report to Sentry.io: \${</span><span style="color:#005CC5;">response</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">error</span><span style="color:#032F62;">}&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先还是判断是否为正式环境，如果不是则直接打印，也可以应用下面的代码打印本地日志。如果是正式环境，则使用 _sentry.captureException 来上报异常，最后打印是否执行成功，后面一段是可以去掉的，主要是为了在真机调试时候查看。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">FlutterError</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">dumpErrorToConsole</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">FlutterErrorDetails</span><span style="color:#E1E4E8;">(exception</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> error));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">FlutterError</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dumpErrorToConsole</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">FlutterErrorDetails</span><span style="color:#24292E;">(exception</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> error));</span></span></code></pre></div><p>以上就完成了通用上报工具的代码，接下来我们来教大家如何注册 Sentry 并创建项目获得 dsn。</p><h3 id="sentry-平台" tabindex="-1">Sentry 平台 <a class="header-anchor" href="#sentry-平台" aria-label="Permalink to &quot;Sentry 平台&quot;">​</a></h3><p>我们来看下具体的创建步骤：</p><p>1.创建注册账户， <a href="https://sentry.io/signup/" target="_blank" rel="noreferrer">前往官网</a>，具体请按照你自己的信息填写，注册完成后，直接登录；</p><p>2.创建项目，这个过程如果没有分组会让填写分组，按要求填写即可；</p><p>3.上报测试，里面会有各种 SDK 的例子，唯独是没有 Flutter 的，你可以不关注，直接进入项目中或者进入个人页面，可以看到如图 1 的界面。</p>`,33),y=l("p",null,"图 1 Sentry 平台",-1),i=l("p",null,"4.按照图 2 的方法可以看到我们需要的 dsn，如果是新注册的，可以点击图 2 中的 Setup Sentry 快速找到；",-1),d=p(`<p>图 2 dsn 查询指引</p><p>5.替换项目代码中的 dsn。</p><p>经过以上 5 个步骤就可以完成项目的接入，接下来我们就验证下上报是否正常。</p><h3 id="上报测试" tabindex="-1">上报测试 <a class="header-anchor" href="#上报测试" aria-label="Permalink to &quot;上报测试&quot;">​</a></h3><p>为了验证该功能，我们需要特意去修改正常的代码改为异常。这里我们将左侧菜单&quot;图片流&quot;中的代码做如下修改：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (contentList </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 判断是否为空 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Loading</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; tmpList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ListView</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">separated</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    scrollDirection</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Axis</span><span style="color:#E1E4E8;">.vertical, </span></span>
<span class="line"><span style="color:#E1E4E8;">    shrinkWrap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    itemCount</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList.length </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 增加异常 </span></span>
<span class="line"><span style="color:#E1E4E8;">    ......</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (contentList </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 判断是否为空 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Loading</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; tmpList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ListView</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">separated</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    scrollDirection</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Axis</span><span style="color:#24292E;">.vertical, </span></span>
<span class="line"><span style="color:#24292E;">    shrinkWrap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    itemCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList.length </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 增加异常 </span></span>
<span class="line"><span style="color:#24292E;">    ......</span></span></code></pre></div><p>上面只是 pages/home_page/img_flow.dart 部分代码，其中代码第 10 行就是增加了异常，由于数组长度超出了限制，这样会导致在 ListView.separated 抛出数组边界异常。请注意该异常捕获逻辑只会在 release 模式下生效，因此需要正式 build app，利用上一课时的知识，我们将 App build 为一个 apk 文件，然后安装到 Android 手机。</p><p>成功安装后，打开 App 选择左侧菜单的&quot;图片流&quot;，这时候你会看到界面异常，大概过 1-2 分钟后，我们前往 Sentry 平台，选择我们创建项目，就会看到如下图 3 的上报内容。</p>`,8),F=p(`<p>图 3 Sentry 异常例子</p><p>点击具体的上报内容，就可以看到详细的报错信息，这里面已经将报错的文件和具体函数都说明了，并打印了调用堆栈。你可以在提示信息中查看到具体的报错文件 img_flow.dart 以及具体的报错内容 RangeError ，通过文件以及报错详情，就可以非常容易的定位到具体问题了。</p><p>以上就是异常上报的工具模块，通过这种方式，我们就可以快速地收集问题并解决问题。由于本课时将 main.dart 进行了优化，因此这里也顺带介绍下重构的部分。</p><h3 id="appprovider" tabindex="-1">AppProvider <a class="header-anchor" href="#appprovider" aria-label="Permalink to &quot;AppProvider&quot;">​</a></h3><p>为了减轻 main.dart 中的代码，使其更精简，我们将 Provider 部分的逻辑转移到一个新的工具模块中，这个工具在 util/tools/app_provider 中。而 main.dart 中从原来调用函数内部的 _getProviders 方法，修改为调用 AppProvider 中的 getProviders 方法，main.dart 代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// App 核心入口文件 </span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">AppSentry</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">runWithCatchError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">MyApp</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">/// MyApp 核心入口界面 </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MyApp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatelessWidget</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// This widget is the root of your application. </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FutureBuilder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;">&gt;( </span></span>
<span class="line"><span style="color:#E1E4E8;">        future</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AppProvider</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getProviders</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          context, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">MaterialApp</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">              title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Two You&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// APP 名字 </span></span>
<span class="line"><span style="color:#E1E4E8;">              debugShowCheckedModeBanner</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              theme</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ThemeData</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">                primarySwatch</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.blue, </span><span style="color:#6A737D;">// App 主题 </span></span>
<span class="line"><span style="color:#E1E4E8;">              ), </span></span>
<span class="line"><span style="color:#E1E4E8;">              routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Router</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">registerRouter</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">              home</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Entrance</span><span style="color:#E1E4E8;">()), </span></span>
<span class="line"><span style="color:#E1E4E8;">        ), </span></span>
<span class="line"><span style="color:#E1E4E8;">        builder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">AsyncSnapshot</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;">&gt; snapshot) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (snapshot.error </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">              child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonError</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">            ); </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">            child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> snapshot.data, </span></span>
<span class="line"><span style="color:#E1E4E8;">          ); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// App 核心入口文件 </span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">AppSentry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">runWithCatchError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">MyApp</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">/// MyApp 核心入口界面 </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MyApp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatelessWidget</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// This widget is the root of your application. </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FutureBuilder</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;">&gt;( </span></span>
<span class="line"><span style="color:#24292E;">        future</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AppProvider</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getProviders</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          context, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">MaterialApp</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">              title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Two You&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// APP 名字 </span></span>
<span class="line"><span style="color:#24292E;">              debugShowCheckedModeBanner</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              theme</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ThemeData</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">                primarySwatch</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.blue, </span><span style="color:#6A737D;">// App 主题 </span></span>
<span class="line"><span style="color:#24292E;">              ), </span></span>
<span class="line"><span style="color:#24292E;">              routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Router</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">registerRouter</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">              home</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Entrance</span><span style="color:#24292E;">()), </span></span>
<span class="line"><span style="color:#24292E;">        ), </span></span>
<span class="line"><span style="color:#24292E;">        builder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">AsyncSnapshot</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;">&gt; snapshot) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (snapshot.error </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">              child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonError</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">            ); </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">            child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> snapshot.data, </span></span>
<span class="line"><span style="color:#24292E;">          ); </span></span>
<span class="line"><span style="color:#24292E;">        }); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码就显得非常精简了，在代码中的第 12 行修改了调用方法，其次在第 23 行中，增加了组件异常处理。AppProvider 中的 getProviders 方法就是原来首页的逻辑，基本没有变化，大家可以自己前往 <a href="https://github.com/love-flutter/flutter-column" target="_blank" rel="noreferrer">github 源码</a>中查看。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时着重介绍了通用上报模块的实现方法，同时实践介绍了 Sentry 平台的应用，最后再简单介绍了 main.dart 中的重构逻辑。学完本课时后，需要掌握 Flutter 异常捕获处理方法，并会应用 Sentry 平台来协助分析异常问题。</p><p>下一课时我们将进入下一阶段，我们还将继续在 Two You App 上完善功能。</p><p><a href="https://github.com/love-flutter/flutter-column" target="_blank" rel="noreferrer">点击此链接查看本课时源码</a></p>`,11);function u(C,h,A,g,D,_){const s=e("Image");return t(),r("div",null,[E,n(s,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/40/BC/Ciqc1F8zjOiAZrLtAAUYl4LuWZQ819.png"}),a(),y,i,n(s,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/40/BC/Ciqc1F8zjPmADPTqAAZbn--G0NI800.png"}),a(),d,n(s,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/40/C8/CgqCHl8zjR6AAojgAAKndALdwFQ016.png"}),a(),F])}const v=o(c,[["render",u]]);export{m as __pageData,v as default};
