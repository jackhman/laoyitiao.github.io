import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.a0d18f64.js";const d=JSON.parse('{"title":"第19讲：把路由放在前端意味着什么？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/前端高手进阶_文档/(3191) 第19讲：把路由放在前端意味着什么？.md","filePath":"posts/frontEnd/前端高手进阶_文档/(3191) 第19讲：把路由放在前端意味着什么？.md","lastUpdated":1696682708000}'),l={name:"posts/frontEnd/前端高手进阶_文档/(3191) 第19讲：把路由放在前端意味着什么？.md"},o=p(`<h1 id="第19讲-把路由放在前端意味着什么" tabindex="-1">第19讲：把路由放在前端意味着什么？ <a class="header-anchor" href="#第19讲-把路由放在前端意味着什么" aria-label="Permalink to &quot;第19讲：把路由放在前端意味着什么？&quot;">​</a></h1><p>当浏览器地址栏中的 URL 发生变化时，会请求对应的网络资源，而负责响应这个网络资源的服务就称为<strong>路由</strong>。在早期的 Web 开发中，路由都是交由服务端处理，但随着前端技术的快速发展，路由模块逐渐转移交给了前端进行控制，而路由转移到前端，正是前后端分离和单页应用架构 的 基石。这一课时我们来深入理解前端路由的技术细节。</p><h3 id="前端路由实现基础" tabindex="-1">前端路由实现基础 <a class="header-anchor" href="#前端路由实现基础" aria-label="Permalink to &quot;前端路由实现基础&quot;">​</a></h3><p>默认情况下，当地址栏的 URL 发生变化时，浏览器会向服务端发起新的请求。所以实现前端路由的重要基础就是在修改 URL 时，不引起浏览器向后端请求数据。根据浏览器提供的 API，有下面两种实现方案。</p><h4 id="基于-hash-实现" tabindex="-1">基于 hash 实现 <a class="header-anchor" href="#基于-hash-实现" aria-label="Permalink to &quot;基于 hash 实现&quot;">​</a></h4><p>前面提到当 URL 变化时浏览器会发送请求，但有一种特例，那就是 hash 值的变化不会触发浏览器发起请求。</p><p>hash 值是指 URL&quot;#&quot;号后面的内容，通过 location.hash 属性可以读写 hash 值，这个值可以让浏览器将页面滚动到 ID 与 hash 值相等的 DOM 元素位置，不会传给服务端。</p><p>要监听它的变化也比较简单，通过监听 window 对象的 hashchange 事件就可以感知到它的变化。</p><p>这种实现方式占用了 hash 值，导致默认的页面滚动行为失效，对于有滚动定位需求的情况需要自行手动获取元素的位置并调用 BOM 相关 API 进行滚动。</p><h4 id="基于-history-实现" tabindex="-1">基于 history 实现 <a class="header-anchor" href="#基于-history-实现" aria-label="Permalink to &quot;基于 history 实现&quot;">​</a></h4><p>HTML 5 提出了一种更规范的前端路由实现方式，那就是通过 history 对象。</p><p>history 提供了两个函数来修改 URL，即 history.pushState() 和 history.replaceState()，这两个 API 可以在不进行刷新的情况下，来操作浏览器的历史 记录 。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录。</p><p>监听 URL 变化则可以通过监听 window 对象上的 popstate 事件来实现。但需要注意的是，history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面渲染。</p><p>虽然能通过这种方式实现前端路由功能，但并不能拦截浏览器默认的请求行为，当用户修改地址栏网址时还是会向服务端发起请求，所以还需要服务端进行设置，将所有 URL 请求转向前端页面，交给前端进行解析。</p><p>下面是 vue-router 官网的 Nginx 配置例子：表示对于匹配的路径，按照指定顺序依次检查对应路径文件是否存在，对应路径目录是否存在，如果没有找到任何文件 或目录 ，就返回 index.html。而 index.html 就会引入对应的 JavaScript 代码在浏览器端进行路由解析。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">location </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  try_files $uri $uri</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">index.html; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">location </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  try_files $uri $uri</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">index.html; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="路由解析" tabindex="-1">路由解析 <a class="header-anchor" href="#路由解析" aria-label="Permalink to &quot;路由解析&quot;">​</a></h3><p>阻止浏览器在 URL 变化时向后端发送请求之后，就需要对路由进行解析了。 <a href="https://router.vuejs.org/zh/" target="_blank" rel="noreferrer">vue-router</a>和 <a href="https://reactrouter.com/" target="_blank" rel="noreferrer">react-router</a>都同时依赖了一个第三方库 <a href="https://github.com/pillarjs/path-to-regexp" target="_blank" rel="noreferrer">Path-to-RegExp</a>进行路由解析，下面通过分析 <a href="https://github.com/pillarjs/path-to-regexp/archive/v1.8.0.zip" target="_blank" rel="noreferrer">path-to-regexp 1.8 版本</a>的源码来理解路由是如何被解析的。</p><p>路由解析又分为两个操作：<strong>路由匹配</strong> 和<strong>路由生成</strong>。</p><h4 id="路由匹配" tabindex="-1">路由匹配 <a class="header-anchor" href="#路由匹配" aria-label="Permalink to &quot;路由匹配&quot;">​</a></h4><p>路由匹配就是当获取到请求路径后，如何找到对应的配置路径。在 path-to-regexp 源码中对应的是默认导出函数 pathToRegexp()，该函数接收 3 个参数：</p><ul><li><p><strong>path</strong>，必传参数，值可以为自定义的请求路径，如 /user/:id，也可以是正则表达式，还可以是两者组成的数组；</p></li><li><p><strong>keys</strong>，可选参数， 值为 数组， 数组元素为 解析 正则表达式风格的字符串或冒号开头的占位符（下文简称为&quot;特殊字符串&quot;） 生成的令牌 ，比如字符串 /user/:id 对应的 keys 为 { name: &#39;id&#39;, delimiter: &#39;/&#39;, optional: false, repeat: false } ，这个参数的值最终会被保存到返回的正则表达式对象的 keys 属性中，可用于后面的路由生成；</p></li><li><p><strong>options</strong>，可选参数，执行过程中的配置信息，比如是否大小写敏感。</p></li></ul><p>函数返回值是一个带有 keys 属性的正则表达式，keys 属性值类型和 keys 参数相同，也是一个包含特殊字符串描述信息的数组。</p><p>由于 path 参数可以是正则表达式、字符串、数组 3 种类型数据，所以在处理 path 参数的时候分别对应 3 个函数 regexpToRegexp()、stringToRegexp()、arrayToRegexp()。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pathToRegexp</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">keys</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isarray</span><span style="color:#E1E4E8;">(keys)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{!Object}</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (keys </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> options) </span></span>
<span class="line"><span style="color:#E1E4E8;">    keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [] </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {} </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (path </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">regexpToRegexp</span><span style="color:#E1E4E8;">(path, </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{!Array}</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (keys)) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isarray</span><span style="color:#E1E4E8;">(path)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arrayToRegexp</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{!Array}</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (path), </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{!Array}</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (keys), options) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stringToRegexp</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (path), </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{!Array}</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (keys), options)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pathToRegexp</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">path</span><span style="color:#24292E;">, </span><span style="color:#E36209;">keys</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isarray</span><span style="color:#24292E;">(keys)) { </span></span>
<span class="line"><span style="color:#24292E;">    options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{!Object}</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (keys </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> options) </span></span>
<span class="line"><span style="color:#24292E;">    keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {} </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (path </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">regexpToRegexp</span><span style="color:#24292E;">(path, </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{!Array}</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (keys)) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isarray</span><span style="color:#24292E;">(path)) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arrayToRegexp</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{!Array}</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (path), </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{!Array}</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (keys), options) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stringToRegexp</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (path), </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{!Array}</span><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> (keys), options)</span></span></code></pre></div><p>arrayToRegexp() 函数会遍历 path 数组然后递归调用函数 pathToRegexp()，将所得的结果拼接成一个新的正则表达式并赋值 keys 属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arrayToRegexp</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">keys</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> parts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [] </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> path.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    parts.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">pathToRegexp</span><span style="color:#E1E4E8;">(path[i], keys, options).source) </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> regexp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;(?:&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> parts.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;|&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;)&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">flags</span><span style="color:#E1E4E8;">(options)) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">attachKeys</span><span style="color:#E1E4E8;">(regexp, keys) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arrayToRegexp</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">path</span><span style="color:#24292E;">, </span><span style="color:#E36209;">keys</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> parts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [] </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> path.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    parts.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pathToRegexp</span><span style="color:#24292E;">(path[i], keys, options).source) </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> regexp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;(?:&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> parts.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;|&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;)&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">flags</span><span style="color:#24292E;">(options)) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">attachKeys</span><span style="color:#24292E;">(regexp, keys) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>regexpToRegexp() 函数会找寻正则表达式中的负向后行断言，记录到正则表达式实例的 keys 属性中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">regexpToRegexp</span><span style="color:#E1E4E8;"> (path, keys) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> groups </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.source.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">\\((</span><span style="color:#F97583;">?!</span><span style="color:#E1E4E8;">\\</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">g) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (groups) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> groups.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      keys.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">        name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> i, </span></span>
<span class="line"><span style="color:#E1E4E8;">        prefix</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        delimiter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        optional</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        repeat</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        partial</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        asterisk</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        pattern</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      }) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">attachKeys</span><span style="color:#E1E4E8;">(path, keys) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">regexpToRegexp</span><span style="color:#24292E;"> (path, keys) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> groups </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.source.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">\\((</span><span style="color:#D73A49;">?!</span><span style="color:#24292E;">\\</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">g) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (groups) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> groups.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      keys.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">        name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> i, </span></span>
<span class="line"><span style="color:#24292E;">        prefix</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        delimiter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        optional</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        repeat</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        partial</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        asterisk</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        pattern</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      }) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">attachKeys</span><span style="color:#24292E;">(path, keys) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一般情况下会调用 stringToRegexp() 函数来将字符串转换成正则表达式。函数 stringToRegexp() 只是调用了两个函数 tokensTo Regexp () 和 parse()。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stringToRegexp</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">keys</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tokensToRegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(path, options), keys, options) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stringToRegexp</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">path</span><span style="color:#24292E;">, </span><span style="color:#E36209;">keys</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tokensToRegExp</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(path, options), keys, options) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>看到 parse() 这个函数不知道是否会让你想起前面几讲中提到的编译器，该函数的主要作用和编译器中的词法分析比较像，它会将字符串转化为令牌数组。这些令牌分为两类，一类是<strong>非特殊字符串</strong> ，不需要做任何处理，直接以字符串形式放入数组；另一类是<strong>特殊字符串</strong>，需要依赖一个正则表达式来进行处理。这个核心的正则表达式如下所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PATH_REGEXP</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#79B8FF;">.]</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">?</span><span style="color:#DBEDFF;">(?:(?:</span><span style="color:#85E89D;font-weight:bold;">\\:</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)(?:</span><span style="color:#85E89D;font-weight:bold;">\\(</span><span style="color:#DBEDFF;">((?:</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">()]</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\)</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">?|</span><span style="color:#85E89D;font-weight:bold;">\\(</span><span style="color:#DBEDFF;">((?:</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">()]</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\)</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">[+*?]</span><span style="color:#DBEDFF;">)</span><span style="color:#F97583;">?|</span><span style="color:#DBEDFF;">(</span><span style="color:#85E89D;font-weight:bold;">\\*</span><span style="color:#DBEDFF;">))</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PATH_REGEXP</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/(</span><span style="color:#22863A;font-weight:bold;">\\\\</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#005CC5;">.]</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">(?:(?:</span><span style="color:#22863A;font-weight:bold;">\\:</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)(?:</span><span style="color:#22863A;font-weight:bold;">\\(</span><span style="color:#032F62;">((?:</span><span style="color:#22863A;font-weight:bold;">\\\\</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\\\</span><span style="color:#005CC5;">()]</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\)</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">?|</span><span style="color:#22863A;font-weight:bold;">\\(</span><span style="color:#032F62;">((?:</span><span style="color:#22863A;font-weight:bold;">\\\\</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\\\</span><span style="color:#005CC5;">()]</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)</span><span style="color:#22863A;font-weight:bold;">\\)</span><span style="color:#032F62;">)(</span><span style="color:#005CC5;">[+*?]</span><span style="color:#032F62;">)</span><span style="color:#D73A49;">?|</span><span style="color:#032F62;">(</span><span style="color:#22863A;font-weight:bold;">\\*</span><span style="color:#032F62;">))/</span><span style="color:#D73A49;">g</span></span></code></pre></div><p>可以看到这个正则表达式中有多个通过圆括号形成的分组，通过调用 exec() 函数分别提取不同的信息，放入一个长度为 8 的数组中，对于不匹配的字符串则会返回 null。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">PATH_REGEXP</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/:test(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+)?&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [&quot;/:test(\\d+)?&quot;, undefined, &quot;/&quot;, &quot;test&quot;, &quot;\\d+&quot;, undefined, &quot;?&quot;, undefined] </span></span>
<span class="line"><span style="color:#79B8FF;">PATH_REGEXP</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/route(</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">d+)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [&quot;(\\d+)&quot;, undefined, undefined, undefined, undefined, &quot;\\d+&quot;, undefined, undefined] </span></span>
<span class="line"><span style="color:#79B8FF;">PATH_REGEXP</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/*&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [&quot;/*&quot;, undefined, &quot;/&quot;, undefined, undefined, undefined, undefined, &quot;*&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">PATH_REGEXP</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/:test(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+)?&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [&quot;/:test(\\d+)?&quot;, undefined, &quot;/&quot;, &quot;test&quot;, &quot;\\d+&quot;, undefined, &quot;?&quot;, undefined] </span></span>
<span class="line"><span style="color:#005CC5;">PATH_REGEXP</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/route(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d+)&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [&quot;(\\d+)&quot;, undefined, undefined, undefined, undefined, &quot;\\d+&quot;, undefined, undefined] </span></span>
<span class="line"><span style="color:#005CC5;">PATH_REGEXP</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/*&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [&quot;/*&quot;, undefined, &quot;/&quot;, undefined, undefined, undefined, undefined, &quot;*&quot;]</span></span></code></pre></div><p>词法分析过程和前面提到的一致，即利用 while 循环以及正则匹配，将匹配到的 子串 转换成令牌对象。例如，字符串 /user/:id，会被转换成包含一个非特殊字符串和特殊字符串的令牌数组：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span></span>
<span class="line"><span style="color:#E1E4E8;">    asterisk: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    delimiter: </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    optional: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    partial: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    pattern: </span><span style="color:#9ECBFF;">&quot;[^</span><span style="color:#79B8FF;">\\/</span><span style="color:#9ECBFF;">]+?&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    prefix: </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    repeat: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  { </span></span>
<span class="line"><span style="color:#24292E;">    asterisk: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    delimiter: </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    optional: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    partial: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    pattern: </span><span style="color:#032F62;">&quot;[^</span><span style="color:#005CC5;">\\/</span><span style="color:#032F62;">]+?&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    prefix: </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    repeat: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>在得到令牌数组之后，下一步是调用函数 tokensToRegExp() 将它转换成正则表达式。对于字符串令牌，直接转化成转义后的字符串，这个转义的过程也很简单，即在&quot;/&quot;&quot;[&quot;这类具有正则表达式功能的特殊字符前加上&quot;\\&quot;。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> token </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  route </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">escapeString</span><span style="color:#E1E4E8;">(token) </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">escapeString</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">[.+*?=^!:\${}()[</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#79B8FF;">|</span><span style="color:#85E89D;font-weight:bold;">\\/\\\\</span><span style="color:#79B8FF;">]</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">$1&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> token </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  route </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">escapeString</span><span style="color:#24292E;">(token) </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">escapeString</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(</span><span style="color:#005CC5;">[.+*?=^!:\${}()[</span><span style="color:#22863A;font-weight:bold;">\\]</span><span style="color:#005CC5;">|</span><span style="color:#22863A;font-weight:bold;">\\/\\\\</span><span style="color:#005CC5;">]</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">$1&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于正则表达式令牌，首先放到前面提到的 keys 数组中，然后再对正则表达式令牌的内容进行标准化处理，拼接到最终的正则表达式字符串 route 中，再将 route 实例化为正则表达式对象，并附上 keys 属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> prefix </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">escapeString</span><span style="color:#E1E4E8;">(token.prefix) </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> capture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;(?:&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> token.pattern </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;)&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">keys.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(token) </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (token.repeat) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  capture </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;(?:&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> prefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> capture </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;)*&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (token.optional) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">token.partial) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    capture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;(?:&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> prefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;(&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> capture </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;))?&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    capture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;(&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> capture </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;)?&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  capture </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;(&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> capture </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;)&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">route </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> capture </span></span>
<span class="line"><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">attachKeys</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;^&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> route, </span><span style="color:#B392F0;">flags</span><span style="color:#E1E4E8;">(options)), keys)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> prefix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">escapeString</span><span style="color:#24292E;">(token.prefix) </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> capture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;(?:&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> token.pattern </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;)&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">keys.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(token) </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (token.repeat) { </span></span>
<span class="line"><span style="color:#24292E;">  capture </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;(?:&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> capture </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;)*&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (token.optional) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">token.partial) { </span></span>
<span class="line"><span style="color:#24292E;">    capture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;(?:&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;(&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> capture </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;))?&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    capture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;(&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> capture </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;)?&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  capture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;(&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> capture </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;)&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">route </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> capture </span></span>
<span class="line"><span style="color:#D73A49;">...</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">attachKeys</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;^&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> route, </span><span style="color:#6F42C1;">flags</span><span style="color:#24292E;">(options)), keys)</span></span></code></pre></div><h4 id="路由生成" tabindex="-1">路由生成 <a class="header-anchor" href="#路由生成" aria-label="Permalink to &quot;路由生成&quot;">​</a></h4><p>路由生成是指通过配置的请求路径字符串和参数生成对应的请求路径，比如配置的请求路径字符串 /user/:id 和参数 {id: &quot;lagou&quot;} 可以生成 /user/lagou，在 path-to-regexp 源码中对应的是函数 compile()。</p><p>compile() 函数接收两个参数：str 和 options。str 为字符串，可能包含特殊字符串；options 同 pathToRegexp() 函数的 options 参数。</p><p>从参数可以看出，compile() 函数并不直接生成结果字符串，而是返回一个生成函数，将参数传入这个函数中可以生成<strong>结果字符串</strong>。</p><p>compile() 函数的内部只调用了两个函数 parse() 和 tokensToFunction()，parse() 函数前面已经分析过了，下面来分析函数 tokensToFunction()。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tokensToFunction</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(str, options), options) </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tokensToFunction</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(str, options), options) </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>函数 tokensToFunction() 的核心代码在于返回的匿名函数，匿名函数内部会遍历令牌数组，对于字符串令牌，直接拼接到生成的路径中；而对于正则表达式令牌，则会通过令牌 token.name 属性来找到参数对象 obj 对应的值。如果这个值为字符串，则判断是否匹配 token 中的正则表达式，匹配之后进行 URI 编码并拼接到结果字符串 path 中；如果为数组，则循环执行字符串匹配过程。返回的匿名函数部分代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> tokens.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tokens[i] </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof token </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    path </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> token </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[token.name] </span></span>
<span class="line"><span style="color:#E1E4E8;">  var segment </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isarray</span><span style="color:#E1E4E8;">(value)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> value.length; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      segment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(value[j]) </span></span>
<span class="line"><span style="color:#E1E4E8;">      path </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> token.prefix </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> token.delimiter) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> segment </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  segment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> token.asterisk </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encodeAsterisk</span><span style="color:#E1E4E8;">(value) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(value) </span></span>
<span class="line"><span style="color:#E1E4E8;">  path </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> token.prefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> segment </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> path</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> tokens.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tokens[i] </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof token </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    path </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> token </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[token.name] </span></span>
<span class="line"><span style="color:#24292E;">  var segment </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isarray</span><span style="color:#24292E;">(value)) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> value.length; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      segment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(value[j]) </span></span>
<span class="line"><span style="color:#24292E;">      path </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> token.prefix </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> token.delimiter) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> segment </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  segment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> token.asterisk </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encodeAsterisk</span><span style="color:#24292E;">(value) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(value) </span></span>
<span class="line"><span style="color:#24292E;">  path </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> token.prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> segment </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> path</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一课时我们先介绍了前端路由的实现基础，包括基于 hash 实现和 history 实现。基于 hash 方式兼容性较好，但是占用了浏览器默认的定位行为，同时会加长 URL 字符串；基于 history 方式可以直接修改 URL 路径，较为美观。</p><p>然后分析了 vue-router 和 react-router 共同的依赖库 path-to-regexp 中的两个核心函数 pathToRegexp() 和 compile()。pathToRegexp() 会先将配置的请求路径字符串拆分成令牌数组，然后再转化成正则表达式对象，路由库可以通过正则表达式来进行路由匹配，从而将对应的组件渲染到页面；complie() 函数会将配置的请求路径字符串转化成一个匿名函数，这个函数可以传入参数并生成一个请求路径字符串。</p><p>最后留一道思考题：你在使用前端路由的时候碰到过哪些问题，又是怎么解决的呢？欢迎在留言区写下你的答案和大家一起交流学习。</p>`,53),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const h=s(l,[["render",t]]);export{d as __pageData,h as default};
