import{_ as l,j as o,o as e,g as t,k as a,Q as p,s as n,h as r}from"./chunks/framework.e0c66c3f.js";const b=JSON.parse('{"title":"GraphQL 简介 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1745) 第27讲：实战入门 GraphQL，如何将 REST API 换成 GraphQL.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1745) 第27讲：实战入门 GraphQL，如何将 REST API 换成 GraphQL.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1745) 第27讲：实战入门 GraphQL，如何将 REST API 换成 GraphQL.md"},E=p('<p>从本节开始将深入介绍 query-graphql-plugin 插件，我们会启动 SkyWalking Rocketbot 来查询 Trace 数据和 JVM 监控数据，这些用户查询请求最终都会路由到 query-graphql-plugin 插件中进行处理。</p><h3 id="graphql-简介" tabindex="-1">GraphQL 简介 <a class="header-anchor" href="#graphql-简介" aria-label="Permalink to &quot;GraphQL 简介&quot;">​</a></h3><p>GraphQL 是一个用于 API 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时。GraphQL 并没有和任何特定数据库或者存储引擎绑定。GraphQL 对服务端 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。使用 GraphQL 开发 API 有如下好处。</p><ul><li><p>可描述：使用 GraphQL，你获取的都是你想要的数据，不多也不会少；</p></li><li><p>分级：GraphQL 天然遵循了对象间的关系，通过一个简单的请求，我们可以获取到一个对象及其相关的对象。</p></li><li><p>强类型：使用 GraphQL 的类型系统，能够清晰、准确的描述数据，这样就能确保从服务器获取的数据和我们查询的一致。</p></li><li><p>跨语言：GraphQL 并不绑定于某一特定的语言。</p></li><li><p>兼容性：GraphQL 不限于某一特定存储平台，GraphQL 可以方便地接入已有的存储、代码、甚至可以连接第三方的 API。</p></li></ul><h3 id="graphql-类型系统" tabindex="-1">GraphQL 类型系统 <a class="header-anchor" href="#graphql-类型系统" aria-label="Permalink to &quot;GraphQL 类型系统&quot;">​</a></h3><p>在一篇文章中完整介绍 GraphQL 本身，以及如何在 Java 服务端使用 GraphQL 几乎是不可能的，其中会涉及很多琐碎的细节需要说明，并且还需要列举一些示例。本课时并不是一篇完整的 GraphQL Java 教程，这里重点介绍 query-graphql-plugin 插件涉及的 GraphQL 知识点。</p><p>GraphQL 的类型系统与 Java 的类型系统非常相似，主要有下面 6 种类型：</p><ol><li>Scalar，类似于 Java 中的基本变量。</li></ol>',8),y=p(`<ol start="2"><li>Object，类似于 Java 中的对象，这里使用 GraphQL 定义一个 Book 类型，它就是 Object 类型，在 GraphQL Java 中对应的是 GraphQLObjectType。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type Book {</span></span>
<span class="line"><span style="color:#E1E4E8;">    id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ID # 编号</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String #书名</span></span>
<span class="line"><span style="color:#E1E4E8;">    pageCount</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Int #页数</span></span>
<span class="line"><span style="color:#E1E4E8;">    author</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Author # 作者</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type Book {</span></span>
<span class="line"><span style="color:#24292E;">    id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ID # 编号</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String #书名</span></span>
<span class="line"><span style="color:#24292E;">    pageCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Int #页数</span></span>
<span class="line"><span style="color:#24292E;">    author</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Author # 作者</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="3"><li>Interface，类似于 Java 中的接口，在下面中的示例如下：</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ComicCharacter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ComicCharacter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 GraphQL Java 中对应的类型是 GraphQLInterfaceType。</p><ol start="4"><li>Union，在 Java 中没有 Union 类型，但是在 C++ 中有 Union 类型，在 GraphQL Schema 中的示例如下：</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type Cat {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String;</span></span>
<span class="line"><span style="color:#E1E4E8;">    lives</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Int;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">type Dog {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String;</span></span>
<span class="line"><span style="color:#E1E4E8;">    bonesOwned</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">union Pet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Cat </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Dog</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type Cat {</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String;</span></span>
<span class="line"><span style="color:#24292E;">    lives</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Int;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">type Dog {</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String;</span></span>
<span class="line"><span style="color:#24292E;">    bonesOwned</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">union Pet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cat </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Dog</span></span></code></pre></div><p>在 GraphQL Java 中对应的类型是 GraphQLUnionType。在使用 Interface 或 Union 时，如果需要获取对象真实类型，可以通过 TypeResolver 进行判断。</p><ol start="5"><li><p>InputObject，主要用于封装方法参数，GraphQL Schema 中的定义与 Object 类似，主要区别是将 type 关键字换成 input 关键字。GraphQL Java 中对应的类型是 GraphQLInputObjectType。</p></li><li><p>Enum，类似于 Java 中的枚举，不再赘述。</p></li></ol><h3 id="graphql-java-基础入门" tabindex="-1">GraphQL Java 基础入门 <a class="header-anchor" href="#graphql-java-基础入门" aria-label="Permalink to &quot;GraphQL Java 基础入门&quot;">​</a></h3><p>SkyWalking OAP 中的 query-graphql-plugin 插件也使用了 GraphQL 开发其 API，这里就简单介绍如何在 Java 中使用 GraphQL。</p><h4 id="定义-graphql-schema" tabindex="-1">定义 GraphQL Schema <a class="header-anchor" href="#定义-graphql-schema" aria-label="Permalink to &quot;定义 GraphQL Schema&quot;">​</a></h4><p>首先，我们需要定义一套 GraphQL Schema，似于要使用数据库存储数据之前，需要先建表，之后上层应用才能读写数据库。GraphQL Java 服务端要是响应用户的请求，也需要定义一个描述数据的结构，也就是这里的 GraphQL Schema。一般我们会将 GraphQL Schema 单独放到 resources 目录下，这里以图书信息管理的为例，resources/book.graphql 文件如下所示，其中定义了 Book、Author、Query 三个类型，其中 Book 和 Author 类似于普通的 JavaBean，Query 则类似于 Java 中的接口定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type Book {</span></span>
<span class="line"><span style="color:#E1E4E8;">    id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ID # 编号</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String #书名</span></span>
<span class="line"><span style="color:#E1E4E8;">    pageCount</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Int #页数</span></span>
<span class="line"><span style="color:#E1E4E8;">    author</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Author # 作者</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">type Author {</span></span>
<span class="line"><span style="color:#E1E4E8;">  id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ID # 作者编号</span></span>
<span class="line"><span style="color:#E1E4E8;">  firstName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String # 作者姓名</span></span>
<span class="line"><span style="color:#E1E4E8;">  lastName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">type QueryBook {</span></span>
<span class="line"><span style="color:#E1E4E8;">    # </span><span style="color:#B392F0;">getById</span><span style="color:#E1E4E8;">()类似于Java方法，根据Id查询书籍信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    # id是方法参数，ID是类型，</span><span style="color:#9ECBFF;">&quot;!&quot;</span><span style="color:#E1E4E8;">表示非空</span></span>
<span class="line"><span style="color:#E1E4E8;">    # Book是返回值类型，这里返回的是一个Book对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getById</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ID</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Book</span></span>
<span class="line"><span style="color:#E1E4E8;">    # 查询Book列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    list</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [Book]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type Book {</span></span>
<span class="line"><span style="color:#24292E;">    id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ID # 编号</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String #书名</span></span>
<span class="line"><span style="color:#24292E;">    pageCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Int #页数</span></span>
<span class="line"><span style="color:#24292E;">    author</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Author # 作者</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">type Author {</span></span>
<span class="line"><span style="color:#24292E;">  id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ID # 作者编号</span></span>
<span class="line"><span style="color:#24292E;">  firstName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String # 作者姓名</span></span>
<span class="line"><span style="color:#24292E;">  lastName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">type QueryBook {</span></span>
<span class="line"><span style="color:#24292E;">    # </span><span style="color:#6F42C1;">getById</span><span style="color:#24292E;">()类似于Java方法，根据Id查询书籍信息</span></span>
<span class="line"><span style="color:#24292E;">    # id是方法参数，ID是类型，</span><span style="color:#032F62;">&quot;!&quot;</span><span style="color:#24292E;">表示非空</span></span>
<span class="line"><span style="color:#24292E;">    # Book是返回值类型，这里返回的是一个Book对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getById</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ID</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Book</span></span>
<span class="line"><span style="color:#24292E;">    # 查询Book列表</span></span>
<span class="line"><span style="color:#24292E;">    list</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [Book]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="加载-graphql-schema-文件" tabindex="-1">加载 GraphQL Schema 文件 <a class="header-anchor" href="#加载-graphql-schema-文件" aria-label="Permalink to &quot;加载 GraphQL Schema 文件&quot;">​</a></h4><p>在 GraphQL Java 中加载并解析 GraphQL Schema 文件的方式如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GraphQLProvider</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GraphQL graphQL;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> GraphQL </span><span style="color:#B392F0;">graphQL</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> graphQL;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostConstruct</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 读取 GraphQL Schema文件并创建 GraphQL实例，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 该GraphQL实例会通过上面的 graphQL()方法暴露给Spring，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 默认情况下，请求到&quot;/graphql&quot;这个path上的请求都会由该GraphQL实例处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">getResource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;book.graphqls&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String sdl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(url, Charsets.UTF_8);</span></span>
<span class="line"><span style="color:#E1E4E8;">        GraphQLSchema graphQLSchema </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildSchema</span><span style="color:#E1E4E8;">(sdl);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.graphQL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GraphQL.</span><span style="color:#B392F0;">newGraphQL</span><span style="color:#E1E4E8;">(graphQLSchema).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GraphQLSchema </span><span style="color:#B392F0;">buildSchema</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">sdl</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// GraphQL Schema文件被解析之后，就是这里的 TypeDefinitionRegistry对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        TypeDefinitionRegistry typeRegistry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SchemaParser</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(sdl);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注册DataFetcher，DataFetcher的介绍以及buildWiring()方法实现在后面马上会进行介绍</span></span>
<span class="line"><span style="color:#E1E4E8;">        RuntimeWiring runtimeWiring </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildWiring</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        SchemaGenerator schemaGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SchemaGenerator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将GraphQL Schema中定义的与 DataFetcher关联起来</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> schemaGenerator.</span><span style="color:#B392F0;">makeExecutableSchema</span><span style="color:#E1E4E8;">(typeRegistry, runtimeWiring);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这哪是省略buildWiring()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GraphQLProvider</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GraphQL graphQL;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> GraphQL </span><span style="color:#6F42C1;">graphQL</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> graphQL;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostConstruct</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 读取 GraphQL Schema文件并创建 GraphQL实例，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 该GraphQL实例会通过上面的 graphQL()方法暴露给Spring，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 默认情况下，请求到&quot;/graphql&quot;这个path上的请求都会由该GraphQL实例处理</span></span>
<span class="line"><span style="color:#24292E;">        URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getResource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book.graphqls&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        String sdl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(url, Charsets.UTF_8);</span></span>
<span class="line"><span style="color:#24292E;">        GraphQLSchema graphQLSchema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildSchema</span><span style="color:#24292E;">(sdl);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.graphQL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GraphQL.</span><span style="color:#6F42C1;">newGraphQL</span><span style="color:#24292E;">(graphQLSchema).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GraphQLSchema </span><span style="color:#6F42C1;">buildSchema</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">sdl</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// GraphQL Schema文件被解析之后，就是这里的 TypeDefinitionRegistry对象</span></span>
<span class="line"><span style="color:#24292E;">        TypeDefinitionRegistry typeRegistry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SchemaParser</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(sdl);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注册DataFetcher，DataFetcher的介绍以及buildWiring()方法实现在后面马上会进行介绍</span></span>
<span class="line"><span style="color:#24292E;">        RuntimeWiring runtimeWiring </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildWiring</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        SchemaGenerator schemaGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SchemaGenerator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将GraphQL Schema中定义的与 DataFetcher关联起来</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> schemaGenerator.</span><span style="color:#6F42C1;">makeExecutableSchema</span><span style="color:#24292E;">(typeRegistry, runtimeWiring);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这哪是省略buildWiring()方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们接触到了几个新类型。</p><ul><li><p>GraphQL：它默认将处理&quot;/graphql&quot;这个 path 上的全部请求；</p></li><li><p>TypeDefinitionRegistry：它是 GraphQL Schema 文件的解析结果；</p></li><li><p>SchemaGenerator: 它关联了 TypeDefinitionRegistry 对象和后面要介绍的 DataFetcher 对象，并生成一个 GraphQLSchema 对象；</p></li><li><p>RuntimeWiring：后面介绍的 DataFetcher 对象将注册到 RuntimeWiring 中，具体的注册方式在 buildWiring() 方法中（后面分析）。</p></li></ul><h4 id="关联-datafetcher" tabindex="-1">关联 DataFetcher <a class="header-anchor" href="#关联-datafetcher" aria-label="Permalink to &quot;关联 DataFetcher&quot;">​</a></h4><p>DataFetcher 是在 GraphQL Java 服务端中比较重要的概念之一。DataFetcher 的核心功能是：获取查询字段的相应数据。DataFetcher 接口的实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataFetcher</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// DataFetchingEnvironment中记录了很多信息，例如：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 该 DataFetcher对应的字段以及类型、查询的外层对象以及根对象、当前上下文信息等等一系列信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    T </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(DataFetchingEnvironment </span><span style="color:#FFAB70;">dataFetchingEnvironment</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataFetcher</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// DataFetchingEnvironment中记录了很多信息，例如：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 该 DataFetcher对应的字段以及类型、查询的外层对象以及根对象、当前上下文信息等等一系列信息</span></span>
<span class="line"><span style="color:#24292E;">    T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(DataFetchingEnvironment </span><span style="color:#E36209;">dataFetchingEnvironment</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 GraphQLProvider.buildWiring() 方法中，我们为 Query.getById 方法与 Book.author 字段绑定了自定义的 DataFetcher 实现，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">GraphQLDataFetchers graphQLDataFetchers;</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RuntimeWiring </span><span style="color:#B392F0;">buildWiring</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> RuntimeWiring.</span><span style="color:#B392F0;">newRuntimeWiring</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将Query.getById与getBookByIdDataFetcher()方法返回的DataFetcher实现关联</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">newTypeWiring</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Query&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">dataFetcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getById&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                            graphQLDataFetchers.</span><span style="color:#B392F0;">getBookByIdDataFetcher</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                            .</span><span style="color:#B392F0;">dataFetcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;">, graphQLDataFetchers.</span><span style="color:#B392F0;">listDataFetcher</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将Book.author字段与getBookByIdDataFetcher()方法返回的DataFetcher实现关联</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">newTypeWiring</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Book&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">dataFetcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;author&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                            graphQLDataFetchers.</span><span style="color:#B392F0;">getAuthorDataFetcher</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">GraphQLDataFetchers graphQLDataFetchers;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RuntimeWiring </span><span style="color:#6F42C1;">buildWiring</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> RuntimeWiring.</span><span style="color:#6F42C1;">newRuntimeWiring</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将Query.getById与getBookByIdDataFetcher()方法返回的DataFetcher实现关联</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">newTypeWiring</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Query&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">dataFetcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getById&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                            graphQLDataFetchers.</span><span style="color:#6F42C1;">getBookByIdDataFetcher</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                            .</span><span style="color:#6F42C1;">dataFetcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;">, graphQLDataFetchers.</span><span style="color:#6F42C1;">listDataFetcher</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将Book.author字段与getBookByIdDataFetcher()方法返回的DataFetcher实现关联</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">newTypeWiring</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Book&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">dataFetcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;author&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                            graphQLDataFetchers.</span><span style="color:#6F42C1;">getAuthorDataFetcher</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>GraphQLDataFetchers 的定义如下，GraphQLDataFetchers 中定义了 books 和 authors 两个集合来模拟数据源，getBookByIdDataFetcher() 方法和 getAuthorDataFetcher() 方法返回的自定义 DataFetcher 实现会分别查询这两个集合返回相应数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GraphQLDataFetchers</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;ImmutableMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt; books </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            ImmutableMap.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;book-1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Harry Potter and the Philosopher&#39;s Stone&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;pageCount&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;223&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;authorId&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;author-1&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;ImmutableMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt; authors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            ImmutableMap.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;author-1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;firstName&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Joanne&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;lastName&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Rowling&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataFetcher </span><span style="color:#B392F0;">getBookByIdDataFetcher</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataFetchingEnvironment </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 获取 id参数，然后根据id查找 books集合并返回相应的 Book信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            String bookId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataFetchingEnvironment.</span><span style="color:#B392F0;">getArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> books.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(book </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> book.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(bookId))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">findFirst</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataFetcher </span><span style="color:#B392F0;">getAuthorDataFetcher</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataFetchingEnvironment </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// DataFetcher 会按照 GraphQL Schema定义从外层向内层调用</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 这里可以直接通过 DataFetchingEnvironment获取外层 DataFetcher查找到的数据(即关联的Book）</span></span>
<span class="line"><span style="color:#E1E4E8;">            Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; book </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataFetchingEnvironment.</span><span style="color:#B392F0;">getSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            String authorId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> book.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;authorId&quot;</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 根据 authorId查找作者信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> authors.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(author </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> author.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(authorId))</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">findFirst</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataFetcher </span><span style="color:#B392F0;">listDataFetcher</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataFetchingEnvironment </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> books;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GraphQLDataFetchers</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;ImmutableMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; books </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            ImmutableMap.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;book-1&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Harry Potter and the Philosopher&#39;s Stone&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;pageCount&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;223&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;authorId&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;author-1&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;ImmutableMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; authors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            ImmutableMap.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;author-1&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;firstName&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Joanne&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lastName&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Rowling&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataFetcher </span><span style="color:#6F42C1;">getBookByIdDataFetcher</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataFetchingEnvironment </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 获取 id参数，然后根据id查找 books集合并返回相应的 Book信息</span></span>
<span class="line"><span style="color:#24292E;">            String bookId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataFetchingEnvironment.</span><span style="color:#6F42C1;">getArgument</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> books.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(book </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> book.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(bookId))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">findFirst</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataFetcher </span><span style="color:#6F42C1;">getAuthorDataFetcher</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataFetchingEnvironment </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// DataFetcher 会按照 GraphQL Schema定义从外层向内层调用</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 这里可以直接通过 DataFetchingEnvironment获取外层 DataFetcher查找到的数据(即关联的Book）</span></span>
<span class="line"><span style="color:#24292E;">            Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataFetchingEnvironment.</span><span style="color:#6F42C1;">getSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            String authorId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> book.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;authorId&quot;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 根据 authorId查找作者信息</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> authors.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(author </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> author.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(authorId))</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">findFirst</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataFetcher </span><span style="color:#6F42C1;">listDataFetcher</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataFetchingEnvironment </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> books;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>GraphQL Schema 中的每个字段都会关联一个 DataFetcher，如果未通过 RuntimeWiring 方式明确关联的自定义 DataFetcher ，会默认关联 PropertyDataFetcher。PropertyDataFetcher 会有多种方式从外层结果中为关联字段查找正确的值：</p><ol><li><p>如果外层查找结果为 null，则直接返回 null，否则执行步骤 2；</p></li><li><p>通过 function 从外层查询结果中提起对应字段值，该 function 是在 PropertyDataFetcher 初始化时指定，若未指定 function 则执行步骤 3；</p></li><li><p>如果外层查询结果为 Map，则从该 Map 中直接获取字段值；</p></li><li><p>如果外层查询结果是 Java 对象，则调用相应的 getter 方法获取字段值。</p></li></ol><p>最后我们回顾整个示例项目，其核心逻辑如下图：</p>`,29),i=n("h4",{id:"启动",tabindex:"-1"},[r("启动 "),n("a",{class:"header-anchor",href:"#启动","aria-label":'Permalink to "启动"'},"​")],-1),F=n("p",null,'启动该 Spring 项目之后，可以使用 GraphQL Playground 这个工具访问"/graphql"，并传入查询 Book 的请求，如下图所示：',-1),h=p('<p>如果想查看 Http 请求，可以点击 COPY CURL 按钮获取相应的 curl 命令，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#9ECBFF;">&#39;http://localhost:8080/graphql&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&#39;Content-Type: application/json&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">binary </span><span style="color:#9ECBFF;">&#39;{&quot;query&quot;:&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">{</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">      getById(id:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">book-1</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">) {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">        id</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">        name</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">        pageCount</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">        author{</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">        </span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">firstName</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">        </span><span style="color:#79B8FF;">\\t</span><span style="color:#9ECBFF;">lastName</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">        }</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">    }</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}&quot;}&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">compressed</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#032F62;">&#39;http://localhost:8080/graphql&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&#39;Content-Type: application/json&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">binary </span><span style="color:#032F62;">&#39;{&quot;query&quot;:&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">{</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">      getById(id:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">book-1</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">) {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">        id</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">        name</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">        pageCount</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">        author{</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">        </span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">firstName</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">        </span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">lastName</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">        }</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">    }</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">}&quot;}&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">compressed</span></span></code></pre></div><p>list 请求如下图所示：</p>',3),u=p(`<p>到此为止，GraphQL Java Demo 项目的涉及的基础知识就全部介绍完了。</p><h3 id="graphql-java-tools-入门" tabindex="-1">GraphQL Java Tools 入门 <a class="header-anchor" href="#graphql-java-tools-入门" aria-label="Permalink to &quot;GraphQL Java Tools 入门&quot;">​</a></h3><p>在使用 GraphQL Java 开发服务端 API 的时候，需要手写前文介绍的 DataFetcher 实现、GraphQLSchema 解析逻辑以及 GraphQL 对象的实例化过程。</p><p>GraphQL Java Tools 可以帮助我们屏蔽底层的 GraphQL Java 中的复杂概念和重复代码，GraphQL Java Tools 能够从 GraphQL Schema 定义（即 .graphqls 文件）中构建出相应的 Java 的 POJO 类型对象，GraphQL Java Tools 将读取 classpath 下所有以 .graphqls 为后缀名的文件，然后创建 GraphQL Schema 对象。GraphQL Java Tools 也是依赖于 GraphQL Java 实现的。</p><p>这里依然以上面图书管理的 demo 为例来介绍 GraphQL Java Tools 的使用，前文示例的GraphQL Schema 定义的 Book 、Author 以及 Query 三种类型我们保持不变。Query 接口是 GraphQL 查询的入口，我们可以通过 extend 的方式扩展 Query，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">extend type Query{ # 扩展 Query</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getAuthorById</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ID</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Author # 根据 id查询作者信息</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">extend type Query{ # 扩展 Query</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getAuthorById</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ID</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Author # 根据 id查询作者信息</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>GraphQL Schema 中还可以定义 Mutation 类型作为修改数据的入口，如下所示，启动定义了 createBook 和 createAuthor 两个方法，分别用来新增图书信息和作者信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type Mutation {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">createBook</span><span style="color:#E1E4E8;">(input </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> BookInput</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Book</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">createAuthor</span><span style="color:#E1E4E8;">(firstName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">, lastName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ID</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">input BookInput {  # input 表示入参</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">    pageCount </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">    authorId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type Mutation {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">createBook</span><span style="color:#24292E;">(input </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> BookInput</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Book</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">createAuthor</span><span style="color:#24292E;">(firstName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">, lastName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ID</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">input BookInput {  # input 表示入参</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">    pageCount </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">    authorId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里引入了一个 BootInput 类型，将需要传递到服务端的数据封装起来，GraphQL 中返回类型和输入类型（input）是不能共用的，所以加上 input 后缀加以区分。</p><p>GraphQL Java Tools 可以将 GraphQL 对象的方法和字段映射到 Java 对象。一般情况下，GraphQL Java Tools 可以通过 POJO 的字段或是相应的 getter 方法完成字段读取，对于复杂字段，则需要定义相应的 Resolver 实现。例如，下面为 GraphQL Schema 定义对应了 Book 和 Author 两个 POJO（以及 BookInput）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Book</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pageCount;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String authorId;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略 getter/setter 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Author</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String firstName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String lastName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略 getter/setter 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BookInput</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pageCount;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String authorId;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略 getter/setter 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Book</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pageCount;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String authorId;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略 getter/setter 方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Author</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String firstName;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String lastName;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略 getter/setter 方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookInput</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pageCount;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String authorId;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略 getter/setter 方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>很明显，这里定义的 Book.java 中大部分字段都与 GraphQL Schema 中的 Book 一一对应，但是 authorId 字段与 GraphQL Schema 中 Book 的 author 字段是无法直接完成映射的，这里就需要一个 GraphQLResolver 实现来完成该转换，例如下面的 BookResolver 实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BookResolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GraphQLResolver</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Book</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AuthorService authorService;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Author </span><span style="color:#B392F0;">author</span><span style="color:#E1E4E8;">(Book </span><span style="color:#FFAB70;">book</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> authorService.</span><span style="color:#B392F0;">getAuthorById</span><span style="color:#E1E4E8;">(book.</span><span style="color:#B392F0;">getAuthorId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookResolver</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GraphQLResolver</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Book</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AuthorService authorService;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Author </span><span style="color:#6F42C1;">author</span><span style="color:#24292E;">(Book </span><span style="color:#E36209;">book</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> authorService.</span><span style="color:#6F42C1;">getAuthorById</span><span style="color:#24292E;">(book.</span><span style="color:#6F42C1;">getAuthorId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 GraphQL Java Tools 需要将 Java 对象映射成 GraphQL 对象的时候，首先会尝试使用相应 GraphQLResolver（示例中的 BookResolver） 的相应方法完成映射（示例中的 author() 方法），如果在 GraphQLResolver 没有方法才会使用相应的 getter 方法或是直接访问字段。</p><p>BookResolver.author() 方法的实现也可以看出，被映射的 Java 对象需要作为参数传入。</p><br><p>在 GraphQL Schema 中定义的 Query 和 Mutation 是 GraphQL 查询和修改数据的入口，它们对应的 Resolver 实现需要实现 GraphQLQueryResolver 或 GraphQLMutationResolver。例如下面定义的 BookService 以及 AuthorService：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BookService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GraphQLQueryResolver</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">GraphQLMutationResolver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Book </span><span style="color:#B392F0;">getBookById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Book</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Book </span><span style="color:#B392F0;">createBook</span><span style="color:#E1E4E8;">(BookInput </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GraphQLQueryResolver</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">GraphQLMutationResolver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">createAuthor</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">firstName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">lastName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Author </span><span style="color:#B392F0;">getAuthorById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GraphQLQueryResolver</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">GraphQLMutationResolver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Book </span><span style="color:#6F42C1;">getBookById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Book</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">list</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Book </span><span style="color:#6F42C1;">createBook</span><span style="color:#24292E;">(BookInput </span><span style="color:#E36209;">input</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GraphQLQueryResolver</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">GraphQLMutationResolver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">createAuthor</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">firstName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">lastName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Author </span><span style="color:#6F42C1;">getAuthorById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>GraphQL Java Tools 会根据方法名将上述 GraphQLQueryResolver 或 GraphQLMutationResolver 与 GraphQL Schema 中的 Query 和 Mutation 进行映射。</p><p>BookService 和 AuthorService 的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BookServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BookService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用递增方式生成 id后缀</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AtomicLong idGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里并没有使用持久化存储，而是使用该 List将图书信息保存在内存中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Book</span><span style="color:#E1E4E8;">&gt; books </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Lists.</span><span style="color:#B392F0;">newCopyOnWriteArrayList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Book </span><span style="color:#B392F0;">getBookById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> books.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(b </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(id))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">findFirst</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Book</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">list</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> books;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Book </span><span style="color:#B392F0;">createBook</span><span style="color:#E1E4E8;">(BookInput </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;book-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> idGenerator.</span><span style="color:#B392F0;">getAndIncrement</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Book book </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Book</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        book.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">        book.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(input.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        book.</span><span style="color:#B392F0;">setPageCount</span><span style="color:#E1E4E8;">(input.</span><span style="color:#B392F0;">getPageCount</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        book.</span><span style="color:#B392F0;">setAuthorId</span><span style="color:#E1E4E8;">(input.</span><span style="color:#B392F0;">getAuthorId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        books.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(book);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> book;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorServiceImpl</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AtomicLong idGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicLong</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Author</span><span style="color:#E1E4E8;">&gt; authors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Lists.</span><span style="color:#B392F0;">newCopyOnWriteArrayList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">createAuthor</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">firstName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">lastName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;author-&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> idGenerator.</span><span style="color:#B392F0;">getAndIncrement</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Author author </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Author</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    author.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    author.</span><span style="color:#B392F0;">setFirstName</span><span style="color:#E1E4E8;">(firstName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    author.</span><span style="color:#B392F0;">setLastName</span><span style="color:#E1E4E8;">(lastName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    authors.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(author);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Author </span><span style="color:#B392F0;">getAuthorById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> authors.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(id))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">findFirst</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用递增方式生成 id后缀</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AtomicLong idGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里并没有使用持久化存储，而是使用该 List将图书信息保存在内存中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Book</span><span style="color:#24292E;">&gt; books </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newCopyOnWriteArrayList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Book </span><span style="color:#6F42C1;">getBookById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> books.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(b </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(id))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">findFirst</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Book</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">list</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> books;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Book </span><span style="color:#6F42C1;">createBook</span><span style="color:#24292E;">(BookInput </span><span style="color:#E36209;">input</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;book-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> idGenerator.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Book book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Book</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        book.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">        book.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(input.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        book.</span><span style="color:#6F42C1;">setPageCount</span><span style="color:#24292E;">(input.</span><span style="color:#6F42C1;">getPageCount</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        book.</span><span style="color:#6F42C1;">setAuthorId</span><span style="color:#24292E;">(input.</span><span style="color:#6F42C1;">getAuthorId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        books.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(book);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> book;</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AtomicLong idGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Author</span><span style="color:#24292E;">&gt; authors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newCopyOnWriteArrayList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">createAuthor</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">firstName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">lastName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    String id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;author-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> idGenerator.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Author author </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Author</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    author.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">    author.</span><span style="color:#6F42C1;">setFirstName</span><span style="color:#24292E;">(firstName);</span></span>
<span class="line"><span style="color:#24292E;">    author.</span><span style="color:#6F42C1;">setLastName</span><span style="color:#24292E;">(lastName);</span></span>
<span class="line"><span style="color:#24292E;">    authors.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(author);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Author </span><span style="color:#6F42C1;">getAuthorById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> authors.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(id))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">findFirst</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，我们启动该 Demo 项目，使用 GraphQL Playground 分别请求 Query 和 Mutation 中定义的接口，如下图所示：</p>`,22),g=n("p",null,"到此为止，GraphQL 入门示例分析就结束了。",-1);function d(A,B,D,C,v,m){const s=o("Image");return e(),t("div",null,[E,a(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/21/B6/CgqCHl7q_OOAPGBqAAPjNVHf5Xk878.png"}),y,a(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/21/AB/Ciqc1F7q_W-AJHWvAALYJGT3C0E099.png"}),i,F,a(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/21/AB/Ciqc1F7q_b2ASlkPAAG_Pnp7t9o721.png"}),h,a(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/21/AB/Ciqc1F7q_ciALYuxAAKZFgwrgvo996.png"}),u,a(s,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/21/B7/CgqCHl7q_i-AIWISAAH5fsYHv6s340.png"}),a(s,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/21/B7/CgqCHl7q_jWAYBBBAAH-aJOU-Zk683.png"}),g])}const L=l(c,[["render",d]]);export{b as __pageData,L as default};
