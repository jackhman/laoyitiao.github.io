import{_ as p,j as o,o as e,h as r,k as n,f as l,Q as s}from"./chunks/framework.d3daa342.js";const h=JSON.parse('{"title":"03DubboSPI精析，接口实现两极反转（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4259) 03  Dubbo SPI 精析，接口实现两极反转（上）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4259) 03  Dubbo SPI 精析，接口实现两极反转（上）.md","lastUpdated":1696682708000}'),t={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4259) 03  Dubbo SPI 精析，接口实现两极反转（上）.md"},c=s('<h1 id="_03dubbospi精析-接口实现两极反转-上" tabindex="-1">03DubboSPI精析，接口实现两极反转（上） <a class="header-anchor" href="#_03dubbospi精析-接口实现两极反转-上" aria-label="Permalink to &quot;03DubboSPI精析，接口实现两极反转（上）&quot;">​</a></h1><p>Dubbo 为了更好地达到 OCP 原则（即&quot;对扩展开放，对修改封闭&quot;的原则），采用了&quot;<strong>微内核+插件</strong>&quot;的架构。那什么是微内核架构呢？微内核架构也被称为插件化架构（Plug-in Architecture），这是一种面向功能进行拆分的可扩展性架构。内核功能是比较稳定的，只负责管理插件的生命周期，不会因为系统功能的扩展而不断进行修改。功能上的扩展全部封装到插件之中，插件模块是独立存在的模块，包含特定的功能，能拓展内核系统的功能。</p><p>微内核架构中，内核通常采用 Factory、IoC、OSGi 等方式管理插件生命周期，<strong>Dubbo 最终决定采用 SPI 机制来加载插件</strong>，Dubbo SPI 参考 JDK 原生的 SPI 机制，进行了性能优化以及功能增强。因此，在讲解 Dubbo SPI 之前，我们有必要先来介绍一下 JDK SPI 的工作原理。</p><h3 id="jdk-spi" tabindex="-1">JDK SPI <a class="header-anchor" href="#jdk-spi" aria-label="Permalink to &quot;JDK SPI&quot;">​</a></h3><p>SPI（Service Provider Interface）主要是被<strong>框架开发人员</strong>使用的一种技术。例如，使用 Java 语言访问数据库时我们会使用到 java.sql.Driver 接口，不同数据库产品底层的协议不同，提供的 java.sql.Driver 实现也不同，在开发 java.sql.Driver 接口时，开发人员并不清楚用户最终会使用哪个数据库，在这种情况下就可以使用 Java SPI 机制在实际运行过程中，为 java.sql.Driver 接口寻找具体的实现。</p><h4 id="_1-jdk-spi-机制" tabindex="-1">1. JDK SPI 机制 <a class="header-anchor" href="#_1-jdk-spi-机制" aria-label="Permalink to &quot;1. JDK SPI 机制&quot;">​</a></h4><p>当服务的提供者提供了一种接口的实现之后，需要在 Classpath 下的 META-INF/services/ 目录里创建一个以服务接口命名的文件，此文件记录了该 jar 包提供的服务接口的具体实现类。当某个应用引入了该 jar 包且需要使用该服务时，JDK SPI 机制就可以通过查找这个 jar 包的 META-INF/services/ 中的配置文件来获得具体的实现类名，进行实现类的加载和实例化，最终使用该实现类完成业务功能。</p><p>下面我们通过一个简单的示例演示下 JDK SPI 的基本使用方式：</p>',8),E=s(`<p>首先我们需要创建一个 Log 接口，来模拟日志打印的功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">info</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来提供两个实现------ Logback 和 Log4j，分别代表两个不同日志框架的实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Logback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Logback:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> info); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log4j</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Log4j:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> info); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Logback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Logback:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> info); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log4j</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Log4j:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> info); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在项目的 resources/META-INF/services 目录下添加一个名为 com.xxx.Log 的文件，这是 JDK SPI 需要读取的配置文件，具体内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">com.xxx.impl.Log4j </span></span>
<span class="line"><span style="color:#E1E4E8;">com.xxx.impl.Logback</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">com.xxx.impl.Log4j </span></span>
<span class="line"><span style="color:#24292E;">com.xxx.impl.Logback</span></span></code></pre></div><p>最后创建 main() 方法，其中会加载上述配置文件，创建全部 Log 接口实现的实例，并执行其 log() 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        ServiceLoader&lt;</span><span style="color:#F97583;">Log</span><span style="color:#E1E4E8;">&gt; serviceLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">                ServiceLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(Log.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">        Iterator&lt;</span><span style="color:#F97583;">Log</span><span style="color:#E1E4E8;">&gt; iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceLoader.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (iterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            Log log </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;JDK SPI&quot;</span><span style="color:#E1E4E8;">);  </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 输出如下: </span></span>
<span class="line"><span style="color:#6A737D;">// Log4j:JDK SPI </span></span>
<span class="line"><span style="color:#6A737D;">// Logback:JDK SPI</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        ServiceLoader&lt;</span><span style="color:#D73A49;">Log</span><span style="color:#24292E;">&gt; serviceLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">                ServiceLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(Log.class); </span></span>
<span class="line"><span style="color:#24292E;">        Iterator&lt;</span><span style="color:#D73A49;">Log</span><span style="color:#24292E;">&gt; iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceLoader.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (iterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            Log log </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JDK SPI&quot;</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 输出如下: </span></span>
<span class="line"><span style="color:#6A737D;">// Log4j:JDK SPI </span></span>
<span class="line"><span style="color:#6A737D;">// Logback:JDK SPI</span></span></code></pre></div><h4 id="_2-jdk-spi-源码分析" tabindex="-1">2. JDK SPI 源码分析 <a class="header-anchor" href="#_2-jdk-spi-源码分析" aria-label="Permalink to &quot;2. JDK SPI 源码分析&quot;">​</a></h4><p>通过上述示例，我们可以看到 JDK SPI 的入口方法是 ServiceLoader.load() 方法，接下来我们就对其具体实现进行深入分析。</p><p>在 ServiceLoader.load() 方法中，首先会尝试获取当前使用的 ClassLoader（获取当前线程绑定的 ClassLoader，查找失败后使用 SystemClassLoader），然后调用 reload() 方法，调用关系如下图所示：</p>`,11),y=s(`<p>在 reload() 方法中，首先会清理 providers 缓存（LinkedHashMap 类型的集合），该缓存用来记录 ServiceLoader 创建的实现对象，其中 Key 为实现类的完整类名，Value 为实现类的对象。之后创建 LazyIterator 迭代器，用于读取 SPI 配置文件并实例化实现类对象。</p><p>ServiceLoader.reload() 方法的具体实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 缓存，用来缓存 ServiceLoader创建的实现对象 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> LinkedHashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; providers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reload</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    providers.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 清空缓存 </span></span>
<span class="line"><span style="color:#E1E4E8;">    lookupIterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LazyIterator</span><span style="color:#E1E4E8;">(service, loader); </span><span style="color:#6A737D;">// 迭代器 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 缓存，用来缓存 ServiceLoader创建的实现对象 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> LinkedHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; providers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reload</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    providers.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 清空缓存 </span></span>
<span class="line"><span style="color:#24292E;">    lookupIterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LazyIterator</span><span style="color:#24292E;">(service, loader); </span><span style="color:#6A737D;">// 迭代器 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在前面的示例中，main() 方法中使用的迭代器底层就是调用了 ServiceLoader.LazyIterator 实现的。Iterator 接口有两个关键方法：hasNext() 方法和 next() 方法。这里的 LazyIterator 中的next() 方法最终调用的是其 nextService() 方法，hasNext() 方法最终调用的是 hasNextService() 方法，调用关系如下图所示：</p>`,4),i=s(`<p>首先来看 LazyIterator.hasNextService() 方法，该方法主要<strong>负责查找 META-INF/services 目录下的 SPI 配置文件</strong>，并进行遍历，大致实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;META-INF/services/&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">Enumeration&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; configs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">Iterator&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">String nextName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasNextService</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nextName </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (configs </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// PREFIX前缀与服务接口的名称拼接起来，就是META-INF目录下定义的SPI配 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 置文件(即示例中的META-INF/services/com.xxx.Log) </span></span>
<span class="line"><span style="color:#E1E4E8;">        String fullName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PREFIX </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> service.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 加载配置文件 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (loader </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            configs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassLoader.</span><span style="color:#B392F0;">getSystemResources</span><span style="color:#E1E4E8;">(fullName); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            configs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loader.</span><span style="color:#B392F0;">getResources</span><span style="color:#E1E4E8;">(fullName); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 按行SPI遍历配置文件的内容 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((pending </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">pending.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">configs.</span><span style="color:#B392F0;">hasMoreElements</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 解析配置文件 </span></span>
<span class="line"><span style="color:#E1E4E8;">        pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(service, configs.</span><span style="color:#B392F0;">nextElement</span><span style="color:#E1E4E8;">());  </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    nextName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pending.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 更新 nextName字段 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;META-INF/services/&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">Enumeration&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; configs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">Iterator&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">String nextName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNextService</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nextName </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (configs </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// PREFIX前缀与服务接口的名称拼接起来，就是META-INF目录下定义的SPI配 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 置文件(即示例中的META-INF/services/com.xxx.Log) </span></span>
<span class="line"><span style="color:#24292E;">        String fullName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PREFIX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 加载配置文件 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            configs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassLoader.</span><span style="color:#6F42C1;">getSystemResources</span><span style="color:#24292E;">(fullName); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            configs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader.</span><span style="color:#6F42C1;">getResources</span><span style="color:#24292E;">(fullName); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 按行SPI遍历配置文件的内容 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((pending </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pending.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">configs.</span><span style="color:#6F42C1;">hasMoreElements</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 解析配置文件 </span></span>
<span class="line"><span style="color:#24292E;">        pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(service, configs.</span><span style="color:#6F42C1;">nextElement</span><span style="color:#24292E;">());  </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    nextName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pending.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 更新 nextName字段 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 hasNextService() 方法中完成 SPI 配置文件的解析之后，再来看 LazyIterator.nextService() 方法，该方法<strong>负责实例化 hasNextService() 方法读取到的实现类</strong>，其中会将实例化的对象放到 providers 集合中缓存起来，核心实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> S </span><span style="color:#B392F0;">nextService</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    String cn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nextName; </span></span>
<span class="line"><span style="color:#E1E4E8;">    nextName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载 nextName字段指定的类 </span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(cn, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, loader); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">service.</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(c)) { </span><span style="color:#6A737D;">// 检测类型 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">fail</span><span style="color:#E1E4E8;">(service, </span><span style="color:#9ECBFF;">&quot;Provider &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> cn  </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; not a subtype&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    S p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> service.</span><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;">(c.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 创建实现类的对象 </span></span>
<span class="line"><span style="color:#E1E4E8;">    providers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(cn, p); </span><span style="color:#6A737D;">// 将实现类名称以及相应实例对象添加到缓存 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> p; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> S </span><span style="color:#6F42C1;">nextService</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    String cn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextName; </span></span>
<span class="line"><span style="color:#24292E;">    nextName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载 nextName字段指定的类 </span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(cn, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, loader); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(c)) { </span><span style="color:#6A737D;">// 检测类型 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(service, </span><span style="color:#032F62;">&quot;Provider &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> cn  </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; not a subtype&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    S p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">cast</span><span style="color:#24292E;">(c.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 创建实现类的对象 </span></span>
<span class="line"><span style="color:#24292E;">    providers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(cn, p); </span><span style="color:#6A737D;">// 将实现类名称以及相应实例对象添加到缓存 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上就是在 main() 方法中使用的迭代器的底层实现。最后，我们再来看一下 main() 方法中使用ServiceLoader.iterator() 方法拿到的迭代器是如何实现的，这个迭代器是依赖 LazyIterator 实现的一个匿名内部类，核心实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Iterator</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">S</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Iterator&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt;() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// knownProviders用来迭代providers缓存 </span></span>
<span class="line"><span style="color:#E1E4E8;">        Iterator&lt;</span><span style="color:#F97583;">Map</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">Entry</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt;&gt; knownProviders </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> providers.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 先走查询缓存，缓存查询失败，再通过LazyIterator加载 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (knownProviders.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">())  </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> lookupIterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> S </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 先走查询缓存，缓存查询失败，再通过 LazyIterator加载 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (knownProviders.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> knownProviders.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> lookupIterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 省略remove()方法 </span></span>
<span class="line"><span style="color:#E1E4E8;">    }; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Iterator</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">S</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Iterator&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt;() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// knownProviders用来迭代providers缓存 </span></span>
<span class="line"><span style="color:#24292E;">        Iterator&lt;</span><span style="color:#D73A49;">Map</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt;&gt; knownProviders </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> providers.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 先走查询缓存，缓存查询失败，再通过LazyIterator加载 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (knownProviders.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())  </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lookupIterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> S </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 先走查询缓存，缓存查询失败，再通过 LazyIterator加载 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (knownProviders.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> knownProviders.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lookupIterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 省略remove()方法 </span></span>
<span class="line"><span style="color:#24292E;">    }; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-jdk-spi-在-jdbc-中的应用" tabindex="-1">3. JDK SPI 在 JDBC 中的应用 <a class="header-anchor" href="#_3-jdk-spi-在-jdbc-中的应用" aria-label="Permalink to &quot;3. JDK SPI 在 JDBC 中的应用&quot;">​</a></h4><p>了解了 JDK SPI 实现的原理之后，我们再来看实践中 JDBC 是如何使用 JDK SPI 机制加载不同数据库厂商的实现类。</p><p>JDK 中只定义了一个 java.sql.Driver 接口，具体的实现是由不同数据库厂商来提供的。这里我们就以 MySQL 提供的 JDBC 实现包为例进行分析。</p><p>在 mysql-connector-java-*.jar 包中的 META-INF/services 目录下，有一个 java.sql.Driver 文件中只有一行内容，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">com.mysql.cj.jdbc.Driver</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">com.mysql.cj.jdbc.Driver</span></span></code></pre></div><p>在使用 mysql-connector-java-*.jar 包连接 MySQL 数据库的时候，我们会用到如下语句创建数据库连接：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jdbc:xxx://xxx:xxx/xxx&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">Connection conn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DriverManager.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(url, username, pwd);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jdbc:xxx://xxx:xxx/xxx&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">Connection conn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DriverManager.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(url, username, pwd);</span></span></code></pre></div><p><strong>DriverManager 是 JDK 提供的数据库驱动管理器</strong>，其中的代码片段，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">loadInitialDrivers</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;JDBC DriverManager initialized&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">loadInitialDrivers</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JDBC DriverManager initialized&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在调用 getConnection() 方法的时候，DriverManager 类会被 Java 虚拟机加载、解析并触发 static 代码块的执行；在 loadInitialDrivers() 方法中通过 JDK SPI 扫描 Classpath 下 java.sql.Driver 接口实现类并实例化，核心实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadInitialDrivers</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    String drivers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jdbc.drivers&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用 JDK SPI机制加载所有 java.sql.Driver实现类 </span></span>
<span class="line"><span style="color:#E1E4E8;">    ServiceLoader&lt;</span><span style="color:#F97583;">Driver</span><span style="color:#E1E4E8;">&gt; loadedDrivers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">           ServiceLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(Driver.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;</span><span style="color:#F97583;">Driver</span><span style="color:#E1E4E8;">&gt; driversIterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loadedDrivers.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(driversIterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        driversIterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] driversList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> drivers.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String aDriver </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> driversList) { </span><span style="color:#6A737D;">// 初始化Driver实现类 </span></span>
<span class="line"><span style="color:#E1E4E8;">        Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(aDriver, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">            ClassLoader.</span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadInitialDrivers</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    String drivers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jdbc.drivers&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 JDK SPI机制加载所有 java.sql.Driver实现类 </span></span>
<span class="line"><span style="color:#24292E;">    ServiceLoader&lt;</span><span style="color:#D73A49;">Driver</span><span style="color:#24292E;">&gt; loadedDrivers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">           ServiceLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(Driver.class); </span></span>
<span class="line"><span style="color:#24292E;">    Iterator&lt;</span><span style="color:#D73A49;">Driver</span><span style="color:#24292E;">&gt; driversIterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loadedDrivers.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(driversIterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        driversIterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] driversList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> drivers.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String aDriver </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> driversList) { </span><span style="color:#6A737D;">// 初始化Driver实现类 </span></span>
<span class="line"><span style="color:#24292E;">        Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(aDriver, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">            ClassLoader.</span><span style="color:#6F42C1;">getSystemClassLoader</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 MySQL 提供的 com.mysql.cj.jdbc.Driver 实现类中，同样有一段 static 静态代码块，这段代码会创建一个 com.mysql.cj.jdbc.Driver 对象并注册到 DriverManager.registeredDrivers 集合中（CopyOnWriteArrayList 类型），如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">   java.sql.DriverManager.</span><span style="color:#B392F0;">registerDriver</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Driver</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">   java.sql.DriverManager.</span><span style="color:#6F42C1;">registerDriver</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Driver</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 getConnection() 方法中，DriverManager 从该 registeredDrivers 集合中获取对应的 Driver 对象创建 Connection，核心实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(String url, java.util.Properties info, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> caller) throws SQLException { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略 try/catch代码块以及权限处理逻辑 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(DriverInfo aDriver </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> registeredDrivers) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Connection con </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aDriver.driver.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(url, info); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> con; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(String url, java.util.Properties info, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> caller) throws SQLException { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略 try/catch代码块以及权限处理逻辑 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(DriverInfo aDriver </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> registeredDrivers) { </span></span>
<span class="line"><span style="color:#24292E;">        Connection con </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aDriver.driver.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(url, info); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> con; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本文我们通过一个示例入手，介绍了 JDK 提供的 SPI 机制的基本使用，然后深入分析了 JDK SPI 的核心原理和底层实现，对其源码进行了深入剖析，最后我们以 MySQL 提供的 JDBC 实现为例，分析了 JDK SPI 在实践中的使用方式。</p><p>JDK SPI 机制虽然简单易用，但是也存在一些小瑕疵，你可以先思考一下，在下一课时剖析 Dubbo SPI 机制的时候，我会为你解答该问题。</p>`,24);function d(F,v,g,D,u,A){const a=o("Image");return e(),r("div",null,[c,n(a,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/3D/03/CgqCHl8o_UCAI01eAABGsg2cqbw825.png"}),l(),E,n(a,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/3C/F8/Ciqc1F8o_V6AR93jAABeDIu_Kso211.png"}),l(),y,n(a,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image/M00/3C/F8/Ciqc1F8o_WmAZSkmAABmcc0uM54214.png"}),l(),i])}const S=p(t,[["render",d]]);export{h as __pageData,S as default};
