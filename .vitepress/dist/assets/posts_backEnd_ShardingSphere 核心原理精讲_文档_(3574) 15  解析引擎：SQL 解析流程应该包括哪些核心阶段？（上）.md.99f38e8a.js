import{_ as e,j as o,o as t,g as r,k as l,h as s,s as a,Q as p}from"./chunks/framework.cfb14fe0.js";const _=JSON.parse('{"title":"15解析引擎：SQL解析流程应该包括哪些核心阶段？（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3574) 15  解析引擎：SQL 解析流程应该包括哪些核心阶段？（上）.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3574) 15  解析引擎：SQL 解析流程应该包括哪些核心阶段？（上）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3574) 15  解析引擎：SQL 解析流程应该包括哪些核心阶段？（上）.md"},E=a("h1",{id:"_15解析引擎-sql解析流程应该包括哪些核心阶段-上",tabindex:"-1"},[s("15解析引擎：SQL解析流程应该包括哪些核心阶段？（上） "),a("a",{class:"header-anchor",href:"#_15解析引擎-sql解析流程应该包括哪些核心阶段-上","aria-label":'Permalink to "15解析引擎：SQL解析流程应该包括哪些核心阶段？（上）"'},"​")],-1),y=a("p",null,"你好，欢迎进入第 15 课时的学习，结束了对 ShardingSphere 中微内核架构等基础设施相关实现机制的介绍后，今天我们将正式进入到分片引擎的学习。",-1),i=a("p",null,[s("对于一款分库分表中间件而言，分片是其最核心的功能。下图展示了整个 ShardingSphere 分片引擎的组成结构，我们已经在"),a("a",{href:"https://kaiwu.lagou.com/course/courseInfo.htm?sid=&courseId=257&lagoufrom=noapp",target:"_blank",rel:"noreferrer"},"《12 | 从应用到原理：如何高效阅读 ShardingSphere 源码》"),s("这个课时中对分片引擎中所包含的各个组件进行了简单介绍。我们知道，对于分片引擎而言，第一个核心组件就是 SQL 解析引擎。")],-1),S=p(`<p>对于多数开发人员而言，SQL 解析是一个陌生的话题，但对于一个分库分表中间件来说却是一个基础组件，目前主流的分库分表中间件都包含了对解析组件的实现策略。可以说，SQL 解析引擎所生成的结果贯穿整个 ShardingSphere。如果我们无法很好地把握 SQL 的解析过程，在阅读 ShardingSphere 源码时就会遇到一些障碍。</p><p>另一方面，SQL 的解析过程本身也很复杂，你在拿到 ShardingSphere 框架的源代码时，可能首先会问这样一个问题：SQL 的解析过程应该包含哪些核心阶段呢？接下来我将带你深度剖析这个话题。</p><h3 id="从-datasource-到-sql-解析引擎入口" tabindex="-1">从 DataSource 到 SQL 解析引擎入口 <a class="header-anchor" href="#从-datasource-到-sql-解析引擎入口" aria-label="Permalink to &quot;从 DataSource 到 SQL 解析引擎入口&quot;">​</a></h3><p>在对分片引擎的整体介绍中可以看到，要想完成分片操作，首先需要引入 SQL 解析引擎。对于刚接触 ShardingSphere 源码的同学而言，想要找到 SQL 解析引擎的入口有一定难度。这里引用在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=&amp;courseId=257&amp;lagoufrom=noapp" target="_blank" rel="noreferrer">《04 | 应用集成：在业务系统中使用 ShardingSphere 的方式有哪些？》</a>这个课时中介绍的代码示例，来分析 SQL 解析引擎的入口。</p><p>我们回顾如下所示的代码片段，这些代码片段基于 Java 语言提供了数据分片的实现方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//创建分片规则配置类 </span></span>
<span class="line"><span style="color:#E1E4E8;">ShardingRuleConfiguration shardingRuleConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingRuleConfiguration</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建分表规则配置类 </span></span>
<span class="line"><span style="color:#E1E4E8;">TableRuleConfiguration tableRuleConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableRuleConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ds\${0..1}.user\${0..1}&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建分布式主键生成配置类 </span></span>
<span class="line"><span style="color:#E1E4E8;">Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker.id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;33&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">KeyGeneratorConfiguration keyGeneratorConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KeyGeneratorConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SNOWFLAKE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">, properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">setKeyGeneratorConfig</span><span style="color:#E1E4E8;">(keyGeneratorConfig);</span></span>
<span class="line"><span style="color:#E1E4E8;">shardingRuleConfig.</span><span style="color:#B392F0;">getTableRuleConfigs</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(tableRuleConfig); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//根据年龄分库，一共分为2个库 </span></span>
<span class="line"><span style="color:#E1E4E8;">shardingRuleConfig.</span><span style="color:#B392F0;">setDefaultDatabaseShardingStrategyConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InlineShardingStrategyConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ds\${sex % 2}&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//根据用户id分表，一共分为2张表 </span></span>
<span class="line"><span style="color:#E1E4E8;">shardingRuleConfig.</span><span style="color:#B392F0;">setDefaultTableShardingStrategyConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StandardShardingStrategyConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;user\${id % 2}&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//通过工厂类创建具体的DataSource </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ShardingDataSourceFactory.</span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createDataSourceMap</span><span style="color:#E1E4E8;">(), shardingRuleConfig, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//创建分片规则配置类 </span></span>
<span class="line"><span style="color:#24292E;">ShardingRuleConfiguration shardingRuleConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingRuleConfiguration</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建分表规则配置类 </span></span>
<span class="line"><span style="color:#24292E;">TableRuleConfiguration tableRuleConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableRuleConfiguration</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ds\${0..1}.user\${0..1}&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建分布式主键生成配置类 </span></span>
<span class="line"><span style="color:#24292E;">Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker.id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;33&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">KeyGeneratorConfiguration keyGeneratorConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KeyGeneratorConfiguration</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SNOWFLAKE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">, properties);</span></span>
<span class="line"><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">setKeyGeneratorConfig</span><span style="color:#24292E;">(keyGeneratorConfig);</span></span>
<span class="line"><span style="color:#24292E;">shardingRuleConfig.</span><span style="color:#6F42C1;">getTableRuleConfigs</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(tableRuleConfig); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//根据年龄分库，一共分为2个库 </span></span>
<span class="line"><span style="color:#24292E;">shardingRuleConfig.</span><span style="color:#6F42C1;">setDefaultDatabaseShardingStrategyConfig</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InlineShardingStrategyConfiguration</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ds\${sex % 2}&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//根据用户id分表，一共分为2张表 </span></span>
<span class="line"><span style="color:#24292E;">shardingRuleConfig.</span><span style="color:#6F42C1;">setDefaultTableShardingStrategyConfig</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StandardShardingStrategyConfiguration</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;user\${id % 2}&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//通过工厂类创建具体的DataSource </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ShardingDataSourceFactory.</span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createDataSourceMap</span><span style="color:#24292E;">(), shardingRuleConfig, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">());</span></span></code></pre></div><p>可以看到，上述代码构建了几个数据源，加上分库、分表策略以及分片规则，然后通过 ShardingDataSourceFactory 获取了目前数据源 DataSource 。显然，对于应用开发而言，<strong>DataSource 就是我们使用 ShardingSphere 框架的入口</strong>。事实上，对于 ShardingSphere 内部的运行机制而言，DataSource 同样是引导我们进入分片引擎的入口。围绕 DataSource，通过跟踪代码的调用链路，我们可以得到如下所示的类层结构图：</p>`,7),g=a("p",null,"上图已经引出了 ShardingSphere 内核中的很多核心对象，但今天我们只关注位于整个链路的最底层对象，即图中的 SQLParseEngine。一方面，在 DataSource 的创建过程中，最终初始化了 SQLParseEngine；另一方面，负责执行路由功能的 ShardingRouter 也依赖于 SQLParseEngine。这个 SQLParseEngine 就是 ShardingSphere 中负责整个 SQL 解析过程的入口。",-1),F=a("h3",{id:"从-sql-解析引擎到-sql-解析内核",tabindex:"-1"},[s("从 SQL 解析引擎到 SQL 解析内核 "),a("a",{class:"header-anchor",href:"#从-sql-解析引擎到-sql-解析内核","aria-label":'Permalink to "从 SQL 解析引擎到 SQL 解析内核"'},"​")],-1),u=a("p",null,'在 ShardingSphere 中，存在一批以"Engine"结尾的引擎类。从架构思想上看，这些类在设计和实现上普遍采用了外观模式。外观（Facade）模式的意图可以描述为子系统中的一组接口提供一个一致的界面。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。该模式的示意图如下图所示：',-1),d=a("p",null,[s("从作用上讲，外观模式能够起到"),a("strong",null,"客户端与后端服务之间的隔离作用"),s(" ，随着业务需求的变化和时间的演进，外观背后各个子系统的划分和实现可能需要进行相应的调整和升级，这种调整和升级需要做到"),a("strong",null,"对客户端透明"),s("。在设计诸如 ShardingSphere 这样的中间件框架时，这种隔离性尤为重要。")],-1),h=a("p",null,"对于 SQL 解析引擎而言，情况同样类似。不同之处在于，SQLParseEngine 本身并不提供外观作用，而是把这部分功能委托给了另一个核心类 SQLParseKernel。从命名上看，这个类才是 SQL 解析的内核类，也是所谓的外观类。SQLParseKernel 屏蔽了后端服务中复杂的 SQL 抽象语法树对象 SQLAST、SQL 片段对象 SQLSegment ，以及最终的 SQL 语句 SQLStatement 对象的创建和管理过程。上述这些类之间的关系如下所示：",-1),A=p(`<h4 id="_1-sqlparseengine" tabindex="-1">1.SQLParseEngine <a class="header-anchor" href="#_1-sqlparseengine" aria-label="Permalink to &quot;1.SQLParseEngine&quot;">​</a></h4><p>从前面的类层结构图中可以看到，AbstractRuntimeContext 是 SQLParseEngine 的构建入口。顾名思义，RuntimeContext 在 ShardingSphere 中充当一种运行时上下文，保存着与运行时环境下相关的分片规则、分片属性、数据库类型、执行引擎以及 SQL 解析引擎。作为 RuntimeContext 接口的实现类，AbstractRuntimeContex 在其构造函数中完成了对 SQLParseEngine 的构建，构建过程如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractRuntimeContext</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> T rule, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties props, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DatabaseType databaseType) { </span></span>
<span class="line"><span style="color:#E1E4E8;">       ... </span></span>
<span class="line"><span style="color:#E1E4E8;">       parseEngine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SQLParseEngineFactory.</span><span style="color:#B392F0;">getSQLParseEngine</span><span style="color:#E1E4E8;">(DatabaseTypes.</span><span style="color:#B392F0;">getTrunkDatabaseTypeName</span><span style="color:#E1E4E8;">(databaseType)); </span></span>
<span class="line"><span style="color:#E1E4E8;">       ... </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractRuntimeContext</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> T rule, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties props, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DatabaseType databaseType) { </span></span>
<span class="line"><span style="color:#24292E;">       ... </span></span>
<span class="line"><span style="color:#24292E;">       parseEngine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SQLParseEngineFactory.</span><span style="color:#6F42C1;">getSQLParseEngine</span><span style="color:#24292E;">(DatabaseTypes.</span><span style="color:#6F42C1;">getTrunkDatabaseTypeName</span><span style="color:#24292E;">(databaseType)); </span></span>
<span class="line"><span style="color:#24292E;">       ... </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，这里通过工厂类 SQLParseEngineFactory 完成了 SQLParseEngine 的创建过程。工厂类 SQLParseEngineFactory 的实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLParseEngineFactory</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">SQLParseEngine</span><span style="color:#E1E4E8;">&gt; ENGINES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> SQLParseEngine </span><span style="color:#B392F0;">getSQLParseEngine</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">databaseTypeName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ENGINES.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(databaseTypeName)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ENGINES.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(databaseTypeName); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (ENGINES) { </span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">//如果缓存中包含了指定数据库类型对应的SQLParseEngine，则直接返回 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ENGINES.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(databaseTypeName)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ENGINES.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(databaseTypeName); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">//创建SQLParseEngine </span></span>
<span class="line"><span style="color:#E1E4E8;">            SQLParseEngine result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLParseEngine</span><span style="color:#E1E4E8;">(databaseTypeName); </span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">//将新创建的SQLParseEngine放入缓存中 </span></span>
<span class="line"><span style="color:#E1E4E8;">            ENGINES.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(databaseTypeName, result); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLParseEngineFactory</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">SQLParseEngine</span><span style="color:#24292E;">&gt; ENGINES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> SQLParseEngine </span><span style="color:#6F42C1;">getSQLParseEngine</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">databaseTypeName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ENGINES.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(databaseTypeName)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ENGINES.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(databaseTypeName); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (ENGINES) { </span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">//如果缓存中包含了指定数据库类型对应的SQLParseEngine，则直接返回 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ENGINES.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(databaseTypeName)) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ENGINES.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(databaseTypeName); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">//创建SQLParseEngine </span></span>
<span class="line"><span style="color:#24292E;">            SQLParseEngine result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLParseEngine</span><span style="color:#24292E;">(databaseTypeName); </span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">//将新创建的SQLParseEngine放入缓存中 </span></span>
<span class="line"><span style="color:#24292E;">            ENGINES.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(databaseTypeName, result); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上述代码中可以看到，这里基于 ConcurrentHashMap 对象做了一层基于内存的缓存处理，SQLParseEngineFactory 的实现方式在 ShardingSphere 中具有代表性。为了提高访问性能，ShardingSphere 大量使用这种方式来构建基于内容的缓存机制。</p><p>接下来，我们来看 SQLParseEngine 类本身，该类的完整代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLParseEngine</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String databaseTypeName; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLParseResultCache cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLParseResultCache</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SQLStatement </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">useCache</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">//基于Hook机制进行监控和跟踪 </span></span>
<span class="line"><span style="color:#E1E4E8;">        ParsingHook parsingHook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SPIParsingHook</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        parsingHook.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(sql); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;">//完成SQL的解析，并返回一个SQLStatement对象 </span></span>
<span class="line"><span style="color:#E1E4E8;">            SQLStatement result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse0</span><span style="color:#E1E4E8;">(sql, useCache); </span></span>
<span class="line"><span style="color:#E1E4E8;">            parsingHook.</span><span style="color:#B392F0;">finishSuccess</span><span style="color:#E1E4E8;">(result); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            parsingHook.</span><span style="color:#B392F0;">finishFailure</span><span style="color:#E1E4E8;">(ex); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SQLStatement </span><span style="color:#B392F0;">parse0</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">useCache</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">//如果使用缓存，先尝试从缓存中获取SQLStatement </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (useCache) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            Optional&lt;</span><span style="color:#F97583;">SQLStatement</span><span style="color:#E1E4E8;">&gt; cachedSQLStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">getSQLStatement</span><span style="color:#E1E4E8;">(sql); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cachedSQLStatement.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cachedSQLStatement.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//委托SQLParseKernel创建SQLStatement </span></span>
<span class="line"><span style="color:#E1E4E8;">	SQLStatement result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLParseKernel</span><span style="color:#E1E4E8;">(ParseRuleRegistry.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">(), databaseTypeName, sql).</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (useCache) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            cache.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(sql, result); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLParseEngine</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String databaseTypeName; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLParseResultCache cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLParseResultCache</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SQLStatement </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">useCache</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">//基于Hook机制进行监控和跟踪 </span></span>
<span class="line"><span style="color:#24292E;">        ParsingHook parsingHook </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SPIParsingHook</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        parsingHook.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(sql); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">//完成SQL的解析，并返回一个SQLStatement对象 </span></span>
<span class="line"><span style="color:#24292E;">            SQLStatement result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse0</span><span style="color:#24292E;">(sql, useCache); </span></span>
<span class="line"><span style="color:#24292E;">            parsingHook.</span><span style="color:#6F42C1;">finishSuccess</span><span style="color:#24292E;">(result); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            parsingHook.</span><span style="color:#6F42C1;">finishFailure</span><span style="color:#24292E;">(ex); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SQLStatement </span><span style="color:#6F42C1;">parse0</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">useCache</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">//如果使用缓存，先尝试从缓存中获取SQLStatement </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (useCache) { </span></span>
<span class="line"><span style="color:#24292E;">            Optional&lt;</span><span style="color:#D73A49;">SQLStatement</span><span style="color:#24292E;">&gt; cachedSQLStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">getSQLStatement</span><span style="color:#24292E;">(sql); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cachedSQLStatement.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cachedSQLStatement.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//委托SQLParseKernel创建SQLStatement </span></span>
<span class="line"><span style="color:#24292E;">	SQLStatement result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLParseKernel</span><span style="color:#24292E;">(ParseRuleRegistry.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">(), databaseTypeName, sql).</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (useCache) { </span></span>
<span class="line"><span style="color:#24292E;">            cache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(sql, result); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>关于 SQLParseEngine 有几点值得注意：</p><ul><li><p>首先，这里使用了 ParsingHook 作为系统运行时的 Hook 管理，也就是我们常说的代码钩子。ShardingSphere 提供了一系列的 ParsingHook 实现，后续我们在讨论到 ShardingSphere 的链路跟踪时会对 Hook 机制进一步展开。</p></li><li><p>其次，我们发现用于解析 SQL 的 parse 方法返回了一个 SQLStatement 对象。也就是说，这个 SQLStatement 就是整个 SQL 解析引擎的最终输出对象。这里同样基于 Google Guava 框架中的 Cache 类构建了一个 SQLParseResultCache，对解析出来的 SQLStatement 进行缓存处理。</p></li></ul><p>最后，我们发现 SQLParseEngine 把真正的解析工作委托给了 SQLParseKernel。接下来，我们就来看这个 SQLParseKernel 类。</p><h4 id="_2-sqlparsekernel" tabindex="-1">2.SQLParseKernel <a class="header-anchor" href="#_2-sqlparsekernel" aria-label="Permalink to &quot;2.SQLParseKernel&quot;">​</a></h4><p>在 SQLParseKernel 类中，发现了如下所示的三个 Engine 类定义，包括 SQL 解析器引擎 SQLParserEngine（<strong>请注意该类名与 SQLParseEngine 类名的区别</strong>）、SQLSegment 提取器引擎 SQLSegmentsExtractor 以及 SQLStatement 填充器引擎 SQLStatementFiller。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//SQL解析器引擎 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLParserEngine parserEngine; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLSegment提取器引擎 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLSegmentsExtractorEngine extractorEngine; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLStatement填充器引擎 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementFillerEngine fillerEngine;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//SQL解析器引擎 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLParserEngine parserEngine; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLSegment提取器引擎 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLSegmentsExtractorEngine extractorEngine; </span></span>
<span class="line"><span style="color:#6A737D;">//SQLStatement填充器引擎 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementFillerEngine fillerEngine;</span></span></code></pre></div><p>作为外观类的 SQLParseKernel 提供了如下所示的 parse 方法，来完成 SQL 解析的整个过程，该方法中分别用到了上述三个引擎类，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SQLStatement </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	   </span><span style="color:#6A737D;">//利用ANTLR4 解析SQL的抽象语法树 </span></span>
<span class="line"><span style="color:#E1E4E8;">	   SQLAST ast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parserEngine.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	   </span><span style="color:#6A737D;">//提取AST中的Token，封装成对应的TableSegment、IndexSegment 等各种Segment </span></span>
<span class="line"><span style="color:#E1E4E8;">	   Collection&lt;</span><span style="color:#F97583;">SQLSegment</span><span style="color:#E1E4E8;">&gt; sqlSegments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> extractorEngine.</span><span style="color:#B392F0;">extract</span><span style="color:#E1E4E8;">(ast); </span></span>
<span class="line"><span style="color:#E1E4E8;">	   Map&lt;</span><span style="color:#F97583;">ParserRuleContext</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; parameterMarkerIndexes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ast.</span><span style="color:#B392F0;">getParameterMarkerIndexes</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">//填充SQLStatement并返回 </span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fillerEngine.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(sqlSegments, parameterMarkerIndexes.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(), ast.</span><span style="color:#B392F0;">getSqlStatementRule</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SQLStatement </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	   </span><span style="color:#6A737D;">//利用ANTLR4 解析SQL的抽象语法树 </span></span>
<span class="line"><span style="color:#24292E;">	   SQLAST ast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parserEngine.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	   </span><span style="color:#6A737D;">//提取AST中的Token，封装成对应的TableSegment、IndexSegment 等各种Segment </span></span>
<span class="line"><span style="color:#24292E;">	   Collection&lt;</span><span style="color:#D73A49;">SQLSegment</span><span style="color:#24292E;">&gt; sqlSegments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> extractorEngine.</span><span style="color:#6F42C1;">extract</span><span style="color:#24292E;">(ast); </span></span>
<span class="line"><span style="color:#24292E;">	   Map&lt;</span><span style="color:#D73A49;">ParserRuleContext</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; parameterMarkerIndexes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ast.</span><span style="color:#6F42C1;">getParameterMarkerIndexes</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">//填充SQLStatement并返回 </span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fillerEngine.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(sqlSegments, parameterMarkerIndexes.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(), ast.</span><span style="color:#6F42C1;">getSqlStatementRule</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><h3 id="sql-解析引擎的三大阶段之如何-生成-sqlast" tabindex="-1">SQL 解析引擎的三大阶段之如何 生成 SQLAST <a class="header-anchor" href="#sql-解析引擎的三大阶段之如何-生成-sqlast" aria-label="Permalink to &quot;SQL 解析引擎的三大阶段之如何 生成 SQLAST&quot;">​</a></h3><p>上面这段代码非常符合外观类的处理风格，即把内部系统的核心类通过简单的调用方式组合在一起完成业务链路。我们对三段代码分别添加了注释，实际上，根据这些注释，我们已经可以回答在本课时开始时所提出 <strong>&quot;SQL 解析过程应该包含哪些核心阶段？&quot;</strong> 这一问题，即：</p><ul><li><p>通过 SQLParserEngine 生成 SQL 抽象语法树</p></li><li><p>通过 SQLSegmentsExtractorEngine 提取 SQLSegment</p></li><li><p>通过 SQLStatementFiller 填充 SQLStatement</p></li></ul><p>这三个阶段便是 ShardingSphere 新一代 SQL 解析引擎的核心组成部分。其整体架构如下图所示：</p>`,20),L=p(`<p>至此，我们看到由<strong>解析、提取和填充</strong>这三个阶段所构成的整体 SQL 解析流程已经完成。现在能够根据一条 SQL 语句解析出对应的 SQLStatement 对象，供后续的 ShardingRouter 等路由引擎进行使用。</p><p>本课时我们首先关注流程中的第一阶段，即如何生成一个 SQLAST（后两个阶段会在后续课时中讲解）。这部分的实现过程位于 SQLParserEngine 的 parse 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SQLAST </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">	    SQLParser sqlParser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SQLParserFactory.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(databaseTypeName, sql); </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	     </span><span style="color:#6A737D;">//利用ANTLR4获取解析树 </span></span>
<span class="line"><span style="color:#E1E4E8;">	     ParseTree parseTree; </span></span>
<span class="line"><span style="color:#E1E4E8;">	     </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">	         ((Parser) sqlParser).</span><span style="color:#B392F0;">setErrorHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BailErrorStrategy</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">	         ((Parser) sqlParser).</span><span style="color:#B392F0;">getInterpreter</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setPredictionMode</span><span style="color:#E1E4E8;">(PredictionMode.SLL); </span></span>
<span class="line"><span style="color:#E1E4E8;">	         parseTree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlParser.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getChild</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">	        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParseCancellationException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	         ((Parser) sqlParser).</span><span style="color:#B392F0;">reset</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">	         ((Parser) sqlParser).</span><span style="color:#B392F0;">setErrorHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultErrorStrategy</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">	         ((Parser) sqlParser).</span><span style="color:#B392F0;">getInterpreter</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setPredictionMode</span><span style="color:#E1E4E8;">(PredictionMode.LL); </span></span>
<span class="line"><span style="color:#E1E4E8;">	         parseTree </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlParser.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getChild</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">	        } </span></span>
<span class="line"><span style="color:#E1E4E8;">	     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parseTree </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ErrorNode) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLParsingException</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unsupported SQL of \`%s\`&quot;</span><span style="color:#E1E4E8;">, sql)); </span></span>
<span class="line"><span style="color:#E1E4E8;">	        } </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	     </span><span style="color:#6A737D;">//获取配置文件中的StatementRule </span></span>
<span class="line"><span style="color:#E1E4E8;">	     SQLStatementRule rule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parseRuleRegistry.</span><span style="color:#B392F0;">getSQLStatementRule</span><span style="color:#E1E4E8;">(databaseTypeName, parseTree.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">	     </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> rule) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	         </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLParsingException</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unsupported SQL of \`%s\`&quot;</span><span style="color:#E1E4E8;">, sql)); </span></span>
<span class="line"><span style="color:#E1E4E8;">	        } </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	     </span><span style="color:#6A737D;">//封装抽象语法树AST </span></span>
<span class="line"><span style="color:#E1E4E8;">	     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLAST</span><span style="color:#E1E4E8;">((ParserRuleContext) parseTree, </span><span style="color:#B392F0;">getParameterMarkerIndexes</span><span style="color:#E1E4E8;">((ParserRuleContext) parseTree), rule); </span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SQLAST </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">	    SQLParser sqlParser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SQLParserFactory.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(databaseTypeName, sql); </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	     </span><span style="color:#6A737D;">//利用ANTLR4获取解析树 </span></span>
<span class="line"><span style="color:#24292E;">	     ParseTree parseTree; </span></span>
<span class="line"><span style="color:#24292E;">	     </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">	         ((Parser) sqlParser).</span><span style="color:#6F42C1;">setErrorHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BailErrorStrategy</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">	         ((Parser) sqlParser).</span><span style="color:#6F42C1;">getInterpreter</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setPredictionMode</span><span style="color:#24292E;">(PredictionMode.SLL); </span></span>
<span class="line"><span style="color:#24292E;">	         parseTree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlParser.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getChild</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">	        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParseCancellationException </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">	         ((Parser) sqlParser).</span><span style="color:#6F42C1;">reset</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">	         ((Parser) sqlParser).</span><span style="color:#6F42C1;">setErrorHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultErrorStrategy</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">	         ((Parser) sqlParser).</span><span style="color:#6F42C1;">getInterpreter</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setPredictionMode</span><span style="color:#24292E;">(PredictionMode.LL); </span></span>
<span class="line"><span style="color:#24292E;">	         parseTree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlParser.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getChild</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">	        } </span></span>
<span class="line"><span style="color:#24292E;">	     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parseTree </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ErrorNode) { </span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLParsingException</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unsupported SQL of \`%s\`&quot;</span><span style="color:#24292E;">, sql)); </span></span>
<span class="line"><span style="color:#24292E;">	        } </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	     </span><span style="color:#6A737D;">//获取配置文件中的StatementRule </span></span>
<span class="line"><span style="color:#24292E;">	     SQLStatementRule rule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parseRuleRegistry.</span><span style="color:#6F42C1;">getSQLStatementRule</span><span style="color:#24292E;">(databaseTypeName, parseTree.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">	     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> rule) { </span></span>
<span class="line"><span style="color:#24292E;">	         </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLParsingException</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unsupported SQL of \`%s\`&quot;</span><span style="color:#24292E;">, sql)); </span></span>
<span class="line"><span style="color:#24292E;">	        } </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	     </span><span style="color:#6A737D;">//封装抽象语法树AST </span></span>
<span class="line"><span style="color:#24292E;">	     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLAST</span><span style="color:#24292E;">((ParserRuleContext) parseTree, </span><span style="color:#6F42C1;">getParameterMarkerIndexes</span><span style="color:#24292E;">((ParserRuleContext) parseTree), rule); </span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>上述代码中 SQLParser 接口负责具体的 SQL 到 AST（Abstract Syntax Tree，抽象语法树）的解析过程。而具体 SQLParser 实现类的生成由 SQLParserFactory 负责，SQLParserFactory 定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLParserFactory</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> SQLParser </span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">databaseTypeName</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//通过SPI机制加载所有扩展 </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (SQLParserEntry each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> NewInstanceServiceLoader.</span><span style="color:#B392F0;">newServiceInstances</span><span style="color:#E1E4E8;">(SQLParserEntry.class)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//判断数据库类型 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each.</span><span style="color:#B392F0;">getDatabaseTypeName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(databaseTypeName)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createSQLParser</span><span style="color:#E1E4E8;">(sql, each); </span></span>
<span class="line"><span style="color:#E1E4E8;">         } </span></span>
<span class="line"><span style="color:#E1E4E8;">     } </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cannot support database type &#39;%s&#39;&quot;</span><span style="color:#E1E4E8;">, databaseTypeName)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLParserFactory</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> SQLParser </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">databaseTypeName</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//通过SPI机制加载所有扩展 </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (SQLParserEntry each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> NewInstanceServiceLoader.</span><span style="color:#6F42C1;">newServiceInstances</span><span style="color:#24292E;">(SQLParserEntry.class)) { </span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//判断数据库类型 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each.</span><span style="color:#6F42C1;">getDatabaseTypeName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(databaseTypeName)) { </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createSQLParser</span><span style="color:#24292E;">(sql, each); </span></span>
<span class="line"><span style="color:#24292E;">         } </span></span>
<span class="line"><span style="color:#24292E;">     } </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Cannot support database type &#39;%s&#39;&quot;</span><span style="color:#24292E;">, databaseTypeName)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里又引入了另一个核心接口，即 SQLParserEntry。可以看到，在 SQLParserFactory 类中，我们也使用了<a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=&amp;courseId=257&amp;lagoufrom=noapp" target="_blank" rel="noreferrer">《13 | 微内核架构：ShardingSphere 如何实现系统的扩展性》</a>这个课时中介绍的 NewInstanceServiceLoader 工具类来加载具体 SQLParserEntry 的实现类。</p><p>从这种实现方式上看，我们可以断定 SQLParserEntry 是一个 SPI 接口。通过查看 SQLParserEntry 所处的代码包结构，更印证了这一观点，因为该类位于 shardingsphere-sql-parser-spi 工程的 org.apache.shardingsphere.sql.parser.spi 包中。</p><p>关于 SQLParser 和 SQLParserEntry 这一对接口，还有一点值得探讨。注意到 SQLParser 接口位于 shardingsphere-sql-parser-spi 工程的 org.apache.shardingsphere.sql.parser.api 包中，所示它是一个 API 接口。</p><p>从定位上讲，SQLParser 是解析器对外暴露的入口，而 SQLParserEntry 是解析器的底层实现，两者共同构成了 SQL 解析器本身。更宽泛的，从架构设计层次上讲，API 面向高层业务开发人员，而 SPI 面向底层框架开发人员，两者的关系如下图所示。作为一款优秀的中间件框架，这种 API 和 SPI 的对应关系在 ShardingSphere 中非常普遍，也是我们正确理解 ShardingSphere 架构设计上的一个切入点。</p>`,9),C=p(`<p>SQLParser 和 SQLParserEntry 这两个接口的定义和实现都与基于 ANTLR4 的 AST 生成机制有关。ANTLR 是 Another Tool for Language Recognition 的简写，是一款能够根据输入自动生成语法树的开源语法分析器。ANTLR 可以将用户编写的 ANTLR 语法规则直接生成 Java、Go 语言的解析器，在 ShardingSphere 中就使用了 ANTLR4 来生成 AST。</p><p>我们注意到 SQLParserEngine 的 parse 方法最终返回的是一个 SQLAST，该类的定义如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLAST</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParserRuleContext parserRuleContext; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">ParserRuleContext</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; parameterMarkerIndexes; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementRule sqlStatementRule; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLAST</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParserRuleContext parserRuleContext; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">ParserRuleContext</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; parameterMarkerIndexes; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementRule sqlStatementRule; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 ParserRuleContext 实际上就来自 ANTLR4，而 SQLStatementRule 则是一个规则对象，包含了对 SQLSegment 提取器的定义。这样，我们就需要进入下一个阶段的讨论，即如何提取 SQLSegment（下一课时会讲解）。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>作为 ShardingSphere 分片引擎的第一个核心组件，解析引擎的目的在于生成 SQLStatement 目标对象。而整个解析引擎分成三大阶段，即生成 SQL 抽象语法树、提取 SQL 片段以及使用这些片段来填充 SQL 语句。本课时对解析引擎的整体结构以及这三个阶段中的第一个阶段进行了详细的讨论。</p><p>这里给你留一道思考题：在 ShardingSphere 中，外观模式如何应用到 SQL 解析过程中？欢迎你在留言区与大家讨论，我将一一点评解答。</p><p>本课时的内容就到这里，在下一课时中，我们将完成对 SQL 解析引擎剩余两个阶段内容的介绍，即如何提取 SQL 片段以及填充 SQL 语句，记得按时来听课。</p>`,8);function Q(D,P,m,f,b,q){const n=o("Image");return t(),r("div",null,[E,y,i,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/3C/7B/Ciqc1F8nypyARZV3AACJf1UYtf4213.png"}),s(),S,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/3C/7B/Ciqc1F8nyriAPY8tAAB8wwhtMU4809.png"}),s(),g,F,u,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/3C/7B/Ciqc1F8nysKAKGdhAABINS6qFpI839.png"}),s(),d,h,l(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/3C/86/CgqCHl8nytiAcb6GAABVel2mPvE115.png"}),s(),A,l(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/3C/7C/Ciqc1F8nyz2AaMf0AACQcl1OWTw870.png"}),s(),L,l(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/3C/87/CgqCHl8ny3WAAR7gAABKWeCFeTg698.png"}),s(),C])}const B=e(c,[["render",Q]]);export{_ as __pageData,B as default};
