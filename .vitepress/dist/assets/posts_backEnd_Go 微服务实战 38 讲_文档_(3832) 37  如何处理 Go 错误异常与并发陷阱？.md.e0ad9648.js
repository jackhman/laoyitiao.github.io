import{_ as a,j as p,o as l,g as o,k as e,h as t,Q as s}from"./chunks/framework.a0d18f64.js";const f=JSON.parse('{"title":"37如何处理Go错误异常与并发陷阱？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3832) 37  如何处理 Go 错误异常与并发陷阱？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3832) 37  如何处理 Go 错误异常与并发陷阱？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3832) 37  如何处理 Go 错误异常与并发陷阱？.md"},r=s(`<h1 id="_37如何处理go错误异常与并发陷阱" tabindex="-1">37如何处理Go错误异常与并发陷阱？ <a class="header-anchor" href="#_37如何处理go错误异常与并发陷阱" aria-label="Permalink to &quot;37如何处理Go错误异常与并发陷阱？&quot;">​</a></h1><p>错误处理是软件开发中不可回避的问题，<strong>Go 中主要通过 error 和 panic 分别表示错误和异常</strong> ，并提供了较为简洁的错误异常处理机制。作为一门并发性能优越的语言，Go 虽然降低了协程并发开发的难度，但也存在一些<strong>并发陷阱</strong>，这就需要我们在开发时额外注意。</p><p>在本课时，我们就来介绍 Go 中的一些错误处理机制，并讲解如何去规避一些常见的并发陷阱。</p><h3 id="errors-are-values" tabindex="-1">Errors are values <a class="header-anchor" href="#errors-are-values" aria-label="Permalink to &quot;Errors are values&quot;">​</a></h3><p>错误处理是每个开发人员都需要面对的问题，在我过去接触的编程语言中，大多是通过<strong>try-catch 的方式</strong> 对可能出现错误的代码块进行包装：<strong>程序运行 try 中代码，如果 try 中的代码运行出错，程序将会立即跳转到 catch 中执行异常处理逻辑</strong>。</p><p>与其他的编程语言不同，Go 中倡导&quot;Errors are values!&quot;的处理思想，它将 error 作为一个返回值，来迫使调用者对 error 进行处理或者忽略。于是，在代码中我们将会编写大量的 if 判断语句对 error 进行判断，如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dothing</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;work&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// do other thing</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dothing</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;work&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// do other thing</span></span></code></pre></div><p>当项目的代码快速增长起来时，我们会发现代码中到处都是类似 err != nil 的判断片段。虽然这会使代码变得很烦琐，但是这种设计和约定也会鼓励开发人员明确检查和确定错误发生的位置。</p><p>在 Go 中，error 接口定义如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最常用的 error 实现是 Go 标准库 errors 包中内置的 errorString，它是一个仅包含错误信息的error 实现，可以通过 errors.New 和 fmt.Errorf 函数创建。内置的 error 接口使得开发人员可以为错误添加任何所需的信息，error 可以是实现 Error() 方法的任何类型，比如我们可以为错误添加错误码和调用栈信息，如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Msg </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	Code </span><span style="color:#F97583;">int32</span></span>
<span class="line"><span style="color:#E1E4E8;">	St []</span><span style="color:#F97583;">uintptr</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 调用栈</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取调用栈信息</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callers</span><span style="color:#E1E4E8;">() []</span><span style="color:#F97583;">uintptr</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> pcs [</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">uintptr</span></span>
<span class="line"><span style="color:#E1E4E8;">	n </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> runtime.</span><span style="color:#79B8FF;">Callers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, pcs[:])</span></span>
<span class="line"><span style="color:#E1E4E8;">	st </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> pcs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:n]</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> st</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(code </span><span style="color:#F97583;">int32</span><span style="color:#E1E4E8;">, msg </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Error{</span></span>
<span class="line"><span style="color:#E1E4E8;">		Code: </span><span style="color:#79B8FF;">int32</span><span style="color:#E1E4E8;">(code),</span></span>
<span class="line"><span style="color:#E1E4E8;">		Msg:  msg,</span></span>
<span class="line"><span style="color:#E1E4E8;">		St: </span><span style="color:#79B8FF;">callers</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (e </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Error) </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;OK&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;code:</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">, msg:</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, e.Code, e.Msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Msg </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	Code </span><span style="color:#D73A49;">int32</span></span>
<span class="line"><span style="color:#24292E;">	St []</span><span style="color:#D73A49;">uintptr</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 调用栈</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取调用栈信息</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callers</span><span style="color:#24292E;">() []</span><span style="color:#D73A49;">uintptr</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> pcs [</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">uintptr</span></span>
<span class="line"><span style="color:#24292E;">	n </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> runtime.</span><span style="color:#005CC5;">Callers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, pcs[:])</span></span>
<span class="line"><span style="color:#24292E;">	st </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> pcs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:n]</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> st</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(code </span><span style="color:#D73A49;">int32</span><span style="color:#24292E;">, msg </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">Error{</span></span>
<span class="line"><span style="color:#24292E;">		Code: </span><span style="color:#005CC5;">int32</span><span style="color:#24292E;">(code),</span></span>
<span class="line"><span style="color:#24292E;">		Msg:  msg,</span></span>
<span class="line"><span style="color:#24292E;">		St: </span><span style="color:#005CC5;">callers</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (e </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Error) </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;OK&quot;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;code:</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">, msg:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, e.Code, e.Msg)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过<strong>断言</strong>的方式可以将 error 转化为特定的类型从而进行特异化处理，如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> err.(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Error); ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 取出堆栈信息进行处理</span></span>
<span class="line"><span style="color:#E1E4E8;">	st </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> e.st</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 其他错误处理</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> err.(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Error); ok {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 取出堆栈信息进行处理</span></span>
<span class="line"><span style="color:#24292E;">	st </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> e.st</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ....</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 其他错误处理</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Go 1.13 版本之后，errors 包中添加了 errors.Is 和 errors.As 函数：errors.Is 方法用来比较两个 error 是否相等，而 errors.As 函数用来判断 error 是否为特定类型。</p><p>由于 error 是一个值，因此我们可以对其进行编程，简化 Go 错误处理的重复代码。在一些管道和循环的代码中，只要其中一次处理出现错误，就应该退出本次管道或者循环。寻常的做法是在每次迭代都检查错误，但为了让管道和循环的操作显得更加自然，我们可以将 error 封装到独立的方法或者变量中返回，以避免错误处理掩盖控制流程，如 gorm 中的 DB 设计所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> DB.</span><span style="color:#79B8FF;">Where</span><span style="color:#E1E4E8;">(queryString, queryValue</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">).</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">Table</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;table_name&quot;</span><span style="color:#E1E4E8;">).</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">Updates</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}{</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}).Error</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 错误处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> DB.</span><span style="color:#005CC5;">Where</span><span style="color:#24292E;">(queryString, queryValue</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">).</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">Table</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;table_name&quot;</span><span style="color:#24292E;">).</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">Updates</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}{</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}).Error</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 错误处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里 error 是从 gorm.DB 的 Error 成员变量中获取的。在数据库请求执行结束之后，程序才从 DB 中获取执行错误，这样的写法使得错误处理不会中断执行流程。但需要注意的是，无论如何简化 error 的设计，程序都要检查和处理错误，错误是无法避免的。</p><h3 id="defer、panic-和-recover" tabindex="-1">defer、panic 和 recover <a class="header-anchor" href="#defer、panic-和-recover" aria-label="Permalink to &quot;defer、panic 和 recover&quot;">​</a></h3><p>错误一般是一些开发人员&quot;意料之内&quot;的错误，比如获取数据库连接失败等，这些都是在 Go 中通过 error 表达并可控。但当程序出现异常，如数组访问越界这类&quot;意料之外&quot;的错误时，它能够导致程序运行崩溃，此时就需要开发人员捕获异常并恢复程序的正常运行流程。</p><p>接下来我们就介绍 defer、panic 和 recover 如何组合恢复运行时执行异常的 Go 程序。</p><p><strong>defer 是 Go 中提供的一种延迟执行机制</strong>，每次执行 defer，都会将对应的函数压入栈中。在函数返回或者 panic 异常结束时，Go 会依次从栈中取出延迟函数执行。</p><p>在编程的时候，经常需要打开一些资源，比如数据库连接、文件等，在资源使用完成之后需要释放，不然有可能会造成资源泄漏。这个时候，我们可以通过 defer 语句在函数执行完之后，自动释放资源，避免在每个函数返回之前手动释放资源，减少冗余代码。</p><p>defer 有三个比较重要的特点。<strong>第一个是按照调用 defer 的逆序执行</strong> ，即后调用的在函数退出时先执行，<strong>后进先出</strong>。如下例子所示:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I register at first, but execute at last&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I register at middle, execute at middle&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I register at last, execute at first&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test begin&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I register at first, but execute at last&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I register at middle, execute at middle&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I register at last, execute at first&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test begin&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>预期的结果为：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test </span><span style="color:#F97583;">begin</span></span>
<span class="line"><span style="color:#E1E4E8;">I register at last</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> execute at first</span></span>
<span class="line"><span style="color:#E1E4E8;">I register at middle</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> execute at middle</span></span>
<span class="line"><span style="color:#E1E4E8;">I register at first</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> but execute at last</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test </span><span style="color:#D73A49;">begin</span></span>
<span class="line"><span style="color:#24292E;">I register at last</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> execute at first</span></span>
<span class="line"><span style="color:#24292E;">I register at middle</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> execute at middle</span></span>
<span class="line"><span style="color:#24292E;">I register at first</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> but execute at last</span></span></code></pre></div><p><strong>第二个特点是 defer 被定义时，参数变量会被立即解析，传递参数的值拷贝</strong>。在函数内使用的变量其实是对外部变量的一个拷贝，在函数体内，对变量更改也不会影响外部变量，如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;defer i is </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">	i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;current i is </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">	i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;defer i is </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, i)</span></span>
<span class="line"><span style="color:#24292E;">	i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;current i is </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, i)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>预期结果为：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">current i is </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;">defer i is </span><span style="color:#79B8FF;">10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">current i is </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">defer i is </span><span style="color:#005CC5;">10</span></span></code></pre></div><p>然而当 defer 以闭包的方式引用外部变量时，则会在延迟函数真正执行的时候，根据整个上下文确定当前的值，如下示例代码：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">		}()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>预期的输出结果为：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#79B8FF;">5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#005CC5;">5</span></span></code></pre></div><p>上述例子为了演示简单，在 for 循环中使用了 defer，但<strong>在日常开发中，我建议你还是不要在循环中使用 defer</strong>。因为相较于直接调用，defer 的执行存在着额外的开销，例如 defer 会对其后需要的参数进行内存拷贝，还会对 defer 结构进行压栈出栈操作。因此，在循环中使用 defer 可能会带来较大的性能开销。</p><p><strong>defer 的第三个特点是可以读取并修改函数的命名返回值</strong>，如下面的例子所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">test</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() (i </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() { i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> }()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">test</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() (i </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() { i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> }()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>预期的返回结果为：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">2</span></span></code></pre></div><p>这是因为对于命名返回值，defer 和 return 的执行顺序如下：</p><ul><li><p>将 1 赋给 i；</p></li><li><p>执行 i++；</p></li><li><p>返回 i 作为函数返回值。</p></li></ul><p>defer 的内部实现为一个<strong>延迟调用链表</strong>，如下图所示：</p>`,43),E=s(`<p>defer 延迟调用链表示意图</p><p>其中，g 代表 goroutine 的数据结构。每个 goroutine 中都有一个 _defer 链表，当代码中遇到 defer 关键字时，Go 都会将 defer 相关的函数和参数封装到 _defer 结构体中，然后将其注册到当前 goroutine 的 _defer 链表的表头。在当前函数执行完毕之后，Go 会从 goroutine 的 _defer 链表头部取出来注册的 defer 执行并返回。</p><p>_defer 结构体中存储 defer 执行相关的信息，定义如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_defer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	siz       </span><span style="color:#F97583;">int32</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 参数与结果内存大小</span></span>
<span class="line"><span style="color:#E1E4E8;">	started   </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	heap      </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 是否在堆上分配</span></span>
<span class="line"><span style="color:#E1E4E8;">	openDefer </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//是否经过开放编码优化</span></span>
<span class="line"><span style="color:#E1E4E8;">	sp        </span><span style="color:#F97583;">uintptr</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 栈指针</span></span>
<span class="line"><span style="color:#E1E4E8;">	pc        </span><span style="color:#F97583;">uintptr</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 调用方的程序计数器</span></span>
<span class="line"><span style="color:#E1E4E8;">	fn        </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">funcval </span><span style="color:#6A737D;">// defer 传入的函数</span></span>
<span class="line"><span style="color:#E1E4E8;">	_panic    </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_panic </span></span>
<span class="line"><span style="color:#E1E4E8;">	link      </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">_defer </span><span style="color:#6A737D;">// 下一个 _defer</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_defer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	siz       </span><span style="color:#D73A49;">int32</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 参数与结果内存大小</span></span>
<span class="line"><span style="color:#24292E;">	started   </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	heap      </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 是否在堆上分配</span></span>
<span class="line"><span style="color:#24292E;">	openDefer </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//是否经过开放编码优化</span></span>
<span class="line"><span style="color:#24292E;">	sp        </span><span style="color:#D73A49;">uintptr</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 栈指针</span></span>
<span class="line"><span style="color:#24292E;">	pc        </span><span style="color:#D73A49;">uintptr</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 调用方的程序计数器</span></span>
<span class="line"><span style="color:#24292E;">	fn        </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">funcval </span><span style="color:#6A737D;">// defer 传入的函数</span></span>
<span class="line"><span style="color:#24292E;">	_panic    </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">_panic </span></span>
<span class="line"><span style="color:#24292E;">	link      </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">_defer </span><span style="color:#6A737D;">// 下一个 _defer</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>panic 是一个内置函数，用于抛出程序执行的异常</strong>。它会终止其后将要执行的代码，并依次逆序执行 panic 所在函数可能存在的 defer 函数列表；然后返回该函数的调用方，如果函数的调用方中也有 defer 函数列表，也将被逆序执行，执行结束后再返回到上一层调用方，直到返回当前 goroutine 中的所有函数为止，最后报告异常，程序崩溃退出。异常可以直接通过 panic 函数调用抛出，也可能是因为运行时错误而引发，比如访问了空指针等。</p><p>而<strong>recover 内置函数可用于捕获 panic，重新恢复程序正常执行流程，但是 recover 函数只有在 defer 内部使用才有效</strong>。如下面例子所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">panicAndReturnErr</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;err is </span><span style="color:#79B8FF;">%+v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;returned normally from panicAndReturnErr&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">panicAndReturnErr</span><span style="color:#E1E4E8;">() (err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从 panic 中恢复</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">recover</span><span style="color:#E1E4E8;">(); e </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 打印栈信息</span></span>
<span class="line"><span style="color:#E1E4E8;">			buf </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			buf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buf[:runtime.</span><span style="color:#79B8FF;">Stack</span><span style="color:#E1E4E8;">(buf, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">			err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[PANIC]</span><span style="color:#79B8FF;">%v\\n%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, e, buf)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;panic begin&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;panic this game&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;panic over&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">panicAndReturnErr</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;err is </span><span style="color:#005CC5;">%+v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;returned normally from panicAndReturnErr&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">panicAndReturnErr</span><span style="color:#24292E;">() (err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从 panic 中恢复</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">recover</span><span style="color:#24292E;">(); e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 打印栈信息</span></span>
<span class="line"><span style="color:#24292E;">			buf </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buf[:runtime.</span><span style="color:#005CC5;">Stack</span><span style="color:#24292E;">(buf, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">			err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[PANIC]</span><span style="color:#005CC5;">%v\\n%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, e, buf)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;panic begin&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;panic this game&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;panic over&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>预期的执行结果为：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">panic begin</span></span>
<span class="line"><span style="color:#E1E4E8;">err is [PANIC]panic this game</span></span>
<span class="line"><span style="color:#E1E4E8;">goroutine </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> [running]:</span></span>
<span class="line"><span style="color:#E1E4E8;">main.panicAndReturnErr.</span><span style="color:#79B8FF;">func1</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">c000062f08</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Users</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">apple</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Desktop</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">micro</span><span style="color:#F97583;">-go-</span><span style="color:#E1E4E8;">course</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">section37</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">defer_example.</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+0x</span><span style="color:#79B8FF;">a1</span></span>
<span class="line"><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">10ad640</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">10eb360</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">usr</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">local</span><span style="color:#F97583;">/go/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">runtime</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">panic.</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">969</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+0x</span><span style="color:#79B8FF;">166</span></span>
<span class="line"><span style="color:#E1E4E8;">main.</span><span style="color:#79B8FF;">panicAndReturnErr</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Users</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">apple</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Desktop</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">micro</span><span style="color:#F97583;">-go-</span><span style="color:#E1E4E8;">course</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">section37</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">defer_example.</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+0x</span><span style="color:#79B8FF;">c2</span></span>
<span class="line"><span style="color:#E1E4E8;">main.</span><span style="color:#79B8FF;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Users</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">apple</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Desktop</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">micro</span><span style="color:#F97583;">-go-</span><span style="color:#E1E4E8;">course</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">section37</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">defer_example.</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+0x</span><span style="color:#79B8FF;">26</span></span>
<span class="line"><span style="color:#E1E4E8;">returned normally from panicAndReturnErr</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">panic begin</span></span>
<span class="line"><span style="color:#24292E;">err is [PANIC]panic this game</span></span>
<span class="line"><span style="color:#24292E;">goroutine </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> [running]:</span></span>
<span class="line"><span style="color:#24292E;">main.panicAndReturnErr.</span><span style="color:#005CC5;">func1</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">c000062f08</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Users</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">apple</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Desktop</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">micro</span><span style="color:#D73A49;">-go-</span><span style="color:#24292E;">course</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">section37</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">defer_example.</span><span style="color:#D73A49;">go</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+0x</span><span style="color:#005CC5;">a1</span></span>
<span class="line"><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">10ad640</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">10eb360</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">usr</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">local</span><span style="color:#D73A49;">/go/</span><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">runtime</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">panic.</span><span style="color:#D73A49;">go</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">969</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+0x</span><span style="color:#005CC5;">166</span></span>
<span class="line"><span style="color:#24292E;">main.</span><span style="color:#005CC5;">panicAndReturnErr</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Users</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">apple</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Desktop</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">micro</span><span style="color:#D73A49;">-go-</span><span style="color:#24292E;">course</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">section37</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">defer_example.</span><span style="color:#D73A49;">go</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+0x</span><span style="color:#005CC5;">c2</span></span>
<span class="line"><span style="color:#24292E;">main.</span><span style="color:#005CC5;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Users</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">apple</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Desktop</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">micro</span><span style="color:#D73A49;">-go-</span><span style="color:#24292E;">course</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">section37</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">defer_example.</span><span style="color:#D73A49;">go</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+0x</span><span style="color:#005CC5;">26</span></span>
<span class="line"><span style="color:#24292E;">returned normally from panicAndReturnErr</span></span></code></pre></div><p>从这个执行结果可以看出，panicAndReturnErr 函数在 panic 之后将会执行 defer 定义的延迟函数，恢复程序的正常执行逻辑。在上述例子中，我们在 defer 函数中使用 recover 函数帮助程序从 panic 中恢复过来，并获取异常堆栈信息组成 error 返回调用方。panicAndReturnErr 从 panic 中恢复后将直接返回，不会执行函数中 panic 后的其他代码。</p><p>在日常开发中，对于可能出现执行异常的函数，如数组越界、操作空指针等，在函数中定义一个使用 recover 函数的 defer 延迟函数，有利提高程序执行的健壮性，避免程序运行时异常崩溃。</p><h3 id="常见的并发陷阱" tabindex="-1">常见的并发陷阱 <a class="header-anchor" href="#常见的并发陷阱" aria-label="Permalink to &quot;常见的并发陷阱&quot;">​</a></h3><p>最后我们再来介绍与 Go 并发相关的几个小技巧，帮助你规避 Go 并发开发的一些陷阱。</p><p>首先是循环并发时闭包传递参数的问题，如下错误例子所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> ; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;current i is &quot;</span><span style="color:#E1E4E8;">, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(time.Second)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> ; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;current i is &quot;</span><span style="color:#24292E;">, i)</span></span>
<span class="line"><span style="color:#24292E;">		}()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(time.Second)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码极有可能的输出为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">current i is </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">current i is </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">current i is </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">current i is </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">current i is </span><span style="color:#79B8FF;">5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">current i is </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">current i is </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">current i is </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">current i is </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">current i is </span><span style="color:#005CC5;">5</span></span></code></pre></div><p>这是因为 i 使用的地址空间在循环中被复用，在 goroutine 执行时，i 的值可能在被主 goroutine 修改，而此时其他 goroutine 也在读取使用，从而导致了并发错误。针对这种错误可以通过<strong>复制拷贝</strong> 或者<strong>传参拷贝</strong>的方式规避，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> ; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		go </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(v </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;current i is&quot;</span><span style="color:#E1E4E8;">, v)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	time.</span><span style="color:#B392F0;">Sleep</span><span style="color:#E1E4E8;">(time.Second)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> ; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		go </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(v </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;current i is&quot;</span><span style="color:#24292E;">, v)</span></span>
<span class="line"><span style="color:#24292E;">		}(i)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	time.</span><span style="color:#6F42C1;">Sleep</span><span style="color:#24292E;">(time.Second)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>前面介绍 panic 时我们了解到 panic 异常的出现会导致 Go 程序的崩溃。但其实即使 panic 是出现在其他启动的子 goroutine 中，也会导致 Go 程序的崩溃退出，同时 panic 只能捕获 goroutine 自身的异常，因此**对于每个启动的 goroutine，都需要在入口处捕获 panic，并尝试打印堆栈信息并进行异常处理，<strong>从而避免子 goroutine 的 panic 导致整个程序的崩溃退出</strong>。如下面的例子所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RecoverPanic</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从 panic 中恢复并打印栈信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">recover</span><span style="color:#E1E4E8;">(); e </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		buf </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		buf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> buf[:runtime.</span><span style="color:#79B8FF;">Stack</span><span style="color:#E1E4E8;">(buf, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[PANIC]</span><span style="color:#79B8FF;">%v\\n%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, e, buf)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> ; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> ; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// defer 注册 panic 捕获函数</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RecoverPanic</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">dothing</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		}()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RecoverPanic</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从 panic 中恢复并打印栈信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">recover</span><span style="color:#24292E;">(); e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		buf </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> buf[:runtime.</span><span style="color:#005CC5;">Stack</span><span style="color:#24292E;">(buf, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[PANIC]</span><span style="color:#005CC5;">%v\\n%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, e, buf)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> ; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> ; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// defer 注册 panic 捕获函数</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RecoverPanic</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">dothing</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		}()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后一个技巧是要<strong>善于结合使用 select、timer 和 context 进行超时控制</strong>。在 goroutine 中进行一些耗时较长的操作，最好都加上超时 timer，在并发的时候也要传递 context，这样在取消的时候就不会有遗漏，进而达到回收 goroutine 的目的，避免内存泄漏的发生。如下面的例子所示，通过 select 同时监听任务和定时器状态，在定时器到达而任务未完成之时，提前结束任务，清理资源并返回。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">// do logic process</span></span>
<span class="line"><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> msg </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> input:</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#6A737D;">// has been canceled</span></span>
<span class="line"><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">ctx.</span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...资源清理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#6A737D;">// 2 second timeout</span></span>
<span class="line"><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">time.</span><span style="color:#79B8FF;">After</span><span style="color:#E1E4E8;">(time.Second </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...资源清理 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">// do logic process</span></span>
<span class="line"><span style="color:#D73A49;">case</span><span style="color:#24292E;"> msg </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> input:</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#6A737D;">// has been canceled</span></span>
<span class="line"><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">ctx.</span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...资源清理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#6A737D;">// 2 second timeout</span></span>
<span class="line"><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">time.</span><span style="color:#005CC5;">After</span><span style="color:#24292E;">(time.Second </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...资源清理 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>在本课时我们主要介绍了 Go 中常见的错误处理机制和一些并发开发技巧。</p><p>Go 倡导将错误作为返回值返回给调用方，由调用方决定如何处理或者忽略错误。通过 defer 和 recover 内置函数，我们可以轻易地将运行时异常的 Go 程序恢复到正常执行流程。另外，Go 并发开发中存在不少的并发陷阱，这些都需要我们在开发中额外留意并规避。</p><p>最后，对于 Go 中的错误处理和并发技巧，你还有哪些经验？欢迎在留言区与我分享。</p>`,27);function y(i,F,d,u,g,C){const n=p("Image");return l(),o("div",null,[r,e(n,{alt:"Lark20201104-164037.png",src:"https://s0.lgstatic.com/i/image/M00/67/D7/Ciqc1F-iaTOALrVCAAC28gcQ66k361.png"}),t(),E])}const D=a(c,[["render",y]]);export{f as __pageData,D as default};
