import{_ as p,D as o,o as t,g as e,J as n,h as a,Q as l,m as c}from"./chunks/framework.f67d7268.js";const g=JSON.parse('{"title":"14etcdwatch：etcd如何实现watch机制？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6408) 14  etcd watch：etcd 如何实现 watch 机制？.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6408) 14  etcd watch：etcd 如何实现 watch 机制？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/etcd 原理与实践_文档/(6408) 14  etcd watch：etcd 如何实现 watch 机制？.md"},E=l(`<h1 id="_14etcdwatch-etcd如何实现watch机制" tabindex="-1">14etcdwatch：etcd如何实现watch机制？ <a class="header-anchor" href="#_14etcdwatch-etcd如何实现watch机制" aria-label="Permalink to &quot;14etcdwatch：etcd如何实现watch机制？&quot;">​</a></h1><p>etcd v2 和 v3 版本之间发生的其中一个重要变化就是 watch 机制的优化。etcd v2 watch 机制采用的是基于 HTTP/1.x 协议的<strong>客户端轮询机制</strong>，历史版本则通过滑动窗口存储。在大量的客户端连接场景或集群规模较大的场景下，etcd 服务端的扩展性和稳定性都无法保证。etcd v3 在此基础上进行优化，满足了 Kubernetes Pods 部署和状态管理等业务场景诉求。</p><p>这一讲我们就来介绍 watch 的用法，包括如何通过 etcdctl 命令行工具及 clientv3 客户端实现键值对的监控。在了解基本用法的基础上，我们再来重点介绍 etcd watch 实现的原理和细节。</p><h3 id="watch-的用法" tabindex="-1">watch 的用法 <a class="header-anchor" href="#watch-的用法" aria-label="Permalink to &quot;watch 的用法&quot;">​</a></h3><p>在具体讲解 watch 的实现方式之前，我们先来体验一下如何使用 watch。</p><h4 id="etcdctl-命令行工具" tabindex="-1">etcdctl 命令行工具 <a class="header-anchor" href="#etcdctl-命令行工具" aria-label="Permalink to &quot;etcdctl 命令行工具&quot;">​</a></h4><p>通过 etcdctl 命令行工具实现键值对的监测：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">etcdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">put</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aoho</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">etcdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">put</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">boho</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">etcdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-w=json</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rev=1</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;Header&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;cluster_id&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">14841639068965178418</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;member_id&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10276657743932975437</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;revision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;raft_term&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;Events&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> [{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;kv&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;key&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;aGVsbG8=&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;create_revision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;mod_revision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;version&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;value&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;YW9obw==&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;kv&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;key&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;aGVsbG8=&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;create_revision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;mod_revision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;version&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;value&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Ym9obw==&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}],</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;CompactRevision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;Canceled&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;Created&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">etcdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">put</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aoho</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">etcdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">put</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">boho</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">etcdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-w=json</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rev=1</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;Header&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;cluster_id&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">14841639068965178418</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;member_id&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10276657743932975437</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;revision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;raft_term&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;Events&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> [{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;kv&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;key&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;aGVsbG8=&quot;,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;create_revision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;mod_revision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;version&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;value&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;YW9obw==&quot;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}, {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;kv&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;key&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;aGVsbG8=&quot;,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;create_revision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;mod_revision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;version&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;value&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Ym9obw==&quot;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}],</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;CompactRevision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;Canceled&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;Created&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>依次在命令行中输入上面三条命令，前面两条依次更新 hello 对应的值，第三条命令监测键为 hello 的变化，并指定版本号从 1 开始。最后的结果是输出了两条 watch 事件。</p><p>接着，我们在另一个命令行继续输入如下的更新命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">etcdctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">put</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">coho</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">etcdctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">put</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">coho</span></span></code></pre></div><p>可以看到前一个命令行输出了如下的内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;Header&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;cluster_id&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">14841639068965178418</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;member_id&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10276657743932975437</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;revision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;raft_term&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;Events&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> [{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">&quot;kv&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;key&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;aGVsbG8=&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;create_revision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;mod_revision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;version&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">&quot;value&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Y29obw==&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}],</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;CompactRevision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;Canceled&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">&quot;Created&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;Header&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;cluster_id&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">14841639068965178418</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;member_id&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10276657743932975437</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;revision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;raft_term&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;Events&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> [{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">&quot;kv&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;key&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;aGVsbG8=&quot;,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;create_revision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;mod_revision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;version&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">&quot;value&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Y29obw==&quot;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}],</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;CompactRevision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;Canceled&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">&quot;Created&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>命令行输出的事件表明，键<code>hello</code>对应的键值对发生了更新，并输出了事件的详细信息。上述内容就是通过 etcdctl 命令行工具实现 watch 指定的键值对功能的全过程。</p><h4 id="clientv3-客户端" tabindex="-1">clientv3 客户端 <a class="header-anchor" href="#clientv3-客户端" aria-label="Permalink to &quot;clientv3 客户端&quot;">​</a></h4><p>下面我们继续来看在 clientv3 中如何实现 watch 功能。</p><p>etcd 的 MVCC 模块对外提供了两种访问键值对的实现方式，一种是键值存储 kvstore，另一种是 watchableStore，它们都实现了 KV 接口。clientv3 中很简洁地封装了 watch 客户端与服务端交互的细节，基于 watchableStore 即可实现 watch 功能，客户端使用的代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testWatch</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newWatchableStore</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    w </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#79B8FF;">NewWatchStream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    w.</span><span style="color:#79B8FF;">Watch</span><span style="color:#E1E4E8;">(start_key: hello, end_key: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        consume </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> w.</span><span style="color:#79B8FF;">Chan</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testWatch</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newWatchableStore</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    w </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.</span><span style="color:#005CC5;">NewWatchStream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    w.</span><span style="color:#005CC5;">Watch</span><span style="color:#24292E;">(start_key: hello, end_key: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        consume </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> w.</span><span style="color:#005CC5;">Chan</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述实现中，我们调用了 watchableStore。为了实现 watch 监测，我们创建了一个 watchStream，watchStream 监听的 key 为 hello，之后我们就可以消费<code>w.Chan()</code>返回的 channel。key 为 hello 的任何变化，都会通过这个 channel 发送给客户端。</p>`,19),y=l(`<p>结合这张图，我们可以看到：watchStream 实现了在大量 KV 的变化事件中，<strong>过滤出当前所指定监听的 key，并将键值对的变更事件输出</strong>。</p><h3 id="watchablestore-存储" tabindex="-1">watchableStore 存储 <a class="header-anchor" href="#watchablestore-存储" aria-label="Permalink to &quot;watchableStore 存储&quot;">​</a></h3><p>在第 10 讲<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=613#/detail/pc?id=6404" target="_blank" rel="noreferrer">&quot;etcd 存储：如何实现键值对的读写操作？&quot;</a>中我们已经介绍过 kvstore，这里我们具体介绍一下 watchableStore 的实现。</p><p><strong>watchableStore 负责了注册、管理以及触发 Watcher 的功能</strong>。我们先来看一下这个结构体的各个字段：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:47</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">watchableStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">store</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 同步读写锁</span></span>
<span class="line"><span style="color:#E1E4E8;">	mu sync.RWMutex</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 被阻塞在 watch channel 中的 watcherBatch</span></span>
<span class="line"><span style="color:#E1E4E8;">	victims []watcherBatch</span></span>
<span class="line"><span style="color:#E1E4E8;">	victimc </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 未同步的 watchers</span></span>
<span class="line"><span style="color:#E1E4E8;">	unsynced watcherGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 已同步的 watchers</span></span>
<span class="line"><span style="color:#E1E4E8;">	synced watcherGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">	stopc </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	wg    sync.WaitGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:47</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">watchableStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">store</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 同步读写锁</span></span>
<span class="line"><span style="color:#24292E;">	mu sync.RWMutex</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 被阻塞在 watch channel 中的 watcherBatch</span></span>
<span class="line"><span style="color:#24292E;">	victims []watcherBatch</span></span>
<span class="line"><span style="color:#24292E;">	victimc </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 未同步的 watchers</span></span>
<span class="line"><span style="color:#24292E;">	unsynced watcherGroup</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 已同步的 watchers</span></span>
<span class="line"><span style="color:#24292E;">	synced watcherGroup</span></span>
<span class="line"><span style="color:#24292E;">	stopc </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	wg    sync.WaitGroup</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>watchableStore 组合了 store 结构体的字段和方法，除此之外，还有两个 watcherGroup 类型的字段，watcherGroup 管理多个 watcher，并能够根据 key 快速找到监听该 key 的一个或多个 watcher。</p><ul><li><p>unsynced 表示 watcher 监听的数据还未同步完成。当创建的 watcher 指定的版本号小于 etcd server 最新的版本号时，会将 watcher 保存到 unsynced watcherGroup。</p></li><li><p>synced 表示 watcher 监听的数据都已经同步完毕，在等待新的变更。如果创建的 watcher 未指定版本号或指定的版本号大于当前最新的版本号，它将会保存到 synced watcherGroup 中。</p></li></ul><p>根据 watchableStore 的定义，我们可以结合下图描述前文示例 watch 监听的过程。</p>`,8),i=l(`<p>watch 监听流程</p><p>watchableStore 收到了所有 key 的变更后，将这些 key 交给 synced（watchGroup），synced 使用了 map 和 ADT（红黑树），能够快速地从所有 key 中找到监听的 key，将这些 key 发送给对应的 watcher，这些 watcher 再通过 chan 将变更信息发送出去。</p><p>在查找监听 key 对应的事件时，如果只监听一个 key：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(start_key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> foo, end_key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nil)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(start_key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> foo, end_key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nil)</span></span></code></pre></div><p>则对应的存储为<code>map[key]*watcher</code>。这样可以根据 key 快速找到对应的 watcher。但是 watch 可以监听一组范围的 key，这种情况应该如何处理呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(start_key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hello1, end_key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hello3)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(start_key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hello1, end_key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hello3)</span></span></code></pre></div><p>上面的代码监听了从 hello1→hello3 之间的所有 key，这些 key 的数量不固定，比如：key=hello11 也处于监听范围。这种情况就无法再使用 map 了，因此 etcd 用 ADT 结构来存储一个范围内的 key。</p><p>watcherGroup 是由一系列范围 watcher 组织起来的 watchers。在找到对应的 watcher 后，调用 watcher 的 send() 方法，将变更的事件发送出去。</p><h3 id="syncwatchers-同步监听" tabindex="-1">syncWatchers 同步监听 <a class="header-anchor" href="#syncwatchers-同步监听" aria-label="Permalink to &quot;syncWatchers 同步监听&quot;">​</a></h3><p>在初始化一个新的 watchableStore 时，etcd 会创建一个用于同步 watcherGroup 的 goroutine，会在 syncWatchersLoop 函数中<strong>每隔 100ms 调用一次 syncWatchers 方法</strong>，将所有未通知的事件通知给所有的监听者：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:334</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">watchableStore) </span><span style="color:#B392F0;">syncWatchers</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 为了从 unsynced watchers 中找到未同步的键值对，我们需要查询最小的版本号，利用最小的版本号查询 backend 存储中的键值对</span></span>
<span class="line"><span style="color:#E1E4E8;">	curRev </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.store.currentRev</span></span>
<span class="line"><span style="color:#E1E4E8;">	compactionRev </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.store.compactMainRev</span></span>
<span class="line"><span style="color:#E1E4E8;">	wg, minRev </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.unsynced.</span><span style="color:#79B8FF;">choose</span><span style="color:#E1E4E8;">(maxWatchersPerSync, curRev, compactionRev)</span></span>
<span class="line"><span style="color:#E1E4E8;">	minBytes, maxBytes </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newRevBytes</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">newRevBytes</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// UnsafeRange 方法返回了键值对。在 boltdb 中存储的 key 都是版本号，而 value 为在 backend 中存储的键值对</span></span>
<span class="line"><span style="color:#E1E4E8;">	tx </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.store.b.</span><span style="color:#79B8FF;">ReadTx</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	tx.</span><span style="color:#79B8FF;">RLock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	revs, vs </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tx.</span><span style="color:#79B8FF;">UnsafeRange</span><span style="color:#E1E4E8;">(keyBucketName, minBytes, maxBytes, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> evs []mvccpb.Event</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 转换成事件</span></span>
<span class="line"><span style="color:#E1E4E8;">	evs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">kvsToEvents</span><span style="color:#E1E4E8;">(s.store.lg, wg, revs, vs)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> victims watcherBatch</span></span>
<span class="line"><span style="color:#E1E4E8;">	wb </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newWatcherBatch</span><span style="color:#E1E4E8;">(wg, evs)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> w </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> wg.watchers {</span></span>
<span class="line"><span style="color:#E1E4E8;">		w.minRev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> curRev </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> eb.moreRev </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			w.minRev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> eb.moreRev</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过 send 将事件和 watcherGroup 发送到每一个 watcher 对应的 channel 中</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> w.</span><span style="color:#79B8FF;">send</span><span style="color:#E1E4E8;">(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: curRev}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			pendingEventsGauge.</span><span style="color:#79B8FF;">Add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">float64</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(eb.evs)))</span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 异常情况处理</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> victims </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				victims </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(watcherBatch)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			w.victim </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#E1E4E8;">		s.unsynced.</span><span style="color:#79B8FF;">delete</span><span style="color:#E1E4E8;">(w)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:334</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">watchableStore) </span><span style="color:#6F42C1;">syncWatchers</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 为了从 unsynced watchers 中找到未同步的键值对，我们需要查询最小的版本号，利用最小的版本号查询 backend 存储中的键值对</span></span>
<span class="line"><span style="color:#24292E;">	curRev </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.store.currentRev</span></span>
<span class="line"><span style="color:#24292E;">	compactionRev </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.store.compactMainRev</span></span>
<span class="line"><span style="color:#24292E;">	wg, minRev </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.unsynced.</span><span style="color:#005CC5;">choose</span><span style="color:#24292E;">(maxWatchersPerSync, curRev, compactionRev)</span></span>
<span class="line"><span style="color:#24292E;">	minBytes, maxBytes </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newRevBytes</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">newRevBytes</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// UnsafeRange 方法返回了键值对。在 boltdb 中存储的 key 都是版本号，而 value 为在 backend 中存储的键值对</span></span>
<span class="line"><span style="color:#24292E;">	tx </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.store.b.</span><span style="color:#005CC5;">ReadTx</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	tx.</span><span style="color:#005CC5;">RLock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	revs, vs </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tx.</span><span style="color:#005CC5;">UnsafeRange</span><span style="color:#24292E;">(keyBucketName, minBytes, maxBytes, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> evs []mvccpb.Event</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 转换成事件</span></span>
<span class="line"><span style="color:#24292E;">	evs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">kvsToEvents</span><span style="color:#24292E;">(s.store.lg, wg, revs, vs)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> victims watcherBatch</span></span>
<span class="line"><span style="color:#24292E;">	wb </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newWatcherBatch</span><span style="color:#24292E;">(wg, evs)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> w </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> wg.watchers {</span></span>
<span class="line"><span style="color:#24292E;">		w.minRev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> curRev </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> eb.moreRev </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			w.minRev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eb.moreRev</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过 send 将事件和 watcherGroup 发送到每一个 watcher 对应的 channel 中</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> w.</span><span style="color:#005CC5;">send</span><span style="color:#24292E;">(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: curRev}) {</span></span>
<span class="line"><span style="color:#24292E;">			pendingEventsGauge.</span><span style="color:#005CC5;">Add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">float64</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(eb.evs)))</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 异常情况处理</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> victims </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				victims </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(watcherBatch)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			w.victim </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#24292E;">		s.unsynced.</span><span style="color:#005CC5;">delete</span><span style="color:#24292E;">(w)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>简化后的 syncWatchers 方法中有三个核心步骤，首先是根据当前的版本从未同步的 watcherGroup 中选出一些待处理的任务，然后从 BoltDB 中获取当前版本范围内的数据变更，并将它们转换成事件，事件和 watcherGroup 在打包之后会通过 send 方法发送到每一个 watcher 对应的 channel 中。</p>`,12),F=l(`<p>syncWatchers 方法调用流程图</p><h3 id="客户端监听事件" tabindex="-1">客户端监听事件 <a class="header-anchor" href="#客户端监听事件" aria-label="Permalink to &quot;客户端监听事件&quot;">​</a></h3><p>客户端监听键值对时，调用的正是<code>Watch</code>方法，<code>Watch</code>在 stream 中创建一个新的 watcher，并返回对应的 WatchID。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watcher.go:108</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (ws </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">watchStream) </span><span style="color:#B392F0;">Watch</span><span style="color:#E1E4E8;">(id WatchID, key, end []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, startRev </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, fcs </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">FilterFunc) (WatchID, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 防止出现 key &gt;= end 的错误 range</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(end) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> bytes.</span><span style="color:#79B8FF;">Compare</span><span style="color:#E1E4E8;">(key, end) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, ErrEmptyWatcherRange</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	ws.mu.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> ws.mu.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ws.closed {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, ErrEmptyWatcherRange</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> AutoWatchID {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> ws.watchers[ws.nextID] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			ws.nextID</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ws.nextID</span></span>
<span class="line"><span style="color:#E1E4E8;">		ws.nextID</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> _, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ws.watchers[id]; ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, ErrWatcherDuplicateID</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	w, c </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ws.watchable.</span><span style="color:#79B8FF;">watch</span><span style="color:#E1E4E8;">(key, end, startRev, id, ws.ch, fcs</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	ws.cancels[id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> c</span></span>
<span class="line"><span style="color:#E1E4E8;">	ws.watchers[id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> w</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> id, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watcher.go:108</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (ws </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">watchStream) </span><span style="color:#6F42C1;">Watch</span><span style="color:#24292E;">(id WatchID, key, end []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, startRev </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, fcs </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">FilterFunc) (WatchID, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 防止出现 key &gt;= end 的错误 range</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(end) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> bytes.</span><span style="color:#005CC5;">Compare</span><span style="color:#24292E;">(key, end) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, ErrEmptyWatcherRange</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	ws.mu.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> ws.mu.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ws.closed {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, ErrEmptyWatcherRange</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> AutoWatchID {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ws.watchers[ws.nextID] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			ws.nextID</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ws.nextID</span></span>
<span class="line"><span style="color:#24292E;">		ws.nextID</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> _, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ws.watchers[id]; ok {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, ErrWatcherDuplicateID</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	w, c </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ws.watchable.</span><span style="color:#005CC5;">watch</span><span style="color:#24292E;">(key, end, startRev, id, ws.ch, fcs</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	ws.cancels[id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c</span></span>
<span class="line"><span style="color:#24292E;">	ws.watchers[id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> w</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> id, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AutoWatchID 是 WatchStream 中传递的观察者 ID。当用户没有提供可用的 ID 时，如果又传递该值，etcd 将自动分配一个 ID。<strong>如果传递的 ID 已经存在，则会返回 ErrWatcherDuplicateID 错误</strong>。watchable_store.go 中的 watch 实现是监听的具体实现，实现代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:120</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">watchableStore) </span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">(key, end []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, startRev </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, id WatchID, ch </span><span style="color:#F97583;">chan&lt;-</span><span style="color:#E1E4E8;"> WatchResponse, fcs </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">FilterFunc) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">watcher, cancelFunc) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 构建 watcher</span></span>
<span class="line"><span style="color:#E1E4E8;">	wa </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">watcher{</span></span>
<span class="line"><span style="color:#E1E4E8;">		key:    key,</span></span>
<span class="line"><span style="color:#E1E4E8;">		end:    end,</span></span>
<span class="line"><span style="color:#E1E4E8;">		minRev: startRev,</span></span>
<span class="line"><span style="color:#E1E4E8;">		id:     id,</span></span>
<span class="line"><span style="color:#E1E4E8;">		ch:     ch,</span></span>
<span class="line"><span style="color:#E1E4E8;">		fcs:    fcs,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	s.mu.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	s.revMu.</span><span style="color:#79B8FF;">RLock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	synced </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> startRev </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> s.store.currentRev </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> startRev </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> synced {</span></span>
<span class="line"><span style="color:#E1E4E8;">		wa.minRev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.store.currentRev </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> startRev </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> wa.minRev {</span></span>
<span class="line"><span style="color:#E1E4E8;">			wa.minRev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> startRev</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> synced {</span></span>
<span class="line"><span style="color:#E1E4E8;">		s.synced.</span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;">(wa)</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		slowWatcherGauge.</span><span style="color:#79B8FF;">Inc</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		s.unsynced.</span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;">(wa)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	s.revMu.</span><span style="color:#79B8FF;">RUnlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	s.mu.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// prometheus 的指标增加</span></span>
<span class="line"><span style="color:#E1E4E8;">	watcherGauge.</span><span style="color:#79B8FF;">Inc</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wa, </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() { s.</span><span style="color:#79B8FF;">cancelWatcher</span><span style="color:#E1E4E8;">(wa) }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:120</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">watchableStore) </span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">(key, end []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, startRev </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, id WatchID, ch </span><span style="color:#D73A49;">chan&lt;-</span><span style="color:#24292E;"> WatchResponse, fcs </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">FilterFunc) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">watcher, cancelFunc) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 构建 watcher</span></span>
<span class="line"><span style="color:#24292E;">	wa </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">watcher{</span></span>
<span class="line"><span style="color:#24292E;">		key:    key,</span></span>
<span class="line"><span style="color:#24292E;">		end:    end,</span></span>
<span class="line"><span style="color:#24292E;">		minRev: startRev,</span></span>
<span class="line"><span style="color:#24292E;">		id:     id,</span></span>
<span class="line"><span style="color:#24292E;">		ch:     ch,</span></span>
<span class="line"><span style="color:#24292E;">		fcs:    fcs,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	s.mu.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	s.revMu.</span><span style="color:#005CC5;">RLock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	synced </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> startRev </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> s.store.currentRev </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> startRev </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> synced {</span></span>
<span class="line"><span style="color:#24292E;">		wa.minRev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.store.currentRev </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> startRev </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> wa.minRev {</span></span>
<span class="line"><span style="color:#24292E;">			wa.minRev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> startRev</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> synced {</span></span>
<span class="line"><span style="color:#24292E;">		s.synced.</span><span style="color:#005CC5;">add</span><span style="color:#24292E;">(wa)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		slowWatcherGauge.</span><span style="color:#005CC5;">Inc</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		s.unsynced.</span><span style="color:#005CC5;">add</span><span style="color:#24292E;">(wa)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	s.revMu.</span><span style="color:#005CC5;">RUnlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	s.mu.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// prometheus 的指标增加</span></span>
<span class="line"><span style="color:#24292E;">	watcherGauge.</span><span style="color:#005CC5;">Inc</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wa, </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() { s.</span><span style="color:#005CC5;">cancelWatcher</span><span style="color:#24292E;">(wa) }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对 watchableStore 进行操作之前，需要加锁。如果 etcd 收到客户端的 watch 请求中携带了 revision 参数，则<strong>比较请求的 revision 和 store 当前的 revision</strong>，如果大于当前 revision，则放入 synced 组中，否则放入 unsynced 组。</p><h3 id="服务端处理监听" tabindex="-1">服务端处理监听 <a class="header-anchor" href="#服务端处理监听" aria-label="Permalink to &quot;服务端处理监听&quot;">​</a></h3><p>当 etcd 服务启动时，会在服务端运行一个用于处理监听事件的 watchServer gRPC 服务，客户端的 watch 请求最终都会被转发到 Watch 函数处理：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 etcdserver/api/v3rpc/watch.go:140</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (ws </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">watchServer) </span><span style="color:#B392F0;">Watch</span><span style="color:#E1E4E8;">(stream pb.Watch_WatchServer) (err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	sws </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> serverWatchStream{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 构建 serverWatchStream</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	sws.wg.</span><span style="color:#79B8FF;">Add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		sws.</span><span style="color:#79B8FF;">sendLoop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		sws.wg.</span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"><span style="color:#E1E4E8;">	errc </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 理想情况下，recvLoop 将会使用 sws.wg 通知操作的完成，但是当  stream.Context().Done() 关闭时，由于使用了不同的 ctx，stream 的接口有可能一直阻塞，调用 sws.close() 会发生死锁</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> rerr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> sws.</span><span style="color:#79B8FF;">recvLoop</span><span style="color:#E1E4E8;">(); rerr </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isClientCtxErr</span><span style="color:#E1E4E8;">(stream.</span><span style="color:#79B8FF;">Context</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Err</span><span style="color:#E1E4E8;">(), rerr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 错误处理</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			errc </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> rerr</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">errc:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">close</span><span style="color:#E1E4E8;">(sws.ctrlStream)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">stream.</span><span style="color:#79B8FF;">Context</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">		err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stream.</span><span style="color:#79B8FF;">Context</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Err</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> context.Canceled {</span></span>
<span class="line"><span style="color:#E1E4E8;">			err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rpctypes.ErrGRPCNoLeader</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	sws.</span><span style="color:#79B8FF;">close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 etcdserver/api/v3rpc/watch.go:140</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (ws </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">watchServer) </span><span style="color:#6F42C1;">Watch</span><span style="color:#24292E;">(stream pb.Watch_WatchServer) (err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	sws </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> serverWatchStream{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构建 serverWatchStream</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	sws.wg.</span><span style="color:#005CC5;">Add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		sws.</span><span style="color:#005CC5;">sendLoop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		sws.wg.</span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"><span style="color:#24292E;">	errc </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 理想情况下，recvLoop 将会使用 sws.wg 通知操作的完成，但是当  stream.Context().Done() 关闭时，由于使用了不同的 ctx，stream 的接口有可能一直阻塞，调用 sws.close() 会发生死锁</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> rerr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> sws.</span><span style="color:#005CC5;">recvLoop</span><span style="color:#24292E;">(); rerr </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isClientCtxErr</span><span style="color:#24292E;">(stream.</span><span style="color:#005CC5;">Context</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Err</span><span style="color:#24292E;">(), rerr) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 错误处理</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			errc </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> rerr</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">errc:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">close</span><span style="color:#24292E;">(sws.ctrlStream)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">stream.</span><span style="color:#005CC5;">Context</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">		err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stream.</span><span style="color:#005CC5;">Context</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Err</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> context.Canceled {</span></span>
<span class="line"><span style="color:#24292E;">			err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rpctypes.ErrGRPCNoLeader</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	sws.</span><span style="color:#005CC5;">close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果出现了更新或者删除操作，相应的事件就会被发送到 watchStream 的通道中。客户端可以通过 Watch 功能监听某一个 Key 或者一个范围的变动，在每一次客户端调用服务端时都会创建两个 goroutine，其中一个协程 sendLoop 负责向监听者发送数据变动的事件，另一个协程 recvLoop 负责处理客户端发来的事件。</p><p>sendLoop 会通过<strong>select 关键字</strong> 来监听多个 channel 中的数据，将接收到的数据封装成 pb.WatchResponse 结构，并通过 gRPC 流发送给客户端；recvLoop 方法调用了 MVCC 模块暴露出的<strong>watchStream.Watch 方法</strong>，该方法会返回一个可以用于取消监听事件的 watchID；当 gRPC 流已经结束或者出现错误时，当前的循环就会返回，两个 goroutine 也都会结束。</p><h3 id="异常流程处理" tabindex="-1">异常流程处理 <a class="header-anchor" href="#异常流程处理" aria-label="Permalink to &quot;异常流程处理&quot;">​</a></h3><p>我们来考虑一下异常流程的处理。消息都是通过 channel 发送出去，但如果消费者消费速度慢，channel 中的消息形成堆积，但是空间有限，满了之后应该怎么办呢？带着这个问题，首先我们来看 channel 的默认容量：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// chanBufLen 是发送 watch 事件的 buffered channel 长度</span></span>
<span class="line"><span style="color:#E1E4E8;">   chanBufLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// maxWatchersPerSync 是每次 sync 时 watchers 的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">	maxWatchersPerSync </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">512</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// chanBufLen 是发送 watch 事件的 buffered channel 长度</span></span>
<span class="line"><span style="color:#24292E;">   chanBufLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// maxWatchersPerSync 是每次 sync 时 watchers 的数量</span></span>
<span class="line"><span style="color:#24292E;">	maxWatchersPerSync </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">512</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>在实现中设置的 channel 的长度是 1024。channel 一旦满了，etcd 并不会丢弃 watch 事件，而是会进行如下的操作：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:438</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">watchableStore) </span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(rev </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, evs []mvccpb.Event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> victim watcherBatch</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> w, eb </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newWatcherBatch</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">s.synced, evs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> eb.revs </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 异常</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> w.</span><span style="color:#79B8FF;">send</span><span style="color:#E1E4E8;">(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: rev}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			pendingEventsGauge.</span><span style="color:#79B8FF;">Add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">float64</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(eb.evs)))</span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 将 slow watchers 移动到 victims</span></span>
<span class="line"><span style="color:#E1E4E8;">			w.minRev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rev </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> victim </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				victim </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(watcherBatch)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			w.victim </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">			victim[w] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> eb</span></span>
<span class="line"><span style="color:#E1E4E8;">			s.synced.</span><span style="color:#79B8FF;">delete</span><span style="color:#E1E4E8;">(w)</span></span>
<span class="line"><span style="color:#E1E4E8;">			slowWatcherGauge.</span><span style="color:#79B8FF;">Inc</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	s.</span><span style="color:#79B8FF;">addVictim</span><span style="color:#E1E4E8;">(victim)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:438</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">watchableStore) </span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(rev </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, evs []mvccpb.Event) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> victim watcherBatch</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> w, eb </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newWatcherBatch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">s.synced, evs) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> eb.revs </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 异常</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> w.</span><span style="color:#005CC5;">send</span><span style="color:#24292E;">(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: rev}) {</span></span>
<span class="line"><span style="color:#24292E;">			pendingEventsGauge.</span><span style="color:#005CC5;">Add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">float64</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(eb.evs)))</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 将 slow watchers 移动到 victims</span></span>
<span class="line"><span style="color:#24292E;">			w.minRev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rev </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> victim </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				victim </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(watcherBatch)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			w.victim </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">			victim[w] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eb</span></span>
<span class="line"><span style="color:#24292E;">			s.synced.</span><span style="color:#005CC5;">delete</span><span style="color:#24292E;">(w)</span></span>
<span class="line"><span style="color:#24292E;">			slowWatcherGauge.</span><span style="color:#005CC5;">Inc</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	s.</span><span style="color:#005CC5;">addVictim</span><span style="color:#24292E;">(victim)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 notify 的实现中可以知道，此 watcher 将会从 synced watcherGroup 中删除，和事件列表保存到一个名为 victim 的 watcherBatch 结构中。watcher 会记录当前的 Revision，并将自身标记为<strong>受损</strong>，变更操作也会被保存到 watchableStore 的 victims 中。我使用如下的示例来描述上述过程：</p><p>channel 已满的情况下，有一个写操作写入 foo = bar。监听 foo 的 watcher 将从 synced 中移除，同时 foo=bar 也被保存到 victims 中。</p>`,19),h=l(`<p>channel 已满时的处理流程</p><p>接下来该 watcher 不会记录对 foo 的任何变更。那么这些变更消息怎么处理呢？</p><p>我们知道在 channel 队列满时，变更的 Event 就会放入 victims 中。在 etcd 启动的时候，WatchableKV 模块启动了 syncWatchersLoop 和 syncVictimsLoop 两个异步协程，这两个协程用于处理不同场景下发送事件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:246</span></span>
<span class="line"><span style="color:#6A737D;">// syncVictimsLoop 清除堆积的 Event</span></span>
<span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">watchableStore) </span><span style="color:#B392F0;">syncVictimsLoop</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	defer s.wg.</span><span style="color:#B392F0;">Done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">moveVictims</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">//更新所有的 victim watchers</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		s.mu.</span><span style="color:#B392F0;">RLock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		isEmpty </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(s.victims) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">		s.mu.</span><span style="color:#B392F0;">RUnlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		var tickc </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">chan time.Time</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isEmpty {</span></span>
<span class="line"><span style="color:#E1E4E8;">			tickc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.</span><span style="color:#B392F0;">After</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Millisecond)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		select {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">tickc</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">s.victimc</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">s.stopc</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/watchable_store.go:246</span></span>
<span class="line"><span style="color:#6A737D;">// syncVictimsLoop 清除堆积的 Event</span></span>
<span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">watchableStore) </span><span style="color:#6F42C1;">syncVictimsLoop</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	defer s.wg.</span><span style="color:#6F42C1;">Done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">moveVictims</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//更新所有的 victim watchers</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		s.mu.</span><span style="color:#6F42C1;">RLock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		isEmpty </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(s.victims) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">		s.mu.</span><span style="color:#6F42C1;">RUnlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		var tickc </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">chan time.Time</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isEmpty {</span></span>
<span class="line"><span style="color:#24292E;">			tickc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.</span><span style="color:#6F42C1;">After</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Millisecond)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		select {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">tickc</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">s.victimc</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">s.stopc</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>syncVictimsLoop 则负责堆积的事件推送，尝试清除堆积的 Event。它会不断尝试让 watcher 发送这个 Event，一旦队列不满，watcher 将这个 Event 发出后，该 watcher 就被划入了 unsycned 中，同时不再是 victim 状态。</p><p>至此，syncWatchersLoop 协程就开始起作用。由于该 watcher 在 victim 状态已经落后了很多消息。为了保持同步，协程会根据 watcher 保存的 Revision，查出 victim 状态之后所有的消息，将关于 foo 的消息全部给到 watcher，当 watcher 将这些消息都发送出去后，watcher 就由 unsynced 变成 synced。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>watch 可以用来监听一个或一组 key，key 的任何变化都会发出事件消息。某种意义上讲，etcd 也是一种发布订阅模式。</p><p>这一讲我们通过介绍 watch 的用法，引入对 etcd watch 机制实现的分析和讲解。watchableStore 负责了注册、管理以及触发 Watcher 的功能。watchableStore 将 watcher 划分为 synced 、unsynced 以及异常状态下的 victim 三类。在 etcd 启动时，WatchableKV 模块启动了 syncWatchersLoop 和 syncVictimsLoop 异步 goroutine，用以负责不同场景下的事件推送，并提供了事件重试机制，保证事件都能发送出去给到客户端。</p><p>本讲内容总结如下：</p>`,10),d=c("p",null,"刚刚我们说 etcd 也实现了发布订阅模式，那么它和消息中间件 Kafka 有什么异同，是否能够替换呢？欢迎你在留言区和我交流自己的想法。下一讲，我们将继续介绍 etcd Lease 租约的实现原理。",-1);function C(u,v,w,D,B,A){const s=o("Image");return t(),e("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/19/19/Cgp9HWBJu_WAfdpGAAAef8_AVBQ682.png"}),a(),y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/19/17/CioPOWBJvWKAN2GEAAArY0rVWO4011.png"}),a(),i,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/19/17/CioPOWBJvXaAJROAAAAlohW0T4M993.png"}),a(),F,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/19/1A/Cgp9HWBJvY6AFDZcAAAvIEpMXI4453.png"}),a(),h,n(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M01/19/1A/Cgp9HWBJvZyAFPLNAAIuCsjxWZQ162.png"}),a(),d])}const b=p(r,[["render",C]]);export{g as __pageData,b as default};
