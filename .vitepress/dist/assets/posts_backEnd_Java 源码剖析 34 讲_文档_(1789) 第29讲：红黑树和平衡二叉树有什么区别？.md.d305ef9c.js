import{_ as o,j as e,o as t,g as r,k as a,s,h as l,Q as p}from"./chunks/framework.e0c66c3f.js";const x=JSON.parse('{"title":"典型回答 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1789) 第29讲：红黑树和平衡二叉树有什么区别？.md","filePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1789) 第29讲：红黑树和平衡二叉树有什么区别？.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/Java 源码剖析 34 讲_文档/(1789) 第29讲：红黑树和平衡二叉树有什么区别？.md"},E=s("p",null,"数据结构属于理解一些源码和技术所必备的知识，比如要读懂 Java 语言中 TreeMap 和 TreeSet 的源码就要懂红黑树的数据结构，不然是无法理解源码中关于红黑树数据的操作代码的，比如左旋、右旋、添加和删除操作等。因此本课时我们就来学习一下数据结构的基础知识，方便看懂源码或者是防止面试中被问到。",-1),y=s("p",null,"我们本课时的面试题是，红黑树和二叉树有什么区别？",-1),i=s("h3",{id:"典型回答",tabindex:"-1"},[l("典型回答 "),s("a",{class:"header-anchor",href:"#典型回答","aria-label":'Permalink to "典型回答"'},"​")],-1),_=s("p",null,"要回答这个问题之前，我们先要弄清什么是二叉树？什么是红黑树？",-1),A=s("p",null,"二叉树（Binary Tree）是指每个节点最多只有两个分支的树结构，即不存在分支大于 2 的节点，二叉树的数据结构如下图所示：",-1),g=p("<p>这是一棵拥有 6 个节点深度为 2（深度从 0 开始），并且根节点为 3 的二叉树。</p><p>二叉树有两个分支通常被称作&quot;左子树&quot;和&quot;右子树&quot;，而且这些分支具有左右次序不能随意地颠倒。</p><p>一棵空树或者满足以下性质的二叉树被称之为<strong>二叉查找树</strong>：</p><ul><li><p>若任意节点的左子树不为空，则左子树上所有节点的值均小于它的根节点的值；</p></li><li><p>若任意节点的右子树不为空，则右子树上所有节点的值均大于或等于它的根节点的值；</p></li><li><p>任意节点的左、右子树分别为二叉查找树。</p></li></ul><p>如下图所示，这就是一个标准的二叉查找树：</p>",5),h=s("p",null,"二叉查找树（Binary Search Tree）也被称为二叉搜索树、有序二叉树（Ordered Binary Tree）或排序二叉树（Sorted Binary Tree）等。",-1),d=s("p",null,'红黑树（Red Black Tree）是一种自平衡二叉查找树，它最早被称之为"对称二叉 B 树"，它现在的名字源于 1978 年的一篇论文，之后便被称之为红黑树了。',-1),D=s("p",null,"所谓的平衡树是指一种改进的二叉查找树，顾名思义平衡树就是将二叉查找树平衡均匀地分布，这样的好处就是可以减少二叉查找树的深度。",-1),F=s("p",null,"一般情况下二叉查找树的查询复杂度取决于目标节点到树根的距离（即深度），当节点的深度普遍较大时，查询的平均复杂度就会上升，因此为了实现更高效的查询就有了平衡树。",-1),u=s("p",null,"非平衡二叉树如下图所示：",-1),C=s("p",null,"平衡二叉树如下图所示：",-1),f=p("<p>可以看出使用平衡二叉树可以有效的减少二叉树的深度，从而提高了查询的效率。</p><p>红黑树除了具备二叉查找树的基本特性之外，还具备以下特性：</p><ul><li><p>节点是红色或黑色；</p></li><li><p>根节点是黑色；</p></li><li><p>所有叶子都是黑色的空节点（NIL 节点）；</p></li><li><p>每个红色节点必须有两个黑色的子节点，也就是说从每个叶子到根的所有路径上，不能有两个连续的红色节点；</p></li><li><p>从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑色节点。</p></li></ul><p>红黑树结构如下图所示：</p>",4),m=p('<h3 id="考点分析" tabindex="-1">考点分析 <a class="header-anchor" href="#考点分析" aria-label="Permalink to &quot;考点分析&quot;">​</a></h3><p>红黑树是一个较为复杂的数据结构，尤其是对于增加和删除操作来说，一般面试官不会让你直接手写红黑树的具体实现。如果你只有很短的时间准备面试的话，那么我建议你不要死磕这些概念，要学会有的放矢，因为即使你花费很多的时间来背这些概念，一转眼的功夫就会彻底忘掉，所以你只需要大概地了解其中的一些概念和明白大致的原理就足够了。</p><p>和此知识点相关的面试题还有以下这些：</p><ul><li><p>为什么工程中喜欢使用红黑树而不是其他二叉查找树？</p></li><li><p>红黑树是如何保证自平衡的？</p></li></ul><h3 id="知识扩展" tabindex="-1">知识扩展 <a class="header-anchor" href="#知识扩展" aria-label="Permalink to &quot;知识扩展&quot;">​</a></h3><h4 id="红黑树的优势" tabindex="-1">红黑树的优势 <a class="header-anchor" href="#红黑树的优势" aria-label="Permalink to &quot;红黑树的优势&quot;">​</a></h4><p>红黑树的优势在于它是一个平衡二叉查找树，对于普通的二叉查找树（非平衡二叉查找树）在极端情况下可能会退化为链表的结构，例如，当我们依次插入 3、4、5、6、7、8 这些数据时，二叉树会退化为如下链表结构：</p>',7),T=p('<p>当二叉查找树退化为链表数据结构后，再进行元素的添加、删除以及查询时，它的时间复杂度就会退化为 O(n)；而如果使用红黑树的话，它就会将以上数据转化为平衡二叉查找树，这样就可以更加高效的添加、删除以及查询数据了，这就是红黑树的优势。</p><blockquote><p>小贴士：红黑树的高度近似 log2n，它的添加、删除以及查询数据的时间复杂度为 O(logn)。</p></blockquote><p>我们在表示算法的执行时间时，通常会使用大 O 表示法，常见的标识类型有以下这些：</p><ul><li><p>O(1)：常量时间，计算时间与数据量大小没关系；</p></li><li><p>O(n)：计算时间与数据量成线性正比关系；</p></li><li><p>O(logn)：计算时间与数据量成对数关系；</p></li></ul><h4 id="自平衡的红黑树" tabindex="-1">自平衡的红黑树 <a class="header-anchor" href="#自平衡的红黑树" aria-label="Permalink to &quot;自平衡的红黑树&quot;">​</a></h4><p>红黑树能够实现自平衡和保持红黑树特征的主要手段是：<strong>变色、左旋和右旋</strong>。</p><p><strong>左旋</strong>指的是围绕某个节点向左旋转，也就是逆时针旋转某个节点，使得父节点被自己的右子节点所替代，如下图所示：</p>',7),v=p(`<p>在 TreeMap 源码中左旋的实现源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 源码基于 JDK 1.8</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rotateLeft</span><span style="color:#E1E4E8;">(Entry</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">K,V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> p) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 右子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        Entry&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.right; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// p 节点的右子节点为 r 的左子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r.left;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// r 左子节点如果非空，r 左子节点的父节点设置为 p 节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (r.left </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            r.left.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p; </span></span>
<span class="line"><span style="color:#E1E4E8;">        r.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.parent; </span><span style="color:#6A737D;">// r 父节点等于 p 父节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// p 父节点如果为空，那么讲根节点设置为 r 节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p.parent </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// p 父节点的左子节点如果等于 p 节点，那么 p 父节点的左子节点设置 r 节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p.parent.left </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> p)</span></span>
<span class="line"><span style="color:#E1E4E8;">            p.parent.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">            p.parent.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r;</span></span>
<span class="line"><span style="color:#E1E4E8;">        r.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p; </span></span>
<span class="line"><span style="color:#E1E4E8;">        p.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 源码基于 JDK 1.8</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rotateLeft</span><span style="color:#24292E;">(Entry</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> p) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 右子节点</span></span>
<span class="line"><span style="color:#24292E;">        Entry&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.right; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// p 节点的右子节点为 r 的左子节点</span></span>
<span class="line"><span style="color:#24292E;">        p.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r.left;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// r 左子节点如果非空，r 左子节点的父节点设置为 p 节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (r.left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            r.left.parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p; </span></span>
<span class="line"><span style="color:#24292E;">        r.parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.parent; </span><span style="color:#6A737D;">// r 父节点等于 p 父节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// p 父节点如果为空，那么讲根节点设置为 r 节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p.parent </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// p 父节点的左子节点如果等于 p 节点，那么 p 父节点的左子节点设置 r 节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p.parent.left </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p)</span></span>
<span class="line"><span style="color:#24292E;">            p.parent.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">            p.parent.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r;</span></span>
<span class="line"><span style="color:#24292E;">        r.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p; </span></span>
<span class="line"><span style="color:#24292E;">        p.parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>左旋代码说明：在刚开始时，p 为父节点，r 为子节点，在左旋操作后，r 节点代替 p 节点的位置，p 节点成为 r 节点的左孩子，而 r 节点的左孩子成为 p 节点的右孩子。</p><p><strong>右旋</strong>指的是围绕某个节点向右旋转，也就是顺时针旋转某个节点，此时父节点会被自己的左子节点取代，如下图所示：</p>`,4),V=p(`<p>在 TreeMap 源码中右旋的实现源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rotateRight</span><span style="color:#E1E4E8;">(Entry</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">K,V</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> p) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Entry&lt;</span><span style="color:#F97583;">K</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.left;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// p 节点的左子节点为 l 的右子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l.right;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// l 节点的右子节点非空时，设置 l 的右子节点的父节点为 p</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (l.right </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) l.right.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">        l.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.parent;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// p 节点的父节点为空时，根节点设置成 l 节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p.parent </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// p 节点的父节点的右子节点等于 p 节点时，p 的父节点的右子节点设置为 l</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p.parent.right </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> p)</span></span>
<span class="line"><span style="color:#E1E4E8;">            p.parent.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> p.parent.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l;</span></span>
<span class="line"><span style="color:#E1E4E8;">        l.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rotateRight</span><span style="color:#24292E;">(Entry</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> p) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Entry&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.left;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// p 节点的左子节点为 l 的右子节点</span></span>
<span class="line"><span style="color:#24292E;">        p.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l.right;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// l 节点的右子节点非空时，设置 l 的右子节点的父节点为 p</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (l.right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) l.right.parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">        l.parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.parent;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// p 节点的父节点为空时，根节点设置成 l 节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p.parent </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// p 节点的父节点的右子节点等于 p 节点时，p 的父节点的右子节点设置为 l</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p.parent.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p)</span></span>
<span class="line"><span style="color:#24292E;">            p.parent.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> p.parent.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l;</span></span>
<span class="line"><span style="color:#24292E;">        l.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">        p.parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>右旋代码说明：在刚开始时，p 为父节点 l 为子节点，在右旋操作后，l 节点代替 p 节点，p 节点成为 l 节点的右孩子，l 节点的右孩子成为 p 节点的左孩子。</p><p>对于红黑树来说，如果当前节点的左、右子节点均为红色时，因为需要满足红黑树定义的第四条特征，所以需要执行变色操作，如下图所示：</p>`,4),b=s("p",null,"由于篇幅有限，我这里只能带你简单地了解一下红黑树和二叉树的基本概念，想要深入地学习更多的内容，推荐查阅《算法》（第四版）和《算法导论》等书籍。",-1),q=s("h3",{id:"小结",tabindex:"-1"},[l("小结 "),s("a",{class:"header-anchor",href:"#小结","aria-label":'Permalink to "小结"'},"​")],-1),k=s("p",null,"我们本课时介绍了二叉树、二叉查找树及红黑树的概念，还有红黑树的五个特性。普通二叉查找树在特殊情况下会退化成链表的数据结构，因此操作和查询的时间复杂度变成了 O(n)，而红黑树可以实现自平衡，因此它的操作（插入、删除）和查找的时间复杂度都是 O(logn)，效率更高更稳定，红黑树保证平衡的手段有三个：变色、左旋和右旋。",-1);function B(S,P,I,N,O,M){const n=e("Image");return t(),r("div",null,[E,y,i,_,A,a(n,{alt:"image",src:"https://s0.lgstatic.com/i/image/M00/21/37/CgqCHl7p1giALPJdAAA9HlzQhz8713.png"}),g,a(n,{alt:"image",src:"https://s0.lgstatic.com/i/image/M00/21/38/CgqCHl7p1o2AD2B1AABAMGFwUAs699.png"}),h,d,D,F,u,a(n,{alt:"image",src:"https://s0.lgstatic.com/i/image/M00/21/2C/Ciqc1F7p1piAYHGAAABOcycxnUY851.png"}),C,a(n,{alt:"image",src:"https://s0.lgstatic.com/i/image/M00/21/38/CgqCHl7p1qCAYIL5AABORFVaJ_E571.png"}),f,a(n,{alt:"image",src:"https://s0.lgstatic.com/i/image/M00/21/38/CgqCHl7p1q2ANRAbAADvqVSROHE030.png"}),m,a(n,{alt:"image",src:"https://s0.lgstatic.com/i/image/M00/21/2C/Ciqc1F7p1raAA54FAABNRmDFu94908.png"}),T,a(n,{alt:"image",src:"https://s0.lgstatic.com/i/image/M00/21/2D/Ciqc1F7p1sCAAVsAAACkC6fB4TE240.png"}),v,a(n,{alt:"image",src:"https://s0.lgstatic.com/i/image/M00/21/2D/Ciqc1F7p1suAH4G9AACoLoWsW64383.png"}),V,a(n,{alt:"image",src:"https://s0.lgstatic.com/i/image/M00/21/38/CgqCHl7p1tOAGG5hAABjt5_gQjg041.png"}),b,q,k])}const K=o(c,[["render",B]]);export{x as __pageData,K as default};
