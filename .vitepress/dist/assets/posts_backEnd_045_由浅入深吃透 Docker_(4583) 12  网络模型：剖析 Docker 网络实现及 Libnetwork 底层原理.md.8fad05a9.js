import{_ as o,j as e,o as t,g as r,k as l,Q as p,s,h as n}from"./chunks/framework.4e7d56ce.js";const g=JSON.parse('{"title":"容器网络发展史 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/045_由浅入深吃透 Docker/(4583) 12  网络模型：剖析 Docker 网络实现及 Libnetwork 底层原理.md","filePath":"posts/backEnd/045_由浅入深吃透 Docker/(4583) 12  网络模型：剖析 Docker 网络实现及 Libnetwork 底层原理.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/045_由浅入深吃透 Docker/(4583) 12  网络模型：剖析 Docker 网络实现及 Libnetwork 底层原理.md"},y=p(`<p>前几课时，我介绍了 Linux 的 Namespace 和 Cgroups 技术，利用这两项技术可以实现各种资源的隔离和主机资源的限制，让我们的容器可以像一台虚拟机一样。但这时我们的容器就像一台未联网的电脑，不能被外部访问到，也不能主动与外部通信，这样的容器只能做一些离线的处理任务，无法通过外部访问。所以今天这一讲，我将介绍 Docker 网络相关的知识，使 Docker 容器接通网络。</p><h3 id="容器网络发展史" tabindex="-1">容器网络发展史 <a class="header-anchor" href="#容器网络发展史" aria-label="Permalink to &quot;容器网络发展史&quot;">​</a></h3><p>提起 Docker 网络，我们不得不从容器战争说起。Docker 从 2013 年诞生，到后来逐渐成为了容器的代名词，然而 Docker 的野心也不止于此，它还想在更多的领域独占鳌头，比如制定容器的网络和存储标准。</p><p>于是 Docker 从 1.7 版本开始，便把网络和存储从 Docker 中正式以插件的形式剥离开来，并且分别为其定义了标准，Docker 定义的网络模型标准称之为 CNM (Container Network Model) 。</p><blockquote><p>Docker 推出 CNM 的同时，CoreOS 推出了 CNI（Container Network Interfac）。起初，以 Kubernetes 为代表的容器编排阵营考虑过使用 CNM 作为容器的网络标准，但是后来由于很多技术和非技术原因（如果你对详细原因感兴趣，可以参考这篇博客），Kubernetes 决定支持 CoreOS 推出的容器网络标准 CNI。</p></blockquote><p>从此，容器的网络标准便分为两大阵营，一个是以 Docker 公司为代表的 CNM，另一个便是以 Google、Kubernetes、CoreOS 为代表的 CNI 网络标准。</p><h3 id="cnm" tabindex="-1">CNM <a class="header-anchor" href="#cnm" aria-label="Permalink to &quot;CNM&quot;">​</a></h3><p>CNM (Container Network Model) 是 Docker 发布的容器网络标准，意在规范和指定容器网络发展标准，CNM 抽象了容器的网络接口 ，使得只要满足 CNM 接口的网络方案都可以接入到 Docker 容器网络，更好地满足了用户网络模型多样化的需求。</p><p>CNM 只是定义了网络标准，对于底层的具体实现并不太关心，这样便解耦了容器和网络，使得容器的网络模型更加灵活。</p><p>CNM 定义的网络标准包含三个重要元素。</p><ul><li><p><strong>沙箱（Sandbox）</strong> ：沙箱代表了一系列网络堆栈的配置，其中包含路由信息、网络接口等网络资源的管理，沙箱的实现通常是 Linux 的 Net Namespace，但也可以通过其他技术来实现，比如 <a href="https://zh.wikipedia.org/wiki/FreeBSD_jail" target="_blank" rel="noreferrer">FreeBSD jail</a> 等。</p></li><li><p><strong>接入点（Endpoint）</strong>：接入点将沙箱连接到网络中，代表容器的网络接口，接入点的实现通常是 Linux 的 veth 设备对。</p></li><li><p><strong>网络（Network</strong>）：网络是一组可以互相通信的接入点，它将多接入点组成一个子网，并且多个接入点之间可以相互通信。</p></li></ul><p>CNM 的三个要素基本抽象了所有网络模型，使得网络模型的开发更加规范。</p><p>为了更好地构建容器网络标准，Docker 团队把网络功能从 Docker 中剥离出来，成为独立的项目 libnetwork，它通过插件的形式为 Docker 提供网络功能。Libnetwork 是开源的，使用 Golang 编写，它完全遵循 CNM 网络规范，是 CNM 的官方实现。Libnetwork 的工作流程也是完全围绕 CNM 的三个要素进行的，下面我们来详细了解一下 Libnetwork 是如何围绕 CNM 的三要素工作的。</p><h3 id="libnetwork-的工作流程" tabindex="-1">Libnetwork 的工作流程 <a class="header-anchor" href="#libnetwork-的工作流程" aria-label="Permalink to &quot;Libnetwork 的工作流程&quot;">​</a></h3><p>Libnetwork 是 Docker 启动容器时，用来为 Docker 容器提供网络接入功能的插件，它可以让 Docker 容器顺利接入网络，实现主机和容器网络的互通。下面，我们来详细了解一下 Libnetwork 是如何为 Docker 容器提供网络的。</p><p>第一步：Docker 通过调用 libnetwork.New 函数来创建 NetworkController 实例。NetworkController 是一个接口类型，提供了各种接口，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type NetworkController interface {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 创建一个新的网络。 options 参数用于指定特性类型的网络选项。</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">NewNetwork</span><span style="color:#E1E4E8;">(networkType, name string, id string, options ...NetworkOption) (Network, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// ... 此次省略部分接口</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type NetworkController interface {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 创建一个新的网络。 options 参数用于指定特性类型的网络选项。</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">NewNetwork</span><span style="color:#24292E;">(networkType, name string, id string, options ...NetworkOption) (Network, error)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// ... 此次省略部分接口</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步：通过调用 NewNetwork 函数创建指定名称和类型的 Network，其中 Network 也是接口类型，代码如下:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type Network interface {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 为该网络创建一个具有唯一指定名称的接入点（Endpoint）</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">CreateEndpoint</span><span style="color:#E1E4E8;">(name string, options ...EndpointOption) (Endpoint, error)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 删除网络</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">Delete</span><span style="color:#E1E4E8;">() error</span></span>
<span class="line"><span style="color:#6A737D;">// ... 此次省略部分接口</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type Network interface {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 为该网络创建一个具有唯一指定名称的接入点（Endpoint）</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">CreateEndpoint</span><span style="color:#24292E;">(name string, options ...EndpointOption) (Endpoint, error)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 删除网络</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">Delete</span><span style="color:#24292E;">() error</span></span>
<span class="line"><span style="color:#6A737D;">// ... 此次省略部分接口</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步：通过调用 CreateEndpoint 来创建接入点（Endpoint）。在 CreateEndpoint 函数中为容器分配了 IP 和网卡接口。其中 Endpoint 也是接口类型，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Endpoint 表示网络和沙箱之间的逻辑连接。</span></span>
<span class="line"><span style="color:#E1E4E8;">type Endpoint interface {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 将沙箱连接到接入点，并将为接入点分配的网络资源填充到沙箱中。</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// the network resources allocated for the endpoint.</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">Join</span><span style="color:#E1E4E8;">(sandbox Sandbox, options ...EndpointOption) error</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 删除接入点</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">Delete</span><span style="color:#E1E4E8;">(force bool) error</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// ... 此次省略部分接口</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Endpoint 表示网络和沙箱之间的逻辑连接。</span></span>
<span class="line"><span style="color:#24292E;">type Endpoint interface {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 将沙箱连接到接入点，并将为接入点分配的网络资源填充到沙箱中。</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// the network resources allocated for the endpoint.</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">Join</span><span style="color:#24292E;">(sandbox Sandbox, options ...EndpointOption) error</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 删除接入点</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">Delete</span><span style="color:#24292E;">(force bool) error</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// ... 此次省略部分接口</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第四步：调用 NewSandbox 来创建容器沙箱，主要是初始化 Namespace 相关的资源。</p><p>第五步：调用 Endpoint 的 Join 函数将沙箱和网络接入点关联起来，此时容器就加入了 Docker 网络并具备了网络访问能力。</p><p>Libnetwork 基于以上工作流程可以构建出多种网络模式，以满足我们的在不同场景下的需求，下面我们来详细了解一下 Libnetwork 提供的常见的四种网络模式。</p><h3 id="libnetwork-常见网络模式" tabindex="-1">Libnetwork 常见网络模式 <a class="header-anchor" href="#libnetwork-常见网络模式" aria-label="Permalink to &quot;Libnetwork 常见网络模式&quot;">​</a></h3><p>Libnetwork 比较典型的网络模式主要有四种，这四种网络模式基本满足了我们单机容器的所有场景。</p><ol><li><p>null 空网络模式：可以帮助我们构建一个没有网络接入的容器环境，以保障数据安全。</p></li><li><p>bridge 桥接模式：可以打通容器与容器间网络通信的需求。</p></li><li><p>host 主机网络模式：可以让容器内的进程共享主机网络，从而监听或修改主机网络。</p></li><li><p>container 网络模式：可以将两个容器放在同一个网络命名空间内，让两个业务通过 localhost 即可实现访问。</p></li></ol><p>下面我们对 libnetwork 的四种网络模式逐一讲解：</p><h4 id="_1-null-空网络模式" tabindex="-1">（1）null 空网络模式 <a class="header-anchor" href="#_1-null-空网络模式" aria-label="Permalink to &quot;（1）null 空网络模式&quot;">​</a></h4><p>有时候，我们需要处理一些保密数据，出于安全考虑，我们需要一个隔离的网络环境执行一些纯计算任务。这时候 null 网络模式就派上用场了，这时候我们的容器就像一个没有联网的电脑，处于一个相对较安全的环境，确保我们的数据不被他人从网络窃取。</p><p>使用 Docker 创建 null 空网络模式的容器时，容器拥有自己独立的 Net Namespace，但是此时的容器并没有任何网络配置。在这种模式下，Docker 除了为容器创建了 Net Namespace 外，没有创建任何网卡接口、IP 地址、路由等网络配置。我们可以一起来验证下。</p><p>我们使用 <code>docker run</code> 命令启动时，添加 --net=none 参数启动一个空网络模式的容器，命令如下：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker run </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">net</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">none </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">it busybox</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> #</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker run </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">net</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">none </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">it busybox</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;"> #</span></span></code></pre></div><p>容器启动后，我们使用 <code>ifconfig</code> 命令查看一下容器内网络配置信息：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> # ifconfig</span></span>
<span class="line"><span style="color:#E1E4E8;">lo        Link encap:Local Loopback</span></span>
<span class="line"><span style="color:#E1E4E8;">          inet addr:</span><span style="color:#FDAEB7;font-style:italic;">127.0.0.1</span><span style="color:#E1E4E8;">  Mask:</span><span style="color:#FDAEB7;font-style:italic;">255.0.0.0</span></span>
<span class="line"><span style="color:#E1E4E8;">          UP LOOPBACK RUNNING  MTU:</span><span style="color:#79B8FF;">65536</span><span style="color:#E1E4E8;">  Metric:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">          RX packets:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> frame:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">          TX packets:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> carrier:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">          collisions:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> txqueuelen:</span><span style="color:#79B8FF;">1000</span></span>
<span class="line"><span style="color:#E1E4E8;">          RX bytes:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> B)  TX bytes:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> B)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;"> # ifconfig</span></span>
<span class="line"><span style="color:#24292E;">lo        Link encap:Local Loopback</span></span>
<span class="line"><span style="color:#24292E;">          inet addr:</span><span style="color:#B31D28;font-style:italic;">127.0.0.1</span><span style="color:#24292E;">  Mask:</span><span style="color:#B31D28;font-style:italic;">255.0.0.0</span></span>
<span class="line"><span style="color:#24292E;">          UP LOOPBACK RUNNING  MTU:</span><span style="color:#005CC5;">65536</span><span style="color:#24292E;">  Metric:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">          RX packets:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> frame:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">          TX packets:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> carrier:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">          collisions:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> txqueuelen:</span><span style="color:#005CC5;">1000</span></span>
<span class="line"><span style="color:#24292E;">          RX bytes:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> B)  TX bytes:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> B)</span></span></code></pre></div><p>可以看到容器内除了 Net Namespace 自带的 lo 网卡并没有创建任何虚拟网卡，然后我们再使用 <code> route -n</code> 命令查看一下容器内的路由信息:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> # route </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n</span></span>
<span class="line"><span style="color:#E1E4E8;">Kernel IP routing table</span></span>
<span class="line"><span style="color:#E1E4E8;">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;"> # route </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n</span></span>
<span class="line"><span style="color:#24292E;">Kernel IP routing table</span></span>
<span class="line"><span style="color:#24292E;">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span></span></code></pre></div><p>可以看到，容器内也并没有配置任何路由信息。</p><h4 id="_2-bridge-桥接模式" tabindex="-1">（2）bridge 桥接模式 <a class="header-anchor" href="#_2-bridge-桥接模式" aria-label="Permalink to &quot;（2）bridge 桥接模式&quot;">​</a></h4><p>Docker 的 bridge 网络是启动容器时默认的网络模式，使用 bridge 网络可以实现容器与容器的互通，可以从一个容器直接通过容器 IP 访问到另外一个容器。同时使用 bridge 网络可以实现主机与容器的互通，我们在容器内启动的业务，可以从主机直接请求。</p><p>在介绍 Docker 的 bridge 桥接模式前，我们需要先了解一下 Linux 的 veth 和 bridge 相关的技术，因为 Docker 的 bridge 模式正是由这两种技术实现的。</p><ul><li>Linux veth</li></ul><p>veth 是 Linux 中的虚拟设备接口，veth 都是成对出现的，它在容器中，通常充当一个桥梁。veth 可以用来连接虚拟网络设备，例如 veth 可以用来连通两个 Net Namespace，从而使得两个 Net Namespace 之间可以互相访问。</p><ul><li>Linux bridge</li></ul><p>Linux bridge 是一个虚拟设备，是用来连接网络的设备，相当于物理网络环境中的交换机。Linux bridge 可以用来转发两个 Net Namespace 内的流量。</p><ul><li>veth 与 bridge 的关系</li></ul>`,46),E=p(`<p>通过图 1 ，我们可以看到，bridge 就像一台交换机，而 veth 就像一根网线，通过交换机和网线可以把两个不同 Net Namespace 的容器连通，使得它们可以互相通信。</p><p>Docker 的 bridge 模式也是这种原理。Docker 启动时，libnetwork 会在主机上创建 docker0 网桥，docker0 网桥就相当于图 1 中的交换机，而 Docker 创建出的 brige 模式的容器则都会连接 docker0 上，从而实现网络互通。</p><p><strong>bridge 桥接模式是 Docker 的默认网络模式，当我们创建容器时不指定任何网络模式，Docker 启动容器默认的网络模式为 bridge。</strong></p><h4 id="_3-host-主机网络模式" tabindex="-1">（3）host 主机网络模式 <a class="header-anchor" href="#_3-host-主机网络模式" aria-label="Permalink to &quot;（3）host 主机网络模式&quot;">​</a></h4><p>容器内的网络并不是希望永远跟主机是隔离的，有些基础业务需要创建或更新主机的网络配置，我们的程序必须以主机网络模式运行才能够修改主机网络，这时候就需要用到 Docker 的 host 主机网络模式。</p><p>使用 host 主机网络模式时：</p><ul><li><p>libnetwork 不会为容器创建新的网络配置和 Net Namespace。</p></li><li><p>Docker 容器中的进程直接共享主机的网络配置，可以直接使用主机的网络信息，此时，在容器内监听的端口，也将直接占用到主机的端口。</p></li><li><p>除了网络共享主机的网络外，其他的包括进程、文件系统、主机名等都是与主机隔离的。</p></li></ul><p>host 主机网络模式通常适用于想要使用主机网络，但又不想把运行环境直接安装到主机上的场景中。例如我想在主机上运行一个 busybox 服务，但又不想直接把 busybox 安装到主机上污染主机环境，此时我可以使用以下命令启动一个主机网络模式的 busybox 镜像：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">it </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">net</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">host busybox</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> #</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">it </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">net</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">host busybox</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;"> #</span></span></code></pre></div><p>然后我们使用<code>ip a</code> 命令查看一下容器内的网络环境：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> # ip a</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">: lo: </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">LOOPBACK,UP,LOWER\\_UP</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> mtu </span><span style="color:#79B8FF;">65536</span><span style="color:#E1E4E8;"> qdisc noqueue qlen </span><span style="color:#79B8FF;">1000</span></span>
<span class="line"><span style="color:#E1E4E8;">link</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">loopback </span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> brd </span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">inet </span><span style="color:#FDAEB7;font-style:italic;">127.0.0.1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> scope host lo</span></span>
<span class="line"><span style="color:#E1E4E8;">valid\\_lft forever preferred\\_lft forever</span></span>
<span class="line"><span style="color:#E1E4E8;">inet6 ::</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> scope host</span></span>
<span class="line"><span style="color:#E1E4E8;">valid\\_lft forever preferred\\_lft forever</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">: eth0: </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">BROADCAST,MULTICAST,UP,LOWER\\_UP</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> mtu </span><span style="color:#79B8FF;">1500</span><span style="color:#E1E4E8;"> qdisc pfifo\\_fast qlen </span><span style="color:#79B8FF;">1000</span></span>
<span class="line"><span style="color:#E1E4E8;">link</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ether </span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">:b0:</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span><span style="color:#FDAEB7;font-style:italic;">0c</span><span style="color:#E1E4E8;"> brd ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#E1E4E8;">inet </span><span style="color:#FDAEB7;font-style:italic;">172.20.1.11</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> brd </span><span style="color:#FDAEB7;font-style:italic;">172.20.1.255</span><span style="color:#E1E4E8;"> scope global dynamic eth0</span></span>
<span class="line"><span style="color:#E1E4E8;">valid\\_lft </span><span style="color:#FDAEB7;font-style:italic;">85785286sec</span><span style="color:#E1E4E8;"> preferred\\_lft </span><span style="color:#FDAEB7;font-style:italic;">85785286sec</span></span>
<span class="line"><span style="color:#E1E4E8;">inet6 fe80::</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">:b0ff:fe14:</span><span style="color:#FDAEB7;font-style:italic;">10c</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;"> scope link</span></span>
<span class="line"><span style="color:#E1E4E8;">valid\\_lft forever preferred\\_lft forever</span></span>
<span class="line"><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">: docker0: \\</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">NO</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">CARRIER,BROADCAST,MULTICAST,UP</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> mtu </span><span style="color:#79B8FF;">1500</span><span style="color:#E1E4E8;"> qdisc noqueue</span></span>
<span class="line"><span style="color:#E1E4E8;">link</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ether </span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">82</span><span style="color:#E1E4E8;">:</span><span style="color:#FDAEB7;font-style:italic;">8d</span><span style="color:#E1E4E8;">:a0:df brd ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#E1E4E8;">inet </span><span style="color:#FDAEB7;font-style:italic;">172.17.0.1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> scope global docker0</span></span>
<span class="line"><span style="color:#E1E4E8;">valid\\_lft forever preferred\\_lft forever</span></span>
<span class="line"><span style="color:#E1E4E8;">inet6 fe80::</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">:</span><span style="color:#FDAEB7;font-style:italic;">82ff</span><span style="color:#E1E4E8;">:fe8d:a0df</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">64</span><span style="color:#E1E4E8;"> scope link</span></span>
<span class="line"><span style="color:#E1E4E8;">valid\\_lft forever preferred\\_lft forever</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;"> # ip a</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">: lo: </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">LOOPBACK,UP,LOWER\\_UP</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mtu </span><span style="color:#005CC5;">65536</span><span style="color:#24292E;"> qdisc noqueue qlen </span><span style="color:#005CC5;">1000</span></span>
<span class="line"><span style="color:#24292E;">link</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">loopback </span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> brd </span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">inet </span><span style="color:#B31D28;font-style:italic;">127.0.0.1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> scope host lo</span></span>
<span class="line"><span style="color:#24292E;">valid\\_lft forever preferred\\_lft forever</span></span>
<span class="line"><span style="color:#24292E;">inet6 ::</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> scope host</span></span>
<span class="line"><span style="color:#24292E;">valid\\_lft forever preferred\\_lft forever</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">: eth0: </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">BROADCAST,MULTICAST,UP,LOWER\\_UP</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mtu </span><span style="color:#005CC5;">1500</span><span style="color:#24292E;"> qdisc pfifo\\_fast qlen </span><span style="color:#005CC5;">1000</span></span>
<span class="line"><span style="color:#24292E;">link</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ether </span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">:b0:</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span><span style="color:#B31D28;font-style:italic;">0c</span><span style="color:#24292E;"> brd ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#24292E;">inet </span><span style="color:#B31D28;font-style:italic;">172.20.1.11</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> brd </span><span style="color:#B31D28;font-style:italic;">172.20.1.255</span><span style="color:#24292E;"> scope global dynamic eth0</span></span>
<span class="line"><span style="color:#24292E;">valid\\_lft </span><span style="color:#B31D28;font-style:italic;">85785286sec</span><span style="color:#24292E;"> preferred\\_lft </span><span style="color:#B31D28;font-style:italic;">85785286sec</span></span>
<span class="line"><span style="color:#24292E;">inet6 fe80::</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">:b0ff:fe14:</span><span style="color:#B31D28;font-style:italic;">10c</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">64</span><span style="color:#24292E;"> scope link</span></span>
<span class="line"><span style="color:#24292E;">valid\\_lft forever preferred\\_lft forever</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;">: docker0: \\</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">NO</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">CARRIER,BROADCAST,MULTICAST,UP</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mtu </span><span style="color:#005CC5;">1500</span><span style="color:#24292E;"> qdisc noqueue</span></span>
<span class="line"><span style="color:#24292E;">link</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ether </span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">82</span><span style="color:#24292E;">:</span><span style="color:#B31D28;font-style:italic;">8d</span><span style="color:#24292E;">:a0:df brd ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#24292E;">inet </span><span style="color:#B31D28;font-style:italic;">172.17.0.1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> scope global docker0</span></span>
<span class="line"><span style="color:#24292E;">valid\\_lft forever preferred\\_lft forever</span></span>
<span class="line"><span style="color:#24292E;">inet6 fe80::</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">:</span><span style="color:#B31D28;font-style:italic;">82ff</span><span style="color:#24292E;">:fe8d:a0df</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">64</span><span style="color:#24292E;"> scope link</span></span>
<span class="line"><span style="color:#24292E;">valid\\_lft forever preferred\\_lft forever</span></span></code></pre></div><p>可以看到容器内的网络环境与主机完全一致。</p><h4 id="_4-container-网络模式" tabindex="-1">（4）container 网络模式 <a class="header-anchor" href="#_4-container-网络模式" aria-label="Permalink to &quot;（4）container 网络模式&quot;">​</a></h4><p>container 网络模式允许一个容器共享另一个容器的网络命名空间。当两个容器需要共享网络，但其他资源仍然需要隔离时就可以使用 container 网络模式，例如我们开发了一个 http 服务，但又想使用 nginx 的一些特性，让 nginx 代理外部的请求然后转发给自己的业务，这时我们使用 container 网络模式将自己开发的服务和 nginx 服务部署到同一个网络命名空间中。</p><p>下面我举例说明。首先我们使用以下命令启动一个 busybox1 容器：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">busybox1 busybox sleep </span><span style="color:#79B8FF;">3600</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">busybox1 busybox sleep </span><span style="color:#005CC5;">3600</span></span></code></pre></div><p>然后我们使用 <code>docker exec</code> 命令进入到 centos 容器中查看一下网络配置：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker exec </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">it busybox1 sh</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> # ifconfig</span></span>
<span class="line"><span style="color:#E1E4E8;">eth0 Link encap:Ethernet HWaddr </span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">:AC:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">inet addr:</span><span style="color:#FDAEB7;font-style:italic;">172.17.0.2</span><span style="color:#E1E4E8;"> Bcast:</span><span style="color:#FDAEB7;font-style:italic;">172.17.255.255</span><span style="color:#E1E4E8;"> Mask:</span><span style="color:#FDAEB7;font-style:italic;">255.255.0.0</span></span>
<span class="line"><span style="color:#E1E4E8;">UP BROADCAST RUNNING MULTICAST MTU:</span><span style="color:#79B8FF;">1500</span><span style="color:#E1E4E8;"> Metric:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">RX packets:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> frame:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">TX packets:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> carrier:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">collisions:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> txqueuelen:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">RX bytes:</span><span style="color:#79B8FF;">906</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">906.0</span><span style="color:#E1E4E8;"> B) TX bytes:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> B)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">lo Link encap:Local Loopback</span></span>
<span class="line"><span style="color:#E1E4E8;">inet addr:</span><span style="color:#FDAEB7;font-style:italic;">127.0.0.1</span><span style="color:#E1E4E8;"> Mask:</span><span style="color:#FDAEB7;font-style:italic;">255.0.0.0</span></span>
<span class="line"><span style="color:#E1E4E8;">UP LOOPBACK RUNNING MTU:</span><span style="color:#79B8FF;">65536</span><span style="color:#E1E4E8;"> Metric:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">RX packets:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> frame:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">TX packets:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> carrier:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">collisions:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> txqueuelen:</span><span style="color:#79B8FF;">1000</span></span>
<span class="line"><span style="color:#E1E4E8;">RX bytes:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> B) TX bytes:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> B)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker exec </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">it busybox1 sh</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;"> # ifconfig</span></span>
<span class="line"><span style="color:#24292E;">eth0 Link encap:Ethernet HWaddr </span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">:AC:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">inet addr:</span><span style="color:#B31D28;font-style:italic;">172.17.0.2</span><span style="color:#24292E;"> Bcast:</span><span style="color:#B31D28;font-style:italic;">172.17.255.255</span><span style="color:#24292E;"> Mask:</span><span style="color:#B31D28;font-style:italic;">255.255.0.0</span></span>
<span class="line"><span style="color:#24292E;">UP BROADCAST RUNNING MULTICAST MTU:</span><span style="color:#005CC5;">1500</span><span style="color:#24292E;"> Metric:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">RX packets:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> frame:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">TX packets:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> carrier:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">collisions:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> txqueuelen:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">RX bytes:</span><span style="color:#005CC5;">906</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">906.0</span><span style="color:#24292E;"> B) TX bytes:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> B)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">lo Link encap:Local Loopback</span></span>
<span class="line"><span style="color:#24292E;">inet addr:</span><span style="color:#B31D28;font-style:italic;">127.0.0.1</span><span style="color:#24292E;"> Mask:</span><span style="color:#B31D28;font-style:italic;">255.0.0.0</span></span>
<span class="line"><span style="color:#24292E;">UP LOOPBACK RUNNING MTU:</span><span style="color:#005CC5;">65536</span><span style="color:#24292E;"> Metric:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">RX packets:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> frame:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">TX packets:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> carrier:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">collisions:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> txqueuelen:</span><span style="color:#005CC5;">1000</span></span>
<span class="line"><span style="color:#24292E;">RX bytes:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> B) TX bytes:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> B)</span></span></code></pre></div><p>可以看到 busybox1 的 IP 地址为 172.17.0.2。</p><p>然后我们新打开一个命令行窗口，再启动一个 busybox2 容器，通过 container 网络模式连接到 busybox1 的网络，命令如下：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">it </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">net</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">container:busybox1 </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">busybox2 busybox sh</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> #</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">it </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">net</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">container:busybox1 </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">busybox2 busybox sh</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;"> #</span></span></code></pre></div><p>在 busybox2 容器内同样使用 ifconfig 命令查看一下容器内的网络配置：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> # ifconfig</span></span>
<span class="line"><span style="color:#E1E4E8;">eth0 Link encap:Ethernet HWaddr </span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">:AC:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">0</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">inet addr:</span><span style="color:#FDAEB7;font-style:italic;">172.17.0.2</span><span style="color:#E1E4E8;"> Bcast:</span><span style="color:#FDAEB7;font-style:italic;">172.17.255.255</span><span style="color:#E1E4E8;"> Mask:</span><span style="color:#FDAEB7;font-style:italic;">255.255.0.0</span></span>
<span class="line"><span style="color:#E1E4E8;">UP BROADCAST RUNNING MULTICAST MTU:</span><span style="color:#79B8FF;">1500</span><span style="color:#E1E4E8;"> Metric:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">RX packets:</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> frame:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">TX packets:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> carrier:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">collisions:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> txqueuelen:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">RX bytes:</span><span style="color:#79B8FF;">1116</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;"> KiB) TX bytes:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> B)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">lo Link encap:Local Loopback</span></span>
<span class="line"><span style="color:#E1E4E8;">inet addr:</span><span style="color:#FDAEB7;font-style:italic;">127.0.0.1</span><span style="color:#E1E4E8;"> Mask:</span><span style="color:#FDAEB7;font-style:italic;">255.0.0.0</span></span>
<span class="line"><span style="color:#E1E4E8;">UP LOOPBACK RUNNING MTU:</span><span style="color:#79B8FF;">65536</span><span style="color:#E1E4E8;"> Metric:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">RX packets:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> frame:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">TX packets:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> errors:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> dropped:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> overruns:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> carrier:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">collisions:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> txqueuelen:</span><span style="color:#79B8FF;">1000</span></span>
<span class="line"><span style="color:#E1E4E8;">RX bytes:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> B) TX bytes:</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> B)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;"> # ifconfig</span></span>
<span class="line"><span style="color:#24292E;">eth0 Link encap:Ethernet HWaddr </span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">:AC:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">inet addr:</span><span style="color:#B31D28;font-style:italic;">172.17.0.2</span><span style="color:#24292E;"> Bcast:</span><span style="color:#B31D28;font-style:italic;">172.17.255.255</span><span style="color:#24292E;"> Mask:</span><span style="color:#B31D28;font-style:italic;">255.255.0.0</span></span>
<span class="line"><span style="color:#24292E;">UP BROADCAST RUNNING MULTICAST MTU:</span><span style="color:#005CC5;">1500</span><span style="color:#24292E;"> Metric:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">RX packets:</span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> frame:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">TX packets:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> carrier:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">collisions:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> txqueuelen:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">RX bytes:</span><span style="color:#005CC5;">1116</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> KiB) TX bytes:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> B)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">lo Link encap:Local Loopback</span></span>
<span class="line"><span style="color:#24292E;">inet addr:</span><span style="color:#B31D28;font-style:italic;">127.0.0.1</span><span style="color:#24292E;"> Mask:</span><span style="color:#B31D28;font-style:italic;">255.0.0.0</span></span>
<span class="line"><span style="color:#24292E;">UP LOOPBACK RUNNING MTU:</span><span style="color:#005CC5;">65536</span><span style="color:#24292E;"> Metric:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">RX packets:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> frame:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">TX packets:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> errors:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> dropped:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> overruns:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> carrier:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">collisions:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> txqueuelen:</span><span style="color:#005CC5;">1000</span></span>
<span class="line"><span style="color:#24292E;">RX bytes:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> B) TX bytes:</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> B)</span></span></code></pre></div><p>可以看到 busybox2 容器的网络 IP 也为 172.17.0.2，与 busybox1 的网络一致。</p><p>以上就是 Libnetwork 常见的四种网络模式，它们的作用及业务场景帮你总结如下：</p>`,25),i=s("h3",{id:"结语",tabindex:"-1"},[n("结语 "),s("a",{class:"header-anchor",href:"#结语","aria-label":'Permalink to "结语"'},"​")],-1),d=s("p",null,[n("我上面有说到 Libnetwork 的工作流程是完全围绕 CNM 的三个要素进行的，CNM 制定标准之初不仅仅是为了单台主机上的容器互通，更多的是为了定义跨主机之间的容器通信标准。但是后来由于 Kubernetes 逐渐成为了容器编排的标准，而 Kubernetes 最终选择了 CNI 作为容器网络的定义标准（具体原因可以参考"),s("a",{href:"https://kubernetes.io/blog/2016/01/why-kubernetes-doesnt-use-libnetwork/",target:"_blank",rel:"noreferrer"},"这里"),n("），很遗憾 CNM 最终没有成为跨主机容器通信的标准，但是CNM 却为推动容器网络标准做出了重大贡献，且 Libnetwork 也是 Docker 的默认网络实现，提供了单独使用 Docker 容器时的多种网络接入功能。")],-1),C=s("p",null,"那你知道 libnetwork 除了我讲的四种网络模式外，还有什么网络模式吗？思考后，把你的想法写在留言区。",-1);function F(k,b,f,B,u,h){const a=e("Image");return t(),r("div",null,[y,l(a,{alt:"Lark20200929-162853.png",src:"https://s0.lgstatic.com/i/image/M00/59/ED/Ciqc1F9y8IKAa-1NAABjDM-2kBk665.png"}),E,l(a,{alt:"Lark20200929-162901.png",src:"https://s0.lgstatic.com/i/image/M00/59/ED/Ciqc1F9y8HGAaH1iAAClKDUq5FY736.png"}),i,d,C])}const A=o(c,[["render",F]]);export{g as __pageData,A as default};
