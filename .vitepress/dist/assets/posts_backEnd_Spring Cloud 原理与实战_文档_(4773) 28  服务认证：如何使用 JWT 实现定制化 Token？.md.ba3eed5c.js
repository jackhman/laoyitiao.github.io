import{_ as l,j as o,o as e,g as t,k as a,h as p,Q as s}from"./chunks/framework.4e7d56ce.js";const k=JSON.parse('{"title":"28服务认证：如何使用JWT实现定制化Token？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4773) 28  服务认证：如何使用 JWT 实现定制化 Token？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4773) 28  服务认证：如何使用 JWT 实现定制化 Token？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4773) 28  服务认证：如何使用 JWT 实现定制化 Token？.md"},r=s('<h1 id="_28服务认证-如何使用jwt实现定制化token" tabindex="-1">28服务认证：如何使用JWT实现定制化Token？ <a class="header-anchor" href="#_28服务认证-如何使用jwt实现定制化token" aria-label="Permalink to &quot;28服务认证：如何使用JWT实现定制化Token？&quot;">​</a></h1><p>在上一课时中，我们详细介绍了在微服务架构中，如何使用 Token 对服务的访问过程进行权限控制，这里的 Token 是类似&quot;b7c2c7e0-0223-40e2-911d-eff82d125b80&quot;的一种字符串结构。可能你会问，这个字符串中能包含哪些内容呢？是不是所有的 Token 都是这样的结构吗？事实上，在 OAuth2 协议中，并没有对 Token 具体的组成结构有明确的规定。为了解决 Token 的标准化问题，就诞生了今天我们要介绍的 JWT。</p><h3 id="什么是-jwt" tabindex="-1">什么是 JWT？ <a class="header-anchor" href="#什么是-jwt" aria-label="Permalink to &quot;什么是 JWT？&quot;">​</a></h3><p>JWT 的全称是 JSON Web Token，所以它本质上就是一种基于 JSON 表示的 Token。JWT 的设计目标就是为 OAuth2 中所使用的 Token 提供一种标准结构，所以它经常与 OAuth2 协议集成在一起使用。</p><p>从结构上讲，JWT 本身是由三段信息构成的，第一段为头部（Header），第二段为有效负载（Payload），第三段为签名（Signature），如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">header. payload. signature</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">header. payload. signature</span></span></code></pre></div><p>以上三个部分的内容从数据格式上讲都是一个 JSON 对象。在JWT中，每一段 JSON 对象都被 Base64 进行编码，然后编码后的内容用&quot;.&quot;号链接一起。所以本质上 JWT 就是一个字符串，如下所示的就是一个 JWT 字符串的示例：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3NwcmluZ2hlYWx0aC5leGFtcGxlLmNvbSIsInN1YiI6Im1haWx0bzpzcHJpbmdoZWFsdGhAZXhhbXBsZS5jb20iLCJuYmYiOjE1OTkwNTY4NjIsImV4cCI6MTU5OTA2MDQ2MiwiaWF0IjoxNTk5MDU2ODYyLCJqdGkiOiJpZDEyMzQ1NiIsInR5cCI6Imh0dHBzOi8vc3ByaW5naGVhbHRoLmV4YW1wbGUuY29tL3JlZ2lzdGVyIn0.rlg2i8mWwV-gFjHUSCutX-UBMYrqxL0th1xtyGq7UdE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3NwcmluZ2hlYWx0aC5leGFtcGxlLmNvbSIsInN1YiI6Im1haWx0bzpzcHJpbmdoZWFsdGhAZXhhbXBsZS5jb20iLCJuYmYiOjE1OTkwNTY4NjIsImV4cCI6MTU5OTA2MDQ2MiwiaWF0IjoxNTk5MDU2ODYyLCJqdGkiOiJpZDEyMzQ1NiIsInR5cCI6Imh0dHBzOi8vc3ByaW5naGVhbHRoLmV4YW1wbGUuY29tL3JlZ2lzdGVyIn0.rlg2i8mWwV-gFjHUSCutX-UBMYrqxL0th1xtyGq7UdE</span></span></code></pre></div><p>显然，我们无法从这个经过 Base64 编码的字符串中获取任何有用的信息。业界也存在一些在线生成和解析 JWT 的工具，这里以<a href="http://kjur.github.io/jsjws/tool_jwt.html" target="_blank" rel="noreferrer">jsjws</a><a href="http://kjur.github.io/jsjws/tool_jwt.html%E4%B8%8A%E6%89%80%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E4%B8%BA%E4%BE%8B%E6%9D%A5%E6%BC%94%E7%A4%BAJWT" target="_blank" rel="noreferrer">上所提供的在线工具为例来演示 JWT</a>的内部结构和签名方式。在这个在线工具中，我们首先需要设置一系列的声明（Claim），然后指定签名的算法和键值，如下图所示：</p>',9),E=s(`<p>生成 JWT 的步骤</p><p>一旦我们指定了这些内容之后，就可以获取前面所给出的 JWT 字符串。反之，我们可以使用<a href="http://jwt.calebb.net/" target="_blank" rel="noreferrer">http://jwt.calebb.net/</a>所提供的反向转换原始数据的功能。针对前面的 JWT 字符串，我们可以看到其中所包含的原始 JSON 数据，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> alg: &quot;HS256&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;"> typ: &quot;JWT&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}.</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> iss: &quot;https://springhealth.example.com&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;"> sub: &quot;mailto:springhealth@example.com&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;"> nbf: 1599056862,</span></span>
<span class="line"><span style="color:#E1E4E8;"> exp: 1599060462,</span></span>
<span class="line"><span style="color:#E1E4E8;"> iat: 1599056862,</span></span>
<span class="line"><span style="color:#E1E4E8;"> jti: &quot;id123456&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;"> typ: &quot;https://springhealth.example.com/register&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}.</span></span>
<span class="line"><span style="color:#E1E4E8;">[signature]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> alg: &quot;HS256&quot;,</span></span>
<span class="line"><span style="color:#24292E;"> typ: &quot;JWT&quot;</span></span>
<span class="line"><span style="color:#24292E;">}.</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> iss: &quot;https://springhealth.example.com&quot;,</span></span>
<span class="line"><span style="color:#24292E;"> sub: &quot;mailto:springhealth@example.com&quot;,</span></span>
<span class="line"><span style="color:#24292E;"> nbf: 1599056862,</span></span>
<span class="line"><span style="color:#24292E;"> exp: 1599060462,</span></span>
<span class="line"><span style="color:#24292E;"> iat: 1599056862,</span></span>
<span class="line"><span style="color:#24292E;"> jti: &quot;id123456&quot;,</span></span>
<span class="line"><span style="color:#24292E;"> typ: &quot;https://springhealth.example.com/register&quot;</span></span>
<span class="line"><span style="color:#24292E;">}.</span></span>
<span class="line"><span style="color:#24292E;">[signature]</span></span></code></pre></div><p>现在，我们可以清晰地看到一个 JWT 中所包含的 Header 部分和 Payload 部分的数据，而出于安全考虑，Signature 部分数据并没有进行展示。</p><p>Spring Cloud Security 为 JWT 的生成和验证提供了开箱即用的支持。当然，要发送和消费 JWT，OAuth2 授权服务和各个受保护的微服务必须以不同的方式进行配置。整个开发流程与《服务授权：如何基于 Spring Cloud Security 集成 OAuth2 协议？》中介绍的普通 Token 是一致的，不同之处在于配置的内容和方式。接下来，我们先来看如何在 OAuth2 授权服务器中配置 JWT。</p><h3 id="如何集成-oauth2-与-jwt" tabindex="-1">如何集成 OAuth2 与 JWT？ <a class="header-anchor" href="#如何集成-oauth2-与-jwt" aria-label="Permalink to &quot;如何集成 OAuth2 与 JWT？&quot;">​</a></h3><p>对于所有需要用到 JWT 的独立服务，我们都首先需要在 Maven 的 pom 文件中添加对应的依赖包，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.security&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-security-jwt&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.security&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-security-jwt&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>可以想象，接下来的一步就是提供一个配置类用于完成 JWT 的生成和转换。事实上，在 OAuth2 协议中专门提供了一个接口用于管理 Token 的存储，这个接口就是 TokenStore，该接口的实现类如下所示：</p>`,9),y=s(`<p>TokenStore 接口的实现类</p><p>注意到这里有一个 JwtTokenStore 专门用来存储 JWT Token。对应的，我们也将创建一个用于配置 JwtTokenStore 的配置类。让我们回到 SpringHealth 案例系统中的 auth-server 服务，添加一个 SpringHealthJWTTokenStoreConfig 配置类，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringHealthJWTTokenStoreConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> TokenStore </span><span style="color:#B392F0;">tokenStore</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JwtTokenStore</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">jwtAccessTokenConverter</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> JwtAccessTokenConverter </span><span style="color:#B392F0;">jwtAccessTokenConverter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        JwtAccessTokenConverter converter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JwtAccessTokenConverter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        converter.</span><span style="color:#B392F0;">setSigningKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> converter;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DefaultTokenServices </span><span style="color:#B392F0;">tokenServices</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        DefaultTokenServices defaultTokenServices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultTokenServices</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        defaultTokenServices.</span><span style="color:#B392F0;">setTokenStore</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tokenStore</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        defaultTokenServices.</span><span style="color:#B392F0;">setSupportRefreshToken</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> defaultTokenServices;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringHealthJWTTokenStoreConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> TokenStore </span><span style="color:#6F42C1;">tokenStore</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JwtTokenStore</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">jwtAccessTokenConverter</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> JwtAccessTokenConverter </span><span style="color:#6F42C1;">jwtAccessTokenConverter</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        JwtAccessTokenConverter converter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JwtAccessTokenConverter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        converter.</span><span style="color:#6F42C1;">setSigningKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> converter;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DefaultTokenServices </span><span style="color:#6F42C1;">tokenServices</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        DefaultTokenServices defaultTokenServices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultTokenServices</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        defaultTokenServices.</span><span style="color:#6F42C1;">setTokenStore</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tokenStore</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        defaultTokenServices.</span><span style="color:#6F42C1;">setSupportRefreshToken</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> defaultTokenServices;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里构建了 JwtTokenStore 对象，而在它的构造函数中传入了一个 JwtAccessTokenConverter。JwtAccessTokenConverters 是一个用来转换 JWT 的转换器，而转换的过程需要签名键。在创建完了 JwtTokenStore 之后，我们通过 tokenServices 方法返回了已经设置 JwtTokenStore 对象的 DefaultTokenServices。</p><p>SpringHealthJWTTokenStoreConfig 的作用就是创建了一系列对象供 Spring 容器进行使用，那么我们在什么时候会用到这些对象呢？答案就是在将 JWT 集成到 OAuth2 授权服务的过程中，而这个过程似曾相识。基于《服务授权：如何基于 Spring Cloud Security 集成 OAuth2 协议？》课时中的讨论，我们可以构建一个 SpringHealthAuthorizationServerConfigurer 类来覆写 AuthorizationServerConfigurerAdapter 中的 configure 方法。回想原先的这个 configure 方法实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        endpoints.</span><span style="color:#B392F0;">authenticationManager</span><span style="color:#E1E4E8;">(authenticationManager)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">userDetailsService</span><span style="color:#E1E4E8;">(userDetailsService);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        endpoints.</span><span style="color:#6F42C1;">authenticationManager</span><span style="color:#24292E;">(authenticationManager)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">userDetailsService</span><span style="color:#24292E;">(userDetailsService);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而集成了 JWT 之后，该方法的实现过程如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TokenEnhancerChain tokenEnhancerChain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TokenEnhancerChain</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        tokenEnhancerChain.</span><span style="color:#B392F0;">setTokenEnhancers</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(jwtTokenEnhancer, jwtAccessTokenConverter));</span></span>
<span class="line"><span style="color:#E1E4E8;">        endpoints.</span><span style="color:#B392F0;">tokenStore</span><span style="color:#E1E4E8;">(tokenStore).</span><span style="color:#B392F0;">accessTokenConverter</span><span style="color:#E1E4E8;">(jwtAccessTokenConverter) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">tokenEnhancer</span><span style="color:#E1E4E8;">(tokenEnhancerChain) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">authenticationManager</span><span style="color:#E1E4E8;">(authenticationManager)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">userDetailsService</span><span style="color:#E1E4E8;">(userDetailsService);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">        TokenEnhancerChain tokenEnhancerChain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TokenEnhancerChain</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        tokenEnhancerChain.</span><span style="color:#6F42C1;">setTokenEnhancers</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(jwtTokenEnhancer, jwtAccessTokenConverter));</span></span>
<span class="line"><span style="color:#24292E;">        endpoints.</span><span style="color:#6F42C1;">tokenStore</span><span style="color:#24292E;">(tokenStore).</span><span style="color:#6F42C1;">accessTokenConverter</span><span style="color:#24292E;">(jwtAccessTokenConverter) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">tokenEnhancer</span><span style="color:#24292E;">(tokenEnhancerChain) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">authenticationManager</span><span style="color:#24292E;">(authenticationManager)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">userDetailsService</span><span style="color:#24292E;">(userDetailsService);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里构建了一个对 Token 的增强链 TokenEnhancerChain，并用到了在 SpringHealthJWTTokenStoreConfig 中创建的 tokenStore、jwtAccessTokenConverter 对象。至此，在 OAuth2 协议中集成 JWT 的过程介绍完成，也就是说现在我们访问 OAuth2 授权服务器时获取的 Token 应该就是 JWT Token。让我们来尝试一下，通过 Postman，我们发起了如下所示的请求并得到了相应的 Token：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;access_token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzeXN0ZW0iOiJTcHJpbmdIZWFsdGgiLCJ1c2VyX25hbWUiOiJzcHJpbmdoZWFsdGhfYWRtaW4iLCJzY29wZSI6WyJ3ZWJjbGllbnQiXSwiZXhwIjoxNjA2MzYyMTM3LCJhdXRob3JpdGllcyI6WyJST0xFX0FETUlOIiwiUk9MRV9VU0VSIl0sImp0aSI6IjU3YjhjYjM5LThkMGYtNGE4Ny1hZDU2LTQyZGExZTIxNmRjYyIsImNsaWVudF9pZCI6InNwcmluZ2hlYWx0aCJ9.kEjhuZtSYrj7HJlQhowfBQDzH9qJiqCQm8p7gHUhhcU&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;token_type&quot;: &quot;bearer&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;refresh_token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzeXN0ZW0iOiJTcHJpbmdIZWFsdGgiLCJ1c2VyX25hbWUiOiJzcHJpbmdoZWFsdGhfYWRtaW4iLCJzY29wZSI6WyJ3ZWJjbGllbnQiXSwiYXRpIjoiNTdiOGNiMzktOGQwZi00YTg3LWFkNTYtNDJkYTFlMjE2ZGNjIiwiZXhwIjoxNjA4OTEwOTM3LCJhdXRob3JpdGllcyI6WyJST0xFX0FETUlOIiwiUk9MRV9VU0VSIl0sImp0aSI6IjVmOGZkNDFjLTdlMTEtNDk1OC05ZDVmLWFlY2MzNGRmYThiNSIsImNsaWVudF9pZCI6InNwcmluZ2hlYWx0aCJ9.Rq8pLRHSvZgda_0DgSFQ8eI5dctAGE4Jqlb_qabRDvE&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;expires_in&quot;: 43199,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;scope&quot;: &quot;webclient&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;system&quot;: &quot;SpringHealth&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &quot;jti&quot;: &quot;57b8cb39-8d0f-4a87-ad56-42da1e216dcc&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    &quot;access_token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzeXN0ZW0iOiJTcHJpbmdIZWFsdGgiLCJ1c2VyX25hbWUiOiJzcHJpbmdoZWFsdGhfYWRtaW4iLCJzY29wZSI6WyJ3ZWJjbGllbnQiXSwiZXhwIjoxNjA2MzYyMTM3LCJhdXRob3JpdGllcyI6WyJST0xFX0FETUlOIiwiUk9MRV9VU0VSIl0sImp0aSI6IjU3YjhjYjM5LThkMGYtNGE4Ny1hZDU2LTQyZGExZTIxNmRjYyIsImNsaWVudF9pZCI6InNwcmluZ2hlYWx0aCJ9.kEjhuZtSYrj7HJlQhowfBQDzH9qJiqCQm8p7gHUhhcU&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;token_type&quot;: &quot;bearer&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;refresh_token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzeXN0ZW0iOiJTcHJpbmdIZWFsdGgiLCJ1c2VyX25hbWUiOiJzcHJpbmdoZWFsdGhfYWRtaW4iLCJzY29wZSI6WyJ3ZWJjbGllbnQiXSwiYXRpIjoiNTdiOGNiMzktOGQwZi00YTg3LWFkNTYtNDJkYTFlMjE2ZGNjIiwiZXhwIjoxNjA4OTEwOTM3LCJhdXRob3JpdGllcyI6WyJST0xFX0FETUlOIiwiUk9MRV9VU0VSIl0sImp0aSI6IjVmOGZkNDFjLTdlMTEtNDk1OC05ZDVmLWFlY2MzNGRmYThiNSIsImNsaWVudF9pZCI6InNwcmluZ2hlYWx0aCJ9.Rq8pLRHSvZgda_0DgSFQ8eI5dctAGE4Jqlb_qabRDvE&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;expires_in&quot;: 43199,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;scope&quot;: &quot;webclient&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;system&quot;: &quot;SpringHealth&quot;,</span></span>
<span class="line"><span style="color:#24292E;">    &quot;jti&quot;: &quot;57b8cb39-8d0f-4a87-ad56-42da1e216dcc&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，这里的 access_token 和 refresh_token 都已经是经过 Base64 编码的字符串。同样，我们可以通过前面介绍的在线工具来获取其 JSON 数据格式的内容，如下所示的就是 access_token 的原始内容：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> alg: &quot;HS256&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;"> typ: &quot;JWT&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}.</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;"> system: &quot;SpringHealth&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;"> user_name: &quot;springhealth_admin&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;"> scope: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;webclient&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> ],</span></span>
<span class="line"><span style="color:#E1E4E8;"> exp: 1606362137,</span></span>
<span class="line"><span style="color:#E1E4E8;"> authorities: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;ROLE_ADMIN&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  &quot;ROLE_USER&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> ],</span></span>
<span class="line"><span style="color:#E1E4E8;"> jti: &quot;57b8cb39-8d0f-4a87-ad56-42da1e216dcc&quot;,</span></span>
<span class="line"><span style="color:#E1E4E8;"> client_id: &quot;springhealth&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}.</span></span>
<span class="line"><span style="color:#E1E4E8;">[signature]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> alg: &quot;HS256&quot;,</span></span>
<span class="line"><span style="color:#24292E;"> typ: &quot;JWT&quot;</span></span>
<span class="line"><span style="color:#24292E;">}.</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> system: &quot;SpringHealth&quot;,</span></span>
<span class="line"><span style="color:#24292E;"> user_name: &quot;springhealth_admin&quot;,</span></span>
<span class="line"><span style="color:#24292E;"> scope: [</span></span>
<span class="line"><span style="color:#24292E;">  &quot;webclient&quot;</span></span>
<span class="line"><span style="color:#24292E;"> ],</span></span>
<span class="line"><span style="color:#24292E;"> exp: 1606362137,</span></span>
<span class="line"><span style="color:#24292E;"> authorities: [</span></span>
<span class="line"><span style="color:#24292E;">  &quot;ROLE_ADMIN&quot;,</span></span>
<span class="line"><span style="color:#24292E;">  &quot;ROLE_USER&quot;</span></span>
<span class="line"><span style="color:#24292E;"> ],</span></span>
<span class="line"><span style="color:#24292E;"> jti: &quot;57b8cb39-8d0f-4a87-ad56-42da1e216dcc&quot;,</span></span>
<span class="line"><span style="color:#24292E;"> client_id: &quot;springhealth&quot;</span></span>
<span class="line"><span style="color:#24292E;">}.</span></span>
<span class="line"><span style="color:#24292E;">[signature]</span></span></code></pre></div><h3 id="如何在微服务中使用-jwt" tabindex="-1">如何在微服务中使用 JWT？ <a class="header-anchor" href="#如何在微服务中使用-jwt" aria-label="Permalink to &quot;如何在微服务中使用 JWT？&quot;">​</a></h3><p>在各个微服务中使用 JWT 的第一步也是配置工作。我们需要在 SpringHealth 案例系统中的三个业务微服务中分别添加一个 SpringHealthJWTTokenStoreConfig 配置类，这个配置类的内容就是创建一个 JwtTokenStore 并构建 tokenServices，具体代码在前面已经做了介绍，这里不再展开。</p><p>配置工作完成之后，剩下的问题就是在服务调用链中传播 JWT。在上一课时中，我们给出了 OAuth2RestTemplate 这个工具类，该类可以传播普通的 Token。但可惜的是，它并不能传播基于 JWT 的 Token。从实现原理上，OAuth2RestTemplate 也是在 RestTemplate 的基础上做了一层封装，所以我们的思路也是尝试在 RestTemplate 请求中添加对 JWT 的支持。</p><p>我们知道 HTTP 请求是通过在 Header 部分中添加一个&quot;Authorization&quot;消息头来完成对 Token 的传递，所以第一步需要能够从 HTTP 请求中获取这个 JWT Token。然后，我们需要将这个 Token 存储在一个线程安全的地方以便在后续的服务链中进行使用，这是第二步。第三步，也是最关键的一步，就是在通过 RestTemplate 发起请求时，能够把这个 Token 自动嵌入到所发起的每一个 HTTP 请求中。整个实现思路如下图所示：</p>`,16),i=s(`<p>在服务调用链中传播 JWT Token 的三个实现步骤</p><p>实现这一思路需要你对 HTTP 请求的过程和原理有一定的理解，在代码实现上也需要有一些技巧，我来一一进行展开。</p><p>首先，在 HTTP 请求过程中，我们可以通过过滤器 Filter 对所有请求进行过滤。Filter 是 servlet 中的一个核心组件，其基本原理就是构建一个过滤器链并对经过该过滤器链的请求和响应添加定制化的处理机制。Filter 接口的定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Filter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(FilterConfig </span><span style="color:#FFAB70;">filterConfig</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> ServletException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doFilter</span><span style="color:#E1E4E8;">(ServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, ServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, FilterChain </span><span style="color:#FFAB70;">chain</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException, ServletException;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Filter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(FilterConfig </span><span style="color:#E36209;">filterConfig</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(ServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, ServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, FilterChain </span><span style="color:#E36209;">chain</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException, ServletException;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通常，我们会实现 Filter 接口中的 doFilter 方法。例如，在 SpringHealth 案例系统中，我们可从将 ServletRequest 转化为一个 HttpServletRequest 对象，并从该对象中获取&quot;Authorization&quot;消息头，示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorizationHeaderFilter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Filter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doFilter</span><span style="color:#E1E4E8;">(ServletRequest </span><span style="color:#FFAB70;">servletRequest</span><span style="color:#E1E4E8;">, ServletResponse </span><span style="color:#FFAB70;">servletResponse</span><span style="color:#E1E4E8;">, FilterChain </span><span style="color:#FFAB70;">filterChain</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException, ServletException {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        HttpServletRequest httpServletRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (HttpServletRequest) servletRequest;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        AuthorizationHeaderHolder.</span><span style="color:#B392F0;">getAuthorizationHeader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setAuthorizationHeader</span><span style="color:#E1E4E8;">(httpServletRequest.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(AuthorizationHeader.AUTHORIZATION_HEADER));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        filterChain.</span><span style="color:#B392F0;">doFilter</span><span style="color:#E1E4E8;">(httpServletRequest, servletResponse);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(FilterConfig </span><span style="color:#FFAB70;">filterConfig</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> ServletException {}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorizationHeaderFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Filter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(ServletRequest </span><span style="color:#E36209;">servletRequest</span><span style="color:#24292E;">, ServletResponse </span><span style="color:#E36209;">servletResponse</span><span style="color:#24292E;">, FilterChain </span><span style="color:#E36209;">filterChain</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException, ServletException {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        HttpServletRequest httpServletRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (HttpServletRequest) servletRequest;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        AuthorizationHeaderHolder.</span><span style="color:#6F42C1;">getAuthorizationHeader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setAuthorizationHeader</span><span style="color:#24292E;">(httpServletRequest.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(AuthorizationHeader.AUTHORIZATION_HEADER));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        filterChain.</span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(httpServletRequest, servletResponse);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(FilterConfig </span><span style="color:#E36209;">filterConfig</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException {}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意到，这里我们把从 HTTP 请求中获取的&quot;Authorization&quot;消息头保存到了一个 AuthorizationHeaderHolder 对象中。从命名上看，AuthorizationHeader 对象代表的就是 HTTP 中&quot;Authorization&quot; 消息头，而 AuthorizationHeaderHolder 则是该消息头对象的持有者。这种命名方式在 Spring 等主流开源框架中非常常见。一般而言，以 -Holder 结尾的多是一种封装类，用于对原有对象添加线程安全等附加特性。这里的 AuthorizationHeaderHolder 就是这样一个封装类，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorizationHeaderHolder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ThreadLocal&lt;</span><span style="color:#F97583;">AuthorizationHeader</span><span style="color:#E1E4E8;">&gt; authorizationHeaderContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ThreadLocal&lt;</span><span style="color:#F97583;">AuthorizationHeader</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AuthorizationHeader </span><span style="color:#B392F0;">getAuthorizationHeader</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        AuthorizationHeader header </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> authorizationHeaderContext.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (header </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         header </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorizationHeader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            authorizationHeaderContext.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(header);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> authorizationHeaderContext.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setAuthorizationHeader</span><span style="color:#E1E4E8;">(AuthorizationHeader </span><span style="color:#FFAB70;">header</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        authorizationHeaderContext.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(header);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorizationHeaderHolder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ThreadLocal&lt;</span><span style="color:#D73A49;">AuthorizationHeader</span><span style="color:#24292E;">&gt; authorizationHeaderContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ThreadLocal&lt;</span><span style="color:#D73A49;">AuthorizationHeader</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AuthorizationHeader </span><span style="color:#6F42C1;">getAuthorizationHeader</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        AuthorizationHeader header </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> authorizationHeaderContext.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (header </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         header </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorizationHeader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            authorizationHeaderContext.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(header);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> authorizationHeaderContext.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setAuthorizationHeader</span><span style="color:#24292E;">(AuthorizationHeader </span><span style="color:#E36209;">header</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        authorizationHeaderContext.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(header);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里使用了 ThreadLocal 来确保对 AuthorizationHeader 对象访问的线程安全性，AuthorizationHeader 定义如下，用于保存来自 HTTP 请求头的 JWT Token：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorizationHeader</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String AUTHORIZATION_HEADER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Authorization&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String authorizationHeader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getAuthorizationHeader</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> authorizationHeader;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setAuthorizationHeader</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">authorizationHeader</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.authorizationHeader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> authorizationHeader;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorizationHeader</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String AUTHORIZATION_HEADER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Authorization&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String authorizationHeader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getAuthorizationHeader</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> authorizationHeader;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setAuthorizationHeader</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">authorizationHeader</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.authorizationHeader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> authorizationHeader;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，对于每一个 HTTP 请求，我们都能获取其中的 Token 并将其保存在上下文对象中。剩下的唯一问题就是如何通过 RestTemplate 将这个 Token 继续传递到下一个服务中，以便下一个服务也能从 HTTP 请求中获取 Token 并继续向后传递，从而确保 Token 在整个调用链中持续传播。要想实现这一目标，我们需要对 RestTemplate 进行一些设置，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RestTemplate </span><span style="color:#B392F0;">getCustomRestTemplate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        RestTemplate template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RestTemplate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">ClientHttpRequestInterceptor</span><span style="color:#E1E4E8;">&gt; interceptors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template.</span><span style="color:#B392F0;">getInterceptors</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (interceptors </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            template.</span><span style="color:#B392F0;">setInterceptors</span><span style="color:#E1E4E8;">(Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorizationHeaderInterceptor</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            interceptors.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorizationHeaderInterceptor</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            template.</span><span style="color:#B392F0;">setInterceptors</span><span style="color:#E1E4E8;">(interceptors);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> template;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RestTemplate </span><span style="color:#6F42C1;">getCustomRestTemplate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        RestTemplate template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RestTemplate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">ClientHttpRequestInterceptor</span><span style="color:#24292E;">&gt; interceptors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template.</span><span style="color:#6F42C1;">getInterceptors</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (interceptors </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            template.</span><span style="color:#6F42C1;">setInterceptors</span><span style="color:#24292E;">(Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorizationHeaderInterceptor</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            interceptors.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorizationHeaderInterceptor</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            template.</span><span style="color:#6F42C1;">setInterceptors</span><span style="color:#24292E;">(interceptors);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> template;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>RestTemplate 允许开发人员添加自定义的拦截器 Interceptor，拦截器本质上与过滤器的功能类似，用于对传入的 HTTP 请求进行定制化处理。例如，上述代码中的 AuthorizationHeaderInterceptor 的作用就是在 HTTP 请求的消息头中嵌入保存在 AuthorizationHeaderHolder 中的 JWT Token，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthorizationHeaderInterceptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClientHttpRequestInterceptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ClientHttpResponse </span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            HttpRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">body</span><span style="color:#E1E4E8;">, ClientHttpRequestExecution </span><span style="color:#FFAB70;">execution</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        HttpHeaders headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getHeaders</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        headers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(AuthorizationHeader.AUTHORIZATION_HEADER, AuthorizationHeaderHolder.</span><span style="color:#B392F0;">getAuthorizationHeader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getAuthorizationHeader</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> execution.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(request, body);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthorizationHeaderInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClientHttpRequestInterceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ClientHttpResponse </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            HttpRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">body</span><span style="color:#24292E;">, ClientHttpRequestExecution </span><span style="color:#E36209;">execution</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        HttpHeaders headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeaders</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        headers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(AuthorizationHeader.AUTHORIZATION_HEADER, AuthorizationHeaderHolder.</span><span style="color:#6F42C1;">getAuthorizationHeader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAuthorizationHeader</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> execution.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(request, body);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，我们已经完成了在微服务中嵌入 JWT 的完整过程。现在，让我们回到 intervention-service 中的 UserServiceClient 类，会发现它重新使用了前面所构建的 RestTemplate 对象来发起远程调用，代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserServiceClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">     @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">	RestTemplate restTemplate;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserMapper </span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">userName</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        ResponseEntity&lt;</span><span style="color:#F97583;">UserMapper</span><span style="color:#E1E4E8;">&gt; restExchange </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">                restTemplate.</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#9ECBFF;">&quot;http://zuulservice:5555/springhealth/user/users/username/{userName}&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       HttpMethod.GET,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, UserMapper.class, userName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        UserMapper user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> restExchange.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserServiceClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">     @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">	RestTemplate restTemplate;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserMapper </span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">userName</span><span style="color:#24292E;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        ResponseEntity&lt;</span><span style="color:#D73A49;">UserMapper</span><span style="color:#24292E;">&gt; restExchange </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                restTemplate.</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#032F62;">&quot;http://zuulservice:5555/springhealth/user/users/username/{userName}&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                       HttpMethod.GET,</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, UserMapper.class, userName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        UserMapper user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> restExchange.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="如何扩展-jwt" tabindex="-1">如何扩展 JWT？ <a class="header-anchor" href="#如何扩展-jwt" aria-label="Permalink to &quot;如何扩展 JWT？&quot;">​</a></h3><p>在本课时的最后，我们来讨论如何扩展 JWT。JWT具有良好的可扩展性，开发人员可以根据需要在 JWT Token 中添加自己想要添加的各种附加信息。</p><p>针对 JWT 的扩展性场景，Spring Security 专门提供了一个 TokenEnhancer 接口来对 Token 进行增强（Enhance），该接口定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TokenEnhancer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    OAuth2AccessToken </span><span style="color:#B392F0;">enhance</span><span style="color:#E1E4E8;">(OAuth2AccessToken </span><span style="color:#FFAB70;">accessToken</span><span style="color:#E1E4E8;">, OAuth2Authentication </span><span style="color:#FFAB70;">authentication</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TokenEnhancer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    OAuth2AccessToken </span><span style="color:#6F42C1;">enhance</span><span style="color:#24292E;">(OAuth2AccessToken </span><span style="color:#E36209;">accessToken</span><span style="color:#24292E;">, OAuth2Authentication </span><span style="color:#E36209;">authentication</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里处理的是一个 OAuth2AccessToken 接口，而该接口有一个默认的实现类 DefaultOAuth2AccessToken。我们可以通过该实现类的 setAdditionalInformation 方法以键值对的方式将附加信息添加到 OAuth2AccessToken 中，示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringHealthJWTTokenEnhancer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TokenEnhancer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> OAuth2AccessToken </span><span style="color:#B392F0;">enhance</span><span style="color:#E1E4E8;">(OAuth2AccessToken </span><span style="color:#FFAB70;">accessToken</span><span style="color:#E1E4E8;">, OAuth2Authentication </span><span style="color:#FFAB70;">authentication</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; systemInfo</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        systemInfo.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;system&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;springhealth&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        ((DefaultOAuth2AccessToken) accessToken).</span><span style="color:#B392F0;">setAdditionalInformation</span><span style="color:#E1E4E8;">(systemInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accessToken;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringHealthJWTTokenEnhancer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TokenEnhancer</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> OAuth2AccessToken </span><span style="color:#6F42C1;">enhance</span><span style="color:#24292E;">(OAuth2AccessToken </span><span style="color:#E36209;">accessToken</span><span style="color:#24292E;">, OAuth2Authentication </span><span style="color:#E36209;">authentication</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; systemInfo</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        systemInfo.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;system&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;springhealth&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        ((DefaultOAuth2AccessToken) accessToken).</span><span style="color:#6F42C1;">setAdditionalInformation</span><span style="color:#24292E;">(systemInfo);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accessToken;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我们以硬编码的方式添加了一个&quot;system&quot;属性，你也可以根据需要进行相应的调整。</p><p>要想使得上述 SpringHealthJWTTokenEnhancer 类能够生效，我们需要对 SpringHealthAuthorizationServerConfigurer 类中的 configure 方法进行重新配置，并将 SpringHealthJWTTokenEnhancer 嵌入到 TokenEnhancerChain 中。事实上，我们在前面的代码中已经演示了这部分内容。</p><p>现在，我们已经扩展了 JWT Token。那么，如何从这个 JWT Token 中获取所扩展的属性呢？方法也比较简单和固定，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//获取 JWTToken</span></span>
<span class="line"><span style="color:#E1E4E8;">RequestContext ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RequestContext.</span><span style="color:#B392F0;">getCurrentContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">String authorizationHeader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#B392F0;">getRequest</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(AUTHORIZATION_HEADER);</span></span>
<span class="line"><span style="color:#E1E4E8;">String jwtToken </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> authorizationHeader.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Bearer &quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//解析 JWTToken</span></span>
<span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] split_string </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jwtToken.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">String base64EncodedBody </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> split_string[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">Base64 base64Url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Base64</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">String body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(base64Url.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(base64EncodedBody));</span></span>
<span class="line"><span style="color:#E1E4E8;">JSONObject jsonObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONObject</span><span style="color:#E1E4E8;">(body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//获取定制化属性值</span></span>
<span class="line"><span style="color:#E1E4E8;">String systemName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jsonObj.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;system&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//获取 JWTToken</span></span>
<span class="line"><span style="color:#24292E;">RequestContext ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestContext.</span><span style="color:#6F42C1;">getCurrentContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">String authorizationHeader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getRequest</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(AUTHORIZATION_HEADER);</span></span>
<span class="line"><span style="color:#24292E;">String jwtToken </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> authorizationHeader.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Bearer &quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//解析 JWTToken</span></span>
<span class="line"><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] split_string </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jwtToken.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String base64EncodedBody </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> split_string[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">Base64 base64Url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Base64</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(base64Url.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(base64EncodedBody));</span></span>
<span class="line"><span style="color:#24292E;">JSONObject jsonObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">(body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//获取定制化属性值</span></span>
<span class="line"><span style="color:#24292E;">String systemName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jsonObj.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;system&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>我们可以把这段代码嵌入到需要使用到自定义&quot;system&quot;属性的任何场景中。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>这是微服务安全性的最后一个课时，关注的是认证问题而不是授权问题，为此我们引入了 JWT 机制。JWT 本质上也是一种 Token，只不过提供了标准化的规范定义，可以与 OAuth2 协议进行集成。而我们使用 JWT 时，也可以将各种信息添加到这种 Token 中并在微服务访问链路中进行传播。同时，作为一种具有高扩展性的 Token 解决方案，我们也可以轻松为 JWT 提交各种定制化的认证信息。</p><p>这里给你留一道思考题：如果想要对 JWT 中的数据进行扩展，你有什么办法？</p><p>介绍完安全性问题之后，下一课时我们将进入到新的一个主题，即服务监控。我们将首先介绍服务监控基本原理以及引入 Spring Cloud Sleuth 框架。</p>`,31);function u(d,h,F,A,g,T){const n=o("Image");return e(),t("div",null,[r,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/01/53/Cip5yF_Yc4WAH7kqAABfUNZNgrk543.png"}),p(),E,a(n,{alt:"Lark20201224-184609.png",src:"https://s0.lgstatic.com/i/image/M00/8C/12/CgqCHl_kcZeANBHuAAKZw9BsRRo761.png"}),p(),y,a(n,{alt:"Lark20201224-184612.png",src:"https://s0.lgstatic.com/i/image/M00/8C/07/Ciqc1F_kcaSAR0NjAAEcuT033u0868.png"}),p(),i])}const v=l(c,[["render",u]]);export{k as __pageData,v as default};
