import{_ as o,j as e,o as t,g as c,k as p,h as n,Q as l,s}from"./chunks/framework.e0c66c3f.js";const q=JSON.parse('{"title":"常见的 APP 网络传输协议序列化方式 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3532) 15  服务通信：Flutter 中常见的网络协议.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3532) 15  服务通信：Flutter 中常见的网络协议.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3532) 15  服务通信：Flutter 中常见的网络协议.md"},E=l(`<p>上一课时之前，我们的接口都是在代码中模拟假数据，并没有从服务端获取数据，但是在实际开发中，必须与服务端进行交互。本课时主要介绍在 Flutter 中常见的网络传输协议序列化方式，并对其中比较常用的协议进行简单实践，最后再通过 JSON 协议来完善本课时的 api 部分的代码。</p><h3 id="常见的-app-网络传输协议序列化方式" tabindex="-1">常见的 APP 网络传输协议序列化方式 <a class="header-anchor" href="#常见的-app-网络传输协议序列化方式" aria-label="Permalink to &quot;常见的 APP 网络传输协议序列化方式&quot;">​</a></h3><p>常见的传输协议有三种：XML 、JSON 和 Protocol Buffer。我们先来对比下这三种协议，我会分别从 Flutter 中的实现、序列化后的数据长度、Flutter 中反序列化性能三个方面来讲解。我先将本课时中的一段基础的数据格式用来做效果演示，测试数据如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">nickName = &#39;test-pb&#39;; </span></span>
<span class="line"><span style="color:#E1E4E8;">uid = &#39;3001&#39;; </span></span>
<span class="line"><span style="color:#E1E4E8;">headerUrl = &#39;http://image.biaobaiju.com/uploads/20180211/00/1518279967-IAnVyPiRLK.jpg&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">nickName = &#39;test-pb&#39;; </span></span>
<span class="line"><span style="color:#24292E;">uid = &#39;3001&#39;; </span></span>
<span class="line"><span style="color:#24292E;">headerUrl = &#39;http://image.biaobaiju.com/uploads/20180211/00/1518279967-IAnVyPiRLK.jpg&#39;;</span></span></code></pre></div><p>上面的是用户信息接口，接下来我们使用这三种方式来实现这个接口。</p><h4 id="xml" tabindex="-1">XML <a class="header-anchor" href="#xml" aria-label="Permalink to &quot;XML&quot;">​</a></h4><p>XML 指可扩展标记语言（eXtensible Markup Language）是一种通用的重量级数据交换格式，以文本结构存储。</p><p>在 Flutter 中有一个解析 XML 的第三方库 <a href="https://pub.dev/packages/xml2json" target="_blank" rel="noreferrer">xml2json</a>，将服务端的 XML 解析为 JSON 格式，因为是第三方库，因此需要在 pubspec.yaml 中增加该库的依赖，然后更新本地库。接下来我们实现具体的代码，在 lib 目录下新建 api_xml ，然后在目录下创建 api_xml/user_info/index.dart 。创建完成后，我们来实现 user_info/index.dart 的逻辑。</p><p>首先需要增加第三方库的引用。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dart:convert&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/struct/user_info.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:xml2json/xml2json.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dart:convert&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/struct/user_info.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:xml2json/xml2json.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>接下来实现 ApiXmlUserInfoIndex 类中的 getSelfUserInfo 方法，后续 getSelfUserInfo 会是一个异步网络请求方法，因此将返回类型修改为 Future<code>&lt;StructUserInfo&gt;</code>，具体实现逻辑如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 获取自己的个人信息 </span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getSelfUserInfo</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 模拟xml假数据 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> userInfoXml </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;&#39;&lt;?xml version=&quot;1.0&quot;?&gt; </span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;userInfo&gt; </span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;nickName&gt;test&lt;/nickName&gt; </span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;uid&gt;3001&lt;/uid&gt; </span></span>
<span class="line"><span style="color:#9ECBFF;">    &lt;headerUrl&gt;http://image.biaobaiju.com/uploads/20180211/00/1518279967-IAnVyPiRLK.jpg&lt;/headerUrl&gt; </span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;/userInfo&gt;&#39;&#39;&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 记录当前时间 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> currentTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().microsecondsSinceEpoch; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Xml2Json</span><span style="color:#E1E4E8;"> xml2json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Xml2Json</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  xml2json.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(userInfoXml); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 转化xml数据 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> userInfoStr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xml2json.</span><span style="color:#B392F0;">toGData</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xml length&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(userInfoStr.length); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> jsonStartTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().microsecondsSinceEpoch; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> userInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(userInfoStr); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 打印解析json时间 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;json decode time&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().microsecondsSinceEpoch </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> jsonStartTime); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 打印整体解析时间 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xml decode time&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().microsecondsSinceEpoch </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> currentTime); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfo[</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;uid&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\$</span><span style="color:#9ECBFF;">t&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfo[</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;nickName&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\$</span><span style="color:#9ECBFF;">t&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfo[</span><span style="color:#9ECBFF;">&#39;userInfo&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;headerUrl&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\$</span><span style="color:#9ECBFF;">t&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 获取自己的个人信息 </span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getSelfUserInfo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">async</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 模拟xml假数据 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> userInfoXml </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;&#39;&lt;?xml version=&quot;1.0&quot;?&gt; </span></span>
<span class="line"><span style="color:#032F62;">  &lt;userInfo&gt; </span></span>
<span class="line"><span style="color:#032F62;">    &lt;nickName&gt;test&lt;/nickName&gt; </span></span>
<span class="line"><span style="color:#032F62;">    &lt;uid&gt;3001&lt;/uid&gt; </span></span>
<span class="line"><span style="color:#032F62;">    &lt;headerUrl&gt;http://image.biaobaiju.com/uploads/20180211/00/1518279967-IAnVyPiRLK.jpg&lt;/headerUrl&gt; </span></span>
<span class="line"><span style="color:#032F62;">  &lt;/userInfo&gt;&#39;&#39;&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 记录当前时间 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> currentTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().microsecondsSinceEpoch; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Xml2Json</span><span style="color:#24292E;"> xml2json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Xml2Json</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  xml2json.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(userInfoXml); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 转化xml数据 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> userInfoStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xml2json.</span><span style="color:#6F42C1;">toGData</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xml length&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(userInfoStr.length); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> jsonStartTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().microsecondsSinceEpoch; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> userInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(userInfoStr); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 打印解析json时间 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;json decode time&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().microsecondsSinceEpoch </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> jsonStartTime); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 打印整体解析时间 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xml decode time&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().microsecondsSinceEpoch </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> currentTime); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      userInfo[</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;uid&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\$</span><span style="color:#032F62;">t&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      userInfo[</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;nickName&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\$</span><span style="color:#032F62;">t&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      userInfo[</span><span style="color:#032F62;">&#39;userInfo&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;headerUrl&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\$</span><span style="color:#032F62;">t&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  ); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码首先在第 4 行模拟一个 XML 数据，在第 12 行记录开始解析时间，第 28 行打印整体 XML 解析时间，在第 24 行打印 JSON 的解析时间。XML 的解析过程是先将 XML 转化为一个 JSON 字符串，然后再通过 convert 转化为 JSON。在 main.dart 中引入该文件，并调用 getSelfUserInfo 方法，可以看到如下的打印信息。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">flutter: xml length </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter: 180 </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter: json decode time </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter: 200 </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter: xml decode time </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter: 2000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">flutter: xml length </span></span>
<span class="line"><span style="color:#24292E;">flutter: 180 </span></span>
<span class="line"><span style="color:#24292E;">flutter: json decode time </span></span>
<span class="line"><span style="color:#24292E;">flutter: 200 </span></span>
<span class="line"><span style="color:#24292E;">flutter: xml decode time </span></span>
<span class="line"><span style="color:#24292E;">flutter: 2000</span></span></code></pre></div><p>从解析过程来看，XML 的解析性能肯定是比较差的，因为最终还是需要将 XML 转化为 JSON 来处理，接下来我们看下 JSON 的解析实现方式。</p><h4 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON&quot;">​</a></h4><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。 易于人阅读和编写，同时也易于机器解析和生成。 它是基于 JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999 的一个子集。</p><p>在 Flutter 中，JSON 解析有专门的 dart 原生库支持------dart:convert。同样我们去实现 XML 例子中的 user_info/index.dart，我们以 api/user_info/index.dart 为例子来实现，在原来代码基础上，我们增加打印解析时间和 JSON 长度，具体代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 获取自己的个人信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getSelfUserInfo</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> jsonStr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;{&quot;nickName&quot;:&quot;test&quot;,&quot;uid&quot;:&quot;3001&quot;,&quot;headerUrl&quot;:&quot;http://image.biaobaiju.com/uploads/20180211/00/1518279967-IAnVyPiRLK.jpg&quot;}&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;json length&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(jsonStr.length); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> currentTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().microsecondsSinceEpoch; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> jsonInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(jsonStr) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt;; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;json parse time&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().microsecondsSinceEpoch </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> currentTime); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fromJson</span><span style="color:#E1E4E8;">(jsonInfo); </span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 获取自己的个人信息 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getSelfUserInfo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">async</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> jsonStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;{&quot;nickName&quot;:&quot;test&quot;,&quot;uid&quot;:&quot;3001&quot;,&quot;headerUrl&quot;:&quot;http://image.biaobaiju.com/uploads/20180211/00/1518279967-IAnVyPiRLK.jpg&quot;}&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;json length&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(jsonStr.length); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> currentTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().microsecondsSinceEpoch; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> jsonInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(jsonStr) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt;; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;json parse time&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().microsecondsSinceEpoch </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> currentTime); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">fromJson</span><span style="color:#24292E;">(jsonInfo); </span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>上面代码较 XML 简单一些，第 3 行创建假数据，然后在第 7 行进行解析。在代码第 5 行，打印 JSON 长度，第 9 行打印具体的解析时间，在 main.dart 执行该函数，可以看到如下打印数据。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> json length </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">119</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> json parse time </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">420</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> json length </span></span>
<span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">119</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> json parse time </span></span>
<span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">420</span></span></code></pre></div><p>与 XML 对比，从解析时间和传递数据长度来看，都是较优的，接下来我们看下 Protocol Buffer 的实现、相关解析时长和具体的数据长度。</p><h4 id="protocol-buffer" tabindex="-1">Protocol Buffer <a class="header-anchor" href="#protocol-buffer" aria-label="Permalink to &quot;Protocol Buffer&quot;">​</a></h4><p>Protocol Buffer 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式，可用于通信协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p><p>在 Flutter 中应用 Protocol Buffer 需要下面几个过程。</p><p>1.<strong>安装 Protocol Buffer 工具</strong>，在 Mac 应用如下命令。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">brew install protobuf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">brew install protobuf</span></span></code></pre></div><p>如果是在 Windows 或者 Linux 上，则前往（ <a href="https://github.com/protocolbuffers/protobuf/releases?after=v3.5.0" target="_blank" rel="noreferrer">https://github.com/protocolbuffers/protobuf/releases?after=v3.5.0</a>）解压安装即可。</p><p>2.<strong>安装 protoc_plugin 插件</strong>，在 Mac 或者 Linux 应用如下命令安装。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pub global activate protoc_plugin</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pub global activate protoc_plugin</span></span></code></pre></div><p>如果在 Windows 上没有这个支持，你在 Windows 上只能通过虚拟机的方式。</p><p>3.<strong>在 lib 同级目录下创建 protos</strong> 用来存放所需要的 Protocol Buffer 文件，这里我们创建了一个 user_info.proto ，然后添加下面的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">option java_package </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;pro.two_you_friend&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">message UserInfoRsp { </span></span>
<span class="line"><span style="color:#E1E4E8;">    string nickName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    string headerUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    string uid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">syntax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">option java_package </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;pro.two_you_friend&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">message UserInfoRsp { </span></span>
<span class="line"><span style="color:#24292E;">    string nickName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    string headerUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    string uid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的代码就是创建一个 Protocol Buffer 协议，该协议数据结构就是一个 UserInfo 的结构，具体关于 Protocol Buffer 的协议，可以<a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noreferrer">参考官网</a>。</p><p>4.创建完成 Protocol Buffer 协议后，我们再<strong>将 Protocol Buffer 文件转化为 Dart 文件</strong>，在项目根目录，也就是 lib 同级目录，运行下面命令。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">protoc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--dart_out=./lib</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./protos/</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--plugin=protoc-gen-dart=</span><span style="color:#E1E4E8;">$HOME</span><span style="color:#79B8FF;">/.pub-cache/bin/protoc-gen-dart</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">protoc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--dart_out=./lib</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./protos/</span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--plugin=protoc-gen-dart=</span><span style="color:#24292E;">$HOME</span><span style="color:#005CC5;">/.pub-cache/bin/protoc-gen-dart</span></span></code></pre></div><p>其中 dart_out 就是转化后的 dart 文件存放路径，会默认带上原有 protos 目录。--plugin 就是需要使用到的插件，这里的路径就是第二步安装的插件位置。</p><p>5.运行成功后，<strong>会在 lib 目录下创建 protos 目录</strong>，并生成如图 1 的目录结构；</p>`,38),y=l(`<p>图 1 生成的 Protocol Buffer 目录结构</p><p>生成完成以后，这时候是会提示报错的，因为在 user_info.pb.dart 中引用了 package:protobuf/protobuf.dart 这个库。接下来我们就需要去修改 pubspec.yaml ，添加 Protocol Buffer（ protobuf: ^1.0.1 ）第三方库的依赖，添加完成后更新本地库。</p><p>以上就完成了整个 Protocol Buffer 的创建到转化，接下来我们看下如何在 Flutter 应用，同样和 XML 以及 JSON 一样，我们继续在 lib 目录下新建一个 api_pb 文件夹，用来存放 Protocol Buffer 相关的 API 协议，这里为了演示，只创建 api_pb/user_info/index.dart 。接下来我们看下具体的代码逻辑。</p><p>先引入相应的库文件，其中第 2 行就是相应的 Protocol Buffer 文件。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/struct/user_info.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/protos/user_info.pb.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/struct/user_info.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/protos/user_info.pb.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>接下来我们看下 ApiPbUserInfoIndex 类中创建 Protocol Buffer 的代码部分，这部分逻辑放在 createUserInfo 函数中，具体代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 生成二进制内容，测试文件 </span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">createUserInfo</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">UserInfoRsp</span><span style="color:#E1E4E8;"> userInfoRsp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UserInfoRsp</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  userInfoRsp.nickName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  userInfoRsp.uid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;3001&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  userInfoRsp.headerUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://image.biaobaiju.com/uploads/20180211/00/1518279967-IAnVyPiRLK.jpg&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">&gt; retInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRsp.</span><span style="color:#B392F0;">writeToBuffer</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> retInfo; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 生成二进制内容，测试文件 </span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">createUserInfo</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">UserInfoRsp</span><span style="color:#24292E;"> userInfoRsp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UserInfoRsp</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  userInfoRsp.nickName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  userInfoRsp.uid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;3001&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  userInfoRsp.headerUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://image.biaobaiju.com/uploads/20180211/00/1518279967-IAnVyPiRLK.jpg&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">&gt; retInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRsp.</span><span style="color:#6F42C1;">writeToBuffer</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> retInfo; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码的第 2 行就是创建 Protocol Buffer 中的 Message 类，也就是我们的 UserInfo 数据结构，然后根据其数据结构，设置具体的字段值，最后调用 writeToBuffer 转化为二进制数据。</p><p>应用上面生成的二进制数据，我们再来实现 getSelfUserInfo 方法，具体代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 获取自己的个人信息 </span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getSelfUserInfo</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 该数据涞源createUserInfo函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> currentTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().microsecondsSinceEpoch; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">UserInfoRsp</span><span style="color:#E1E4E8;"> userInfoRsp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UserInfoRsp</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fromBuffer</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      [ </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">116</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">115</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">116</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">72</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">104</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">116</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">116</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">112</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">58</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">105</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">109</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">97</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">103</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">98</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">105</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">97</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">98</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">97</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">105</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">106</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">117</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">109</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">117</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">112</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">108</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">111</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">97</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">115</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">57</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">57</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">54</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">45</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">73</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">65</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">110</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">86</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">121</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">105</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">82</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">76</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">106</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">112</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">103</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">51</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      ] </span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;pb length&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(userInfoRsp.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">().length); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> dfTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DateTime</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().microsecondsSinceEpoch </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> currentTime; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;pb decode time&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(dfTime); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructUserInfo</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    userInfoRsp.uid, </span></span>
<span class="line"><span style="color:#E1E4E8;">    userInfoRsp.nickName, </span></span>
<span class="line"><span style="color:#E1E4E8;">    userInfoRsp.headerUrl </span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 获取自己的个人信息 </span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getSelfUserInfo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">async</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 该数据涞源createUserInfo函数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> currentTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().microsecondsSinceEpoch; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">UserInfoRsp</span><span style="color:#24292E;"> userInfoRsp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UserInfoRsp</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">fromBuffer</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      [ </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">116</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">115</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">116</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">72</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">104</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">116</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">116</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">112</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">58</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">105</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">109</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">97</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">103</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">46</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">98</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">105</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">97</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">98</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">97</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">105</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">106</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">117</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">46</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">109</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">117</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">112</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">108</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">97</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">115</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">56</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">47</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">53</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">56</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">55</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">57</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">57</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">54</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">55</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">45</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">73</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">65</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">110</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">86</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">121</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">105</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">82</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">76</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">75</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">46</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">106</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">112</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">103</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">51</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">48</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      ] </span></span>
<span class="line"><span style="color:#24292E;">  ); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;pb length&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(userInfoRsp.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">().length); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> dfTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DateTime</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().microsecondsSinceEpoch </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> currentTime; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;pb decode time&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(dfTime); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructUserInfo</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    userInfoRsp.uid, </span></span>
<span class="line"><span style="color:#24292E;">    userInfoRsp.nickName, </span></span>
<span class="line"><span style="color:#24292E;">    userInfoRsp.headerUrl </span></span>
<span class="line"><span style="color:#24292E;">  ); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码第 5 行是应用 createUserInfo 生成的二进制数据，利用该二进制数据调用 fromBuffer 转化为 Protocol Buffer 对象，返回的对象可以直接获取到 StructUserInfo 的相应字段： uid、nickName 和 headerUrl，具体代码在第 25 到第 28行。第 18 行打印字符串长度，第 23 行打印反序列化时间。运行上面的代码，可以看到如下打印数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pb length </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">109</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pb decode time </span></span>
<span class="line"><span style="color:#E1E4E8;">flutter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">383</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pb length </span></span>
<span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">109</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pb decode time </span></span>
<span class="line"><span style="color:#24292E;">flutter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">383</span></span></code></pre></div><p>长度和解析时长相对 JSON 协议又减少了一些，因此在带宽和解析性能方面都是优于 JSON 和 XML。由于本课时中还没有实现服务端代码，我们只能借助第三方 Mock 平台来实现网络调用，因此这里会以 JSON 协议为参考来实践本课时的 api 层代码逻辑。在实际应用中，我更倾向大家使用 Protocol Buffer 。</p><p>以上就是三种协议在 Flutter 中的应用尝试和对比，基于数据长度和解析性能对比（由于跑的数据总量不够大，因此单次运行会存在样本误差），XML 是最差的，JSON 相对较好，Protocol Buffer 是最优的，不过可读性最差，具体对比看下表格 1。</p>`,14),i=s("p",null,"表格 1 整体数据对比情况",-1),F=s("h3",{id:"代码实践",tabindex:"-1"},[n("代码实践 "),s("a",{class:"header-anchor",href:"#代码实践","aria-label":'Permalink to "代码实践"'},"​")],-1),d=s("p",null,"介绍完常见的网络传输协议序列化方式，接下来就使用 JSON 的传输协议来完善我们 api 逻辑。这里会应用到一个第三方的 Mock 平台。主要是 Mock 以下几个接口协议，如图 2 所示的结构列表。",-1),C=l(`<p>图 2 Mock 协议列表</p><p>有了具体协议 Mock 协议后，我们再来实现 Flutter 中的代码。首先我们需要创建一个通用的网络请求的类，这个类我们存放在 util/tools 目录下，命名为 call_server.dart 。Flutter 中的网络协议需要使用到 <a href="https://pub.dev/packages/dio" target="_blank" rel="noreferrer">dio</a> 这个第三方库，同样还是需要在 pubspec.yaml 增加依赖，然后更新本地库文件。接下来我们看下 call_server.dart 的代码实现。</p><h4 id="通用网络请求类实现" tabindex="-1">通用网络请求类实现 <a class="header-anchor" href="#通用网络请求类实现" aria-label="Permalink to &quot;通用网络请求类实现&quot;">​</a></h4><p>该通用网络请求类，文件存放在源码中的 lib/util/tools/call_server.dart ，接下来我们看下它的实现逻辑。</p><p>首先还是引入相应的库文件</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;dart:convert&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:dio/dio.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/tools/json_config.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;dart:convert&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:dio/dio.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/tools/json_config.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>第 1 个库是数据转化类的原生库，第 2 个库是网络请求库，第 3 个库是我们自己实现的一个工具库，该库的作用是读取一个 JSON 配置文件。</p><p>接下来我们实现 CallServer 类，在类中新增一个 get 方法，这里需要注意因为 dio 网络请求是一个异步方法，因此这里需要将 get 设计为一个 async 的方法，并返回的是一个 Future 类型，具体代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 统一调用API接口 </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CallServer</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// get 方法 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 统一调用API接口 </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CallServer</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// get 方法 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为网络请求异步返回的是一个 JSON 协议，因此需要设置返回的数据结构为 Map&lt;String, dynamic&gt; 。接下来我们看下具体的函数代码逻辑。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 根据类型，获取api具体信息 </span></span>
<span class="line"><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt; apis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JsonConfig</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;api&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(apis </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;ret&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">}; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> callApi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> apis[apiName][</span><span style="color:#9ECBFF;">&#39;apiUrl&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#6A737D;">// 处理异常情况 </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(callApi </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;ret&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">}; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 处理参数替换 </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(params </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  params.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((k, v) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> callApi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callApi.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;{$</span><span style="color:#79B8FF;">k</span><span style="color:#9ECBFF;">}&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;$</span><span style="color:#79B8FF;">v</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 调用服务端接口获取返回数据 </span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Response</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Dio</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      callApi, </span></span>
<span class="line"><span style="color:#E1E4E8;">      options</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Options</span><span style="color:#E1E4E8;">(responseType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ResponseType</span><span style="color:#E1E4E8;">.json) </span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt; retInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    json.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt;; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> retInfo; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;ret&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">}; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 根据类型，获取api具体信息 </span></span>
<span class="line"><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt; apis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JsonConfig</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getConfig</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;api&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(apis </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;ret&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">}; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#005CC5;">String</span><span style="color:#24292E;"> callApi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> apis[apiName][</span><span style="color:#032F62;">&#39;apiUrl&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#6A737D;">// 处理异常情况 </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(callApi </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;ret&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">}; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 处理参数替换 </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(params </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">  params.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((k, v) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> callApi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> callApi.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;{$</span><span style="color:#005CC5;">k</span><span style="color:#032F62;">}&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;$</span><span style="color:#005CC5;">v</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 调用服务端接口获取返回数据 </span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Response</span><span style="color:#24292E;"> response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Dio</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      callApi, </span></span>
<span class="line"><span style="color:#24292E;">      options</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Options</span><span style="color:#24292E;">(responseType</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ResponseType</span><span style="color:#24292E;">.json) </span></span>
<span class="line"><span style="color:#24292E;">  ); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt; retInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    json.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt;; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> retInfo; </span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;ret&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">}; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第 2 行读取配置文件中的 api.json 数据（配置文件需要在 pubspec.yaml 中引入，具体查看源码中的第 55 和第 56 行），该 api.json 的部分数据如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;recommendList&quot;</span><span style="color:#E1E4E8;"> : { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;method&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;get&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;apiUrl&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;https://www.fastmock.site/mock/978685eaf6950d1e2f0790f85cfdacaa/cgi-bin/recommend_list&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;params&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;recommendList&quot;</span><span style="color:#24292E;"> : { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;method&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;get&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;apiUrl&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;https://www.fastmock.site/mock/978685eaf6950d1e2f0790f85cfdacaa/cgi-bin/recommend_list&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;params&quot;</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中 JSON 部分就包括了协议名称，以及协议的请求方式和协议的 URL 以及具体的参数。</p><p>在 get 方法中，获取到 api.json 数据后，再根据协议名称，获取到协议的 URL 。接下来经过一定的数据判断和参数处理，应用 dio 模块发起 get 网络请求。最后再使用 convert 库，将结构转化为 JSON 数据结构，并返回给到调用方。</p><h4 id="apicontentindex-实现" tabindex="-1">ApiContentIndex 实现 <a class="header-anchor" href="#apicontentindex-实现" aria-label="Permalink to &quot;ApiContentIndex 实现&quot;">​</a></h4><p>通用网络请求实现后，我们再看下具体的接口调用方的实现逻辑。接下来我们修改 ApiContentIndex 中的 getRecommendList 的代码，将原来的假数据转化为网络请求。因为是异步方法，因此还是需要使用 Future 和 async ，函数代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/struct/api_ret_info.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/tools/call_server.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// 获取内容详情接口 </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ApiContentIndex</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 拉取用户内容推荐帖子列表 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">([lastId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/struct/api_ret_info.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/tools/call_server.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#6A737D;">/// 获取内容详情接口 </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ApiContentIndex</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 拉取用户内容推荐帖子列表 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">([lastId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码第一部分还是引入相应的库，第二部分创建 ApiContentIndex 类，并创建 getRecommendList 函数，该函数异步返回 StructApiContentListRetInfo 数据结构，支持可选参数 lastId ，有 lastId 则拉取下一页，没有则拉取首页内容。接下来看下 getRecommendList 函数的具体逻辑，代码如下。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 拉取用户内容推荐帖子列表 </span></span>
<span class="line"><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">([lastId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lastId </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt; retJson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CallServer</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;recommendListNext&#39;</span><span style="color:#E1E4E8;">, {lastId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> lastId}); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fromJson</span><span style="color:#E1E4E8;">(retJson); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">dynamic</span><span style="color:#E1E4E8;">&gt; retJson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CallServer</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;recommendList&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fromJson</span><span style="color:#E1E4E8;">(retJson); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 拉取用户内容推荐帖子列表 </span></span>
<span class="line"><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">([lastId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lastId </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt; retJson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CallServer</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;recommendListNext&#39;</span><span style="color:#24292E;">, {lastId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> lastId}); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">fromJson</span><span style="color:#24292E;">(retJson); </span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">dynamic</span><span style="color:#24292E;">&gt; retJson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CallServer</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;recommendList&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">fromJson</span><span style="color:#24292E;">(retJson); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码就比较简洁了，先根据 lastId 判断拉取首页还是拉取下一页，如果拉取首页，则调用 recommendList 协议，如果拉取下一页，则调用 recommendListNext 协议。使用 CallServer.get 方法与服务端交互，得到返回数据结构后，调用 StructApiContentListRetInfo.fromJson 转化为 StructApiContentListRetInfo 数据结构，这样就实现了具体的 API 协议，最后我们再来看下在页面中调用 api 的使用方法。</p><h4 id="homepageindex" tabindex="-1">HomePageIndex <a class="header-anchor" href="#homepageindex" aria-label="Permalink to &quot;HomePageIndex&quot;">​</a></h4><p>因为 ApiContentIndex 协议是在 HomePageIndex 这个类中调用，我们就来看下这块的处理逻辑，相同部分我们就不过多介绍。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 处理首次拉取和刷新数据获取动作 </span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setFirstPage</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">ApiContentIndex</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((retInfo){ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (retInfo.ret </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 判断返回是否正确 </span></span>
<span class="line"><span style="color:#E1E4E8;">      error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(() { </span></span>
<span class="line"><span style="color:#E1E4E8;">      error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">      contentList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.data; </span></span>
<span class="line"><span style="color:#E1E4E8;">      hasMore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.hasMore; </span></span>
<span class="line"><span style="color:#E1E4E8;">      isLoading </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">      lastId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.lastId; </span></span>
<span class="line"><span style="color:#E1E4E8;">    }); </span></span>
<span class="line"><span style="color:#E1E4E8;">  }); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 处理首次拉取和刷新数据获取动作 </span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setFirstPage</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">ApiContentIndex</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((retInfo){ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (retInfo.ret </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 判断返回是否正确 </span></span>
<span class="line"><span style="color:#24292E;">      error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(() { </span></span>
<span class="line"><span style="color:#24292E;">      error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">      contentList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.data; </span></span>
<span class="line"><span style="color:#24292E;">      hasMore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.hasMore; </span></span>
<span class="line"><span style="color:#24292E;">      isLoading </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">      lastId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.lastId; </span></span>
<span class="line"><span style="color:#24292E;">    }); </span></span>
<span class="line"><span style="color:#24292E;">  }); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 setFirstPage 中调用类 ApiContentIndex 中的异步方法 getRecommendList ，在 getRecommendList 回调中成功获取数据后使用 setState 更新页面状态。由于网络请求有时间延迟，因此在页面刚加载时，需要使用 loading 组件，需要更改原来的 build 方法，修改部分如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonError</span><span style="color:#E1E4E8;">(action</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.setFirstPage); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(contentList </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Loading</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (error) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonError</span><span style="color:#24292E;">(action</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.setFirstPage); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(contentList </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Loading</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>主要是第 4 行，增加了对数据的判断，如果为空则显示 loading 组件内容，具体效果如下图 3 所示。</p>`,27),u=s("p",null,"图 3 网络请求 loading 效果",-1),g=s("p",null,"以上就完成了 ApiContentIndex 部分的 getRecommendList 逻辑，其他代码逻辑基本相似，具体大家可以参考 github 上的源码。",-1),f=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),B=s("p",null,"本课时介绍了 APP 常用的三种网络传输协议序列化方式，其次介绍了 Flutter 与服务端的网络通信方法，并且通过传输协议与服务端进行交互获取数据。学完本课时后要着重掌握 JSON 和 Protocol Buffer 的使用方法，其次掌握网络请求库 CallServer 的实现原理。",-1),m=s("p",null,'下一课时我们将整理我们在 Two You APP 研发过程中所涉及的布局逻辑，介绍在 Flutter 中常见的一些布局原理和思想，并用此理论来完善我们 APP 内的"客人态页面" 的功能。',-1),h=s("p",null,[s("a",{href:"https://github.com/love-flutter/flutter-column",target:"_blank",rel:"noreferrer"},"点击此链接查看本课时源码")],-1);function A(D,b,v,I,_,k){const a=e("Image");return t(),c("div",null,[E,p(a,{alt:"image (14).png",src:"https://s0.lgstatic.com/i/image/M00/3A/39/Ciqc1F8hN7qARIvYAACMRuwnLuo133.png"}),n(),y,p(a,{alt:"image (15).png",src:"https://s0.lgstatic.com/i/image/M00/3A/45/CgqCHl8hN_CAHkTmAABBGfUbGT4406.png"}),n(),i,F,d,p(a,{alt:"image (16).png",src:"https://s0.lgstatic.com/i/image/M00/3A/3A/Ciqc1F8hOAmAc5eCAAH87tkUVJM571.png"}),n(),C,p(a,{alt:"20200717_233752.gif",src:"https://s0.lgstatic.com/i/image/M00/3A/45/CgqCHl8hOHuANKsHACSrYreWeyI011.gif"}),n(),u,g,f,B,m,h])}const j=o(r,[["render",A]]);export{q as __pageData,j as default};
