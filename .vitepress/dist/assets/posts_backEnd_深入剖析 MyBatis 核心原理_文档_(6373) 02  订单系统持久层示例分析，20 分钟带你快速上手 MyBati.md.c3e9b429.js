import{_ as o,j as e,o as t,g as r,k as p,h as n,s,Q as l}from"./chunks/framework.b3d8e22e.js";const I=JSON.parse('{"title":"domain 设计 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6373) 02  订单系统持久层示例分析，20 分钟带你快速上手 MyBati.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6373) 02  订单系统持久层示例分析，20 分钟带你快速上手 MyBati.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6373) 02  订单系统持久层示例分析，20 分钟带你快速上手 MyBati.md"},E=l(`<p>在开始深入分析 MyBatis 核心架构以及具体代码实现之前，我先通过一个示例来帮助你快速了解 MyBatis 中的常见概念以及其基础使用方法。</p><p>这里我会以<strong>一个简易订单系统的持久化层</strong>为例进行讲解，整体的讲解逻辑是这样的：</p><ul><li><p>首先介绍订单系统 domain 层的设计，了解如何将业务概念抽象成 Java 类；</p></li><li><p>接下来介绍数据库表的设计，同时说明关系型的数据库表与面向对象模型的类之间的映射关系；</p></li><li><p>随后介绍订单系统的 DAO 接口层，DAO 接口层是操作数据的最小化单元，也是读写数据库的地基；</p></li><li><p>最后再简单提供了一个 Service 层和测试用例，用来检测前面的代码实现是否能正常工作。</p></li></ul><p>现在<strong>几乎所有的 Java 工程都会使用 Maven 来管理 jar 包依赖</strong>，所以我们首先创建一个 Maven 项目，然后在 pom.xml 中添加如下 jar 依赖，这些 jar 包都是订单示例系统必不可少的依赖：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;!--MyBatis依赖--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;org.mybatis&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;mybatis&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;3.5.6&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;!--MySQL JDBC依赖，用来连接数据库--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;mysql&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;mysql-connector-java&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;8.0.15&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;!--Guava依赖--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;com.google.guava&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;guava&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;19.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;!--Junit依赖，用来执行单元测试--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.10&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;!--MyBatis依赖--&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;org.mybatis&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;mybatis&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;3.5.6&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;!--MySQL JDBC依赖，用来连接数据库--&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;mysql&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;mysql-connector-java&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;8.0.15&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;!--Guava依赖--&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;com.google.guava&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;guava&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;19.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;!--Junit依赖，用来执行单元测试--&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.10&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="domain-设计" tabindex="-1">domain 设计 <a class="header-anchor" href="#domain-设计" aria-label="Permalink to &quot;domain 设计&quot;">​</a></h3><p>在业务系统的开发中，<strong>domain 层的主要目的就是将业务上的概念抽象成面向对象模型中的类</strong>，这些类是业务系统运作的基础。在我们的简易订单系统中，有用户、地址、订单、订单条目和商品这五个核心的概念。</p><p>订单系统中 domain 层的设计，如下图所示：</p>`,8),y=l('<p>简易订单系统 domain 层设计图</p><p>在上图中，<strong>Customer 类抽象的是电商平台中的用户</strong>，其中记录了用户的唯一标识（id 字段）、姓名（name 字段）以及手机号（phone 字段），另外，还记录了当前用户添加的全部送货地址。</p><p><strong>Address 类抽象了用户的送货地址</strong>，其中记录了街道（street 字段）、城市（city 字段）、国家（country 字段）等信息，还维护了一个 Customer 类型的引用，指向所属的用户。</p><p><strong>Order 类抽象的是电商平台中的订单</strong>，记录了订单的唯一标识（id 字段）、订单创建时间（createTime 字段），其中通过 customer 字段（Customer 类型）指向了订单关联的用户，通过 deliveryAddress 字段（Address 类型）指向了该订单的送货地址。另外，还可以通过 orderItems 集合（List 集合）记录订单内的具体条目。</p><p><strong>OrderItem 类抽象了订单中的购物条目</strong>，记录了购物条目的唯一标识（id 字段），其中 product 字段（Product 类型）指向了该购物条目中具体购买的商品，amount 字段记录购买商品的个数，price 字段则是该 OrderItem 的总金额（即 Product.price * amount），Order 订单的总价格（totalPrice 字段）则是由其中全部 OrderItem 的 price 累加得到的。注意，这里的 OrderItem 总金额以及 Order 总金额，都不会持久化到数据，而是实时计算得到的。</p><p><strong>Product 类抽象了电商平台中商品的概念</strong>，其中记录了商品的唯一标识（id 字段）、商品名称（name 字段）、商品描述（description 字段）以及商品价格（price 字段）。</p><p>结合前面的介绍以及类图分析，你可以看到：</p><ul><li><p>通过 Customer.addresses 以及 Address.customer 这两个属性，维护了 Customer 与 Address 之间<strong>一对多</strong>关系；</p></li><li><p>通过 Order.customer 属性，维护了 Customer 与 Order 之间的<strong>一对多</strong>关系；</p></li><li><p>通过 Order.deliveryAddress 属性，维护了 Order 与 Address 之间的<strong>一对一</strong>关系；</p></li><li><p>通过 OrderItem.orderId 属性，维护了 Order 与 OrderItem 之间的<strong>一对多</strong>关系；</p></li><li><p>通过 OrderItem.product 属性，维护了 OrderItem 与 Product 之间的<strong>一对一</strong>关系。</p></li></ul><h3 id="数据库表设计" tabindex="-1">数据库表设计 <a class="header-anchor" href="#数据库表设计" aria-label="Permalink to &quot;数据库表设计&quot;">​</a></h3><p>介绍完 domain 层的设计，下面我们再来看对应的数据库表设计，如下图所示：</p>',10),i=l(`<p>简易订单系统数据库表设计</p><p>与前面的domain 层设计图相比，其中的各项是可以一一对应起来的。</p><ul><li><p>t_customer 表对应 Customer 类，t_product 表对应 Product 类。</p></li><li><p>t_address 表对应 Address 类，其中 customer_id 列作为外键指向 t_customer.id，实现了 Customer 与 Address 的一对多关系。</p></li><li><p>t_order_item 表对应 OrderItem 类，其中 product_id 列作为外键指向 t_product.id，实现了 OrderItem 与 Product 的一对一关系；order_id 列作为外键指向 t_order.id，实现了 Order 与 OrderItem 的一对多关系。</p></li><li><p>t_order 表对应 Order 类，其中的 customer_id 列指向 t_customer.id，实现了 Customer 与 Order 的一对多关系；address_id 列指向 t_address.id，实现了 Order 与 Address 的一对一关系。</p></li></ul><p>上述表中的其他字段与 domain 层中对应类中的字段也是一一对应，这里就不再重复了。</p><h3 id="dao-层" tabindex="-1">DAO 层 <a class="header-anchor" href="#dao-层" aria-label="Permalink to &quot;DAO 层&quot;">​</a></h3><p><strong>DAO 层主要是负责与持久化存储进行交互，完成数据持久化的相关工作</strong>，这里我们就介绍一下 如何使用 MyBatis 来开发 Java 应用中的持久层。</p><p>在 DAO 层中，需要先根据需求确定 DAO 层的基本能力，一般情况下，是针对每个 domain 类提供最基础的 CRUD 操作，之后在 DAO 层之上的 Service 层，就可以直接使用 DAO 层的接口，而无须关心底层使用的是数据库还是其他存储，也无须关心读写数据使用的是 SQL 语句还是其他查询语句，这就能够实现业务逻辑和存储的解耦。</p><h4 id="_1-dao-接口与实现" tabindex="-1">1. DAO 接口与实现 <a class="header-anchor" href="#_1-dao-接口与实现" aria-label="Permalink to &quot;1. DAO 接口与实现&quot;">​</a></h4><p>下面，我们开始介绍简易订单系统中 DAO 接口的内容。</p><p>首先是 CustomerMapper 接口，其定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerMapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据用户Id查询Customer(不查询Address)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Customer </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据用户Id查询Customer(同时查询Address)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Customer </span><span style="color:#B392F0;">findWithAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据orderId查询Customer</span></span>
<span class="line"><span style="color:#E1E4E8;">    Customer </span><span style="color:#B392F0;">findByOrderId</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 持久化Customer对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(Customer </span><span style="color:#FFAB70;">customer</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerMapper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据用户Id查询Customer(不查询Address)</span></span>
<span class="line"><span style="color:#24292E;">    Customer </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据用户Id查询Customer(同时查询Address)</span></span>
<span class="line"><span style="color:#24292E;">    Customer </span><span style="color:#6F42C1;">findWithAddress</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据orderId查询Customer</span></span>
<span class="line"><span style="color:#24292E;">    Customer </span><span style="color:#6F42C1;">findByOrderId</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 持久化Customer对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(Customer </span><span style="color:#E36209;">customer</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>定义完 CustomerMapper 接口之后，我们<strong>无须真正实现 CustomerMapper 接口，而是在 /resources/mapper 目录下配置相应的配置文件------ CustomerMapper.xml，在该文件中定义需要执行的 SQL 语句以及查询结果集的映射规则</strong>。MyBatis 底层会生成一个实现了 CustomerMapper 接口的代理对象来执行 CustomerMapper.xml 配置文件中的 SQL 语句，实现 DAO 层的功能（MyBatis 如何生成代理对象等底层原理在本课程后面会深入分析，这里就先介绍该示例系统的相关内容）。</p><p>CustomerMapper.xml 的具体定义如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namespace</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.dao.CustomerMapper&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义映射规则 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">resultMap</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;customerSimpleMap&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Customer&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!--  主键映射 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!--  属性映射 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;phone&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;phone&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">resultMap</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义映射规则 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">resultMap</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;customerMap&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Customer&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!--  主键映射 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!--  属性映射 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;phone&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;phone&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!-- 映射addresses集合，&lt;</span><span style="color:#85E89D;">collection</span><span style="color:#E1E4E8;">&gt;标签用于映射集合类的属性，实现一对多的关联关系 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">collection</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;addresses&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">javaType</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ofType</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Address&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;address_id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;street&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;street&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;city&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;city&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;country&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;country&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">collection</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">resultMap</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义select语句，CustomerMapper接口中的find()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        查询结果通过customerSimpleMap这个映射生成Customer对象--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;find&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultMap</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;customerSimpleMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SELECT * FROM t_customer WHERE id = #{id:</span><span style="color:#79B8FF;">INTEGER</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义select语句，CustomerMapper接口中的findWithAddress()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        查询结果通过customerMap这个映射生成Customer对象--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;findWithAddress&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultMap</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;customerMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SELECT c.*,a.id as address_id, a.* FROM t_customer as c join t_address as a</span></span>
<span class="line"><span style="color:#E1E4E8;">        on c.id = a.customer_id</span></span>
<span class="line"><span style="color:#E1E4E8;">        WHERE c.id = #{id:</span><span style="color:#79B8FF;">INTEGER</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- CustomerMapper接口中的findByOrderId()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        查询结果通过customerSimpleMap这个映射生成Customer对象--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;findByOrderId&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultMap</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;customerSimpleMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SELECT * FROM t_customer as c join t_order as t</span></span>
<span class="line"><span style="color:#E1E4E8;">        on c.id = t.customer_id</span></span>
<span class="line"><span style="color:#E1E4E8;">        WHERE t.customer_id = #{id:</span><span style="color:#79B8FF;">INTEGER</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义insert语句，CustomerMapper接口中的save()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        数据库生成的自增id会自动填充到传入的Customer对象的id字段中--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;save&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyProperty</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useGeneratedKeys</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      insert into t_customer (id, name, phone)</span></span>
<span class="line"><span style="color:#E1E4E8;">      values (#{id},#{name},#{phone})</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namespace</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.dao.CustomerMapper&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义映射规则 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">resultMap</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;customerSimpleMap&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Customer&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!--  主键映射 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!--  属性映射 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;phone&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;phone&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">resultMap</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义映射规则 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">resultMap</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;customerMap&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Customer&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!--  主键映射 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!--  属性映射 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;phone&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;phone&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!-- 映射addresses集合，&lt;</span><span style="color:#22863A;">collection</span><span style="color:#24292E;">&gt;标签用于映射集合类的属性，实现一对多的关联关系 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">collection</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;addresses&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">javaType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ofType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Address&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;address_id&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;street&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;street&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;city&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;city&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;country&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;country&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">collection</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">resultMap</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义select语句，CustomerMapper接口中的find()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        查询结果通过customerSimpleMap这个映射生成Customer对象--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;find&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;customerSimpleMap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        SELECT * FROM t_customer WHERE id = #{id:</span><span style="color:#005CC5;">INTEGER</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义select语句，CustomerMapper接口中的findWithAddress()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        查询结果通过customerMap这个映射生成Customer对象--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;findWithAddress&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;customerMap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        SELECT c.*,a.id as address_id, a.* FROM t_customer as c join t_address as a</span></span>
<span class="line"><span style="color:#24292E;">        on c.id = a.customer_id</span></span>
<span class="line"><span style="color:#24292E;">        WHERE c.id = #{id:</span><span style="color:#005CC5;">INTEGER</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- CustomerMapper接口中的findByOrderId()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        查询结果通过customerSimpleMap这个映射生成Customer对象--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;findByOrderId&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;customerSimpleMap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        SELECT * FROM t_customer as c join t_order as t</span></span>
<span class="line"><span style="color:#24292E;">        on c.id = t.customer_id</span></span>
<span class="line"><span style="color:#24292E;">        WHERE t.customer_id = #{id:</span><span style="color:#005CC5;">INTEGER</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义insert语句，CustomerMapper接口中的save()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        数据库生成的自增id会自动填充到传入的Customer对象的id字段中--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;save&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyProperty</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useGeneratedKeys</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      insert into t_customer (id, name, phone)</span></span>
<span class="line"><span style="color:#24292E;">      values (#{id},#{name},#{phone})</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>接下来，我们看一下 AddressMapper 接口的定义，它主要是针对 Address 对象的 CRUD：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressMapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据id查询Address对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    Address </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询一个用户的全部地址信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">customerId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询指定订单的送货地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    Address </span><span style="color:#B392F0;">findByOrderId</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 存储Address对象，同时会记录关联的Customer</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">) Address </span><span style="color:#FFAB70;">address</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              @</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;customerId&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">customerId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressMapper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据id查询Address对象</span></span>
<span class="line"><span style="color:#24292E;">    Address </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询一个用户的全部地址信息</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">customerId</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询指定订单的送货地址</span></span>
<span class="line"><span style="color:#24292E;">    Address </span><span style="color:#6F42C1;">findByOrderId</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 存储Address对象，同时会记录关联的Customer</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">) Address </span><span style="color:#E36209;">address</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              @</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;customerId&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">customerId</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AddressMapper 接口对应的 AddressMapper.xml 配置文件中，同样定义了每个方法要执行的 SQL 语句以及查询结果与 Address 对象之间的映射关系，具体定义如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namespace</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.dao.AddressMapper&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- find()、findAll()方法对应的&lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;标签以及&lt;</span><span style="color:#79B8FF;">resultMap</span><span style="color:#E1E4E8;">&gt;映射比较简单，这里不再展示，感兴趣的同学可以参考代码进行学习 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义select语句，AddressMapper接口中的findByOrderId()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">    查询结果通过addressMap这个映射生成Address对象--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;findByOrderId&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultMap</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;addressMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SELECT a.* FROM t_address as a join t_order as o</span></span>
<span class="line"><span style="color:#E1E4E8;">        on a.id = o.address_id</span></span>
<span class="line"><span style="color:#E1E4E8;">        WHERE o.address_id = #{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义insert语句，AddressMapper接口中的save()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        数据库生成的自增id会自动填充到传入的Address对象的id字段中--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;save&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyProperty</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;address.id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useGeneratedKeys</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      insert into t_address (street, city, country, customer_id)</span></span>
<span class="line"><span style="color:#E1E4E8;">      values (#{address.street},#{address.city},#{address.country},#{customerId})</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namespace</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.dao.AddressMapper&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- find()、findAll()方法对应的&lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;标签以及&lt;</span><span style="color:#005CC5;">resultMap</span><span style="color:#24292E;">&gt;映射比较简单，这里不再展示，感兴趣的同学可以参考代码进行学习 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义select语句，AddressMapper接口中的findByOrderId()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">    查询结果通过addressMap这个映射生成Address对象--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;findByOrderId&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;addressMap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        SELECT a.* FROM t_address as a join t_order as o</span></span>
<span class="line"><span style="color:#24292E;">        on a.id = o.address_id</span></span>
<span class="line"><span style="color:#24292E;">        WHERE o.address_id = #{id}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义insert语句，AddressMapper接口中的save()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        数据库生成的自增id会自动填充到传入的Address对象的id字段中--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;save&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyProperty</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;address.id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useGeneratedKeys</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      insert into t_address (street, city, country, customer_id)</span></span>
<span class="line"><span style="color:#24292E;">      values (#{address.street},#{address.city},#{address.country},#{customerId})</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>下面来看 ProductMapper 接口，其中<strong>除了根据 id 查询 Product 之外，还可以通过 name 进行模糊查询</strong>，具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProductMapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据id查询商品信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    Product </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据名称搜索商品信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Product</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存商品信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(Product </span><span style="color:#FFAB70;">product</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProductMapper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据id查询商品信息</span></span>
<span class="line"><span style="color:#24292E;">    Product </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据名称搜索商品信息</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Product</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存商品信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(Product </span><span style="color:#E36209;">product</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ProductMapper 接口对应的 ProductMapper.xml 配置文件中，定义了 Product 相关的 SQL 语句以及查询结果与 Product 对象之间的映射关系。ProductMapper.xml 配置文件中定义的 SQL 语句以及 ResultMap 映射比较简单，这里不再展示，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/mybatisDemo" target="_blank" rel="noreferrer">源码</a>进行学习。</p><p>紧接着，我们再来看 OrderItemMapper 接口的定义，其中定义了 OrderItem 对象的操作，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderItemMapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据id查询OrderItem对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    OrderItem </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询指定的订单中的全部OrderItem</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">OrderItem</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByOrderId</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存一个OrderItem信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderItem&quot;</span><span style="color:#E1E4E8;">)OrderItem </span><span style="color:#FFAB70;">orderItem</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              @</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;orderId&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderItemMapper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据id查询OrderItem对象</span></span>
<span class="line"><span style="color:#24292E;">    OrderItem </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询指定的订单中的全部OrderItem</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">OrderItem</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByOrderId</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存一个OrderItem信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderItem&quot;</span><span style="color:#24292E;">)OrderItem </span><span style="color:#E36209;">orderItem</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              @</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderId&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与之对应的 OrderItemMapper.xml 配置文件的定义如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namespace</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.dao.OrderItemMapper&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义t_order_item与OrderItem对象之间的映射关系--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">resultMap</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;orderItemtMap&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;OrderItem&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;amount&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;amount&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;orderId&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;order_id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!--映射OrderItem关联的Product对象，&lt;</span><span style="color:#85E89D;">association</span><span style="color:#E1E4E8;">&gt;标签用于实现一对一的关联关系--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">association</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;product&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">javaType</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Product&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;product_id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;price&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;price&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">association</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">resultMap</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义select语句，OrderItemMapper接口中的find()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        查询结果通过orderItemtMap这个映射生成OrderItem对象--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;find&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultMap</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;orderItemtMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SELECT i.*,p.*,p.id as product_id FROM t_order_item as i join t_product as p</span></span>
<span class="line"><span style="color:#E1E4E8;">        on i.product_id = p.id WHERE id = #{id:</span><span style="color:#79B8FF;">INTEGER</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义select语句，OrderItemMapper接口中的findAll()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        查询结果通过orderItemtMap这个映射生成OrderItem对象--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;findByOrderId&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultMap</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;orderItemtMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SELECT i.*,p.* FROM t_order_item as i join t_product as p</span></span>
<span class="line"><span style="color:#E1E4E8;">        on i.product_id = p.id WHERE i.order_id = #{order_id:</span><span style="color:#79B8FF;">INTEGER</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义insert语句，OrderItemMapper接口中的save()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        数据库生成的自增id会自动填充到传入的OrderItem对象的id字段中--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;save&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyProperty</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;orderItem.id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useGeneratedKeys</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      insert into t_order_item (amount, product_id, order_id)</span></span>
<span class="line"><span style="color:#E1E4E8;">      values (#{orderItem.amount}, #{orderItem.product.id}, #{orderId})</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namespace</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.dao.OrderItemMapper&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义t_order_item与OrderItem对象之间的映射关系--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">resultMap</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderItemtMap&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;OrderItem&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;amount&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;amount&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderId&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;order_id&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!--映射OrderItem关联的Product对象，&lt;</span><span style="color:#22863A;">association</span><span style="color:#24292E;">&gt;标签用于实现一对一的关联关系--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">association</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;product&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">javaType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Product&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;product_id&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;price&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;price&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">association</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">resultMap</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义select语句，OrderItemMapper接口中的find()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        查询结果通过orderItemtMap这个映射生成OrderItem对象--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;find&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderItemtMap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        SELECT i.*,p.*,p.id as product_id FROM t_order_item as i join t_product as p</span></span>
<span class="line"><span style="color:#24292E;">        on i.product_id = p.id WHERE id = #{id:</span><span style="color:#005CC5;">INTEGER</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义select语句，OrderItemMapper接口中的findAll()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        查询结果通过orderItemtMap这个映射生成OrderItem对象--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;findByOrderId&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderItemtMap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        SELECT i.*,p.* FROM t_order_item as i join t_product as p</span></span>
<span class="line"><span style="color:#24292E;">        on i.product_id = p.id WHERE i.order_id = #{order_id:</span><span style="color:#005CC5;">INTEGER</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义insert语句，OrderItemMapper接口中的save()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        数据库生成的自增id会自动填充到传入的OrderItem对象的id字段中--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;save&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyProperty</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderItem.id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useGeneratedKeys</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      insert into t_order_item (amount, product_id, order_id)</span></span>
<span class="line"><span style="color:#24292E;">      values (#{orderItem.amount}, #{orderItem.product.id}, #{orderId})</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>最后来看 OrderMapper 接口的定义，其中定义了查询、存储 Order 对象的相关方法，具体如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderMapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据订单Id查询</span></span>
<span class="line"><span style="color:#E1E4E8;">    Order </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询一个用户一段时间段内的订单列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Order</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByCustomerId</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">customerId</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">startTime</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">endTime</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保存一个订单</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(Order </span><span style="color:#FFAB70;">order</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderMapper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据订单Id查询</span></span>
<span class="line"><span style="color:#24292E;">    Order </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询一个用户一段时间段内的订单列表</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByCustomerId</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">customerId</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">startTime</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">endTime</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存一个订单</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(Order </span><span style="color:#E36209;">order</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与 OrderMapper 接口对应的 SQL 语句定义在 OrderMapper.xml 配置文件中，如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namespace</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.dao.OrderMapper&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义t_order表查询记录与Order对象之间映射 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">resultMap</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;orderMap&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Order&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!-- 主键映射 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!-- 属性映射 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;createTime&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;create_time&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!-- 映射customer字段 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">association</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;customer&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">javaType</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Customer&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;customer_id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">association</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!-- 映射deliveryAddress字段 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">association</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;deliveryAddress&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">javaType</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Address&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">property</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;address_id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">association</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;!-- 这里并没有映射orderItems集合--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">resultMap</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义select语句，OrderMapper接口中的find()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        查询结果通过orderMap这个映射生成Order对象--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;find&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultMap</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;orderMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SELECT * FROM t_order WHERE id = #{id:</span><span style="color:#79B8FF;">INTEGER</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义select语句，OrderMapper接口中的findByCustomerId()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        查询结果通过orderMap这个映射生成Order对象。注意这里大于号、小于号在XML中的写法--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;findByCustomerId&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resultMap</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;orderMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SELECT * FROM t_order WHERE customer_id = #{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">        and create_date_time &lt;![CDATA[ &gt;= ]]&gt; #{startTime}</span></span>
<span class="line"><span style="color:#E1E4E8;">        and  create_date_time &lt;![CDATA[ &lt;= ]]&gt; #{endTime}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;!-- 定义insert语句，OrderMapper接口中的save()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#E1E4E8;">        数据库生成的自增id会自动填充到传入的Order对象的id字段中--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;save&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyProperty</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useGeneratedKeys</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      insert into t_order (customer_id, address_id, create_time)</span></span>
<span class="line"><span style="color:#E1E4E8;">      values (#{customer.id}, #{deliveryAddress.id}, #{createTime})</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namespace</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.dao.OrderMapper&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义t_order表查询记录与Order对象之间映射 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">resultMap</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderMap&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Order&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!-- 主键映射 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!-- 属性映射 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">result</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;createTime&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;create_time&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!-- 映射customer字段 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">association</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;customer&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">javaType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Customer&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;customer_id&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">association</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!-- 映射deliveryAddress字段 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">association</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;deliveryAddress&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">javaType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Address&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">id</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;address_id&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">association</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;!-- 这里并没有映射orderItems集合--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">resultMap</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义select语句，OrderMapper接口中的find()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        查询结果通过orderMap这个映射生成Order对象--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;find&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderMap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        SELECT * FROM t_order WHERE id = #{id:</span><span style="color:#005CC5;">INTEGER</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义select语句，OrderMapper接口中的findByCustomerId()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        查询结果通过orderMap这个映射生成Order对象。注意这里大于号、小于号在XML中的写法--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;findByCustomerId&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderMap&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        SELECT * FROM t_order WHERE customer_id = #{id}</span></span>
<span class="line"><span style="color:#24292E;">        and create_date_time &lt;![CDATA[ &gt;= ]]&gt; #{startTime}</span></span>
<span class="line"><span style="color:#24292E;">        and  create_date_time &lt;![CDATA[ &lt;= ]]&gt; #{endTime}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;!-- 定义insert语句，OrderMapper接口中的save()方法会执行该SQL，</span></span>
<span class="line"><span style="color:#24292E;">        数据库生成的自增id会自动填充到传入的Order对象的id字段中--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;save&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyProperty</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useGeneratedKeys</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      insert into t_order (customer_id, address_id, create_time)</span></span>
<span class="line"><span style="color:#24292E;">      values (#{customer.id}, #{deliveryAddress.id}, #{createTime})</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="_2-daoutils-工具类" tabindex="-1">2. DaoUtils 工具类 <a class="header-anchor" href="#_2-daoutils-工具类" aria-label="Permalink to &quot;2. DaoUtils 工具类&quot;">​</a></h4><p>在 DAO 层中，除了定义上述接口和相关实现之外，还需要管理数据库连接和事务。在订单系统中，我们<strong>使用 DaoUtils 工具类来完成 MyBatis 中 SqlSession 以及事务的相关操作</strong>，这个实现非常简单，在实践中，一般会使用专门的事务管理器来管理事务。</p><p>下面是 DaoUtils 工具类的核心实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DaoUtils</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> SqlSessionFactory factory;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 在静态代码块中直接读取MyBatis的mybatis-config.xml配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        String resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mybatis-config.xml&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        InputStream inputStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            inputStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Resources.</span><span style="color:#B392F0;">getResourceAsStream</span><span style="color:#E1E4E8;">(resource);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;read mybatis-config.xml fail&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 加载完mybatis-config.xml配置文件之后，会根据其中的配置信息创建SqlSessionFactory对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SqlSessionFactoryBuilder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(inputStream);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; R </span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(Function&lt;</span><span style="color:#F97583;">SqlSession</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">function</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建SqlSession</span></span>
<span class="line"><span style="color:#E1E4E8;">        SqlSession session </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">openSession</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            R apply </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> function.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(session);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 提交事务</span></span>
<span class="line"><span style="color:#E1E4E8;">            session.</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> apply;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 出现异常的时候，回滚事务</span></span>
<span class="line"><span style="color:#E1E4E8;">            session.</span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;execute error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 关闭SqlSession</span></span>
<span class="line"><span style="color:#E1E4E8;">            session.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DaoUtils</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> SqlSessionFactory factory;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 在静态代码块中直接读取MyBatis的mybatis-config.xml配置文件</span></span>
<span class="line"><span style="color:#24292E;">        String resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mybatis-config.xml&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getResourceAsStream</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;read mybatis-config.xml fail&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 加载完mybatis-config.xml配置文件之后，会根据其中的配置信息创建SqlSessionFactory对象</span></span>
<span class="line"><span style="color:#24292E;">        factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(inputStream);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; R </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(Function&lt;</span><span style="color:#D73A49;">SqlSession</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">function</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建SqlSession</span></span>
<span class="line"><span style="color:#24292E;">        SqlSession session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">openSession</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            R apply </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> function.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(session);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 提交事务</span></span>
<span class="line"><span style="color:#24292E;">            session.</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> apply;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 出现异常的时候，回滚事务</span></span>
<span class="line"><span style="color:#24292E;">            session.</span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;execute error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 关闭SqlSession</span></span>
<span class="line"><span style="color:#24292E;">            session.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 DaoUtils 中加载的 mybatis-config.xml 配置文件位于 /resource 目录下，<strong>是 MyBatis 框架配置的入口</strong>，其中配置了要连接的数据库地址、Mapper.xml 文件的位置以及一些自定义变量和别名，具体定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">configuration</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">properties</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 定义属性值 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">properties</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">settings</span><span style="color:#F97583;">&gt;&lt;!--</span><span style="color:#E1E4E8;"> 全局配置信息 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">setting name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;cacheEnabled&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">settings</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">typeAliases</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 配置别名信息，在映射配置文件中可以直接使用Customer这个别名</span></span>
<span class="line"><span style="color:#E1E4E8;">            代替org.example.domain.Customer这个类 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">typeAlias type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.domain.Customer&quot;</span><span style="color:#E1E4E8;"> alias</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Customer&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">typeAlias type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.domain.Address&quot;</span><span style="color:#E1E4E8;"> alias</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Address&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">typeAlias type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.domain.Order&quot;</span><span style="color:#E1E4E8;"> alias</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Order&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">typeAlias type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.domain.OrderItem&quot;</span><span style="color:#E1E4E8;"> alias</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;OrderItem&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">typeAlias type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.domain.Product&quot;</span><span style="color:#E1E4E8;"> alias</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Product&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">typeAliases</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">environments </span><span style="color:#F97583;">default=</span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">environment id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 配置事务管理器的类型 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">transactionManager type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;JDBC&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 配置数据源的类型，以及数据库连接的相关信息 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dataSource type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;POOLED&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;driver&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;jdbc:mysql://localhost:3306/test&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dataSource</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">environment</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">environments</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 配置映射配置文件的位置 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mappers</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mapper resource</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;mapper/CustomerMapper.xml&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mapper resource</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;mapper/AddressMapper.xml&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mapper resource</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;mapper/OrderItemMapper.xml&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mapper resource</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;mapper/OrderMapper.xml&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">mapper resource</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;mapper/ProductMapper.xml&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">mappers</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">configuration</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">configuration</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">properties</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 定义属性值 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">properties</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">settings</span><span style="color:#D73A49;">&gt;&lt;!--</span><span style="color:#24292E;"> 全局配置信息 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">setting name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;cacheEnabled&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">settings</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">typeAliases</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 配置别名信息，在映射配置文件中可以直接使用Customer这个别名</span></span>
<span class="line"><span style="color:#24292E;">            代替org.example.domain.Customer这个类 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">typeAlias type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.domain.Customer&quot;</span><span style="color:#24292E;"> alias</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Customer&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">typeAlias type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.domain.Address&quot;</span><span style="color:#24292E;"> alias</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Address&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">typeAlias type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.domain.Order&quot;</span><span style="color:#24292E;"> alias</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Order&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">typeAlias type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.domain.OrderItem&quot;</span><span style="color:#24292E;"> alias</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;OrderItem&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">typeAlias type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.domain.Product&quot;</span><span style="color:#24292E;"> alias</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Product&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">typeAliases</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">environments </span><span style="color:#D73A49;">default=</span><span style="color:#032F62;">&quot;development&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">environment id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;development&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 配置事务管理器的类型 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">transactionManager type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;JDBC&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 配置数据源的类型，以及数据库连接的相关信息 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dataSource type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;POOLED&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;driver&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;jdbc:mysql://localhost:3306/test&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dataSource</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">environment</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">environments</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 配置映射配置文件的位置 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mappers</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mapper resource</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;mapper/CustomerMapper.xml&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mapper resource</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;mapper/AddressMapper.xml&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mapper resource</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;mapper/OrderItemMapper.xml&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mapper resource</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;mapper/OrderMapper.xml&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mapper resource</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;mapper/ProductMapper.xml&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">mappers</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">configuration</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h3 id="service-层" tabindex="-1">Service 层 <a class="header-anchor" href="#service-层" aria-label="Permalink to &quot;Service 层&quot;">​</a></h3><p>介绍完 DAO 层之后，我们接下来再来聊聊 Service 层。</p><p><strong>Service 层的核心职责是实现业务逻辑</strong> 。在 Service 层实现的业务逻辑一般要依赖到前面介绍的 DAO 层的能力，<strong>将业务逻辑封装到 Service 层可以更方便地复用业务逻辑实现，代码会显得非常简洁，系统也会更加稳定</strong>。</p><p>我们先来看 CustomerService 实现，其中提供了注册用户、添加送货地址、查询用户基本信息、查询用户全部送货地址等基本功能，具体实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建一个新用户</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">phone</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查传入的name参数以及phone参数是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(name), </span><span style="color:#9ECBFF;">&quot;name is empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(phone), </span><span style="color:#9ECBFF;">&quot;phone is empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 我们还可以完成其他业务逻辑，例如检查用户名是否重复、手机号是否重复等，这里不再展示</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 创建Customer对象，并通过CustomerMapper.save()方法完成持久化</span></span>
<span class="line"><span style="color:#E1E4E8;">            CustomerMapper mapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(CustomerMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            Customer customer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            customer.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">            customer.</span><span style="color:#B392F0;">setPhone</span><span style="color:#E1E4E8;">(phone);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> affected </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(customer);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (affected </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Save Customer fail...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> customer.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用户添加一个新的送货地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">customerId</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">street</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">city</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">country</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查传入参数是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(customerId </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;customerId is empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(street), </span><span style="color:#9ECBFF;">&quot;street is empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(city), </span><span style="color:#9ECBFF;">&quot;city is empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(country), </span><span style="color:#9ECBFF;">&quot;country is empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 我们还可以完成其他业务逻辑，例如检查该地址是否超出了送货范围等，这里不再展示</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 创建Address对象并调用AddressMapper.save()方法完成持久化</span></span>
<span class="line"><span style="color:#E1E4E8;">            AddressMapper mapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(AddressMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            Address address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            address.</span><span style="color:#B392F0;">setStreet</span><span style="color:#E1E4E8;">(street);</span></span>
<span class="line"><span style="color:#E1E4E8;">            address.</span><span style="color:#B392F0;">setCity</span><span style="color:#E1E4E8;">(city);</span></span>
<span class="line"><span style="color:#E1E4E8;">            address.</span><span style="color:#B392F0;">setCountry</span><span style="color:#E1E4E8;">(city);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> affected </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(address, customerId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (affected </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Save Customer fail...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> address.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAllAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">customerId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查用户id参数是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(customerId </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;id error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 执行AddressMapper.find()方法完成查询</span></span>
<span class="line"><span style="color:#E1E4E8;">            AddressMapper mapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(AddressMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(customerId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Customer </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查用户id参数是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(id </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;id error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 执行CustomerMapper.find()方法完成查询</span></span>
<span class="line"><span style="color:#E1E4E8;">            CustomerMapper mapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(CustomerMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Customer </span><span style="color:#B392F0;">findWithAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查用户id参数是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(id </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;id error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 执行CustomerMapper.findWithAddress()方法完成查询</span></span>
<span class="line"><span style="color:#E1E4E8;">            CustomerMapper mapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(CustomerMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mapper.</span><span style="color:#B392F0;">findWithAddress</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建一个新用户</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">phone</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查传入的name参数以及phone参数是否合法</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(name), </span><span style="color:#032F62;">&quot;name is empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(phone), </span><span style="color:#032F62;">&quot;phone is empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 我们还可以完成其他业务逻辑，例如检查用户名是否重复、手机号是否重复等，这里不再展示</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建Customer对象，并通过CustomerMapper.save()方法完成持久化</span></span>
<span class="line"><span style="color:#24292E;">            CustomerMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(CustomerMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            Customer customer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            customer.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">            customer.</span><span style="color:#6F42C1;">setPhone</span><span style="color:#24292E;">(phone);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> affected </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(customer);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (affected </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Save Customer fail...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> customer.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用户添加一个新的送货地址</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addAddress</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">customerId</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">street</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">city</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">country</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查传入参数是否合法</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(customerId </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;customerId is empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(street), </span><span style="color:#032F62;">&quot;street is empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(city), </span><span style="color:#032F62;">&quot;city is empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(country), </span><span style="color:#032F62;">&quot;country is empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 我们还可以完成其他业务逻辑，例如检查该地址是否超出了送货范围等，这里不再展示</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建Address对象并调用AddressMapper.save()方法完成持久化</span></span>
<span class="line"><span style="color:#24292E;">            AddressMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(AddressMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            Address address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            address.</span><span style="color:#6F42C1;">setStreet</span><span style="color:#24292E;">(street);</span></span>
<span class="line"><span style="color:#24292E;">            address.</span><span style="color:#6F42C1;">setCity</span><span style="color:#24292E;">(city);</span></span>
<span class="line"><span style="color:#24292E;">            address.</span><span style="color:#6F42C1;">setCountry</span><span style="color:#24292E;">(city);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> affected </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(address, customerId);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (affected </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Save Customer fail...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> address.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAllAddress</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">customerId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查用户id参数是否合法</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(customerId </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;id error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 执行AddressMapper.find()方法完成查询</span></span>
<span class="line"><span style="color:#24292E;">            AddressMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(AddressMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(customerId);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Customer </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查用户id参数是否合法</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(id </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;id error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 执行CustomerMapper.find()方法完成查询</span></span>
<span class="line"><span style="color:#24292E;">            CustomerMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(CustomerMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Customer </span><span style="color:#6F42C1;">findWithAddress</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查用户id参数是否合法</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(id </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;id error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 执行CustomerMapper.findWithAddress()方法完成查询</span></span>
<span class="line"><span style="color:#24292E;">            CustomerMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(CustomerMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">findWithAddress</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来看 ProductService 实现，其中提供了新增商品、根据 id 精确查询商品以及根据名称模糊查询商品的基础功能，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProductService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建商品</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createProduct</span><span style="color:#E1E4E8;">(Product </span><span style="color:#FFAB70;">product</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查product中的各个字段是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(product </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;product is null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(product.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()), </span><span style="color:#9ECBFF;">&quot;product name is empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(product.</span><span style="color:#B392F0;">getDescription</span><span style="color:#E1E4E8;">()), </span><span style="color:#9ECBFF;">&quot;description name is empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(product.</span><span style="color:#B392F0;">getPrice</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigDecimal</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;price&lt;=0 error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 通过ProductMapper中的save()方法完成持久化</span></span>
<span class="line"><span style="color:#E1E4E8;">            ProductMapper productMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(ProductMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> productMapper.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(product);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Product </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">productId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查productId参数是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(productId </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;product id error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 通过ProductMapper中的find()方法精确查询Product</span></span>
<span class="line"><span style="color:#E1E4E8;">            ProductMapper productMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(ProductMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> productMapper.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(productId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Product</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">productName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查productName参数是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(productName), </span><span style="color:#9ECBFF;">&quot;product id error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 根据productName模糊查询Product </span></span>
<span class="line"><span style="color:#E1E4E8;">            ProductMapper productMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(ProductMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> productMapper.</span><span style="color:#B392F0;">findByName</span><span style="color:#E1E4E8;">(productName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProductService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建商品</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createProduct</span><span style="color:#24292E;">(Product </span><span style="color:#E36209;">product</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查product中的各个字段是否合法</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(product </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;product is null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(product.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()), </span><span style="color:#032F62;">&quot;product name is empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(product.</span><span style="color:#6F42C1;">getDescription</span><span style="color:#24292E;">()), </span><span style="color:#032F62;">&quot;description name is empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(product.</span><span style="color:#6F42C1;">getPrice</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;price&lt;=0 error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 通过ProductMapper中的save()方法完成持久化</span></span>
<span class="line"><span style="color:#24292E;">            ProductMapper productMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(ProductMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> productMapper.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(product);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Product </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">productId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查productId参数是否合法</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(productId </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;product id error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 通过ProductMapper中的find()方法精确查询Product</span></span>
<span class="line"><span style="color:#24292E;">            ProductMapper productMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(ProductMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> productMapper.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(productId);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Product</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">productName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查productName参数是否合法</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(productName), </span><span style="color:#032F62;">&quot;product id error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 根据productName模糊查询Product </span></span>
<span class="line"><span style="color:#24292E;">            ProductMapper productMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(ProductMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> productMapper.</span><span style="color:#6F42C1;">findByName</span><span style="color:#24292E;">(productName);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，再来看 OrderService 对 Order 订单业务的封装，其中封装了创建订单和查询订单的逻辑，另外，还提供了实时计算订单总价的功能，具体实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建订单</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">(Order </span><span style="color:#FFAB70;">order</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(order </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;order is null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(order.</span><span style="color:#B392F0;">getOrderItems</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> order.</span><span style="color:#B392F0;">getOrderItems</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;orderItems is empty&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            OrderMapper orderMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(OrderMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            OrderItemMapper orderItemMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(OrderItemMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 调用OrderMapper.save()方法完成订单的持久化</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> affected </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderMapper.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(order);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (affected </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Save Order fail...&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> orderId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> order.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (OrderItem orderItem </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> order.</span><span style="color:#B392F0;">getOrderItems</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 通过OrderItemMapper完成OrderItem的持久化</span></span>
<span class="line"><span style="color:#E1E4E8;">                orderItemMapper.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(orderItem, orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orderId;</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据订单id查询订单的全部信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Order </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">orderId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检查orderId参数是否合法</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(orderId </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;orderId error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DaoUtils.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(sqlSession </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 查询该订单关联的全部OrderItem</span></span>
<span class="line"><span style="color:#E1E4E8;">            OrderItemMapper orderItemMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(OrderItemMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">OrderItem</span><span style="color:#E1E4E8;">&gt; orderItems </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderItemMapper.</span><span style="color:#B392F0;">findByOrderId</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 查询订单本身的信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            OrderMapper orderMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(OrderMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderMapper.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            order.</span><span style="color:#B392F0;">setOrderItems</span><span style="color:#E1E4E8;">(orderItems);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 计算订单总额</span></span>
<span class="line"><span style="color:#E1E4E8;">            order.</span><span style="color:#B392F0;">setTotalPrice</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">calculateTotalPrice</span><span style="color:#E1E4E8;">(order));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 查询订单关联的Address</span></span>
<span class="line"><span style="color:#E1E4E8;">            AddressMapper addressMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(AddressMapper.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            Address address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addressMapper.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(order.</span><span style="color:#B392F0;">getDeliveryAddress</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            order.</span><span style="color:#B392F0;">setDeliveryAddress</span><span style="color:#E1E4E8;">(address);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> order;</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> BigDecimal </span><span style="color:#B392F0;">calculateTotalPrice</span><span style="color:#E1E4E8;">(Order </span><span style="color:#FFAB70;">order</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">OrderItem</span><span style="color:#E1E4E8;">&gt; orderItems </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> order.</span><span style="color:#B392F0;">getOrderItems</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        BigDecimal totalPrice </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigDecimal</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (OrderItem orderItem </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> orderItems) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            BigDecimal itemPrice </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderItem.</span><span style="color:#B392F0;">getProduct</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPrice</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigDecimal</span><span style="color:#E1E4E8;">(orderItem.</span><span style="color:#B392F0;">getAmount</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">            orderItem.</span><span style="color:#B392F0;">setPrice</span><span style="color:#E1E4E8;">(itemPrice);</span></span>
<span class="line"><span style="color:#E1E4E8;">            totalPrice.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(itemPrice);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> totalPrice;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建订单</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">(Order </span><span style="color:#E36209;">order</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(order </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;order is null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(order.</span><span style="color:#6F42C1;">getOrderItems</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">getOrderItems</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;orderItems is empty&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            OrderMapper orderMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(OrderMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            OrderItemMapper orderItemMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(OrderItemMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 调用OrderMapper.save()方法完成订单的持久化</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> affected </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderMapper.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(order);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (affected </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Save Order fail...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> orderId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (OrderItem orderItem </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">getOrderItems</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 通过OrderItemMapper完成OrderItem的持久化</span></span>
<span class="line"><span style="color:#24292E;">                orderItemMapper.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(orderItem, orderId);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> orderId;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据订单id查询订单的全部信息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Order </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">orderId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查orderId参数是否合法</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(orderId </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;orderId error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DaoUtils.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(sqlSession </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 查询该订单关联的全部OrderItem</span></span>
<span class="line"><span style="color:#24292E;">            OrderItemMapper orderItemMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(OrderItemMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">OrderItem</span><span style="color:#24292E;">&gt; orderItems </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderItemMapper.</span><span style="color:#6F42C1;">findByOrderId</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 查询订单本身的信息</span></span>
<span class="line"><span style="color:#24292E;">            OrderMapper orderMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(OrderMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderMapper.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"><span style="color:#24292E;">            order.</span><span style="color:#6F42C1;">setOrderItems</span><span style="color:#24292E;">(orderItems);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 计算订单总额</span></span>
<span class="line"><span style="color:#24292E;">            order.</span><span style="color:#6F42C1;">setTotalPrice</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">calculateTotalPrice</span><span style="color:#24292E;">(order));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 查询订单关联的Address</span></span>
<span class="line"><span style="color:#24292E;">            AddressMapper addressMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(AddressMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">            Address address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addressMapper.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(order.</span><span style="color:#6F42C1;">getDeliveryAddress</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            order.</span><span style="color:#6F42C1;">setDeliveryAddress</span><span style="color:#24292E;">(address);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BigDecimal </span><span style="color:#6F42C1;">calculateTotalPrice</span><span style="color:#24292E;">(Order </span><span style="color:#E36209;">order</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">OrderItem</span><span style="color:#24292E;">&gt; orderItems </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> order.</span><span style="color:#6F42C1;">getOrderItems</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        BigDecimal totalPrice </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (OrderItem orderItem </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> orderItems) {</span></span>
<span class="line"><span style="color:#24292E;">            BigDecimal itemPrice </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderItem.</span><span style="color:#6F42C1;">getProduct</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPrice</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#24292E;">(orderItem.</span><span style="color:#6F42C1;">getAmount</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">            orderItem.</span><span style="color:#6F42C1;">setPrice</span><span style="color:#24292E;">(itemPrice);</span></span>
<span class="line"><span style="color:#24292E;">            totalPrice.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(itemPrice);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> totalPrice;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="测试用例" tabindex="-1">测试用例 <a class="header-anchor" href="#测试用例" aria-label="Permalink to &quot;测试用例&quot;">​</a></h3><p>介绍完 Service 之后，下面我们就来编写一个简单的测试用例，测试一下 Service 层和 DAO 层的实现是否正确，具体的测试用例如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerServiceTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> CustomerService customerService;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> OrderService orderService;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ProductService productService;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Before</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">// 执行测试用例之前，初始化Service层的各个实现</span></span>
<span class="line"><span style="color:#E1E4E8;">        customerService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerService</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderService</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        productService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProductService</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test01</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建一个用户</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> customerId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> customerService.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;杨四正&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;12345654321&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 为用户添加一个配送地址</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> addressId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> customerService.</span><span style="color:#B392F0;">addAddress</span><span style="color:#E1E4E8;">(customerId,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;牛栏村&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;牛栏市&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;矮人国&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(addressId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 查询用户信息以及地址信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        Customer customer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> customerService.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(customerId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(customer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Customer customer2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> customerService.</span><span style="color:#B392F0;">findWithAddress</span><span style="color:#E1E4E8;">(customerId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(customer2);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; addressList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> customerService.</span><span style="color:#B392F0;">findAllAddress</span><span style="color:#E1E4E8;">(customerId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        addressList.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 入库一些商品</span></span>
<span class="line"><span style="color:#E1E4E8;">        Product product </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Product</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        product.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MyBatis课程&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        product.</span><span style="color:#B392F0;">setDescription</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;深入MyBatis源码的视频教程&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        product.</span><span style="color:#B392F0;">setPrice</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BigDecimal</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> productId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> productService.</span><span style="color:#B392F0;">createProduct</span><span style="color:#E1E4E8;">(product);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;create productId:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> productId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建一个订单</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Order</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setCustomer</span><span style="color:#E1E4E8;">(customer); </span><span style="color:#6A737D;">// 买家</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setDeliveryAddress</span><span style="color:#E1E4E8;">(addressList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 配送地址</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成购买条目</span></span>
<span class="line"><span style="color:#E1E4E8;">        OrderItem orderItem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrderItem</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderItem.</span><span style="color:#B392F0;">setAmount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        orderItem.</span><span style="color:#B392F0;">setProduct</span><span style="color:#E1E4E8;">(product);</span></span>
<span class="line"><span style="color:#E1E4E8;">        order.</span><span style="color:#B392F0;">setOrderItems</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(orderItem));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> orderId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderService.</span><span style="color:#B392F0;">createOrder</span><span style="color:#E1E4E8;">(order);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;create orderId:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Order order2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> orderService.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(orderId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(order2);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerServiceTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> CustomerService customerService;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> OrderService orderService;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ProductService productService;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Before</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// 执行测试用例之前，初始化Service层的各个实现</span></span>
<span class="line"><span style="color:#24292E;">        customerService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerService</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        orderService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderService</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        productService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProductService</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test01</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建一个用户</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> customerId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> customerService.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;杨四正&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;12345654321&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 为用户添加一个配送地址</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> addressId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> customerService.</span><span style="color:#6F42C1;">addAddress</span><span style="color:#24292E;">(customerId,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;牛栏村&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;牛栏市&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;矮人国&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(addressId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 查询用户信息以及地址信息</span></span>
<span class="line"><span style="color:#24292E;">        Customer customer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> customerService.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(customerId);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(customer);</span></span>
<span class="line"><span style="color:#24292E;">        Customer customer2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> customerService.</span><span style="color:#6F42C1;">findWithAddress</span><span style="color:#24292E;">(customerId);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(customer2);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; addressList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> customerService.</span><span style="color:#6F42C1;">findAllAddress</span><span style="color:#24292E;">(customerId);</span></span>
<span class="line"><span style="color:#24292E;">        addressList.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 入库一些商品</span></span>
<span class="line"><span style="color:#24292E;">        Product product </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Product</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        product.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MyBatis课程&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        product.</span><span style="color:#6F42C1;">setDescription</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;深入MyBatis源码的视频教程&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        product.</span><span style="color:#6F42C1;">setPrice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigDecimal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">99</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> productId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> productService.</span><span style="color:#6F42C1;">createProduct</span><span style="color:#24292E;">(product);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;create productId:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> productId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建一个订单</span></span>
<span class="line"><span style="color:#24292E;">        Order order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setCustomer</span><span style="color:#24292E;">(customer); </span><span style="color:#6A737D;">// 买家</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setDeliveryAddress</span><span style="color:#24292E;">(addressList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 配送地址</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成购买条目</span></span>
<span class="line"><span style="color:#24292E;">        OrderItem orderItem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderItem</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        orderItem.</span><span style="color:#6F42C1;">setAmount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        orderItem.</span><span style="color:#6F42C1;">setProduct</span><span style="color:#24292E;">(product);</span></span>
<span class="line"><span style="color:#24292E;">        order.</span><span style="color:#6F42C1;">setOrderItems</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(orderItem));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> orderId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderService.</span><span style="color:#6F42C1;">createOrder</span><span style="color:#24292E;">(order);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;create orderId:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> orderId);</span></span>
<span class="line"><span style="color:#24292E;">        Order order2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> orderService.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(orderId);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(order2);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲，我们介绍了如何使用 MyBatis 实现简易订单系统的持久化层：首先介绍了订单系统 domain 层的设计，将用户、订单、商品等业务概念抽象成了对应的 Customer、Order、Product 等 Java 类；接下来分析了订单系统持久层中数据库表的设计，主要是从关系模型角度抽象业务概念；随后又讲解了订单系统的 DAO 接口层，定义了操作数据的基本方法；最后我们提供了一个 Service 类去实现简单的业务逻辑以及相关的测试用例。</p><p>在本讲的末尾，我给你留一个小任务：在现有源码基础上，将各个 DAO 接口的实现调通，并编写对应的单元测试进行检查。</p><p>在下一讲，我会介绍 MyBatis 中核心模块的功能以及 MyBatis 源码环境的搭建，记得按时来听课。</p><hr>`,52),d={href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},F=s("p",null,[s("strong",null,"《Java 工程师高薪训练营》")],-1),u=s("p",null,[n("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),n("！")],-1);function m(A,g,C,D,q,B){const a=e("Image");return t(),r("div",null,[E,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8F/DC/CgqCHmAJK4eAXeXQAACJoVb_GUk600.png"}),n(),y,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/8F/DC/CgqCHmAJK5mAIH-vAAB6RUBTHlw421.png"}),n(),i,s("p",null,[s("a",d,[p(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"})])]),F,u])}const M=o(c,[["render",m]]);export{I as __pageData,M as default};
