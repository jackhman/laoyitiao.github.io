import{_ as o,D as e,o as t,g as r,J as n,h as a,Q as p,m as l}from"./chunks/framework.f67d7268.js";const N=JSON.parse('{"title":"彩蛋聊聊我的大厂面试经历，谈谈我对算法学习的看法","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6713) 彩蛋  聊聊我的大厂面试经历，谈谈我对算法学习的看法.md","filePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6713) 彩蛋  聊聊我的大厂面试经历，谈谈我对算法学习的看法.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/数据结构与算法面试宝典_文档/(6713) 彩蛋  聊聊我的大厂面试经历，谈谈我对算法学习的看法.md"},E=p('<h1 id="彩蛋聊聊我的大厂面试经历-谈谈我对算法学习的看法" tabindex="-1">彩蛋聊聊我的大厂面试经历，谈谈我对算法学习的看法 <a class="header-anchor" href="#彩蛋聊聊我的大厂面试经历-谈谈我对算法学习的看法" aria-label="Permalink to &quot;彩蛋聊聊我的大厂面试经历，谈谈我对算法学习的看法&quot;">​</a></h1><p>今天我想和你聊聊我的大厂面试经历，谈谈我对算法学习的看法。</p><p>我会分成三个阶段向你介绍。</p><ul><li><p>面试前：如何准备面试。</p></li><li><p>面试中：面试/笔试中的注意事项。</p></li><li><p>面试后：如何回答问题与提问题。</p></li></ul><p>就职现公司之前，我用一个月的时间通关了 10+ 家公司，顺利地拿下了腾讯、头条、蚂蚁、美团、eBay、微软等大厂的 Offer。</p><p>借着这个机会，我也把自己总结的&quot;面经&quot;分享给你。希望能够助力你早日拿下梦想中的职位。</p><h3 id="面试前的准备" tabindex="-1">面试前的准备 <a class="header-anchor" href="#面试前的准备" aria-label="Permalink to &quot;面试前的准备&quot;">​</a></h3><p>如果把面试比作打仗，那么在出发前我们需要确定的两件事。</p><ul><li><p>&quot;粮草&quot;：需要储备什么样的&quot;知识&quot;才能去面试？以及如何准备？</p></li><li><p>&quot;对手&quot;：职位要求是什么？公司是做什么的？他们的业务有哪些特点？</p></li></ul><h4 id="知识的储备" tabindex="-1">知识的储备 <a class="header-anchor" href="#知识的储备" aria-label="Permalink to &quot;知识的储备&quot;">​</a></h4><p>一般而言，我们会把需要准备的知识分为 3 块：</p><ul><li><p>项目经历</p></li><li><p>基础知识</p></li><li><p>算法与数据结构</p></li></ul><p>这里，我首先需要重点提出来的是&quot;项目&quot;上的准备。根据我多年的面试经验，很多候选人并没有认真地准备这一块。所以，我认为有必要说一下具体应该如何准备。</p><p>面试的时候，一般开头都会问你的项目经历，有些公司甚至在面试中的某一轮只涉及项目相关的知识，完全不涉及写题。所以，你的&quot;项目经历&quot;准备得是否充分有时候也会直接影响面试结果。</p><p><strong>1. 项目经历 5 步法</strong></p><p>一般而言，只要介绍两段项目经历就够了。然后，针对这两个项目，你需要回答以下 5 个问题：</p><ul><li><p>为什么会有这个项目？</p></li><li><p>为什么这样设计？</p></li><li><p>你在项目里面的角色是什么？你做了什么？</p></li><li><p>项目中有什么特别困难（出彩/你做得最好）的地方？你是如何克服的？</p></li><li><p>你在项目中的收获是什么？</p></li></ul><p>针对这 5 个问题，你的答案需要满足以下三个特点。</p><ul><li><p>清晰流畅：平时有空闲时间，一定要像批改作文一样，批改自己准备的答案。</p></li><li><p>突出重点：不要介绍无关紧要的内容，面试的每一分钟都是展示你的机会，不要浪费。</p></li><li><p>自我提问：在一些关键的细节上要做到非常清楚，想象一下面试官可能会提出哪些问题。<br><strong>2. 基础知识</strong></p></li></ul><p>基础知识的准备，需要根据以下 3 方面展开。</p><ul><li><p>项目经历：有的基础知识会直接从项目经历展开，比如数据库开发，那么大概率会问到 B+ 树。</p></li><li><p>职位性质：比如，如果你面试的是微服务，那么关于服务治理的基础知识就需要多记忆一下。</p></li><li><p>公司特点：有的公司对于过往的经历和项目并不是特别看重，那么他们对基础知识的考察就会相对多一些，比如操作系统、计算机网络等。</p></li></ul><p>我个人的准备顺序是：项目经历、职位性质、公司特点，优先级由高到低。</p><p><strong>3. 算法与数据结构</strong></p><p>算法与数据结构的准备，时间上我一般分为三个阶段。</p><ul><li><p>重点准备的知识点</p></li><li><p>刷题与整理模板</p></li><li><p>模板复习与重点题目突击</p></li></ul><p><strong>重点知识点</strong>：算法与数据结构的面试，并不需要准备到算法竞赛的程度。下图是我整理的面试常考知识点：</p>',26),y=p(`<p><strong>刷题与模板</strong>：刷题的时候，需要注意：</p><ul><li><p>按照 tag 刷；</p></li><li><p>刷题的难度应该集中在中等难度；</p></li><li><p>按照&quot;一解多题&quot;的方式整理好知识点与模板。</p></li></ul><p>这一阶段刷题结束之后，你的产出就是像<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6711&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《22 | 数据结构模板：如何让解题变成搭积木？》</a><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6712&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《</a><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6712&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">23 | 算法模板：如何让高频算法考点秒变默写题？</a><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6712&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">》</a>给出的思维导图和代码模板。</p><p><strong>复习与突击</strong>：主要分为模板与题目。你需要对模板代码中的思路，涉及的代码和细节都非常熟悉。</p><p>重点题目：我们应该按照&quot;一题多解&quot;的方式来过一遍重点题目，比如那些具有代表性的题目，并且在求解的时候，尽量使用我们整理过的模板。</p><h3 id="面试现场" tabindex="-1">面试现场 <a class="header-anchor" href="#面试现场" aria-label="Permalink to &quot;面试现场&quot;">​</a></h3><p>接下来，介绍一下我在各个大厂的面试经历，以及前面部分没有介绍过的题目。</p><p>注：涉及的公司名称我均用随机的大写字母来表示。</p><h4 id="x-公司-第一轮" tabindex="-1">X 公司：第一轮 <a class="header-anchor" href="#x-公司-第一轮" aria-label="Permalink to &quot;X 公司：第一轮&quot;">​</a></h4><p>第一轮，在聊过各种项目细节之后。便打开了某客的平台开始算法笔试。余下的时间大概只有 20 分钟。</p><p>面试官：&quot;现在我们开始写一个算法题吧。题目是这样，我给你一个树的前序和中序遍历，你能把这棵树给恢复出来吗？&quot;</p><p>我：&quot;请问一下，这个树是二叉树吗？二叉树里面会有重复元素吗？&quot;</p><blockquote><p>点评：给出题目之后，不要马上开始写代码，一定要与面试官沟通题意，可以当成在与客户进行沟通！因为这里的题意实际上非常含糊，没有说清楚是什么树，也没有说清楚是否有重复元素。一定不要马上往你刷过的题上去套路面试官。</p></blockquote><p>面试官：&quot;是二叉树，并且保证二叉树里面没有重复的元素！&quot;</p><p>我：&quot;那给定的前序遍历和中序遍历是数组吗？给定的输入是合法的吧，我不需要去处理非法的情况吧。&quot;</p><p>面试官：&quot;是的。我们假定给你的输入肯定都是可以恢复出一棵二叉树的。&quot;</p><p>我：&quot;好的，那我写一个接口给你看一下。&quot;</p><p>于是根据面试官的要求，我写出了二叉树结点的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  TreeNode </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  TreeNode </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) { val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x; }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  TreeNode </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  TreeNode </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) { val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以及接口的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TreeNode </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] preorder, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] inorder);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TreeNode </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] preorder, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] inorder);</span></span></code></pre></div><p>接下来，我并没有立马开始写代码，而是马上与面试官过了一个简单的 Case，确保我对题意的理解是准确的。</p><p>我：&quot;如果输入 preorder = [1, 2, 3], inorder = [2, 1, 3]。那么返回的树的结构是根结点为 1，左子结点是 2，右子结点为 3。对吗？所以这棵二叉树可以不是二叉搜索树吧？&quot;</p><p>面试官：&quot;是的，开始写吧。&quot;</p><p>下面和你分享一下我的解题的思路。</p><ul><li><p>前序遍历：根结点，左子树的所有结点，右子树的所有结点。</p></li><li><p>中序遍历：左子树的所有结点，根结点，右子树的所有结点。</p></li></ul><p>那么，首先我可以通过前序遍历拿到根结点，然后在中序遍历中找到根结点，就可以将两个数组成功切分成三部分，如下图所示：</p>`,27),i=p(`<p>切分成三部分之后，我们可以再分别用相应的子数组构建子树。因此，整个问题遍历是类似于个递归 + 二叉树的前序遍历。</p><p>于是我开始写出第一份代码（我在真实面试中并没有写代码注释，写在这里是为了方便你查看)：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TreeNode </span><span style="color:#B392F0;">createTree</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] preorder, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> e,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] inorder, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> f, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果只有一个结点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;">(preorder[b]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 利用根结点来切分中序</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rootValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preorder[b];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 找到根结点在中序遍历中的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rootPos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findPos</span><span style="color:#E1E4E8;">(inorder, f, t, rootValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建根结点</span></span>
<span class="line"><span style="color:#E1E4E8;">  TreeNode root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;">(rootValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 利用在中序遍历中找到的根结点，将数组分为三部分</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 分别计算出左子树与右子树的长度</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> leftLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rootPos </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> f;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rightLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> rootPos </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 左子树</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// preorder里面左子树的范围 =&gt; [b + 1, b + 1 + leftLlen)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// inorder里面左子树的范围  =&gt; [f, rootPos)</span></span>
<span class="line"><span style="color:#E1E4E8;">  root.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTree</span><span style="color:#E1E4E8;">(preorder, b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> leftLen,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         inorder, f, rootPos);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 右子树</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// preorder右子树的范围 =&gt; [b + 1 + leftLen , e)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// inorder里面右子树的范围 =&gt; [rootPos + 1, t]</span></span>
<span class="line"><span style="color:#E1E4E8;">  root.right </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">createTree</span><span style="color:#E1E4E8;">(preorder, b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> leftLen, e,</span></span>
<span class="line"><span style="color:#E1E4E8;">               inorder, rootPos </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, t);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findPos</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] inorder, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> f, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> t; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (inorder[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">TreeNode </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] preorder, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] inorder) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preorder </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> preorder.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (N </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTree</span><span style="color:#E1E4E8;">(preorder, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, N, inorder, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, N);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TreeNode </span><span style="color:#6F42C1;">createTree</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] preorder, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> e,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] inorder, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> f, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果只有一个结点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">(preorder[b]);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 利用根结点来切分中序</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rootValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preorder[b];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 找到根结点在中序遍历中的位置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rootPos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findPos</span><span style="color:#24292E;">(inorder, f, t, rootValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建根结点</span></span>
<span class="line"><span style="color:#24292E;">  TreeNode root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">(rootValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 利用在中序遍历中找到的根结点，将数组分为三部分</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 分别计算出左子树与右子树的长度</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> leftLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rootPos </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> f;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rightLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> rootPos </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 左子树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// preorder里面左子树的范围 =&gt; [b + 1, b + 1 + leftLlen)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// inorder里面左子树的范围  =&gt; [f, rootPos)</span></span>
<span class="line"><span style="color:#24292E;">  root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTree</span><span style="color:#24292E;">(preorder, b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> leftLen,</span></span>
<span class="line"><span style="color:#24292E;">                         inorder, f, rootPos);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 右子树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// preorder右子树的范围 =&gt; [b + 1 + leftLen , e)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// inorder里面右子树的范围 =&gt; [rootPos + 1, t]</span></span>
<span class="line"><span style="color:#24292E;">  root.right </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">createTree</span><span style="color:#24292E;">(preorder, b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> leftLen, e,</span></span>
<span class="line"><span style="color:#24292E;">               inorder, rootPos </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, t);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findPos</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] inorder, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> f, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> t; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inorder[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">TreeNode </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] preorder, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] inorder) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preorder </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> preorder.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (N </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTree</span><span style="color:#24292E;">(preorder, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, N, inorder, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, N);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>当代码写完之后，我还写了一些测试用例，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TEST_null</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TEST_length0</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] preorder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] inorder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;">(preorder, inorder);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TEST_single</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] preorder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] { </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] inorder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] { </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">  TreeNode ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;">(preorder, inorder);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> ret.val </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> ret.left </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> ret.right </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TEST_two</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] preorder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] { </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] inorder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] { </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">  TreeNode ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;">(preorder, inorder);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> ret.val;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> ret.right.val;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//.. 由于篇幅，我省略了一些暴力+大数据量的测试用例</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TEST_null</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TEST_length0</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] preorder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] inorder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;">(preorder, inorder);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TEST_single</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] preorder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] { </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] inorder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] { </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">  TreeNode ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;">(preorder, inorder);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> ret.val </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> ret.left </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> ret.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TEST_two</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] preorder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] { </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] inorder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] { </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">  TreeNode ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;">(preorder, inorder);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ret.val;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ret.right.val;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//.. 由于篇幅，我省略了一些暴力+大数据量的测试用例</span></span></code></pre></div><blockquote><p>点评：写完代码之后，不要立马交卷，好好写一些测试还是非常有必要的！</p></blockquote><p>面试官看了一下代码，说：&quot;那你这个时间复杂度是多少呢？&quot;</p><p>我开始仔细地盘算，首先这段代码实际上是需要把数组切分为三部分，这段代码和我们学过的&quot;三路切分&quot;快排是非常类似的，那么时间复杂度应该是 O(NlgN)，其中 N 表示数组的长度。</p><p>然后我再想最差的情况。比如，如果二叉树是如下图所示的一种结构：</p>`,10),F=p(`<p>那么，preorder = [1, 2, 3, 4]; inorder = [4,3,2,1]。由于每次查找的时候都是顺序查找，那么整个时间复杂度就会达到 O(N^2^)。</p><blockquote><p>这段代码与快排非常类似，因此，快排的时间复杂度分析就在这里用上了。</p></blockquote><p>我回答面试官：&quot;时间复杂度正常情况下是 O(NlgN)，最差会达到 O(N^2^)。&quot;</p><p>面试官：&quot;有什么优化的方法吗？&quot;</p><p>我开始思考，首先建树的框架肯定是对的，那么时间的消耗应该就是在查找根结点的位置。我想到每个元素都不一样，是不是可以用哈希把每个元素的位置记录下来，这样就不用查找了。</p><p>我问：&quot;可以使用哈希把每个元素在中序遍历的位置记下来，这样就可以省略掉查找的时间，那么时间复杂度就会下降到 O(N)。&quot;</p><p>于是我又立马写了第二版代码（复制了一份，然后再修改）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TreeNode </span><span style="color:#B392F0;">createTree</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] preorder,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> e,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] inorder,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> f,</span></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t,</span></span>
<span class="line"><span style="color:#E1E4E8;">           Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer, Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> indexHash) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果只有一个结点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;">(preorder[b]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 利用根结点来切分中序</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rootValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preorder[b];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 找到根结点在中序遍历中的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rootPos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> indexHash.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(rootValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建根结点</span></span>
<span class="line"><span style="color:#E1E4E8;">  TreeNode root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;">(rootValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 利用在中序遍历中找到的根结点，将数组分为三部分</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 分别计算出左子树与右子树的长度</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> leftLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rootPos </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> f;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> rightLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> rootPos </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 左子树</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// preorder里面左子树的范围 =&gt; [b + 1, b + 1 + leftLlen)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// inorder里面左子树的范围  =&gt; [f, rootPos)</span></span>
<span class="line"><span style="color:#E1E4E8;">  root.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTree</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    preorder, b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> leftLen,</span></span>
<span class="line"><span style="color:#E1E4E8;">    inorder, f, rootPos, indexHash);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 右子树</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// preorder右子树的范围 =&gt; [b + 1 + leftLen , e)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// inorder里面右子树的范围 =&gt; [rootPos + 1, t]</span></span>
<span class="line"><span style="color:#E1E4E8;">  root.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTree</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    preorder, b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> leftLen, e,</span></span>
<span class="line"><span style="color:#E1E4E8;">    inorder, rootPos </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, t, indexHash);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">TreeNode </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] preorder, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] inorder) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preorder </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> preorder.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (N </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 记录值与index的映射关系</span></span>
<span class="line"><span style="color:#E1E4E8;">  Map&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; indexHash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    indexHash.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(inorder[i], i);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTree</span><span style="color:#E1E4E8;">(preorder, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, N, inorder, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, N, indexHash);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TreeNode </span><span style="color:#6F42C1;">createTree</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] preorder,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> e,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] inorder,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> f,</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t,</span></span>
<span class="line"><span style="color:#24292E;">           Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer, Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> indexHash) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果只有一个结点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">(preorder[b]);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 利用根结点来切分中序</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rootValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preorder[b];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 找到根结点在中序遍历中的位置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rootPos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> indexHash.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(rootValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建根结点</span></span>
<span class="line"><span style="color:#24292E;">  TreeNode root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">(rootValue);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 利用在中序遍历中找到的根结点，将数组分为三部分</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 分别计算出左子树与右子树的长度</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> leftLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rootPos </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> f;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rightLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> rootPos </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 左子树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// preorder里面左子树的范围 =&gt; [b + 1, b + 1 + leftLlen)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// inorder里面左子树的范围  =&gt; [f, rootPos)</span></span>
<span class="line"><span style="color:#24292E;">  root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTree</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    preorder, b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> leftLen,</span></span>
<span class="line"><span style="color:#24292E;">    inorder, f, rootPos, indexHash);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 右子树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// preorder右子树的范围 =&gt; [b + 1 + leftLen , e)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// inorder里面右子树的范围 =&gt; [rootPos + 1, t]</span></span>
<span class="line"><span style="color:#24292E;">  root.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTree</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    preorder, b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> leftLen, e,</span></span>
<span class="line"><span style="color:#24292E;">    inorder, rootPos </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, t, indexHash);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">TreeNode </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] preorder, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] inorder) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preorder </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> preorder.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (N </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 记录值与index的映射关系</span></span>
<span class="line"><span style="color:#24292E;">  Map&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; indexHash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    indexHash.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(inorder[i], i);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTree</span><span style="color:#24292E;">(preorder, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, N, inorder, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, N, indexHash);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.hash.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.hash.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.hash.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>面试官看了代码，觉得没有问题，然后又问了一个问题：&quot;你这样写，空间复杂度是多少？&quot;</p><p>我：&quot;最差情况下都是 O(N)。&quot;</p><p>面试官：&quot;好的，代码没什么问题。你有什么问题要问我吗？&quot;</p><p>于是我拿出我早就准备好的针对这个公司、小组以及职位的问题与面试官进行了一个简短的交流，然后通过了第一轮面试。</p><h4 id="x-公司-第二轮" tabindex="-1">X 公司：第二轮 <a class="header-anchor" href="#x-公司-第二轮" aria-label="Permalink to &quot;X 公司：第二轮&quot;">​</a></h4><p>第二轮开始的时候，面试官并没有多说，确认通信正常后（因为是视频面试），不废话，立马开了一道算法题。</p><p>面试官：&quot;我们先写一个题吧。在一个数组里面，只有一个数出现了 1 次，其他的数都出现了 2 次，请你把这个数找出来。&quot;</p><p><strong>1. 三路切分</strong></p><p>我：&quot;这个题可以使用一种三路切分的方法，另外也可以使用位运算的方法。&quot;</p><p>面试官：&quot;嗯，我还是第一次听说三路切分的方法，你能详细给我说一下吗？&quot;</p><p>我：&quot;原理大概是这样......代码可以这样写......&quot;（这部分内容我们在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6697&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《08 | 排序：如何利用合并与快排的小技巧，解决算法难题？》</a>&quot;例 4&quot;已经介绍过，这里不再赘述。）</p><p><strong>2. bit 计数</strong></p><p>面试官：&quot;好的，那你能再说一下位运算的方法吗？&quot;</p><p>我：&quot;为了讲解这个原理，我首先采用这样一种方法进行操作。&quot;</p><p>思路：一个整数一共有 32 个 bit，那么，我可以统计每个 bit 在数组中出现的次数。由于只有一个数出现了 1 次，其他的数都出现了 2 次。那么在最后的统计结果中，相应 bit 位为奇数的时候，只出现一次的数其 bit 位也必然为 1。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">singleNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] bitCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> mask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">)</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((x </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> mask) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    bitCount[i]</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果这个位置的bit计数为奇数</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 那么这个bit肯定有只出现一次的那个数的贡献</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((bitCount[i] </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x01</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                ans </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">)</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">singleNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] bitCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> mask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((x </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> mask) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    bitCount[i]</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果这个位置的bit计数为奇数</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 那么这个bit肯定有只出现一次的那个数的贡献</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((bitCount[i] </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x01</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                ans </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>注意：应该用 long 的地方一定要用 long，否则在位移的时候容易出错。</p></blockquote><p>面试官：&quot;你这个算法的时间复杂度是多少？&quot;</p><p>我：&quot;如果是长度为 N 的数组，那么时间复杂度为 O(32N)，空间复杂度为 O(1)。所以可以认为是一个常量空间，线性时间复杂度的算法。&quot;</p><p>面试官：&quot;看起来常量的部分有点大，你有什么办法可以优化吗？&quot;</p><p>我：&quot;首先，可以优化 bit 位的计数，由于我们最终只是关心统计结果的奇偶性，因此，在某 bit 位的统计结果 &gt;= 2 的时候，我们可以直接减去 2。&quot;</p><p>代码可以优化成这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">singleNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] bitCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> mask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">)</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((x </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> mask) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    bitCount[i]</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 减去2，因为我们只关心统计结果的奇偶性</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bitCount[i] </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    bitCount[i] </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果这个位置的bit计数为奇数</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bitCount[i] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                ans </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;">)</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">singleNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] bitCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> mask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((x </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> mask) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    bitCount[i]</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 减去2，因为我们只关心统计结果的奇偶性</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bitCount[i] </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    bitCount[i] </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果这个位置的bit计数为奇数</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bitCount[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                ans </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>3. 二进制计数</strong></p><p>我：&quot;当然，这还不是最终的版本。我们可以继续优化。因为每个 bit 计数之后，一旦 &gt;= 2 就会减去 2。那么每一位的计数实际上只会有 0，1 两种状态。既然只有 0， 1 两种状态，那么可以考虑使用二进制来表示这个计数结果。&quot;</p><p>面试官：&quot;可是这样，你怎么继续进行计数呢？&quot;</p><p>我：&quot;可以使用一个整数来表示 bitCount 数组。&quot;</p><p>操作原理：我们用两个整数one, two来计数，含义如下：</p>`,37),A=l("p",null,"如果我们将图片稍微旋转一下就得到了下图：",-1),u=l("p",null,"这里可以发现：",-1),D=l("ul",null,[l("li",null,[l("p",null,"one 表示的是每个 bitCount[] 数字的最低 bit 位；")]),l("li",null,[l("p",null,"two 表示的是每个 bitCount[] 数字的第 2 个 bit 位。")])],-1),d=l("p",null,"那么，在累加的时候，我们可以采用这种办法：当 one = 0111, two = 0 的时候，bitCount[] ={0, 1, 1, 1}。假设新来一个数 x = 0b1010，那么可以得到下图：",-1),C=p(`<p>当然，真正累加的时候，我们也不会一位一位地去加。加法采用如下方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 当one和x相应 bit位都是1的时候，就会产生2个1</span></span>
<span class="line"><span style="color:#6A737D;">// 可以认为是产生了进位。</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> carry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#6A737D;">// 当one与x对应bit一共只有一个1:相应位置需要设置为1.</span></span>
<span class="line"><span style="color:#6A737D;">// 当one与x对应bit都为1: 这里的计数结果2已经存放在了</span></span>
<span class="line"><span style="color:#6A737D;">//               carry中（相应bit设置为1）。</span></span>
<span class="line"><span style="color:#6A737D;">//               one的相应bit需要设置为 0</span></span>
<span class="line"><span style="color:#6A737D;">// 当one与x对应bit都为0: one的相应bit需要设置为0。</span></span>
<span class="line"><span style="color:#E1E4E8;">one </span><span style="color:#F97583;">^=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#6A737D;">// TODO：这里还需要将two 与进位carry进行相加。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当one和x相应 bit位都是1的时候，就会产生2个1</span></span>
<span class="line"><span style="color:#6A737D;">// 可以认为是产生了进位。</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> carry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#6A737D;">// 当one与x对应bit一共只有一个1:相应位置需要设置为1.</span></span>
<span class="line"><span style="color:#6A737D;">// 当one与x对应bit都为1: 这里的计数结果2已经存放在了</span></span>
<span class="line"><span style="color:#6A737D;">//               carry中（相应bit设置为1）。</span></span>
<span class="line"><span style="color:#6A737D;">//               one的相应bit需要设置为 0</span></span>
<span class="line"><span style="color:#6A737D;">// 当one与x对应bit都为0: one的相应bit需要设置为0。</span></span>
<span class="line"><span style="color:#24292E;">one </span><span style="color:#D73A49;">^=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#6A737D;">// TODO：这里还需要将two 与进位carry进行相加。</span></span></code></pre></div><p>那么，我们可以写出代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">singleNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> two </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> carry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">            one </span><span style="color:#F97583;">^=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// TODO: two 需要与carry相加</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// TODO: 如果bit位 &gt;= 2，那么我们需要减去2</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 我们只关心奇数位的情况。所以直接返回one即可。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> one;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">singleNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> two </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> carry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">            one </span><span style="color:#D73A49;">^=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// TODO: two 需要与carry相加</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// TODO: 如果bit位 &gt;= 2，那么我们需要减去2</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 我们只关心奇数位的情况。所以直接返回one即可。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> one;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>不难发现，two 与 carry 相加的结果总是表示偶数个 bit 位。因此 two 和 carry 都可以被设置为 0。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">singleNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> two </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> carry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">            one </span><span style="color:#F97583;">^=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">            two </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            carry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 我们只关心奇数位的情况。所以直接返回one即可。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> one;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">singleNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> two </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> carry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">            one </span><span style="color:#D73A49;">^=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">            two </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            carry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 我们只关心奇数位的情况。所以直接返回one即可。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> one;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们又发现，two 和 carry 变量其实没什么用，还可以再次优化。<strong>最终版</strong>代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">singleNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            one </span><span style="color:#F97583;">^=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> one;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">singleNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;">            one </span><span style="color:#D73A49;">^=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> one;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/136.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/136.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/136.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>4. 异或运算</strong></p><p>写到这里，我又和面试官聊了另外一种思路：那就是利用异或运算的性质。</p>`,11),g=p(`<p>如果采用这种方法去思考，也可以得到一样的最终版的代码。</p><p>面试官：&quot;那我们稍微把这个题目变更一下，假设除一个数字外，其他的数字都出现了 3 次。这个时候，应该怎么办？&quot;</p><p>我：&quot;首先，这个题目仍然可以采用&quot;三路切分&quot;的方法。&quot;（具体可参考<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6697&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《08 | 排序：如何利用合并与快排的小技巧，解决算法难题？》</a>&quot;例 4&quot;）。</p><p>我：&quot;然后，这个题目还可以继续采用二进制计数的方法，当然，采用 bitCount[] 数组的方法也是可以的，但是采用异或性质的思路就不可以了。因此，三路切分和二进制计数的方法较为通用。&quot;</p><p>面试官：&quot;那你能写一下利用二进制的计数方法吗？我想三路切分的方法代码应该没什么变动。&quot;</p><p>我：&quot;好的。首先，由于除一个数字外，其他所有的数字都出现了 3 次。因此，bit 位计数的时候，&gt;= 3 的计数都没有意义，只需要记录 0, 1, 2 三种状态。所以，我们仍然只需要两个整数 one 和 two。&quot;</p><p>于是，延续之前的思路，可以写出如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">singleNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> two </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 产生进位</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> carry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">            one </span><span style="color:#F97583;">^=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 计数为2的情况与进位相加</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果我们只看某个bit位：</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// - 由于我们bit计数的状态只有</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//   0, 1, 2</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// - 当新来一个bit的时候，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//   最大的计算结果是3</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// =&gt; 因此，不可能同时two与carry在某bit</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//    都是1的情况</span></span>
<span class="line"><span style="color:#E1E4E8;">            two </span><span style="color:#F97583;">^=</span><span style="color:#E1E4E8;"> carry;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 当one与two的某个bit位都是1</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 表示计数出现了3</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 我们需要把这个3减掉。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> cnt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> one </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> two;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 减掉就是把one和 two对应bit位置00</span></span>
<span class="line"><span style="color:#E1E4E8;">            one </span><span style="color:#F97583;">&amp;=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">cnt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            two </span><span style="color:#F97583;">&amp;=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">cnt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> one;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">singleNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> two </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 产生进位</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> carry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">            one </span><span style="color:#D73A49;">^=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 计数为2的情况与进位相加</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果我们只看某个bit位：</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// - 由于我们bit计数的状态只有</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//   0, 1, 2</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// - 当新来一个bit的时候，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//   最大的计算结果是3</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// =&gt; 因此，不可能同时two与carry在某bit</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//    都是1的情况</span></span>
<span class="line"><span style="color:#24292E;">            two </span><span style="color:#D73A49;">^=</span><span style="color:#24292E;"> carry;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 当one与two的某个bit位都是1</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 表示计数出现了3</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 我们需要把这个3减掉。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> one </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> two;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 减掉就是把one和 two对应bit位置00</span></span>
<span class="line"><span style="color:#24292E;">            one </span><span style="color:#D73A49;">&amp;=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">cnt;</span></span>
<span class="line"><span style="color:#24292E;">            two </span><span style="color:#D73A49;">&amp;=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">cnt;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> one;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/137.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/137.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/137.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>这里我还加了一些测试代码。</p><p><strong>5. 状态机</strong></p><p>我：&quot;当然，这个题还可以进一步优化。&quot;</p><p>面试官：&quot;我们还有一点时间，你可以简单地说一下怎么优化吗？&quot;</p><p>优化思路：由于所有的 bit 计数都是一样的，所以我们可以把注意力放在<strong>某一个 bit 的计数</strong>上来操作（尽管一个整数有 32 个 bit，但此时我们只看一个 bit）。</p><p>由于状态是有限的（只需要记录 0, 1, 2 三种状态），那么可以采用状态机的思路来直接优化。圆圈表示某个 bit 上的计数结果，由于只有三种状态，所以我们分别用 (00, 01, 10) 来表示。那么当遇到新来的 x（带箭头的线）或为 1，或为 0 的时候，我们可以画出状态跃迁图。</p>`,15),b=l("p",null,"在使用二进制表示的时候，我们用 ones 表示蓝色的 bit 位。twos 表示棕色的 bit 位。那么当遇到新来的 x，我们可以整理出一个表：",-1),h=l("p",null,"然后可以根据这个表得到化简之后的 bool 运算结果，如下图所示：",-1),B=p(`<p>此时可以写出代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">singleNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ones </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, twos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums){</span></span>
<span class="line"><span style="color:#E1E4E8;">            ones </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ones </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">twos;</span></span>
<span class="line"><span style="color:#E1E4E8;">            twos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> twos </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">ones;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ones;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">singleNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ones </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, twos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums){</span></span>
<span class="line"><span style="color:#24292E;">            ones </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ones </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">twos;</span></span>
<span class="line"><span style="color:#24292E;">            twos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> twos </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">ones;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ones;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/137.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii.2.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/137.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii.2.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/137.%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-ii.2.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p><p>这里我还加了一些测试代码，由于篇幅原因就不进行展示了。</p><p>注意：面试遇到简单题，既是机遇，也是挑战。机遇是解题很容易，挑战则是面试官很有可能也会用同样的题目去面别人，想要出彩就需要平时多深度思考。</p></blockquote><p>面试到这里，时间已经过去了一个多小时，面试官又准备问一下项目经历。这一轮时间差不多持续了两个小时以上。</p><h4 id="y-公司-第一轮" tabindex="-1">Y 公司：第一轮 <a class="header-anchor" href="#y-公司-第一轮" aria-label="Permalink to &quot;Y 公司：第一轮&quot;">​</a></h4><p>这次的面试是在一个茶室里面进行的，一边喝茶一边聊。从生活、工作到兴趣都聊开了。</p><blockquote><p>注意：放松的面试环境非常容易让候选人放下戒备。在这种情况下，一定不要忘记深入地思考面试官提出的每个问题。</p></blockquote><p>面试官看了一下表：&quot;这样吧，我们简单写个题吧？&quot;</p><p>我：&quot;好啊。不过这里没有白板，我就在纸上写吧。&quot;</p><blockquote><p>注意：如果是去公司面试，最好带上电脑、纸、笔以及打印好的简历。</p></blockquote><p>于是我拿出了白纸和笔，做好了准备。</p><p>面试官：&quot;来个 24 点吧。&quot;</p><p>我：&quot;可以啊，就是那种我们平时玩的 24 点吧。为了简单起见，我可以直接用<strong>有效</strong>整数表示扑克的点数吗？&quot;</p><p>面试官：&quot;可以，我们需要把精力重点放在我们需要关注的地方。&quot;</p><p>我：&quot;好的，先让我整理一下思路。正常的 24 点会给 4 张卡牌，每个卡牌会用整数来进行表示。&quot;</p><p>面试官点了点头。</p><p>我问：&quot;那返回值返回什么呢？返回所有的解，还是返回是否有解？&quot;</p><p>面试官：&quot;我们先写是否有解吧。&quot;</p><p>我：&quot;那你看看这个接口可以吗？&quot;</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">judgePoint24</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] cards)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">judgePoint24</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] cards)</span></span></code></pre></div><p>面试官：&quot;好的，你能说一下你的思路吗？&quot;</p><p>我：&quot;首先，当给定 4 个数的时候，我可以进行如下操作！&quot;</p><ul><li><p>从数组中挑选两个不同的数出来，此时数组中余下 2 个数。</p></li><li><p>尝试对这两个数进行加减乘除操作。</p></li><li><p>把操作的结果与余下的 12 个数放一起，构成一个新的数组，这个数组只有 3 个元素。</p></li></ul><p>然后，接着处理给定输入有 3 个数的时候：</p><ul><li><p>从数组中挑选两个不同的数出来，此时数组中余下 1 个数；</p></li><li><p>尝试对这两个数进行加减乘除操作；</p></li><li><p>把操作的结果与余下的 1 个数放一起，构成一个新的数组，这个数组只有 2 个元素。</p></li></ul><p>然后，接着处理给定的输入只有 2 个数的时候：</p><ul><li><p>从数组中挑选两个不同的数出来，此时数组中余下 0 个数；</p></li><li><p>尝试对这两个数进行加减乘除操作；</p></li><li><p>把操作的结果与余下的 0 个数放一起，构成一个新的数组，这个数组只有 1 个元素。</p></li></ul><p>最后，只需要处理输入的数，如果只有一个数，那么判断这个数是否是 24 即可。</p><p>面试官：&quot;你打算就这样写代码吗？&quot;</p><p>我：&quot;当然不是。由于这个过程问题规模是在不断变小的，所以我们可以使用 DFS 来求解。&quot;</p><p>于是我先在纸上写了伪代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">judgePoint24</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] cards) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> cards只有一个数 and cards[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x in cards</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> y in cards</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> y</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">             ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 利用x, y进行加</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">减</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">乘</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">除)</span></span>
<span class="line"><span style="color:#E1E4E8;">             newCards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [ans, cards.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(x,y)]</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">judgePoint24</span><span style="color:#E1E4E8;">(newCards)</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">judgePoint24</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] cards) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cards只有一个数 and cards[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x in cards</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> y in cards</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> y</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">             ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 利用x, y进行加</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">减</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">乘</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">除)</span></span>
<span class="line"><span style="color:#24292E;">             newCards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [ans, cards.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(x,y)]</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">judgePoint24</span><span style="color:#24292E;">(newCards)</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>注意：如果你打算写伪代码，一定要给面试官明确地说明这不是最终版本的代码，而是伪代码！</p></blockquote><p>面试官：&quot;伪代码看起来没什么问题，你可以开始写了。&quot;</p><p>我：&quot;好。&quot;</p><blockquote><p>在纸上写代码的时候，由于涂改，容易把卷面弄得很难看。写完之后我看还有时间，就又把代码重新抄了一遍，再在另外一张纸上加了测试代码。</p><p>如果你也是在纸上写代码，那么强烈建议你重新抄一遍。因为大部分纸上手写代码都非常难看，再加上涂改，简直不能直视。</p></blockquote><p>最终我交上了这么一份代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 将cards中的cards[i], cards[j] 经过某种运算之后 生成了value</span></span>
<span class="line"><span style="color:#6A737D;">// 然后生成一个新的数组</span></span>
<span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">getNextCards</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[] cards, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> v) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cards.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[] ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[N </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> j) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ans[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cards[k];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ans[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 判断是否达到了答案，注意浮点数的判断</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isResult</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(value </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24.0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1e-6</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notZero</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(value) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1e-6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">judge</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[] cards) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cards </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cards.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果已经只有一个数了，那么检查一下看看是否</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是24</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (N </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isResult</span><span style="color:#E1E4E8;">(cards[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 否则我们挑两个数，进行加减乘除</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 其中加法和乘法没有交换的必要</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 所以我们只需要check两个就可以了</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">judge</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getNextCards</span><span style="color:#E1E4E8;">(cards, i, j,</span></span>
<span class="line"><span style="color:#E1E4E8;">                cards[i] </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> cards[j])) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 加法 */</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">judge</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getNextCards</span><span style="color:#E1E4E8;">(cards, i, j,</span></span>
<span class="line"><span style="color:#E1E4E8;">                cards[i] </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> cards[j])) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 乘法 */</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">notZero</span><span style="color:#E1E4E8;">(cards[j]) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">judge</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getNextCards</span><span style="color:#E1E4E8;">(cards, i, j,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  cards[i] </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> cards[j])) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 除法 */</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">notZero</span><span style="color:#E1E4E8;">(cards[i]) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">judge</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getNextCards</span><span style="color:#E1E4E8;">(cards, i, j,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  cards[j] </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> cards[i])) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 除法 */</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">judge</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getNextCards</span><span style="color:#E1E4E8;">(cards, i, j,</span></span>
<span class="line"><span style="color:#E1E4E8;">                cards[i] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> cards[j])) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* 减法 */</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">judge</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getNextCards</span><span style="color:#E1E4E8;">(cards, i, j,</span></span>
<span class="line"><span style="color:#E1E4E8;">                cards[j] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> cards[i]))    </span><span style="color:#6A737D;">/* 减法 */</span></span>
<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">judgePoint24</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] cards) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cards </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[] dCards </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[cards.length];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cards) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    dCards[to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">judge</span><span style="color:#E1E4E8;">(dCards);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 将cards中的cards[i], cards[j] 经过某种运算之后 生成了value</span></span>
<span class="line"><span style="color:#6A737D;">// 然后生成一个新的数组</span></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">getNextCards</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] cards, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> v) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cards.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[N </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> j) {</span></span>
<span class="line"><span style="color:#24292E;">      ans[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cards[k];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  ans[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 判断是否达到了答案，注意浮点数的判断</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isResult</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24.0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1e-6</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notZero</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> value) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(value) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1e-6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">judge</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] cards) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cards </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cards.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果已经只有一个数了，那么检查一下看看是否</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是24</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (N </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isResult</span><span style="color:#24292E;">(cards[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 否则我们挑两个数，进行加减乘除</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 其中加法和乘法没有交换的必要</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 所以我们只需要check两个就可以了</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">judge</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getNextCards</span><span style="color:#24292E;">(cards, i, j,</span></span>
<span class="line"><span style="color:#24292E;">                cards[i] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> cards[j])) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 加法 */</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">judge</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getNextCards</span><span style="color:#24292E;">(cards, i, j,</span></span>
<span class="line"><span style="color:#24292E;">                cards[i] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> cards[j])) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 乘法 */</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">notZero</span><span style="color:#24292E;">(cards[j]) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">judge</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getNextCards</span><span style="color:#24292E;">(cards, i, j,</span></span>
<span class="line"><span style="color:#24292E;">                  cards[i] </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> cards[j])) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 除法 */</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">notZero</span><span style="color:#24292E;">(cards[i]) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">judge</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getNextCards</span><span style="color:#24292E;">(cards, i, j,</span></span>
<span class="line"><span style="color:#24292E;">                  cards[j] </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> cards[i])) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 除法 */</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">judge</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getNextCards</span><span style="color:#24292E;">(cards, i, j,</span></span>
<span class="line"><span style="color:#24292E;">                cards[i] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> cards[j])) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* 减法 */</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">judge</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getNextCards</span><span style="color:#24292E;">(cards, i, j,</span></span>
<span class="line"><span style="color:#24292E;">                cards[j] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> cards[i]))    </span><span style="color:#6A737D;">/* 减法 */</span></span>
<span class="line"><span style="color:#24292E;">      ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">judgePoint24</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] cards) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cards </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] dCards </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[cards.length];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cards) {</span></span>
<span class="line"><span style="color:#24292E;">    dCards[to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">judge</span><span style="color:#24292E;">(dCards);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/679.24-%E7%82%B9%E6%B8%B8%E6%88%8F.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/679.24-%E7%82%B9%E6%B8%B8%E6%88%8F.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/24.MyInterView/679.24-%E7%82%B9%E6%B8%B8%E6%88%8F.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>后面我还加了一系列测试代码。你在面试的时候，一定要记得主动写测试代码。</p><p>面试官：&quot;你为什么用 isResult 和 notZero 这两个函数？&quot;</p><p>我：&quot;因为 double 在表示浮点数的时候，存在精度损失的情况，为了处理这两种情况，我用了 1e-6 作为边界判断两个数是否相等。&quot;</p><p>面试官又仔细看了看代码，觉得没什么问题，然后就开始进行下一个话题的交流了。</p><h3 id="面试的收尾" tabindex="-1">面试的收尾 <a class="header-anchor" href="#面试的收尾" aria-label="Permalink to &quot;面试的收尾&quot;">​</a></h3><p>一般而言，大部分公司的算法面试结束之后，都会留一个提问环节。这里我们主要介绍这个环节需要注意地方。</p><h4 id="提问的建议" tabindex="-1">提问的建议 <a class="header-anchor" href="#提问的建议" aria-label="Permalink to &quot;提问的建议&quot;">​</a></h4><p>我们的目的是求职，因此可以通过提问尽可能多地拿到关于这个职位、部门以及公司的信息。</p><p>由于大部分公司的面试都是将经理、部门负责人安排在后面。因此，这里我分享一下自己的策略（与战争进行一个类比）。</p><ul><li><p>前两轮会侧重于当前面试的职位信息。尽量得出你在战场中的位置，你是前锋攻坚？后勤保障？还是辅助打野？</p></li><li><p>中间的轮次侧重于当前职位在整个部门里面的位置，能够发挥的作用，以及将要展开的项目等。得到整个部门在一场大会战中的位置，是第一梯队的部门吗？这是一个处在人员优化的部门吗？</p></li><li><p>后面的轮次侧重于部门在公司的位置、作用以及发展计划。公司每场&quot;战斗&quot;这个部门的参与率如何？这个部门以后还会发展吗？会独当一面成为封疆大吏吗？</p></li><li><p>工作节奏：如果关心工作节奏，那么也可以在技术面试中直接大方地提出来。简单直接有效地拿到一手信息。比如正常情况下的工作时间是什么样的？是否严格打卡？</p></li><li><p>绩效：每个公司都会有不同的方法来评定绩效。因此，我们应该认真地去拿到绩效评定的信息，这样才知道将来要努力工作的方向。</p></li></ul><p>因此，提问的时候，主要是将这些信息进行<strong>整合和总结</strong>，然后得出职位的整体情况。</p><h4 id="不建议提的问题" tabindex="-1">不建议提的问题 <a class="header-anchor" href="#不建议提的问题" aria-label="Permalink to &quot;不建议提的问题&quot;">​</a></h4><p>算法面试结束之后，我们总结一下<strong>不建议</strong>提的问题。</p><ul><li><p>薪水：大部分时候，薪水都是由 HR 部门来决策的。无论是经理，还是技术人员，他们的作用就是根据你的面试情况进行打分。HR 会根据这个分数评定你的薪资水平。</p></li><li><p>结果：面试结束之后，不应该去问&quot;我这一轮面试过了吗？&quot;原因在于，大多数情况是很多人面试一个职位。公司在人员选择时，会将所有通过面试的人进行一轮排序，然后再取出 Top1, Top2 来发放 Offer。如果 Top1 拒绝，那么会给 Top2 发放 Offer。正确的心态是：好好总结，认真准备即将到来的下一场面试！</p></li><li><p>算法题的答案：写完题的最后环节，不应该再纠缠于前面的算法题了。你应该更多地围绕职位、部门以及公司进行提问。否则，万一通过面试入职之后，发现做的事情与心里预期不一样，岂不是很亏？</p></li><li><p>换组/换部门：一般而言，公司内部都是允许换组、换部门的。但是，应该没有一个部门会花时间帮其他部门招人，因为最好不要问这类问题。</p></li></ul><p>关于面试时如何提问，如果你还有其他建议或者补充，也可以放在留言区，我们相互学习，一起讨论。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲里，我们一起回顾了一段面试过程，我把这部分的内容整理在一个思维导图里方便你复习，也希望能够助力你求职成功，拿到心仪的 Offer。</p>`,56),f=p("<p>此外，我还给你留了一个要特别注意的点：实事求是。如果用大白话来说就是：懂的就懂，不懂的就直接说不懂。</p><blockquote><p>不要套路面试官，然后尝试一点一点往正确的答案上靠！</p></blockquote><p>接下来，假设我是一个面试官，我抛出了一个问题：&quot;给你一棵树，和两个结点，请输出这两个点的距离。&quot;</p><p>所以这一讲留给你的作业就是：</p><ul><li><p>你应该怎么进行沟通？</p></li><li><p>你应该如何写代码？</p></li><li><p>你应该如何写测试？</p></li></ul><p>这一讲就到这里，也欢迎在留言区分享你面试经历，遇到过哪些难以解决的问题？我们一起讨论。下一讲我将和你聊一聊算法的精进之路。</p>",6);function m(q,_,v,k,T,x){const s=e("Image");return t(),r("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/40/79/CioPOWCk5QSAZ8pCAABloprC1Ew561.png"}),a(),y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/40/79/CioPOWCk5ROAOSt0AACNdanyrWE755.png"}),a(),i,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/40/79/CioPOWCk5SSAD2HkAADSPebQHQY551.png"}),a(),F,n(s,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image6/M01/40/7B/Cgp9HWClFmeABX0tAAA02ApWc-4166.png"}),a(),A,n(s,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M01/40/71/Cgp9HWCk5VKAay3EAAA6KnGCYs4218.png"}),a(),u,D,d,n(s,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M01/40/71/Cgp9HWCk5VmAcoq4AADQOxVLkqY855.png"}),a(),C,n(s,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image6/M01/40/71/Cgp9HWCk5WiAFE-dAAA1YzBjYA4150.png"}),a(),g,n(s,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image6/M01/40/71/Cgp9HWCk5XuAYjSnAABVDq7sGRw576.png"}),a(),b,n(s,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image6/M00/40/79/CioPOWCk5YaATpIZAABs2b4Fu8c831.png"}),a(),h,n(s,{alt:"Drawing 18.png",src:"https://s0.lgstatic.com/i/image6/M00/40/79/CioPOWCk5aiAC5mTAAA4HZxbmVM101.png"}),a(),B,n(s,{alt:"Drawing 20.png",src:"https://s0.lgstatic.com/i/image6/M00/40/79/CioPOWCk5c2AEwS1AAEpmtlZR7o675.png"}),a(),f])}const w=o(c,[["render",m]]);export{N as __pageData,w as default};
