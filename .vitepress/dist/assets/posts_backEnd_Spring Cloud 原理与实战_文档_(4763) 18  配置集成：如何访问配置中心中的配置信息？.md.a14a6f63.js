import{_ as p,j as l,o,g as e,k as t,h as n,Q as r,s}from"./chunks/framework.4e7d56ce.js";const D=JSON.parse('{"title":"18配置集成：如何访问配置中心中的配置信息？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4763) 18  配置集成：如何访问配置中心中的配置信息？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4763) 18  配置集成：如何访问配置中心中的配置信息？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4763) 18  配置集成：如何访问配置中心中的配置信息？.md"},E=r(`<h1 id="_18配置集成-如何访问配置中心中的配置信息" tabindex="-1">18配置集成：如何访问配置中心中的配置信息？ <a class="header-anchor" href="#_18配置集成-如何访问配置中心中的配置信息" aria-label="Permalink to &quot;18配置集成：如何访问配置中心中的配置信息？&quot;">​</a></h1><p>在微服务系统中，各个业务微服务就是 Spring Cloud Config 配置服务器的客户端，也就可以通过它所提供的各种 HTTP 端点获取所需的配置信息。在今天的内容中，我们将从客户端角度出发关注于如何在业务服务中使用配置服务器中配置信息的方法，并详细介绍 Spring Cloud Config 的客户端工作原理。</p><h3 id="访问配置中心中的配置项" tabindex="-1">访问配置中心中的配置项 <a class="header-anchor" href="#访问配置中心中的配置项" aria-label="Permalink to &quot;访问配置中心中的配置项&quot;">​</a></h3><p>要想获取配置服务器中的配置信息，我们首先需要初始化客户端，也就是在将各个业务微服务与 Spring Cloud Config 服务器端进行集成。初始化客户端的第一步是引入 Spring Cloud Config 的客户端组件 spring-cloud-config-client，如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-config-client&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-config-client&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后我们需要在配置文件 application.yml中配置服务器的访问地址，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">  application:</span></span>
<span class="line"><span style="color:#E1E4E8;">	name: userservice</span></span>
<span class="line"><span style="color:#E1E4E8;">	profiles:</span></span>
<span class="line"><span style="color:#E1E4E8;">    active:</span></span>
<span class="line"><span style="color:#E1E4E8;">      prod</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">  cloud:</span></span>
<span class="line"><span style="color:#E1E4E8;">    config:</span></span>
<span class="line"><span style="color:#E1E4E8;">	   enabled: true</span></span>
<span class="line"><span style="color:#E1E4E8;">	   uri: http://localhost:8888</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">  application:</span></span>
<span class="line"><span style="color:#24292E;">	name: userservice</span></span>
<span class="line"><span style="color:#24292E;">	profiles:</span></span>
<span class="line"><span style="color:#24292E;">    active:</span></span>
<span class="line"><span style="color:#24292E;">      prod</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">  cloud:</span></span>
<span class="line"><span style="color:#24292E;">    config:</span></span>
<span class="line"><span style="color:#24292E;">	   enabled: true</span></span>
<span class="line"><span style="color:#24292E;">	   uri: http://localhost:8888</span></span></code></pre></div><p>以上配置信息中有几个地方值得注意。首先，这个 Spring Boot 应用程序的名称&quot;userservice&quot;，该名称必须与上一课时中在配置服务器上创建的文件目录名称保持一致，如果两者不一致则访问配置信息会发生失败。其次，我们注意到 profile 值为 prod，意味着我们会使用生产环境的配置信息，也就是会获取配置服务器上 userservice-prod.yml 配置文件中的内容。最后，我们需要指定配置服务器所在的地址，也就是上面的 uri：<a href="http://localhost:8888" target="_blank" rel="noreferrer">http://localhost:8888</a>。</p><p>一旦我们引入了 Spring Cloud Config 的客户端组件，相当于在各个微服务中自动集成了访问配置服务器中 HTTP 端点的功能。也就是说，访问配置服务器的过程对于各个微服务而言是透明的，即微服务不需要考虑如何从远程服务器获取配置信息，而只需要考虑如何在 Spring Boot 应用程序中使用这些配置信息。接下来我们就来讨论使用这些配置信息的方法。</p><p>在现实的开发过程中，开发人员通常会创建各种自定义的配置信息。例如，在 SpringHealth 案例中，每台穿戴式设备上报健康数据的频率是一个可以提取的初始化参数。从系统扩展性上讲，这个频率是应该可以调整的，所以我们创建了一个自定义的配置项，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">springhealth.device.datacollect.frequency = 10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">springhealth.device.datacollect.frequency = 10</span></span></code></pre></div><p>这里我们设置了这个频率值为 10。那么，应用程序如何获取这个配置项的内容呢？通常有两种方法，一种是使用 @Value 注解注入配置信息，另一种则是使用 @ConfigurationProperties 注解。</p><h4 id="使用-value-注解注入配置信息" tabindex="-1">使用 @Value 注解注入配置信息 <a class="header-anchor" href="#使用-value-注解注入配置信息" aria-label="Permalink to &quot;使用 @Value 注解注入配置信息&quot;">​</a></h4><p>使用 @Value 注解来注入配置项内容虽然是一种比较传统的实现方法，但我们仍然可以使用。针对前面给出的自定义配置项，我们可以构建一个 SpringHealthConfig 类并创建一个 frequency 字段，然后在该字段上添加 @Value 注解，并指向配置项的名称，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringHealthConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${springhealth.device.datacollect.frequency}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> frequency;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringHealthConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${springhealth.device.datacollect.frequency}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> frequency;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个配置类背后复杂的远程 HTTP 端点的请求、配置参数的实例化等过程都由 @Value 注解自动完成。</p><h4 id="使用-configurationproperties-注解注入配置信息" tabindex="-1">使用 @ConfigurationProperties 注解注入配置信息 <a class="header-anchor" href="#使用-configurationproperties-注解注入配置信息" aria-label="Permalink to &quot;使用 @ConfigurationProperties 注解注入配置信息&quot;">​</a></h4><p>相较 @Value 注解，更为现代的一种做法是使用 @ConfigurationProperties 注解。在使用该注解时，往往会配套使用一个&quot;prefix&quot;属性，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;springhealth.device.datacollect&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringHealthConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> frequency;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;springhealth.device.datacollect&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringHealthConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> frequency;</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的示例中，相当于把&quot;springhealth.device.datacollect&quot;这个 prefix 下的 frequency 配置项进行了加载。</p><p>现在，让我们考虑一种更复杂的场景。假设设备上传数据的频率并不是固定的，而是根据每个不同的设备会有不同的频率。那么如果使用 Yaml 格式来表示，现在的配置项内容就应该是这样：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">springhealth.device.datacollect.frequency:</span></span>
<span class="line"><span style="color:#E1E4E8;">	device1: 10</span></span>
<span class="line"><span style="color:#E1E4E8;">	device2: 20</span></span>
<span class="line"><span style="color:#E1E4E8;">	device3: 30</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">springhealth.device.datacollect.frequency:</span></span>
<span class="line"><span style="color:#24292E;">	device1: 10</span></span>
<span class="line"><span style="color:#24292E;">	device2: 20</span></span>
<span class="line"><span style="color:#24292E;">	device3: 30</span></span></code></pre></div><p>相比 @Value 注解只能用于指定具体某一个配置项，@ConfigurationProperties 可以用来批量提取配置内容。只要指定prefix，我们就可以把该 prefix 下的所有配置项按照名称自动注入业务代码中。如果想把上述配置项全部加载到业务代码中，我们可以直接在配置类 SpringHealthConfig 中定义一个 Map 对象，然后通过 Key-Value 对来保存这些配置数据，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;springhealth.device.datacollect&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringHealthConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; frequencys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;springhealth.device.datacollect&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringHealthConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; frequencys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里通过创建一个 HashMap 来保存这些 Key-Value 对。类似的，我们也可以实现常见的一些数据结构的自动嵌入。</p><h3 id="整合数据库访问功能" tabindex="-1">整合数据库访问功能 <a class="header-anchor" href="#整合数据库访问功能" aria-label="Permalink to &quot;整合数据库访问功能&quot;">​</a></h3><p>在日常的开发过程中，配置文件的常见用途是存储各种外部工具的访问元数据，最典型的就是管理数据库连接配置。在我们的 SpringHealth 案例中，因为每个业务微服务都势必需要进行数据库操作，然后我们来演示如何通过 Spring Cloud Config 提供数据库访问数据源（Data Source）的配置过程。</p><p>我们以 user-service 为例来演示数据库访问功能，案例中使用的是JPA 和 MySQL，因此需要在服务中引入相关的依赖，如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	   &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	   &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-data-jpa&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	   &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;mysql&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	   &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;mysql-connector-java&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	   &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	   &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-data-jpa&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	   &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;mysql&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	   &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;mysql-connector-java&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>我们首先定义 user-service 用到的 user 表结构和初始化数据，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">DROP TABLE IF EXISTS \`user\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">CREATE TABLE \`user\` (</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`user_code\` varchar(20) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`user_name\` varchar(100) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#E1E4E8;">  PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">INSERT INTO \`user\` VALUES (&#39;1&#39;, &#39;user1&#39;, &#39;springhealth_user1&#39;);</span></span>
<span class="line"><span style="color:#E1E4E8;">INSERT INTO \`user\` VALUES (&#39;2&#39;, &#39;user2&#39;, &#39;springhealth_user2&#39;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DROP TABLE IF EXISTS \`user\`;</span></span>
<span class="line"><span style="color:#24292E;">CREATE TABLE \`user\` (</span></span>
<span class="line"><span style="color:#24292E;">  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#24292E;">  \`user_code\` varchar(20) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#24292E;">  \`user_name\` varchar(100) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#24292E;">  PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span style="color:#24292E;">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">INSERT INTO \`user\` VALUES (&#39;1&#39;, &#39;user1&#39;, &#39;springhealth_user1&#39;);</span></span>
<span class="line"><span style="color:#24292E;">INSERT INTO \`user\` VALUES (&#39;2&#39;, &#39;user2&#39;, &#39;springhealth_user2&#39;);</span></span></code></pre></div><p>然后我们在 user-service 中定义 User 的实体类，使用了 JPA 相关的 @Entity、@Table、@Id 和 @GeneratedValue 注解，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">	@</span><span style="color:#F97583;">GeneratedValue</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String userCode;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String userName;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">	@</span><span style="color:#D73A49;">GeneratedValue</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String userCode;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String userName;</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后我们简单设计一个 UserRepository，该 Repository 继承了 CrudRepository 工具类并提供 findUserByUsername() 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repository</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CrudRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;  {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    User </span><span style="color:#B392F0;">findUserByUserName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">userName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repository</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CrudRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;  {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    User </span><span style="color:#6F42C1;">findUserByUserName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">userName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了 UserRepository 之后，创建对应的 UserService 的和 UserController 的结构也非常简单，各个类的代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">userName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findUserByUserName</span><span style="color:#E1E4E8;">(userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserService userService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/{userName}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;userName&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">userName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userService.</span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">userName</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findUserByUserName</span><span style="color:#24292E;">(userName);</span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserService userService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/{userName}&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userName&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">userName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userService.</span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(userName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在我们通过 Postman 访问<a href="http://localhost:8081/users/" target="_blank" rel="noreferrer">http://localhost:8081/users/</a>springhealth_user1 端点，可以获取对应数据库中的技术结果，表明数据库访问操作成功完成，位于配置服务器中的数据源配置信息已经生效。</p><p>通过上面的示例，我们可以看到在整合数据库访问功能的整个过程中，开发人员几乎不需要关注于背后所依赖的数据源配置信息就能实现数据库访问，基于 Spring Cloud Config 的配置中心解决方案屏蔽了配置信息存储和获取的实现复杂性。</p><h4 id="spring-cloud-config-client-工作机制" tabindex="-1">Spring Cloud Config Client 工作机制 <a class="header-anchor" href="#spring-cloud-config-client-工作机制" aria-label="Permalink to &quot;Spring Cloud Config Client 工作机制&quot;">​</a></h4><p>通过前面介绍的内容，我们明确了想要使用配置中心服务，只需在 Spring Boot 的配置文件中添加对服务器地址的引用即可。当然，前提是在类路径中添加对 Spring Cloud Config Client 的引用。那么，为什么只要添加了引用，就会在服务启动时自动获取远程的配置信息呢？这是今天我们需要回答的问题。在介绍 Spring Cloud Config Client 组件时，我们将采用反推的方法，即从获取服务器端配置信息的入口开始，逐步引出这个问题的答案。</p><h4 id="远程访问配置信息" tabindex="-1">远程访问配置信息 <a class="header-anchor" href="#远程访问配置信息" aria-label="Permalink to &quot;远程访问配置信息&quot;">​</a></h4><p>我们首先找到的是 ConfigServicePropertySourceLocator 类，因为我们在这个类中发现了一个 getRemoteEnvironment 方法。显然，作为客户端组件，Spring Cloud Config Client 的主要职责就是获取服务器端提供的配置信息。在上一课时中，我们已经知道在 Spring Cloud Config Server 中提供了一个 EnvironmentController 端点类来暴露配置信息，那么在客户端中势必存在一个入口来获取这些配置信息。这个入口就是 getRemoteEnvironment 方法，如下所示（部分内容做了裁剪）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Environment </span><span style="color:#B392F0;">getRemoteEnvironment</span><span style="color:#E1E4E8;">(RestTemplate restTemplate, onfigClientProperties properties, String label, String state) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据服务器端点的 URL 准备参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/{name}/{profile}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String profile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">getProfile</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">getToken</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> noOfUrls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">getUri</span><span style="color:#E1E4E8;">().length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#6A737D;">//处理 URL 中的&quot;label&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] { name, profile };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(label)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (label.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                label </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> label.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(_)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] { name, profile, label };</span></span>
<span class="line"><span style="color:#E1E4E8;">            path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/{label}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ResponseEntity&lt;</span><span style="color:#F97583;">Environment</span><span style="color:#E1E4E8;">&gt; response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> noOfUrls; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//准备用于安全访问的 Credentials 信息</span></span>
<span class="line"><span style="color:#E1E4E8;">            Credentials credentials </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">getCredentials</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">            String uri </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> credentials.</span><span style="color:#B392F0;">getUri</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            String username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> credentials.</span><span style="color:#B392F0;">getUsername</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            String password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> credentials.</span><span style="color:#B392F0;">getPassword</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                HttpHeaders headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpHeaders</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">addAuthorizationToken</span><span style="color:#E1E4E8;">(properties, headers, username, password);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(token)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    headers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(TOKEN_HEADER, token);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(state) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">isSendState</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    headers.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(STATE_HEADER, state);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                headers.</span><span style="color:#B392F0;">setAccept</span><span style="color:#E1E4E8;">(Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(MediaType.APPLICATION_JSON));</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//通过 RestTemplate 执行远程访问</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HttpEntity&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; entity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HttpEntity&lt;&gt;((Void) </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, headers);</span></span>
<span class="line"><span style="color:#E1E4E8;">                response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> restTemplate.</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">(uri </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path, HttpMethod.GET, entity,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Environment.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//这里省略 catch 处理和空值校验 </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            Environment result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Environment </span><span style="color:#6F42C1;">getRemoteEnvironment</span><span style="color:#24292E;">(RestTemplate restTemplate, onfigClientProperties properties, String label, String state) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据服务器端点的 URL 准备参数</span></span>
<span class="line"><span style="color:#24292E;">        String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/{name}/{profile}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String profile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">getProfile</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">getToken</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> noOfUrls </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">getUri</span><span style="color:#24292E;">().length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6A737D;">//处理 URL 中的&quot;label&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] { name, profile };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(label)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (label.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                label </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> label.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;(_)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] { name, profile, label };</span></span>
<span class="line"><span style="color:#24292E;">            path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/{label}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        ResponseEntity&lt;</span><span style="color:#D73A49;">Environment</span><span style="color:#24292E;">&gt; response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> noOfUrls; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//准备用于安全访问的 Credentials 信息</span></span>
<span class="line"><span style="color:#24292E;">            Credentials credentials </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">getCredentials</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">            String uri </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> credentials.</span><span style="color:#6F42C1;">getUri</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> credentials.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> credentials.</span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                HttpHeaders headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpHeaders</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">addAuthorizationToken</span><span style="color:#24292E;">(properties, headers, username, password);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(token)) {</span></span>
<span class="line"><span style="color:#24292E;">                    headers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(TOKEN_HEADER, token);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(state) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">isSendState</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    headers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(STATE_HEADER, state);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                headers.</span><span style="color:#6F42C1;">setAccept</span><span style="color:#24292E;">(Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(MediaType.APPLICATION_JSON));</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//通过 RestTemplate 执行远程访问</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HttpEntity&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; entity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HttpEntity&lt;&gt;((Void) </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, headers);</span></span>
<span class="line"><span style="color:#24292E;">                response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> restTemplate.</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">(uri </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path, HttpMethod.GET, entity,</span></span>
<span class="line"><span style="color:#24292E;">                        Environment.class, args);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//这里省略 catch 处理和空值校验 </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            Environment result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码虽然看上去有点长，但如果我们对照 EnvironmentController 端点的实现方法，就很容易理解它的执行流程。上述代码的主要流程就是获取访问配置服务器所需的 application、profile、label 等参数，然后利用 RestTemplate 工具类执行 HTTP 请求。客户端从这个请求所返回的 Environment 对象中获得所需要的各项配置信息。</p><p>明白了获取远程配置信息的处理方式，我们来反推 getRemoteEnvironment 方法的触发过程。通过分析代码的调用链路，我们发现在 ConfigServicePropertySourceLocator 的 locate 方法中使用到了这个方法。而讲到这个方法就必须介绍 Spring Cloud 中的一个重要接口 PropertySourceLocator，ConfigServicePropertySourceLocator 就实现了这个接口。</p><h4 id="propertysourcelocator-与自动装配" tabindex="-1">PropertySourceLocator 与自动装配 <a class="header-anchor" href="#propertysourcelocator-与自动装配" aria-label="Permalink to &quot;PropertySourceLocator 与自动装配&quot;">​</a></h4><p>在 Spring Cloud 中，PropertySourceLocator 接口定义如下，只包含前面提到的 locate 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PropertySourceLocator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    PropertySource&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">locate</span><span style="color:#E1E4E8;">(Environment </span><span style="color:#FFAB70;">environment</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PropertySourceLocator</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    PropertySource&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">locate</span><span style="color:#24292E;">(Environment </span><span style="color:#E36209;">environment</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当我们看到 PropertySourceLocator 接口的命名，以及结合服务启动时自动获取配置信息这一主题应该能够联想到，PropertySourceLocator 肯定被一个自动配置类所引用。我们在位于 PropertySourceLocator 的同一包结构中找到了 PropertySourceBootstrapConfiguration 类，该自动配置类中包含以下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(PropertySourceBootstrapProperties.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PropertySourceBootstrapConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">ApplicationContextInitializer</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">ConfigurableApplicationContext</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">Ordered</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">PropertySourceLocator</span><span style="color:#E1E4E8;">&gt; propertySourceLocators </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setPropertySourceLocators</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            Collection&lt;</span><span style="color:#F97583;">PropertySourceLocator</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">propertySourceLocators</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.propertySourceLocators </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(propertySourceLocators);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">	@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initialize</span><span style="color:#E1E4E8;">(ConfigurableApplicationContext </span><span style="color:#FFAB70;">applicationContext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompositePropertySource composite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CompositePropertySource</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                BOOTSTRAP_PROPERTY_SOURCE_NAME);</span></span>
<span class="line"><span style="color:#E1E4E8;">        AnnotationAwareOrderComparator.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.propertySourceLocators);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> empty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigurableEnvironment environment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> applicationContext.</span><span style="color:#B392F0;">getEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (PropertySourceLocator locator </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.propertySourceLocators) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            PropertySource&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//调用各个 PropertySourceLocator 的 locate 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">            source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> locator.</span><span style="color:#B392F0;">locate</span><span style="color:#E1E4E8;">(environment);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (source </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Located property source: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> source);</span></span>
<span class="line"><span style="color:#E1E4E8;">            composite.</span><span style="color:#B392F0;">addPropertySource</span><span style="color:#E1E4E8;">(source);</span></span>
<span class="line"><span style="color:#E1E4E8;">            empty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">empty) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            MutablePropertySources propertySources </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> environment.</span><span style="color:#B392F0;">getPropertySources</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            String logConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> environment.</span><span style="color:#B392F0;">resolvePlaceholders</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${logging.config:}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            LogFile logFile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LogFile.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(environment);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (propertySources.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(BOOTSTRAP_PROPERTY_SOURCE_NAME)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                propertySources.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(BOOTSTRAP_PROPERTY_SOURCE_NAME);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">insertPropertySources</span><span style="color:#E1E4E8;">(propertySources, composite);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">reinitializeLoggingSystem</span><span style="color:#E1E4E8;">(environment, logConfig, logFile);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">setLogLevels</span><span style="color:#E1E4E8;">(applicationContext, environment);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">handleIncludedProfiles</span><span style="color:#E1E4E8;">(environment);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//省略了其他变量和方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(PropertySourceBootstrapProperties.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PropertySourceBootstrapConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">ApplicationContextInitializer</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">ConfigurableApplicationContext</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">Ordered</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">PropertySourceLocator</span><span style="color:#24292E;">&gt; propertySourceLocators </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setPropertySourceLocators</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            Collection&lt;</span><span style="color:#D73A49;">PropertySourceLocator</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">propertySourceLocators</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.propertySourceLocators </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(propertySourceLocators);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">	@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialize</span><span style="color:#24292E;">(ConfigurableApplicationContext </span><span style="color:#E36209;">applicationContext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        CompositePropertySource composite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompositePropertySource</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                BOOTSTRAP_PROPERTY_SOURCE_NAME);</span></span>
<span class="line"><span style="color:#24292E;">        AnnotationAwareOrderComparator.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.propertySourceLocators);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> empty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        ConfigurableEnvironment environment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> applicationContext.</span><span style="color:#6F42C1;">getEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (PropertySourceLocator locator </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.propertySourceLocators) {</span></span>
<span class="line"><span style="color:#24292E;">            PropertySource&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//调用各个 PropertySourceLocator 的 locate 方法</span></span>
<span class="line"><span style="color:#24292E;">            source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> locator.</span><span style="color:#6F42C1;">locate</span><span style="color:#24292E;">(environment);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (source </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Located property source: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> source);</span></span>
<span class="line"><span style="color:#24292E;">            composite.</span><span style="color:#6F42C1;">addPropertySource</span><span style="color:#24292E;">(source);</span></span>
<span class="line"><span style="color:#24292E;">            empty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">empty) {</span></span>
<span class="line"><span style="color:#24292E;">            MutablePropertySources propertySources </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> environment.</span><span style="color:#6F42C1;">getPropertySources</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            String logConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> environment.</span><span style="color:#6F42C1;">resolvePlaceholders</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${logging.config:}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            LogFile logFile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LogFile.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(environment);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (propertySources.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(BOOTSTRAP_PROPERTY_SOURCE_NAME)) {</span></span>
<span class="line"><span style="color:#24292E;">                propertySources.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(BOOTSTRAP_PROPERTY_SOURCE_NAME);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">insertPropertySources</span><span style="color:#24292E;">(propertySources, composite);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">reinitializeLoggingSystem</span><span style="color:#24292E;">(environment, logConfig, logFile);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">setLogLevels</span><span style="color:#24292E;">(applicationContext, environment);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">handleIncludedProfiles</span><span style="color:#24292E;">(environment);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//省略了其他变量和方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，PropertySourceBootstrapConfiguration 实现了 ApplicationContextInitializer 接口中的 initialize 方法，而所有的 ApplicationContextInitializer 都会在 Spring Boot 应用程序启动时进行加载。这样，当类路径中引入了 Spring Cloud Config 之后，一个 ConfigServicePropertySourceLocator 实例就会被构建并保存在 PropertySourceBootstrapConfiguration 的 propertySourceLocators 数组中。然后，我们会遍历所有 propertySourceLocators 的 locate 方法，从而完成对远程服务配置信息的读取。</p><p>在 PropertySourceBootstrapConfiguration 类中，注意到 propertySourceLocators 数组是通过 setPropertySourceLocators 方法直接进行注入的，显然我们需要找到注入 ConfigServicePropertySourceLocator 的入口。</p><p>正如前文中我们通过 PropertySourceLocator 找到 PropertySourceBootstrapConfiguration 一样，在 ConfigServicePropertySourceLocator 类的同一个包结构中，我们也找到了 ConfigServiceBootstrapConfiguration 配置类，并在该类中发现了如下所示的 configServicePropertySource 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(ConfigServicePropertySourceLocator.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConditionalOnProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.cloud.config.enabled&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">matchIfMissing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ConfigServicePropertySourceLocator </span><span style="color:#B392F0;">configServicePropertySource</span><span style="color:#E1E4E8;">(ConfigClientProperties properties) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigServicePropertySourceLocator locator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigServicePropertySourceLocator</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                properties);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> locator;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(ConfigServicePropertySourceLocator.class)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConditionalOnProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.cloud.config.enabled&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">matchIfMissing</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ConfigServicePropertySourceLocator </span><span style="color:#6F42C1;">configServicePropertySource</span><span style="color:#24292E;">(ConfigClientProperties properties) {</span></span>
<span class="line"><span style="color:#24292E;">        ConfigServicePropertySourceLocator locator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigServicePropertySourceLocator</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                properties);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> locator;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>不难看出，上述方法创建了一个新的 ConfigServicePropertySourceLocator 实例。也就是说，当类路径中包含 ConfigServiceBootstrapConfiguration 类时，就会自动实例化一个 ConfigServicePropertySourceLocator。这里用到了 Spring Boot 的自动装配机制，我们通过查看 META-INF/spring.factories 中的配置类进行确认：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># Bootstrap components</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.cloud.bootstrap.BootstrapConfiguration=\\</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.cloud.config.client.ConfigServiceBootstrapConfiguration,\\</span></span>
<span class="line"><span style="color:#E1E4E8;">	org.springframework.cloud.config.client.DiscoveryClientConfigServiceBootstrapConfiguration</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># Bootstrap components</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.cloud.bootstrap.BootstrapConfiguration=\\</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.cloud.config.client.ConfigServiceBootstrapConfiguration,\\</span></span>
<span class="line"><span style="color:#24292E;">	org.springframework.cloud.config.client.DiscoveryClientConfigServiceBootstrapConfiguration</span></span></code></pre></div><p>可以看到，BootstrapConfiguration 配置项中包含了 org.springframework.cloud.config.client.ConfigServiceBootstrapConfiguration 类的定义。</p><p>至此，围绕 Spring Cloud Config Client 如何在启动时自动获取 Server 所提供的配置信息的整体流程已经介绍完毕。作为总结，我们梳理这个过程中所涉及的核心类以及方法调用关系，如下图所示：</p>`,59),y=s("p",null,"Spring Cloud Config 客户端访问服务端配置代码执行流程图（红色背景为客户端组件，绿色背景为服务端组件）",-1),i=s("h3",{id:"小结与预告",tabindex:"-1"},[n("小结与预告 "),s("a",{class:"header-anchor",href:"#小结与预告","aria-label":'Permalink to "小结与预告"'},"​")],-1),u=s("p",null,"沿着上一课时的内容，本课时关注于如何使用 Spring Cloud Config Client 组件来访问位于配置服务器中的配置信息。我们通过引入 @Value 注解以及 @ConfigurationProperties 注解来实现了这一目标。同样的，我们发现使用这些注解非常简单方便，Spring Cloud Config 为我们自动屏蔽了所有内部的复杂实现逻辑。但对于你来说，还是结合本课时中给出的源码级的原理分析来深入背后的理解底层机制。",-1),g=s("p",null,"这里给你留一道思考题：为什么在类路径中添加了 Spring Cloud Config Client 组件之后，业务系统就能自动获取位于服务器端的配置信息呢？",-1),d=s("p",null,"在介绍完 Spring Cloud Config Client 组件之后，关于 Spring Cloud Config 我们还有一个核心的问题没有回答，即一旦位于配置服务器中的配置信息发生变更时，如何让各个客户端保持同步更新呢？这就是下一课时需要讨论的内容。",-1);function F(C,h,v,A,S,f){const a=l("Image");return o(),e("div",null,[E,t(a,{alt:"Lark20201119-171509.png",src:"https://s0.lgstatic.com/i/image/M00/6F/A4/CgqCHl-2N7yAbh1uAAGwzgZ2zng454.png"}),n(),y,i,u,g,d])}const b=p(c,[["render",F]]);export{D as __pageData,b as default};
