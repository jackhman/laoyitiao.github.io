import{_ as l,j as o,o as e,g as t,k as n,h as p,Q as s}from"./chunks/framework.e0c66c3f.js";const v=JSON.parse('{"title":"基于 Eureka 构建注册中心 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4750) 05  服务注册：如何构建 Eureka 服务器并理解其实现原理？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4750) 05  服务注册：如何构建 Eureka 服务器并理解其实现原理？.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4750) 05  服务注册：如何构建 Eureka 服务器并理解其实现原理？.md"},c=s(`<p>上一课时，我们全面介绍了服务治理的解决方案，引出了 <strong>Spring Cloud Netflix Eureka</strong> 组件。Eureka 分为<strong>服务器端组件</strong> 和<strong>客户端组件</strong>，今天我们将讨论 Eureka 服务器的构建方式及其实现原理。</p><h3 id="基于-eureka-构建注册中心" tabindex="-1">基于 Eureka 构建注册中心 <a class="header-anchor" href="#基于-eureka-构建注册中心" aria-label="Permalink to &quot;基于 Eureka 构建注册中心&quot;">​</a></h3><p>基于 Eureka 构建服务注册中心涉及两大部分内容，首先我们将给出构建单个 Eureka 服务器的方法。但是，Eureka 服务器不能保证高可用，因此在生产环境中，我们一般都还需要<strong>构建 Eureka 服务器集群</strong>。</p><h4 id="_1-构建单点-eureka-服务器" tabindex="-1">1. 构建单点 Eureka 服务器 <a class="header-anchor" href="#_1-构建单点-eureka-服务器" aria-label="Permalink to &quot;1. 构建单点 Eureka 服务器&quot;">​</a></h4><p>我们将创建一个新的 Maven 工程并命名为 eureka-server。eureka-server 是一个 Spring Boot 项目。同时我们引入了 spring-cloud-starter-eureka-server 依赖，该依赖是 Spring Cloud 中实现 Spring Cloud Netflix Eureka 功能的主体 jar 包：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-netflix-eureka-server&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-netflix-eureka-server&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>引入 Maven 依赖之后就可以创建 Spring Boot 的启动类，在示例代码中，我们把该启动类命名为 EurekaServerApplication，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableEurekaServer</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EurekaServerApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(EurekaServerApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableEurekaServer</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EurekaServerApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(EurekaServerApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>请注意，在上面的代码中，我们在启动类上加了一个 @EnableEurekaServer 注解。在 Spring Cloud 中，包含 @EnableEurekaServer 注解的服务意味着就是一个 Eureka 服务器组件。</p><p>我们运行这个 EurekaServerApplication 类并访问网站<a href="http://localhost:8761/" target="_blank" rel="noreferrer">http://localhost:8761/</a>，如果得到如下图中所示的 Eureka 服务监控页面，则意味着 Eureka 服务器已经启动成功。</p>`,10),E=s(`<p>Eureka 服务监控页面</p><p>虽然目前还没有任何一个服务注册到 Eureka 中，但从上图中，我们还是得到了关于 Eureka 服务器内存、CPU 等的有用信息。</p><p>同时，Eureka 也为开发人员提供了一系列的配置项。这些配置项可以分成三大类，一类用于<strong>控制 Eureka 服务器端行为</strong> ，以 <strong>eureka.server</strong> 开头；一类则是从客户端角度出发<strong>考虑配置需求</strong> ，以 <strong>eureka.client</strong> 开头；而最后一类则关注于注册到 <strong>Eureka 的服务实例本身</strong> ，以 <strong>eureka.instance</strong> 开头。请注意，Eureka 除了充当服务器端组件之外，实际上也可以作为客户端注册到 Eureka 本身，这时候它使用的就是客户端配置项。</p><p>Eureka 的配置项很多，我们无意一一进行展开。在日常开发过程中，使用的最多的还是客户端相关的配置，所以这里以客户端配置为例。现在，我们尝试在 eureka-server 工程的 application.yml 文件中添加了如下配置信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8761</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">eureka</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  client</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    registerWithEureka</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    fetchRegistry</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    serviceUrl</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      defaultZone</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:8761</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8761</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">eureka</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  client</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    registerWithEureka</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    fetchRegistry</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    serviceUrl</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      defaultZone</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:8761</span></span></code></pre></div><p>在这些配置项中，我们看到了三个以 eureka.client 开头的客户端配置项，它们分别是<strong>registerWithEureka、fetchRegistry</strong> 和<strong>serviceUrl</strong>。从配置项的命名上我们不难看出，registerWithEureka 用于指定是否把当前的客户端实例注册到 Eureka 服务器中，而 fetchRegistry 则用于指定是否从 Eureka 服务器上拉取已注册的服务信息。这两个配置项默认都是 true，但这里都将其设置为 false。因为在微服务体系中，包括 Eureka 服务在内的所有服务对于注册中心来说都可以算作客户端，而 Eureka 服务显然不同于业务服务，我们不希望 Eureka 服务对自身进行注册。而 serviceUrl 配置项用于服务地址，这个配置项在构建 Eureka 服务器集群是很有用，让我们一起来看一下。</p><h4 id="_2-构建-eureka-服务器集群" tabindex="-1">2. 构建 Eureka 服务器集群 <a class="header-anchor" href="#_2-构建-eureka-服务器集群" aria-label="Permalink to &quot;2. 构建 Eureka 服务器集群&quot;">​</a></h4><p>前面我们介绍了构建单个 Eureka 服务器的方法，这种运行 Eureka 服务的方式一般称为 Standalone 模式。考虑到单个 Eureka 服务可能存在的单点失效问题，我们通常都需要构建一个 Eureka 服务器集群来确保注册中心本身的可用性。与传统的集群构建方式不同，如果我们把 Eureka 也视为一个服务，也就是说 Eureka服务自身也能注册到其他 Eureka 服务上，从而实现相互注册，并构成一个集群。在 Eureka中，这种实现高可用的部署方式被称为 <strong>Peer Awareness 模式</strong>。</p><p>现在我们准备两个 Eureka 服务实例 <strong>eureka1</strong> 和 <strong>eureka2</strong>。在 Spring Boot 中，我们分别提供 application-eureka1.yml 和 application-eureka2.yml 这两个配置文件来设置相关的配置项。其中 application-eureka1.yml 配置文件的内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8761</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">eureka</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  instance</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    hostname</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> eureka1</span></span>
<span class="line"><span style="color:#E1E4E8;">  client</span></span>
<span class="line"><span style="color:#E1E4E8;">    serviceUrl</span></span>
<span class="line"><span style="color:#E1E4E8;">	   defaultZone</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">// eureka2:8762/eureka/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8761</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">eureka</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  instance</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    hostname</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> eureka1</span></span>
<span class="line"><span style="color:#24292E;">  client</span></span>
<span class="line"><span style="color:#24292E;">    serviceUrl</span></span>
<span class="line"><span style="color:#24292E;">	   defaultZone</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">// eureka2:8762/eureka/</span></span></code></pre></div><p>对应的，application-eureka2.yml 配置文件的内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">server</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8762</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">eureka</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  instance</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    hostname</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> eureka2</span></span>
<span class="line"><span style="color:#E1E4E8;">  client</span></span>
<span class="line"><span style="color:#E1E4E8;">    serviceUrl</span></span>
<span class="line"><span style="color:#E1E4E8;">	   defaultZone</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//eureka1:8761/eureka/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">server</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8762</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">eureka</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  instance</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    hostname</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> eureka2</span></span>
<span class="line"><span style="color:#24292E;">  client</span></span>
<span class="line"><span style="color:#24292E;">    serviceUrl</span></span>
<span class="line"><span style="color:#24292E;">	   defaultZone</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//eureka1:8761/eureka/</span></span></code></pre></div><p>这里就出现了一个 <strong>Eureka</strong> 实例管理类配置项 <strong>eureka.instance.hostname</strong>，用于指定当前 Eureka 服务的主机名称。然后，我们注意到 application-eureka1.yml 和 application-eureka2.yml 中的配置项完全一致，区别只是调整了端口和地址的引用。构建 Eureka 集群模式的关键点在于使用客户端配置项 eureka.client.serviceUrl.defaultZone 用于指向集群中的其他 Eureka 服务器。所以 Eureka 集群的构建方式实际上就是将自己作为服务并向其他注册中心注册自己，这样就形成了一组互相注册的服务注册中心以实现服务列表的同步。显然，这个场景下 registerWithEureka 和 fetchRegistry配置项应该都使用其默认的 true 值，所以我们不需要对其进行显式的设置。</p><p>如果你尝试使用本机搭建集群环境，显然 eureka.instance.hostname 配置项中的 eureka1 和 eureka2 是无法访问的，所以需要在本机<strong>hosts 文件</strong>中添加以下信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> eureka1</span></span>
<span class="line"><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;"> eureka2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> eureka1</span></span>
<span class="line"><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;"> eureka2</span></span></code></pre></div><p>现在启动这两个 Eureka 服务，然后分别打开 <a href="http://127.0.0.1:8761/" target="_blank" rel="noreferrer">http://127.0.0.1:8761/</a> 和 <a href="http://127.0.0.1:8762/" target="_blank" rel="noreferrer">http://127.0.0.1:8762/</a> 端点可以看到各自的服务注册效果。你可以根据这里的步骤在自己的电脑上演练这个过程，并通过两个 Eureka 服务的启动日志以及控制台界面来验证高可用架构的效果。</p><h3 id="理解-eureka-服务器实现原理" tabindex="-1">理解 Eureka 服务器实现原理 <a class="header-anchor" href="#理解-eureka-服务器实现原理" aria-label="Permalink to &quot;理解 Eureka 服务器实现原理&quot;">​</a></h3><p>在介绍完 Eureka 服务器的构建方式之后，我们重点来讲解 Eureka 服务器的实现原理。</p><h4 id="eureka-核心概念" tabindex="-1">Eureka 核心概念 <a class="header-anchor" href="#eureka-核心概念" aria-label="Permalink to &quot;Eureka 核心概念&quot;">​</a></h4><p>我们在对 Eureka 的内部结构做进一步展开，可以得到如下所示的注册中心细化模型图。</p>`,20),y=s('<p>Eureka 细化架构图</p><p>在上图中，Eureka 有以下几个概念与服务治理直接相关，首当其冲的是服务注册。<strong>服务注册</strong>（Register）是服务治理的最基本概念，内嵌了 Eureka 客户端的各个微服务通过向 Eureka 服务器提供 IP 地址、端点等各项与服务发现相关的基本信息完成服务注册操作。</p><p>因为 Eureka 客户端与服务器端通过短连接完成交互，所以在服务续约（Renew）中，Eureka 客户端需要每隔一定时间主动上报自己的运行时状态，从而进行服务续约。</p><p><strong>服务取消（Cancel）<strong>的意思就是 Eureka 客户端主动告知 Eureka 服务器自己不想再注册到 Eureka 中。当Eureka客户端连续一段时间没有向 Eureka 服务器发送服务续约信息时，Eureka 服务器就会认为该服务实例已经不再运行，从而将其从服务列表中进行</strong>剔除（Evict）</strong>。</p><p>显然，对于一个注册中心而言，想要理解它的设计理念和实现原理，我们需要分别关注 Eureka 中如何对服务注册信息的存储和管理的具体机制。在接下来的内容中，我们将重点从 Eureka 的服务存储和缓存处理这两个维度出发，基于源码来深入剖析原理。</p><h4 id="eureka-服务存储源码解析" tabindex="-1">Eureka 服务存储源码解析 <a class="header-anchor" href="#eureka-服务存储源码解析" aria-label="Permalink to &quot;Eureka 服务存储源码解析&quot;">​</a></h4><p>对于一个注册中心而言，我们首先需要关注它的数据存储方法。在 Eureka 中，我们发现 <strong>InstanceRegistry</strong> 接口及其实现类（位于 com.netflix.eureka.registry 包中）承接了这部分职能。InstanceRegistry 的类层结构如下所示：</p>',7),i=s('<p>InstanceRegistry 类层结构图</p><p>从上图中，不难看出 Spring Cloud 中同样存在一个 InstanceRegistry（位于 org.springframework.cloud.netflix.eureka.server 包中），它实际上是基于 Netflix 中 InstanceRegistry 实现的一种包装。我们在上图中 InstanceRegistry 接口的实现类 AbstractInstanceRegistry 中发现了 Eureka 用于保存注册信息的数据结构，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Lease&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt;&gt;&gt; registry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Lease&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt;&gt;&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConcurrentHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Lease&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt;&gt;&gt; registry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Lease&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt;&gt;&gt;();</span></span></code></pre></div><p>可以看到这是一个<strong>双层的 HashMap</strong> ，采用的是 JDK 中线程安全的 <strong>ConcurrentHashMap</strong>。其中第一层的 ConcurrentHashMap 的 Key 为 spring.application.name，也就是服务名，Value 为一个 ConcurrentHashMap；而第二层的 ConcurrentHashMap 的 Key 为 instanceId，也就是服务的唯一实例 ID，Value 为 Lease 对象。Eureka 采用 Lease（租约）这个词来表示对服务注册信息的抽象，Lease 对象保存了服务实例信息以及一些实例服务注册相关的时间，如注册时间 registrationTimestamp、最新的续约时间 lastUpdateTimestamp 等。如果用图形化的表达方式来展示这种数据结构，可以参考下图：</p>',4),u=s(`<p>服务注册信息的存储结构示意图</p><p>而对于 InstanceRegistry 本身，它也继承了 Eureka 中两个非常重要的接口，即<strong>LeaseManager 接口</strong> 和 <strong>LookupService 接口</strong>。其中 LeaseManager 接口定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LeaseManager</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">r</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">leaseDuration</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isReplication</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isReplication</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renew</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">isReplication</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">evict</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LeaseManager</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">r</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">leaseDuration</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isReplication</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isReplication</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renew</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">isReplication</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">evict</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然 <strong>LeaseManager</strong> 做的事情就是 Eureka 注册中心模型中的服<strong>务注册、服务续约、服务取消</strong> 和<strong>服务剔除等</strong>核心操作，关注于对服务注册过程的管理。而 LookupService 接口定义如下，关注于对应用程序与服务实例的管理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LookupService</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Application </span><span style="color:#B392F0;">getApplication</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Applications </span><span style="color:#B392F0;">getApplications</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getInstancesById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    InstanceInfo </span><span style="color:#B392F0;">getNextServerFromEureka</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">virtualHostname</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">secure</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LookupService</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    Application </span><span style="color:#6F42C1;">getApplication</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Applications </span><span style="color:#6F42C1;">getApplications</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getInstancesById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    InstanceInfo </span><span style="color:#6F42C1;">getNextServerFromEureka</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">virtualHostname</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">secure</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在内部实现上，实际上对于注册中心服务器而言，<strong>服务注册、续约、取消</strong> 和<strong>剔除</strong> 等不同操作所执行的工作流程基本一致，即都是对<strong>服务存储</strong>的操作，并把这一操作同步到其他 Eureka 节点。我们这里选择用于服务注册操作的 register 方法进行展开，register 方法非常长，我们对源码进行裁剪，得出如下所示的核销处理流程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(InstanceInfo registrant, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> leaseDuration, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isReplication) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//从已存储的 registry 获取一个服务定义</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Lease&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt;&gt; gMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> registry.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(registrant.</span><span style="color:#B392F0;">getAppName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        REGISTER.</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(isReplication);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (gMap </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//初始化一个 Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; ，并放入 registry 中</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据当前注册的 ID 找到对应的 Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">        Lease&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt; existingLease </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(registrant.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (existingLease </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (existingLease.</span><span style="color:#B392F0;">getHolder</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//如果 Lease 能找到，根据当前节点的最新更新时间和注册节点的最新更新时间比较</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//如果前者的时间晚于后者的时间，那么注册实例就以已存在的实例为准</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">//如果找不到，代表是一个新注册，则更新其每分钟期望的续约数量及其阈值</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//创建一个新 Lease 并放入 Map 中</span></span>
<span class="line"><span style="color:#E1E4E8;">        Lease&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt; lease </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Lease&lt;</span><span style="color:#F97583;">InstanceInfo</span><span style="color:#E1E4E8;">&gt;(registrant, leaseDuration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        gMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(registrant.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), lease);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//处理服务的 InstanceStatus</span></span>
<span class="line"><span style="color:#E1E4E8;">        registrant.</span><span style="color:#B392F0;">setActionType</span><span style="color:#E1E4E8;">(ActionType.ADDED);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//更新服务最新更新时间</span></span>
<span class="line"><span style="color:#E1E4E8;">        registrant.</span><span style="color:#B392F0;">setLastUpdatedTimestamp</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//刷选缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">invalidateCache</span><span style="color:#E1E4E8;">(registrant.</span><span style="color:#B392F0;">getAppName</span><span style="color:#E1E4E8;">(), registrant.</span><span style="color:#B392F0;">getVIPAddress</span><span style="color:#E1E4E8;">(), registrant.</span><span style="color:#B392F0;">getSecureVipAddress</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(InstanceInfo registrant, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> leaseDuration, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isReplication) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//从已存储的 registry 获取一个服务定义</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Lease&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt;&gt; gMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registry.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(registrant.</span><span style="color:#6F42C1;">getAppName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        REGISTER.</span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">(isReplication);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (gMap </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//初始化一个 Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; ，并放入 registry 中</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据当前注册的 ID 找到对应的 Lease</span></span>
<span class="line"><span style="color:#24292E;">        Lease&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt; existingLease </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(registrant.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (existingLease </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (existingLease.</span><span style="color:#6F42C1;">getHolder</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//如果 Lease 能找到，根据当前节点的最新更新时间和注册节点的最新更新时间比较</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//如果前者的时间晚于后者的时间，那么注册实例就以已存在的实例为准</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">//如果找不到，代表是一个新注册，则更新其每分钟期望的续约数量及其阈值</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建一个新 Lease 并放入 Map 中</span></span>
<span class="line"><span style="color:#24292E;">        Lease&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt; lease </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Lease&lt;</span><span style="color:#D73A49;">InstanceInfo</span><span style="color:#24292E;">&gt;(registrant, leaseDuration);</span></span>
<span class="line"><span style="color:#24292E;">        gMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(registrant.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), lease);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//处理服务的 InstanceStatus</span></span>
<span class="line"><span style="color:#24292E;">        registrant.</span><span style="color:#6F42C1;">setActionType</span><span style="color:#24292E;">(ActionType.ADDED);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//更新服务最新更新时间</span></span>
<span class="line"><span style="color:#24292E;">        registrant.</span><span style="color:#6F42C1;">setLastUpdatedTimestamp</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//刷选缓存</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">invalidateCache</span><span style="color:#24292E;">(registrant.</span><span style="color:#6F42C1;">getAppName</span><span style="color:#24292E;">(), registrant.</span><span style="color:#6F42C1;">getVIPAddress</span><span style="color:#24292E;">(), registrant.</span><span style="color:#6F42C1;">getSecureVipAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AbstractInstanceRegistry 中其他的 cancel、renew 方法也是同样的处理逻辑，这里不再展开。</p><h4 id="eureka-服务缓存源码解析" tabindex="-1">Eureka 服务缓存源码解析 <a class="header-anchor" href="#eureka-服务缓存源码解析" aria-label="Permalink to &quot;Eureka 服务缓存源码解析&quot;">​</a></h4><p>Eureka 服务器端组件的另一个核心功能是<strong>提供服务列表</strong>。为了提高性能，Eureka 服务器会缓存一份所有已注册的服务列表，并通过一定的定时机制对缓存数据进行更新。</p><p>我们知道为了获取注册到 Eureka 服务器上具体某一个服务实例的详细信息，可以访问如下地址：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http://&lt;</span><span style="color:#85E89D;">eureka-server-ip</span><span style="color:#E1E4E8;">&gt;:8761/eureka/apps/&lt;</span><span style="color:#85E89D;">APPID</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http://&lt;</span><span style="color:#22863A;">eureka-server-ip</span><span style="color:#24292E;">&gt;:8761/eureka/apps/&lt;</span><span style="color:#22863A;">APPID</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>该地址代表的就是一个普通的 HTTP GET 请求。Eureka 中所有对服务器端的访问都是通过<strong>RESTful 风格</strong> 的<strong>资源（Resource）</strong> 进行获取，ApplicationResource 类（位于com.netflix.eureka.resources 包中）提供了根据应用获取注册信息的入口。我们来看该类的 getApplication 方法，核心代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Key cacheKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Key</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">       Key.EntityType.Application,</span></span>
<span class="line"><span style="color:#E1E4E8;">       appName,</span></span>
<span class="line"><span style="color:#E1E4E8;">       keyType,</span></span>
<span class="line"><span style="color:#E1E4E8;">       CurrentRequestVersion.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">       EurekaAccept.</span><span style="color:#B392F0;">fromString</span><span style="color:#E1E4E8;">(eurekaAccept)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">String payLoad </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> responseCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(cacheKey);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (payLoad </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Found: {}&quot;</span><span style="color:#E1E4E8;">, appName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(payLoad).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Not Found: {}&quot;</span><span style="color:#E1E4E8;">, appName);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Response.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(Status.NOT_FOUND).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Key cacheKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Key</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">       Key.EntityType.Application,</span></span>
<span class="line"><span style="color:#24292E;">       appName,</span></span>
<span class="line"><span style="color:#24292E;">       keyType,</span></span>
<span class="line"><span style="color:#24292E;">       CurrentRequestVersion.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">       EurekaAccept.</span><span style="color:#6F42C1;">fromString</span><span style="color:#24292E;">(eurekaAccept)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">String payLoad </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> responseCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(cacheKey);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (payLoad </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Found: {}&quot;</span><span style="color:#24292E;">, appName);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Response.</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">(payLoad).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Not Found: {}&quot;</span><span style="color:#24292E;">, appName);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Response.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(Status.NOT_FOUND).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里是构建了一个 <strong>cacheKey</strong>，并直接调用了 responseCache.get(cacheKey) 方法来返回一个字符串并构建响应。从命名上看，不难想象这里使用了缓存机制。我们来看 ResponseCache 的定义，如下所示，其中最核心的就是这里的 get 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResponseCache</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invalidate</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">appName</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">vipAddress</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Nullable</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">secureVipAddress</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    AtomicLong </span><span style="color:#B392F0;">getVersionDelta</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    AtomicLong </span><span style="color:#B392F0;">getVersionDeltaWithRegions</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Key </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">getGZIP</span><span style="color:#E1E4E8;">(Key </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResponseCache</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invalidate</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">appName</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">vipAddress</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Nullable</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">secureVipAddress</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    AtomicLong </span><span style="color:#6F42C1;">getVersionDelta</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    AtomicLong </span><span style="color:#6F42C1;">getVersionDeltaWithRegions</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Key </span><span style="color:#E36209;">key</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">getGZIP</span><span style="color:#24292E;">(Key </span><span style="color:#E36209;">key</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从类层关系上看，ResponseCache 只有一个<strong>实现类 ResponseCacheImpl</strong>，我们来看它的 get 方法，发现该方法使用了如下处理策略：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Value </span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Key key, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> useReadOnlyCache) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Value payload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (useReadOnlyCache) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Value currentPayload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> readOnlyCacheMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentPayload </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    payload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentPayload;</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    payload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> readWriteCacheMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    readOnlyCacheMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, payload);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                payload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> readWriteCacheMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cannot get value for key : {}&quot;</span><span style="color:#E1E4E8;">, key, t);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> payload;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Value </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Key key, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> useReadOnlyCache) {</span></span>
<span class="line"><span style="color:#24292E;">        Value payload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (useReadOnlyCache) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Value currentPayload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readOnlyCacheMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (currentPayload </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    payload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentPayload;</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    payload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readWriteCacheMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">                    readOnlyCacheMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, payload);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                payload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readWriteCacheMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Cannot get value for key : {}&quot;</span><span style="color:#24292E;">, key, t);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> payload;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到上述代码中有两个缓存，一个是 <strong>readOnlyCacheMap</strong> ，一个是 <strong>readWriteCacheMap</strong>。其中 readOnlyCacheMap 就是一个 JDK 中的 ConcurrentMap，而 readWriteCacheMap 使用的则是 Google Guava Cache 库中的 LoadingCache 类型。在创建 LoadingCache过程中，缓存数据的来源是调用 generatePayload 方法来生成。而在这个 generatePayload 方法中，就会调用前面介绍的 AbstractInstanceRegistry 中的 getApplications 方法获取应用信息并放到缓存中。这样我们就实现了把注册信息与缓存信息进行关联。</p><p>这里有一个设计和实现上的技巧。把缓存设计为一个只读的 readOnlyCacheMap 以及一个可读写的 readWriteCacheMap，可以更好地分离职责。但因为两个缓存中保存的实际上是同一份数据，所以，我们在不断更新 readWriteCacheMap 时，也需要确保 readOnlyCacheMap 中的数据得到同步。为此 ResponseCacheImpl 提供了一个定时任务 CacheUpdateTask，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> TimerTask </span><span style="color:#B392F0;">getCacheUpdateTask</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TimerTask</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Key key </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> readOnlyCacheMap.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        CurrentRequestVersion.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(key.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Value cacheValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> readWriteCacheMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Value currentCacheValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> readOnlyCacheMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cacheValue </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> currentCacheValue) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            readOnlyCacheMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, cacheValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">th</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> TimerTask </span><span style="color:#6F42C1;">getCacheUpdateTask</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TimerTask</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Key key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> readOnlyCacheMap.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        CurrentRequestVersion.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(key.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                        Value cacheValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readWriteCacheMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">                        Value currentCacheValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readOnlyCacheMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cacheValue </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> currentCacheValue) {</span></span>
<span class="line"><span style="color:#24292E;">                            readOnlyCacheMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, cacheValue);</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">th</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，这个定时任务主要是从 readWriteCacheMap 更新数据到 readOnlyCacheMap。</p><h4 id="eureka-高可用源码解析" tabindex="-1">Eureka 高可用源码解析 <a class="header-anchor" href="#eureka-高可用源码解析" aria-label="Permalink to &quot;Eureka 高可用源码解析&quot;">​</a></h4><p>我们已经在前面的内容中了解到 Eureka 的高可用部署方式被称为 <strong>Peer Awareness 模式</strong> 。对应的，我们在 <strong>InstanceRegistry 的类层</strong> 结构中也已经看到了它的一个扩展接口 <strong>PeerAwareInstanceRegistry</strong> 以及该接口的实现类 PeerAwareInstanceRegistryImpl。</p><p>我们还是围绕服务注册这个场景展开讨论，在 <strong>PeerAwareInstanceRegistryImpl</strong> 中同样存在一个 register 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InstanceInfo info, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isReplication) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> leaseDuration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Lease.DEFAULT_DURATION_IN_SECS;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.</span><span style="color:#B392F0;">getLeaseInfo</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">getLeaseInfo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDurationInSecs</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            leaseDuration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.</span><span style="color:#B392F0;">getLeaseInfo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDurationInSecs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(info, leaseDuration, isReplication);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">replicateToPeers</span><span style="color:#E1E4E8;">(Action.Register, info.</span><span style="color:#B392F0;">getAppName</span><span style="color:#E1E4E8;">(), info.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), info, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, isReplication);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InstanceInfo info, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isReplication) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> leaseDuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lease.DEFAULT_DURATION_IN_SECS;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (info.</span><span style="color:#6F42C1;">getLeaseInfo</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">getLeaseInfo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getDurationInSecs</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            leaseDuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> info.</span><span style="color:#6F42C1;">getLeaseInfo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getDurationInSecs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(info, leaseDuration, isReplication);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">replicateToPeers</span><span style="color:#24292E;">(Action.Register, info.</span><span style="color:#6F42C1;">getAppName</span><span style="color:#24292E;">(), info.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), info, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, isReplication);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们在这里看到了一个非常重要的<strong>replicateToPeers 方法</strong> ，该方法作就是用来实现服务器节点之间的状态同步。<strong>replicateToPeers 方法的核心代码</strong>如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> PeerEurekaNode node </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> peerEurekaNodes.</span><span style="color:#B392F0;">getPeerEurekaNodes</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//如何该 URL 代表主机自身，则不用进行注册</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (peerEurekaNodes.</span><span style="color:#B392F0;">isThisMyUrl</span><span style="color:#E1E4E8;">(node.</span><span style="color:#B392F0;">getServiceUrl</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">replicateInstanceActionsToPeers</span><span style="color:#E1E4E8;">(action, appName, id, info, newStatus, node);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PeerEurekaNode node </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> peerEurekaNodes.</span><span style="color:#6F42C1;">getPeerEurekaNodes</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//如何该 URL 代表主机自身，则不用进行注册</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (peerEurekaNodes.</span><span style="color:#6F42C1;">isThisMyUrl</span><span style="color:#24292E;">(node.</span><span style="color:#6F42C1;">getServiceUrl</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">replicateInstanceActionsToPeers</span><span style="color:#24292E;">(action, appName, id, info, newStatus, node);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了理解这个操作，我们首先需要理解 Eureka 中的集群模式，这部分代码位于 com.netflix.eureka.cluster 包中，其中包含了代表节点的 PeerEurekaNode 和 PeerEurekaNodes 类，以及用于节点之间数据传递的 HttpReplicationClient 接口。而 replicateInstanceActionsToPeers 方法中则根据不同的 Action 来调用 PeerEurekaNode 的不同方法。例如，如果是 StatusUpdate Action，则会调动 PeerEurekaNode的statusUpdate 方法，而该方法又会执行如下代码;</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">replicationClient.</span><span style="color:#B392F0;">statusUpdate</span><span style="color:#E1E4E8;">(appName, id, newStatus, info);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">replicationClient.</span><span style="color:#6F42C1;">statusUpdate</span><span style="color:#24292E;">(appName, id, newStatus, info);</span></span></code></pre></div><p>这句代码完成了 PeerEurekaNode 之间的通信，而 replicationClient 是 HttpReplicationClient 接口的实例，该接口定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpReplicationClient</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EurekaHttpClient</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">statusUpdate</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">asgName</span><span style="color:#E1E4E8;">, ASGStatus </span><span style="color:#FFAB70;">newStatus</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    EurekaHttpResponse&lt;</span><span style="color:#F97583;">ReplicationListResponse</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">submitBatchUpdates</span><span style="color:#E1E4E8;">(ReplicationList </span><span style="color:#FFAB70;">replicationList</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpReplicationClient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EurekaHttpClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">statusUpdate</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">asgName</span><span style="color:#24292E;">, ASGStatus </span><span style="color:#E36209;">newStatus</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    EurekaHttpResponse&lt;</span><span style="color:#D73A49;">ReplicationListResponse</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">submitBatchUpdates</span><span style="color:#24292E;">(ReplicationList </span><span style="color:#E36209;">replicationList</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>HttpReplicationClient 接口继承自 EurekaHttpClient 接口，而 EurekaHttpClient 接口属于 Eureka 客户端组件，我们会在下一课时介绍 Eureka 客户端基本原理时进行详细介绍。在这里，我们只需要明白 Eureka 提供了 JerseyReplicationClient（位于 com.netflix.eureka.transport 包下）这一基于 Jersey 框架实现的HttpReplicationClient。以 statusUpdate 方法为例，它的实现过程如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> EurekaHttpResponse</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">statusUpdate</span><span style="color:#E1E4E8;">(String asgName, ASGStatus newStatus) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ClientResponse response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String urlPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;asg/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> asgName </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/status&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jerseyApacheClient.</span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">(serviceUrl)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">(urlPath)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">queryParam</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">, newStatus.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">(PeerEurekaNode.HEADER_REPLICATION, </span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(ClientResponse.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> EurekaHttpResponse.</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                response.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> EurekaHttpResponse</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">statusUpdate</span><span style="color:#24292E;">(String asgName, ASGStatus newStatus) {</span></span>
<span class="line"><span style="color:#24292E;">        ClientResponse response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            String urlPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;asg/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> asgName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/status&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jerseyApacheClient.</span><span style="color:#6F42C1;">resource</span><span style="color:#24292E;">(serviceUrl)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">(urlPath)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">queryParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">, newStatus.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(PeerEurekaNode.HEADER_REPLICATION, </span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ClientResponse.class);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> EurekaHttpResponse.</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                response.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是典型的基于 Resource 的 RESTful 风格的调用方法，用到了 ApacheHttpClient4 工具类。通过以上分析，我们已经从主要维度上掌握了整个 Eureka 服务器端内部的运行机制。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>今天我们讨论的是 Eureka 服务器端组件的相关内容，可以看到基于 Spring Cloud 框架，构建一个 Eureka 注册中心所需要做的事情仅仅只是添加一个注解。但在内部实现上，Eureka 服务器端需要考虑各个微服务实例的存储和获取等核心流程，也需要考虑如何确保注册中心本身的高可用问题。我们基于源码，对这些流程和问题底层的原理进行了详细的分析。</p><p>这里给你留一道思考题：Eureka 是如何实现自身的高可用架构的？</p><p>讲完 Eureka 服务器端组件，下一课时，我将和你一起继续讨论 Eureka 的客户端组件的使用方法和实现原理。</p>`,39);function g(d,F,k,A,h,C){const a=o("Image");return e(),t("div",null,[c,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/58/E5/CgqCHl9wTn-AADzaAACz58XWQz4286.png"}),p(),E,n(a,{alt:"Lark20200930-144014.png",src:"https://s0.lgstatic.com/i/image/M00/5A/32/CgqCHl90KMWAEA43AAA7V0eIhi4533.png"}),p(),y,n(a,{alt:"Lark20200930-144023.png",src:"https://s0.lgstatic.com/i/image/M00/5A/27/Ciqc1F90KO2AYINVAANgSO1J2Fs541.png"}),p(),i,n(a,{alt:"Lark20200930-144020.png",src:"https://s0.lgstatic.com/i/image/M00/5A/27/Ciqc1F90KNOATIZoAACHZSqum_8255.png"}),p(),u])}const b=l(r,[["render",g]]);export{v as __pageData,b as default};
