import{_ as e,j as o,o as t,g as c,k as l,h as a,s,Q as p}from"./chunks/framework.4e7d56ce.js";const x=JSON.parse('{"title":"18Executor才是执行SQL语句的幕后推手（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6389) 18  Executor 才是执行 SQL 语句的幕后推手（下）.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6389) 18  Executor 才是执行 SQL 语句的幕后推手（下）.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6389) 18  Executor 才是执行 SQL 语句的幕后推手（下）.md"},E=s("h1",{id:"_18executor才是执行sql语句的幕后推手-下",tabindex:"-1"},[a("18Executor才是执行SQL语句的幕后推手（下） "),s("a",{class:"header-anchor",href:"#_18executor才是执行sql语句的幕后推手-下","aria-label":'Permalink to "18Executor才是执行SQL语句的幕后推手（下）"'},"​")],-1),y=s("p",null,"在上一讲中，我们首先介绍了模板方法模式的相关知识，然后介绍了 Executor 接口的核心方法，最后分析了 BaseExecutor 抽象类是如何利用模板方法模式为其他 Executor 抽象了一级缓存和事务管理的能力。这一讲，我们再来介绍剩余的四个重点 Executor 实现。",-1),i=p(`<p>Executor 接口继承关系图</p><h3 id="simpleexecutor" tabindex="-1">SimpleExecutor <a class="header-anchor" href="#simpleexecutor" aria-label="Permalink to &quot;SimpleExecutor&quot;">​</a></h3><p>我们来看 BaseExecutor 的第一个子类------ SimpleExecutor，同时<strong>它也是 Executor 接口最简单的实现</strong>。</p><p>正如上一讲中分析的那样，BaseExecutor 通过模板方法模式实现了读写一级缓存、事务管理等不随场景变化的基础方法，在 SimpleExecutor、ReuseExecutor、BatchExecutor 等实现类中，不再处理这些不变的逻辑，而只要关注 4 个 do*() 方法的实现即可。</p><p>这里我们重点来看 SimpleExecutor 中 doQuery() 方法的实现逻辑。</p><ol><li><p>通过 newStatementHandler() 方法创建 StatementHandler 对象，其中会根据 MappedStatement.statementType 配置创建相应的 StatementHandler 实现对象，并添加 RoutingStatementHandler 装饰器。</p></li><li><p>通过 prepareStatement() 方法初始化 Statement 对象，其中还依赖 ParameterHandler 填充 SQL 语句中的占位符。</p></li><li><p>通过 StatementHandler.query() 方法执行 SQL 语句，并通过我们前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6385&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">14</a>和<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6386&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">15</a>讲介绍的 DefaultResultSetHandler 将 ResultSet 映射成结果对象并返回。</p></li></ol><p>doQuery() 方法的核心代码实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doQuery</span><span style="color:#E1E4E8;">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Statement stmt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Configuration configuration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ms.</span><span style="color:#B392F0;">getConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建StatementHandler对象，实际返回的是RoutingStatementHandler对象（我们在第16讲介绍过）</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 其中根据MappedStatement.statementType选择具体的StatementHandler实现</span></span>
<span class="line"><span style="color:#E1E4E8;">        StatementHandler handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">newStatementHandler</span><span style="color:#E1E4E8;">(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 完成StatementHandler的创建和初始化，该方法会调用StatementHandler.prepare()方法创建</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Statement对象，然后调用StatementHandler.parameterize()方法处理占位符</span></span>
<span class="line"><span style="color:#E1E4E8;">        stmt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(handler, ms.</span><span style="color:#B392F0;">getStatementLog</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调用StatementHandler.query()方法，执行SQL语句，并通过ResultSetHandler完成结果集的映射</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> handler.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(stmt, resultHandler);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">closeStatement</span><span style="color:#E1E4E8;">(stmt);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doQuery</span><span style="color:#24292E;">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    Statement stmt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Configuration configuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ms.</span><span style="color:#6F42C1;">getConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建StatementHandler对象，实际返回的是RoutingStatementHandler对象（我们在第16讲介绍过）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 其中根据MappedStatement.statementType选择具体的StatementHandler实现</span></span>
<span class="line"><span style="color:#24292E;">        StatementHandler handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">newStatementHandler</span><span style="color:#24292E;">(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 完成StatementHandler的创建和初始化，该方法会调用StatementHandler.prepare()方法创建</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Statement对象，然后调用StatementHandler.parameterize()方法处理占位符</span></span>
<span class="line"><span style="color:#24292E;">        stmt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(handler, ms.</span><span style="color:#6F42C1;">getStatementLog</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用StatementHandler.query()方法，执行SQL语句，并通过ResultSetHandler完成结果集的映射</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> handler.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(stmt, resultHandler);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">closeStatement</span><span style="color:#24292E;">(stmt);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>SimpleExecutor 中的 doQueryCursor()、update() 等方法实现与 doQuery() 方法的实现基本类似，这里不再展开介绍，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/mybatis?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">源码</a>进行分析。</p><h3 id="reuseexecutor" tabindex="-1">ReuseExecutor <a class="header-anchor" href="#reuseexecutor" aria-label="Permalink to &quot;ReuseExecutor&quot;">​</a></h3><p>你如果有过 JDBC 优化经验的话，可能会知道重用 Statement 对象是一种常见的优化手段，主要目的是减少 SQL 预编译开销，同时还会降低 Statement 对象的创建和销毁频率，这在一定程度上可以提升系统性能。</p><p>ReuseExecutor 这个 BaseExecutor 实现就<strong>实现了重用 Statement 的优化</strong>，ReuseExecutor 维护了一个 statementMap 字段（HashMap&lt;String, Statement&gt;类型）来缓存已有的 Statement 对象，该缓存的 Key 是 SQL 模板，Value 是 SQL 模板对应的 Statement 对象。这样在执行相同 SQL 模板时，我们就可以复用 Statement 对象了。</p><p>ReuseExecutor 中的 do*() 方法实现与前面介绍的 SimpleExecutor 实现完全一样，两者唯一的<strong>区别在于其中依赖的 prepareStatement() 方法</strong>：SimpleExecutor 每次都会创建全新的 Statement 对象，ReuseExecutor 则是先尝试查询 statementMap 缓存，如果缓存命中，则会重用其中的 Statement 对象。</p><p>另外，在事务提交/回滚以及 Executor 关闭的时候，需要同时关闭 statementMap 集合中缓存的全部 Statement 对象，这部分逻辑是在 doFlushStatements() 方法中实现的，核心代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">BatchResult</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doFlushStatements</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isRollback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 关闭statementMap集合中缓存的全部Statement对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Statement stmt </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> statementMap.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">closeStatement</span><span style="color:#E1E4E8;">(stmt);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 清空statementMap集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        statementMap.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">BatchResult</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFlushStatements</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isRollback) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 关闭statementMap集合中缓存的全部Statement对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Statement stmt </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> statementMap.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">closeStatement</span><span style="color:#24292E;">(stmt);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 清空statementMap集合</span></span>
<span class="line"><span style="color:#24292E;">        statementMap.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h3 id="batchexecutor" tabindex="-1">BatchExecutor <a class="header-anchor" href="#batchexecutor" aria-label="Permalink to &quot;BatchExecutor&quot;">​</a></h3><p>批处理是 JDBC 编程中的另一种优化手段。</p><p>JDBC 在执行 SQL 语句时，会将 SQL 语句以及实参通过网络请求的方式发送到数据库，一次执行一条 SQL 语句，一方面会减小请求包的有效负载，另一个方面会增加耗费在网络通信上的时间。通过批处理的方式，我们就可以在 JDBC 客户端缓存多条 SQL 语句，然后在 flush 或缓存满的时候，将多条 SQL 语句打包发送到数据库执行，这样就可以有效地降低上述两方面的损耗，从而提高系统性能。</p><p>不过，有一点需要特别注意：每次向数据库发送的 SQL 语句的条数是有上限的，如果批量执行的时候超过这个上限值，数据库就会抛出异常，拒绝执行这一批 SQL 语句，所以我们<strong>需要控制批量发送 SQL 语句的条数和频率</strong>。</p><p><strong>BatchExecutor 是用于实现批处理的 Executor 实现</strong> ，其中维护了一个 List<code>&lt;Statement&gt;</code> 集合（statementList 字段）用来缓存一批 SQL，每个 Statement 可以写入多条 SQL。</p><p>我们知道 JDBC 的批处理操作只支持 insert、update、delete 等修改操作，也就是说 BatchExecutor 对批处理的实现集中在 doUpdate() 方法中。在 doUpdate() 方法中追加一条待执行的 SQL 语句时，BatchExecutor 会先将该条 SQL 语句与最近一次追加的 SQL 语句进行比较，如果相同，则追加到最近一次使用的 Statement 对象中；如果不同，则追加到一个全新的 Statement 对象，同时会将新建的 Statement 对象放入 statementList 缓存中。</p><p>下面是 BatchExecutor.doUpdate() 方法的核心逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doUpdate</span><span style="color:#E1E4E8;">(MappedStatement ms, Object parameterObject) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Configuration configuration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ms.</span><span style="color:#B392F0;">getConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建StatementHandler对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> StatementHandler handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> configuration.</span><span style="color:#B392F0;">newStatementHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, ms, parameterObject, RowBounds.DEFAULT, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> BoundSql boundSql </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handler.</span><span style="color:#B392F0;">getBoundSql</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取此次追加的SQL模板</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> boundSql.</span><span style="color:#B392F0;">getSql</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Statement stmt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 比较此次追加的SQL模板与最近一次追加的SQL模板，以及两个MappedStatement对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sql.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(currentSql) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> ms.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(currentStatement)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 两者相同，则获取statementList集合中最后一个Statement对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> last </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statementList.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        stmt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statementList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(last);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">applyTransactionTimeout</span><span style="color:#E1E4E8;">(stmt);</span></span>
<span class="line"><span style="color:#E1E4E8;">        handler.</span><span style="color:#B392F0;">parameterize</span><span style="color:#E1E4E8;">(stmt); </span><span style="color:#6A737D;">// 设置实参</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 查找该Statement对象对应的BatchResult对象，并记录用户传入的实参</span></span>
<span class="line"><span style="color:#E1E4E8;">        BatchResult batchResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> batchResultList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(last);</span></span>
<span class="line"><span style="color:#E1E4E8;">        batchResult.</span><span style="color:#B392F0;">addParameterObject</span><span style="color:#E1E4E8;">(parameterObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Connection connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(ms.</span><span style="color:#B392F0;">getStatementLog</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建新的Statement对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        stmt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handler.</span><span style="color:#B392F0;">prepare</span><span style="color:#E1E4E8;">(connection, transaction.</span><span style="color:#B392F0;">getTimeout</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        handler.</span><span style="color:#B392F0;">parameterize</span><span style="color:#E1E4E8;">(stmt);</span><span style="color:#6A737D;">// 设置实参</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 更新currentSql和currentStatement</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentSql </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sql;</span></span>
<span class="line"><span style="color:#E1E4E8;">        currentStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ms;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将新创建的Statement对象添加到statementList集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">        statementList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(stmt);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 为新Statement对象添加新的BatchResult对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        batchResultList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BatchResult</span><span style="color:#E1E4E8;">(ms, sql, parameterObject));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    handler.</span><span style="color:#B392F0;">batch</span><span style="color:#E1E4E8;">(stmt);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> BATCH_UPDATE_RETURN_VALUE;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doUpdate</span><span style="color:#24292E;">(MappedStatement ms, Object parameterObject) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Configuration configuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ms.</span><span style="color:#6F42C1;">getConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建StatementHandler对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> StatementHandler handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">newStatementHandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, ms, parameterObject, RowBounds.DEFAULT, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> BoundSql boundSql </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handler.</span><span style="color:#6F42C1;">getBoundSql</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取此次追加的SQL模板</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> boundSql.</span><span style="color:#6F42C1;">getSql</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Statement stmt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 比较此次追加的SQL模板与最近一次追加的SQL模板，以及两个MappedStatement对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sql.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(currentSql) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> ms.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(currentStatement)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 两者相同，则获取statementList集合中最后一个Statement对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statementList.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        stmt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statementList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(last);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">applyTransactionTimeout</span><span style="color:#24292E;">(stmt);</span></span>
<span class="line"><span style="color:#24292E;">        handler.</span><span style="color:#6F42C1;">parameterize</span><span style="color:#24292E;">(stmt); </span><span style="color:#6A737D;">// 设置实参</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 查找该Statement对象对应的BatchResult对象，并记录用户传入的实参</span></span>
<span class="line"><span style="color:#24292E;">        BatchResult batchResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> batchResultList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(last);</span></span>
<span class="line"><span style="color:#24292E;">        batchResult.</span><span style="color:#6F42C1;">addParameterObject</span><span style="color:#24292E;">(parameterObject);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(ms.</span><span style="color:#6F42C1;">getStatementLog</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建新的Statement对象</span></span>
<span class="line"><span style="color:#24292E;">        stmt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handler.</span><span style="color:#6F42C1;">prepare</span><span style="color:#24292E;">(connection, transaction.</span><span style="color:#6F42C1;">getTimeout</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        handler.</span><span style="color:#6F42C1;">parameterize</span><span style="color:#24292E;">(stmt);</span><span style="color:#6A737D;">// 设置实参</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 更新currentSql和currentStatement</span></span>
<span class="line"><span style="color:#24292E;">        currentSql </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sql;</span></span>
<span class="line"><span style="color:#24292E;">        currentStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ms;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将新创建的Statement对象添加到statementList集合中</span></span>
<span class="line"><span style="color:#24292E;">        statementList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(stmt);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 为新Statement对象添加新的BatchResult对象</span></span>
<span class="line"><span style="color:#24292E;">        batchResultList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BatchResult</span><span style="color:#24292E;">(ms, sql, parameterObject));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    handler.</span><span style="color:#6F42C1;">batch</span><span style="color:#24292E;">(stmt);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> BATCH_UPDATE_RETURN_VALUE;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里使用到的 BatchResult 用于记录批处理的结果，一个 BatchResult 对象与一个 Statement 对象对应，BatchResult 中维护了一个 updateCounts 字段（int[] 数组类型）来记录关联 Statement 对象执行批处理的结果。</p><p>添加完待执行的 SQL 语句之后，我们再来看一下 doFlushStatements() 方法，其中会通过 Statement.executeBatch() 方法批量执行 SQL，然后 SQL 语句影响行数以及数据库生成的主键填充到相应的 BatchResult 对象中返回。下面是其核心实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">BatchResult</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doFlushStatements</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isRollback) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 用于储存批处理的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">BatchResult</span><span style="color:#E1E4E8;">&gt; results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果明确指定了要回滚事务，则直接返回空集合，忽略statementList集合中记录的SQL语句</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isRollback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statementList.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 遍历statementList集合</span></span>
<span class="line"><span style="color:#E1E4E8;">            Statement stmt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statementList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i);</span><span style="color:#6A737D;">// 获取Statement对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">applyTransactionTimeout</span><span style="color:#E1E4E8;">(stmt);</span></span>
<span class="line"><span style="color:#E1E4E8;">            BatchResult batchResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> batchResultList.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i); </span><span style="color:#6A737D;">// 获取对应BatchResult对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 调用Statement.executeBatch()方法批量执行其中记录的SQL语句，并使用返回的int数组</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 更新BatchResult.updateCounts字段，其中每一个元素都表示一条SQL语句影响的记录条数</span></span>
<span class="line"><span style="color:#E1E4E8;">                batchResult.</span><span style="color:#B392F0;">setUpdateCounts</span><span style="color:#E1E4E8;">(stmt.</span><span style="color:#B392F0;">executeBatch</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                MappedStatement ms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> batchResult.</span><span style="color:#B392F0;">getMappedStatement</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; parameterObjects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> batchResult.</span><span style="color:#B392F0;">getParameterObjects</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 获取配置的KeyGenerator对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                KeyGenerator keyGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ms.</span><span style="color:#B392F0;">getKeyGenerator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Jdbc3KeyGenerator.class.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(keyGenerator.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 获取数据库生成的主键，并记录到实参中对应的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Jdbc3KeyGenerator jdbc3KeyGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Jdbc3KeyGenerator) keyGenerator;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    jdbc3KeyGenerator.</span><span style="color:#B392F0;">processBatch</span><span style="color:#E1E4E8;">(ms, stmt, parameterObjects);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">NoKeyGenerator.class.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(keyGenerator.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 其他类型的KeyGenerator，会调用其processAfter()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Object parameter </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> parameterObjects) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        keyGenerator.</span><span style="color:#B392F0;">processAfter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, ms, stmt, parameter);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">closeStatement</span><span style="color:#E1E4E8;">(stmt);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (BatchUpdateException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 异常处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 添加BatchResult到results集合</span></span>
<span class="line"><span style="color:#E1E4E8;">            results.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(batchResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> results;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">BatchResult</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFlushStatements</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isRollback) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 用于储存批处理的结果</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">BatchResult</span><span style="color:#24292E;">&gt; results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果明确指定了要回滚事务，则直接返回空集合，忽略statementList集合中记录的SQL语句</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isRollback) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statementList.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 遍历statementList集合</span></span>
<span class="line"><span style="color:#24292E;">            Statement stmt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statementList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i);</span><span style="color:#6A737D;">// 获取Statement对象</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">applyTransactionTimeout</span><span style="color:#24292E;">(stmt);</span></span>
<span class="line"><span style="color:#24292E;">            BatchResult batchResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> batchResultList.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i); </span><span style="color:#6A737D;">// 获取对应BatchResult对象</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 调用Statement.executeBatch()方法批量执行其中记录的SQL语句，并使用返回的int数组</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 更新BatchResult.updateCounts字段，其中每一个元素都表示一条SQL语句影响的记录条数</span></span>
<span class="line"><span style="color:#24292E;">                batchResult.</span><span style="color:#6F42C1;">setUpdateCounts</span><span style="color:#24292E;">(stmt.</span><span style="color:#6F42C1;">executeBatch</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                MappedStatement ms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> batchResult.</span><span style="color:#6F42C1;">getMappedStatement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; parameterObjects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> batchResult.</span><span style="color:#6F42C1;">getParameterObjects</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 获取配置的KeyGenerator对象</span></span>
<span class="line"><span style="color:#24292E;">                KeyGenerator keyGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ms.</span><span style="color:#6F42C1;">getKeyGenerator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Jdbc3KeyGenerator.class.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(keyGenerator.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 获取数据库生成的主键，并记录到实参中对应的字段</span></span>
<span class="line"><span style="color:#24292E;">                    Jdbc3KeyGenerator jdbc3KeyGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Jdbc3KeyGenerator) keyGenerator;</span></span>
<span class="line"><span style="color:#24292E;">                    jdbc3KeyGenerator.</span><span style="color:#6F42C1;">processBatch</span><span style="color:#24292E;">(ms, stmt, parameterObjects);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">NoKeyGenerator.class.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(keyGenerator.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 其他类型的KeyGenerator，会调用其processAfter()方法</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Object parameter </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> parameterObjects) {</span></span>
<span class="line"><span style="color:#24292E;">                        keyGenerator.</span><span style="color:#6F42C1;">processAfter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, ms, stmt, parameter);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">closeStatement</span><span style="color:#24292E;">(stmt);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (BatchUpdateException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 异常处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 添加BatchResult到results集合</span></span>
<span class="line"><span style="color:#24292E;">            results.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(batchResult);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> results;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="cachingexecutor" tabindex="-1">CachingExecutor <a class="header-anchor" href="#cachingexecutor" aria-label="Permalink to &quot;CachingExecutor&quot;">​</a></h3><p>CachingExecutor 是我们最后一个要介绍的 Executor 接口实现类，它是<strong>一个 Executor 装饰器实现，会在其他 Executor 的基础之上添加二级缓存的相关功能</strong>。在上一讲中，我们已经介绍过了一级缓存，下面就接着讲解二级缓存相关的内容。</p><h4 id="_1-二级缓存" tabindex="-1">1. 二级缓存 <a class="header-anchor" href="#_1-二级缓存" aria-label="Permalink to &quot;1. 二级缓存&quot;">​</a></h4><p>我们知道一级缓存的生命周期默认与 SqlSession 相同，而这里介绍的 MyBatis 中的二级缓存则与应用程序的生命周期相同。与二级缓存相关的配置主要有下面三项。</p><p><strong>第一项，二级缓存全局开关</strong>。这个全局开关是 mybatis-config.xml 配置文件中的 cacheEnabled 配置项。当 cacheEnabled 被设置为 true 时，才会开启二级缓存功能，开启二级缓存功能之后，下面两项的配置才会控制二级缓存的行为。</p><p><strong>第二项，命名空间级别开关</strong> 。在 Mapper 配置文件中，可以通过配置 <code>&lt;cache&gt;</code> 标签或 <code>&lt;cache-ref&gt;</code> 标签开启二级缓存功能。</p><ul><li><p>在解析到 <code>&lt;cache&gt;</code> 标签时，MyBatis 会为当前 Mapper.xml 文件对应的命名空间创建一个关联的 Cache 对象（默认为 PerpetualCache 类型的对象），作为其二级缓存的实现。此外，<code>&lt;cache&gt;</code> 标签中还提供了一个 type 属性，我们可以通过该属性使用自定义的 Cache 类型。</p></li><li><p>在解析到 <code>&lt;cache-ref&gt;</code> 标签时，MyBatis 并不会创建新的 Cache 对象，而是根据 <code>&lt;cache-ref&gt;</code> 标签的 namespace 属性查找指定命名空间对应的 Cache 对象，然后让当前命名空间与指定命名空间共享同一个 Cache 对象。</p></li></ul><p><strong>第三项，语句级别开关</strong> 。我们可以通过 <code>&lt;select&gt;</code> 标签中的 useCache 属性，控制该 select 语句查询到的结果对象是否保存到二级缓存中，useCache 属性默认值为 true。</p><h4 id="_2-transactionalcache" tabindex="-1">2. TransactionalCache <a class="header-anchor" href="#_2-transactionalcache" aria-label="Permalink to &quot;2. TransactionalCache&quot;">​</a></h4><p>了解了二级缓存的生命周期、基本概念以及相关配置之后，我们开始介绍 CachingExecutor 依赖的底层组件。</p><p>CachingExecutor 底层除了依赖 PerpetualCache 实现来缓存数据之外，还会<strong>依赖 TransactionalCache 和 TransactionalCacheManager 两个组件</strong>，下面我们就一一详细介绍下。</p><p>TransactionalCache 是 Cache 接口众多实现之一，它也是一个装饰器，用来记录一个事务中添加到二级缓存中的缓存。</p><p>TransactionalCache 中的 entriesToAddOnCommit 字段（Map<code>&lt;Object, Object&gt;</code> 类型）用来暂存当前事务中添加到二级缓存中的数据，这些数据在事务提交时才会真正添加到底层的 Cache 对象（也就是二级缓存）中。这一点我们可以从 TransactionalCache 的 putObject() 方法以及 flushPendingEntries() 方法（commit() 方法会调用该方法）中看到相关代码实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">putObject</span><span style="color:#E1E4E8;">(Object key, Object object) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将数据暂存到entriesToAddOnCommit集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    entriesToAddOnCommit.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, object);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flushPendingEntries</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; entry </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> entriesToAddOnCommit.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将entriesToAddOnCommit集合中的数据添加到二级缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        delegate.</span><span style="color:#B392F0;">putObject</span><span style="color:#E1E4E8;">(entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 其他逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">putObject</span><span style="color:#24292E;">(Object key, Object object) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将数据暂存到entriesToAddOnCommit集合</span></span>
<span class="line"><span style="color:#24292E;">    entriesToAddOnCommit.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, object);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flushPendingEntries</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> entriesToAddOnCommit.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将entriesToAddOnCommit集合中的数据添加到二级缓存</span></span>
<span class="line"><span style="color:#24292E;">        delegate.</span><span style="color:#6F42C1;">putObject</span><span style="color:#24292E;">(entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 其他逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那为什么要在事务提交时才将 entriesToAddOnCommit 集合中的缓存数据写入底层真正的二级缓存中，而不是像操作一级缓存那样，每次查询都直接写入缓存呢？其实这是<strong>为了防止出现&quot;脏读&quot;</strong>。</p><p>我们假设当前数据库的隔离级别是&quot;不可重复读&quot;，如下图所示，两个业务线程分别开启了 T1、T2 两个事务：</p><ul><li><p>在事务 T1 中添加了记录 A，之后查询记录 A；</p></li><li><p>事务 T2 会查询记录 A。</p></li></ul>`,43),u=p(`<p>两事务并发操作的示意图</p><p>如果事务 T1 查询记录 A 时，就将 A 对应的结果对象写入二级缓存，那在事务 T2 查询记录 A 时，会从二级缓存中直接拿到结果对象。此时的事务 T1 仍然未提交，也就出现了&quot;脏读&quot;。</p><p>我们按照 TransactionalCache 的实现再来分析下，事务 T1 查询 A 数据的时候，未命中二级缓存，就会击穿到数据库，因为写入和读取 A 都是在事务 T1 中，所以能够查询成功，同时更新 entriesToAddOnCommit 集合。事务 T2 查询记录 A 时，同样也会击穿二级缓存，访问数据库，因为此时写入和读取 A 是不同的事务，且数据库的事务隔离级别为&quot;不可重复读&quot;，这就导致事务 T2 无法查询到记录 A，也就避免了&quot;脏读&quot;。</p><p>如上图所示，事务 T1 在提交时，会将 entriesToAddOnCommit 中的数据添加到二级缓存中，所以事务 T2 第二次查询记录 A 时，会命中二级缓存，也就出现了同一事务中多次读取的结果不同的现象，也就是我们说的&quot;不可重复读&quot;。</p><p>TransactionalCache 中的另一个核心字段是 entriesMissedInCache，它用来记录未命中的 CacheKey 对象。在 getObject() 方法中，我们可以看到写入 entriesMissedInCache 集合的相关代码片段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getObject</span><span style="color:#E1E4E8;">(Object key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object object </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> delegate.</span><span style="color:#B392F0;">getObject</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (object </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        entriesMissedInCache.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 其他逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getObject</span><span style="color:#24292E;">(Object key) {</span></span>
<span class="line"><span style="color:#24292E;">    Object object </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> delegate.</span><span style="color:#6F42C1;">getObject</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (object </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        entriesMissedInCache.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 其他逻辑</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在事务提交的时候，会将 entriesMissedInCache 集合中的 CacheKey 写入底层的二级缓存（写入时的 Value 为 null）。在事务回滚时，会调用底层二级缓存的 removeObject() 方法，删除 entriesMissedInCache 集合中 CacheKey。</p><p>你可能会问，为什么要用 entriesMissedInCache 集合记录未命中缓存的 CacheKey 呢？为什么还要在缓存结束时处理这些 CacheKey 呢？这主要是与<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6380&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 9 讲</a>介绍的 BlockingCache 装饰器相关。在前面介绍 Cache 时我们提到过，CacheBuilder 默认会添加 BlockingCache 这个装饰器，而 BlockingCache 的 getObject() 方法会有给 CacheKey 加锁的逻辑，需要在 putObject() 方法或 removeObject() 方法中解锁，<strong>否则这个 CacheKey 会被一直锁住，无法使用</strong>。</p><p>看完 TransactionalCache 的核心实现之后，我们再来看 TransactionalCache 的管理者------ TransactionalCacheManager，其中定义了一个 transactionalCaches 字段（HashMap&lt;Cache, TransactionalCache&gt;类型）维护当前 CachingExecutor 使用到的二级缓存，该集合的 Key 是二级缓存对象，Value 是装饰二级缓存的 TransactionalCache 对象。</p><p>TransactionalCacheManager 中的方法实现都比较简单，都是基于 transactionalCaches 集合以及 TransactionalCache 的同名方法实现的，这里不再展开介绍，你若感兴趣的话可以参考<a href="https://github.com/xxxlxy2008/mybatis?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">源码</a>进行分析。</p><h4 id="_3-核心实现" tabindex="-1">3. 核心实现 <a class="header-anchor" href="#_3-核心实现" aria-label="Permalink to &quot;3. 核心实现&quot;">​</a></h4><p>了解了二级缓存基本概念以及 TransactionalCache 核心实现之后，我们再来看 CachingExecutor 的核心实现。</p><p>CachingExecutor 作为一个装饰器，其中自然会维护一个 Executor 类型字段指向被装饰的 Executor 对象，同时它还创建了一个 TransactionalCacheManager 对象来管理使用到的二级缓存。</p><p><strong>CachingExecutor 的核心在于 query() 方法</strong>，其核心操作大致可总结为如下。</p><ul><li><p>获取 BoundSql 对象，创建查询语句对应的 CacheKey 对象。</p></li><li><p>尝试获取当前命名空间使用的二级缓存，如果没有指定二级缓存，则表示未开启二级缓存功能。如果未开启二级缓存功能，则直接使用被装饰的 Executor 对象进行数据库查询操作。如果开启了二级缓存功能，则继续后面的步骤。</p></li><li><p>查询二级缓存，这里使用到 TransactionalCacheManager.getObject() 方法，如果二级缓存命中，则直接将该结果对象返回。</p></li><li><p>如果二级缓存未命中，则通过被装饰的 Executor 对象进行查询。正如前面介绍的那样，BaseExecutor 会先查询一级缓存，如果一级缓存未命中时，才会真正查询数据库。最后，会将查询到的结果对象放入 TransactionalCache.entriesToAddOnCommit 集合中暂存，等待事务提交时再写入二级缓存。</p></li></ul><p>下面是 CachingExecutor.query() 方法的核心代码片段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取BoundSql对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    BoundSql boundSql </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ms.</span><span style="color:#B392F0;">getBoundSql</span><span style="color:#E1E4E8;">(parameterObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建相应的CacheKey</span></span>
<span class="line"><span style="color:#E1E4E8;">    CacheKey key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCacheKey</span><span style="color:#E1E4E8;">(ms, parameterObject, rowBounds, boundSql);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用下面的query()方法重载</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span></span>
<span class="line"><span style="color:#E1E4E8;">        throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Cache cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ms.</span><span style="color:#B392F0;">getCache</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取该命名空间使用的二级缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cache </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 是否开启了二级缓存功能</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">flushCacheIfRequired</span><span style="color:#E1E4E8;">(ms); </span><span style="color:#6A737D;">// 根据&lt;select&gt;标签配置决定是否需要清空二级缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 检测useCache配置以及是否使用了resultHandler配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ms.</span><span style="color:#B392F0;">isUseCache</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> resultHandler </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">ensureNoOutParams</span><span style="color:#E1E4E8;">(ms, boundSql); </span><span style="color:#6A737D;">// 是否包含输出参数</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 查询二级缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">E</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) tcm.</span><span style="color:#B392F0;">getObject</span><span style="color:#E1E4E8;">(cache, key);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (list </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 二级缓存未命中，通过被装饰的Executor对象查询结果对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> delegate.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将查询结果放入TransactionalCache.entriesToAddOnCommit集合中暂存</span></span>
<span class="line"><span style="color:#E1E4E8;">                tcm.</span><span style="color:#B392F0;">putObject</span><span style="color:#E1E4E8;">(cache, key, list);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果未开启二级缓存，直接通过被装饰的Executor对象查询结果对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> delegate.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取BoundSql对象</span></span>
<span class="line"><span style="color:#24292E;">    BoundSql boundSql </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ms.</span><span style="color:#6F42C1;">getBoundSql</span><span style="color:#24292E;">(parameterObject);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建相应的CacheKey</span></span>
<span class="line"><span style="color:#24292E;">    CacheKey key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCacheKey</span><span style="color:#24292E;">(ms, parameterObject, rowBounds, boundSql);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用下面的query()方法重载</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span></span>
<span class="line"><span style="color:#24292E;">        throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    Cache cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ms.</span><span style="color:#6F42C1;">getCache</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取该命名空间使用的二级缓存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cache </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 是否开启了二级缓存功能</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">flushCacheIfRequired</span><span style="color:#24292E;">(ms); </span><span style="color:#6A737D;">// 根据&lt;select&gt;标签配置决定是否需要清空二级缓存</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检测useCache配置以及是否使用了resultHandler配置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ms.</span><span style="color:#6F42C1;">isUseCache</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> resultHandler </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">ensureNoOutParams</span><span style="color:#24292E;">(ms, boundSql); </span><span style="color:#6A737D;">// 是否包含输出参数</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 查询二级缓存</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) tcm.</span><span style="color:#6F42C1;">getObject</span><span style="color:#24292E;">(cache, key);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (list </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 二级缓存未命中，通过被装饰的Executor对象查询结果对象</span></span>
<span class="line"><span style="color:#24292E;">                list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> delegate.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将查询结果放入TransactionalCache.entriesToAddOnCommit集合中暂存</span></span>
<span class="line"><span style="color:#24292E;">                tcm.</span><span style="color:#6F42C1;">putObject</span><span style="color:#24292E;">(cache, key, list);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果未开启二级缓存，直接通过被装饰的Executor对象查询结果对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> delegate.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>紧接上一讲的内容，我们详细分析了 Executor 接口的核心实现类。</p><ul><li><p>首先介绍了最常用、也是最简单的 Executor 实现类------ SimpleExecutor 实现，它底层完全依赖 StatementHandler、DefaultResultSetHandler 和 JDBC API 完成数据库查询和结果集映射。</p></li><li><p>接下来讲解了 ReuseExecutor 和 BatchExecutor 实现，其中 ReuseExecutor 实现了 Statement 对象的重用，而 BatchExecutor 实现了批处理的相关逻辑。</p></li><li><p>最后讲解了 CachingExecutor 实现，其中重点介绍了二级缓存的内容以及 CachingExecutor 底层的 TransactionalCache、TransactionalCacheManager 等核心组件。</p></li></ul><p>从下一讲开始，我们就进入本课程的第四个模块，重点将放在 MyBatis 的接口层、插件体系以及衍生框架上面，记得按时来听课。</p><hr><p>[</p>`,23),d=s("p",null,[a("]("),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/Mka"),a(")")],-1),m=s("p",null,[s("strong",null,"《Java 工程师高薪训练营》")],-1),h=s("p",null,[a("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),a("！")],-1);function F(A,g,C,S,b,D){const n=o("Image");return t(),c("div",null,[E,y,l(n,{alt:"图片13.png",src:"https://s0.lgstatic.com/i/image6/M00/26/66/CioPOWBa7q-Aa_fiAAF6eDPI3C0273.png"}),a(),i,l(n,{alt:"图片12.png",src:"https://s0.lgstatic.com/i/image6/M01/26/66/CioPOWBa7oCAaZuSAAF5PEDTpm8320.png"}),a(),u,l(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"}),a(),d,m,h])}const q=e(r,[["render",F]]);export{x as __pageData,q as default};
