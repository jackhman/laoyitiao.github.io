import{_ as p,j as o,o as e,g as t,k as a,Q as l,s,h as r}from"./chunks/framework.b3d8e22e.js";const B=JSON.parse('{"title":"事务性发件箱模式 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1819) 第15讲：什么是事务性消息模式.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1819) 第15讲：什么是事务性消息模式.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1819) 第15讲：什么是事务性消息模式.md"},E=l('<p>第 14 课时介绍了事件驱动设计的基本概念，在使用了消息代理之后，应用中产生的事件以消息的形式进行发布，消息的消费者接收到事件并进行处理。如果消息代理可以在传递消息时提供至少有一次的保证性，那么只要消息被成功发布，就可以确保该消息对应的事件必定会得到处理。</p><p><strong>事务性消息</strong>（Transactional Messaging）的目的是保证数据的一致性。在示例应用中，当收到创建行程的请求之后，行程服务会把行程信息保存在关系型数据库中，同时发布表示行程已创建的事件 TripCreatedEvent。很显然，行程信息的保存和 TripCreatedEvent 事件的发布，这两个动作要么同时发生，要么同时不发生。如果只有一个动作发生，那么必然会产生数据一致性的问题。而这两个动作都可能失败，为了保证原子性，通常需要用到事务。</p><p>对于关系数据库中的事务，我们都不陌生。如果上述的两个动作是对同一个数据库中表的操作，我们使用事务就可以轻松解决。两个动作在同一个事务中，如果这两个动作都成功，事务才会被提交，否则事务会自动回滚。如果两个动作是对两个不同数据库的操作，那么也可以使用 XA 事务的<strong>两阶段提交协议</strong>（Two-Phase Commit Protocol，2PC）。</p><p>在行程服务的实现中，行程信息被保存在 PostgreSQL 数据库中，而事件发布则由 Apache Kafka 来完成。Kafka 并不支持 XA 事务，这使得无法通过 XA 事务来解决问题。为了解决这个问题，就需要用到下面介绍的事务性发件箱模式。</p><h3 id="事务性发件箱模式" tabindex="-1">事务性发件箱模式 <a class="header-anchor" href="#事务性发件箱模式" aria-label="Permalink to &quot;事务性发件箱模式&quot;">​</a></h3><p><strong>事务性发件箱</strong>（Transactional Outbox）模式使用一个数据库表来保存需要发布的事件，这个表称为事件的发件箱。通过使用这种模式，发布事件的动作被转换成一个数据库操作，因此可以使用一个本地数据库事务来保证原子性。对于保存在发件箱表中的事件，需要一个独立的消息中继进程来转发给消息代理。</p><p>下图给出了事务性发件箱模式的示意图。在行程服务对行程表进行操作时，包括插入、更新和删除操作，会同时在发件箱表中插入对应的事件记录，对这两个表的操作在同一个数据库事务中。如果对行程表的操作成功，则发件箱表中必然有对应的事件；如果对行程表的操作失败，则发件箱表中必然没有对应的事件。消息中继负责读取发件箱表中的记录，并发送事件给消息代理。</p>',7),y=l('<p>实现事务性发件箱模式的一个重要问题是如何有效读取发件箱表中的记录，一般的做法是使用下面介绍的变化数据捕获技术。</p><h3 id="变化数据捕获" tabindex="-1">变化数据捕获 <a class="header-anchor" href="#变化数据捕获" aria-label="Permalink to &quot;变化数据捕获&quot;">​</a></h3><p>消息中继需要监控发件箱表，当有记录插入时，就需要发布消息到消息代理，这种监控数据库变化的技术称为<strong>变化数据捕获</strong>（Change Data Capture，CDC）。有很多不同的方法可以捕获到数据库表中的改动，常见的做法如下所示。</p><ul><li><strong>更新时间戳</strong>。表中包含一个字段来记录每一行的更新时间戳。在检查数据变化时，更新时间戳大于上一次捕获的时间戳的行，都是这一次需要处理的内容。</li><li><strong>版本号</strong>。表中包含一个字段来记录数据的版本号。当一行的数据发生变化时，这一行的版本号被更新为当前的版本号，每次捕获变化时，选择版本号与当前版本号相同的行。当捕获完成之后，当前版本号被更新为新的值，为下一次捕获做准备。</li><li><strong>状态指示符</strong>。表中包含一个字段来标记每一行是否发生了变化。</li><li><strong>触发器</strong>。当表中的数据产生变化时，数据库的触发器负责往另外一个历史记录表中插入数据来记录对应的事件。在捕获变化时，只需要查询这个历史记录表即可。</li><li><strong>扫描事务日志</strong>。大部分数据库管理系统使用事务日志来记录对数据库的改动。通过扫描和解析事务日志的内容，可以捕获数据的变化。</li></ul><p>上述方法可以根据是否使用事务日志划分成两类。事务日志的好处是对数据库没有影响，也不要求对应用的表结构和代码进行修改，另外还有更好的性能。事务日志的不足之处在于，事务日志的格式并没有统一的标准，不同的数据库系统有自己的私有实现，而且会随着版本更新而变化。这就要求解析事务日志的代码需不断更新。幸运的是，有不少开源库可供使用。</p><h4 id="事务日志" tabindex="-1">事务日志 <a class="header-anchor" href="#事务日志" aria-label="Permalink to &quot;事务日志&quot;">​</a></h4><p>下面对 MySQL 和 PostgreSQL 中的事务日志进行具体的介绍。<br><strong>MySQL</strong></p><p>MySQL 使用二进制日志（Binary Log，binlog）来记录数据库变化，二进制日志中包含的事件描述数据库中的变化，包括表创建和表中数据的变化。二进制日志有两个重要的作用。</p><p>第一个作用是<strong>复制</strong>（Replication）。主服务器（Master）上的二进制日志包含了数据变化的记录。在进行复制时，二进制日志被发送到从服务器（Slave），从服务器通过执行日志中包含的事件来完成复制。</p><p>第二个作用是<strong>进行数据恢复</strong>。当从备份中恢复数据之后，在二进制日志文件中，该备份创建之后产生的事件会被重新执行，从而把数据恢复到最近的状态。</p><p>MySQL 支持 3 种不同的二进制日志格式，通过参数 binlog-format 来指定，如下表所示。</p>',11),i=l(`<p>语句和行格式各有优势。有些 SQL 语句可能不会产生对行的改动，如找不到匹配行的 UPDATE 或 DELETE 语句。这样的 SQL 语句可以记录在语句格式日志中，但是不会出现在行格式的日志中。语句格式的问题在于，某些情况下语句的执行并没有确定的结果。</p><p>MySQL 中的变化数据捕获技术一般通过二进制日志文件的复制来完成。具体的做法是把要监控的 MySQL 数据库作为复制的主服务器，而捕获变化的客户端作为复制的从服务器，这样就可以自动获取到二进制日志文件，并解析其中的事件。</p><p>下面给出了 MySQL 8 服务器的配置文件，用来配置二进制日志文件。对于日志文件的保留时间，旧版本的 MySQL 使用 expire_logs_days 配置项，该文件应该被添加到 MySQL 服务器的 /etc/mysql/conf.d 目录中。推荐的做法是创建自定义的 Docker 镜像，也可以使用我创建的 quay.io/alexcheng1982/mysql-cdc 镜像。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[mysqld]</span></span>
<span class="line"><span style="color:#F97583;">default-authentication-</span><span style="color:#E1E4E8;">plugin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mysql_native_password</span></span>
<span class="line"><span style="color:#F97583;">server-</span><span style="color:#E1E4E8;">id                     </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">log_bin                       </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mysql</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">bin # 日志文件名称的前缀</span></span>
<span class="line"><span style="color:#E1E4E8;">binlog_expire_logs_seconds    </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">86400</span><span style="color:#E1E4E8;">     # 日志文件保留时间</span></span>
<span class="line"><span style="color:#E1E4E8;">binlog_format                 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">row</span><span style="color:#E1E4E8;">       # 使用行格式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[mysqld]</span></span>
<span class="line"><span style="color:#D73A49;">default-authentication-</span><span style="color:#24292E;">plugin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mysql_native_password</span></span>
<span class="line"><span style="color:#D73A49;">server-</span><span style="color:#24292E;">id                     </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">log_bin                       </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mysql</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">bin # 日志文件名称的前缀</span></span>
<span class="line"><span style="color:#24292E;">binlog_expire_logs_seconds    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">86400</span><span style="color:#24292E;">     # 日志文件保留时间</span></span>
<span class="line"><span style="color:#24292E;">binlog_format                 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">row</span><span style="color:#24292E;">       # 使用行格式</span></span></code></pre></div><p>在 Java 中，读取 MySQL 二进制日志文件最常用的是 <a href="https://github.com/shyiko/mysql-binlog-connector-java" target="_blank" rel="noreferrer">mysql-binlog-connector-java</a> 库，该库实现了 MySQL 的二进制日志文件的复制协议，可以直接连接 MySQL 服务器并解析事件。需要注意的是，连接 MySQL 服务器的用户需要具有 REPLICATION SLAVE 和 REPLICATION CLIENT 权限。从测试的角度，可以直接使用 root 用户；在实际的生产环境，应该使用专有的 MySQL 用户并配置好权限。</p><p>下面的代码是 mysql-binlog-connector-java 库的使用示例。表示事件的 Event 对象有 EventHeader 和 EventData 两个属性：EventHeader 中包含的是事件的元数据；EventData 接口的不同实现类表示不同类型的事件数据。EventType 表示事件的类型，最常见的 3 种事件类型是 EXT_WRITE_ROWS、EXT_UPDATE_ROWS 和 EXT_DELETE_ROWS，分别对应于插入行、更新行和删除行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">BinaryLogClient client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BinaryLogClient</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3306</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;myrootpassword&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">EventDeserializer eventDeserializer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventDeserializer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">eventDeserializer.</span><span style="color:#B392F0;">setCompatibilityMode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    EventDeserializer.CompatibilityMode.DATE_AND_TIME_AS_LONG,</span></span>
<span class="line"><span style="color:#E1E4E8;">    EventDeserializer.CompatibilityMode.CHAR_AND_BINARY_AS_BYTE_ARRAY</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">client.</span><span style="color:#B392F0;">setEventDeserializer</span><span style="color:#E1E4E8;">(eventDeserializer);</span></span>
<span class="line"><span style="color:#E1E4E8;">client.</span><span style="color:#B392F0;">registerEventListener</span><span style="color:#E1E4E8;">(event </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  EventType type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getEventType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> EXT_WRITE_ROWS</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      WriteRowsEventData writeData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      String writeResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Insert: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> writeData.</span><span style="color:#B392F0;">getRows</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Arrays</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">toString).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">joining</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(writeResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> EXT_UPDATE_ROWS</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      UpdateRowsEventData updateData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      String updateResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Update: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> updateData.</span><span style="color:#B392F0;">getRows</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(entry </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;before: %s, after: %s&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">              Arrays.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">())))</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">joining</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(updateResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> EXT_DELETE_ROWS</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      DeleteRowsEventData deleteData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      String deleteResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Delete: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> deleteData.</span><span style="color:#B392F0;">getRows</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Arrays</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">toString).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">joining</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(deleteResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">client.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BinaryLogClient client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BinaryLogClient</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3306</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;myrootpassword&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">EventDeserializer eventDeserializer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventDeserializer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">eventDeserializer.</span><span style="color:#6F42C1;">setCompatibilityMode</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    EventDeserializer.CompatibilityMode.DATE_AND_TIME_AS_LONG,</span></span>
<span class="line"><span style="color:#24292E;">    EventDeserializer.CompatibilityMode.CHAR_AND_BINARY_AS_BYTE_ARRAY</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">client.</span><span style="color:#6F42C1;">setEventDeserializer</span><span style="color:#24292E;">(eventDeserializer);</span></span>
<span class="line"><span style="color:#24292E;">client.</span><span style="color:#6F42C1;">registerEventListener</span><span style="color:#24292E;">(event </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  EventType type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getEventType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> EXT_WRITE_ROWS</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      WriteRowsEventData writeData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      String writeResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Insert: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> writeData.</span><span style="color:#6F42C1;">getRows</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Arrays</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toString).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">joining</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(writeResult);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> EXT_UPDATE_ROWS</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      UpdateRowsEventData updateData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      String updateResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Update: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> updateData.</span><span style="color:#6F42C1;">getRows</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(entry </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before: %s, after: %s&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">              Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">())))</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">joining</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(updateResult);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> EXT_DELETE_ROWS</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      DeleteRowsEventData deleteData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      String deleteResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Delete: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> deleteData.</span><span style="color:#6F42C1;">getRows</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Arrays</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toString).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">joining</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(deleteResult);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">client.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">();</span></span></code></pre></div><p>下面的代码用来启动运行时需要的 MySQL 8 容器：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker run </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rm </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p </span><span style="color:#79B8FF;">3306</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3306</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e MYSQL_ROOT_PASSWORD</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">myrootpassword quay.io</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">alexcheng1982</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cdc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker run </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rm </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p </span><span style="color:#005CC5;">3306</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3306</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e MYSQL_ROOT_PASSWORD</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">myrootpassword quay.io</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">alexcheng1982</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cdc</span></span></code></pre></div><p><strong>PostgreSQL</strong></p><p>PostgreSQL 使用写提前日志（Write-Ahead Logging，WAL）来保证数据的完整性。WAL 的核心思想是对数据文件的写入，必须发生在相应的改动被记录在日志之后。当数据库崩溃之后，可以从日志中进行恢复，只需要重新应用日志中记录的改动即可。</p><p>PostgreSQL 的<strong>逻辑解码</strong>（Logical Decoding）对 WAL 中的内容进行解码，转换成特定的格式。在进行逻辑复制时，一个复制位置（Replication Slot）代表一个变化的流，可以在一个客户端中进行重放。输出插件用来把 WAL 中的内容转换成复制位置的消费者所期望的格式，逻辑解码最早在 PostgreSQL 9.4 版本中引入。下表给出了常用的输出插件，其中 pgoutput 是 PostgreSQL 10 及以上版本自带的输出插件，除了它之外的其他插件都需要手动安装并启用。</p><table><thead><tr><th>输出插件</th><th>格式</th></tr></thead><tbody><tr><td>pgoutput</td><td>PostgreSQL 逻辑复制协议</td></tr><tr><td><a href="https://github.com/eulerto/wal2json" target="_blank" rel="noreferrer">wal2json</a></td><td>JSON</td></tr><tr><td><a href="https://github.com/debezium/postgres-decoderbufs" target="_blank" rel="noreferrer">decoderbufs</a></td><td>Protocol Buffers</td></tr></tbody></table><p>如果使用 pgoutput 之外的输出插件，在安装对应的插件之后，需要在 postgresql.conf 文件中配置 PostgreSQL 加载对应的插件，如下面的代码所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">shared_preload_libraries </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;decoderbufs,wal2json&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">shared_preload_libraries </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;decoderbufs,wal2json&#39;</span></span></code></pre></div><p>接着需要配置 PostgreSQL 复制时的逻辑解码。下面的代码给出了 postgresql.conf 文件中的相关配置。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">max_wal_senders       </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">        # walsender进程的最大数量</span></span>
<span class="line"><span style="color:#E1E4E8;">wal_level             </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> logical  # WAL文件的级别</span></span>
<span class="line"><span style="color:#E1E4E8;">max_replication_slots </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">        # 复制位置的最大数量</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">max_wal_senders       </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">        # walsender进程的最大数量</span></span>
<span class="line"><span style="color:#24292E;">wal_level             </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> logical  # WAL文件的级别</span></span>
<span class="line"><span style="color:#24292E;">max_replication_slots </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">        # 复制位置的最大数量</span></span></code></pre></div><p>推荐使用已有的 debezium/postgres 镜像，该镜像已经安装了 wal2json 和 decoderbufs 两个输出插件。</p><p>PostgreSQL 中的变化数据捕获技术一般使用 PostgreSQL 的流复制协议来读取输出插件产生的内容。在 Java 中，PostgreSQL 的 JDBC 驱动可以直接读取相应的事件。下面的代码展示了如何使用 PostgreSQL 的 JDBC 驱动来读取数据变化事件，在连接到 PostgreSQL 数据库之后，首先创建一个名为 demo_logical_slot 的复制位置，并指定输出插件为 wal2json，接着创建一个读取该复制位置的流，最后读取流中的内容并输出。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jdbc:postgresql://localhost:5432/postgres&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Properties props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">PGProperty.USER.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(props, </span><span style="color:#9ECBFF;">&quot;postgres&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">PGProperty.PASSWORD.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(props, </span><span style="color:#9ECBFF;">&quot;postgres&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">PGProperty.ASSUME_MIN_SERVER_VERSION.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(props, </span><span style="color:#9ECBFF;">&quot;9.4&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">PGProperty.REPLICATION.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(props, </span><span style="color:#9ECBFF;">&quot;database&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">PGProperty.PREFER_QUERY_MODE.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(props, </span><span style="color:#9ECBFF;">&quot;simple&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Connection con </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DriverManager.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(url, props);</span></span>
<span class="line"><span style="color:#E1E4E8;">PGConnection replConnection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> con.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">(PGConnection.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">String slogName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;demo_logical_slot&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">replConnection.</span><span style="color:#B392F0;">getReplicationAPI</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">createReplicationSlot</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">logical</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">withSlotName</span><span style="color:#E1E4E8;">(slogName)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">withOutputPlugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;wal2json&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">PGReplicationStream stream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> replConnection.</span><span style="color:#B392F0;">getReplicationAPI</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">replicationStream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">logical</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">withSlotName</span><span style="color:#E1E4E8;">(slogName)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">withStatusInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ByteBuffer msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stream.</span><span style="color:#B392F0;">readPending</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (msg </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    TimeUnit.MILLISECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> offset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> msg.</span><span style="color:#B392F0;">arrayOffset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> msg.</span><span style="color:#B392F0;">array</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> offset;</span></span>
<span class="line"><span style="color:#E1E4E8;">  System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(source, offset, length));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jdbc:postgresql://localhost:5432/postgres&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Properties props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">PGProperty.USER.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(props, </span><span style="color:#032F62;">&quot;postgres&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">PGProperty.PASSWORD.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(props, </span><span style="color:#032F62;">&quot;postgres&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">PGProperty.ASSUME_MIN_SERVER_VERSION.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(props, </span><span style="color:#032F62;">&quot;9.4&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">PGProperty.REPLICATION.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(props, </span><span style="color:#032F62;">&quot;database&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">PGProperty.PREFER_QUERY_MODE.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(props, </span><span style="color:#032F62;">&quot;simple&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Connection con </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DriverManager.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(url, props);</span></span>
<span class="line"><span style="color:#24292E;">PGConnection replConnection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> con.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">(PGConnection.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">String slogName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;demo_logical_slot&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">replConnection.</span><span style="color:#6F42C1;">getReplicationAPI</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">createReplicationSlot</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">logical</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">withSlotName</span><span style="color:#24292E;">(slogName)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">withOutputPlugin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wal2json&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">PGReplicationStream stream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> replConnection.</span><span style="color:#6F42C1;">getReplicationAPI</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">replicationStream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">logical</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">withSlotName</span><span style="color:#24292E;">(slogName)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">withStatusInterval</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  ByteBuffer msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stream.</span><span style="color:#6F42C1;">readPending</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (msg </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    TimeUnit.MILLISECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> msg.</span><span style="color:#6F42C1;">arrayOffset</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> msg.</span><span style="color:#6F42C1;">array</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> offset;</span></span>
<span class="line"><span style="color:#24292E;">  System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(source, offset, length));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面的 JSON 数据对应的是往 demo 表中插入一行之后的输出，该 JSON 数据由 wal2json 插件生成。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;change&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;kind&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;insert&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;schema&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;public&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;table&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;demo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;columnnames&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;columntypes&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;integer&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;character varying&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;columnvalues&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;a&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;change&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;kind&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;insert&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;schema&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;public&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;table&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;demo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;columnnames&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;columntypes&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;integer&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;character varying&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;columnvalues&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;a&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面的代码用来启动运行时需要的 PostgreSQL 容器：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker run </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rm </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p </span><span style="color:#79B8FF;">5432</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">5432</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e POSTGRES_PASSWORD</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">postgres debezium</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">postgres</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alpine</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker run </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rm </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p </span><span style="color:#005CC5;">5432</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">5432</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e POSTGRES_PASSWORD</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">postgres debezium</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">postgres</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alpine</span></span></code></pre></div><h4 id="数据库轮询" tabindex="-1">数据库轮询 <a class="header-anchor" href="#数据库轮询" aria-label="Permalink to &quot;数据库轮询&quot;">​</a></h4><p>如果不能通过读取事务日志的方式来捕获数据变化，可以采用数据库轮询的形式，数据库轮询的做法是定期查询数据库中的表数据，来找出变化的行。这里需要在表中添加额外的字段，如更新时间戳、版本号或状态指示符等。</p><p>比如，可以在发件箱表中添加一个字段 published 来标明每一行对应的事件是否被发布。在每次查询时，总是选择 published 字段的值为 0 的行，并尝试发送事件到消息代理。当发送成功后，把对应行的 published 字段的值更新为 1。</p><h3 id="cdc-库" tabindex="-1">CDC 库 <a class="header-anchor" href="#cdc-库" aria-label="Permalink to &quot;CDC 库&quot;">​</a></h3><p>直接读取事务日志的做法在很多时候都过于复杂，有一些开源 CDC 库可供使用，如下表所示。</p><table><thead><tr><th>名称</th><th>支持数据库</th><th>开发者</th></tr></thead><tbody><tr><td><a href="https://debezium.io/" target="_blank" rel="noreferrer">Debezium</a></td><td>MySQL、PostgreSQL、Oracle、SQL Server、DB2、MongoDB、Cassandra</td><td>RedHat</td></tr><tr><td><a href="https://github.com/airbnb/SpinalTap" target="_blank" rel="noreferrer">SpinalTap</a></td><td>MySQL</td><td>Airbnb</td></tr><tr><td><a href="http://maxwells-daemon.io/" target="_blank" rel="noreferrer">maxwell</a></td><td>MySQL</td><td>Zendesk</td></tr><tr><td><a href="https://github.com/Yelp/mysql_streamer" target="_blank" rel="noreferrer">mysql_streamer</a></td><td>MySQL</td><td>Yelp</td></tr><tr><td><a href="https://netflixtechblog.com/dblog-a-generic-change-data-capture-framework-69351fb9099b" target="_blank" rel="noreferrer">DBLog</a></td><td>MySQL、PostgreSQL</td><td>Netflix</td></tr><tr><td><a href="https://github.com/eventuate-foundation/eventuate-cdc" target="_blank" rel="noreferrer">Eventuate CDC</a></td><td>MySQL、PostgreSQL</td><td>Eventuate</td></tr></tbody></table><p>下面对 Debezium 和 Eventuate CDC 进行具体介绍。</p><h4 id="debezium" tabindex="-1">Debezium <a class="header-anchor" href="#debezium" aria-label="Permalink to &quot;Debezium&quot;">​</a></h4><p>Debezium 是流行的开源 CDC 库，构建在 Apache Kafka 之上，提供了 Kafka Connect 兼容的连接器，可以把数据库中的变化事件发布成 Kafka 中的消息。Debezium 提供了对应不同类型的数据库连接器，只需要把连接器部署到 Kafka Connect 即可，下图是 Debezium 的架构图。</p>`,33),F=s("p",null,"如果你的应用也使用 Kafka，那么 Debezium 是一个不错的选择。通过 Kafka Streams API 可以把 Debezium 发布的消息进行转换，并发布到其他主题中，还可以使用连接器输出到其他第三方消费者。Debezium 也支持嵌入在 Java 应用中运行。",-1),u=s("h4",{id:"eventuate-cdc",tabindex:"-1"},[r("Eventuate CDC "),s("a",{class:"header-anchor",href:"#eventuate-cdc","aria-label":'Permalink to "Eventuate CDC"'},"​")],-1),d=s("p",null,"Eventuate CDC 是 Eventuate 平台的一部分，也是 Eventuate 提供的事务性消息框架的基础。Eventuate CDC 对 MySQL 和 PostgreSQL 使用事务日志，对其他数据库使用轮询。在发送消息时，Eventuate CDC 支持 Apache Kafka、Apache ActiveMQ、RabbitMQ 和 Redis 作为消息代理。",-1),g=s("p",null,"下图是 Eventuate CDC 的架构示意图。",-1),C=s("p",null,"Eventuate CDC 中重要组件的介绍如下表所示。",-1),h=l('<p>示例应用使用的是 Eventuate CDC。</p><h3 id="实现事务性发件箱模式" tabindex="-1">实现事务性发件箱模式 <a class="header-anchor" href="#实现事务性发件箱模式" aria-label="Permalink to &quot;实现事务性发件箱模式&quot;">​</a></h3><p>在了解了变化数据捕获技术相关的内容之后，我们可以实现自己的事务性发件箱模式，不过更好的做法是使用已有的开源库。</p><p>在连接器读取到发件箱表中的数据变化之后，Debezium 可以对发布到 Kafka 中的消息进行转换，再发布到应用相关的主题中。不过 Debezium 的这个功能目前还处于开发阶段，不太适用于生产环境。</p><p>本专栏的示例应用使用的 Eventuate 提供的事务消息库。Eventuate 的事务性消息的具体内容将在下一课时中介绍。</p><p>需要注意的是，事务性发件箱模式会导致一个事件被发布至少一次。如果消息中继进程在发送事件之后崩溃，而没有机会记录下 CDC 相关的状态，当消息中继进程恢复之后，会重新处理发件箱表中的一些记录，这会导致对应的事件被重新发布。这并不是一个问题，因为 Kafka 也是提供至少有一次的消息传递的保证性，所以事件的重复是无法避免的。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>事务性消息对数据一致性有着至关重要的作用，它保证了对关系型数据库的修改和对应的事件的发布这两个动作的原子性。本课时介绍了事务性发件箱模式，以及实现该模式需要的变化数据捕获技术；同时还介绍了事务日志和数据库轮询这两种 CDC 实现技术，以及常用的 CDC 库 Debezium 和 Eventuate CDC。</p>',8);function D(_,m,A,q,S,b){const n=o("Image");return e(),t("div",null,[E,a(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/03/21/CgqCHl6yZbiAQ44kAAGCY_4jeMI727.png"}),y,a(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/03/21/Ciqc1F6yZeuAXz4mAABswNrN0sQ148.png"}),i,a(n,{alt:"debezium.png",src:"https://s0.lgstatic.com/i/image/M00/03/1F/Ciqc1F6yZO-Ab3NZAACsIAkAJps643.png"}),F,u,d,g,a(n,{alt:"eventuate-cdc.png",src:"https://s0.lgstatic.com/i/image/M00/03/1F/Ciqc1F6yZPeADGIAAACAKcRRv2A852.png"}),C,a(n,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image/M00/03/29/Ciqc1F6yanWAUKWoAACfb2dfXiU483.png"}),h])}const P=p(c,[["render",D]]);export{B as __pageData,P as default};
