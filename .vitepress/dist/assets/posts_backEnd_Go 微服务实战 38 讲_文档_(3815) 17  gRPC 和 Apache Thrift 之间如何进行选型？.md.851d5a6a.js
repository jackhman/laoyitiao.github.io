import{_ as o,j as e,o as r,g as t,k as p,h as s,Q as l,s as n}from"./chunks/framework.cfb14fe0.js";const T=JSON.parse('{"title":"17gRPC和ApacheThrift之间如何进行选型？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3815) 17  gRPC 和 Apache Thrift 之间如何进行选型？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3815) 17  gRPC 和 Apache Thrift 之间如何进行选型？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3815) 17  gRPC 和 Apache Thrift 之间如何进行选型？.md"},E=l('<h1 id="_17grpc和apachethrift之间如何进行选型" tabindex="-1">17gRPC和ApacheThrift之间如何进行选型？ <a class="header-anchor" href="#_17grpc和apachethrift之间如何进行选型" aria-label="Permalink to &quot;17gRPC和ApacheThrift之间如何进行选型？&quot;">​</a></h1><p>在上一课时中，我们已经对 Go 语言原生 RPC 的使用和具体实现原理进行了详细讲解，并指出其缺少超时熔断、链接管理和服务注册发现等功能，达不到生产环境&quot;开箱即用&quot;的水准，不过官方已经不再为其扩充新功能了，而是推荐使用 gRPC。</p><p>其实，除了 gRPC 外，Facebook 开源的 Thrift 框架也是业界较为流行的 RPC 方案，比如 HBase 就是使用它来提供 API 支持的。</p><p>本课时我们将会首先简要介绍下 gRPC 的特性和使用案例，然后再介绍 Thrift，最后再对比这二者之间的异同点，给出你选择的依据。</p><h3 id="grpc-简介和使用" tabindex="-1">gRPC 简介和使用 <a class="header-anchor" href="#grpc-简介和使用" aria-label="Permalink to &quot;gRPC 简介和使用&quot;">​</a></h3><p>gRPC 是由 Google 开源的高性能 RPC 框架。自 2015 年发布以来，gRPC 日益成熟，并成为跨语言 RPC 通信中最流行也最受欢迎的选择之一。gRPC 拥有很多特性，其中最引人注目的有以下几个方面：</p><ul><li><p><strong>内置流式 RPC 支持</strong>。这意味着你可以使用同一 RPC 框架来处理普通的 RPC 调用和分块进行的数据传输调用，这在很大程度上统一了网络相关的基础代码并简化了逻辑。</p></li><li><p><strong>内置拦截器的支持</strong>。gRPC 提供了一种向多个服务端点添加通用功能的强大方法，这使得你可以轻松使用拦截器对所有接口进行共享的运行状况检查和身份验证。</p></li><li><p><strong>内置流量控制和 TLS 支持</strong>。gRPC 是基于 HTTP/2 协议构建的，具有很多强大的特性，其中很多特性以前是必须在 Netty 上自行实现的。这使得客户端的实现更简单，并且可以轻松实现更多语言的绑定。</p></li><li><p><strong>基于 ProtoBuf 进行数据序列化</strong>。ProtoBuf 是由 Google 开源的数据序列化协议，用于将数据进行序列化，在数据存储和通信协议等方面有较大规模的应用和成熟案例。gRPC 直接使用成熟的 ProtoBuf 来定义服务、接口和数据类型，其序列化性能、稳定性和兼容性得到保障。</p></li><li><p><strong>底层基于 HTTP/2 标准设计</strong>。gRPC 正是基于 HTTP/2 才得以实现更多强大功能，如双向流、多复用请求和头部压缩等，从而可以节省带宽、降低 TCP 连接次数和提高 CPU 利用率等。同时，基于 HTTP/2 标准的 gRPC 还提高了云端服务和 Web 应用的性能，使得 gRPC 既能够在客户端应用，也能够在服务器端应用，从而实现客户端和服务器端的通信以及简化通信系统的构建。</p></li><li><p><strong>优秀的社区支持</strong>。作为一个开源项目，gRPC 拥有良好的社区支持和维护，发展迅速，并且 gRPC 的文档也很丰富，这些对用户都很有帮助。</p></li><li><p><strong>提供多种语言支持</strong>。gRPC 支持多种语言，如 C、C++、Go 、Python、Ruby、Java 、PHP 、C# 和 Node.js 等，并且能够基于 ProtoBuf 定义自动生成相应的客户端和服务端代码。目前已提供了 Java 语言版本的 gRPC-Java 和 Go 语言版本的 gRPC-Go。</p></li></ul>',7),y=l(`<p>gRPC 调用示意图</p><p>结合上面的 gRPC 调用示意图，我们可以看到，一个 C++ 语言的服务器可以通过 gRPC 分别与 Ruby 语言开发的桌面客户端和 Java 语言开发的 Android 客户端进行交互。</p><p>下面，我们来讲解一下 gRPC 的使用过程。gRPC 过程调用时，服务端和客户端需要依赖共同的 proto 文件。proto 文件可以定义远程调用的接口、方法名、参数和返回值等。通过 proto 文件可以自动生成相应的客户端和服务端 RPC 代码。借助这些代码，客户端可以十分方便地发送 RPC 请求，并且服务端也可以很简单地建立 RPC 服务器、处理 RPC 请求并且将返回值作为响应发送给客户端。</p><p>gRPC 使用一般分为三大步骤：①定义和编译 proto 文件；②客户端发送 RPC 请求；③服务端建立 RPC 服务。</p><h4 id="_1-定义和编译-proto-文件" tabindex="-1">1. 定义和编译 proto 文件 <a class="header-anchor" href="#_1-定义和编译-proto-文件" aria-label="Permalink to &quot;1. 定义和编译 proto 文件&quot;">​</a></h4><p>首先，我们要定义一个 proto 文件，其具体语法可查看 <a href="https://www.google.com/search?q=https%3A%2F%2F+developers.google.com%2Fprotocol-buffers%2Fdocs%2Fproto3&amp;rlz=1C1GCEU_zh-CNHK904HK904&amp;oq=https%3A%2F%2F+developers.google.com%2Fprotocol-buffers%2Fdocs%2Fproto3&amp;aqs=chrome.0.69i59j69i58.447j0j4&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="noreferrer">Protobuf3 语言指南</a>。在该文件中，我们定义了两个参数结果，分别是 LoginRequest 和 LoginResponse，同时还有一个服务结构 UserService，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> pb;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">service UserService{</span></span>
<span class="line"><span style="color:#E1E4E8;">rpc </span><span style="color:#B392F0;">CheckPassword</span><span style="color:#E1E4E8;">(LoginRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (LoginResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">message LoginRequest {</span></span>
<span class="line"><span style="color:#E1E4E8;">string Username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">string Password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">message LoginResponse {</span></span>
<span class="line"><span style="color:#E1E4E8;">string Ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">string err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">syntax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> pb;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">service UserService{</span></span>
<span class="line"><span style="color:#24292E;">rpc </span><span style="color:#6F42C1;">CheckPassword</span><span style="color:#24292E;">(LoginRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (LoginResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">message LoginRequest {</span></span>
<span class="line"><span style="color:#24292E;">string Username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">string Password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">message LoginResponse {</span></span>
<span class="line"><span style="color:#24292E;">string Ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">string err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>UserService 有一个 CheckPassword 方法，并定义了该方法对应的输入参数和返回值，这些值也都定义在 proto 文件中。</p><p>接下来我们使用 protoc 编译工具编译这个 proto 文件，生成服务端和客户端的代码，如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">protoc </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">go_out</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">plugins</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">grpc</span><span style="color:#E1E4E8;">:. pb</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user.proto</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">protoc </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">go_out</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">grpc</span><span style="color:#24292E;">:. pb</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user.proto</span></span></code></pre></div><p>使用 protoc 生成 Go 语言版本的客户端和服务端代码后，开发人员就可以在业务代码中直接调用这些 API，并在服务器端实现相应的接口。然后，运行 gRPC 服务端代码并将实现的服务进行注册，来处理客户端的调用。gRPC 框架会接收网络传入请求，解析请求数据，执行相应服务方法并将方法结果编码成响应通过网络传递给客户端。</p><p>客户端的本地定义方法，其方法名、参数和返回值与服务端定义的方法相同。客户端可以直接调用这些方法，将调用的参数设置到对应的参数消息类型中，gRPC 生成的客户端代码会将请求转换为网络消息发送到服务端，然后服务端解析请求并处理。</p><h4 id="_2-客户端发送-rpc-请求" tabindex="-1">2. 客户端发送 RPC 请求 <a class="header-anchor" href="#_2-客户端发送-rpc-请求" aria-label="Permalink to &quot;2. 客户端发送 RPC 请求&quot;">​</a></h4><p>它首先调用 grpc.Dial 建立网络连接，然后使用 protoc 编译生成的 pb.NewUserServiceClient 函数创建 gRPC 客户端，最后再调用客户端的 CheckPassword 函数进行 RPC 调用，代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">serviceAddress </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;127.0.0.1:1234&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">conn, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#B392F0;">Dial</span><span style="color:#E1E4E8;">(serviceAddress, grpc.</span><span style="color:#B392F0;">WithInsecure</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#B392F0;">panic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;connect error&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">defer conn.</span><span style="color:#B392F0;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">userClient </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> pb.</span><span style="color:#B392F0;">NewUserServiceClient</span><span style="color:#E1E4E8;">(conn)</span></span>
<span class="line"><span style="color:#E1E4E8;">userReq </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">pb.LoginRequest{Username</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, Password</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">reply, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> userClient.</span><span style="color:#B392F0;">CheckPassword</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">Background</span><span style="color:#E1E4E8;">(), userReq)</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#B392F0;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;UserService CheckPassword : %s&quot;</span><span style="color:#E1E4E8;">, reply.Ret)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">serviceAddress </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127.0.0.1:1234&quot;</span></span>
<span class="line"><span style="color:#24292E;">conn, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> grpc.</span><span style="color:#6F42C1;">Dial</span><span style="color:#24292E;">(serviceAddress, grpc.</span><span style="color:#6F42C1;">WithInsecure</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#6F42C1;">panic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;connect error&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">defer conn.</span><span style="color:#6F42C1;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">userClient </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> pb.</span><span style="color:#6F42C1;">NewUserServiceClient</span><span style="color:#24292E;">(conn)</span></span>
<span class="line"><span style="color:#24292E;">userReq </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">pb.LoginRequest{Username</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, Password</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">reply, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> userClient.</span><span style="color:#6F42C1;">CheckPassword</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">Background</span><span style="color:#24292E;">(), userReq)</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#6F42C1;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UserService CheckPassword : %s&quot;</span><span style="color:#24292E;">, reply.Ret)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-服务端建立-rpc-服务" tabindex="-1">3. 服务端建立 RPC 服务 <a class="header-anchor" href="#_3-服务端建立-rpc-服务" aria-label="Permalink to &quot;3. 服务端建立 RPC 服务&quot;">​</a></h4><p>它首先需要调用 grpc.NewServer() 来建立 RPC 的服务端，然后将 UserService 注册到 RPC 服务端上，UserService 中实现了 CheckPassword 方法，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">flag.</span><span style="color:#B392F0;">Parse</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">lis, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#B392F0;">Listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;127.0.0.1:1234&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to listen: %v&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">grpcServer </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#B392F0;">NewServer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">userService </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;">(user_service.UserService)</span></span>
<span class="line"><span style="color:#E1E4E8;">pb.</span><span style="color:#B392F0;">RegisterUserServiceServer</span><span style="color:#E1E4E8;">(grpcServer, userService)</span></span>
<span class="line"><span style="color:#E1E4E8;">grpcServer.</span><span style="color:#B392F0;">Serve</span><span style="color:#E1E4E8;">(lis)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">flag.</span><span style="color:#6F42C1;">Parse</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">lis, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#6F42C1;">Listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;127.0.0.1:1234&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to listen: %v&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">grpcServer </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> grpc.</span><span style="color:#6F42C1;">NewServer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">userService </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">(user_service.UserService)</span></span>
<span class="line"><span style="color:#24292E;">pb.</span><span style="color:#6F42C1;">RegisterUserServiceServer</span><span style="color:#24292E;">(grpcServer, userService)</span></span>
<span class="line"><span style="color:#24292E;">grpcServer.</span><span style="color:#6F42C1;">Serve</span><span style="color:#24292E;">(lis)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后我们再来看下 UserService 的具体代码实现：①定义 UserService 结构体，②实现 CheckPassword 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type UserService struct{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> UserService) </span><span style="color:#B392F0;">CheckPassword</span><span style="color:#E1E4E8;">(ctx context.Context, req pb.LoginRequest) (pb.LoginResponse, error) {</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> req.Username </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;admin&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> req.Password </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;admin&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">response </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> pb.LoginResponse{Ret</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">response, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">response </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> pb.LoginResponse{Ret</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;fail&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">response, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type UserService struct{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> UserService) </span><span style="color:#6F42C1;">CheckPassword</span><span style="color:#24292E;">(ctx context.Context, req pb.LoginRequest) (pb.LoginResponse, error) {</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> req.Username </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> req.Password </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">response </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> pb.LoginResponse{Ret</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">response, nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">response </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> pb.LoginResponse{Ret</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;fail&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">response, nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上代码所示，UserService 的 CheckPassword 实现起来都很简单，CheckPassword 方法就是判断用户名和密码是否都是 admin，如果是则检查成功，否则即为失败。</p><h3 id="thrift-简介" tabindex="-1">Thrift 简介 <a class="header-anchor" href="#thrift-简介" aria-label="Permalink to &quot;Thrift 简介&quot;">​</a></h3><p>Thrift 是由 Facebook 开源的跨平台、支持多语言的成熟 RPC 框架，它通过定义中间语言（IDL） 自动生成 RPC 客户端与服务端通信代码，从而可以在 C++、Java、Python、PHP 和 Go 等多种编程语言间构建无缝结合的、高效的 RPC 通信服务。Thrift 通过中间语言来定义 RPC 的接口和数据类型，然后通过编译器生成不同语言的代码并由生成的代码负责 RPC 协议层和传输层的实现。</p><p>下面我们同样来看一下 Thrift 的具体使用方法。</p><h4 id="_1-定义和编译-thrift-文件" tabindex="-1">1. 定义和编译 Thrift 文件 <a class="header-anchor" href="#_1-定义和编译-thrift-文件" aria-label="Permalink to &quot;1. 定义和编译 Thrift 文件&quot;">​</a></h4><p>不同于 gRPC 使用 Protobuf 的方法，Thrift 使用自己的中间语言 thrift 来定义接口，不过二者极为类似，比如下面的代码，也是定义了一个拥有检查用户名密码接口的 user 服务。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">namespace go user</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">struct LoginRequest {</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string username;</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string password;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">struct LoginResponse {</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> string msg;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">service User {</span></span>
<span class="line"><span style="color:#E1E4E8;">LoginResponse </span><span style="color:#B392F0;">checkPassword</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> LoginRequest req);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">namespace go user</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">struct LoginRequest {</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string username;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string password;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">struct LoginResponse {</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> string msg;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">service User {</span></span>
<span class="line"><span style="color:#24292E;">LoginResponse </span><span style="color:#6F42C1;">checkPassword</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> LoginRequest req);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们使用 thrift 工具将上述定义编译，生成对应的 Go 代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">thrift </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">gen go user.thrift</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">thrift </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">gen go user.thrift</span></span></code></pre></div><h4 id="_2-客户端发送-rpc-请求-1" tabindex="-1">2. 客户端发送 RPC 请求 <a class="header-anchor" href="#_2-客户端发送-rpc-请求-1" aria-label="Permalink to &quot;2. 客户端发送 RPC 请求&quot;">​</a></h4><p>接下来，我们使用 Thrift 相关的代码库来实现客户端，如下面的示例代码所示，和上面 gRPC 的代码对比起来，你可以明显发现 Thrift 需要配置的功能项更多、更复杂。至于 transport、protocol 等配置，我们后面讲解服务端代码实现后再具体介绍。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">tSocket, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> thrift.</span><span style="color:#B392F0;">NewTSocket</span><span style="color:#E1E4E8;">(net.</span><span style="color:#B392F0;">JoinHostPort</span><span style="color:#E1E4E8;">(HOST, PORT))</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">Fatalln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tSocket error:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">transportFactory </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> thrift.</span><span style="color:#B392F0;">NewTFramedTransportFactory</span><span style="color:#E1E4E8;">(thrift.</span><span style="color:#B392F0;">NewTTransportFactory</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">transport </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> transportFactory.</span><span style="color:#B392F0;">GetTransport</span><span style="color:#E1E4E8;">(tSocket)</span></span>
<span class="line"><span style="color:#E1E4E8;">protocolFactory </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> thrift.</span><span style="color:#B392F0;">NewTBinaryProtocolFactoryDefault</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">client </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">NewUserClientFactory</span><span style="color:#E1E4E8;">(transport, protocolFactory)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> transport.</span><span style="color:#B392F0;">Open</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">Fatalln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error opening:&quot;</span><span style="color:#E1E4E8;">, HOST </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> PORT)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">defer transport.</span><span style="color:#B392F0;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">req </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> user.LoginRequest{Username</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;admin&quot;</span><span style="color:#E1E4E8;">, Password</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;admin&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">res, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">CheckPassword</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">req)</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(res.Msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">tSocket, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> thrift.</span><span style="color:#6F42C1;">NewTSocket</span><span style="color:#24292E;">(net.</span><span style="color:#6F42C1;">JoinHostPort</span><span style="color:#24292E;">(HOST, PORT))</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">Fatalln</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tSocket error:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">transportFactory </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> thrift.</span><span style="color:#6F42C1;">NewTFramedTransportFactory</span><span style="color:#24292E;">(thrift.</span><span style="color:#6F42C1;">NewTTransportFactory</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">transport </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> transportFactory.</span><span style="color:#6F42C1;">GetTransport</span><span style="color:#24292E;">(tSocket)</span></span>
<span class="line"><span style="color:#24292E;">protocolFactory </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> thrift.</span><span style="color:#6F42C1;">NewTBinaryProtocolFactoryDefault</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">client </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">NewUserClientFactory</span><span style="color:#24292E;">(transport, protocolFactory)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> transport.</span><span style="color:#6F42C1;">Open</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">Fatalln</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error opening:&quot;</span><span style="color:#24292E;">, HOST </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> PORT)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">defer transport.</span><span style="color:#6F42C1;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">req </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> user.LoginRequest{Username</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;">, Password</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">res, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">CheckPassword</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">req)</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(res.Msg)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-服务端建立-rpc-服务-1" tabindex="-1">3. 服务端建立 RPC 服务 <a class="header-anchor" href="#_3-服务端建立-rpc-服务-1" aria-label="Permalink to &quot;3. 服务端建立 RPC 服务&quot;">​</a></h4><p>与客户端类似，服务端建立 RPC 服务时需要选择跟客户端一致的网络传输和序列化协议配置，然后调用 NewTSimpleServer4 函数使用具体接口实现类（代码中的 UserService），再结合网络传输和序列化协议配置来共同建立 RPC 服务。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">handler </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">UserService{} </span><span style="color:#6A737D;">// 类似上边的gRPC，是一个实现生成代码中接口的函数的结构体</span></span>
<span class="line"><span style="color:#E1E4E8;">processor </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">NewUserProcessor</span><span style="color:#E1E4E8;">(handler)</span></span>
<span class="line"><span style="color:#E1E4E8;">serverTransport, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> thrift.</span><span style="color:#B392F0;">NewTServerSocket</span><span style="color:#E1E4E8;">(HOST </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> PORT)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">log.</span><span style="color:#B392F0;">Fatalln</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">transportFactory </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> thrift.</span><span style="color:#B392F0;">NewTFramedTransportFactory</span><span style="color:#E1E4E8;">(thrift.</span><span style="color:#B392F0;">NewTTransportFactory</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">protocolFactory </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> thrift.</span><span style="color:#B392F0;">NewTBinaryProtocolFactoryDefault</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">server </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> thrift.</span><span style="color:#B392F0;">NewTSimpleServer4</span><span style="color:#E1E4E8;">(processor, serverTransport, transportFactory, protocolFactory)</span></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Running at:&quot;</span><span style="color:#E1E4E8;">, HOST </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> PORT)</span></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">Serve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">handler </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">UserService{} </span><span style="color:#6A737D;">// 类似上边的gRPC，是一个实现生成代码中接口的函数的结构体</span></span>
<span class="line"><span style="color:#24292E;">processor </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">NewUserProcessor</span><span style="color:#24292E;">(handler)</span></span>
<span class="line"><span style="color:#24292E;">serverTransport, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> thrift.</span><span style="color:#6F42C1;">NewTServerSocket</span><span style="color:#24292E;">(HOST </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> PORT)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">log.</span><span style="color:#6F42C1;">Fatalln</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">transportFactory </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> thrift.</span><span style="color:#6F42C1;">NewTFramedTransportFactory</span><span style="color:#24292E;">(thrift.</span><span style="color:#6F42C1;">NewTTransportFactory</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">protocolFactory </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> thrift.</span><span style="color:#6F42C1;">NewTBinaryProtocolFactoryDefault</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">server </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> thrift.</span><span style="color:#6F42C1;">NewTSimpleServer4</span><span style="color:#24292E;">(processor, serverTransport, transportFactory, protocolFactory)</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Running at:&quot;</span><span style="color:#24292E;">, HOST </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> PORT)</span></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">Serve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上述示例代码，Thrift 可以让用户选择客户端和服务端之间进行 RPC 网络传输和序列化协议，对于服务端，还提供了建立不同网络处理模型的服务端能力。</p><p>对于通信协议（TProtocol），Thrift 提供了基于文本和二进制传输协议，可选的协议有：二进制编码协议（TBinaryProtocol）、压缩的二进制编码协议（TCompactProtocol）、JSON 格式的编码协议（TJSONProtocol）和用于调试的可读编码协议（TDebugProtocol）。上面示例代码中我们使用的是默认的二进制协议，也就是 TBinaryProtocol。</p><p>对于传输方式（TTransport），Thrift 提供了丰富的传输方式，可选的传输方式有：最常见的阻塞式 I/O 的 TSocket、HTTP 协议传输的 THttpTransport、以 frame 为单位进行非阻塞传输的 TFramedTransport 和以内存进行传输的 TMemoryTransport 等。</p><p>对于服务端模型（TServer），Thrift 目前提供了：单线程服务器端使用标准的阻塞式 I/O 的 TServer、多线程服务器端使用标准的阻塞式 I/O 的 TThreadedServer 和多线程网络模型使用配有线程池的阻塞式 I/O 的 TThreadPoolServer 等。</p><p>整个 Thrift 框架中，可供用户选择和配置的项目如下图所示，由此可见，Thrift 具备丰富的配置项，可以为开发者提供尽可能多的选择。</p>`,40),i=n("p",null,"Thrift 框架示意图",-1),F=n("h3",{id:"grpc-和-thrift-的区别和选择",tabindex:"-1"},[s("gRPC 和 Thrift 的区别和选择 "),n("a",{class:"header-anchor",href:"#grpc-和-thrift-的区别和选择","aria-label":'Permalink to "gRPC 和 Thrift 的区别和选择"'},"​")],-1),g=n("p",null,"Thrift 是 RPC 领域的老牌开源项目，而 gRPC 后来者居上，逐渐超越了 Thrift，二者目前在社区欢迎度和使用度上的对比可以通过 StackShare 网站查看，截至 2020 年 7 月的数据如下图所示：",-1),u=l('<p>Thrift 和 gRPC在社区的欢迎度和使用度对比</p><p>可以看出，gRPC 拥有更加良好的生态环境和社区规模，而且更多的公司开始将自身技术栈迁移到 gRPC，比如 Dropbox。那为什么会出现这种&quot;后来者反而居上&quot;的情况呢？</p><ul><li><p>首先，在工程性方面，gRPC 比 Thrift 拥有更加良好的文档并且代码更容易上手，gRPC 编译生成的代码量远小于 Thrift 生成的代码，这些优势相信你在实践上述案例时就能发现。</p></li><li><p>其次，在功能方面，Thrift 不支持流式编程，不支持大批量流式读写数据的能力，这对很多大数据项目至关重要，比如开源的分布式内存文件系统 Alluxio 就因此从 Thrift 迁移到 gRPC。</p></li><li><p>最后，在性能方面，gRPC 已经从刚开始的被吊打，逐渐缩小与 Thrift 之间的差距。目前根据 GitHub 上他人压测的效果，gRPC 和 Thrift 已经不存在数量级上的性能差距，而且 gRPC 可以使用流式 stream 能力来提升性能。可以说，二者都不会成为你链路性能优化上的瓶颈。</p></li></ul><p>综上所述，从成熟度上来讲，因为 Thrift 的起源要早于 gRPC，所以目前使用的范围要大于 gRPC，在 HBase、Hadoop 和 Cassandra 等许多开源组件中都得到了广泛应用，而且 Thrift 支持的语言要比 gRPC 更多，多达 25 种语言，所以如果遇到 gRPC 不支持的语言场景，我建议你选择 Thrift。</p><p>但 gRPC 作为 Google 开源的后起之秀，因为采用了 HTTP/2 作为通信协议、ProtoBuf 作为数据序列化格式和支持流式处理，在移动端设备应用等对传输带宽比较敏感的场景下具有很大的优势，而且开发文档和代码示例丰富，社区活跃度高，根据 ProtoBuf 文件生成的代码要比 Thrift 更加简洁，更容易上手，所以如果是 gRPC 支持开发语言的场景，我建议你还是采用 gRPC 比较好。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>在本课时我们先分别介绍了 gRPC 和 Thrift 的整体概念和示例，然后又对二者进行了分析和对比，这都可以为你以后对 RPC 框架进行选型提供依据。后续我们会讲解如何将 gRPC 集成到微服务架构中。</p><p>但是对比二者，你会发现它们也都缺少了大量的功能，比如：连接池、服务框架、服务发现、服务治理、分布式链路追踪、埋点和上下文日志等，而这些功能才是日常开发和运维最常使用的。不过本课程的后面我们都会一一讲述上述功能，为你拼接出最为详细和完整的 Go 微服务架构全貌。</p><p>关于本课时，你有什么经验或想法呢？欢迎你在留言区和我分享。</p>',9);function C(h,d,P,f,v,R){const a=e("Image");return r(),t("div",null,[E,p(a,{alt:"grpc_language.png",src:"https://s0.lgstatic.com/i/image/M00/46/C9/CgqCHl9GF-WAbunfAADemgWlVgo940.png"}),s(),y,p(a,{alt:"thrift_structure.png",src:"https://s0.lgstatic.com/i/image/M00/46/BF/Ciqc1F9GGH6AYzO_AACRpMJ8K94764.png"}),s(),i,F,g,p(a,{alt:"gprc_vs_thrift.jpg",src:"https://s0.lgstatic.com/i/image/M00/46/BF/Ciqc1F9GGIiAJCt0AAHADfLpvVw269.jpg"}),s(),u])}const m=o(c,[["render",C]]);export{T as __pageData,m as default};
