import{_ as o,j as e,o as t,g as c,k as l,h as a,s,Q as p}from"./chunks/framework.b3d8e22e.js";const x=JSON.parse('{"title":"项目基础框架 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3526) 09  项目脚手架：一个命令构建 Flutter 项目.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3526) 09  项目脚手架：一个命令构建 Flutter 项目.md","lastUpdated":1696417798000}'),r={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3526) 09  项目脚手架：一个命令构建 Flutter 项目.md"},i=s("p",null,"在基础功能部分，我已经讲解了从基础到规范的应用，接下来我们进入项目实战部分。本课时将介绍项目基础框架，并且应用脚手架功能实现轻松的初始化项目。",-1),E=s("h3",{id:"项目基础框架",tabindex:"-1"},[a("项目基础框架 "),s("a",{class:"header-anchor",href:"#项目基础框架","aria-label":'Permalink to "项目基础框架"'},"​")],-1),y=s("p",null,"先看项目基础框架，我们将项目基础框架分为三个部分：核心代码部分、基础工具以及单元测试。",-1),d=s("h4",{id:"核心代码",tabindex:"-1"},[a("核心代码 "),s("a",{class:"header-anchor",href:"#核心代码","aria-label":'Permalink to "核心代码"'},"​")],-1),h=s("p",null,"核心代码主要是在 lib 目录下，我们将 lib 下的各个功能进行了整理，可以用图 1 来表示各个模块之间的关系。",-1),g=p("",4),u=s("p",null,"表格 1 pages 业务划分目录结构",-1),_=s("p",null,"widgets 下则与 pages 目录结构保持一致即可，model 、api 以及 struct 则需要根据的服务端协议的业务功能来定义目录结构。使用上面的目录方式，我们创建出了如图 2 所示的一个结构，提供大家参考。",-1),m=p("",10),F=p("",29);function b(f,k,A,C,v,D){const n=e("Image");return t(),c("div",null,[i,E,y,d,h,l(n,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/2E/C3/Ciqc1F8Flb-AGmmvAADAcKsYMc8004.png"}),a(),g,l(n,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/2E/C3/Ciqc1F8FldOAPQ-gAABVfTIEj5I407.png"}),a(),u,_,l(n,{alt:"image2.png",src:"https://s0.lgstatic.com/i/image/M00/2E/CF/CgqCHl8FleuAcV39AABWvTrY5U8584.png"}),a(),m,l(n,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/2E/C3/Ciqc1F8Flg2AZvgFAABbTxGj0PU912.png"}),a(),F])}const B=o(r,[["render",b]]);export{x as __pageData,B as default};
