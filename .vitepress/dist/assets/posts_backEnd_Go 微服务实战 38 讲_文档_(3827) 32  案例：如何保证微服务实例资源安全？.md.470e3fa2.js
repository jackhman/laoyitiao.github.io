import{_ as o,j as e,o as t,g as r,k as l,h as s,Q as p,s as n}from"./chunks/framework.b3d8e22e.js";const q=JSON.parse('{"title":"整体结构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3827) 32  案例：如何保证微服务实例资源安全？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3827) 32  案例：如何保证微服务实例资源安全？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3827) 32  案例：如何保证微服务实例资源安全？.md"},E=p('<p>今天我和你分享的是如何保证微服务实例资源安全的案例。</p><p>在上一课时中，我们实践了如何使用 Go 搭建一个基本的<strong>授权服务器</strong> ，它的主要功能是颁发访问令牌和验证访问令牌的有效性。在统一认证与授权服务体系中，还存在<strong>资源服务器</strong>对用户数据进行保护，它允许携带有效访问令牌的客户端请求用户资源。</p><p>在本课时，我们将基于 Go 实现一个基本的资源服务器，让其为用户数据保驾护航。</p><h3 id="整体结构" tabindex="-1">整体结构 <a class="header-anchor" href="#整体结构" aria-label="Permalink to &quot;整体结构&quot;">​</a></h3><p>资源服务器会在请求进入具体的资源端点之前，对请求中携带的访问令牌进行校验，比较常用的做法是<strong>采用拦截器的方式</strong>实现，如下图所示：</p>',5),y=n("p",null,"资源服务器中请求流程图",-1),i=n("p",null,[s("请求在进入具体的资源端点之前，会至少经过"),n("strong",null,"令牌认证拦截器"),s(" 和"),n("strong",null,"权限检查拦截器"),s("这两个拦截器，以及其他发挥重要功能的拦截器，比如限流拦截器等。令牌认证拦截器会解析请求中携带的访问令牌，请求授权服务器验证访问令牌的有效性，明确当前请求的客户端和用户信息，并把这些信息写入请求上下文中，如果访问令牌无效，将会拒绝请求，返回认证错误。权限检查拦截器会按照预设的权限规则对请求上下文中的客户端和用户信息进行权限检查，如果权限不足也会拒绝访问，返回鉴权错误。")],-1),u=n("p",null,"对此我们可以将资源服务器设计为以下几个模块，如图所示：",-1),d=p(`<p>资源服务器模块组成图</p><ul><li><p><strong>OAuth2AuthorizationContext（认证上下文处理器）</strong>，负责从请求解析出访问令牌，委托 ResourceServerTokenService 验证访问令牌的有效性，获取令牌对应的客户端和用户信息。</p></li><li><p><strong>OAuth2AuthorizationMiddleware（认证中间件）</strong>，检查请求上下文是否存在客户端和用户信息。</p></li><li><p><strong>AuthorityAuthorizationMiddleware（权限检查中间件）</strong>，从请求上下文中获取客户端和用户信息，并根据预设的权限规则对请求的客户端和用户信息进行鉴权。</p></li><li><p><strong>ResourceServerTokenService（资源服务器令牌服务）</strong>，帮助资源服务器检验访问令牌的有效性以及获取访问令牌绑定的客户端和用户信息。</p></li></ul><p>接下来，我们就来详细讲解一下如何实现资源服务器。</p><h3 id="认证上下文处理器" tabindex="-1">认证上下文处理器 <a class="header-anchor" href="#认证上下文处理器" aria-label="Permalink to &quot;认证上下文处理器&quot;">​</a></h3><p>客户端在请求资源服务器中被保护的端点时，默认会把访问令牌放到 Authorization 请求头，然后资源服务器会在请求进入 Endpoint 之前，从 Authorization 请求头中获取访问令牌用于验证用户身份。</p><p>OAuth2AuthorizationContext（认证上下文处理器）用于从 Authorization 请求头解析出访问令牌，并使用 ResourceServerTokenService 根据访问令牌获取用户信息和客户端信息。构建 OAuth2AuthorizationContext 的代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeOAuth2AuthorizationContext</span><span style="color:#E1E4E8;">(tokenService service. ResourceServerTokenService, logger log.Logger) kithttp.RequestFunc {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(ctx context.Context, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) context.Context {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 获取访问令牌</span></span>
<span class="line"><span style="color:#E1E4E8;">		accessTokenValue </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> r.Header.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Authorization&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> accessTokenValue </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 获取令牌对应的用户信息和客户端信息</span></span>
<span class="line"><span style="color:#E1E4E8;">			oauth2Details, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tokenService.</span><span style="color:#79B8FF;">GetOAuth2DetailsByAccessToken</span><span style="color:#E1E4E8;">(accessTokenValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithValue</span><span style="color:#E1E4E8;">(ctx, endpoint.OAuth2ErrorKey, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithValue</span><span style="color:#E1E4E8;">(ctx, endpoint.OAuth2DetailsKey, oauth2Details)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ErrorTokenRequest</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithValue</span><span style="color:#E1E4E8;">(ctx, endpoint.OAuth2ErrorKey, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeOAuth2AuthorizationContext</span><span style="color:#24292E;">(tokenService service. ResourceServerTokenService, logger log.Logger) kithttp.RequestFunc {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(ctx context.Context, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) context.Context {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 获取访问令牌</span></span>
<span class="line"><span style="color:#24292E;">		accessTokenValue </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> r.Header.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Authorization&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> accessTokenValue </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 获取令牌对应的用户信息和客户端信息</span></span>
<span class="line"><span style="color:#24292E;">			oauth2Details, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tokenService.</span><span style="color:#005CC5;">GetOAuth2DetailsByAccessToken</span><span style="color:#24292E;">(accessTokenValue)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithValue</span><span style="color:#24292E;">(ctx, endpoint.OAuth2ErrorKey, err)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithValue</span><span style="color:#24292E;">(ctx, endpoint.OAuth2DetailsKey, oauth2Details)</span></span>
<span class="line"><span style="color:#24292E;">		}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ErrorTokenRequest</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithValue</span><span style="color:#24292E;">(ctx, endpoint.OAuth2ErrorKey, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，如果 Authorization 请求头不存在访问令牌或者访问令牌无效，将在 context 中设置令牌无效的错误信息。接着OAuth2AuthorizationContext 会使用 ResourceServerTokenService 根据访问令牌解析出令牌对应的用户信息和客户端信息，如果解析成功，说明当前请求的客户端已经得到了用户的授权。最后再把用户信息和客户端信息放入 context 中，便于接下来的认证与鉴权使用。</p><h3 id="认证中间件" tabindex="-1">认证中间件 <a class="header-anchor" href="#认证中间件" aria-label="Permalink to &quot;认证中间件&quot;">​</a></h3><p>在请求正式进入 Endpoint 之前，我们需要验证请求上下文 context 中是否存在 OAuth2Details，是否存在客户端和用户信息。对此，我们对每个需要进行认证的端点添加认证中间件（OAuth2AuthorizationMiddleware），代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeClientAuthorizationMiddleware</span><span style="color:#E1E4E8;">(logger log.Logger) endpoint.Middleware {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(next endpoint.Endpoint) endpoint.Endpoint {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(ctx context.Context, request </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) (response </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}, err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 检查是否出现认证错误</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#79B8FF;">Value</span><span style="color:#E1E4E8;">(OAuth2ErrorKey).(</span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">); ok{</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 检查请求上下文中是否存在客户端和用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> _, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#79B8FF;">Value</span><span style="color:#E1E4E8;">(OAuth2ClientDetailsKey).(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">model.ClientDetails); </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ok{</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrInvalidClientRequest</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(ctx, request)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeClientAuthorizationMiddleware</span><span style="color:#24292E;">(logger log.Logger) endpoint.Middleware {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(next endpoint.Endpoint) endpoint.Endpoint {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(ctx context.Context, request </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) (response </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}, err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 检查是否出现认证错误</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ctx.</span><span style="color:#005CC5;">Value</span><span style="color:#24292E;">(OAuth2ErrorKey).(</span><span style="color:#D73A49;">error</span><span style="color:#24292E;">); ok{</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 检查请求上下文中是否存在客户端和用户信息</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> _, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ctx.</span><span style="color:#005CC5;">Value</span><span style="color:#24292E;">(OAuth2ClientDetailsKey).(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">model.ClientDetails); </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ok{</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrInvalidClientRequest</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(ctx, request)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，在请求进入业务处理的 Endpoint 之前，OAuth2AuthorizationMiddleware 认证中间件会检查 context 中的OAuth2Details 是否存在，如果不存在，说明请求没有经过认证，请求将会被拒绝访问。如果存在，说明请求已经携带了有效的访问令牌，将被允许通过该中间件。</p><h3 id="权限检查中间件" tabindex="-1">权限检查中间件 <a class="header-anchor" href="#权限检查中间件" aria-label="Permalink to &quot;权限检查中间件&quot;">​</a></h3><p>访问资源服务器受保护资源的端点时，不仅需要请求中携带有效的访问令牌，还需要访问令牌绑定的客户端和用户具备足够的权限。</p><p>在 OAuth2AuthorizationContext（认证上下文处理器）中我们获取到了用户信息和客户端信息，可以根据它们具备的权限列表和预设的权限规则，判断本次请求是否具备访问端点的权限。对此我们需要添加 AuthorityAuthorizationMiddleware（权限检查中间件），它会根据预设的权限规则，对访问令牌绑定的用户权限进行检查，只有具备足够权限的用户请求，才能够进入 Endpoint 中执行业务逻辑。构建 AuthorityAuthorizationMiddleware的代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeAuthorityAuthorizationMiddleware</span><span style="color:#E1E4E8;">(authority </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, logger log.Logger) endpoint.Middleware  {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(next endpoint.Endpoint) endpoint.Endpoint {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(ctx context.Context, request </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) (response </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}, err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 检查是否出现认证错误</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#79B8FF;">Value</span><span style="color:#E1E4E8;">(OAuth2ErrorKey).(</span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">); ok{</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		   </span><span style="color:#6A737D;">// 检查是否具备预设权限</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> details, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#79B8FF;">Value</span><span style="color:#E1E4E8;">(OAuth2DetailsKey).(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">model.OAuth2Details); </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ok{</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrInvalidClientRequest</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, value </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> details.User.Authorities{</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> authority{</span></span>
<span class="line"><span style="color:#E1E4E8;">						</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(ctx, request)</span></span>
<span class="line"><span style="color:#E1E4E8;">					}</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrNotPermit</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeAuthorityAuthorizationMiddleware</span><span style="color:#24292E;">(authority </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, logger log.Logger) endpoint.Middleware  {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(next endpoint.Endpoint) endpoint.Endpoint {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(ctx context.Context, request </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) (response </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}, err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 检查是否出现认证错误</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ctx.</span><span style="color:#005CC5;">Value</span><span style="color:#24292E;">(OAuth2ErrorKey).(</span><span style="color:#D73A49;">error</span><span style="color:#24292E;">); ok{</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		   </span><span style="color:#6A737D;">// 检查是否具备预设权限</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> details, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ctx.</span><span style="color:#005CC5;">Value</span><span style="color:#24292E;">(OAuth2DetailsKey).(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">model.OAuth2Details); </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ok{</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrInvalidClientRequest</span></span>
<span class="line"><span style="color:#24292E;">			}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, value </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> details.User.Authorities{</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> authority{</span></span>
<span class="line"><span style="color:#24292E;">						</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(ctx, request)</span></span>
<span class="line"><span style="color:#24292E;">					}</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrNotPermit</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，我们先从 context 中获取到访问令牌中解析出的用户信息和客户端信息，然后对用户的权限进行检查，只有具备预设权限的用户才能继续访问接口，否则返回权限不足的错误。此处实现的权限检查中间件判断逻辑比较单一，用户只需具备对应的权限即可通过判定，但在实际生产环境中，我们可以组合更加复杂的权限判断逻辑以满足业务需求。</p><h3 id="资源服务器令牌服务" tabindex="-1">资源服务器令牌服务 <a class="header-anchor" href="#资源服务器令牌服务" aria-label="Permalink to &quot;资源服务器令牌服务&quot;">​</a></h3><p>ResourceServerTokenService（资源服务器令牌服务）的作用是资源服务器验证访问令牌的有效性和解析出令牌绑定的客户端和用户信息，它提供以下接口：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResourceServerTokenService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据访问令牌获取对应的用户信息和客户端信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">GetOAuth2DetailsByAccessToken</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResourceServerTokenService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据访问令牌获取对应的用户信息和客户端信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">GetOAuth2DetailsByAccessToken</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一般来说，资源服务器都是通过远程调用的方式，访问授权服务器的 oauth/check_token 端点来验证访问令牌的有效性。但是由于访问令牌的类型为 JWT，令牌中的信息是自包含的，所以我们在资源服务器中就可以直接验证访问令牌，并从令牌中解析出用户信息和客户端信息，如下代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (tokenService </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">DefaultTokenService) </span><span style="color:#B392F0;">GetOAuth2DetailsByAccessToken</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 借助 JwtTokenStore 从令牌中解析出信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	accessToken, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">ReadAccessToken</span><span style="color:#E1E4E8;">(tokenValue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> accessToken.</span><span style="color:#79B8FF;">IsExpired</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrExpiredToken</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">ReadOAuth2Details</span><span style="color:#E1E4E8;">(tokenValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (tokenService </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">DefaultTokenService) </span><span style="color:#6F42C1;">GetOAuth2DetailsByAccessToken</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 借助 JwtTokenStore 从令牌中解析出信息</span></span>
<span class="line"><span style="color:#24292E;">	accessToken, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">ReadAccessToken</span><span style="color:#24292E;">(tokenValue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> accessToken.</span><span style="color:#005CC5;">IsExpired</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrExpiredToken</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">ReadOAuth2Details</span><span style="color:#24292E;">(tokenValue)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，我们就是直接通过 JwtTokenStore 从 JWT 样式的令牌中解析出令牌绑定的客户端和用户信息。</p><p>接下来我们通过构造一些资源端点来验证资源服务器保护受限资源的能力。</p><h3 id="访问受限资源端点" tabindex="-1">访问受限资源端点 <a class="header-anchor" href="#访问受限资源端点" aria-label="Permalink to &quot;访问受限资源端点&quot;">​</a></h3><p><strong>受保护资源是资源服务器中被保护的用户数据</strong>。请求必须持有访问令牌，且访问令牌绑定的用户具备足够的权限才允许访问资源端点，也就是说在请求到达受保护资源的端点前，需要被认证中间件和权限检查中间件对请求中携带的访问令牌进行校验。</p><p>我们分别构造以下 3 个端点：</p><ul><li><p>/index，任意请求可访问；</p></li><li><p>/sample，携带有效访问令牌的请求可访问；</p></li><li><p>/admin，携带有效访问令牌，且访问令牌绑定的用户具备 Admin 权限的请求可访问。</p></li></ul><p>在 transport 层，为了保证认证中间件和权限检查中间件能够获取访问令牌绑定的用户和客户端信息，在请求处理前我们添加了OAuth2AuthorizationContext（认证上下文处理器）从请求头中解析并验证token，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 添加认证上下文处理器</span></span>
<span class="line"><span style="color:#E1E4E8;">oauth2AuthorizationOptions </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []kithttp.ServerOption{</span></span>
<span class="line"><span style="color:#E1E4E8;">		kithttp.</span><span style="color:#79B8FF;">ServerBefore</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">makeOAuth2AuthorizationContext</span><span style="color:#E1E4E8;">(tokenService, logger)),</span></span>
<span class="line"><span style="color:#E1E4E8;">		kithttp.</span><span style="color:#79B8FF;">ServerErrorHandler</span><span style="color:#E1E4E8;">(transport.</span><span style="color:#79B8FF;">NewLogErrorHandler</span><span style="color:#E1E4E8;">(logger)),</span></span>
<span class="line"><span style="color:#E1E4E8;">		kithttp.</span><span style="color:#79B8FF;">ServerErrorEncoder</span><span style="color:#E1E4E8;">(encodeError),</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// index 端点</span></span>
<span class="line"><span style="color:#E1E4E8;">	r.</span><span style="color:#79B8FF;">Methods</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Get&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">Path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/index&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">Handler</span><span style="color:#E1E4E8;">(kithttp.</span><span style="color:#79B8FF;">NewServer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		endpoints.IndexEndpoint,</span></span>
<span class="line"><span style="color:#E1E4E8;">		decodeSimpleRequest,</span></span>
<span class="line"><span style="color:#E1E4E8;">		encodeJsonResponse,</span></span>
<span class="line"><span style="color:#E1E4E8;">		oauth2AuthorizationOptions</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	))</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">其他端点</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 添加认证上下文处理器</span></span>
<span class="line"><span style="color:#24292E;">oauth2AuthorizationOptions </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []kithttp.ServerOption{</span></span>
<span class="line"><span style="color:#24292E;">		kithttp.</span><span style="color:#005CC5;">ServerBefore</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">makeOAuth2AuthorizationContext</span><span style="color:#24292E;">(tokenService, logger)),</span></span>
<span class="line"><span style="color:#24292E;">		kithttp.</span><span style="color:#005CC5;">ServerErrorHandler</span><span style="color:#24292E;">(transport.</span><span style="color:#005CC5;">NewLogErrorHandler</span><span style="color:#24292E;">(logger)),</span></span>
<span class="line"><span style="color:#24292E;">		kithttp.</span><span style="color:#005CC5;">ServerErrorEncoder</span><span style="color:#24292E;">(encodeError),</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// index 端点</span></span>
<span class="line"><span style="color:#24292E;">	r.</span><span style="color:#005CC5;">Methods</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Get&quot;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">Path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/index&quot;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">Handler</span><span style="color:#24292E;">(kithttp.</span><span style="color:#005CC5;">NewServer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">		endpoints.IndexEndpoint,</span></span>
<span class="line"><span style="color:#24292E;">		decodeSimpleRequest,</span></span>
<span class="line"><span style="color:#24292E;">		encodeJsonResponse,</span></span>
<span class="line"><span style="color:#24292E;">		oauth2AuthorizationOptions</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	))</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">其他端点</span></span></code></pre></div><p>接着在 main 函数中，为需要进行认证和权限检查的 SampleEnpoint 和 AdminEndpoint 添加认证中间件和权限检查中间件，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> sampleEndpoint </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> endpoint.</span><span style="color:#79B8FF;">MakeSampleEndpoint</span><span style="color:#E1E4E8;">(srv)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 添加认证中间件</span></span>
<span class="line"><span style="color:#E1E4E8;">  sampleEndpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> endpoint.</span><span style="color:#79B8FF;">MakeOAuth2AuthorizationMiddleware</span><span style="color:#E1E4E8;">(config.KitLogger)(sampleEndpoint)</span></span>
<span class="line"><span style="color:#E1E4E8;">  adminEndpoint </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> endpoint.</span><span style="color:#79B8FF;">MakeAdminEndpoint</span><span style="color:#E1E4E8;">(srv)</span></span>
<span class="line"><span style="color:#6A737D;">// 添加认证中间件和权限检查中间件 </span></span>
<span class="line"><span style="color:#E1E4E8;">  adminEndpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> endpoint.</span><span style="color:#79B8FF;">MakeOAuth2AuthorizationMiddleware</span><span style="color:#E1E4E8;">(config.KitLogger)(adminEndpoint)</span></span>
<span class="line"><span style="color:#E1E4E8;">  adminEndpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> endpoint.</span><span style="color:#79B8FF;">MakeAuthorityAuthorizationMiddleware</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Admin&quot;</span><span style="color:#E1E4E8;">, config.KitLogger)(adminEndpoint)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> sampleEndpoint </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> endpoint.</span><span style="color:#005CC5;">MakeSampleEndpoint</span><span style="color:#24292E;">(srv)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 添加认证中间件</span></span>
<span class="line"><span style="color:#24292E;">  sampleEndpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> endpoint.</span><span style="color:#005CC5;">MakeOAuth2AuthorizationMiddleware</span><span style="color:#24292E;">(config.KitLogger)(sampleEndpoint)</span></span>
<span class="line"><span style="color:#24292E;">  adminEndpoint </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> endpoint.</span><span style="color:#005CC5;">MakeAdminEndpoint</span><span style="color:#24292E;">(srv)</span></span>
<span class="line"><span style="color:#6A737D;">// 添加认证中间件和权限检查中间件 </span></span>
<span class="line"><span style="color:#24292E;">  adminEndpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> endpoint.</span><span style="color:#005CC5;">MakeOAuth2AuthorizationMiddleware</span><span style="color:#24292E;">(config.KitLogger)(adminEndpoint)</span></span>
<span class="line"><span style="color:#24292E;">  adminEndpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> endpoint.</span><span style="color:#005CC5;">MakeAuthorityAuthorizationMiddleware</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Admin&quot;</span><span style="color:#24292E;">, config.KitLogger)(adminEndpoint)</span></span></code></pre></div><p>在上述代码中，我们可以发现 SampleEndpoint 被 OAuth2AuthorizationMiddleware（认证中间件）装饰，而AdminEndpoint被 OAuth2AuthorizationMiddleware（认证中间件）和 AuthorityAuthorizationMiddleware（权限检查中间件）同时装饰。</p><p>接下来我们在授权服务器内内置两名用户信息：①用户名 aoho1、密码 123456，权限为 sample；②用户名 aoho2、密码 123456，权限为 admin。启动资源服务器，直接访问 /index 端点，可以直接获取到请求结果，如下所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;result&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;hello, wecome to index&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;error&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;result&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;hello, wecome to index&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;error&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后我们直接访问 /sample 端点，将会获取到以下拒绝访问的错误：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;error&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;invalid request token&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;error&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;invalid request token&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对此，我们需要使用 aoho1 用户的用户名和密码请求授权服务器获取对应的访问令牌。携带访问令牌再次请求 /sample 端点，请求的 curl 命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">http://localhost:10099/simple</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-H</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Authorization: ...&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-H</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Host: localhost:10099&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GET</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">http://localhost:10099/simple</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-H</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Authorization: ...&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-H</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Host: localhost:10099&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span></code></pre></div><p>我们在 Authorization 请求头中携带了访问令牌，即可获取到期望的请求数据，如下所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;result&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;hello aoho1, welcome to sample&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;error&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;result&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;hello aoho1, welcome to sample&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;error&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当我们以同样的访问令牌，即 aoho1 用户授权的访问令牌请求 /admin 端点时将会返回权限不足的错误，如下所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;error&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;not permit&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;error&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;not permit&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对此，我们需要使用 aoho2 用户授权访问令牌请求 /admin 端点。从授权服务器获取到 aoho2 用户授权的访问令牌后，携带其访问令牌再次访问 /admin 端点，即可获取到如下预期的结果：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;result&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;hello aoho2, welcome to admin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;error&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;result&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;hello aoho2, welcome to admin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;error&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过组合认证中间件和权限检查中间件，我们可以检查请求中是否携带合法的访问令牌以及访问令牌绑定的用户是否具备足够的访问权限，这样就有效地在接口层级保护数据资源了。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>在统一认证与授权服务体系中，资源服务器的主要职责为<strong>保护用户保存在系统中的数据，允许携带有效访问令牌的客户端请求资源，拒绝无授权的请求访问</strong>。</p><p>在本课时，我们基于 Go 实现了一个基本的资源服务器。它首先通过认证上下文处理器从请求中解析出访问令牌，并借助资源服务器令牌服务验证访问令牌的有效性；接着再使用认证中间件和权限检查中间件对令牌绑定的客户端和用户信息进行认证和权限检查，允许携带有效访问令牌和满足预设权限的客户端请求获取到数据。希望通过本模块这4 个课时的学习，能帮助你充分了解如何构建微服务中统一认证与授权体系。</p><p>最后，对于如何实践统一认证与授权服务体系，你还有什么其他见解呢？欢迎在留言区与我分享。</p>`,50);function h(F,A,g,C,k,D){const a=e("Image");return t(),r("div",null,[E,l(a,{alt:"图片11.png",src:"https://s0.lgstatic.com/i/image/M00/5F/77/Ciqc1F-JYciAXOBBAACNYK3Blio069.png"}),s(),y,i,u,l(a,{alt:"图片12.png",src:"https://s0.lgstatic.com/i/image/M00/5F/82/CgqCHl-JYdCAXd-5AACLyd4sStg095.png"}),s(),d])}const m=o(c,[["render",h]]);export{q as __pageData,m as default};
