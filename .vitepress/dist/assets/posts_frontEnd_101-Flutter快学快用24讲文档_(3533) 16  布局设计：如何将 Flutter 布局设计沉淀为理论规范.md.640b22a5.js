import{_ as o,j as e,o as t,g as c,k as l,h as n,Q as p,s}from"./chunks/framework.a0d18f64.js";const P=JSON.parse('{"title":"16布局设计：如何将Flutter布局设计沉淀为理论规范","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3533) 16  布局设计：如何将 Flutter 布局设计沉淀为理论规范.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3533) 16  布局设计：如何将 Flutter 布局设计沉淀为理论规范.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3533) 16  布局设计：如何将 Flutter 布局设计沉淀为理论规范.md"},E=p('<h1 id="_16布局设计-如何将flutter布局设计沉淀为理论规范" tabindex="-1">16布局设计：如何将Flutter布局设计沉淀为理论规范 <a class="header-anchor" href="#_16布局设计-如何将flutter布局设计沉淀为理论规范" aria-label="Permalink to &quot;16布局设计：如何将Flutter布局设计沉淀为理论规范&quot;">​</a></h1><p>前面课时只介绍了组件设计，并没有过多涉及布局的讲解，可能你了解一些布局组件，比如 Container、Row、Column、Padding、Center 等，但是对于如何从 UI 稿到组件再到布局，却没有非常清晰的思路。本课时就从我的角度来分析，如何进行组件的布局。</p><h3 id="常见布局组件" tabindex="-1">常见布局组件 <a class="header-anchor" href="#常见布局组件" aria-label="Permalink to &quot;常见布局组件&quot;">​</a></h3><p>在 Flutter 中可以分为 Single-child layout widgets 和 Multi-child layout widgets ，使用中文来解释就是单个子元素的布局组件和多个子元素的布局组件。</p><h4 id="single-child" tabindex="-1">Single-child <a class="header-anchor" href="#single-child" aria-label="Permalink to &quot;Single-child&quot;">​</a></h4><p>常见单个子组件的有 Align、Padding、 Expanded 和 Container 。</p><ul><li><p>Align 比较好理解，Align 组件的位置左、右、上、下、左上、右下、左下、右上，这两者一般配合 Container 来使用。</p></li><li><p>Padding 是一个可以设置上下和左右填充的组件，在布局设计中也非常常见。</p></li><li><p>Expanded 是一个可伸缩的容器，可以根据子组件的大小进行动态伸缩，这个需要配合 Row 组件的 flex 布局使用，其次也可以作为动态列表的父组件，避免列表超出界面，引起布局问题。</p></li><li><p>Container 是比较常用的，类似一个容器，可以设置容器的大小，然后将子元素包裹在容器中，该组件在超出容器后，会容易引起布局问题。</p></li></ul><h4 id="multi-child" tabindex="-1">Multi-child <a class="header-anchor" href="#multi-child" aria-label="Permalink to &quot;Multi-child&quot;">​</a></h4><p>常见的多个子组件有 Row、Column 和 Stack。</p><ul><li><p>Row 是横排展示子组件。</p></li><li><p>Column 是竖排展示子组件。</p></li><li><p>Stack 是层叠展示子组件。</p></li></ul><p>以上具体每个组件的参数配置，大家可以在<a href="https://flutter.cn/docs/development/ui/widgets/layout" target="_blank" rel="noreferrer">官网</a>查到，官网还有一些不常用的，但也比较实用的布局组件，这里就不详细列出了。</p><h3 id="布局思想" tabindex="-1">布局思想 <a class="header-anchor" href="#布局思想" aria-label="Permalink to &quot;布局思想&quot;">​</a></h3><p>将布局的思想总结为八个字：<strong>竖、横、高、宽、上、下、左、右。</strong> 也就是一个页面出来以后，按照这八个字的先后去分析页面的布局。那么我们具体来看下，八个字中会涉及哪些布局组件的应用。</p><h4 id="竖和横" tabindex="-1">竖和横 <a class="header-anchor" href="#竖和横" aria-label="Permalink to &quot;竖和横&quot;">​</a></h4><p>根据设计好的组件树，从上往下分析，遇到块状不同内容组，则设计为一个 Column 的子元素。例如图 2 的一个界面，从上往下分析，我们可以得到 6 个 Column 布局组件的子组件（这里为了演示效果，我们把组件也设计为 6 个部分）。</p>',15),i=p(`<p>图 1 帖子详情页</p><p>分析完成以后，我们再来看下每一行组件中所涉及的子组件。行子组件一般也是基于：Container、Row、Center 等布局组件来实现的，根据图 1 的效果，我们来分析：</p><ul><li><p>第一部分是居中的文章标题，可以使用 Center 组件；</p></li><li><p>第二部分是一条横线，可以使用 Divider 来绘制一条分割直线；</p></li><li><p>第三部分是用户信息，因为横着是有两个组件，所以使用 Row；</p></li><li><p>第四部分是文章内容，这里使用 Container 包裹一个 Text 组件；</p></li><li><p>第五部分是文章图片，这里也使用 Container 包裹一个 Image 组件；</p></li><li><p>第六部分是一个组件，这个组件内部竖看也是两个组件，因此需要使用 Column 组件。</p></li></ul><p>根据以上规则我们就可以设计出一个 pages 的页面了，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Column</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">  children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailTitle</span><span style="color:#E1E4E8;">(title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.title), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Divider</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailUserInfoBar</span><span style="color:#E1E4E8;">(userInfo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.userInfo), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailContent</span><span style="color:#E1E4E8;">(content</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.detailInfo), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailImg</span><span style="color:#E1E4E8;">(articleImage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.articleImage), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailLike</span><span style="color:#E1E4E8;">(articleId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> id, likeNum</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.likeNum) </span></span>
<span class="line"><span style="color:#E1E4E8;">  ], </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Column</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">  children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailTitle</span><span style="color:#24292E;">(title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.title), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Divider</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailUserInfoBar</span><span style="color:#24292E;">(userInfo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.userInfo), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailContent</span><span style="color:#24292E;">(content</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.detailInfo), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailImg</span><span style="color:#24292E;">(articleImage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.articleImage), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailLike</span><span style="color:#24292E;">(articleId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> id, likeNum</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.likeNum) </span></span>
<span class="line"><span style="color:#24292E;">  ], </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="高和宽" tabindex="-1">高和宽 <a class="header-anchor" href="#高和宽" aria-label="Permalink to &quot;高和宽&quot;">​</a></h4><p>接下来我们分析好每个组件所占用的高和宽，这部分可以在组件的 Container 属性中设置，有些组件也自带高和宽属性。例如上面的 Divider 组件我们就需要设置高和宽，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Column</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">  children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailTitle</span><span style="color:#E1E4E8;">(title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.title), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Divider</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">        height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.lightBlueAccent, </span></span>
<span class="line"><span style="color:#E1E4E8;">        indent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        endIndent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    ), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailUserInfoBar</span><span style="color:#E1E4E8;">(userInfo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.userInfo), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailContent</span><span style="color:#E1E4E8;">(content</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.detailInfo), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailImg</span><span style="color:#E1E4E8;">(articleImage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.articleImage), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailLike</span><span style="color:#E1E4E8;">(articleId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> id, likeNum</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.likeNum), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailComments</span><span style="color:#E1E4E8;">(commentList</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []) </span></span>
<span class="line"><span style="color:#E1E4E8;">  ], </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Column</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">  children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailTitle</span><span style="color:#24292E;">(title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.title), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Divider</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">        height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.lightBlueAccent, </span></span>
<span class="line"><span style="color:#24292E;">        indent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">75</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        endIndent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">75</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    ), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailUserInfoBar</span><span style="color:#24292E;">(userInfo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.userInfo), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailContent</span><span style="color:#24292E;">(content</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.detailInfo), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailImg</span><span style="color:#24292E;">(articleImage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.articleImage), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailLike</span><span style="color:#24292E;">(articleId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> id, likeNum</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.likeNum), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailComments</span><span style="color:#24292E;">(commentList</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []) </span></span>
<span class="line"><span style="color:#24292E;">  ], </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>上面代码的第 5 行就是设置高，第 7 和第 8 行就是设置其宽度。</p><h4 id="上和下" tabindex="-1">上和下 <a class="header-anchor" href="#上和下" aria-label="Permalink to &quot;上和下&quot;">​</a></h4><p>设置完每个组件的高和宽后，我们再从上往下看。根据组件树，这里主要看 Column 组件下的所有子组件之间是否需要设置上下，如果需要则应用 Padding 来实现。为了效果，我们在 ArticleDetailContent 和 ArticleDetailUserInfoBar 之间增加一个 Padding 效果，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Column</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">  children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailTitle</span><span style="color:#E1E4E8;">(title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.title), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Divider</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">        height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.lightBlueAccent, </span></span>
<span class="line"><span style="color:#E1E4E8;">        indent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        endIndent</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    ), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailUserInfoBar</span><span style="color:#E1E4E8;">(userInfo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.userInfo), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Padding</span><span style="color:#E1E4E8;">(padding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EdgeInsets</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">only</span><span style="color:#E1E4E8;">(top</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailContent</span><span style="color:#E1E4E8;">(content</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.detailInfo), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailImg</span><span style="color:#E1E4E8;">(articleImage</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.articleImage), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailLike</span><span style="color:#E1E4E8;">(articleId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> id, likeNum</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentDetail.likeNum), </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ArticleDetailComments</span><span style="color:#E1E4E8;">(commentList</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []) </span></span>
<span class="line"><span style="color:#E1E4E8;">  ], </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Column</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">  children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailTitle</span><span style="color:#24292E;">(title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.title), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Divider</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">        height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.lightBlueAccent, </span></span>
<span class="line"><span style="color:#24292E;">        indent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">75</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        endIndent</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">75</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    ), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailUserInfoBar</span><span style="color:#24292E;">(userInfo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.userInfo), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Padding</span><span style="color:#24292E;">(padding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EdgeInsets</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">only</span><span style="color:#24292E;">(top</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailContent</span><span style="color:#24292E;">(content</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.detailInfo), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailImg</span><span style="color:#24292E;">(articleImage</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.articleImage), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailLike</span><span style="color:#24292E;">(articleId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> id, likeNum</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentDetail.likeNum), </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ArticleDetailComments</span><span style="color:#24292E;">(commentList</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []) </span></span>
<span class="line"><span style="color:#24292E;">  ], </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="左和右" tabindex="-1">左和右 <a class="header-anchor" href="#左和右" aria-label="Permalink to &quot;左和右&quot;">​</a></h4><p>整体设置完成后，我们再来看下组件左右的间隔设置。这里主要看 Row 组件下的所有子组件，检查是否需要 Padding 属性。其次判断 Row 子组件是否需要设置左右占比，如果需要则使用到 flex 布局中的 Expanded 组件。比如上面组件中的 ArticleDetailUserInfoBar 需要左右布局设计，因此根据规则我们看下 ArticleDetailUserInfoBar 的代码逻辑。具体代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.white, </span></span>
<span class="line"><span style="color:#E1E4E8;">    padding</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EdgeInsets</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">), </span></span>
<span class="line"><span style="color:#E1E4E8;">    child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Row</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      mainAxisAlignment</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MainAxisAlignment</span><span style="color:#E1E4E8;">.spaceBetween, </span></span>
<span class="line"><span style="color:#E1E4E8;">      children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[ </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Expanded</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          flex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Row</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Expanded</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          flex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Row</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">      ], </span></span>
<span class="line"><span style="color:#E1E4E8;">    ), </span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.white, </span></span>
<span class="line"><span style="color:#24292E;">    padding</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EdgeInsets</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">    child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Row</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      mainAxisAlignment</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MainAxisAlignment</span><span style="color:#24292E;">.spaceBetween, </span></span>
<span class="line"><span style="color:#24292E;">      children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[ </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Expanded</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          flex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Row</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Expanded</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          flex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Row</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">      ], </span></span>
<span class="line"><span style="color:#24292E;">    ), </span></span>
<span class="line"><span style="color:#24292E;">  ); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的代码中可以看到该组件使用 Container 包裹，其次使用了 Row 组件，假设我们 UI 稿中的图 3 部分是左右 4 : 1 布局，因此在代码中第 10 行设置前面组件为 4 ，第 13 行设置后面组件为 1。</p><p>这样就完成了外部组件的设计，以上 6 个组件就可以写一部分伪代码去实现了。外部组件设计完成后，我们开始通过 8 个过程来进行子组件布局设计，对于其中的 8 个过程，并不是每个组件都需要，因此越到根节点布局设计过程会越少。</p><p>根据以上设计原则，我们就实现了帖子详情部分的布局设计。具体代码实现在 github 源码中的 pages/article_detail/index.dart 中。接下来我将用上面的原则来设计我们 Two You Friend App 的&quot;客人态主页&quot;页面。</p><h3 id="实践应用" tabindex="-1">实践应用 <a class="header-anchor" href="#实践应用" aria-label="Permalink to &quot;实践应用&quot;">​</a></h3><p>我们先来看下我们需要实现的效果，如图 2 所示。</p>`,20),y=s("p",null,"图 2 客人态页面",-1),d=s("p",null,"根据图 2 的界面我们还是先绘制一个组件树，如图 3 所示。",-1),C=p('<p>图 3 客人态组件树设计</p><p>接下来，我们在图 3 的基础上，应用布局设计的 8 个过程，一步步来优化这个组件树。</p><h4 id="竖和横-1" tabindex="-1">竖和横 <a class="header-anchor" href="#竖和横-1" aria-label="Permalink to &quot;竖和横&quot;">​</a></h4><p>竖着来看四个组件分别为 guest 的 Column 子组件，因此需要标记为 Column。然后再横着看每个子组件：</p><ul><li><p>guest_header，包含两部分左边为 user_info 组件（其中又包含 Image 和 Text），右边为 Icon 组件；</p></li><li><p>Divider，是一条分割线；</p></li><li><p>guest_bar，包含了三个并列的组件，分别是 Icon、Icon 和 Text；</p></li><li><p>content_list，这个应用 article_card 子组件即可，该组件已经在前面介绍过具体设计。</p></li></ul><p>分析完后，我们将会得到图 4 组件树。</p>',6),F=p('<p>图 4 组件树+布局设计</p><p>从图 4 我们可以看到，在组件与组件之间增加了布局组件的应用 Column 、Row 和 Expanded。</p><h4 id="高和宽-1" tabindex="-1">高和宽 <a class="header-anchor" href="#高和宽-1" aria-label="Permalink to &quot;高和宽&quot;">​</a></h4><p>上面组件中，有两个组件是需要设置的，一个是 Divider ，一个是 content_list 。后者需要设置的目的是，因为列表组件超出会引起布局异常。因此 content_list 是需要使用 Expanded 来包裹，这部分可以不体现在界面中。</p><h4 id="上和下-1" tabindex="-1">上和下 <a class="header-anchor" href="#上和下-1" aria-label="Permalink to &quot;上和下&quot;">​</a></h4><p>由于图 2 这里就没有需要设置上下的间隔，因此组件图也不需要修改。这里主要看每个 Column 组件下的子节点。</p><h4 id="左和右-1" tabindex="-1">左和右 <a class="header-anchor" href="#左和右-1" aria-label="Permalink to &quot;左和右&quot;">​</a></h4><p>根据这个规则，我们看下每个 Row 组件下的子节点之间是否需要设置 Padding 。根据 UI 稿分析，我们可以了解到 user_info 和 guest_bar 组件的子组件都需要设置左右填充，因此在图 2 基础上，我们增加 Padding 布局设计，并重新绘制组件图，可以最终得到图 5 的一个组件+布局的设计结果。</p>',8),h=s("p",null,"图 5 组件树+布局设计结果",-1),u=s("p",null,"在将组件树和布局设计完成后，我们再去进行组件的代码编写，这部分代码大家可以前往 github 的源码的 pages/user_page/guest.dart 文件中查看，具体的代码比较相似，这里就不过多介绍了。",-1),g=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),D=s("p",null,'本课时介绍了几个常用的布局组件和布局设计的思想（8 个过程），最后通过实现"客人态主页"来实践组件树+布局的设计思想。相关页面的知识点就介绍完了，接下来我会在源码中更新其他界面内容，对于比较核心的一些知识点我们还会在 18 课时中介绍，其他重复知识点，就不再介绍了。',-1),A=s("p",null,"下一课时我们将带着现有的 Two You Friend App 代码，教大家如何打包 Android 和 iOS 发布包。",-1),_=s("p",null,[s("a",{href:"https://github.com/love-flutter/flutter-column",target:"_blank",rel:"noreferrer"},"点击此链接查看本课时源码")],-1);function m(B,I,f,k,b,x){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/3B/70/CgqCHl8j_LCAP9HUAAHcncNZZmY563.png"}),n(),i,l(a,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/3B/66/Ciqc1F8kAQiAQlZeAAyBiY_2das872.png"}),n(),y,d,l(a,{alt:"3.png",src:"https://s0.lgstatic.com/i/image/M00/3B/72/CgqCHl8kARSAEVsNAAnCRb3Xg8U183.png"}),n(),C,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/3B/70/CgqCHl8j_UCAYzQpAAC8p58g-Ys713.png"}),n(),F,l(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/3B/70/CgqCHl8j_YeAGTGoAADPvQkoceM879.png"}),n(),h,u,g,D,A,_])}const T=o(r,[["render",m]]);export{P as __pageData,T as default};
