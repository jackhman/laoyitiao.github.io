import{_ as l,j as o,o as t,g as i,k as n,h as a,s,Q as e}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"16配置方案：如何设计分布式环境下的配置中心解决方案？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4761) 16  配置方案：如何设计分布式环境下的配置中心解决方案？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4761) 16  配置方案：如何设计分布式环境下的配置中心解决方案？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4761) 16  配置方案：如何设计分布式环境下的配置中心解决方案？.md"},c=s("h1",{id:"_16配置方案-如何设计分布式环境下的配置中心解决方案",tabindex:"-1"},[a("16配置方案：如何设计分布式环境下的配置中心解决方案？ "),s("a",{class:"header-anchor",href:"#_16配置方案-如何设计分布式环境下的配置中心解决方案","aria-label":'Permalink to "16配置方案：如何设计分布式环境下的配置中心解决方案？"'},"​")],-1),d=s("p",null,"从今天开始，我们进入到配置中心的讨论。在微服务架构中，面对分散在各个服务、各个环境中的各种配置信息，配置中心是必备组件之一。Spring Cloud 中也专门提供了一个 Spring Cloud Config 框架来实现分布式配置中心。在引入这个框架之前，今天我们将先给出分布式配置的基本模型，并基于 Spring Boot 分析配置体系。",-1),g=s("h3",{id:"配置中心基本模型",tabindex:"-1"},[a("配置中心基本模型 "),s("a",{class:"header-anchor",href:"#配置中心基本模型","aria-label":'Permalink to "配置中心基本模型"'},"​")],-1),E=s("p",null,"在《追本溯源：究竟什么样的架构才是微服务架构？》中我们已经提到，微服务架构对于配置中心的需求一方面来自服务的数量。在传统的单块系统中，对于配置信息的管理，往往倾向于把所有配置项跟源代码一起放在代码仓库中，这样比较简单，在确保配置信息安全性的同时，往往也可以运行得很好。但在微服务架构中，如果这样做，势必会导致很多配置信息重复出现在不同的服务中，造成浪费且增加维护成本。",-1),h=s("p",null,"另一方面，配置中心的需求来自配置信息的分散性。可以想象，在一个微服务系统中，势必存在多个服务，而这些服务一般都会存在开发环境、测试环境、预发布环境、生产环境等多套环境。针对不同的环境，我们都会采用一套不同的配置体系。那么如何保证多个环境中这些配置信息都能在各个服务实例中进行实时的同步更新呢？这就需要引入集中式配置管理的设计思想，如下图所示：",-1),u=s("p",null,"集中式配置中心示例图",-1),y=s("p",null,"在上图中，可以看到开发、测试和生产等不同环境的配置信息统一保存在一个配置中心中。而每个环境都构成了一个分布式集群，我们也需要保证每个集群中所有服务内部保存的同一份配置信息能够得到同步的更新。",-1),_=s("p",null,[a("考虑到服务的数量和配置信息的"),s("strong",null,"分散性"),a("，一般都需要引入配置中心的设计思想和相关工具。每一个微服务系统都应该有一个配置中心，而所有微服务中所使用到的配置信息都应该维护在配置中心中。对于配置中心的组成结构，我们可以做一层抽象，如下图所示：")],-1),m=e('<p>配置中心组成结构</p><p>可以看到，对于一个典型的配置中心而言，存在两个组成部分，即<strong>配置服务器</strong> 和<strong>配置仓库</strong>。</p><p>配置服务器的核心作用就是对接来自各个微服务的配置信息请求，这些微服务会通过配置服务器提供的统一接口获取存储在配置中心中的所需配置信息。因此，配置服务器也是作为独立的微服务而存在。对于配置服务器而言，一方面需要确保对配置中心中所存储的各种配置信息进行<strong>统一维护；<strong>另一方面，也需要提供一种</strong>通知机制</strong> ，确保配置信息变化之后能够告知各个微服务，以便各个微服务及时更新本地服务中的配置数据。后者实际上跟《服务治理：如何正确理解服务治理解决方案？》中介绍的服务治理中<strong>基于轮询或监听机制的实现方式</strong>类似，只不过注册中心处理的是服务实例信息，而配置中心处理的是各种配置信息。</p><p>配置服务器可以独立完成配置信息的<strong>存储和维护</strong> 工作，但也可以把这部分工作剥离出来放到单独的一个媒介中，这个媒介就是配置仓库。请注意，配置仓库并不是必备的，我们完全可以依托配置服务器自身的文件系统来实现配置信息的存储。但构建独立配置仓库的主要优势在于能够把<strong>配置存储过程进行抽象</strong>，从而支持 SVN、Gitlab 等具备版本控制功能的多种第三方工具，以及自建一个具有持久化或内存存储功能的存储媒介。</p><p>构建一个完整的配置中心并不简单，需要具备很多功能特性。首当其冲的就是隔离性，这里的隔离性指的是不同环境下配置信息之间应该是不会相互混淆的，例如测试环境的配置显然不应该作用于生产环境。然后，我们也需要有一种高效的机制来确保配置中心中的配置信息一旦有任何变化，能够及时通知到各个微服务，这也是<strong>配置一致性</strong>的一种表现。</p><h3 id="配置中心实现工具" tabindex="-1">配置中心实现工具 <a class="header-anchor" href="#配置中心实现工具" aria-label="Permalink to &quot;配置中心实现工具&quot;">​</a></h3><p>基于配置中心的实现需求，业界存在一批典型的分布式配置中心实现工具。这里列举部分知名的开源工具并给出了相应的特性描述。</p><p>首先是两款比较典型的<strong>配置中心实现工具</strong> ，一款是<strong>Etcd</strong> ，它是一个轻量级分布式 Key-Value 对数据库，实现了数据更新、目录监听、分布式锁等功能特性。而<strong>Consul</strong>是一款由 Google 提供的开源框架，内置了服务注册与发现框架以及分布一致性协议实现机制，既可以用作配置中心，也可以用于构建注册中心。</p><p>在国产软件中，<strong>Disconf</strong>是由百度开源的一个分布式配置管理工具，与 Spring 框架有很好的集成，在使用上也提供了友好的 Web 管理界面。从实现机制上讲，Disconf 把配置信息都存储在MySQL中，并基于 Zookeeper 提供的监听机制实现数据的实时推送。而 Diamond 则由阿里巴巴提供，同样把配置数据存储在 MySQL 上，但在获取配置数据时不是使用的推送模式，而是每隔一段时间进行全量数据的拉取，实现过程比较简单。相较 Disconf 同时提供的基于配置文件和 Key-Value 对的数据管理模式，Diamond 只支持 Key-Value 对结构的数据。</p><p>讲到配置中心，就不得不提到<strong>Zookeeper</strong>。Zookeeper 是一种分布式协调工具，它对每个节点都可以设置监听器 Watcher。节点监听机制可以用来实现实时感知，即当某一个节点的信息有任何变动时，所有监听该节点的其他节点都可以实时获取通知，从而做出响应。对于配置中心而言，所有服务就是 Zookeeper 的客户端，这些服务通过对包含配置信息的 Zookeeper 节点进行监听就能获取配置信息更新内容。基于 Zookeeper 实现配置中心的示意图如下所示，可以看到这个过程本质上就是对 Zookeeper 节点和监听器的合理利用。</p>',10),v=e(`<p>Zookeeper 实现配置中心示例图</p><p>最后要介绍的配置中心实现工具是 Spring 家族中的<strong>Spring Cloud Config</strong>。从设计思路上讲，Spring Cloud Config 与 Zookeeper 完全不同。Zookeeper 是把配置信息保存在其内部的节点上，这些节点本质上就是操作系统的文件系统。而 Spring Cloud Config 同样可以将配置信息保存在文件系统中，但更多的场景是推荐使用 Git 等配置仓库来存储配置信息。在关键的配置变化通知机制上，Zookeeper 依赖其变更事件的发送和 Watcher 机制来通知客户端；而 Spring Cloud Config 则会发送事件到 Spring Cloud Bus 消息总线，然后由消息总线通知相关的服务。</p><p>显然，不同的工具具有不同的设计原理和实现方式，在本课程的后续内容中，我们会基于 Spring Cloud Config 讨论配置中心应用方式和实现原理。而在此之前，我们有必要对 Spring Boot 中的配置体系做一些介绍。</p><h3 id="spring-boot-中的配置体系" tabindex="-1">Spring Boot 中的配置体系 <a class="header-anchor" href="#spring-boot-中的配置体系" aria-label="Permalink to &quot;Spring Boot 中的配置体系&quot;">​</a></h3><p>我们知道 Spring Boot 是 Spring Cloud 构建单个微服务的基础，所以但凡涉及服务配置，最终也是通过 Spring Boot 中的配置体系进行承载。而 Spring Boot 的配置体系有其自身的特点，我们来看一下。</p><p>在 Spring Boot 中，对配置文件的命名是有一定规范的，引入了 Label 和 Profile 概念指定配置信息的版本以及运行环境。其中 Label 表示配置版本控制信息，而 Profile 则用来指定该配置文件所对应的环境，例如分别使用 dev、prod、test 来对应开发、生产和测试环境。当然，我们也可以根据需要自定义各种 Profile。</p><p>Spring Boot 中配置文件的格式有两种，分别是 .properties 格式和 .yml 格式。结合 Label 和 Profile 概念和不同的文件格式，如下所示的配置文件在命名上都是合理的：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">/{application}.yml</span></span>
<span class="line"><span style="color:#E1E4E8;">/{application}-{profile}.yml</span></span>
<span class="line"><span style="color:#E1E4E8;">/{label}/{application}-{profile}.yml</span></span>
<span class="line"><span style="color:#E1E4E8;">/{application}-{profile}.properties</span></span>
<span class="line"><span style="color:#E1E4E8;">/{label}/{application}-{profile}.properties</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">/{application}.yml</span></span>
<span class="line"><span style="color:#24292E;">/{application}-{profile}.yml</span></span>
<span class="line"><span style="color:#24292E;">/{label}/{application}-{profile}.yml</span></span>
<span class="line"><span style="color:#24292E;">/{application}-{profile}.properties</span></span>
<span class="line"><span style="color:#24292E;">/{label}/{application}-{profile}.properties</span></span></code></pre></div><p>.yml 文件中所使用的语法和其他高级语言类似，特别适合用来表达或编辑数据结构和各种配置文件。以常见的数据源配置为例，如果采用 .yml 文件则可能是如下所示的配置效果。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">datasource:</span></span>
<span class="line"><span style="color:#E1E4E8;">	driverClassName: com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">	url: jdbc:mysql://localhost/springhealth</span></span>
<span class="line"><span style="color:#E1E4E8;">    username: root</span></span>
<span class="line"><span style="color:#E1E4E8;">    password: root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">datasource:</span></span>
<span class="line"><span style="color:#24292E;">	driverClassName: com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">	url: jdbc:mysql://localhost/springhealth</span></span>
<span class="line"><span style="color:#24292E;">    username: root</span></span>
<span class="line"><span style="color:#24292E;">    password: root</span></span></code></pre></div><p>而如果采用 .propertie 配置文件，那么上述配置信息将表示为如下的形式：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.url=jdbc:mysql://localhost/springhealth</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.username=root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.password=root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.url=jdbc:mysql://localhost/springhealth</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.username=root</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.password=root</span></span></code></pre></div><p>显然，类似这样的数据源通常会根据环境的不同而有很多套配置。假设我们存在如下所示的配置文件集合，注意这里有一个全局的 application.properties 配置文件以及多个局部的 Profile 配置文件。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">application.properties</span></span>
<span class="line"><span style="color:#E1E4E8;">application-uat.properties</span></span>
<span class="line"><span style="color:#E1E4E8;">application-test.properties</span></span>
<span class="line"><span style="color:#E1E4E8;">application-prod.properties</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">application.properties</span></span>
<span class="line"><span style="color:#24292E;">application-uat.properties</span></span>
<span class="line"><span style="color:#24292E;">application-test.properties</span></span>
<span class="line"><span style="color:#24292E;">application-prod.properties</span></span></code></pre></div><p>那么，如何指定当前使用具体哪一套配置信息呢？在 Spring Boot 中，我们可以在主 application.properties 中使用如下的配置方式来激活当前所使用的 Profile：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.profiles.active = test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.profiles.active = test</span></span></code></pre></div><p>上述配置项意味着系统当前会读取 application-test.properties 文件中的配置信息。同样，如果使用 .yml 文件，则可以使用如下所示的配置方法。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring:</span></span>
<span class="line"><span style="color:#E1E4E8;">  profiles:</span></span>
<span class="line"><span style="color:#E1E4E8;">    active: test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring:</span></span>
<span class="line"><span style="color:#24292E;">  profiles:</span></span>
<span class="line"><span style="color:#24292E;">    active: test</span></span></code></pre></div><p>事实上，我们也可以同时激活几个 Profile，这完全取决于你对系统配置的需求和维度。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.profiles.active: test, myprofile1, myprofile2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.profiles.active: test, myprofile1, myprofile2</span></span></code></pre></div><p>当然，如果你想把所有的 Profile 配置信息只保存在一个文件中而不是分散在多个配置文件中， Spring Boot 也是支持的，需要做的事情只是对这些信息按 Profile 进行分段组织，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring: </span></span>
<span class="line"><span style="color:#E1E4E8;">    profiles: test</span></span>
<span class="line"><span style="color:#E1E4E8;">    #test环境相关配置信息</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring: </span></span>
<span class="line"><span style="color:#E1E4E8;">    profiles: prod</span></span>
<span class="line"><span style="color:#E1E4E8;">    #prod环境相关配置信息</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring: </span></span>
<span class="line"><span style="color:#24292E;">    profiles: test</span></span>
<span class="line"><span style="color:#24292E;">    #test环境相关配置信息</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring: </span></span>
<span class="line"><span style="color:#24292E;">    profiles: prod</span></span>
<span class="line"><span style="color:#24292E;">    #prod环境相关配置信息</span></span></code></pre></div><p>尽管上述方法是有效的，但在本课程中，还是推荐你按多个配置文件的组织方法管理各个 Profile 配置信息，这样不容易混淆和出错。</p><p>最后，如果我们不希望在全局配置文件中静态指定所需要激活的 Profile，而是想把这个过程延迟到运行这个服务时，那么可以直接在 java --jar 命令中添加&quot;--spring.profiles.active&quot;参数，如下所示</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java -jar user-service.jar --spring.profiles.active=prod</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java -jar user-service.jar --spring.profiles.active=prod</span></span></code></pre></div><p>这种实现方案在通过脚本进行自动化打包和部署的场景下非常有用。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>配置中心是微服务架构中的一个基础组件，而业界关于如何实现配置中心也有一些基本的模型和工具。本课时针对配置中心实现需求梳理了涉及一款配置中心所必须要考虑的数据存储、变更通知等核心问题，并结合业界主流的开源框架做了对比和分析，并最终选择 Spring Cloud 家族中的 Spring Cloud Config 来作为本课程的配置中心实现方案。同时，因为 Spring Cloud Config 依赖于 Spring Boot 中的配置体系，我们也对这个换题做了一些展开。</p><p>这里给你留一道思考题：在配置中心中，如果想要实现配置信息的变更通知，一般有哪些设计和实现的思路？</p><p>接下来，我们就将全面讨论 Spring Cloud Config 框架。我们会分两个课时分别从服务器端和客户端出发对该框架的应用方式和实现原理进行解析。下一课时，我们先来讨论服务器端组件。</p>`,30);function b(f,k,C,S,x,P){const p=o("Image");return t(),i("div",null,[c,d,g,E,h,n(p,{alt:"Lark20201112-150617.png",src:"https://s0.lgstatic.com/i/image/M00/6D/2B/Ciqc1F-s34GAFVJmAAKnrEuvJgc476.png"}),a(),u,y,_,n(p,{alt:"Lark20201112-150624.png",src:"https://s0.lgstatic.com/i/image/M00/6D/2B/Ciqc1F-s342AYo8VAAI3kaXIffk714.png"}),a(),m,n(p,{alt:"Lark20201112-150626.png",src:"https://s0.lgstatic.com/i/image/M00/6D/36/CgqCHl-s356AKZoWAAKFrCEd0Fc666.png"}),a(),v])}const j=l(r,[["render",b]]);export{B as __pageData,j as default};
