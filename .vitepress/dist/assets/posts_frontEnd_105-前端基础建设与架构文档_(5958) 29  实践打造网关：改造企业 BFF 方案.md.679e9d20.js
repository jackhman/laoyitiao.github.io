import{_ as l,j as o,o as e,g as r,k as a,h as p,Q as s}from"./chunks/framework.4e7d56ce.js";const x=JSON.parse('{"title":"29实践打造网关：改造企业BFF方案","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5958) 29  实践打造网关：改造企业 BFF 方案.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5958) 29  实践打造网关：改造企业 BFF 方案.md","lastUpdated":1696417798000}'),t={name:"posts/frontEnd/105-前端基础建设与架构文档/(5958) 29  实践打造网关：改造企业 BFF 方案.md"},c=s('<h1 id="_29实践打造网关-改造企业bff方案" tabindex="-1">29实践打造网关：改造企业BFF方案 <a class="header-anchor" href="#_29实践打造网关-改造企业bff方案" aria-label="Permalink to &quot;29实践打造网关：改造企业BFF方案&quot;">​</a></h1><p>前几讲我们分别介绍了 Node.js 在同构项目以及性能守卫服务中的应用。结合当下热点，这一讲我们继续深入讲解 Node.js 另外一个重要的应用场景：企业级 BFF 网关。</p><p>网关这个话题可以和微服务、Serverless 等概念相结合，想象空间无限大，同时我们又要深入网关实现代码，抽丝剥茧。下面我们就开始今天内容的学习，请你做好准备。</p><h3 id="bff-网关介绍和优缺点梳理" tabindex="-1">BFF 网关介绍和优缺点梳理 <a class="header-anchor" href="#bff-网关介绍和优缺点梳理" aria-label="Permalink to &quot;BFF 网关介绍和优缺点梳理&quot;">​</a></h3><p>首先，我们对 BFF 网关做一个定义。BFF 即 Backend For Frontend，翻译过来就是服务于前端的后端。这个概念最早在<a href="https://samnewman.io/patterns/architectural/bff/?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Pattern: Backends For Frontends</a>中提出，它不是一种技术，而是一种<strong>逻辑分层</strong> ：在后端普遍采用微服务的技术背景下，<strong>作为适配层能够更好地为前端服务，而传统业务后端只需要关注自己的微服务</strong>即可。</p><p>我们结合下图进行拆解：</p>',6),E=s(`<p>BFF 网关拆解图</p><p>如图所示，我们把用户体验适配和 API 网关聚合层合称为广义的 BFF 层，在 BFF 层的上游是各种后端业务微服务，在 BFF 下游就是各端应用。从职责上看，BFF 层向下给端提供 HTTP 接口，向上通过调用 HTTP 或 RPC 获取数据进行加工，最终完成整个 BFF 层的闭环。</p><p>对比传统的架构，我们可以得出 BFF 层设计的优势：</p><ul><li><p><strong>降低沟通成本</strong>，领域模型与页面数据更好地解耦；</p></li><li><p>提供<strong>更好的用户体验</strong>，比如可以做到多端应用适配，根据不同端，提供更精简的数据。</p></li></ul><p>但是 BFF 层需要谁来开发呢？这就引出了 BFF 的一些痛点：</p><ul><li><p><strong>需要解决分工问题</strong>，作为衔接前与后的环节，需要界定前后端职责，明确开发归属；</p></li><li><p><strong>链路复杂</strong>，引入 BFF 层之后，流程变得更加烦琐；</p></li><li><p><strong>资源浪费</strong>，BFF 层会带来一定额外资源的占用，需要有较好的弹性伸缩扩容机制。</p></li></ul><p>通过分析 BFF 层的优缺点，我们可以明确打造一个 BFF 网关需要考虑的问题。而对于前端开发者来说，使用 Node.js 实现一个 BFF 网关则是一项当仁不让的工作。我们继续往下看。</p><h3 id="打造-bff-网关需要考虑的问题" tabindex="-1">打造 BFF 网关需要考虑的问题 <a class="header-anchor" href="#打造-bff-网关需要考虑的问题" aria-label="Permalink to &quot;打造 BFF 网关需要考虑的问题&quot;">​</a></h3><h4 id="数据处理" tabindex="-1">数据处理 <a class="header-anchor" href="#数据处理" aria-label="Permalink to &quot;数据处理&quot;">​</a></h4><p>这里的数据处理，主要包括了：</p><ul><li><p>数据聚合和裁剪</p></li><li><p>序列化格式转换</p></li><li><p>协议转换</p></li><li><p>Node.js 调用 RPC</p></li></ul><p>在微服务体系结构中，各个微服务的数据实体可能并不统一和规范，如果没有 BFF 层的统一处理，在端上进行不同数据格式的聚合会是一件非常痛苦的事情。因此，数据裁剪和聚合对于 BFF 网关来说就变得尤为重要了。</p><p>同时，<strong>不同端可能也会需要不同的数据序列化格式</strong>。比如，某个微服务使用 JSON，而某个客户只能使用 XML，那么 JSON 转换为 XML 的工作，也应当合理地在 BFF 网关层实现。</p><p>再比如微服务架构一般允许多语言协议传输，比如客户端需要通过 HTTP REST 进行所有的通信，而某个微服务内部使用了 gRPC 或 GraphQL，其中的语言协议转换，也需要在 BFF 网关层解决。</p><p>还需要你了解的是，在传统开发模式中，前端通过 Node.js 实现 BFF 的模式：前端请求 BFF 提供的接口，BFF 直接通过 HTTP Client 或者 cURL 方式透传给微服务------这种模式有其优势，但是可以做到精益求精。相比 BFF 不做任何逻辑处理，<strong>Node.js 是一个 Proxy，我们可以思考如何让 Node.js 调用 RPC</strong>，以最大限度地发挥 BFF 层能力。</p><h4 id="流量处理" tabindex="-1">流量处理 <a class="header-anchor" href="#流量处理" aria-label="Permalink to &quot;流量处理&quot;">​</a></h4><p>这里的流量处理主要是指：</p><ul><li><p>请求分发能力、代理能力；</p></li><li><p>可用性保障。</p></li></ul><p>在 BFF 层网关中，我们需要执行一些代理操作，比如将请求路由到特定服务。<strong>在 Node.js 中，我们可以使用</strong> <code>http-proxy</code>来简单代理特定服务。</p><p>我们需要考虑<strong>网关层如何维护分发路由</strong>这个关键问题。简单来说，我们可以 hard coding 写在代码里，同时也可以实现网关层的服务发现。比如，在 URL 规范化的基础上，网关层进行请求匹配时，可以只根据 URL 内容对应不同的 namespace 进而对应到不同的微服务。当然也可以使用中心化配置，通过配置来维护网关层路由分发。</p><p>除此之外，网关层也要考虑条件路由，即对具有特定内容（或者一定流量比例）的请求进行筛选并分发到特定实例组上，这种条件路由能力是实现灰度发布、蓝绿发布、AB Test 等功能的基础。</p><p>另外，BFF 网关直面用户，因此这一层也需要有良好的限速、隔离、熔断降级、负载均衡和缓存能力。</p><p>关于这些内容，我们会在后半部分代码环节中进一步体现。</p><h4 id="安全问题" tabindex="-1">安全问题 <a class="header-anchor" href="#安全问题" aria-label="Permalink to &quot;安全问题&quot;">​</a></h4><p>鉴于 BFF 层承上启下的位置，BFF 要考虑数据流向的安全性，需要完成必要的校验逻辑。其原则是：</p><ul><li><p>BFF 层不需要完成全部的校验逻辑，部分业务校验应该留在微服务中完成；</p></li><li><p>BFF 需要完成必要的检查，比如请求头检查和必要的数据消毒；</p></li><li><p>合理使用 Content-Security-Policy；</p></li><li><p>使用 HTTPS/HSTS；</p></li><li><p>设置监控报警以及调用链追踪能力。</p></li></ul><p>同时，在使用 Node.js 做 BFF 层时，需要开发者<strong>时刻注意依赖包的安全性</strong> ，可以考虑在 CI/CD 环节使用<code>nsp</code>、<code>npm audit</code>等工具进行安全审计。</p><h4 id="权限与校验设计" tabindex="-1">权限与校验设计 <a class="header-anchor" href="#权限与校验设计" aria-label="Permalink to &quot;权限与校验设计&quot;">​</a></h4><p>在上面提到的安全问题中，一个关键的设计就是 BFF 层的用户权限校验。这里我们单独展开说明。</p><p>对于大多数微服务基础架构来说，需要将身份验证和权限校验等共享逻辑放入网关层，这样不仅能够帮助后端开发者缩小服务的体积，也能让后端开发者更专注于自身领域。</p><p>在网关中，一般我们需要支持基于 cookie 或 token 的身份验证。关于身份验证的话题这里我们不详细展开，值得一提的是，需要开发者关注 SSO 单点登录的设计。</p><p>关于权限问题，一般主流采用 ACL 或 RBAC 的方式，这就需要开发者系统学习权限设计知识。简单来说，<strong>ACL 即访问控制列表，它的核心在于用户直接和权限挂钩。RBAC 的核心是用户只和角色关联，而角色对应了权限</strong>，这样设计的优势在于：对用户而言，只需分配角色即可以实现权限管理，而某角色可以拥有各种各样的权限并可以继承。</p><p>ACL 和 RBAC 相比，缺点在于由于用户和权限直接挂钩，导致在授予时的复杂性；虽然可以利用组（角色）来简化这个复杂性，但 RBAC 仍然会导致系统不好理解，而且在判断用户是否有该权限时比较困难，一定程度上影响了效率。</p><p>总之，设计一个良好的 BFF 网关，要求开发者具有较强的综合能力。下面，我们就来实现一个精简的网关系统，该网关只保留了最核心的能力，以性能为重要目标，同时支持能力扩展。</p><h3 id="实现一个-lucas-gateway" tabindex="-1">实现一个 lucas-gateway <a class="header-anchor" href="#实现一个-lucas-gateway" aria-label="Permalink to &quot;实现一个 lucas-gateway&quot;">​</a></h3><p>如何设计一个扩展性良好的 BFF 层，以灵活支持上述需要考量的问题呢？我们来看几个关键的思路。</p><ul><li><p><strong>插件化</strong>：一个良好的 BFF 层设计可以内置或可插拔多种插件，比如 Logger 等，也可以接受第三方插件。</p></li><li><p><strong>中间件化</strong>：SSO、限流、熔断等策略可以通过中间件形式实现，类似插件，中间件也可以进行定制和扩展。</p></li></ul><p>下面我们就实战实现一个 BFF 网关，请随我一起深入代码。该实现代码我主要 fork 了<a href="https://github.com/jkyberneees/fast-gateway?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">jkyberneees 的 fast-gateway</a>，源代码放在了：<a href="https://github.com/HOUCe?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">HOUCe</a>/<a href="https://github.com/HOUCe/fast-gateway?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">fast-gateway</a>当中。</p><p>我们先看看开发这个网关的必要依赖。</p><ul><li><p><a href="https://www.npmjs.com/package/fast-proxy?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">fast-proxy</a>：支持 HTTP、HTTPS、HTTP2 三种协议，可以高性能完成请求的转发、代理。</p></li><li><p><a href="https://www.npmjs.com/package/@polka/send-type?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">@polka/send-type</a>：处理 HTTP 响应的工具函数。</p></li><li><p><a href="https://www.npmjs.com/package/http-cache-middleware?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http-cache-middleware</a>：是一个高性能的 HTTP 缓存中间件。</p></li><li><p><a href="https://www.npmjs.com/package/restana?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">restana</a>：一个极简的 REST 风格的 Node.js 框架。</p></li></ul><p>我们的设计主要从</p><ul><li><p>基本反代理</p></li><li><p>中间件</p></li><li><p>缓存</p></li><li><p>Hooks</p></li></ul><p>几个方向展开。</p><h4 id="基本反代理" tabindex="-1">基本反代理 <a class="header-anchor" href="#基本反代理" aria-label="Permalink to &quot;基本反代理&quot;">​</a></h4><p>设计使用方式如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> gateway </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;lucas-gateway&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gateway</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [{</span></span>
<span class="line"><span style="color:#E1E4E8;">    prefix</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/service&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    target</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://127.0.0.1:3000&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> gateway </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lucas-gateway&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gateway</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [{</span></span>
<span class="line"><span style="color:#24292E;">    prefix</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/service&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    target</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://127.0.0.1:3000&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">)</span></span></code></pre></div><p>网关暴露出<code>gateway</code>方法进行请求反向代理。如上代码，我们将 prefix 为<code>/service</code>的请求反向代理到<code>http://127.0.0.1:3000</code>地址。我们来看看<code>gateway</code>核心函数的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> proxyFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./lib/proxy-factory&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 一个简易的高性能 Node.js 框架</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> restana </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;restana&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 默认的代理 handler</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> defaultProxyHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (req, res, url, proxy, proxyOpts) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;">(req, res, url, proxyOpts)</span></span>
<span class="line"><span style="color:#6A737D;">// 默认支持的方法，包括 [&#39;get&#39;, &#39;delete&#39;, &#39;put&#39;, &#39;patch&#39;, &#39;post&#39;, &#39;head&#39;, &#39;options&#39;, &#39;trace&#39;]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> DEFAULT_METHODS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;restana/libs/methods&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(method </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> method </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;all&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 一个简易的 HTTP 响应库</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> send </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@polka/send-type&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 支持 HTTP 代理</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> PROXY_TYPES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> gateway </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (opts) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    middlewares</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    pathRegex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/*&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, opts)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 运行开发者传一个 server 实例，默认则使用 restana server</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> opts.server </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">restana</span><span style="color:#E1E4E8;">(opts.restana)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 注册中间件</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts.middlewares.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(middleware </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    server.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(middleware)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一个简易的接口 \`/services.json\`，该接口罗列出网关代理的所有请求和相应信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> services </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> opts.routes.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(route </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">    prefix</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> route.prefix,</span></span>
<span class="line"><span style="color:#E1E4E8;">    docs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> route.docs</span></span>
<span class="line"><span style="color:#E1E4E8;">  }))</span></span>
<span class="line"><span style="color:#E1E4E8;">  server.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/services.json&#39;</span><span style="color:#E1E4E8;">, (req, res) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(res, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, services)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 路由处理</span></span>
<span class="line"><span style="color:#E1E4E8;">  opts.routes.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(route </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (undefined </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> route.prefixRewrite) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      route.prefixRewrite </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { proxyType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> route</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">PROXY_TYPES.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(proxyType)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Unsupported proxy type, expecting one of &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> PROXY_TYPES.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载默认的 Hooks</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { onRequestNoOp, onResponse } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./lib/default-hooks&#39;</span><span style="color:#E1E4E8;">)[proxyType]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载自定义的 Hooks，允许开发者拦截并响应自己的 Hooks</span></span>
<span class="line"><span style="color:#E1E4E8;">    route.hooks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> route.hooks </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    route.hooks.onRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> route.hooks.onRequest </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> onRequestNoOp</span></span>
<span class="line"><span style="color:#E1E4E8;">    route.hooks.onResponse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> route.hooks.onResponse </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> onResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载中间件，允许开发者自己传入自定义中间件</span></span>
<span class="line"><span style="color:#E1E4E8;">    route.middlewares </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> route.middlewares </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 支持正则形式的 route path</span></span>
<span class="line"><span style="color:#E1E4E8;">    route.pathRegex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> undefined </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> route.pathRegex </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> opts.pathRegex </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(route.pathRegex)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用 proxyFactory 创建一个 proxy 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxyFactory</span><span style="color:#E1E4E8;">({ opts, route, proxyType })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 允许开发者自定义传入一个 proxyHandler，否则使用默认的 defaultProxyHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> proxyHandler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> route.proxyHandler </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> defaultProxyHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置超时时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    route.timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> route.timeout </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> opts.timeout</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> route.methods </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> DEFAULT_METHODS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// path</span></span>
<span class="line"><span style="color:#E1E4E8;">      route.prefix </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> route.pathRegex,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// route middlewares</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...route.middlewares,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 相关 handler 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">(route, proxy, proxyHandler)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(method </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      method </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (server[method]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        server[method].</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(server, args)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> server</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (route, proxy, proxyHandler) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> (req, res, next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 支持 urlRewrite 配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    req.url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> route.urlRewrite</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> route.</span><span style="color:#B392F0;">urlRewrite</span><span style="color:#E1E4E8;">(req)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> req.url.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(route.prefix, route.prefixRewrite)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> shouldAbortProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> await route.hooks.</span><span style="color:#B392F0;">onRequest</span><span style="color:#E1E4E8;">(req, res)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果 onRequest hooks 返回一个 falsy 值，则执行 proxyHandler，否则停止代理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">shouldAbortProxy) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> proxyOpts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        request</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          timeout</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> req.timeout </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> route.timeout</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        queryString</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> req.query</span></span>
<span class="line"><span style="color:#E1E4E8;">      }, route.hooks)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">proxyHandler</span><span style="color:#E1E4E8;">(req, res, req.url, proxy, proxyOpts)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gateway</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> proxyFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./lib/proxy-factory&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 一个简易的高性能 Node.js 框架</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> restana </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;restana&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 默认的代理 handler</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> defaultProxyHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (req, res, url, proxy, proxyOpts) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;">(req, res, url, proxyOpts)</span></span>
<span class="line"><span style="color:#6A737D;">// 默认支持的方法，包括 [&#39;get&#39;, &#39;delete&#39;, &#39;put&#39;, &#39;patch&#39;, &#39;post&#39;, &#39;head&#39;, &#39;options&#39;, &#39;trace&#39;]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> DEFAULT_METHODS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;restana/libs/methods&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(method </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> method </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;all&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 一个简易的 HTTP 响应库</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> send </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@polka/send-type&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 支持 HTTP 代理</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> PROXY_TYPES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;http&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> gateway </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (opts) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  opts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    middlewares</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    pathRegex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/*&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }, opts)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 运行开发者传一个 server 实例，默认则使用 restana server</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opts.server </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">restana</span><span style="color:#24292E;">(opts.restana)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 注册中间件</span></span>
<span class="line"><span style="color:#24292E;">  opts.middlewares.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(middleware </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    server.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(middleware)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一个简易的接口 \`/services.json\`，该接口罗列出网关代理的所有请求和相应信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> services </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opts.routes.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(route </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">    prefix</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> route.prefix,</span></span>
<span class="line"><span style="color:#24292E;">    docs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> route.docs</span></span>
<span class="line"><span style="color:#24292E;">  }))</span></span>
<span class="line"><span style="color:#24292E;">  server.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/services.json&#39;</span><span style="color:#24292E;">, (req, res) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(res, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, services)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 路由处理</span></span>
<span class="line"><span style="color:#24292E;">  opts.routes.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(route </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (undefined </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> route.prefixRewrite) {</span></span>
<span class="line"><span style="color:#24292E;">      route.prefixRewrite </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { proxyType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http&#39;</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> route</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">PROXY_TYPES.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(proxyType)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Unsupported proxy type, expecting one of &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> PROXY_TYPES.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载默认的 Hooks</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { onRequestNoOp, onResponse } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./lib/default-hooks&#39;</span><span style="color:#24292E;">)[proxyType]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载自定义的 Hooks，允许开发者拦截并响应自己的 Hooks</span></span>
<span class="line"><span style="color:#24292E;">    route.hooks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> route.hooks </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    route.hooks.onRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> route.hooks.onRequest </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> onRequestNoOp</span></span>
<span class="line"><span style="color:#24292E;">    route.hooks.onResponse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> route.hooks.onResponse </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> onResponse</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载中间件，允许开发者自己传入自定义中间件</span></span>
<span class="line"><span style="color:#24292E;">    route.middlewares </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> route.middlewares </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 支持正则形式的 route path</span></span>
<span class="line"><span style="color:#24292E;">    route.pathRegex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> undefined </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> route.pathRegex </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> opts.pathRegex </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(route.pathRegex)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 proxyFactory 创建一个 proxy 实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxyFactory</span><span style="color:#24292E;">({ opts, route, proxyType })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 允许开发者自定义传入一个 proxyHandler，否则使用默认的 defaultProxyHandler</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> proxyHandler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> route.proxyHandler </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> defaultProxyHandler</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置超时时间</span></span>
<span class="line"><span style="color:#24292E;">    route.timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> route.timeout </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> opts.timeout</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> route.methods </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> DEFAULT_METHODS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// path</span></span>
<span class="line"><span style="color:#24292E;">      route.prefix </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> route.pathRegex,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// route middlewares</span></span>
<span class="line"><span style="color:#24292E;">      ...route.middlewares,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 相关 handler 函数</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(route, proxy, proxyHandler)</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">    methods.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(method </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (server[method]) {</span></span>
<span class="line"><span style="color:#24292E;">        server[method].</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(server, args)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> server</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (route, proxy, proxyHandler) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> (req, res, next) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 支持 urlRewrite 配置</span></span>
<span class="line"><span style="color:#24292E;">    req.url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> route.urlRewrite</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> route.</span><span style="color:#6F42C1;">urlRewrite</span><span style="color:#24292E;">(req)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> req.url.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(route.prefix, route.prefixRewrite)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> shouldAbortProxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> await route.hooks.</span><span style="color:#6F42C1;">onRequest</span><span style="color:#24292E;">(req, res)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果 onRequest hooks 返回一个 falsy 值，则执行 proxyHandler，否则停止代理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">shouldAbortProxy) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> proxyOpts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        request</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          timeout</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> req.timeout </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> route.timeout</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        queryString</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> req.query</span></span>
<span class="line"><span style="color:#24292E;">      }, route.hooks)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">proxyHandler</span><span style="color:#24292E;">(req, res, req.url, proxy, proxyOpts)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gateway</span></span></code></pre></div><p>上述代码主要流程并不复杂，我已经加入了相应的注释。<code>gateway</code>函数是整个网关的入口，包含了所有核心流程。这里我们对<code>proxyFactory</code>函数进行简单梳理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> fastProxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fast-proxy&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({ proxyType, opts, route }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  let proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fastProxy</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      base</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> opts.targetOverride </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> route.target,</span></span>
<span class="line"><span style="color:#E1E4E8;">      http2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!!</span><span style="color:#E1E4E8;">route.http2,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...(route.fastProxy)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> fastProxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fast-proxy&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ({ proxyType, opts, route }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  let proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fastProxy</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      base</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> opts.targetOverride </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> route.target,</span></span>
<span class="line"><span style="color:#24292E;">      http2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!!</span><span style="color:#24292E;">route.http2,</span></span>
<span class="line"><span style="color:#24292E;">      ...(route.fastProxy)</span></span>
<span class="line"><span style="color:#24292E;">    }).proxy</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> proxy</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上代码所示，我们使用了<code>fast-proxy</code>库，并支持开发者以<code>fastProxy</code>字段进行对<code>fast-proxy</code>库的配置。具体配置信息你可以参考<code>fast-proxy</code>库，这里我们不再展开。</p><p>其实通过以上代码分析，我们已经把大体流程梳理了一遍。但是上述代码只实现了基础的代理功能，只是网关的一部分能力。接下来，我们从网关扩展层面，继续了解网关的设计和实现。</p><h4 id="中间件" tabindex="-1">中间件 <a class="header-anchor" href="#中间件" aria-label="Permalink to &quot;中间件&quot;">​</a></h4><p>中间件化思想已经渗透到前端编程理念中，开发者颇为受益。中间件能够帮助我们在解耦合的基础上，实现能力扩展。</p><p>我们来看看这个网关的中间件能力，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> rateLimit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express-rate-limit&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> requestIp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;request-ip&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">gateway</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义一个全局中间件</span></span>
<span class="line"><span style="color:#E1E4E8;">  middlewares</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录访问 IP</span></span>
<span class="line"><span style="color:#E1E4E8;">    (req, res, next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      req.ip </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requestIp.</span><span style="color:#B392F0;">getClientIp</span><span style="color:#E1E4E8;">(req)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用 RateLimit 模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">rateLimit</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 1 分钟窗口期</span></span>
<span class="line"><span style="color:#E1E4E8;">      windowMs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 1 minutes</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 在窗口期内，同一个 IP 只允许访问 60 次</span></span>
<span class="line"><span style="color:#E1E4E8;">      max</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      handler</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (req, res) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Too many requests, please try again later.&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">429</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// downstream 服务代理</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [{</span></span>
<span class="line"><span style="color:#E1E4E8;">    prefix</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/public&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    target</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://localhost:3000&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> rateLimit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express-rate-limit&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> requestIp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;request-ip&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">gateway</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义一个全局中间件</span></span>
<span class="line"><span style="color:#24292E;">  middlewares</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记录访问 IP</span></span>
<span class="line"><span style="color:#24292E;">    (req, res, next) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      req.ip </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requestIp.</span><span style="color:#6F42C1;">getClientIp</span><span style="color:#24292E;">(req)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 RateLimit 模块</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rateLimit</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 1 分钟窗口期</span></span>
<span class="line"><span style="color:#24292E;">      windowMs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 1 minutes</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 在窗口期内，同一个 IP 只允许访问 60 次</span></span>
<span class="line"><span style="color:#24292E;">      max</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      handler</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (req, res) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Too many requests, please try again later.&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">429</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// downstream 服务代理</span></span>
<span class="line"><span style="color:#24292E;">  routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [{</span></span>
<span class="line"><span style="color:#24292E;">    prefix</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/public&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    target</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://localhost:3000&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>上面代码中，我们实现了两个中间件。第一个中间通过<a href="https://www.npmjs.com/package/request-ip?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">request-ip</a>这个库获取访问的真实 IP 地址，并将 IP 值挂载在 req 对象上。第二个中间件通过<a href="https://www.npmjs.com/package/express-rate-limit?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">express-rate-limit</a>进行&quot;在窗口期内，同一个 IP 只允许访问 60 次&quot;的限流策略。因为<a href="https://www.npmjs.com/package/express-rate-limit?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">express-rate-limit</a>库默认使用<code>req.ip</code>作为<a href="https://github.com/nfriedly/express-rate-limit/blob/master/lib/express-rate-limit.js#L16?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">keyGenerator</a>，所以我们的第一个中间件将 IP 记录在了<code>req.ip</code>上面。</p><p>这是一个简单的运用中间件实现限流的案例，开发者可以通过自己动手实现，或依赖其他库实现相关策略。</p><h4 id="缓存策略" tabindex="-1">缓存策略 <a class="header-anchor" href="#缓存策略" aria-label="Permalink to &quot;缓存策略&quot;">​</a></h4><p>缓存能够有效提升网关对于请求的处理能力和吞吐量。我们的网关设计支持了多种缓存方案，如下代码是一个使用 Node 内存缓存的案例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用 http-cache-middleware 作为缓存中间件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http-cache-middleware&#39;</span><span style="color:#E1E4E8;">)()</span></span>
<span class="line"><span style="color:#6A737D;">// enable http cache middleware</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> gateway </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fast-gateway&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gateway</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  middlewares</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [cache],</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [...]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用 http-cache-middleware 作为缓存中间件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http-cache-middleware&#39;</span><span style="color:#24292E;">)()</span></span>
<span class="line"><span style="color:#6A737D;">// enable http cache middleware</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> gateway </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fast-gateway&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gateway</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  middlewares</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [cache],</span></span>
<span class="line"><span style="color:#24292E;">  routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [...]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>如果不担心缓存数据的丢失，即缓存数据不需要持久化，且只有一个网关实例，使用内存缓存是一个很好的选择。</p><p>当然，也支持使用 Redis 进行缓存，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 初始化 Redis</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> CacheManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cache-manager&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> redisStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cache-manager-ioredis&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> redisCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CacheManager.</span><span style="color:#B392F0;">caching</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  store</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> redisStore,</span></span>
<span class="line"><span style="color:#E1E4E8;">  db</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;localhost&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6379</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ttl</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 缓存中间件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http-cache-middleware&#39;</span><span style="color:#E1E4E8;">)({</span></span>
<span class="line"><span style="color:#E1E4E8;">  stores</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [redisCache]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> gateway </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fast-gateway&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gateway</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  middlewares</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [cache],</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [...]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 初始化 Redis</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> CacheManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cache-manager&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> redisStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cache-manager-ioredis&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> redisCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheManager.</span><span style="color:#6F42C1;">caching</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  store</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> redisStore,</span></span>
<span class="line"><span style="color:#24292E;">  db</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;localhost&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6379</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  ttl</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// 缓存中间件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http-cache-middleware&#39;</span><span style="color:#24292E;">)({</span></span>
<span class="line"><span style="color:#24292E;">  stores</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [redisCache]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> gateway </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fast-gateway&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gateway</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  middlewares</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [cache],</span></span>
<span class="line"><span style="color:#24292E;">  routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [...]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>在网关的设计中，我们依赖了<a href="https://github.com/jkyberneees/http-cache-middleware?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http-cache-middleware</a>库作为缓存，参考其<a href="http://http-cache-middleware?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">源码</a>，我们可以看到缓存使用了<code>req.method + req.url + cacheAppendKey</code>作为缓存的 key，<code>cacheAppendKey</code>出自<code>req</code>对象，因此开发者可以通过设置<code>req.cacheAppendKey = (req) =&gt; req.user.id</code>的方式，自定义缓存 key。</p><p>当然，我们可以对某个接口 Endpoint 禁用缓存，这也是通过中间件实现的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [{</span></span>
<span class="line"><span style="color:#E1E4E8;">  prefix</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/users&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  target</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://localhost:3000&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  middlewares</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [(req, res, next) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    req.cacheDisabled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }]</span></span>
<span class="line"><span style="color:#E1E4E8;">}]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [{</span></span>
<span class="line"><span style="color:#24292E;">  prefix</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/users&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  target</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://localhost:3000&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  middlewares</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [(req, res, next) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    req.cacheDisabled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }]</span></span>
<span class="line"><span style="color:#24292E;">}]</span></span></code></pre></div><h4 id="hooks-设计" tabindex="-1">Hooks 设计 <a class="header-anchor" href="#hooks-设计" aria-label="Permalink to &quot;Hooks 设计&quot;">​</a></h4><p>有了中间件还不够，我们还可以以 Hooks 的方式，允许开发者介入网关处理流程。比如以下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { multipleHooks } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fg-multiple-hooks&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> hook1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> (req, res) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hook1 with logic 1 called&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回 falsy 值，不会阻断请求处理流程</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> hook2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> (req, res) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hook2 with logic 2 called&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> shouldAbort </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shouldAbort) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;handle a rejected request here&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回 true，则终端处理流程</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> shouldAbort</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">gateway</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [{</span></span>
<span class="line"><span style="color:#E1E4E8;">    prefix</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/service&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    target</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://127.0.0.1:3000&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    hooks</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#6A737D;">// 使用多个 Hooks 函数，处理 onRequest</span></span>
<span class="line"><span style="color:#E1E4E8;">      onRequest</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (req, res) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">multipleHooks</span><span style="color:#E1E4E8;">(req, res, hook1, hook2), </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">rewriteHeaders</span><span style="color:#E1E4E8;"> (handlers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#6A737D;">// 可以在这里设置 response header</span></span>
<span class="line"><span style="color:#E1E4E8;">      	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> headers</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 使用多个 Hooks 函数，处理 onResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">onResponse</span><span style="color:#E1E4E8;"> (req, res, stream) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }]</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(PORT).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(server </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(\`API Gateway listening on \${PORT} port</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { multipleHooks } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fg-multiple-hooks&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> hook1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> (req, res) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hook1 with logic 1 called&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回 falsy 值，不会阻断请求处理流程</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> hook2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> (req, res) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hook2 with logic 2 called&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> shouldAbort </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shouldAbort) {</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;handle a rejected request here&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 返回 true，则终端处理流程</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> shouldAbort</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">gateway</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [{</span></span>
<span class="line"><span style="color:#24292E;">    prefix</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/service&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    target</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://127.0.0.1:3000&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    hooks</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6A737D;">// 使用多个 Hooks 函数，处理 onRequest</span></span>
<span class="line"><span style="color:#24292E;">      onRequest</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (req, res) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multipleHooks</span><span style="color:#24292E;">(req, res, hook1, hook2), </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">rewriteHeaders</span><span style="color:#24292E;"> (handlers) {</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#6A737D;">// 可以在这里设置 response header</span></span>
<span class="line"><span style="color:#24292E;">      	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> headers</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 使用多个 Hooks 函数，处理 onResponse</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">onResponse</span><span style="color:#24292E;"> (req, res, stream) {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }]</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(PORT).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(server </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(\`API Gateway listening on \${PORT} port</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">\`)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>对应源码处理相应的 Hooks 流程已经在前面部分有所涉及，这里不再一一展开。</p><p>最后，我们再通过一个实现负载均衡的场景，来加强对该网关的设计理解，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> gateway </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../index&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { P2cBalancer } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;load-balancers&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> targets </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;http://localhost:3000&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;xxxxx&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;xxxxxxx&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> balancer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">P2cBalancer</span><span style="color:#E1E4E8;">(targets.length)</span></span>
<span class="line"><span style="color:#E1E4E8;">gateway({</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 自定义 proxyHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxyHandler</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (req, res, url, proxy, proxyOpts) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 使用 P2cBalancer 实例进行负载均衡</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> targets[balancer.</span><span style="color:#B392F0;">pick</span><span style="color:#E1E4E8;">()]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof target </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        proxyOpts.base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        proxyOpts.onResponse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">        proxyOpts.onRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onRequestNoOp</span></span>
<span class="line"><span style="color:#E1E4E8;">        proxy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;">(req, res, url, proxyOpts)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    prefix</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/balanced&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> gateway </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../index&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { P2cBalancer } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;load-balancers&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> targets </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;http://localhost:3000&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;xxxxx&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;xxxxxxx&#39;</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> balancer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">P2cBalancer</span><span style="color:#24292E;">(targets.length)</span></span>
<span class="line"><span style="color:#24292E;">gateway({</span></span>
<span class="line"><span style="color:#24292E;">  routes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 自定义 proxyHandler</span></span>
<span class="line"><span style="color:#24292E;">    proxyHandler</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (req, res, url, proxy, proxyOpts) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 使用 P2cBalancer 实例进行负载均衡</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> targets[balancer.</span><span style="color:#6F42C1;">pick</span><span style="color:#24292E;">()]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof target </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        proxyOpts.base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        proxyOpts.onResponse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onResponse</span></span>
<span class="line"><span style="color:#24292E;">        proxyOpts.onRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onRequestNoOp</span></span>
<span class="line"><span style="color:#24292E;">        proxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;">(req, res, url, proxyOpts)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    prefix</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/balanced&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>通过如上代码我们看出，网关的设计既支持默认的 proxyHandler，又支持开发者自定义的 proxyHandler，对于自定义的 proxyHandler，网关层面提供：</p><ul><li><p>req</p></li><li><p>res</p></li><li><p>req.url</p></li><li><p>proxy</p></li><li><p>proxyOpts</p></li></ul><p>相关参数，方便开发者发挥。</p><p>至此，我们就从源码和设计层面对一个成熟的网关实现进行了解析。你可以结合源码进行学习。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们深入讲解了 Node.js 另外一个重要的应用场景：企业级 BFF 网关。我们详细介绍了 BFF 网关的优缺点、打造 BFF 网关需要考虑的问题。总之，设计一个良好的 BFF 网关，要求开发者具有较强的综合能力。接下来我们实现一个精简的网关系统，并结合源码和设计层面对其实现进行了解析，帮助你深入了解网关的构建。</p>`,79),y=s("<p>事实上，BFF 网关理念已经完全被业界接受，业界著名的网关包括但不限于：</p><ul><li><p>Netflix API Gateway: Zuul</p></li><li><p>Amazon AWS 网关</p></li><li><p>Kong Gateway</p></li><li><p>SwaggerHub</p></li><li><p>Express API Gateway</p></li><li><p>Azure API Gateway</p></li></ul><p>作为前端开发者，向 BFF 进军是一个有趣且必要的发展方向。</p><p>另外，Serverless 是一种无服务器架构，它的弹性伸缩、按需使用、无运维等特性都是未来的发展方向。而 Serverless 结合 BFF 网关设计理念，业界也推出了 SFF（Serverless For Frontend）的概念。</p><p>其实，这些概念万变不离其宗，掌握了 BFF 网关，能够设计一个高可用的网关层，会让你在技术上收获颇多，同时也能为业务带来更大的收益。</p><p>下一讲，我们就迎来了课程的最后内容------实现高可用：使用 Puppeteer 生成性能最优的海报系统。我们将介绍 Puppeteer 的各种应用场景，并重点讲解基于 Puppeteer 设计实现的海报服务系统。下节内容同样精彩，请你继续阅读。</p>",6);function i(F,d,u,h,A,g){const n=o("Image");return e(),r("div",null,[c,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/21/5E/Cgp9HWBURl6AGdLyAAGLpDcAPtI043.png"}),p(),E,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/21/5C/CioPOWBURoyAGqyFAAdwJg_hSMw100.png"}),p(),y])}const B=l(t,[["render",i]]);export{x as __pageData,B as default};
