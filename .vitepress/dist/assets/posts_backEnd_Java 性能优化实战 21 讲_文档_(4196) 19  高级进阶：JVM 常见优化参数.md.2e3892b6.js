import{_ as n,j as p,o as l,g as o,k as e,h as t,Q as s}from"./chunks/framework.cfb14fe0.js";const h=JSON.parse('{"title":"19高级进阶：JVM常见优化参数","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4196) 19  高级进阶：JVM 常见优化参数.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4196) 19  高级进阶：JVM 常见优化参数.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4196) 19  高级进阶：JVM 常见优化参数.md"},c=s(`<h1 id="_19高级进阶-jvm常见优化参数" tabindex="-1">19高级进阶：JVM常见优化参数 <a class="header-anchor" href="#_19高级进阶-jvm常见优化参数" aria-label="Permalink to &quot;19高级进阶：JVM常见优化参数&quot;">​</a></h1><p>现在大家用得最多的 Java 版本是 Java 8，如果你的公司比较保守，那么使用较多的垃圾回收器就是 CMS 。但 CMS 已经在 Java 14 中被正式废除，随着 ZGC 的诞生和 G1 的稳定，CMS 终将成为过去式。</p><p>Java 9 之后，Java 版本已经进入了快速发布阶段，大约是每半年发布一次，Java 8 和 Java 11 是目前支持的 LTS 版本。</p><p>由于 JVM 一直处在变化之中，所以一些参数的配置并不总是有效的。有时候你加入一个参数，&quot;感觉上&quot;运行速度加快了，但通过 -XX:+PrintFlagsFinal 来查看，却发现这个参数默认就是这样了。</p><p>所以，在不同的 JVM 版本上，不同的垃圾回收器上，要先看一下这个参数默认是什么，不要轻信别人的建议，命令行示例如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">PrintFlagsFinal</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">UseG1GC</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">&gt;&amp;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> grep </span><span style="color:#79B8FF;">UseAdaptiveSizePolicy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">PrintFlagsFinal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">UseG1GC</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">&gt;&amp;</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> grep </span><span style="color:#005CC5;">UseAdaptiveSizePolicy</span></span></code></pre></div><p>还有一个与之类似的参数叫作 PrintCommandLineFlags，通过它，你能够查看当前所使用的垃圾回收器和一些默认的值。</p><p>可以看到下面的 JVM 默认使用的就是并行收集器：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># java </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">PrintCommandLineFlags</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">version</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">InitialHeapSize</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">127905216</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">MaxHeapSize</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2046483456</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">PrintCommandLineFlags</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">UseCompressedClassPointers</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">UseCompressedOops</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">UseParallelGC</span></span>
<span class="line"><span style="color:#E1E4E8;">openjdk version </span><span style="color:#9ECBFF;">&quot;1.8.0_41&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">OpenJDK</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Runtime</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Environment</span><span style="color:#E1E4E8;"> (build </span><span style="color:#79B8FF;">1.8</span><span style="color:#E1E4E8;">.0_41</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b04)</span></span>
<span class="line"><span style="color:#79B8FF;">OpenJDK</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">64</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Bit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Server</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">VM</span><span style="color:#E1E4E8;"> (build </span><span style="color:#79B8FF;">25.40</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b25, mixed mode)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># java </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">PrintCommandLineFlags</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">version</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">InitialHeapSize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">127905216</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">MaxHeapSize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2046483456</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">PrintCommandLineFlags</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">UseCompressedClassPointers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">UseCompressedOops</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">UseParallelGC</span></span>
<span class="line"><span style="color:#24292E;">openjdk version </span><span style="color:#032F62;">&quot;1.8.0_41&quot;</span></span>
<span class="line"><span style="color:#005CC5;">OpenJDK</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Runtime</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Environment</span><span style="color:#24292E;"> (build </span><span style="color:#005CC5;">1.8</span><span style="color:#24292E;">.0_41</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b04)</span></span>
<span class="line"><span style="color:#005CC5;">OpenJDK</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Bit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Server</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">VM</span><span style="color:#24292E;"> (build </span><span style="color:#005CC5;">25.40</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b25, mixed mode)</span></span></code></pre></div><p>JVM 的参数配置繁多，但大多数不需要我们去关心。</p><p>下面，我们通过对 ES 服务的 JVM 参数分析，来看一下常见的优化点。</p><p>ElasticSearch（简称 ES）是一个高性能的开源分布式搜索引擎。ES 是基于 Java 语言开发的，在它的 conf 目录下，有一个叫作<strong>jvm.options</strong>的文件，JVM 的配置就放在这里。</p><h3 id="堆空间的配置" tabindex="-1">堆空间的配置 <a class="header-anchor" href="#堆空间的配置" aria-label="Permalink to &quot;堆空间的配置&quot;">​</a></h3><p>下面是 ES 对于堆空间大小的配置。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Xms1g</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Xmx1g</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Xms1g</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Xmx1g</span></span></code></pre></div><p>我们在 <strong>&quot;17 | 高级进阶：JVM 如何完成垃圾回收？&quot;</strong> 就聊到过，JVM 中空间最大的一块就是堆，垃圾回收也主要是针对这块区域。通过 Xmx 可指定堆的最大值，通过 Xms 可指定堆的初始大小。我们通常把这两个参数，设置成一样大小的，可避免堆空间在动态扩容时的时间开销。</p><p>在配置文件中还有 AlwaysPreTouch 这个参数。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">AlwaysPreTouch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">AlwaysPreTouch</span></span></code></pre></div><p>其实，通过 Xmx 指定了的堆内存，只有在 JVM 真正使用的时候，才会进行分配。这个参数，在 JVM 启动的时候，就把它所有的内存在操作系统分配了。在堆比较大的时候，会加大启动时间，但它能够减少内存动态分配的性能损耗，提高运行时的速度。</p><p>如下图，JVM 的内存，分为堆和堆外内存，其中堆的大小可以通过 Xmx 和 Xms 来配置。</p>`,20),y=s(`<p>但我们在配置 ES 的堆内存时，通常把堆的初始化大小，设置成物理内存的一半。这是因为 ES 是存储类型的服务，我们需要预留一半的内存给文件缓存（理论参见 <strong>&quot;07 | 案例分析：无处不在的缓存，高并发系统的法宝&quot;</strong> ），等下次用到相同的文件时，就不用与磁盘进行频繁的交互。这一块区域一般叫作 <strong>PageCache</strong>，占用的空间很大。</p><p>对于计算型节点来说，比如我们普通的 Web 服务，通常会把堆内存设置为物理内存的 2/3，剩下的 1/3 就是给堆外内存使用的。</p><p>我们这张图，对堆外内存进行了非常细致的划分，解释如下：</p><ul><li><p><strong>元空间</strong></p><p>参数 -XX:MaxMetaspaceSize 和 -XX:MetaspaceSize，分别指定了元空间的最大内存和初始化内存。因为元空间默认是没有上限的，所以极端情况下，元空间会一直挤占操作系统剩余内存。</p></li><li><p><strong>JIT 编译后代码存放</strong></p><p>-XX:ReservedCodeCacheSize。JIT 是 JVM 一个非常重要的特性，CodeCahe 存放的，就是即时编译器所生成的二进制代码。另外，JNI 的代码也是放在这里的。</p></li><li><p><strong>本地内存</strong></p><p>本地内存是一些其他 attch 在 JVM 进程上的内存区域的统称。比如网络连接占用的内存、线程创建占用的内存等。在高并发应用下，由于连接和线程都比较多，这部分内存累加起来还是比较可观的。</p></li><li><p><strong>直接内存</strong></p><p>这里要着重提一下直接内存，因为它是本地内存中唯一可以使用参数来限制大小的区域。使用参数 -XX:MaxDirectMemorySize，即可设定 ByteBuffer 类所申请的内存上限。</p></li><li><p><strong>JNI 内存</strong></p><p>上面谈到 CodeCache 存放的 JNI 代码，JNI 内存就是指的这部分代码所 malloc 的具体内存。很可惜的是，这部分内存的使用 JVM 是无法控制的，它依赖于具体的 JNI 代码实现。</p></li></ul><h3 id="日志参数配置" tabindex="-1">日志参数配置 <a class="header-anchor" href="#日志参数配置" aria-label="Permalink to &quot;日志参数配置&quot;">​</a></h3><p>下面是 ES 的日志参数配置，由于 Java 8 和 Java 9 的参数配置已经完全不一样了，ES 在这里也分了两份。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">PrintGCDetails</span></span>
<span class="line"><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">PrintGCDateStamps</span></span>
<span class="line"><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">PrintTenuringDistribution</span></span>
<span class="line"><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">PrintGCApplicationStoppedTime</span></span>
<span class="line"><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:-</span><span style="color:#79B8FF;">Xloggc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">logs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gc.log</span></span>
<span class="line"><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">UseGCLogFileRotation</span></span>
<span class="line"><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">NumberOfGCLogFiles</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">32</span></span>
<span class="line"><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">GCLogFileSize</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">64m</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">9</span><span style="color:#F97583;">-:-</span><span style="color:#79B8FF;">Xlog</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">gc</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">,gc</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">age</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">trace,safepoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">file</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">logs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gc.log</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">utctime,pid,tags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">filecount</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">,filesize</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">64m</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">PrintGCDetails</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">PrintGCDateStamps</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">PrintTenuringDistribution</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">PrintGCApplicationStoppedTime</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:-</span><span style="color:#005CC5;">Xloggc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">logs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gc.log</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">UseGCLogFileRotation</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">NumberOfGCLogFiles</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">32</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">GCLogFileSize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">64m</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#D73A49;">-:-</span><span style="color:#005CC5;">Xlog</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">gc</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">,gc</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">age</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">trace,safepoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">file</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">logs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gc.log</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">utctime,pid,tags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">filecount</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">,filesize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">64m</span></span></code></pre></div><p>下面解释一下这些参数的意义，以 Java 8 为例。</p><ul><li><p>PrintGCDetails 打印详细 GC 日志。</p></li><li><p>PrintGCDateStamps 打印当前系统时间，更加可读；与之对应的是 PrintGCTimeStamps，打印的是 JVM 启动后的相对时间，可读性较差。</p></li><li><p>PrintTenuringDistribution 打印对象年龄分布，对调优 MaxTenuringThreshold 参数帮助很大。</p></li><li><p>PrintGCApplicationStoppedTime 打印 STW 时间</p></li><li><p>下面几个日志参数是配置了类似于 Logback 的滚动日志，比较简单，不再详细介绍</p></li></ul><p>从 Java 9 开始，JVM 移除了 40 多个 GC 日志相关的参数，具体参见 <a href="https://openjdk.java.net/jeps/158" target="_blank" rel="noreferrer">JEP 158</a>。所以这部分的日志配置有很大的变化，GC 日志的打印方式，已经完全不一样了，比以前的日志参数规整了许多。</p><p>参数如下所示：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">9</span><span style="color:#F97583;">-:-</span><span style="color:#79B8FF;">Xlog</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">gc</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">,gc</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">age</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">trace,safepoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">file</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">logs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">gc.log</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">utctime,pid,tags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">filecount</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">,filesize</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">64m</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">9</span><span style="color:#D73A49;">-:-</span><span style="color:#005CC5;">Xlog</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">gc</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">,gc</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">age</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">trace,safepoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">file</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">logs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">gc.log</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">utctime,pid,tags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">filecount</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">,filesize</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">64m</span></span></code></pre></div><p>再来看下 ES 在异常情况下的配置参数：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">HeapDumpOnOutOfMemoryError</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">HeapDumpPath</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">data</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">ErrorFile</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">logs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">hs_err_pid</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">p.log</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">HeapDumpOnOutOfMemoryError</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">HeapDumpPath</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">ErrorFile</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">logs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">hs_err_pid</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">p.log</span></span></code></pre></div><p>HeapDumpOnOutOfMemoryError、HeapDumpPath、ErrorFile 是每个 Java 应用都应该配置的参数。正常情况下，我们通过 jmap 获取应用程序的堆信息；异常情况下，比如发生了 OOM，通过这三个配置参数，即可在发生OOM的时候，自动 dump 一份堆信息到指定的目录中。</p><p>拿到了这份 dump 信息，我们就可以使用 MAT 等工具详细分析，找到具体的 OOM 原因。</p><h3 id="垃圾回收器配置" tabindex="-1">垃圾回收器配置 <a class="header-anchor" href="#垃圾回收器配置" aria-label="Permalink to &quot;垃圾回收器配置&quot;">​</a></h3><p>ES 默认使用 CMS 垃圾回收器，它有以下三行主要的配置。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">UseConcMarkSweepGC</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">CMSInitiatingOccupancyFraction</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">75</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:+</span><span style="color:#79B8FF;">UseCMSInitiatingOccupancyOnly</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">UseConcMarkSweepGC</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">CMSInitiatingOccupancyFraction</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">75</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:+</span><span style="color:#005CC5;">UseCMSInitiatingOccupancyOnly</span></span></code></pre></div><p>下面介绍一下这两个参数：</p><ul><li><p><strong>UseConcMarkSweepGC</strong>，表示年轻代使用 ParNew，老年代的用 CMS 垃圾回收器</p></li><li><p><strong>-XX:CMSInitiatingOccupancyFraction</strong> 由于 CMS 在执行过程中，用户线程还需要运行，那就需要保证有充足的内存空间供用户使用。如果等到老年代空间快满了，再开启这个回收过程，用户线程可能会产生&quot;Concurrent Mode Failure&quot;的错误，这时会临时启用 Serial Old 收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了（STW）。</p></li></ul><p>这部分空间预留，一般在 30% 左右即可，那么能用的大概只有 70%。参数 -XX:CMSInitiatingOccupancyFraction 用来配置这个比例，但它首先必须配置 -XX:+UseCMSInitiatingOccupancyOnly 参数。</p><p>另外，对于 CMS 垃圾回收器，常用的还有下面的配置参数：</p><ul><li><p><strong>-XX:ExplicitGCInvokesConcurrent</strong> 当代码里显示的调用了 System.gc()，实际上是想让回收器进行FullGC，如果发生这种情况，则使用这个参数开始并行 FullGC。建议加上。</p></li><li><p><strong>-XX:CMSFullGCsBeforeCompaction</strong> 默认为 0，就是每次FullGC都对老年代进行碎片整理压缩，建议保持默认。</p></li><li><p><strong>-XX:CMSScavengeBeforeRemark</strong> 开启或关闭在 CMS 重新标记阶段之前的清除（YGC）尝试。可以降低 remark 时间，建议加上。</p></li><li><p><strong>-XX:+ParallelRefProcEnabled</strong> 可以用来并行处理 Reference，以加快处理速度，缩短耗时。</p></li></ul><p>CMS 垃圾回收器，已经在 Java14 中被移除，由于它的 GC 时间不可控，有条件应该尽量避免使用。</p><p>针对 Java10（普通 Java 应用在 Java 8 中即可开启 G1），ES 可采用 G1 垃圾回收器。我们在 <strong>&quot;17 | 高级进阶：JVM 如何完成垃圾回收？&quot;</strong> 介绍过 G1，它可以通过配置参数 MaxGCPauseMillis，指定一个期望的停顿时间，使用相对比较简单。</p><p>下面是主要的配置参数：</p><ul><li><p><strong>-XX:MaxGCPauseMillis</strong> 设置目标停顿时间，G1 会尽力达成。</p></li><li><p><strong>-XX:G1HeapRegionSize</strong> 设置小堆区大小。这个值为 2 的次幂，不要太大，也不要太小。如果是在不知道如何设置，保持默认。</p></li><li><p><strong>-XX:InitiatingHeapOccupancyPercent</strong> 当整个堆内存使用达到一定比例（默认是45%），并发标记阶段就会被启动。</p></li><li><p><strong>-XX:ConcGCThreads</strong> 并发垃圾收集器使用的线程数量。默认值随 JVM 运行的平台不同而不同。不建议修改。</p></li></ul><p>JVM 支持非常多的垃圾回收器，下面是最常用的几个，以及配置参数：</p><ul><li><p><strong>-XX:+UseSerialGC</strong> 年轻代和老年代都用串行收集器</p></li><li><p><strong>-XX:+UseParallelGC</strong> 年轻代使用 ParallerGC，老年代使用 Serial Old</p></li><li><p><strong>-XX:+UseParallelOldGC</strong> 新生代和老年代都使用并行收集器</p></li><li><p><strong>-XX:+UseG1GC</strong> 使用 G1 垃圾回收器</p></li><li><p><strong>-XX:+UseZGC</strong> 使用 ZGC 垃圾回收器</p></li></ul><h3 id="额外配置" tabindex="-1">额外配置 <a class="header-anchor" href="#额外配置" aria-label="Permalink to &quot;额外配置&quot;">​</a></h3><p>我们再来看下几个额外的配置。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">-Xss1m</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">-Xss1m</span></span></code></pre></div><p><strong>-Xss</strong>设置每个 Java 虚拟机栈的容量为 1MB。这个参数和 -XX:ThreadStackSize 是一样的，默认就是 1MB。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">XX</span><span style="color:#F97583;">:-</span><span style="color:#79B8FF;">OmitStackTraceInFastThrow</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">XX</span><span style="color:#D73A49;">:-</span><span style="color:#005CC5;">OmitStackTraceInFastThrow</span></span></code></pre></div><p>把 - 换成 +，可以减少异常栈的输出，进行合并。虽然会对调试有一定的困扰，但能在发生异常时显著增加性能。随之而来的就是异常信息不好排查，ES 为了找问题方便，就把错误合并给关掉了。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Djava</span><span style="color:#E1E4E8;">.awt.headless</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Djava</span><span style="color:#24292E;">.awt.headless</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre></div><p>Headless 模式是系统的一种配置模式，在该模式下，系统缺少了显示设备、键盘或鼠标。在服务器上一般是没这些设备的，这个参数是告诉虚拟机使用软件去模拟这些设备。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">9</span><span style="color:#F97583;">-:-</span><span style="color:#79B8FF;">Djava</span><span style="color:#E1E4E8;">.locale.providers</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">COMPAT</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Dfile</span><span style="color:#E1E4E8;">.encoding</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">UTF</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Des</span><span style="color:#E1E4E8;">.networkaddress.cache.ttl</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">60</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Des</span><span style="color:#E1E4E8;">.networkaddress.cache.negative.ttl</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Dio</span><span style="color:#E1E4E8;">.netty.noUnsafe</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Dio</span><span style="color:#E1E4E8;">.netty.noKeySetOptimization</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Dio</span><span style="color:#E1E4E8;">.netty.recycler.maxCapacityPerThread</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Dlog4j</span><span style="color:#E1E4E8;">.shutdownHookEnabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Dlog4j2</span><span style="color:#E1E4E8;">.disable.jmx</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Djava</span><span style="color:#E1E4E8;">.io.tmpdir</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">\${</span><span style="color:#79B8FF;">ES_TMPDIR</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Djna</span><span style="color:#E1E4E8;">.nosys</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">9</span><span style="color:#D73A49;">-:-</span><span style="color:#005CC5;">Djava</span><span style="color:#24292E;">.locale.providers</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">COMPAT</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Dfile</span><span style="color:#24292E;">.encoding</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">UTF</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Des</span><span style="color:#24292E;">.networkaddress.cache.ttl</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">60</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Des</span><span style="color:#24292E;">.networkaddress.cache.negative.ttl</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Dio</span><span style="color:#24292E;">.netty.noUnsafe</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Dio</span><span style="color:#24292E;">.netty.noKeySetOptimization</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Dio</span><span style="color:#24292E;">.netty.recycler.maxCapacityPerThread</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Dlog4j</span><span style="color:#24292E;">.shutdownHookEnabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Dlog4j2</span><span style="color:#24292E;">.disable.jmx</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Djava</span><span style="color:#24292E;">.io.tmpdir</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">\${</span><span style="color:#005CC5;">ES_TMPDIR</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Djna</span><span style="color:#24292E;">.nosys</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre></div><p>上面这些参数，通过 -D 参数，在启动一个 Java 程序时，设置系统属性值，也就是在 System 类中通过 getProperties() 得到的一串系统属性。</p><p>这部分自定义性比较强，不做过多介绍。</p><h3 id="其他调优" tabindex="-1">其他调优 <a class="header-anchor" href="#其他调优" aria-label="Permalink to &quot;其他调优&quot;">​</a></h3><p>以上就是 ES 默认的 JVM 参数配置，大多数还是比较基础的。在平常的应用服务中，我们希望得到更细粒度的控制，其中比较常用的就是调整各个分代之间的比例。</p><ul><li><p><strong>-Xmn</strong> 年轻代大小，默认年轻代占堆大小的 1/3。高并发快消亡场景可适当加大这个区域，对半或者更多都是可以的。但是在 G1 下，就不用再设置这个值了，它会自动调整；</p></li><li><p><strong>-XX:SurvivorRatio</strong> 默认值为 8，表示伊甸区和幸存区的比例；</p></li><li><p><strong>-XX:MaxTenuringThreshold</strong> 这个值在 CMS 下默认为 6，G1 下默认为 15。这个值和我们前面提到的对象提升有关，改动效果会比较明显。对象的年龄分布可以使用 -XX:+PrintTenuringDistribution 打印，如果后面几代的大小总是差不多，证明过了某个年龄后的对象总能晋升到老年代，就可以把晋升阈值设的小一些；</p></li><li><p><strong>PretenureSizeThreshold</strong> 超过一定大小的对象，将直接在老年代分配，不过这个参数用得不是很多。</p></li></ul><h3 id="练习-cassandra-的参数配置" tabindex="-1">练习：cassandra 的参数配置 <a class="header-anchor" href="#练习-cassandra-的参数配置" aria-label="Permalink to &quot;练习：cassandra 的参数配置&quot;">​</a></h3><p>了解了我们上面说的配置参数，大家可以拿 cassandra 的配置文件分析一下，cassandra 是一个高速的列存数据库，使用 gossip 进行集群维护，它的 JVM 参数配置同样在 jvm.options 中。</p><p>为了方便大家分析，我把 ES 和 cassandra 的这两个配置文件也上传到了仓库中，你可以实际练习一下，如果你有什么疑问，欢迎在下方留言区讨论。</p><p><a href="https://wj.qq.com/s2/7200077/1134/" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品~</a></p>`,48);function i(F,C,E,d,g,u){const a=p("Image");return l(),o("div",null,[c,e(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/4E/F1/CgqCHl9fOACAW_TIAAClqw0re70194.png"}),t(),y])}const X=n(r,[["render",i]]);export{h as __pageData,X as default};
