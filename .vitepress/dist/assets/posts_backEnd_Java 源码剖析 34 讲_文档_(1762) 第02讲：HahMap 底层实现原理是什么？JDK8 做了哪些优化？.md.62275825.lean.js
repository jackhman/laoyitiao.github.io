import{_ as o,j as e,o as t,g as c,k as l,h as n,s,Q as p}from"./chunks/framework.a0d18f64.js";const M=JSON.parse('{"title":"第02讲：HahMap底层实现原理是什么？JDK8做了哪些优化？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1762) 第02讲：HahMap 底层实现原理是什么？JDK8 做了哪些优化？.md","filePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1762) 第02讲：HahMap 底层实现原理是什么？JDK8 做了哪些优化？.md","lastUpdated":1696682708000}'),E={name:"posts/backEnd/Java 源码剖析 34 讲_文档/(1762) 第02讲：HahMap 底层实现原理是什么？JDK8 做了哪些优化？.md"},r=s("h1",{id:"第02讲-hahmap底层实现原理是什么-jdk8做了哪些优化",tabindex:"-1"},[n("第02讲：HahMap底层实现原理是什么？JDK8做了哪些优化？ "),s("a",{class:"header-anchor",href:"#第02讲-hahmap底层实现原理是什么-jdk8做了哪些优化","aria-label":'Permalink to "第02讲：HahMap底层实现原理是什么？JDK8做了哪些优化？"'},"​")],-1),y=s("p",null,"HashMap 是使用频率最高的类型之一，同时也是面试经常被问到的问题之一，这是因为 HashMap 的知识点有很多，同时它又属于 Java 基础知识的一部分，因此在面试中经常被问到。",-1),i=s("p",null,"本课时的面试题是，HashMap 底层是如何实现的？在 JDK 1.8 中它都做了哪些优化？",-1),F=s("h3",{id:"典型回答",tabindex:"-1"},[n("典型回答 "),s("a",{class:"header-anchor",href:"#典型回答","aria-label":'Permalink to "典型回答"'},"​")],-1),A=s("p",null,"在 JDK 1.7 中 HashMap 是以数组加链表的形式组成的，JDK 1.8 之后新增了红黑树的组成结构，当链表大于 8 并且容量大于 64 时，链表结构会转换成红黑树结构，它的组成结构如下图所示：",-1),D=p("",25),h=p("",7),C=p("",6),u=s("p",null,"当然发生死循环的原因是 JDK 1.7 链表插入方式为首部倒序插入，这个问题在 JDK 1.8 得到了改善，变成了尾部正序插入。",-1),d=s("p",null,"有人曾经把这个问题反馈给了 Sun 公司，但 Sun 公司认为这不是一个问题，因为 HashMap 本身就是非线程安全的，如果要在多线程下，建议使用 ConcurrentHashMap 替代，但这个问题在面试中被问到的几率依然很大，所以在这里需要特别说明一下。",-1),f=s("h3",{id:"小结",tabindex:"-1"},[n("小结 "),s("a",{class:"header-anchor",href:"#小结","aria-label":'Permalink to "小结"'},"​")],-1),g=s("p",null,"本课时介绍了 HashMap 的底层数据结构，在 JDK 1.7 时 HashMap 是由数组和链表组成的，而 JDK 1.8 则新增了红黑树结构，当链表长度达到 8 并且容器达到 64 时会转换为红黑树存储，以提升元素的操作性能。同时还介绍了 HashMap 的三个重要方法，查询、添加和扩容，以及 JDK 1.7 resize() 在并发环境下导致死循环的原因。",-1);function k(T,b,_,B,m,V){const a=e("Image");return t(),c("div",null,[r,y,i,F,A,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/73/D9/Cgq2xl5rDYmAM-0hAABv6sMsyOQ867.png"}),n(),D,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/73/D9/CgpOIF5rDYmATP43AAB3coc0R64799.png"}),n(),h,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/73/D9/Cgq2xl5rDYmAXoWFAAArXO_oe8c713.png"}),n(),C,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/73/D9/CgpOIF5rDYmAPR1lAABl-qSxBYs115.png"}),n(),u,d,f,g])}const K=o(E,[["render",k]]);export{M as __pageData,K as default};
