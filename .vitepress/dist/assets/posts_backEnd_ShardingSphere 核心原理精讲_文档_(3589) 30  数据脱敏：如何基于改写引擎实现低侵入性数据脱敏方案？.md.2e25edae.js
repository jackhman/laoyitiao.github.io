import{_ as o,j as e,o as t,g as r,k as l,h as n,s,Q as p}from"./chunks/framework.e0c66c3f.js";const f=JSON.parse('{"title":"数据脱敏模块整体架构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3589) 30  数据脱敏：如何基于改写引擎实现低侵入性数据脱敏方案？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3589) 30  数据脱敏：如何基于改写引擎实现低侵入性数据脱敏方案？.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3589) 30  数据脱敏：如何基于改写引擎实现低侵入性数据脱敏方案？.md"},E=s("p",null,[n("今天，我们讨论 ShardingSphere 中的数据脱敏模块。通过在 "),s("strong",null,'"10 | 数据脱敏：如何确保敏感数据的安全访问？"'),n(" 课时中的介绍，我们知道 ShardingSphere 提供了一套自动的数据加解密机制来实现透明化的数据脱敏。")],-1),y=s("h3",{id:"数据脱敏模块整体架构",tabindex:"-1"},[n("数据脱敏模块整体架构 "),s("a",{class:"header-anchor",href:"#数据脱敏模块整体架构","aria-label":'Permalink to "数据脱敏模块整体架构"'},"​")],-1),i=s("p",null,"与普通的编程模式一样，对于数据脱敏而言，我们同样先获取一个 DataSource 作为整个流程的入口，当然这里获取的不是一个普通的 DataSource，而是一个专门针对数据脱敏的 EncryptDataSource。对于数据脱敏模块，我们的思路还是从上到下，从 EncryptDataSource 开始进入到 ShardingSphere 数据脱敏的世界中。",-1),g=s("p",null,"同时，我们这次讲解数据脱敏模块不是零基础，因为在前面介绍 ShardingDataSource、ShardingConnection、ShardingStatement 等内容时，已经对整个 SQL 执行流程的抽象过程做了全面介绍，所涉及的很多内容对于数据脱敏模块而言也都是适用的。",-1),u=s("p",null,"让我们结合下图来做一些回顾：",-1),F=p(`<p>上图中，可以看到与数据脱敏模块相关的类实际上都继承了一个抽象类，而这些抽象类在前面的内容都已经做了介绍。因此，我们对数据脱敏模块将重点关注于几个核心类的讲解，对于已经介绍过的内容我们会做一些回顾，但不会面面俱到。</p><p>基于上图，我们从 EncryptDataSource 开始入手，EncryptDataSource 的创建依赖于工厂类 EncryptDataSourceFactory，其实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptDataSourceFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#FFAB70;">dataSource</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EncryptRuleConfiguration </span><span style="color:#FFAB70;">encryptRuleConfiguration</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties </span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptDataSource</span><span style="color:#E1E4E8;">(dataSource, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptRule</span><span style="color:#E1E4E8;">(encryptRuleConfiguration), props);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptDataSourceFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DataSource </span><span style="color:#E36209;">dataSource</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EncryptRuleConfiguration </span><span style="color:#E36209;">encryptRuleConfiguration</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties </span><span style="color:#E36209;">props</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptDataSource</span><span style="color:#24292E;">(dataSource, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptRule</span><span style="color:#24292E;">(encryptRuleConfiguration), props);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里直接创建了一个 EncryptDataSource，依赖于 EncryptRule 规则对象，我们先来梳理一下 EncryptRule 中具体包含了哪些内容。</p><h3 id="encryptrule" tabindex="-1">EncryptRule <a class="header-anchor" href="#encryptrule" aria-label="Permalink to &quot;EncryptRule&quot;">​</a></h3><p>EncryptRule 是数据脱敏模块的一个核心对象，值得我们专门进行展开。在 EncryptRule 中，定义了如下所示的三个核心变量：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//加解密器</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ShardingEncryptor</span><span style="color:#E1E4E8;">&gt; encryptors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A737D;">//脱敏数据表</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">EncryptTable</span><span style="color:#E1E4E8;">&gt; tables </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A737D;">//脱敏规则配置</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> EncryptRuleConfiguration ruleConfiguration;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//加解密器</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ShardingEncryptor</span><span style="color:#24292E;">&gt; encryptors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A737D;">//脱敏数据表</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">EncryptTable</span><span style="color:#24292E;">&gt; tables </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#6A737D;">//脱敏规则配置</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> EncryptRuleConfiguration ruleConfiguration;</span></span></code></pre></div><p>我们可以把这三个变量分成两部分，其中 ShardingEncryptor 用于完成加解密，而 EncryptTable 和 EncryptRuleConfiguration 则更多的与数据脱敏的配置体系相关。</p><p>接下来我将对这两部分分别展开讲解。</p><h4 id="_1-shardingencryptor" tabindex="-1">1.ShardingEncryptor <a class="header-anchor" href="#_1-shardingencryptor" aria-label="Permalink to &quot;1.ShardingEncryptor&quot;">​</a></h4><p>在 EncryptRule 中，ShardingEncryptor 是一个接口，代表具体的加密器类，该接口定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingEncryptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeBasedSPI</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//加密</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">plaintext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//解密</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object </span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">ciphertext</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingEncryptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeBasedSPI</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//加密</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">plaintext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//解密</span></span>
<span class="line"><span style="color:#24292E;">    Object </span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">ciphertext</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ShardingEncryptor 接口中存在一对用于加密和解密的方法，同时该接口也继承了 TypeBasedSPI 接口，意味着会通过 SPI 的方式进行动态类加载。</p><p>ShardingEncryptorServiceLoader 完成了这个工作，同时在 sharding-core-common 工程中，我们也找到了 SPI 的配置文件，如下所示：</p>`,14),d=p(`<p>ShardingEncryptor 的 SPI 配置文件</p><p>可以看到这里有两个实现类，分别是 MD5ShardingEncryptor 和 AESShardingEncryptor。对于 MD5 算法而言，我们知道它是单向散列的，无法根据密文反推出明文，MD5ShardingEncryptor 的实现类如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MD5ShardingEncryptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingEncryptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;MD5&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object </span><span style="color:#FFAB70;">plaintext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DigestUtils.</span><span style="color:#B392F0;">md5Hex</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(plaintext));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">ciphertext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ciphertext;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MD5ShardingEncryptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingEncryptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;MD5&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object </span><span style="color:#E36209;">plaintext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DigestUtils.</span><span style="color:#6F42C1;">md5Hex</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(plaintext));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">ciphertext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ciphertext;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而 AES 是一个对称加密算法，所以可以根据密文反推出明文，对应的 AESShardingEncryptor 如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AESShardingEncryptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingEncryptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String AES_KEY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;aes.key.value&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;AES&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SneakyThrows</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object </span><span style="color:#FFAB70;">plaintext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCipher</span><span style="color:#E1E4E8;">(Cipher.ENCRYPT_MODE).</span><span style="color:#B392F0;">doFinal</span><span style="color:#E1E4E8;">(StringUtils.</span><span style="color:#B392F0;">getBytesUtf8</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(plaintext)));</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//使用 Base64 进行加密</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Base64.</span><span style="color:#B392F0;">encodeBase64String</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SneakyThrows</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">ciphertext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> ciphertext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//使用 Base64 进行解密</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCipher</span><span style="color:#E1E4E8;">(Cipher.DECRYPT_MODE).</span><span style="color:#B392F0;">doFinal</span><span style="color:#E1E4E8;">(Base64.</span><span style="color:#B392F0;">decodeBase64</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(ciphertext)));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(result, StandardCharsets.UTF_8);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Cipher </span><span style="color:#B392F0;">getCipher</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">decryptMode</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(properties.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(AES_KEY), </span><span style="color:#9ECBFF;">&quot;No available secret key for \`%s\`.&quot;</span><span style="color:#E1E4E8;">, AESShardingEncryptor.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        Cipher result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Cipher.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(decryptMode, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SecretKeySpec</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createSecretKey</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">createSecretKey</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> properties.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(AES_KEY), String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s can not be null.&quot;</span><span style="color:#E1E4E8;">, AES_KEY));</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">//创建秘钥</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">copyOf</span><span style="color:#E1E4E8;">(DigestUtils.</span><span style="color:#B392F0;">sha1</span><span style="color:#E1E4E8;">(properties.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(AES_KEY).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()), </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AESShardingEncryptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingEncryptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String AES_KEY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;aes.key.value&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;AES&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SneakyThrows</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object </span><span style="color:#E36209;">plaintext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCipher</span><span style="color:#24292E;">(Cipher.ENCRYPT_MODE).</span><span style="color:#6F42C1;">doFinal</span><span style="color:#24292E;">(StringUtils.</span><span style="color:#6F42C1;">getBytesUtf8</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(plaintext)));</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//使用 Base64 进行加密</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Base64.</span><span style="color:#6F42C1;">encodeBase64String</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">SneakyThrows</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">ciphertext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ciphertext) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//使用 Base64 进行解密</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCipher</span><span style="color:#24292E;">(Cipher.DECRYPT_MODE).</span><span style="color:#6F42C1;">doFinal</span><span style="color:#24292E;">(Base64.</span><span style="color:#6F42C1;">decodeBase64</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(ciphertext)));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(result, StandardCharsets.UTF_8);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Cipher </span><span style="color:#6F42C1;">getCipher</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">decryptMode</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(AES_KEY), </span><span style="color:#032F62;">&quot;No available secret key for \`%s\`.&quot;</span><span style="color:#24292E;">, AESShardingEncryptor.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        Cipher result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cipher.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(decryptMode, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SecretKeySpec</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createSecretKey</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">createSecretKey</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(AES_KEY), String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s can not be null.&quot;</span><span style="color:#24292E;">, AES_KEY));</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">//创建秘钥</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(DigestUtils.</span><span style="color:#6F42C1;">sha1</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(AES_KEY).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()), </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里就是对一些常用加密库的直接使用，不做展开讨论。</p><h4 id="_2-encryptruleconfiguration" tabindex="-1">2.EncryptRuleConfiguration <a class="header-anchor" href="#_2-encryptruleconfiguration" aria-label="Permalink to &quot;2.EncryptRuleConfiguration&quot;">​</a></h4><p>我们接下来关注于 EncryptRule 中的第二组变量，即 EncryptTable，以及与之相关的配置类 EncryptRuleConfiguration 之间的关系。</p><p>我们先来看 EncryptRuleConfiguration，内部包含了两部分内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">EncryptorRuleConfiguration</span><span style="color:#E1E4E8;">&gt; encryptors;</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">EncryptTableRuleConfiguration</span><span style="color:#E1E4E8;">&gt; tables;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">EncryptorRuleConfiguration</span><span style="color:#24292E;">&gt; encryptors;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">EncryptTableRuleConfiguration</span><span style="color:#24292E;">&gt; tables;</span></span></code></pre></div><p>而在 EncryptTableRuleConfiguration 内部，同样保存着一个 EncryptColumnRuleConfiguration 列表，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">EncryptColumnRuleConfiguration</span><span style="color:#E1E4E8;">&gt; columns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashMap&lt;&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">EncryptColumnRuleConfiguration</span><span style="color:#24292E;">&gt; columns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;();</span></span></code></pre></div><p>我们再来看 EncryptColumnRuleConfiguration 的数据结构，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptColumnRuleConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//存储明文的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String plainColumn;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//存储密文的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String cipherColumn;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//辅助查询字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String assistedQueryColumn;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//加密器名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String encryptor;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptColumnRuleConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//存储明文的字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String plainColumn;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//存储密文的字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String cipherColumn;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//辅助查询字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String assistedQueryColumn;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//加密器名字</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String encryptor;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>终于，我们在这里看到了指定存放明文的 plainColumn、存放密文的 cipherColumn，以及加密器 encryptor 等信息。</p><p>我们可以回顾案例中的相关配置项来加深理解：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.plainColumn=user_name_plain</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.cipherColumn=user_name</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.encryptor=name_encryptor</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.plainColumn=user_name_plain</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.cipherColumn=user_name</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.encrypt.tables.encrypt_user.columns.user_name.encryptor=name_encryptor</span></span></code></pre></div><p>我们回到最上层的 EncryptRule，发现它的构造函数如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptRule</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EncryptRuleConfiguration encryptRuleConfig) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ruleConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> encryptRuleConfig;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isValidRuleConfiguration</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;Invalid encrypt column configurations in EncryptTableRuleConfigurations.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">initEncryptors</span><span style="color:#E1E4E8;">(encryptRuleConfig.</span><span style="color:#B392F0;">getEncryptors</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">initTables</span><span style="color:#E1E4E8;">(encryptRuleConfig.</span><span style="color:#B392F0;">getTables</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptRule</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EncryptRuleConfiguration encryptRuleConfig) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ruleConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> encryptRuleConfig;</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isValidRuleConfiguration</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;Invalid encrypt column configurations in EncryptTableRuleConfigurations.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">initEncryptors</span><span style="color:#24292E;">(encryptRuleConfig.</span><span style="color:#6F42C1;">getEncryptors</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">initTables</span><span style="color:#24292E;">(encryptRuleConfig.</span><span style="color:#6F42C1;">getTables</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述 initEncryptors 方法就是初始化加解密器 Encryptor，而 initTables 方法会根据 EncryptRuleConfiguration 中的 EncryptTableRuleConfiguration 来初始化 EncryptTable。这里的 EncryptTable 更多是一种中间领域模型，用于简化对各种配置信息的处理，其内部保存着一个 EncryptColumn 列表，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">EncryptColumn</span><span style="color:#E1E4E8;">&gt; columns;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">EncryptColumn</span><span style="color:#24292E;">&gt; columns;</span></span></code></pre></div><p>而这个 EncryptColumn 中的变量则跟前面介绍的 EncryptColumnRuleConfiguration 一样，包含了存放明文的 plainColumn、存放密文的 cipherColumn，以及加密器 encryptor 等信息。</p><p>在了解了 EncryptRule 中所持有的数据模型之后，我们就可以来看一下 EncryptDataSource，在 EncryptDataSource 的构造函数中使用到了 EncryptRule，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EncryptRuntimeContext runtimeContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DataSource dataSource, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EncryptRule encryptRule, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Properties props) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">        runtimeContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptRuntimeContext</span><span style="color:#E1E4E8;">(dataSource, encryptRule, props, </span><span style="color:#B392F0;">getDatabaseType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EncryptRuntimeContext runtimeContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DataSource dataSource, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EncryptRule encryptRule, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Properties props) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"><span style="color:#24292E;">        runtimeContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptRuntimeContext</span><span style="color:#24292E;">(dataSource, encryptRule, props, </span><span style="color:#6F42C1;">getDatabaseType</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到所传入的 EncryptRule 和 Properties 是用来构建一个 EncryptRuntimeContext，该类继承自 AbstractRuntimeContext 类，而 EncryptRuntimeContext 内部主要保存了用于描述表元数据的 TableMetas 数据结构。</p><h3 id="基于改写引擎的数据脱敏实现方案" tabindex="-1">基于改写引擎的数据脱敏实现方案 <a class="header-anchor" href="#基于改写引擎的数据脱敏实现方案" aria-label="Permalink to &quot;基于改写引擎的数据脱敏实现方案&quot;">​</a></h3><p>我们知道 EncryptDataSource 继承了适配器类 AbstractDataSourceAdapter，而它的作用就是生成 EncryptConnection。而对于 EncryptConnection，我们同样也明确它的职责是创建各种 EncryptStatement 和 EncryptPreparedStatement，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Statement </span><span style="color:#B392F0;">createStatement</span><span style="color:#E1E4E8;">() throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptStatement</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> PreparedStatement </span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptPreparedStatement</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, sql);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Statement </span><span style="color:#6F42C1;">createStatement</span><span style="color:#24292E;">() throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptStatement</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PreparedStatement </span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptPreparedStatement</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, sql);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，我们再快速来到 EncryptStatement，来看它的 executeQuery 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResultSet </span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Strings.</span><span style="color:#B392F0;">isNullOrEmpty</span><span style="color:#E1E4E8;">(sql)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLException</span><span style="color:#E1E4E8;">(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取改写后的 SQL 并执行</span></span>
<span class="line"><span style="color:#E1E4E8;">        ResultSet resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statement.</span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getRewriteSQL</span><span style="color:#E1E4E8;">(sql));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptResultSet</span><span style="color:#E1E4E8;">(connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">(), sqlStatementContext, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, resultSet);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resultSet;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultSet </span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Strings.</span><span style="color:#6F42C1;">isNullOrEmpty</span><span style="color:#24292E;">(sql)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLException</span><span style="color:#24292E;">(SQLExceptionConstant.SQL_STRING_NULL_OR_EMPTY);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取改写后的 SQL 并执行</span></span>
<span class="line"><span style="color:#24292E;">        ResultSet resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statement.</span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getRewriteSQL</span><span style="color:#24292E;">(sql));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptResultSet</span><span style="color:#24292E;">(connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">(), sqlStatementContext, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, resultSet);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.resultSet;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然这里需要重点关注的是 getRewriteSQL 方法，该方法用于获取改写后的 SQL，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getRewriteSQL</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//通过 ParseEngine 对 SQL 进行解析</span></span>
<span class="line"><span style="color:#E1E4E8;">     SQLStatement sqlStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParseEngine</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(sql, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取关系元数据 RelationMetas</span></span>
<span class="line"><span style="color:#E1E4E8;">     RelationMetas relationMetas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRelationMetas</span><span style="color:#E1E4E8;">(connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTableMetas</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//构建 SQLStatementContext</span></span>
<span class="line"><span style="color:#E1E4E8;">     sqlStatementContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SQLStatementContextFactory.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(relationMetas, sql, Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">(), sqlStatement);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//构建 SQLRewriteContext</span></span>
<span class="line"><span style="color:#E1E4E8;">     SQLRewriteContext sqlRewriteContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLRewriteContext</span><span style="color:#E1E4E8;">(relationMetas, sqlStatementContext, sql, Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//判断是否根据数据脱敏列进行查询</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isQueryWithCipherColumn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getProps</span><span style="color:#E1E4E8;">().</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Boolean</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(ShardingPropertiesConstant.QUERY_WITH_CIPHER_COLUMN);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//构建 EncryptSQLRewriteContextDecorator 对 SQLRewriteContext 进行装饰</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptSQLRewriteContextDecorator</span><span style="color:#E1E4E8;">(connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRule</span><span style="color:#E1E4E8;">(), isQueryWithCipherColumn).</span><span style="color:#B392F0;">decorate</span><span style="color:#E1E4E8;">(sqlRewriteContext);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//生成 SQLTokens</span></span>
<span class="line"><span style="color:#E1E4E8;">     sqlRewriteContext.</span><span style="color:#B392F0;">generateSQLTokens</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//使用 DefaultSQLRewriteEngine 进行改写</span></span>
<span class="line"><span style="color:#E1E4E8;">    String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultSQLRewriteEngine</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">(sqlRewriteContext).</span><span style="color:#B392F0;">getSql</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//打印结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">showSQL</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//返回结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getRewriteSQL</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//通过 ParseEngine 对 SQL 进行解析</span></span>
<span class="line"><span style="color:#24292E;">     SQLStatement sqlStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getParseEngine</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(sql, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取关系元数据 RelationMetas</span></span>
<span class="line"><span style="color:#24292E;">     RelationMetas relationMetas </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRelationMetas</span><span style="color:#24292E;">(connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTableMetas</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//构建 SQLStatementContext</span></span>
<span class="line"><span style="color:#24292E;">     sqlStatementContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SQLStatementContextFactory.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(relationMetas, sql, Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">(), sqlStatement);</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//构建 SQLRewriteContext</span></span>
<span class="line"><span style="color:#24292E;">     SQLRewriteContext sqlRewriteContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLRewriteContext</span><span style="color:#24292E;">(relationMetas, sqlStatementContext, sql, Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//判断是否根据数据脱敏列进行查询</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isQueryWithCipherColumn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getProps</span><span style="color:#24292E;">().</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Boolean</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(ShardingPropertiesConstant.QUERY_WITH_CIPHER_COLUMN);</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//构建 EncryptSQLRewriteContextDecorator 对 SQLRewriteContext 进行装饰</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptSQLRewriteContextDecorator</span><span style="color:#24292E;">(connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRule</span><span style="color:#24292E;">(), isQueryWithCipherColumn).</span><span style="color:#6F42C1;">decorate</span><span style="color:#24292E;">(sqlRewriteContext);</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//生成 SQLTokens</span></span>
<span class="line"><span style="color:#24292E;">     sqlRewriteContext.</span><span style="color:#6F42C1;">generateSQLTokens</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//使用 DefaultSQLRewriteEngine 进行改写</span></span>
<span class="line"><span style="color:#24292E;">    String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultSQLRewriteEngine</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">(sqlRewriteContext).</span><span style="color:#6F42C1;">getSql</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//打印结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">showSQL</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//返回结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个方法的部分代码有一种让人似曾相识的感觉，我们回想一下 <strong>&quot;20 | 改写引擎：如何理解装饰器模式下的 SQL 改写实现机制？&quot;</strong> 中介绍的 BaseShardingEngine的rewriteAndConvert 方法，也看到过 isQueryWithCipherColumn 判断，以及 EncryptSQLRewriteContextDecorator，当时我们没有具体展开，今天就来一起看一下。</p><h4 id="_1-encryptsqlrewritecontextdecorator" tabindex="-1">1.EncryptSQLRewriteContextDecorator <a class="header-anchor" href="#_1-encryptsqlrewritecontextdecorator" aria-label="Permalink to &quot;1.EncryptSQLRewriteContextDecorator&quot;">​</a></h4><p>EncryptSQLRewriteContextDecorator 实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptSQLRewriteContextDecorator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLRewriteContextDecorator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EncryptRule encryptRule;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isQueryWithCipherColumn;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decorate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLRewriteContext </span><span style="color:#FFAB70;">sqlRewriteContext</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//参数改写</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ParameterRewriter each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptParameterRewriterBuilder</span><span style="color:#E1E4E8;">(encryptRule, isQueryWithCipherColumn).</span><span style="color:#B392F0;">getParameterRewriters</span><span style="color:#E1E4E8;">(sqlRewriteContext.</span><span style="color:#B392F0;">getRelationMetas</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">sqlRewriteContext.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> each.</span><span style="color:#B392F0;">isNeedRewrite</span><span style="color:#E1E4E8;">(sqlRewriteContext.</span><span style="color:#B392F0;">getSqlStatementContext</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                each.</span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">(sqlRewriteContext.</span><span style="color:#B392F0;">getParameterBuilder</span><span style="color:#E1E4E8;">(), sqlRewriteContext.</span><span style="color:#B392F0;">getSqlStatementContext</span><span style="color:#E1E4E8;">(), sqlRewriteContext.</span><span style="color:#B392F0;">getParameters</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//SQLTokenGenerator 初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">        sqlRewriteContext.</span><span style="color:#B392F0;">addSQLTokenGenerators</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptTokenGenerateBuilder</span><span style="color:#E1E4E8;">(encryptRule, isQueryWithCipherColumn).</span><span style="color:#B392F0;">getSQLTokenGenerators</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptSQLRewriteContextDecorator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLRewriteContextDecorator</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EncryptRule encryptRule;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isQueryWithCipherColumn;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLRewriteContext </span><span style="color:#E36209;">sqlRewriteContext</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//参数改写</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ParameterRewriter each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptParameterRewriterBuilder</span><span style="color:#24292E;">(encryptRule, isQueryWithCipherColumn).</span><span style="color:#6F42C1;">getParameterRewriters</span><span style="color:#24292E;">(sqlRewriteContext.</span><span style="color:#6F42C1;">getRelationMetas</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">sqlRewriteContext.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> each.</span><span style="color:#6F42C1;">isNeedRewrite</span><span style="color:#24292E;">(sqlRewriteContext.</span><span style="color:#6F42C1;">getSqlStatementContext</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                each.</span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">(sqlRewriteContext.</span><span style="color:#6F42C1;">getParameterBuilder</span><span style="color:#24292E;">(), sqlRewriteContext.</span><span style="color:#6F42C1;">getSqlStatementContext</span><span style="color:#24292E;">(), sqlRewriteContext.</span><span style="color:#6F42C1;">getParameters</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//SQLTokenGenerator 初始化</span></span>
<span class="line"><span style="color:#24292E;">        sqlRewriteContext.</span><span style="color:#6F42C1;">addSQLTokenGenerators</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptTokenGenerateBuilder</span><span style="color:#24292E;">(encryptRule, isQueryWithCipherColumn).</span><span style="color:#6F42C1;">getSQLTokenGenerators</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们还是来对比 ShardingSQLRewriteContextDecorator 类，会发现它与 EncryptSQLRewriteContextDecorator 类的结构完全一致。区别在于这里创建的 ParameterRewriterBuilder 和 SQLTokenGeneratorBuilder 分别是 EncryptParameterRewriterBuilder 和 EncryptTokenGenerateBuilder，而不是ShardingParameterRewriterBuilder 和 ShardingTokenGenerateBuilder。但这两组类的内部结构同样是完全一致的。</p><p>在 EncryptParameterRewriterBuilder 内部，同样使用如下方法获取一组 ParameterRewriter：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ParameterRewriter</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getParameterRewriters</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">ParameterRewriter</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptAssignmentParameterRewriter</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptPredicateParameterRewriter</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptInsertValueParameterRewriter</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ParameterRewriter</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getParameterRewriters</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">ParameterRewriter</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptAssignmentParameterRewriter</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptPredicateParameterRewriter</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptInsertValueParameterRewriter</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，我们先以 EncryptAssignmentParameterRewriter 为例来看用于数据脱敏的具体 ParameterRewriter 的实现机制。</p><h4 id="_2-encryptassignmentparameterrewriter" tabindex="-1">2.EncryptAssignmentParameterRewriter <a class="header-anchor" href="#_2-encryptassignmentparameterrewriter" aria-label="Permalink to &quot;2.EncryptAssignmentParameterRewriter&quot;">​</a></h4><p>EncryptAssignmentParameterRewriter 类完成在数据脱敏场景下对参数赋值过程的改写。我们首先注意到 EncryptAssignmentParameterRewriter 中存在一个 isNeedRewriteForEncrypt 方法用于判断是否需要改写。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNeedRewriteForEncrypt</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> UpdateStatement</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> sqlStatementContext </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> InsertSQLStatementContext </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">findSQLSegment</span><span style="color:#E1E4E8;">(SetAssignmentsSegment.class).</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNeedRewriteForEncrypt</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> UpdateStatement</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> sqlStatementContext </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> InsertSQLStatementContext </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">findSQLSegment</span><span style="color:#24292E;">(SetAssignmentsSegment.class).</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的判断条件有两个，一个是 UpdateStatement，一个是 InsertSQLStatementContext（且其中的 SQLStatement 中包含 SetAssignmentsSegment）。我们知道在 SQL 语法中，INSERT 和 UPDATE 语句中都具有如下所示的 SET 赋值部分：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SET userId = 1, task_name = &#39;taskName&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SET userId = 1, task_name = &#39;taskName&#39;</span></span></code></pre></div><p>EncryptAssignmentParameterRewriter 类针对的就是这种场景。我们来看它的 Rewrite 核心方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rewrite</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ParameterBuilder parameterBuilder, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String tableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlStatementContext.</span><span style="color:#B392F0;">getTablesContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSingleTableName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取 SetAssignmentsSegment 并进行遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (AssignmentSegment each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSetAssignmentsSegment</span><span style="color:#E1E4E8;">(sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getAssignments</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;">//判断是否存在 ShardingEncryptor</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ParameterMarkerExpressionSegment </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEncryptRule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">findShardingEncryptor</span><span style="color:#E1E4E8;">(tableName, each.</span><span style="color:#B392F0;">getColumn</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                StandardParameterBuilder standardParameterBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parameterBuilder </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> StandardParameterBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (StandardParameterBuilder) parameterBuilder </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ((GroupedParameterBuilder) parameterBuilder).</span><span style="color:#B392F0;">getParameterBuilders</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;">//对参数进行加密</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">encryptParameters</span><span style="color:#E1E4E8;">(standardParameterBuilder, tableName, each, parameters);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rewrite</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ParameterBuilder parameterBuilder, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters) {</span></span>
<span class="line"><span style="color:#24292E;">        String tableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlStatementContext.</span><span style="color:#6F42C1;">getTablesContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSingleTableName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取 SetAssignmentsSegment 并进行遍历</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (AssignmentSegment each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSetAssignmentsSegment</span><span style="color:#24292E;">(sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getAssignments</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#6A737D;">//判断是否存在 ShardingEncryptor</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ParameterMarkerExpressionSegment </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEncryptRule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">findShardingEncryptor</span><span style="color:#24292E;">(tableName, each.</span><span style="color:#6F42C1;">getColumn</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                StandardParameterBuilder standardParameterBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parameterBuilder </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> StandardParameterBuilder</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (StandardParameterBuilder) parameterBuilder </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ((GroupedParameterBuilder) parameterBuilder).</span><span style="color:#6F42C1;">getParameterBuilders</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6A737D;">//对参数进行加密</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">encryptParameters</span><span style="color:#24292E;">(standardParameterBuilder, tableName, each, parameters);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里通过 getSetAssignmentsSegment 方法获取 SetAssignmentsSegment，实现过程就是根据 SQLStatement 类型分别获取 InsertStatement 和 UpdateStatement 中的 SetAssignment。</p><p>然后，我们循环遍历每一个 SetAssignmentsSegment，针对表中的每一个 Column 判断是否存在 ShardingEncryptor，如果有的话就返回对应的加解密器。</p><p>这部分判断工作就是在前面介绍的 EncryptRule 中完成，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Optional</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingEncryptor</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findShardingEncryptor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicTable, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicColumn) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tables.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(logicTable)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">absent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; encryptor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tables.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(logicTable).</span><span style="color:#B392F0;">findShardingEncryptor</span><span style="color:#E1E4E8;">(logicColumn);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> encryptor.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(encryptors.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(encryptor.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">())) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingEncryptor</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">absent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Optional</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingEncryptor</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findShardingEncryptor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicTable, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicColumn) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tables.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(logicTable)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">absent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; encryptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tables.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(logicTable).</span><span style="color:#6F42C1;">findShardingEncryptor</span><span style="color:#24292E;">(logicColumn);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> encryptor.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(encryptors.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(encryptor.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">())) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Optional.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingEncryptor</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">absent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后我们获取 StandardParameterBuilder，并调用 encryptParameters 方法完成参数的数据脱敏操作，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encryptParameters</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> StandardParameterBuilder parameterBuilder, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String tableName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AssignmentSegment assignmentSegment, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String columnName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> assignmentSegment.</span><span style="color:#B392F0;">getColumn</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> parameterMarkerIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((ParameterMarkerExpressionSegment) assignmentSegment.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getParameterMarkerIndex</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object originalValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parameters.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(parameterMarkerIndex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过 ShardingEncryptor 进行加密，并替换原来存储密文的 cipherColumn</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object cipherValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEncryptRule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getEncryptValues</span><span style="color:#E1E4E8;">(tableName, columnName, Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(originalValue)).</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        parameterBuilder.</span><span style="color:#B392F0;">addReplacedParameters</span><span style="color:#E1E4E8;">(parameterMarkerIndex, cipherValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; addedParameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//如果存在 assistedQueryColumn，则添加辅助查询字段</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">getEncryptRule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">findAssistedQueryColumn</span><span style="color:#E1E4E8;">(tableName, columnName).</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Object assistedQueryValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEncryptRule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getEncryptAssistedQueryValues</span><span style="color:#E1E4E8;">(tableName, columnName, Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(originalValue)).</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            addedParameters.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(assistedQueryValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//如果存在 plainColumn，则添加明文字段</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">getEncryptRule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">findPlainColumn</span><span style="color:#E1E4E8;">(tableName, columnName).</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            addedParameters.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(originalValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">addedParameters.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            parameterBuilder.</span><span style="color:#B392F0;">addAddedParameters</span><span style="color:#E1E4E8;">(parameterMarkerIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, addedParameters);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encryptParameters</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> StandardParameterBuilder parameterBuilder, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String tableName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AssignmentSegment assignmentSegment, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters) {</span></span>
<span class="line"><span style="color:#24292E;">        String columnName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> assignmentSegment.</span><span style="color:#6F42C1;">getColumn</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> parameterMarkerIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((ParameterMarkerExpressionSegment) assignmentSegment.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getParameterMarkerIndex</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Object originalValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parameters.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(parameterMarkerIndex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过 ShardingEncryptor 进行加密，并替换原来存储密文的 cipherColumn</span></span>
<span class="line"><span style="color:#24292E;">        Object cipherValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEncryptRule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getEncryptValues</span><span style="color:#24292E;">(tableName, columnName, Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(originalValue)).</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        parameterBuilder.</span><span style="color:#6F42C1;">addReplacedParameters</span><span style="color:#24292E;">(parameterMarkerIndex, cipherValue);</span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; addedParameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果存在 assistedQueryColumn，则添加辅助查询字段</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">getEncryptRule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">findAssistedQueryColumn</span><span style="color:#24292E;">(tableName, columnName).</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            Object assistedQueryValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEncryptRule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getEncryptAssistedQueryValues</span><span style="color:#24292E;">(tableName, columnName, Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(originalValue)).</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            addedParameters.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(assistedQueryValue);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果存在 plainColumn，则添加明文字段</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">getEncryptRule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">findPlainColumn</span><span style="color:#24292E;">(tableName, columnName).</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            addedParameters.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(originalValue);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">addedParameters.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            parameterBuilder.</span><span style="color:#6F42C1;">addAddedParameters</span><span style="color:#24292E;">(parameterMarkerIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, addedParameters);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的核心逻辑就是继续通过 EncryptRule 的 getEncryptValues 方法获取密文，然后通过获取具体的 ShardingEncryptor 并调用其方法完成这一操作，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEncryptValues</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicTable, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicColumn, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> originalValues) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Optional&lt;</span><span style="color:#F97583;">ShardingEncryptor</span><span style="color:#E1E4E8;">&gt; shardingEncryptor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findShardingEncryptor</span><span style="color:#E1E4E8;">(logicTable, logicColumn);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkArgument</span><span style="color:#E1E4E8;">(shardingEncryptor.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">(), String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can not find ShardingQueryAssistedEncryptor by %s.%s.&quot;</span><span style="color:#E1E4E8;">, logicTable, logicColumn));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Lists.</span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(originalValues, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Function&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object </span><span style="color:#FFAB70;">input</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> input </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(shardingEncryptor.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(input.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEncryptValues</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicTable, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicColumn, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> originalValues) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Optional&lt;</span><span style="color:#D73A49;">ShardingEncryptor</span><span style="color:#24292E;">&gt; shardingEncryptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findShardingEncryptor</span><span style="color:#24292E;">(logicTable, logicColumn);</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkArgument</span><span style="color:#24292E;">(shardingEncryptor.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">(), String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Can not find ShardingQueryAssistedEncryptor by %s.%s.&quot;</span><span style="color:#24292E;">, logicTable, logicColumn));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(originalValues, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Function&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object </span><span style="color:#E36209;">input</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> input </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(shardingEncryptor.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(input.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>关于 EncryptAssignmentParameterRewriter 的实现，这里面涉及的类也比较多，我们可以先来画张图作为后续讨论的基础，如下所示：</p>`,56),m=p(`<h4 id="_3-encryptassignmenttokengenerator" tabindex="-1">3.EncryptAssignmentTokenGenerator <a class="header-anchor" href="#_3-encryptassignmenttokengenerator" aria-label="Permalink to &quot;3.EncryptAssignmentTokenGenerator&quot;">​</a></h4><p>讨论完 EncryptParameterRewriterBuilder 之后，我们再来讨论 EncryptTokenGenerateBuilder。这里，我们也是以 EncryptAssignmentTokenGenerator 为例来进行展开，在这个类中，核心方法是 generateSQLTokens，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">EncryptAssignmentToken</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateSQLTokens</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">EncryptAssignmentToken</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String tableName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlStatementContext.</span><span style="color:#B392F0;">getTablesContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSingleTableName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//获取 SetAssignmentsSegment 并进行遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (AssignmentSegment each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSetAssignmentsSegment</span><span style="color:#E1E4E8;">(sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getAssignments</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//判断是否存在 ShardingEncryptor</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">getEncryptRule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">findShardingEncryptor</span><span style="color:#E1E4E8;">(tableName, each.</span><span style="color:#B392F0;">getColumn</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;">//生成 SQLToken</span></span>
<span class="line"><span style="color:#E1E4E8;">             Optional&lt;</span><span style="color:#F97583;">EncryptAssignmentToken</span><span style="color:#E1E4E8;">&gt; sqlToken </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateSQLToken</span><span style="color:#E1E4E8;">(tableName, each);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlToken.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(sqlToken.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">EncryptAssignmentToken</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateSQLTokens</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext) {</span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">EncryptAssignmentToken</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        String tableName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlStatementContext.</span><span style="color:#6F42C1;">getTablesContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSingleTableName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取 SetAssignmentsSegment 并进行遍历</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (AssignmentSegment each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSetAssignmentsSegment</span><span style="color:#24292E;">(sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getAssignments</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//判断是否存在 ShardingEncryptor</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">getEncryptRule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">findShardingEncryptor</span><span style="color:#24292E;">(tableName, each.</span><span style="color:#6F42C1;">getColumn</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#6A737D;">//生成 SQLToken</span></span>
<span class="line"><span style="color:#24292E;">             Optional&lt;</span><span style="color:#D73A49;">EncryptAssignmentToken</span><span style="color:#24292E;">&gt; sqlToken </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateSQLToken</span><span style="color:#24292E;">(tableName, each);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlToken.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(sqlToken.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里同样根据是否找到 ShardingEncryptor 来执行后续的 generateSQLToken 方法，该方法最终会调用类似如下所示的 generateLiteralSQLToken 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> EncryptAssignmentToken </span><span style="color:#B392F0;">generateLiteralSQLToken</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String tableName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AssignmentSegment assignmentSegment) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        EncryptLiteralAssignmentToken result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptLiteralAssignmentToken</span><span style="color:#E1E4E8;">(assignmentSegment.</span><span style="color:#B392F0;">getColumn</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getStartIndex</span><span style="color:#E1E4E8;">(), assignmentSegment.</span><span style="color:#B392F0;">getStopIndex</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addCipherAssignment</span><span style="color:#E1E4E8;">(tableName, assignmentSegment, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addAssistedQueryAssignment</span><span style="color:#E1E4E8;">(tableName, assignmentSegment, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addPlainAssignment</span><span style="color:#E1E4E8;">(tableName, assignmentSegment, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> EncryptAssignmentToken </span><span style="color:#6F42C1;">generateLiteralSQLToken</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String tableName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AssignmentSegment assignmentSegment) {</span></span>
<span class="line"><span style="color:#24292E;">        EncryptLiteralAssignmentToken result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptLiteralAssignmentToken</span><span style="color:#24292E;">(assignmentSegment.</span><span style="color:#6F42C1;">getColumn</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getStartIndex</span><span style="color:#24292E;">(), assignmentSegment.</span><span style="color:#6F42C1;">getStopIndex</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addCipherAssignment</span><span style="color:#24292E;">(tableName, assignmentSegment, result);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addAssistedQueryAssignment</span><span style="color:#24292E;">(tableName, assignmentSegment, result);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addPlainAssignment</span><span style="color:#24292E;">(tableName, assignmentSegment, result);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上面的 addCipherAssignment 方法为例，我们不难想象该方法通过调用 ShardingEncryptor 来完成了 CipherColumn 的设置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addCipherAssignment</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String tableName, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AssignmentSegment assignmentSegment, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EncryptLiteralAssignmentToken token) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object originalValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((LiteralExpressionSegment) assignmentSegment.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getLiterals</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object cipherValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEncryptRule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getEncryptValues</span><span style="color:#E1E4E8;">(tableName, assignmentSegment.</span><span style="color:#B392F0;">getColumn</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), Collections.</span><span style="color:#B392F0;">singletonList</span><span style="color:#E1E4E8;">(originalValue)).</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        token.</span><span style="color:#B392F0;">addAssignment</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getEncryptRule</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getCipherColumn</span><span style="color:#E1E4E8;">(tableName, assignmentSegment.</span><span style="color:#B392F0;">getColumn</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()), cipherValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addCipherAssignment</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String tableName, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AssignmentSegment assignmentSegment, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EncryptLiteralAssignmentToken token) {</span></span>
<span class="line"><span style="color:#24292E;">        Object originalValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((LiteralExpressionSegment) assignmentSegment.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">getLiterals</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Object cipherValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEncryptRule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getEncryptValues</span><span style="color:#24292E;">(tableName, assignmentSegment.</span><span style="color:#6F42C1;">getColumn</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(originalValue)).</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        token.</span><span style="color:#6F42C1;">addAssignment</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getEncryptRule</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getCipherColumn</span><span style="color:#24292E;">(tableName, assignmentSegment.</span><span style="color:#6F42C1;">getColumn</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()), cipherValue);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，我们对 EncryptSQLRewriteContextDecorator 的介绍就告一段落，这部分内容可以结合 <strong>&quot;20 | 改写引擎：如何理解装饰器模式下的 SQL 改写实现机制？&quot;</strong> 一起来看，以便加深理解。</p><h3 id="数据脱敏和结果归并" tabindex="-1">数据脱敏和结果归并 <a class="header-anchor" href="#数据脱敏和结果归并" aria-label="Permalink to &quot;数据脱敏和结果归并&quot;">​</a></h3><p>介绍完了 EncryptSQLRewriteContextDecorator 之后，接下来我们回到 EncryptStatement 类，继续探讨 getRewriteSQL 方法的后续流程。</p><p>我们回到 EncryptStatement 的 executeQuery 方法，回顾如下语句：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ResultSet resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statement.</span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getRewriteSQL</span><span style="color:#E1E4E8;">(sql));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ResultSet resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statement.</span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getRewriteSQL</span><span style="color:#24292E;">(sql));</span></span></code></pre></div><p>我们通过执行 executeQuery 方法获取了 ResultSet，但并不是直接返回这个 resultSet 对象，而是需要对其进行封装，构建一个 EncryptResultSet 对象，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptResultSet</span><span style="color:#E1E4E8;">(connection.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">(), sqlStatementContext, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, resultSet);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptResultSet</span><span style="color:#24292E;">(connection.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">(), sqlStatementContext, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, resultSet);</span></span></code></pre></div><p>EncryptResultSet 继承了 AbstractUnsupportedOperationResultSet 类，而 AbstractUnsupportedOperationResultSet 又继承了 AbstractUnsupportedUpdateOperationResultSet，这个 AbstractUnsupportedUpdateOperationResultSet 又继承了 WrapperAdapter 类并实现了 ResultSet 接口。所以 EncryptResultSet 也是一种适配器，这点和 EncryptDataSource、EncryptConnection 在本质上是一样的。</p><p>对于 EncryptResultSet 而言，存在一大批 get 方法，我们都不需要专门进行介绍，关键点在于构造函数中的如下方法：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mergedResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMergedResult</span><span style="color:#E1E4E8;">(queryWithCipherColumn, resultSet);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mergedResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMergedResult</span><span style="color:#24292E;">(queryWithCipherColumn, resultSet);</span></span></code></pre></div><p>我们知道 ShardingSphere 中，执行引擎之后就是归并引擎，而在 EncryptResultSet 中我们就用到了归并引擎并生成了 MergedResult。</p><p>EncryptResultSet 会先判断传入的 SQLStatement 是否是一种 DALStatement，如果是，则会调用 DALEncryptMergeEngine 完成结果归并；如果不是，则会使用 DQLEncryptMergeEngine，我们同样重点关注 DQLEncryptMergeEngine。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DQLEncryptMergeEngine</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MergeEngine</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EncryptorMetaData metaData;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> MergedResult mergedResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> queryWithCipherColumn;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MergedResult </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EncryptMergedResult</span><span style="color:#E1E4E8;">(metaData, mergedResult, queryWithCipherColumn);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DQLEncryptMergeEngine</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MergeEngine</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EncryptorMetaData metaData;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> MergedResult mergedResult;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> queryWithCipherColumn;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MergedResult </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EncryptMergedResult</span><span style="color:#24292E;">(metaData, mergedResult, queryWithCipherColumn);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>DQLEncryptMergeEngine 非常简单，其 merge 方法只是构建了一个 EncryptMergedResult 对象并进行返回。EncryptMergedResult 中核心方法 getValue 如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> columnIndex, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> type) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mergedResult.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(columnIndex, type);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">queryWithCipherColumn) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Optional&lt;</span><span style="color:#F97583;">ShardingEncryptor</span><span style="color:#E1E4E8;">&gt; encryptor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> metaData.</span><span style="color:#B392F0;">findEncryptor</span><span style="color:#E1E4E8;">(columnIndex);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> encryptor.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> encryptor.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">(value.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> columnIndex, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> type) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        Object value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mergedResult.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(columnIndex, type);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">queryWithCipherColumn) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">ShardingEncryptor</span><span style="color:#24292E;">&gt; encryptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> metaData.</span><span style="color:#6F42C1;">findEncryptor</span><span style="color:#24292E;">(columnIndex);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> encryptor.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> encryptor.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">(value.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，从上述流程中不难看出，数据脱敏模块中的归并实现实际上就是调用 ShardingEncryptor 的 decrypt 方法将加密列的密文解密成明文即可。</p><p>这样整个 EncryptStatement 的 executeQuery 方法的整体流程就介绍完毕了，理解了这个方法的实现过程之后，对于 EncryptStatement 和 EncryptPreparedStatement 的其他方法而言，理解起来就比较容易了。</p><h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>对于今天讨论的主题而言，能够直接应用到日常开发过程中的内容就是 ShardingEncryptor 的抽象过程，以及内部的加解密实现机制。ShardingSphere 使用了 DigestUtils 工具类来完成 MD5 算法的应用，以及 Base64 工具类来完成AES算法的实现。</p><p>这两个工具类都可以完全照搬到我们自己的系统中，从而添加成熟的加解密算法实现方案。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>今天，我们讨论了 ShardingSphere 中实现数据脱敏机制的底层原理。我们发现数据脱敏模块同时依赖于分片引擎中的改写引擎和归并引擎这两大块内容，尤其是改写引擎在数据脱敏过程中起到了核心作用，通过补列的方式完成明文数据与密文数据之间的自动加解密，以及透明的 SQL 转换过程。</p><p>这里留一道思考题：ShardingSphere 中，数据脱敏模块与改写引擎和归并引擎之间是怎么样的协作关系？欢迎你在留言区与大家讨论，我将逐一点评解答。</p><p>在介绍完今天的数据脱敏机制之后，明天将介绍一个同样非常有用的编排和治理功能，我们将基于配置中心解析实现配置信息动态化管理的底层原理。</p><p><a href="https://wj.qq.com/s2/7238084/d702/" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品~</a></p>`,32);function C(S,A,h,D,v,b){const a=e("Image");return t(),r("div",null,[E,y,i,g,u,l(a,{alt:"image (9).png",src:"https://s0.lgstatic.com/i/image/M00/57/0A/CgqCHl9sS86ASFTbAAB-yuAnnt4924.png"}),F,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/50/A8/CgqCHl9jFdmATyqTAAC9ufzW9Ag886.png"}),n(),d,l(a,{alt:"image (10).png",src:"https://s0.lgstatic.com/i/image/M00/57/0A/CgqCHl9sS-OAJsx-AACWGMkVQXg279.png"}),m])}const R=o(c,[["render",C]]);export{f as __pageData,R as default};
