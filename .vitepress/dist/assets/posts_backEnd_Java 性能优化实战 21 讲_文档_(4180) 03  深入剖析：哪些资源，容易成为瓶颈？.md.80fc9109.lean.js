import{_ as o,j as t,o as e,g as c,k as l,h as a,Q as p,s}from"./chunks/framework.4e7d56ce.js";const Q=JSON.parse('{"title":"CPU ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4180) 03  深入剖析：哪些资源，容易成为瓶颈？.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4180) 03  深入剖析：哪些资源，容易成为瓶颈？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4180) 03  深入剖析：哪些资源，容易成为瓶颈？.md"},i=p("",9),y=p("",5),E=p("",8),_=p("",6),h=s("p",null,[a("我们在平常写完代码后，比如写了一个 C++ 程序，去查看它的汇编，如果看到其中的内存地址，并不是实际的物理内存地址，那么应用程序所使用的，就是"),s("strong",null,"逻辑内存"),a("。学过计算机组成结构的同学应该都有了解。")],-1),d=s("p",null,[a("逻辑地址可以映射到两个内存段上："),s("strong",null,"物理内存"),a(" 和"),s("strong",null,"虚拟内存"),a("，那么整个系统可用的内存就是两者之和。比如你的物理内存是 4GB，分配了 8GB 的 SWAP 分区，那么应用可用的总内存就是 12GB。")],-1),g=s("h4",{id:"_1-top-命令",tabindex:"-1"},[a("1. top 命令 "),s("a",{class:"header-anchor",href:"#_1-top-命令","aria-label":'Permalink to "1. top 命令"'},"​")],-1),u=p("",4),C=p("",9),A=s("p",null,"我们再回顾一下上文提到的这张图，上面有一个 TLB 组件，它的速度很快，但容量有限，在普通的 PC 机上没有什么瓶颈。但如果机器配置比较高，物理内存比较大，那就会产生非常多的映射表，CPU 的检索效率也会随之降低。",-1),m=s("p",null,[a("传统的页大小是 4KB，在大内存时代这个值偏小了，解决的办法就是增加页的尺寸，比如将其增加到 2MB，这样，就可以使用较少的映射表来管理大内存。而这种将页增大的技术，就是 "),s("strong",null,"Huge Page"),a("。")],-1),F=s("p",null,"同时，HugePage 也伴随着一些副作用，比如竞争加剧，但在一些大内存的机器上，开启后在一定程度上会增加性能。",-1),P=s("h4",{id:"_4-预先加载",tabindex:"-1"},[a("4. 预先加载 "),s("a",{class:"header-anchor",href:"#_4-预先加载","aria-label":'Permalink to "4. 预先加载"'},"​")],-1),D=s("p",null,"另外，一些程序的默认行为也会对性能有所影响，比如 JVM 的 -XX:+AlwaysPreTouch 参数。",-1),v=s("p",null,"默认情况下，JVM 虽然配置了 Xmx、Xms 等参数，指定堆的初始化大小和最大大小，但它的内存在真正用到时，才会分配；但如果加上 AlwaysPreTouch 这个参数，JVM 会在启动的时候，就把所有的内存预先分配。",-1),U=s("p",null,"这样，启动时虽然慢了些，但运行时的性能会增加。",-1),T=s("h3",{id:"i-o",tabindex:"-1"},[a("I/O "),s("a",{class:"header-anchor",href:"#i-o","aria-label":'Permalink to "I/O"'},"​")],-1),b=s("p",null,"I/O 设备可能是计算机里速度最慢的组件了，它指的不仅仅是硬盘，还包括外围的所有设备。那硬盘有多慢呢？我们不去探究不同设备的实现细节，直接看它的写入速度（数据未经过严格测试，仅作参考）。",-1),V=s("p",null,"如上图所示，可以看到普通磁盘的随机写与顺序写相差非常大，但顺序写与 CPU 内存依旧不在一个数量级上。",-1),k=s("p",null,[s("strong",null,"缓冲区依然是解决速度差异的唯一工具"),a("，但在极端情况下，比如断电时，就产生了太多的不确定性，这时这些缓冲区，都容易丢。由于这部分内容的篇幅比较大，我将在第 06 课时专门讲解。")],-1),B=s("h4",{id:"_1-iostat",tabindex:"-1"},[a("1. iostat "),s("a",{class:"header-anchor",href:"#_1-iostat","aria-label":'Permalink to "1. iostat"'},"​")],-1),x=s("p",null,"最能体现 I/O 繁忙程度的，就是 top 命令和 vmstat 命令中的 wa%。如果你的应用写了大量的日志，I/O wait 就可能非常高。",-1),I=s("p",null,"很多同学反馈到，不知道有哪些便捷好用的查看磁盘 I/O 的工具，其实 iostat 就是。你可以通过 sysstat 包进行安装。",-1),q=p("",8),S=s("p",null,"没有采取零拷贝手段的图",-1),f=s("p",null,"（2）采取了零拷贝手段",-1),R=s("p",null,"零拷贝有多种模式，我们用 sendfile 来举例。如下图所示，在内核的支持下，零拷贝少了一个步骤，那就是内核缓存向用户空间的拷贝，这样既节省了内存，也节省了 CPU 的调度时间，让效率更高。",-1),z=s("p",null,"采取了零拷贝手段的图",-1),w=s("h3",{id:"小结",tabindex:"-1"},[a("小结 "),s("a",{class:"header-anchor",href:"#小结","aria-label":'Permalink to "小结"'},"​")],-1),M=s("p",null,"本课时我们学习了计算机中对性能影响最大的三个组件：CPU、内存、I/O，并深入了解了观测它们性能的一些命令，这些方式可以帮我们大体猜测性能问题发生的地方。",-1),O=s("p",null,"但它们对性能问题，只能起到辅助作用，不能帮助我们精准地定位至真正的性能瓶颈，还需要做更多深入的排查工作，收集更多信息。",-1),H=s("p",null,"最后留一个思考题：磁盘的速度这么慢，为什么 Kafka 操作磁盘，吞吐量还能那么高？你可以先在留言区讨论，下一课时我会讲解。",-1),K=s("p",null,"不知你在实际的工作中是否还有其他的疑惑，欢迎留言讨论，我会一一解答~",-1),N=s("p",null,'在接下来的第 04 课时，我将介绍一系列更深入的工具，帮你获取性能数据，离"病灶"更近一步。',-1);function J(X,G,Z,W,$,j){const n=t("Image");return e(),c("div",null,[i,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/35/51/Ciqc1F8VRhOAOZZkAAIR0PdGn-M708.png"}),y,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/35/52/Ciqc1F8VRlWAKi0UAABUtUrc7Ec737.png"}),E,l(n,{alt:"1111.gif",src:"https://s0.lgstatic.com/i/image/M00/35/8B/CgqCHl8VeDqAOXoUAAL5_mAD--A654.gif"}),_,l(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/35/7F/Ciqc1F8VdzuABJH4AAC4RXZgIoo881.png"}),h,d,g,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/35/52/Ciqc1F8VRpyAJEDBAAGXn95jReA806.png"}),u,l(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/35/7F/Ciqc1F8Vd0qAZcrnAACrWqlXWc0083.png"}),C,l(n,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image/M00/35/8A/CgqCHl8Vd1SAVNobAACyxjKDIxk345.png"}),A,m,l(n,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image/M00/35/8A/CgqCHl8Vd1-AVCnzAADX6l8HGwo687.png"}),F,P,D,v,U,T,b,l(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/35/52/Ciqc1F8VRxaAK34SAAHTZp7R44c733.png"}),V,k,B,x,l(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/35/5E/CgqCHl8VRzqALt_DAASmJQkN7Ro492.png"}),I,l(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/35/5E/CgqCHl8VR0KARZVeAAWCFxfk75s510.png"}),q,l(n,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image/M00/35/8A/CgqCHl8Vd26APrVIAAB4D39Hu4g101.png"}),a(),S,f,R,l(n,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image/M00/35/7F/Ciqc1F8Vd36AermYAACHMXg2gv0583.png"}),a(),z,w,M,O,H,K,N])}const Y=o(r,[["render",J]]);export{Q as __pageData,Y as default};
