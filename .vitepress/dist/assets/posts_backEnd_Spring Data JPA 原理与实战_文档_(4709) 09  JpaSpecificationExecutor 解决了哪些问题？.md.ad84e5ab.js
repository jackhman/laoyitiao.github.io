import{_ as o,D as e,o as t,g as r,J as l,h as a,m as s,Q as p}from"./chunks/framework.f67d7268.js";const Q=JSON.parse('{"title":"09JpaSpecificationExecutor解决了哪些问题？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4709) 09  JpaSpecificationExecutor 解决了哪些问题？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4709) 09  JpaSpecificationExecutor 解决了哪些问题？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4709) 09  JpaSpecificationExecutor 解决了哪些问题？.md"},E=s("h1",{id:"_09jpaspecificationexecutor解决了哪些问题",tabindex:"-1"},[a("09JpaSpecificationExecutor解决了哪些问题？ "),s("a",{class:"header-anchor",href:"#_09jpaspecificationexecutor解决了哪些问题","aria-label":'Permalink to "09JpaSpecificationExecutor解决了哪些问题？"'},"​")],-1),y=s("p",null,"欢迎来到第二个模块，从这一课时开始，我们就要进入高级用法与实战的学习。在进阶高级开发 / 架构师的路上，我将尽可能把经验都传授给你，帮助你少走弯路。",-1),i=s("p",null,"学习完前面 8 个课时，相信作为一名开发人员，你对 JPA 的基本用法已经有了一定的了解。那么从这一课时开始，我们要介绍一些复杂场景的使用，特别是作为一名架构师必须要掌握的内容。",-1),d=s("p",null,"我们先来看看除了前几节课我们讲解的 Define Query Method 和 @Query 之外，还有哪些查询方法。首先看一个简单的 QueryByExampleExecutor 用法。",-1),F=s("h3",{id:"querybyexampleexecutor用法",tabindex:"-1"},[a("QueryByExampleExecutor用法 "),s("a",{class:"header-anchor",href:"#querybyexampleexecutor用法","aria-label":'Permalink to "QueryByExampleExecutor用法"'},"​")],-1),u=s("p",null,"QueryByExampleExecutor（QBE）是一种用户友好的查询技术，具有简单的接口，它允许动态查询创建，并且不需要编写包含字段名称的查询。",-1),g=s("p",null,"下面是一个 UML 图，你可以看到 QueryByExampleExecutor 是 JpaRepository 的父接口，也就是 JpaRespository 里面继承了 QueryByExampleExecutor 的所有方法。",-1),h=p(`<p>图一：Repository 类图</p><h4 id="qbe-的基本语法" tabindex="-1">QBE 的基本语法 <a class="header-anchor" href="#qbe-的基本语法" aria-label="Permalink to &quot;QBE 的基本语法&quot;">​</a></h4><p>QBE 的基本语法可以分为下述几种。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">QueryByExampleExecutor</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找一个对象</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Example</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">&gt; example);</span></span>
<span class="line"><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找一批对象</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Iterable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Example</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">&gt; example); </span></span>
<span class="line"><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找一批对象，可以指定排序参数</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Iterable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Example</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">&gt; example, </span><span style="color:#79B8FF;">Sort</span><span style="color:#E1E4E8;"> sort);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找一批对象，可以指定排序和分页参数 </span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Page</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Example</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">&gt; example, </span><span style="color:#79B8FF;">Pageable</span><span style="color:#E1E4E8;"> pageable);</span></span>
<span class="line"><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找返回符合条件的对象个数</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> long </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Example</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">&gt; example); </span></span>
<span class="line"><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，判断是否有符合条件的对象</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> boolean </span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Example</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">S</span><span style="color:#E1E4E8;">&gt; example); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">QueryByExampleExecutor</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找一个对象</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">S</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Example</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">&gt; example);</span></span>
<span class="line"><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找一批对象</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Iterable</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Example</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">&gt; example); </span></span>
<span class="line"><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找一批对象，可以指定排序参数</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Iterable</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Example</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">&gt; example, </span><span style="color:#005CC5;">Sort</span><span style="color:#24292E;"> sort);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找一批对象，可以指定排序和分页参数 </span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Page</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Example</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">&gt; example, </span><span style="color:#005CC5;">Pageable</span><span style="color:#24292E;"> pageable);</span></span>
<span class="line"><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，查找返回符合条件的对象个数</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> long </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Example</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">&gt; example); </span></span>
<span class="line"><span style="color:#6A737D;">//根据&quot;实体&quot;查询条件，判断是否有符合条件的对象</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> boolean </span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Example</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">S</span><span style="color:#24292E;">&gt; example); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以看到这几个语法其实差不多，下面我们用 Page<code>&lt;S&gt;</code> findAll 写一个分页查询的例子，看一下效果。</p><h4 id="querybyexampleexecutor-的使用案例" tabindex="-1">QueryByExampleExecutor 的使用案例 <a class="header-anchor" href="#querybyexampleexecutor-的使用案例" aria-label="Permalink to &quot;QueryByExampleExecutor 的使用案例&quot;">​</a></h4><p>我们还用先前的 User 实体和 UserAddress 实体，并把 User 变丰富一点，这样方便测试。两个实体关键代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Enumerated</span><span style="color:#E1E4E8;">(EnumType.STRING)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SexEnum sex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer age;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Instant createDate;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Date updateDate;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.EAGER,</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {CascadeType.ALL})</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">&gt; address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SexEnum</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">BOY</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">GIRL</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//User实体我们扩充了一些字段去了不同的类型，方便测试</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserAddress</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.ALL)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonIgnore</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> User user;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//UserAddress基本上不变</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Enumerated</span><span style="color:#24292E;">(EnumType.STRING)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SexEnum sex;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer age;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Instant createDate;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Date updateDate;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.EAGER,</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {CascadeType.ALL})</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">&gt; address;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SexEnum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">BOY</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">GIRL</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//User实体我们扩充了一些字段去了不同的类型，方便测试</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserAddress</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String address;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.ALL)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonIgnore</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> User user;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//UserAddress基本上不变</span></span></code></pre></div><p>可以看出两个实体我们加了些字段。UserAddressRepository 继承 JpaRepository，从而也继承了 QueryByExampleExceutor 里面的方法，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserAddressRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserAddressRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么我们写一个测试用例，来熟悉一下 QBE 的语法，看一下完整的测试用例的写法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.google.common.collect.Lists;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.BeforeAll;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.TestInstance;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.domain.Example;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.domain.ExampleMatcher;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.domain.Page;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.domain.PageRequest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.test.annotation.Rollback;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.transaction.Transactional;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.Date;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TestInstance</span><span style="color:#E1E4E8;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserAddressRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserAddressRepository userAddressRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Date now </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 负责添加数据，假设数据库里面已经有的数据</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">BeforeAll</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(SexEnum.BOY)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">createDate</span><span style="color:#E1E4E8;">(Instant.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">updateDate</span><span style="color:#E1E4E8;">(now)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      userAddressRepository.</span><span style="color:#B392F0;">saveAll</span><span style="color:#E1E4E8;">(Lists.</span><span style="color:#B392F0;">newArrayList</span><span style="color:#E1E4E8;">(UserAddress.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shanghai&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            UserAddress.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;beijing&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testQBEFromUserAddress</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#E1E4E8;">      User request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      UserAddress address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserAddress.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;shang&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">(request).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      ObjectMapper objectMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ObjectMapper</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//    System.out.println(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(address)); //可以打印出来看看参数是什么</span></span>
<span class="line"><span style="color:#6A737D;">//创建匹配器，即如何使用查询条件</span></span>
<span class="line"><span style="color:#E1E4E8;">      ExampleMatcher exampleMatcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExampleMatcher.</span><span style="color:#B392F0;">matching</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">withMatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user.email&quot;</span><span style="color:#E1E4E8;">, ExampleMatcher.GenericPropertyMatchers.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">withMatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">, ExampleMatcher.GenericPropertyMatchers.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      Page&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">&gt; u </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userAddressRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(address,exampleMatcher), PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(objectMapper.</span><span style="color:#B392F0;">writerWithDefaultPrettyPrinter</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">writeValueAsString</span><span style="color:#E1E4E8;">(u));</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.core.JsonProcessingException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.databind.ObjectMapper;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.google.common.collect.Lists;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.BeforeAll;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.TestInstance;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.domain.Example;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.domain.ExampleMatcher;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.domain.Page;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.domain.PageRequest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.test.annotation.Rollback;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.transaction.Transactional;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Date;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TestInstance</span><span style="color:#24292E;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserAddressRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserAddressRepository userAddressRepository;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Date now </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 负责添加数据，假设数据库里面已经有的数据</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">BeforeAll</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(SexEnum.BOY)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">createDate</span><span style="color:#24292E;">(Instant.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">updateDate</span><span style="color:#24292E;">(now)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      userAddressRepository.</span><span style="color:#6F42C1;">saveAll</span><span style="color:#24292E;">(Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(UserAddress.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shanghai&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">            UserAddress.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;beijing&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testQBEFromUserAddress</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JsonProcessingException {</span></span>
<span class="line"><span style="color:#24292E;">      User request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      UserAddress address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserAddress.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;shang&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">(request).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      ObjectMapper objectMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectMapper</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//    System.out.println(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(address)); //可以打印出来看看参数是什么</span></span>
<span class="line"><span style="color:#6A737D;">//创建匹配器，即如何使用查询条件</span></span>
<span class="line"><span style="color:#24292E;">      ExampleMatcher exampleMatcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExampleMatcher.</span><span style="color:#6F42C1;">matching</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">withMatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user.email&quot;</span><span style="color:#24292E;">, ExampleMatcher.GenericPropertyMatchers.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">withMatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">, ExampleMatcher.GenericPropertyMatchers.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      Page&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">&gt; u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userAddressRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(address,exampleMatcher), PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(objectMapper.</span><span style="color:#6F42C1;">writerWithDefaultPrettyPrinter</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">writeValueAsString</span><span style="color:#24292E;">(u));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，方法 testQBEFromUserAddress 负责测试 QBE，那么假设我们要写 API 的话，前端给我们的查询参数如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;shang&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;createDate&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;updateDate&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;shang&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;createDate&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;updateDate&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>想要满足 email 前缀匹配、地址前缀匹配的动态查询条件，我们可以跑一下测试用例看一下结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select useraddres0_.id as id1_2_, useraddres0_.address as address2_2_, useraddres0_.user_id as user_id3_2_ from user_address useraddres0_ inner join user user1_ on useraddres0_.user_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user1_.id where user1_.age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (user1_.email like </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> escape </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) and user1_.name</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (useraddres0_.address like </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> escape </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) limit </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">09</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">04</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24.391</span><span style="color:#E1E4E8;"> TRACE </span><span style="color:#79B8FF;">62179</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> binding parameter [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] as [VARCHAR] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">12345</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">09</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">04</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24.391</span><span style="color:#E1E4E8;"> TRACE </span><span style="color:#79B8FF;">62179</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> binding parameter [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] as [CHAR] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> [\\]</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">09</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">04</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24.392</span><span style="color:#E1E4E8;"> TRACE </span><span style="color:#79B8FF;">62179</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> binding parameter [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] as [VARCHAR] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> [jack]</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">09</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">04</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24.392</span><span style="color:#E1E4E8;"> TRACE </span><span style="color:#79B8FF;">62179</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> binding parameter [</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] as [VARCHAR] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> [shang</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">09</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">04</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">24.393</span><span style="color:#E1E4E8;"> TRACE </span><span style="color:#79B8FF;">62179</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> binding parameter [</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">] as [CHAR] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> [\\]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select useraddres0_.id as id1_2_, useraddres0_.address as address2_2_, useraddres0_.user_id as user_id3_2_ from user_address useraddres0_ inner join user user1_ on useraddres0_.user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user1_.id where user1_.age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (user1_.email like </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> escape </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) and user1_.name</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (useraddres0_.address like </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> escape </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) limit </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">09</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">04</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24.391</span><span style="color:#24292E;"> TRACE </span><span style="color:#005CC5;">62179</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> binding parameter [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] as [VARCHAR] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">12345</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">09</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">04</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24.391</span><span style="color:#24292E;"> TRACE </span><span style="color:#005CC5;">62179</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> binding parameter [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] as [CHAR] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> [\\]</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">09</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">04</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24.392</span><span style="color:#24292E;"> TRACE </span><span style="color:#005CC5;">62179</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> binding parameter [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] as [VARCHAR] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> [jack]</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">09</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">04</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24.392</span><span style="color:#24292E;"> TRACE </span><span style="color:#005CC5;">62179</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> binding parameter [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] as [VARCHAR] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> [shang</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">09</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">04</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">24.393</span><span style="color:#24292E;"> TRACE </span><span style="color:#005CC5;">62179</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] o.h.type.descriptor.sql.BasicBinder      </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> binding parameter [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">] as [CHAR] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> [\\]</span></span></code></pre></div><p>其中我们可以看到，传进来的参数和最终执行的 SQL，还挺符合我们的预期的，所以我们也能得到正确响应的查询结果，如下图：</p>`,17),A=p(`<p>也就是一个地址带一个 User 结果。</p><p>那么接下来我们分析一下 Example 这个参数，看看它具体的语法是什么。</p><h4 id="example-语法详解" tabindex="-1">Example 语法详解 <a class="header-anchor" href="#example-语法详解" aria-label="Permalink to &quot;Example 语法详解&quot;">​</a></h4><p>关于 Example 的语法，我们直接看一下它的源码吧，比较简单。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Example</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Example&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">probe</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TypedExample&lt;&gt;(probe, ExampleMatcher.</span><span style="color:#B392F0;">matching</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; Example&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">probe</span><span style="color:#E1E4E8;">, ExampleMatcher </span><span style="color:#FFAB70;">matcher</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TypedExample&lt;&gt;(probe, matcher);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//实体参数</span></span>
<span class="line"><span style="color:#E1E4E8;">   T </span><span style="color:#B392F0;">getProbe</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//匹配器</span></span>
<span class="line"><span style="color:#E1E4E8;">   ExampleMatcher </span><span style="color:#B392F0;">getMatcher</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//回顾一下我们上一课时讲解的类型，这个是返回实体参数的Class Type；</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">SuppressWarnings</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unchecked&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getProbeType</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) ProxyUtils.</span><span style="color:#B392F0;">getUserClass</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getProbe</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Example</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Example&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">probe</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TypedExample&lt;&gt;(probe, ExampleMatcher.</span><span style="color:#6F42C1;">matching</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; Example&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">probe</span><span style="color:#24292E;">, ExampleMatcher </span><span style="color:#E36209;">matcher</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TypedExample&lt;&gt;(probe, matcher);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//实体参数</span></span>
<span class="line"><span style="color:#24292E;">   T </span><span style="color:#6F42C1;">getProbe</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//匹配器</span></span>
<span class="line"><span style="color:#24292E;">   ExampleMatcher </span><span style="color:#6F42C1;">getMatcher</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//回顾一下我们上一课时讲解的类型，这个是返回实体参数的Class Type；</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">SuppressWarnings</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unchecked&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getProbeType</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) ProxyUtils.</span><span style="color:#6F42C1;">getUserClass</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getProbe</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>而 TypedExample 这个类不是 public 的，看如下源码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EqualsAndHashCode</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequiredArgsConstructor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">access</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AccessLevel.PACKAGE)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypedExample</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Example</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">NonNull</span><span style="color:#E1E4E8;"> T probe;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">NonNull</span><span style="color:#E1E4E8;"> ExampleMatcher matcher;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EqualsAndHashCode</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequiredArgsConstructor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">access</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AccessLevel.PACKAGE)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypedExample</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Example</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">NonNull</span><span style="color:#24292E;"> T probe;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">NonNull</span><span style="color:#24292E;"> ExampleMatcher matcher;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中我们发现三个类：Probe、ExampleMatcher 和 Example，分别做如下解释：</p><ul><li><p>Probe：这是具有填充字段的域对象的实际实体类，即查询条件的封装类（又可以理解为查询条件参数），必填。</p></li><li><p>ExampleMatcher：ExampleMatcher 有关如何匹配特定字段的匹配规则，它可以重复使用在多个实例中，必填。</p></li><li><p>Example：Example 由 Probe 探针和 ExampleMatcher 组成，它用于创建查询，即组合查询参数和参数的匹配规则。</p></li></ul><p>通过 Example 的源码，我们发现想创建 Example 的话，只有两个方法：</p><ol><li><p>static <code> &lt;T&gt;</code> Example<code>&lt;T&gt;</code> of(T probe)：需要一个实体参数，即查询的条件。而里面的 ExampleMatcher 采用默认的 ExampleMatcher.matching()； 表示忽略 Null，所有字段采用精准匹配。</p></li><li><p>static <code>&lt;T&gt;</code> Example<code>&lt;T&gt;</code> of(T probe, ExampleMatcher matcher)：需要两个参数构建 Example，也就表示了 ExampleMatcher 自由组合规则，正如我们上面的测试用例里面的代码一样。</p></li></ol><p>那么现在又遇到个类：ExampleMatcher，我们分析一下它的语法。</p><h4 id="examplematcher-语法分析" tabindex="-1">ExampleMatcher 语法分析 <a class="header-anchor" href="#examplematcher-语法分析" aria-label="Permalink to &quot;ExampleMatcher 语法分析&quot;">​</a></h4><p>我们通过分析 ExampleMatcher 的源码来分析一下其用法。</p><p>首先打开 Structure 视图，看看里面对外暴露的方法都有哪些。</p>`,15),C=s("p",null,"通过 Structure 视图可以很容易地发现，我们要关心的方法都是这些 public 类型的返回 ExampleMatcher 的方法，那么我们把这些方法搞明白了是不是就可以掌握其详细用法了呢？下面看看它的实现类。",-1),m=p(`<p>TypedExampleMatcher 不是 public 类型的，所以我们可以基本上不用看了，主要看一下接口里面给我们暴露了哪些实例化方法。</p><h5 id="初始化-examplematcher-实例的方法" tabindex="-1">初始化 ExampleMatcher 实例的方法 <a class="header-anchor" href="#初始化-examplematcher-实例的方法" aria-label="Permalink to &quot;初始化 ExampleMatcher 实例的方法&quot;">​</a></h5><p>查看初始化 ExampleMatcher 实例的方法时，我们发现只有如下三个。</p><p>先看一下前两个方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//默认matching方法</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ExampleMatcher </span><span style="color:#B392F0;">matching</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">matchingAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//matchingAll，默认的方法</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ExampleMatcher </span><span style="color:#B392F0;">matchingAll</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypedExampleMatcher</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(MatchMode.ALL);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//默认matching方法</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ExampleMatcher </span><span style="color:#6F42C1;">matching</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">matchingAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//matchingAll，默认的方法</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ExampleMatcher </span><span style="color:#6F42C1;">matchingAll</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypedExampleMatcher</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(MatchMode.ALL);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到上面的两个方法所表达的意思是一样的，只不过一个是默认，一个是方法名上面有语义的。两者采用的都是 MatchMode.ALL 的模式，即 AND 模式，生成的 SQL 为如下形式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select useraddres0_.id as id1_2_, useraddres0_.address as address2_2_, useraddres0_.user_id as user_id3_2_ from user_address useraddres0_ inner join user user1_ on useraddres0_.user_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user1_.id where user1_.age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> and user1_.name</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (user1_.email like </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> escape </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (useraddres0_.address like </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> escape </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) limit </span><span style="color:#F97583;">?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select useraddres0_.id as id1_2_, useraddres0_.address as address2_2_, useraddres0_.user_id as user_id3_2_ from user_address useraddres0_ inner join user user1_ on useraddres0_.user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user1_.id where user1_.age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> and user1_.name</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (user1_.email like </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> escape </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (useraddres0_.address like </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> escape </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) limit </span><span style="color:#D73A49;">?</span></span></code></pre></div><p>可以看到，这些查询条件之间都是 AND 的关系。</p><p>我们再看一下方法三：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ExampleMatcher </span><span style="color:#B392F0;">matchingAny</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypedExampleMatcher</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(MatchMode.ANY);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ExampleMatcher </span><span style="color:#6F42C1;">matchingAny</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypedExampleMatcher</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(MatchMode.ANY);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三个方法和前面两个方法的区别在于：第三个 MatchMode.ANY，表示查询条件是 or 的关系，我们看一下 SQL：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">(useraddres0_.id) as col_0_0_ from user_address useraddres0_ inner join user user1_ on useraddres0_.user_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user1_.id where useraddres0_.address like </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> escape </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> or user1_.age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> or user1_.email like </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> escape </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> or user1_.name</span><span style="color:#F97583;">=?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(useraddres0_.id) as col_0_0_ from user_address useraddres0_ inner join user user1_ on useraddres0_.user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user1_.id where useraddres0_.address like </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> escape </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> or user1_.age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> or user1_.email like </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> escape </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> or user1_.name</span><span style="color:#D73A49;">=?</span></span></code></pre></div><p>以上就是三个初始化 ExampleMatcher 实例的方法，你在运用中需要注意 and 和 or 的关系。</p><p>那么，我们再看一下 ExampleMatcher 语法给我们暴露的方法有哪些。</p><h5 id="examplematcher-语法给我们暴露的方法" tabindex="-1">ExampleMatcher 语法给我们暴露的方法 <a class="header-anchor" href="#examplematcher-语法给我们暴露的方法" aria-label="Permalink to &quot;ExampleMatcher 语法给我们暴露的方法&quot;">​</a></h5><p><strong>忽略大小写</strong></p><p>关于忽略大小写，我们看下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//默认忽略大小写的方式，默认 False。</span></span>
<span class="line"><span style="color:#E1E4E8;">ExampleMatcher </span><span style="color:#B392F0;">withIgnoreCase</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> defaultIgnoreCase);</span></span>
<span class="line"><span style="color:#6A737D;">//提供了一个默认的实现方法，忽略大小写；</span></span>
<span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> ExampleMatcher </span><span style="color:#B392F0;">withIgnoreCase</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withIgnoreCase</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//哪些属性的paths忽略大小写，可以指定多个参数；</span></span>
<span class="line"><span style="color:#E1E4E8;">ExampleMatcher </span><span style="color:#B392F0;">withIgnoreCase</span><span style="color:#E1E4E8;">(String... propertyPaths);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//默认忽略大小写的方式，默认 False。</span></span>
<span class="line"><span style="color:#24292E;">ExampleMatcher </span><span style="color:#6F42C1;">withIgnoreCase</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> defaultIgnoreCase);</span></span>
<span class="line"><span style="color:#6A737D;">//提供了一个默认的实现方法，忽略大小写；</span></span>
<span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> ExampleMatcher </span><span style="color:#6F42C1;">withIgnoreCase</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withIgnoreCase</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//哪些属性的paths忽略大小写，可以指定多个参数；</span></span>
<span class="line"><span style="color:#24292E;">ExampleMatcher </span><span style="color:#6F42C1;">withIgnoreCase</span><span style="color:#24292E;">(String... propertyPaths);</span></span></code></pre></div><p><strong>NULL 值的 property 怎么处理</strong></p><p>暴露的 Null 值处理方式如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ExampleMatcher </span><span style="color:#B392F0;">withNullHandler</span><span style="color:#E1E4E8;">(NullHandler nullHandler);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ExampleMatcher </span><span style="color:#6F42C1;">withNullHandler</span><span style="color:#24292E;">(NullHandler nullHandler);</span></span></code></pre></div><p>我们直接看参数 NullHandler枚举值即可，有两个可选值：INCLUDE（包括）、IGNORE（忽略），其中要注意：</p><ul><li><p>标识作为条件的实体对象中，一个属性值（条件值）为 Null 时，是否参与过滤；</p></li><li><p>当该选项值是 INCLUDE 时，表示仍参与过滤，会匹配数据库表中该字段值是 Null 的记录；</p></li><li><p>若为 IGNORE 值，表示不参与过滤。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//提供一个默认实现方法，忽略 NULL 属性；</span></span>
<span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> ExampleMatcher </span><span style="color:#B392F0;">withIgnoreNullValues</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withNullHandler</span><span style="color:#E1E4E8;">(NullHandler.IGNORE);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//把 NULL 属性值作为查询条件</span></span>
<span class="line"><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> ExampleMatcher </span><span style="color:#B392F0;">withIncludeNullValues</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withNullHandler</span><span style="color:#E1E4E8;">(NullHandler.INCLUDE);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//提供一个默认实现方法，忽略 NULL 属性；</span></span>
<span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> ExampleMatcher </span><span style="color:#6F42C1;">withIgnoreNullValues</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withNullHandler</span><span style="color:#24292E;">(NullHandler.IGNORE);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//把 NULL 属性值作为查询条件</span></span>
<span class="line"><span style="color:#D73A49;">default</span><span style="color:#24292E;"> ExampleMatcher </span><span style="color:#6F42C1;">withIncludeNullValues</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">withNullHandler</span><span style="color:#24292E;">(NullHandler.INCLUDE);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里看一下，把 NULL 属性值作为查询条件，会执行什么样的 SQL：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Hibernate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select useraddres0_.id as id1_2_, useraddres0_.address as address2_2_, useraddres0_.user_id as user_id3_2_ from user_address useraddres0_ inner join user user1_ on useraddres0_.user_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user1_.id </span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;"> (user1_.id is </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (user1_.update_date is </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) and user1_.age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (user1_.create_date is </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) and </span><span style="color:#B392F0;">lower</span><span style="color:#E1E4E8;">(user1_.name)</span><span style="color:#F97583;">=?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">lower</span><span style="color:#E1E4E8;">(user1_.email) like </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> escape </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (user1_.sex is </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">lower</span><span style="color:#E1E4E8;">(useraddres0_.address) like </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> escape </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> (useraddres0_.id is </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) limit </span><span style="color:#F97583;">?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Hibernate</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select useraddres0_.id as id1_2_, useraddres0_.address as address2_2_, useraddres0_.user_id as user_id3_2_ from user_address useraddres0_ inner join user user1_ on useraddres0_.user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user1_.id </span><span style="color:#6F42C1;">where</span><span style="color:#24292E;"> (user1_.id is </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (user1_.update_date is </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) and user1_.age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (user1_.create_date is </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) and </span><span style="color:#6F42C1;">lower</span><span style="color:#24292E;">(user1_.name)</span><span style="color:#D73A49;">=?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">lower</span><span style="color:#24292E;">(user1_.email) like </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> escape </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (user1_.sex is </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">lower</span><span style="color:#24292E;">(useraddres0_.address) like </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> escape </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> (useraddres0_.id is </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) limit </span><span style="color:#D73A49;">?</span></span></code></pre></div><p>这样就会导致我们一条数据都查不出来了。<br><strong>忽略某些 Paths，不参加查询条件</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//忽略某些属性列表，不参与查询过滤条件。</span></span>
<span class="line"><span style="color:#E1E4E8;">ExampleMatcher </span><span style="color:#B392F0;">withIgnorePaths</span><span style="color:#E1E4E8;">(String... ignoredPaths);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//忽略某些属性列表，不参与查询过滤条件。</span></span>
<span class="line"><span style="color:#24292E;">ExampleMatcher </span><span style="color:#6F42C1;">withIgnorePaths</span><span style="color:#24292E;">(String... ignoredPaths);</span></span></code></pre></div><h5 id="字符串字段默认的匹配规则" tabindex="-1">字符串字段默认的匹配规则 <a class="header-anchor" href="#字符串字段默认的匹配规则" aria-label="Permalink to &quot;字符串字段默认的匹配规则&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ExampleMatcher </span><span style="color:#B392F0;">withStringMatcher</span><span style="color:#E1E4E8;">(StringMatcher defaultStringMatcher);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ExampleMatcher </span><span style="color:#6F42C1;">withStringMatcher</span><span style="color:#24292E;">(StringMatcher defaultStringMatcher);</span></span></code></pre></div><p>关于默认字符串的匹配方式，枚举类型有 6 个可选值，DEFAULT（默认，效果同 EXACT）、EXACT（相等）、STARTING（开始匹配）、ENDING（结束匹配）、CONTAINING（包含，模糊匹配）、REGEX（正则表达式）。</p><p>字符串匹配规则，我们和 JPQL 对应到一起举例，如下表所示：</p>`,32),D=p('<p>相关代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ExampleMatcher </span><span style="color:#B392F0;">withMatcher</span><span style="color:#E1E4E8;">(String propertyPath, GenericPropertyMatcher genericPropertyMatcher);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ExampleMatcher </span><span style="color:#6F42C1;">withMatcher</span><span style="color:#24292E;">(String propertyPath, GenericPropertyMatcher genericPropertyMatcher);</span></span></code></pre></div><p>这里显示的是指定某些属性的匹配规则，我们看一下 GenericPropertyMatcher 是什么东西，它都提供了哪些方法。</p><p>如下图，基本可以看出来都是针对字符串属性提供的匹配规则，也就是可以通过这个方法定制不同属性的 StringMatcher 规则。</p>',4),_=p(`<p>到这里，语法部分我们就学习完了，下面看一个完整的例子感受一下。</p><h4 id="完整的例子" tabindex="-1">完整的例子 <a class="header-anchor" href="#完整的例子" aria-label="Permalink to &quot;完整的例子&quot;">​</a></h4><p>下面是一个关于咱们上面所说的暴露的方法的使用的例子，你可以跟着我的步骤自己动手练习一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//创建匹配器，即如何使用查询条件</span></span>
<span class="line"><span style="color:#E1E4E8;">ExampleMatcher exampleMatcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExampleMatcher</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//采用默认and的查询方式</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">matchingAll</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//忽略大小写</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">withIgnoreCase</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//忽略所有null值的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">withIgnoreNullValues</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">withIgnorePaths</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;createDate&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//默认采用精准匹配规则</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">withStringMatcher</span><span style="color:#E1E4E8;">(ExampleMatcher.StringMatcher.EXACT)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//级联查询，字段user.email采用字符前缀匹配规则</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">withMatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user.email&quot;</span><span style="color:#E1E4E8;">, ExampleMatcher.GenericPropertyMatchers.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//特殊指定address字段采用后缀匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">withMatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">, ExampleMatcher.GenericPropertyMatchers.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">Page&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">&gt; u </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userAddressRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">(Example.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(address,exampleMatcher), PageRequest.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//创建匹配器，即如何使用查询条件</span></span>
<span class="line"><span style="color:#24292E;">ExampleMatcher exampleMatcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExampleMatcher</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//采用默认and的查询方式</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">matchingAll</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//忽略大小写</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">withIgnoreCase</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//忽略所有null值的字段</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">withIgnoreNullValues</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">withIgnorePaths</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;createDate&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//默认采用精准匹配规则</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">withStringMatcher</span><span style="color:#24292E;">(ExampleMatcher.StringMatcher.EXACT)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//级联查询，字段user.email采用字符前缀匹配规则</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">withMatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user.email&quot;</span><span style="color:#24292E;">, ExampleMatcher.GenericPropertyMatchers.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//特殊指定address字段采用后缀匹配</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">withMatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">, ExampleMatcher.GenericPropertyMatchers.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">Page&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">&gt; u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userAddressRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">(Example.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(address,exampleMatcher), PageRequest.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span></code></pre></div><p>这时候可能会有同学问了，我是怎么知道默认值的呢？我们直接看类的构造方法就可以了，如下所示：</p>`,5),B=p('<p>从源码中我们可以看到，实现类的构造方法只有一个，就是&quot;赋值默认&quot;的方式。下面我整理了一些在使用这个语法时需要考虑的细节。</p><h4 id="exampleexceutor-使用中需要考虑的因素" tabindex="-1">ExampleExceutor 使用中需要考虑的因素 <a class="header-anchor" href="#exampleexceutor-使用中需要考虑的因素" aria-label="Permalink to &quot;ExampleExceutor 使用中需要考虑的因素&quot;">​</a></h4><ol><li><p>Null 值的处理：当某个条件值为 Null 时，是应当忽略这个过滤条件，还是应当去匹配数据库表中该字段值是 Null 的记录呢？</p></li><li><p>忽略某些属性值：一个实体对象，有许多个属性，是否每个属性都参与过滤？是否可以忽略某些属性？</p></li><li><p>不同的过滤方式：同样是作为 String 值，可能&quot;姓名&quot;希望精确匹配，&quot;地址&quot;希望模糊匹配，如何做到？</p></li></ol><p>那么接下来我们分析一下源码看看其原理，说了这么半天，它到底和 JpaSpecificationExecutor 什么关系呢？我们接着看。</p><h3 id="querybyexampleexecutor-源码分析" tabindex="-1">QueryByExampleExecutor 源码分析 <a class="header-anchor" href="#querybyexampleexecutor-源码分析" aria-label="Permalink to &quot;QueryByExampleExecutor 源码分析&quot;">​</a></h3><p>怎么分析源码也很简单，我们看一下上面的我们 findAll 的方法调用之处。</p>',6),x=s("p",null,"从而找到 findAll 方法的实现类，如下所示：",-1),b=p('<p>通过 Debug 断点我们可以看到，我们刚才组合出来的 Example 对象，这个时候被封装成了 ExampleSpecification 对象，那么我们接着往下看方法里面的关键内容。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TypedQuery&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ExampleSpecification&lt;&gt;(example, escapeCharacter), probeType, pageable);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TypedQuery&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getQuery</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ExampleSpecification&lt;&gt;(example, escapeCharacter), probeType, pageable);</span></span></code></pre></div><p>getQuery 方法是创建 Query 的关键，因为它里面做了条件的转化逻辑。那么我们再看一下参数 ExampleSpecification 的源码，发现它是接口 Specification 的实现类，并且是非公开的实现类，可以通过接口对外暴露 and、or、not、where 等组合条件的查询条件。</p>',3),q=s("p",null,[a("我们接着看上面的 getQuery 方法的实现，可以看到接收的参数是 Specification"),s("code",null,"<S>"),a("接口，所以不用关心实现类是什么。")],-1),v=s("p",null,"我们接着再看这个断点的 getQuery 方法：",-1),T=s("p",null,"里面有一段代码会调用 applySpecificationToCriteria 生成 root，并由 Root 作为参数生成 Query，从而交给 EM（EntityManager）进行查询。",-1),k=s("p",null,"我们再来看一下关键的 applySpecificationToCriteria 方法。",-1),M=s("p",null,"根据 Specification 调用 toPredicate 方法，生成 Predicate，从而实现查询需求。",-1),f=s("p",null,"现在我们已经对 QueryByExampleExecutor 的用法和实现原理基本掌握了，我们再来看一个十分相似的接口：JpaSpecificationExecutor 是干什么用的。",-1),S=s("h3",{id:"jpaspecificationexecutor-接口结构",tabindex:"-1"},[a("JpaSpecificationExecutor 接口结构 "),s("a",{class:"header-anchor",href:"#jpaspecificationexecutor-接口结构","aria-label":'Permalink to "JpaSpecificationExecutor 接口结构"'},"​")],-1),w=s("p",null,"正如我们开篇提到的【图一：Repository 类图】，JpaSpecificationExecutor 是 JPA 里面的另一个接口分支。我们先来看看它的基本语法。",-1),j=p('<p>我们通过查看 JpaSpecificationExecutor 的 Structure 图会发现，方法就有这么几个，细心的同学这个时候会发现它的参数 Specification，正是我们分析 QueryByExampleExecutor 的原理时候使用的 Specification。</p><p>那么 JpaSpecificationExecutor 帮我们解决了哪些问题呢？</p><h3 id="jpaspecificationexecutor-解决了哪些问题" tabindex="-1">JpaSpecificationExecutor 解决了哪些问题 <a class="header-anchor" href="#jpaspecificationexecutor-解决了哪些问题" aria-label="Permalink to &quot;JpaSpecificationExecutor 解决了哪些问题&quot;">​</a></h3><ol><li><p>我们通过 QueryByExampleExecutor 的使用方法和原理分析，不难发现，JpaSpecificationExecutor 的查询条件 Specification 十分灵活，可以帮我们解决动态查询条件的问题，正如 QueryByExampleExecutor 的用法一样；</p></li><li><p>它提供的 Criteria API 的使用封装，可以用于动态生成 Query 来满足我们业务中的各种复杂场景；</p></li><li><p>既然QueryByExampleExecutor 能利用 Specification 封装成框架，我们是不是也可以利用 JpaSpecificationExecutor 封装成框架呢？这样就学会了举一反三。</p></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们通过分析QueryByExampleExecutor 的详细用法和实现原理，知道了 Specification 的应用场景，那么下一课时我会详细介绍JpaSpecificationExecutor 的用法和实现原理。</p><p>另外本课时也提供了一种学习框架的思路，就是怎么通过源码来详细掌握语法。</p><p>总之，保持一颗好奇心，不断深挖，你才能掌握得更加全面。本节课就到这里了，如果你觉得有帮助，欢迎你留言讨论和分享，我们下一课时再见。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>',9);function P(I,R,N,U,L,H){const n=e("Image");return t(),r("div",null,[E,y,i,d,F,u,g,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4B/CgqCHl-EE7WAAfi5AACTjc0iffY586.png"}),a(),h,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/5D/40/Ciqc1F-EFDCAa50VAADEF8jBllY550.png"}),a(),A,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4C/CgqCHl-EFFGAHjlEAAOzUKkyjE0156.png"}),a(),C,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4C/CgqCHl-EFFeAcXU9AACEfIRngF4284.png"}),a(),m,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/5D/41/Ciqc1F-EFHuAXsn3AABiCE6_I0I978.png"}),a(),D,l(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4C/CgqCHl-EFIiAKEMxAAFkdJSuuX4896.png"}),a(),_,l(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4C/CgqCHl-EFJGAOa8BAAGc6Bk2F3g271.png"}),a(),B,l(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4C/CgqCHl-EFJmAO7ItAABKDcL98Uc576.png"}),a(),x,l(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4C/CgqCHl-EFKCAOUw0AAaMM8yZ64k573.png"}),a(),b,l(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/5D/41/Ciqc1F-EFKeAOHpRAASLh36FrZI858.png"}),a(),q,l(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/5D/41/Ciqc1F-EFK2AWfUgAAEJccNGWh4199.png"}),a(),v,l(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/5D/41/Ciqc1F-EFLOAfcLIAAEtDgDfmQU527.png"}),a(),T,k,l(n,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4C/CgqCHl-EFLyAJh4iAAFuOV3pYzA214.png"}),a(),M,f,S,w,l(n,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/5D/4C/CgqCHl-EFMSABjEBAAEBE-nLmV0807.png"}),a(),j])}const V=o(c,[["render",P]]);export{Q as __pageData,V as default};
