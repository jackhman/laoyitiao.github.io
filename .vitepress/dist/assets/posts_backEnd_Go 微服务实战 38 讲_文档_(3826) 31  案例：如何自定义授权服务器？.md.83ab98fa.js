import{_ as o,j as e,o as t,g as r,k as l,h as n,s,Q as p}from"./chunks/framework.4e7d56ce.js";const S=JSON.parse('{"title":"31案例：如何自定义授权服务器？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3826) 31  案例：如何自定义授权服务器？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3826) 31  案例：如何自定义授权服务器？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3826) 31  案例：如何自定义授权服务器？.md"},E=s("h1",{id:"_31案例-如何自定义授权服务器",tabindex:"-1"},[n("31案例：如何自定义授权服务器？ "),s("a",{class:"header-anchor",href:"#_31案例-如何自定义授权服务器","aria-label":'Permalink to "31案例：如何自定义授权服务器？"'},"​")],-1),y=s("p",null,"今天我和你分享的是如何自定义授权服务器的案例。",-1),i=s("p",null,"在上一课时中，我们基于 OAuth2 和 JWT 设计了认证与授权服务体系，在本课时，我们将通过 Go 来搭建一个授权服务器。",-1),u=s("p",null,"授权服务器的主要交互对象为客户端和资源服务器，它们之间的交互流程如下图所示：",-1),F=p("<p>交互流程示意图</p><p>客户端在访问资源服务器中用户存储的数据之前，需要携带用户凭证向授权服务器请求访问令牌。授权服务器会验证客户端以及其携带的用户凭证，验证通过的话将会生成并返回访问令牌。</p><p>最后，客户端携带访问令牌请求资源服务器中存储的用户数据，资源服务器会请求授权服务器验证访问令牌，如果访问令牌有效将会返回对应的用户数据。</p><p>从这个交互流程我们可以发现，<strong>授权服务器的主要职责是颁发令牌和验证访问令牌</strong>。对此，授权服务器需要对外提供两个相应的接口：</p><ul><li><p>/oauth/token 用于客户端携带用户凭证请求访问令牌；</p></li><li><p>/oauth/check_token 用于验证访问令牌的有效性，返回访问令牌绑定的客户端和用户信息。</p></li></ul><p>除此之外，我们还可以让授权服务器承担客户端信息管理和权限管理等额外功能，也可以由其他的服务提供该部分能力。每个客户端都可以为用户申请访问令牌，访问令牌是与申请的客户端、授权的用户绑定的，表示某一用户授予某一个客户端有限的访问资源权限。</p><p>一个基本的授权服务器应该由以下五个模块组成，如图所示：</p>",7),D=p(`<p>授权服务器主要模块组成图</p><ul><li><p><strong>TokenGranter（令牌生成器）</strong>，根据客户端请求的授权类型，使用不同的方式验证客户端和用户信息，并使用 TokenService 生成访问令牌；</p></li><li><p><strong>TokenService（令牌服务）</strong>，生成并管理令牌，它使用 TokenStore 存储令牌；</p></li><li><p><strong>TokenStore（令牌存储器）</strong>，负责令牌的存取工作；</p></li><li><p><strong>ClientDetailsService（客户端详情服务）</strong>，根据 ClientId 查询系统中注册的客户端信息；</p></li><li><p><strong>UserDetailsService（用户详情服务）</strong>，用于获取用户信息。</p></li></ul><p>接下来，我们就来讲解如何在授权服务器中实现密码类型来获取访问令牌。</p><h3 id="客户端详情服务和用户详情服务" tabindex="-1">客户端详情服务和用户详情服务 <a class="header-anchor" href="#客户端详情服务和用户详情服务" aria-label="Permalink to &quot;客户端详情服务和用户详情服务&quot;">​</a></h3><p>ClientDetailsService（客户端详情服务） 和 UserDetailsService（用户详情服务） 主要用于根据唯一标识查找客户端或者用户信息，用于验证客户端或者用户信息，或者根据对应的信息生成令牌。客户端和用户的主要信息描述如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClientDetails</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// client 的标识</span></span>
<span class="line"><span style="color:#E1E4E8;">	ClientId </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// client 的密钥</span></span>
<span class="line"><span style="color:#E1E4E8;">	ClientSecret </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 访问令牌有效时间，秒</span></span>
<span class="line"><span style="color:#E1E4E8;">	AccessTokenValiditySeconds </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 刷新令牌有效时间，秒</span></span>
<span class="line"><span style="color:#E1E4E8;">	RefreshTokenValiditySeconds </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 重定向地址，授权码类型中使用</span></span>
<span class="line"><span style="color:#E1E4E8;">	RegisteredRedirectUri </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 可以使用的授权类型</span></span>
<span class="line"><span style="color:#E1E4E8;">	AuthorizedGrantTypes []</span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserDetails</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 用户标识</span></span>
<span class="line"><span style="color:#E1E4E8;">	UserId </span><span style="color:#F97583;">int64</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 用户名 唯一</span></span>
<span class="line"><span style="color:#E1E4E8;">	Username </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 用户密码</span></span>
<span class="line"><span style="color:#E1E4E8;">	Password </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 用户具有的权限</span></span>
<span class="line"><span style="color:#E1E4E8;">	Authorities []</span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClientDetails</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// client 的标识</span></span>
<span class="line"><span style="color:#24292E;">	ClientId </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// client 的密钥</span></span>
<span class="line"><span style="color:#24292E;">	ClientSecret </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 访问令牌有效时间，秒</span></span>
<span class="line"><span style="color:#24292E;">	AccessTokenValiditySeconds </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 刷新令牌有效时间，秒</span></span>
<span class="line"><span style="color:#24292E;">	RefreshTokenValiditySeconds </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 重定向地址，授权码类型中使用</span></span>
<span class="line"><span style="color:#24292E;">	RegisteredRedirectUri </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 可以使用的授权类型</span></span>
<span class="line"><span style="color:#24292E;">	AuthorizedGrantTypes []</span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDetails</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 用户标识</span></span>
<span class="line"><span style="color:#24292E;">	UserId </span><span style="color:#D73A49;">int64</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 用户名 唯一</span></span>
<span class="line"><span style="color:#24292E;">	Username </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 用户密码</span></span>
<span class="line"><span style="color:#24292E;">	Password </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 用户具有的权限</span></span>
<span class="line"><span style="color:#24292E;">	Authorities []</span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>客户端信息主要包括客户端标识、客户端密钥、令牌有效时间、重定向地址和可使用的授权类型等，而用户的主要信息包括用户 ID、用户名和用户权限列表等。</p><p>在不同的系统中，客户端和用户信息的管理可能有专门的微服务提供实现，并对内提供相应的 HTTP 或者 RPC 访问接口，也可能是由授权服务器直接管理。为了统一获取客户端和用户信息的方式，我们定义了以下的 UserDetailsService 和 ClientDetailsService 接口，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserDetailsService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据用户名加载用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">GetUserDetailsByUsername</span><span style="color:#E1E4E8;">(ctx context.Context, username, password </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (model.UserDetails, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClientDetailsService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据 clientId 加载客户端信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">GetClientDetailsByClientId</span><span style="color:#E1E4E8;">(ctx context.Context, clientId </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, clientSecret </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)( model.ClientDetails, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDetailsService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据用户名加载用户信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">GetUserDetailsByUsername</span><span style="color:#24292E;">(ctx context.Context, username, password </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (model.UserDetails, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClientDetailsService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据 clientId 加载客户端信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">GetClientDetailsByClientId</span><span style="color:#24292E;">(ctx context.Context, clientId </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, clientSecret </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)( model.ClientDetails, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>无论系统中是通过何种方式管理客户端和用户信息，我们仅需使用相应的方式实现上述接口，即可<strong>为授权服务器提供一致的方式获取客户端或者用户信息</strong>。假如我们将客户端信息维护在内存中，可以实现如下的内存客户端详情服务，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InMemoryClientDetailsService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	clientDetailsDict </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">model.ClientDetails</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewInMemoryClientDetailsService</span><span style="color:#E1E4E8;">(clientDetailsList []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">model.ClientDetails ) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">InMemoryClientDetailsService{</span></span>
<span class="line"><span style="color:#E1E4E8;">	clientDetailsDict </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">model.ClientDetails)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(clientDetailsList) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, value </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> clientDetailsList {</span></span>
<span class="line"><span style="color:#E1E4E8;">			clientDetailsDict[value.ClientId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">InMemoryClientDetailsService{</span></span>
<span class="line"><span style="color:#E1E4E8;">		clientDetailsDict:clientDetailsDict,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (service </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">InMemoryClientDetailsService)</span><span style="color:#79B8FF;">GetClientDetailsByClientId</span><span style="color:#E1E4E8;">(ctx context.Context, clientId </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, clientSecret </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)(model.ClientDetails, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据 clientId 获取 clientDetails</span></span>
<span class="line"><span style="color:#E1E4E8;">	clientDetails, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> service.clientDetailsDict[clientId]; </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ok{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 比较 clientSecret 是否正确</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> clientDetails.ClientSecret </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> clientSecret{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">clientDetails, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> model.ClientDetails{}, ErrClientSecret</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> model.ClientDetails{}, ErrClientNotExist</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InMemoryClientDetailsService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	clientDetailsDict </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">model.ClientDetails</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewInMemoryClientDetailsService</span><span style="color:#24292E;">(clientDetailsList []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">model.ClientDetails ) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">InMemoryClientDetailsService{</span></span>
<span class="line"><span style="color:#24292E;">	clientDetailsDict </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">model.ClientDetails)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(clientDetailsList) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, value </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> clientDetailsList {</span></span>
<span class="line"><span style="color:#24292E;">			clientDetailsDict[value.ClientId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">InMemoryClientDetailsService{</span></span>
<span class="line"><span style="color:#24292E;">		clientDetailsDict:clientDetailsDict,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (service </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">InMemoryClientDetailsService)</span><span style="color:#005CC5;">GetClientDetailsByClientId</span><span style="color:#24292E;">(ctx context.Context, clientId </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, clientSecret </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)(model.ClientDetails, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据 clientId 获取 clientDetails</span></span>
<span class="line"><span style="color:#24292E;">	clientDetails, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> service.clientDetailsDict[clientId]; </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ok{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 比较 clientSecret 是否正确</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> clientDetails.ClientSecret </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> clientSecret{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">clientDetails, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">		}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model.ClientDetails{}, ErrClientSecret</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> model.ClientDetails{}, ErrClientNotExist</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，我们将客户端信息通过 map 维护在内存中，根据客户端的标识从 map 加载客户端信息。在实际生产开发中，可以根据系统中维护客户端信息的方式，选择从数据库、缓存或者通过 RPC 的方式从其他微服务中加载客户端信息。</p><h3 id="令牌生成器" tabindex="-1">令牌生成器 <a class="header-anchor" href="#令牌生成器" aria-label="Permalink to &quot;令牌生成器&quot;">​</a></h3><p><strong>TokenGranter（令牌生成器）是授权服务器的核心所在</strong>，它会根据客户端请求的授权类型进行不同的用户和客户端信息认证流程，并使用 TokenService 生成相应的访问令牌返回给客户端，它将提供以下的接口用于生成访问令牌：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TokenGranter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">grant</span><span style="color:#E1E4E8;">(grantType </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, client ClientDetails, reader </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TokenGranter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">grant</span><span style="color:#24292E;">(grantType </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, client ClientDetails, reader </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>授权服务器主要对外提供 HTTP 接口用于请求访问令牌，因此 TokenGranter.grant 方法接受授权类型、请求的客户端和请求体作为参数。为了支持多种授权类型的实现，我们采用组合设计模式来实现 TokenGranter，如下图所示：</p>`,16),A=p(`<p>TokenGranter 组合设计模式类图</p><p>通过该模式图，我们可以看到 TokenGranter 主要有以下两种实现类型：</p><ul><li><p>ComposeTokenGranter 组合节点，管理了多种 LeafTokenGranter 授权类型的具体叶节点实现；</p></li><li><p>LeafTokenGranter 叶节点，它是授权类型的具体实现，包括密码类型、授权码类型等多种授权类型实现类。</p></li></ul><p>ComposeTokenGranter 的功能是根据 grantType 获取具体的 TokenGranter 实现，并委托其验证客户端和用户凭证，从而生成访问令牌，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (tokenGranter </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ComposeTokenGranter) </span><span style="color:#B392F0;">Grant</span><span style="color:#E1E4E8;">(ctx context.Context, grantType </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, client ClientDetails, reader </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 检查客户端是否允许该种授权类型</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isSupport </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(client.AuthorizedGrantTypes) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, v </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> client.AuthorizedGrantTypes {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> grantType {</span></span>
<span class="line"><span style="color:#E1E4E8;">            isSupport </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isSupport{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrNotSupportOperation</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 查找具体的授权类型实现节点</span></span>
<span class="line"><span style="color:#E1E4E8;">   dispatchGranter,ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tokenGranter.TokenGrantDict[grantType]; </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ok{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dispatchGranter.</span><span style="color:#79B8FF;">Grant</span><span style="color:#E1E4E8;">(ctx, grantType, client, reader)</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrNotSupportGrantType</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (tokenGranter </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ComposeTokenGranter) </span><span style="color:#6F42C1;">Grant</span><span style="color:#24292E;">(ctx context.Context, grantType </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, client ClientDetails, reader </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 检查客户端是否允许该种授权类型</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isSupport </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(client.AuthorizedGrantTypes) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, v </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> client.AuthorizedGrantTypes {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> grantType {</span></span>
<span class="line"><span style="color:#24292E;">            isSupport </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isSupport{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrNotSupportOperation</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 查找具体的授权类型实现节点</span></span>
<span class="line"><span style="color:#24292E;">   dispatchGranter,ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tokenGranter.TokenGrantDict[grantType]; </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ok{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dispatchGranter.</span><span style="color:#005CC5;">Grant</span><span style="color:#24292E;">(ctx, grantType, client, reader)</span></span>
<span class="line"><span style="color:#24292E;">   } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrNotSupportGrantType</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们以密码类型 UsernamePasswordTokenGranter 的具体实现为例：UsernamePasswordTokenGranter 会验证客户端提交的用户名和密码是否正确，如果用户名和密码有效，将会调用 TokenService 为该客户端生成访问令牌。代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (tokenGranter </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">UsernamePasswordTokenGranter) </span><span style="color:#B392F0;">Grant</span><span style="color:#E1E4E8;">(ctx context.Context,</span></span>
<span class="line"><span style="color:#E1E4E8;">	grantType </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, client ClientDetails, reader </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> grantType </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> tokenGranter.supportGrantType{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrNotSupportGrantType</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 从请求体中获取用户名密码</span></span>
<span class="line"><span style="color:#E1E4E8;">	username </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> reader.</span><span style="color:#79B8FF;">FormValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	password </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> reader.</span><span style="color:#79B8FF;">FormValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> username </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> password </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrInvalidUsernameAndPasswordRequest</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 验证用户名密码是否正确</span></span>
<span class="line"><span style="color:#E1E4E8;">	userDetails, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tokenGranter.userDetailsService.</span><span style="color:#79B8FF;">GetUserDetailsByUsername</span><span style="color:#E1E4E8;">(ctx, username, password)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrInvalidUsernameAndPasswordRequest</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据用户信息和客户端信息生成访问令牌</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tokenGranter.tokenService.</span><span style="color:#79B8FF;">CreateAccessToken</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">OAuth2Details{</span></span>
<span class="line"><span style="color:#E1E4E8;">		Client:client,</span></span>
<span class="line"><span style="color:#E1E4E8;">		User:userDetails,</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (tokenGranter </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">UsernamePasswordTokenGranter) </span><span style="color:#6F42C1;">Grant</span><span style="color:#24292E;">(ctx context.Context,</span></span>
<span class="line"><span style="color:#24292E;">	grantType </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, client ClientDetails, reader </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> grantType </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> tokenGranter.supportGrantType{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrNotSupportGrantType</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 从请求体中获取用户名密码</span></span>
<span class="line"><span style="color:#24292E;">	username </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> reader.</span><span style="color:#005CC5;">FormValue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	password </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> reader.</span><span style="color:#005CC5;">FormValue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> password </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrInvalidUsernameAndPasswordRequest</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 验证用户名密码是否正确</span></span>
<span class="line"><span style="color:#24292E;">	userDetails, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tokenGranter.userDetailsService.</span><span style="color:#005CC5;">GetUserDetailsByUsername</span><span style="color:#24292E;">(ctx, username, password)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrInvalidUsernameAndPasswordRequest</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据用户信息和客户端信息生成访问令牌</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tokenGranter.tokenService.</span><span style="color:#005CC5;">CreateAccessToken</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">OAuth2Details{</span></span>
<span class="line"><span style="color:#24292E;">		Client:client,</span></span>
<span class="line"><span style="color:#24292E;">		User:userDetails,</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，UsernamePasswordTokenGranter 首先从请求体中获取到客户端提交的用户名和密码，然后调用 UserDetailsService 根据用户名获取用户信息用于验证用户信息，如果用户信息有效，将会委托 TokenService 根据用户信息和客户端信息生成访问令牌。</p><h3 id="令牌服务" tabindex="-1">令牌服务 <a class="header-anchor" href="#令牌服务" aria-label="Permalink to &quot;令牌服务&quot;">​</a></h3><p>TokenGranter（令牌生成器）最后将会使用 TokenService（令牌服务）生成访问令牌。前面在讲解授权服务器的主要模块时，我们介绍了<strong>TokenService 的主要功能为生成和管理令牌，并借助 TokenStore 存取令牌</strong>。它提供了以下的主要接口：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TokenService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据用户信息和客户端信息生成访问令牌</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">CreateAccessToken</span><span style="color:#E1E4E8;">(oauth2Details </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据访问令牌获取对应的用户信息和客户端信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">GetOAuth2DetailsByAccessToken</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TokenService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据用户信息和客户端信息生成访问令牌</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">CreateAccessToken</span><span style="color:#24292E;">(oauth2Details </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据访问令牌获取对应的用户信息和客户端信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">GetOAuth2DetailsByAccessToken</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>TokenGranter 在验证完有效的客户端和用户信息后，将会<strong>调用 CreateAccessToken 方法生成访问令牌</strong>。CreateAccessToken 会首先根据用户信息和客户端信息从 TokenStore 中获取已保存的访问令牌，如果访问令牌存在且未失效，将会直接返回该访问令牌；如果访问令牌已经失效，那么将尝试根据用户信息和客户端信息生成一个新的访问令牌并返回。代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (tokenService </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">DefaultTokenService) </span><span style="color:#B392F0;">CreateAccessToken</span><span style="color:#E1E4E8;">(oauth2Details </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	existToken, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">GetAccessToken</span><span style="color:#E1E4E8;">(oauth2Details)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> refreshToken </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 存在未失效访问令牌，直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> existToken </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">existToken.</span><span style="color:#79B8FF;">IsExpired</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">			err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">StoreAccessToken</span><span style="color:#E1E4E8;">(existToken, oauth2Details)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> existToken, err</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 访问令牌已失效，移除</span></span>
<span class="line"><span style="color:#E1E4E8;">		err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">RemoveAccessToken</span><span style="color:#E1E4E8;">(existToken.TokenValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> existToken.RefreshToken </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			refreshToken </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> existToken.RefreshToken</span></span>
<span class="line"><span style="color:#E1E4E8;">			err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">RemoveRefreshToken</span><span style="color:#E1E4E8;">(refreshToken.TokenType)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> refreshToken </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> refreshToken.</span><span style="color:#79B8FF;">IsExpired</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		refreshToken, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tokenService.</span><span style="color:#79B8FF;">createRefreshToken</span><span style="color:#E1E4E8;">(oauth2Details)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 生成新的访问令牌</span></span>
<span class="line"><span style="color:#E1E4E8;">	accessToken, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tokenService.</span><span style="color:#79B8FF;">createAccessToken</span><span style="color:#E1E4E8;">(refreshToken, oauth2Details)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 保存新生成令牌</span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">StoreAccessToken</span><span style="color:#E1E4E8;">(accessToken, oauth2Details)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">StoreRefreshToken</span><span style="color:#E1E4E8;">(refreshToken, oauth2Details)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accessToken, err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (tokenService </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">DefaultTokenService) </span><span style="color:#6F42C1;">CreateAccessToken</span><span style="color:#24292E;">(oauth2Details </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	existToken, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">GetAccessToken</span><span style="color:#24292E;">(oauth2Details)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> refreshToken </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 存在未失效访问令牌，直接返回</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> existToken </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">existToken.</span><span style="color:#005CC5;">IsExpired</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">			err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">StoreAccessToken</span><span style="color:#24292E;">(existToken, oauth2Details)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> existToken, err</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 访问令牌已失效，移除</span></span>
<span class="line"><span style="color:#24292E;">		err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">RemoveAccessToken</span><span style="color:#24292E;">(existToken.TokenValue)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> existToken.RefreshToken </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			refreshToken </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> existToken.RefreshToken</span></span>
<span class="line"><span style="color:#24292E;">			err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">RemoveRefreshToken</span><span style="color:#24292E;">(refreshToken.TokenType)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> refreshToken </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> refreshToken.</span><span style="color:#005CC5;">IsExpired</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		refreshToken, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tokenService.</span><span style="color:#005CC5;">createRefreshToken</span><span style="color:#24292E;">(oauth2Details)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 生成新的访问令牌</span></span>
<span class="line"><span style="color:#24292E;">	accessToken, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tokenService.</span><span style="color:#005CC5;">createAccessToken</span><span style="color:#24292E;">(refreshToken, oauth2Details)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 保存新生成令牌</span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">StoreAccessToken</span><span style="color:#24292E;">(accessToken, oauth2Details)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">StoreRefreshToken</span><span style="color:#24292E;">(refreshToken, oauth2Details)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accessToken, err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，除了生成访问令牌，还会生成对应的刷新令牌。在令牌生成成功之后，CreateAccessToken 方法会通过 TokenStore 将它们保存到系统中。</p><p>另一个<strong>GetOAuth2DetailsByAccessToken 方法主要用于验证访问令牌的有效性，并根据访问令牌获取其绑定的客户端和用户信息，</strong> 代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (tokenService </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">DefaultTokenService) </span><span style="color:#B392F0;">GetOAuth2DetailsByAccessToken</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从 TokenStore 中获取令牌数据</span></span>
<span class="line"><span style="color:#E1E4E8;">	accessToken, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">ReadAccessToken</span><span style="color:#E1E4E8;">(tokenValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> accessToken.</span><span style="color:#79B8FF;">IsExpired</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrExpiredToken</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取令牌对应的客户端和用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tokenService.tokenStore.</span><span style="color:#79B8FF;">ReadOAuth2Details</span><span style="color:#E1E4E8;">(tokenValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (tokenService </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">DefaultTokenService) </span><span style="color:#6F42C1;">GetOAuth2DetailsByAccessToken</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从 TokenStore 中获取令牌数据</span></span>
<span class="line"><span style="color:#24292E;">	accessToken, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">ReadAccessToken</span><span style="color:#24292E;">(tokenValue)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> accessToken.</span><span style="color:#005CC5;">IsExpired</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrExpiredToken</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取令牌对应的客户端和用户信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tokenService.tokenStore.</span><span style="color:#005CC5;">ReadOAuth2Details</span><span style="color:#24292E;">(tokenValue)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，GetOAuth2DetailsByAccessToken 方法首先根据访问令牌的值从 TokenStore 中获取到对应的访问令牌结构体，如果访问令牌没有失效，再通过 TokenStore 获取生成访问令牌时绑定的用户信息和客户端信息。</p><h3 id="令牌存储器" tabindex="-1">令牌存储器 <a class="header-anchor" href="#令牌存储器" aria-label="Permalink to &quot;令牌存储器&quot;">​</a></h3><p>TokenStore（令牌存储器） 为 TokenService（令牌服务）<strong>提供了令牌的存储和查找能力</strong>，维护了令牌和用户、客户端之间的绑定关系，主要提供了以下的接口：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TokenStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 存储访问令牌</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">StoreAccessToken</span><span style="color:#E1E4E8;">(oauth2Token </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, oauth2Details </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details) </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据令牌值获取访问令牌结构体</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadAccessToken</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据令牌值获取令牌对应的客户端和用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadOAuth2Details</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据令牌值获取刷新令牌</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadRefreshToken</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 根据令牌值获取刷新令牌对应的客户端和用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">ReadOAuth2DetailsForRefreshToken</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TokenStore</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 存储访问令牌</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">StoreAccessToken</span><span style="color:#24292E;">(oauth2Token </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, oauth2Details </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details) </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据令牌值获取访问令牌结构体</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadAccessToken</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据令牌值获取令牌对应的客户端和用户信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadOAuth2Details</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据令牌值获取刷新令牌</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadRefreshToken</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 根据令牌值获取刷新令牌对应的客户端和用户信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">ReadOAuth2DetailsForRefreshToken</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>考虑到 JWT 自包含的特性，我们<strong>使用 JWT 作为访问令牌的载体</strong>，将令牌和用户、客户端之间的绑定关系维护在 JWT 样式的令牌中，避免将这些关联关系存储在系统，这就减少了对存储系统的访问次数，有利于提高系统的吞吐量。TokenStore 主要借助TokenEnhancer 组装和解析令牌中的信息，TokenEnhancer提供以下接口：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TokenEnhancer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 组装 Token 信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Enhance</span><span style="color:#E1E4E8;">(oauth2Token </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, oauth2Details </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 从 Token 中还原信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Extract</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TokenEnhancer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 组装 Token 信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Enhance</span><span style="color:#24292E;">(oauth2Token </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, oauth2Details </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 从 Token 中还原信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Extract</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>JwtTokenEnhancer 会把令牌对应的用户信息和客户端信息写入 JWT 样式的令牌声明中，也就是说通过令牌值即可知道令牌绑定的用户信息和客户端信息，它的 Enhance 方法实现如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (enhancer </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">JwtTokenEnhancer) </span><span style="color:#B392F0;">Enhance</span><span style="color:#E1E4E8;">(oauth2Token </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, oauth2Details </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> enhancer.</span><span style="color:#79B8FF;">sign</span><span style="color:#E1E4E8;">(oauth2Token, oauth2Details)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (enhancer </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">JwtTokenEnhancer) </span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">(oauth2Token </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, oauth2Details </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details)  (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	expireTime </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> oauth2Token.ExpiresTime</span></span>
<span class="line"><span style="color:#E1E4E8;">	clientDetails </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> oauth2Details.Client</span></span>
<span class="line"><span style="color:#E1E4E8;">	userDetails </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> oauth2Details.User</span></span>
<span class="line"><span style="color:#E1E4E8;">	clientDetails.ClientSecret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	userDetails.Password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加 JWT 声明</span></span>
<span class="line"><span style="color:#E1E4E8;">	claims </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> OAuth2TokenCustomClaims{</span></span>
<span class="line"><span style="color:#E1E4E8;">		UserDetails:userDetails,</span></span>
<span class="line"><span style="color:#E1E4E8;">		ClientDetails:clientDetails,</span></span>
<span class="line"><span style="color:#E1E4E8;">		StandardClaims:jwt.StandardClaims{</span></span>
<span class="line"><span style="color:#E1E4E8;">			ExpiresAt:expireTime.</span><span style="color:#79B8FF;">Unix</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">			Issuer:</span><span style="color:#9ECBFF;">&quot;System&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> oauth2Token.RefreshToken </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		claims.RefreshToken </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">oauth2Token.RefreshToken</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	token </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> jwt.</span><span style="color:#79B8FF;">NewWithClaims</span><span style="color:#E1E4E8;">(jwt.SigningMethodHS256, claims)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// JWT 签名，生成令牌</span></span>
<span class="line"><span style="color:#E1E4E8;">	tokenValue, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> token.</span><span style="color:#79B8FF;">SignedString</span><span style="color:#E1E4E8;">(enhancer.secretKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	oauth2Token.TokenValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tokenValue</span></span>
<span class="line"><span style="color:#E1E4E8;">	oauth2Token.TokenType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jwt&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> oauth2Token, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (enhancer </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">JwtTokenEnhancer) </span><span style="color:#6F42C1;">Enhance</span><span style="color:#24292E;">(oauth2Token </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, oauth2Details </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> enhancer.</span><span style="color:#005CC5;">sign</span><span style="color:#24292E;">(oauth2Token, oauth2Details)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (enhancer </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">JwtTokenEnhancer) </span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">(oauth2Token </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, oauth2Details </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details)  (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	expireTime </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> oauth2Token.ExpiresTime</span></span>
<span class="line"><span style="color:#24292E;">	clientDetails </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> oauth2Details.Client</span></span>
<span class="line"><span style="color:#24292E;">	userDetails </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> oauth2Details.User</span></span>
<span class="line"><span style="color:#24292E;">	clientDetails.ClientSecret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">	userDetails.Password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加 JWT 声明</span></span>
<span class="line"><span style="color:#24292E;">	claims </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> OAuth2TokenCustomClaims{</span></span>
<span class="line"><span style="color:#24292E;">		UserDetails:userDetails,</span></span>
<span class="line"><span style="color:#24292E;">		ClientDetails:clientDetails,</span></span>
<span class="line"><span style="color:#24292E;">		StandardClaims:jwt.StandardClaims{</span></span>
<span class="line"><span style="color:#24292E;">			ExpiresAt:expireTime.</span><span style="color:#005CC5;">Unix</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">			Issuer:</span><span style="color:#032F62;">&quot;System&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> oauth2Token.RefreshToken </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		claims.RefreshToken </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">oauth2Token.RefreshToken</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	token </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> jwt.</span><span style="color:#005CC5;">NewWithClaims</span><span style="color:#24292E;">(jwt.SigningMethodHS256, claims)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// JWT 签名，生成令牌</span></span>
<span class="line"><span style="color:#24292E;">	tokenValue, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> token.</span><span style="color:#005CC5;">SignedString</span><span style="color:#24292E;">(enhancer.secretKey)</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	oauth2Token.TokenValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tokenValue</span></span>
<span class="line"><span style="color:#24292E;">	oauth2Token.TokenType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jwt&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oauth2Token, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，Enhance 方法将令牌对应的用户信息和客户端信息写入 JWT 的声明中，这样授权服务器在下次拿到令牌时，就可以根据令牌值获取到令牌绑定的用户信息和客户端信息。令牌解析的代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (enhancer </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">JwtTokenEnhancer) </span><span style="color:#B392F0;">Extract</span><span style="color:#E1E4E8;">(tokenValue </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Token, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2Details, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用签名解析 JWT 值</span></span>
<span class="line"><span style="color:#E1E4E8;">	token, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> jwt.</span><span style="color:#79B8FF;">ParseWithClaims</span><span style="color:#E1E4E8;">(tokenValue, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">OAuth2TokenCustomClaims{}, </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(token </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">jwt.Token) (i </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}, e </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> enhancer.secretKey, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	claims </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> token.Claims.(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">OAuth2TokenCustomClaims)</span></span>
<span class="line"><span style="color:#E1E4E8;">	expiresTime </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> time.</span><span style="color:#79B8FF;">Unix</span><span style="color:#E1E4E8;">(claims.ExpiresAt, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回从 JWT 中解析出来的客户端和用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">OAuth2Token{</span></span>
<span class="line"><span style="color:#E1E4E8;">			RefreshToken:</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">claims.RefreshToken,</span></span>
<span class="line"><span style="color:#E1E4E8;">			TokenValue:tokenValue,</span></span>
<span class="line"><span style="color:#E1E4E8;">			ExpiresTime: </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">expiresTime,</span></span>
<span class="line"><span style="color:#E1E4E8;">		}, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">OAuth2Details{</span></span>
<span class="line"><span style="color:#E1E4E8;">			User:claims.UserDetails,</span></span>
<span class="line"><span style="color:#E1E4E8;">			Client:claims.ClientDetails,</span></span>
<span class="line"><span style="color:#E1E4E8;">		}, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (enhancer </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">JwtTokenEnhancer) </span><span style="color:#6F42C1;">Extract</span><span style="color:#24292E;">(tokenValue </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Token, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2Details, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用签名解析 JWT 值</span></span>
<span class="line"><span style="color:#24292E;">	token, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> jwt.</span><span style="color:#005CC5;">ParseWithClaims</span><span style="color:#24292E;">(tokenValue, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">OAuth2TokenCustomClaims{}, </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(token </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">jwt.Token) (i </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}, e </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> enhancer.secretKey, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	claims </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> token.Claims.(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">OAuth2TokenCustomClaims)</span></span>
<span class="line"><span style="color:#24292E;">	expiresTime </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> time.</span><span style="color:#005CC5;">Unix</span><span style="color:#24292E;">(claims.ExpiresAt, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回从 JWT 中解析出来的客户端和用户信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">OAuth2Token{</span></span>
<span class="line"><span style="color:#24292E;">			RefreshToken:</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">claims.RefreshToken,</span></span>
<span class="line"><span style="color:#24292E;">			TokenValue:tokenValue,</span></span>
<span class="line"><span style="color:#24292E;">			ExpiresTime: </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">expiresTime,</span></span>
<span class="line"><span style="color:#24292E;">		}, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">OAuth2Details{</span></span>
<span class="line"><span style="color:#24292E;">			User:claims.UserDetails,</span></span>
<span class="line"><span style="color:#24292E;">			Client:claims.ClientDetails,</span></span>
<span class="line"><span style="color:#24292E;">		}, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以 JWT 作为令牌的载体，每个令牌都是自包含的，它携带了请求它的用户信息和客户端信息，在资源服务器解析 JWT 成功后，即可定位当前请求的来源方。</p><p>JwtTokenStore 存取令牌的能力主要借助 JwtTokenEnhancer 编码 JWT 和解码 JWT 实现。<strong>借助 JwtTokenEnhancer，我们可以很方便地管理 JwtTokenStore 中的令牌和用户、客户端之间的绑定关系</strong>。由于 JWT 签发之后不可更改，所以令牌只有在有效时长过后才会过期失效；如果存在立即失效访问令牌的需求，我还是建议你将令牌和用户、客户端的存储关系维护在外部存储中，这样就能提供令牌主动失效的能力。</p><h3 id="令牌端点" tabindex="-1">令牌端点 <a class="header-anchor" href="#令牌端点" aria-label="Permalink to &quot;令牌端点&quot;">​</a></h3><p>前面我们说明过授权服务器中提供了 /oauth/token 端点和 /oauth/check_token 端点分别用于请求访问令牌和验证令牌的有效性。</p><p>/oauth/token 端点通过请求参数中的 grant_type 来识别请求访问令牌的授权类型，并验证请求中携带的客户端凭证和用户凭证是否有效，只有通过验证的客户端请求才能获取访问令牌。它通过 TokenGranter.Grant 方法为客户端生成访问令牌。</p><p>客户端和资源服务器使用/oauth/check_token 端点验证访问令牌的有效性。如果访问令牌有效，该端点将会返回与访问令牌绑定的用户信息和客户端信息，它使用TokenService.GetOAuth2DetailsByAccessToken 方法验证访问令牌的有效性。</p><p>在请求访问令牌之前，授权服务器会首先验证 Authorization 请求头中携带的客户端信息，对此需要添加 makeClientAuthorizationContext 请求处理器来获取请求中的客户端信息，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makeClientAuthorizationContext</span><span style="color:#E1E4E8;">(clientDetailsService service.ClientDetailsService, logger log.Logger) kithttp.RequestFunc {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(ctx context.Context, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) context.Context {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 解析 Authorization，获取 clientId 和 clientSecret</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> clientId, clientSecret, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> r.</span><span style="color:#79B8FF;">BasicAuth</span><span style="color:#E1E4E8;">(); ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 验证客户端信息</span></span>
<span class="line"><span style="color:#E1E4E8;">			clientDetails, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> clientDetailsService.</span><span style="color:#79B8FF;">GetClientDetailsByClientId</span><span style="color:#E1E4E8;">(ctx, clientId, clientSecret)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithValue</span><span style="color:#E1E4E8;">(ctx, endpoint.OAuth2ErrorKey, ErrInvalidClientRequest)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithValue</span><span style="color:#E1E4E8;">(ctx, endpoint.OAuth2ClientDetailsKey, clientDetails)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithValue</span><span style="color:#E1E4E8;">(ctx, endpoint.OAuth2ErrorKey, ErrInvalidClientRequest)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">makeClientAuthorizationContext</span><span style="color:#24292E;">(clientDetailsService service.ClientDetailsService, logger log.Logger) kithttp.RequestFunc {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(ctx context.Context, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) context.Context {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 解析 Authorization，获取 clientId 和 clientSecret</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> clientId, clientSecret, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> r.</span><span style="color:#005CC5;">BasicAuth</span><span style="color:#24292E;">(); ok {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 验证客户端信息</span></span>
<span class="line"><span style="color:#24292E;">			clientDetails, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> clientDetailsService.</span><span style="color:#005CC5;">GetClientDetailsByClientId</span><span style="color:#24292E;">(ctx, clientId, clientSecret)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithValue</span><span style="color:#24292E;">(ctx, endpoint.OAuth2ErrorKey, ErrInvalidClientRequest)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithValue</span><span style="color:#24292E;">(ctx, endpoint.OAuth2ClientDetailsKey, clientDetails)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithValue</span><span style="color:#24292E;">(ctx, endpoint.OAuth2ErrorKey, ErrInvalidClientRequest)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一般来讲，客户端信息会通过 base64 的方式加密后放入 Authorization 请求头中，加密前的信息按照 clientId:clientSecret 的规则组装。在上述代码中，通过 makeClientAuthorizationContext 方法从 Authorization 请求头获取到请求的客户端信息后，使用 ClientDetailsService 加载客户端信息并校验，验证成功后，将客户端信息放入 context 中传递到下游。</p><p>在请求正式进入 Endpoint 之前，授权服务器还要验证 context 的客户端信息是否存在，这就需要添加客户端验证中间件 MakeClientAuthorizationMiddleware，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeClientAuthorizationMiddleware</span><span style="color:#E1E4E8;">(logger log.Logger) endpoint.Middleware {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(next endpoint.Endpoint) endpoint.Endpoint {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(ctx context.Context, request </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) (response </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}, err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 请求上下文是否存在错误</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#79B8FF;">Value</span><span style="color:#E1E4E8;">(OAuth2ErrorKey).(</span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">); ok{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 验证客户端信息是否存在，不存在返回异常</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> _, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ctx.</span><span style="color:#79B8FF;">Value</span><span style="color:#E1E4E8;">(OAuth2ClientDetailsKey).(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">model.ClientDetails); </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ok{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, ErrInvalidClientRequest</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(ctx, request)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeClientAuthorizationMiddleware</span><span style="color:#24292E;">(logger log.Logger) endpoint.Middleware {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(next endpoint.Endpoint) endpoint.Endpoint {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(ctx context.Context, request </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) (response </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}, err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 请求上下文是否存在错误</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ctx.</span><span style="color:#005CC5;">Value</span><span style="color:#24292E;">(OAuth2ErrorKey).(</span><span style="color:#D73A49;">error</span><span style="color:#24292E;">); ok{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 验证客户端信息是否存在，不存在返回异常</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> _, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ctx.</span><span style="color:#005CC5;">Value</span><span style="color:#24292E;">(OAuth2ClientDetailsKey).(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">model.ClientDetails); </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ok{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, ErrInvalidClientRequest</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(ctx, request)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 MakeClientAuthorizationMiddleware 中间件中会验证请求上下文是否携带了客户端信息，如果请求中没有携带验证过的客户端信息，将直接返回错误给请求方。</p><p>接下来我们就来演示如何通过 /oauth/token 端点获取访问令牌和通过 /oauth/check_token 端点验证访问令牌。我们在授权服务器内内置用户名为 aoho、密码为 123456 的用户信息和客户端标识为 clientId、密钥为 clientSecret 的客户端信息，使用密码类型为该客户端请求用户 aoho 的访问令牌，curl 命令如下：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST \\</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;http://localhost:10098/oauth/token?grant_type=password&#39;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&#39;Authorization: Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0&#39;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&#39;Content-Type: multipart/form-data&#39;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&#39;Host: localhost:10098&#39;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-F</span><span style="color:#E1E4E8;"> username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">aoho \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-F</span><span style="color:#E1E4E8;"> password</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST \\</span></span>
<span class="line"><span style="color:#032F62;">&#39;http://localhost:10098/oauth/token?grant_type=password&#39;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&#39;Authorization: Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0&#39;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&#39;Content-Type: multipart/form-data&#39;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&#39;Host: localhost:10098&#39;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-F</span><span style="color:#24292E;"> username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">aoho \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-F</span><span style="color:#24292E;"> password</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span></span></code></pre></div><p>将访问令牌的 TokenValue 提交到 /oauth/check_token 端点中，即可验证访问令牌的有效性，获取令牌绑定的客户端和用户信息，curl 命令如下所示：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;http://localhost:10098/oauth/check_token?token=...&#39;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&#39;Authorization: Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0&#39;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">H </span><span style="color:#9ECBFF;">&#39;Host: localhost:10098&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;http://localhost:10098/oauth/check_token?token=...&#39;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&#39;Authorization: Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0&#39;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">H </span><span style="color:#032F62;">&#39;Host: localhost:10098&#39;</span></span></code></pre></div><p>由于 TokenValue 过长，参数中使用省略号表示，有效的访问令牌能够获取令牌绑定的客户端信息和用户信息，如下所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;o_auth_details&quot;</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;Client&quot;</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;ClientId&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;clientId&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;ClientSecret&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;AccessTokenValiditySeconds&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1800</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;RefreshTokenValiditySeconds&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">18000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;RegisteredRedirectUri&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;http://127.0.0.1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;AuthorizedGrantTypes&quot;</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;refresh_token&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;User&quot;</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;UserId&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;Username&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;aoho&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;Password&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;Authorities&quot;</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&quot;Simple&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;error&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;o_auth_details&quot;</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;Client&quot;</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;ClientId&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;clientId&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;ClientSecret&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;AccessTokenValiditySeconds&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1800</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;RefreshTokenValiditySeconds&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">18000</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;RegisteredRedirectUri&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;http://127.0.0.1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;AuthorizedGrantTypes&quot;</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;refresh_token&quot;</span></span>
<span class="line"><span style="color:#24292E;">            ]</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;User&quot;</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;UserId&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;Username&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;aoho&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;Password&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;Authorities&quot;</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;Simple&quot;</span></span>
<span class="line"><span style="color:#24292E;">            ]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;error&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里，我们就实现了授权服务器颁发访问令牌和验证访问令牌有效性的主要能力。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>在统一认证与授权服务体系中，授权服务器的主要职责为<strong>颁发令牌</strong> 和<strong>验证令牌的有效性</strong>。</p><p>在本课时，我们使用 Go 搭建了一个提供 HTTP 接口的授权服务器。客户端能够使用密码类型，通过携带用户的用户名密码向授权服务器请求访问令牌。访问令牌是一段自包含的 JWT 对象，其内包含了令牌绑定的用户和客户端信息。另外，授权服务器还提供相应的接口给客户端和资源服务器验证访问令牌的有效性，以及获取令牌绑定的用户和客户端信息。</p><p>希望通过本课时的学习能够帮助你了解如何实现一个基本的授权服务器，加深你对统一认证与授权服务体系的认知。在下一课时，我们将介绍如何实现资源服务器，并尝试使用授权服务器颁发的访问令牌访问资源服务器中的受保护用户资源。</p>`,49);function h(k,d,C,T,g,v){const a=e("Image");return t(),r("div",null,[E,y,i,u,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/5E/72/Ciqc1F-GurGAAcYMAADV-kU9nYM616.png"}),n(),F,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/5E/72/Ciqc1F-GuwaAGy2gAABuKAtfMbk448.png"}),n(),D,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/5E/7D/CgqCHl-GuzKAcO8xAAAn-W9KECE504.png"}),n(),A])}const f=o(c,[["render",h]]);export{S as __pageData,f as default};
