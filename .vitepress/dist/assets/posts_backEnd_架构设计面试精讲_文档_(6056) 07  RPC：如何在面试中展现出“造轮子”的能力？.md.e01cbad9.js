import{_ as l,j as o,o as e,g as t,k as a,h as p,Q as s}from"./chunks/framework.a0d18f64.js";const F=JSON.parse('{"title":"07RPC：如何在面试中展现出“造轮子”的能力？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/架构设计面试精讲_文档/(6056) 07  RPC：如何在面试中展现出“造轮子”的能力？.md","filePath":"posts/backEnd/架构设计面试精讲_文档/(6056) 07  RPC：如何在面试中展现出“造轮子”的能力？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/架构设计面试精讲_文档/(6056) 07  RPC：如何在面试中展现出“造轮子”的能力？.md"},r=s('<h1 id="_07rpc-如何在面试中展现出-造轮子-的能力" tabindex="-1">07RPC：如何在面试中展现出“造轮子”的能力？ <a class="header-anchor" href="#_07rpc-如何在面试中展现出-造轮子-的能力" aria-label="Permalink to &quot;07RPC：如何在面试中展现出“造轮子”的能力？&quot;">​</a></h1><p>我们知道，很多应用系统发展到一定规模之后，都会向着服务化方向演进，演进后的单体系统就变成了由一个个微服务组成的服务化系统，各个微服务系统之间通过远程 RPC 调用的方式通信。</p><p>可以说，RPC 是微服务架构的基础，从事互联网系统开发，就离不开 RPC 框架，所以这一讲，我们就立足面试场景下对 RPC 技术的考察，来讲解你要掌握的技术点和面试思路。</p><h3 id="案例背景" tabindex="-1">案例背景 <a class="header-anchor" href="#案例背景" aria-label="Permalink to &quot;案例背景&quot;">​</a></h3><p>主流的 RPC 框架很多，比如 Dubbo、Thrift、gRPC 等，非主流的框架你在 GitHub 上搜索也有很多结果。框架资源多，很多同学在工作中的选择也多，基本上都是拿来就用，停留在基础概念和使用上，不会深究技术实现。</p><p>所以很多候选人对于 RPC 有关的面试问题存在一个误区，认为面试官只会问这样几个问题：</p><ul><li><p>RPC 的一次调用过程是怎样的？</p></li><li><p>RPC 的服务发现是如何实现的？</p></li><li><p>RPC 的负载均衡有哪些？</p></li><li><p>......</p></li></ul><p>这些问题看似专业，却很容易搜索到答案，如果作为面试题很难区分候选人的技术能力。所以针对 RPC 的技术考察，目前大多数面试官会从&quot;<strong>实践操作 + 原理掌握</strong>&quot;两个角度出发，递进地考察候选人。</p><p>具体怎么考察呢？我们接着往下看。</p><h3 id="rpc-实践操作" tabindex="-1">RPC 实践操作 <a class="header-anchor" href="#rpc-实践操作" aria-label="Permalink to &quot;RPC 实践操作&quot;">​</a></h3><p>面试官通常会从线上的实际案例出发，考察候选人对&quot;实践操作&quot;的掌握程度。举个例子：在电商 App 商品详情页中，用户每次刷新页面时，App 都会请求业务网关系统，并由网关系统远程调用多个下游服务（比如商品服务、促销服务、广告服务等）。</p><p>针对这个场景，面试官会问&quot;对于整条 RPC 调用链路（从 App 到网关再到各个服务系统），怎么设置 RPC 的超时时间，要考虑哪些问题？&quot;</p>',12),E=s('<p>App 商品详情页服务调用</p><p>一些初中级研发会觉得问题很简单，不用想也知道：App 远程调用网关系统的超时时间要大于网关系统调用后端各服务的超时时间之和。这样至少能保证在网关与下游服务的每个 PRC 调用执行完成之前不超时。</p><p>如果你这么回答，从&quot;实践&quot;的角度上看，基本是不合格的。</p><p>因为 PRC 接口的超时设置看似简单，但其中却涉及了很多技术层面的问题。比如 RPC 都有超时重传的机制，如果后端服务触发超时重传，这时对 App 来说，也会存在请求等待超时的风险，就会出现后端服务还没来得及做降级处理，商品详情页就已经等待超时了。</p><p>并且在 RPC 调用的过程中也还会涉及其他的技术点，比如：</p><ul><li><p>即使考虑到整个调用链的平均响应时长会受到所有依赖服务的耗时和重传次数影响，那么依据什么来设置 RPC 超时时间和重试次数呢？</p></li><li><p>如果发生超时重传，怎么区分哪些 RPC 服务可重传，哪些不可重传呢？</p></li><li><p>如果请求超过了 PRC 的重传次数，一般会触发服务降级，这又会对商品详情页造成什么影响？</p></li><li><p>......</p></li></ul><p>总的来说，任何一个微服务出现性能问题，都会影响网关系统的平均响应时长，最终对 App 产生影响。所以从 RPC 接口的超时问题上，面试官会考察候选人很多深层次的开发实践能力。</p><p>那具体要怎么回答呢？我建议你参考以下解题思路。</p><ul><li><p><strong>结合 TP99 请求耗时</strong>：首先如果你要回答&quot;超时时间设置和重传次数问题&quot;，需要根据每一个微服务 TP99 的请求耗时，以及业务场景进行综合衡量。</p></li><li><p><strong>RPC 调用方式</strong>：你要站在业务场景下，讲清楚网关调用各下游服务的串并行方式，服务之间是否存在上下服务依赖。</p></li><li><p><strong>分析核心服务</strong>：分析出哪些是核心服务，哪些是非核心服务，核心服务是否有备用方案，非核心服务是否有降级策略。</p></li></ul><p>总的来讲，解答&quot;实践操作类面试题&quot;，一定要结合理论和落地实践，要做到即有理也有据，有理表示要有分析问题的能力，有据表示具备落地实战的经验。很多同学的通病是：回答问题只有方案，没有落地细节，这会让面试官认为你技术不扎实。</p><p>进一步，如果面试官觉得你&quot;实践问题&quot;答得不错，会深入考察你对 RPC 的原理性知识的掌握情况。</p><h3 id="rpc-原理掌握" tabindex="-1">RPC 原理掌握 <a class="header-anchor" href="#rpc-原理掌握" aria-label="Permalink to &quot;RPC 原理掌握&quot;">​</a></h3><p>以刚刚的&quot;电商 App&quot;场景为例：</p>',13),i=s('<p>App 商品详情页服务调用</p><p>此时，商品详情页的 QPS 已达到了 2 万次/s，在做了服务化拆分之后，此时完成一次请求需要调用 3 次 RPC 服务，计算下来，RPC 服务需要承载大概 6 万次/s 的请求。那么你怎么设计 RPC 框架才能承载 6 万次/s 请求量呢？</p><p>能否答好这个问题，很考验候选人对 RPC 原理掌握的深度，我建议你从两个角度分析。</p><ul><li><p><strong>优化 RPC 的网络通信性能：</strong> 高并发下选择高性能的网络编程 I/O 模型。</p></li><li><p><strong>选型合适的 RPC 序列化方式：</strong> 选择合适的序列化方式，进而提升封包和解包的性能。</p></li></ul><p>然而我在面试候选人时发现，一些同学虽然做了准备，但只能说出个别 RPC 框架的大致流程，不能深刻理解每个环节的工作原理，所以整体给我的感觉就是：<strong>应用层面通过，原理深度不够</strong>。</p><p>而我对你的要求是：对于中间件等技术工具和框架，虽然在实际工作中不推荐重复&quot;造轮子&quot;，<strong>但在面试中要证明自己具备&quot;造轮子&quot;的能力</strong>，因为要评价一个程序员是否对技术栈有全面的认识，考察其&quot;造轮子&quot;的能力是一个不错的切入点。</p><p>接下来我们先理解一下完整的 RPC 会涉及哪些步骤，然后再解析其中的重要环节，搞懂 RPC 原理的考察点。</p><h4 id="一次完整的-rpc-流程" tabindex="-1">一次完整的 RPC 流程 <a class="header-anchor" href="#一次完整的-rpc-流程" aria-label="Permalink to &quot;一次完整的 RPC 流程&quot;">​</a></h4><p><strong>因为 RPC 是远程调用，首先会涉及网络通信，</strong> 又因为 RPC 用于业务系统之间的数据交互，要保证数据传输的可靠性，所以它一般默认采用 TCP 来实现网络数据传输。</p><p>网络传输的数据必须是二进制数据，可是在 RPC 框架中，调用方请求的出入参数都是对象，对象不能直接在网络中传输，所以需要提前把对象转成可传输的二进制数据，转换算法还要可逆，<strong>这个过程就叫&quot;序列化&quot;和&quot;反序列化&quot;。</strong></p><p>另外，在网络传输中，RPC 不会把请求参数的所有二进制数据一起发送到服务提供方机器上，而是拆分成好几个数据包（或者把好几个数据包封装成一个数据包），所以服务提供方可能一次获取多个或半个数据包，这也就是网络传输中的粘包和半包问题。<strong>为了解决这个问题，需要提前约定传输数据的格式，即&quot;RPC 协议&quot;。</strong> 大多数的协议会分成数据头和消息体：</p><ul><li><p>数据头一般用于身份识别，包括协议标识、数据大小、请求类型、序列化类型等信息；</p></li><li><p>消息体主要是请求的业务参数信息和扩展属性等。</p></li></ul><p>在确定好&quot; RPC 协议&quot;后，一次完整的 RPC 调用会经过这样几个步骤：</p><ul><li><p>调用方持续把请求参数对象序列化成二进制数据，经过 TCP 传输到服务提供方；</p></li><li><p>服务提供方从 TCP 通道里面接收到二进制数据；</p></li><li><p>根据 RPC 协议，服务提供方将二进制数据分割出不同的请求数据，经过反序列化将二进制数据逆向还原出请求对象，找到对应的实现类，完成真正的方法调用；</p></li><li><p>然后服务提供方再把执行结果序列化后，回写到对应的 TCP 通道里面；</p></li><li><p>调用方获取到应答的数据包后，再反序列化成应答对象。</p></li></ul><p>这样调用方就完成了一次 RPC 调用。</p>',15),y=s(`<p>RPC 通信流程</p><p>你应该能发现， RPC 通信流程中的核心组成部分包括了<strong>协议、序列化与反序列化，以及网络通信</strong>。在了解了 RPC 的调用流程后，我们回到&quot;电商 App&quot;的案例中，先来解答序列化的问题。</p><h4 id="如何选型序列化方式" tabindex="-1">如何选型序列化方式 <a class="header-anchor" href="#如何选型序列化方式" aria-label="Permalink to &quot;如何选型序列化方式&quot;">​</a></h4><p>RPC 的调用过程会涉及网络数据（二进制数据）的传输，<strong>从中延伸的问题是：如何选型序列化和反序列化方式？</strong></p><p>要想回答这一点，你需要先明确序列化方式，常见的方式有以下几种。</p><ul><li><p>JSON：Key-Value 结构的文本序列化框架，易用且应用最广泛，基于 HTTP 协议的 RPC 框架都会选择 JSON 序列化方式，但它的空间开销很大，在通信时需要更多的内存。</p></li><li><p>Hessian：一种紧凑的二进制序列化框架，在性能和体积上表现比较好。</p></li><li><p>Protobuf：Google 公司的序列化标准，序列化后体积相比 JSON、Hessian 还要小，兼容性也做得不错。</p></li></ul><p>明确&quot;常见的序列化方式&quot;后，你就可以组织回答问题的逻辑了：<strong>考虑时间与空间开销，切勿忽略兼容性。</strong></p><p>在大量并发请求下，如果序列化的速度慢，势必会增加请求和响应的时间（时间开销）。另外，如果序列化后的传输数据体积较大，也会使网络吞吐量下降（空间开销）。所以，你要先考虑上述两点才能保证 RPC 框架的整体性能。除此之外，在 RPC 迭代中，常常会因为序列化协议的兼容性问题使 RPC 框架不稳定，比如某个类型为集合类的入参服务调用者不能解析，某个类的一个属性不能正常调用......</p><p>当然还有安全性、易用性等指标，不过并不是 RPC 的关键指标。总的来说，在面试时，你要综合考虑上述因素，总结出常用序列化协议的选型标准，比如首选 Hessian 与 Protobuf，因为它们在时间开销、空间开销、兼容性等关键指标上表现良好。</p><h4 id="如何提升网络通信性能" tabindex="-1">如何提升网络通信性能 <a class="header-anchor" href="#如何提升网络通信性能" aria-label="Permalink to &quot;如何提升网络通信性能&quot;">​</a></h4><p>如何提升 RPC 的网络通信性能，这句话翻译一下就是：一个 RPC 框架如何选择高性能的网络编程 I/O 模型？这样一来，和 I/O 模型相关的知识点就是你需要掌握的了。</p><p>对于 RPC 网络通信问题，你首先要掌握网络编程中的五个 I/O 模型：</p><ul><li><p>同步阻塞 I/O（BIO）</p></li><li><p>同步非阻塞 I/O</p></li><li><p>I/O 多路复用（NIO）</p></li><li><p>信号驱动</p></li><li><p>以及异步 I/O（AIO）</p></li></ul><p>但在实际开发工作，最为常用的是 BIO 和 NIO（这两个 I/O 模型也是面试中面试官最常考察候选人的）。为了让你更好地理解编程模型中，这两个 I/O 模型典型的技术实现，我以 Java 程序例，编程写了一个简单的网络程序：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BIOSever</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServerSocket ss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerSocket</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 绑定端口 9090</span></span>
<span class="line"><span style="color:#E1E4E8;">    ss.bind(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InetSocketAddress</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9090</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.println(</span><span style="color:#9ECBFF;">&quot;server started listening &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> PORT);</span></span>
<span class="line"><span style="color:#E1E4E8;">    try {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Socket s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 阻塞等待客户端发送连接请求</span></span>
<span class="line"><span style="color:#E1E4E8;">            s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ss.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerTaskThread</span><span style="color:#E1E4E8;">(s)).</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 省略代码...</span></span>
<span class="line"><span style="color:#E1E4E8;">    } finally {</span></span>
<span class="line"><span style="color:#E1E4E8;">        if (ss !</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ss.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            ss </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServerTaskThread</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略代码...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 阻塞等待客户端发请求过来</span></span>
<span class="line"><span style="color:#E1E4E8;">        String readLine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> in.</span><span style="color:#B392F0;">readLine</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (readLine </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 省略代码...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略代码...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BIOSever</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    ServerSocket ss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerSocket</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 绑定端口 9090</span></span>
<span class="line"><span style="color:#24292E;">    ss.bind(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9090</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    System.out.println(</span><span style="color:#032F62;">&quot;server started listening &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> PORT);</span></span>
<span class="line"><span style="color:#24292E;">    try {</span></span>
<span class="line"><span style="color:#24292E;">        Socket s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 阻塞等待客户端发送连接请求</span></span>
<span class="line"><span style="color:#24292E;">            s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ss.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerTaskThread</span><span style="color:#24292E;">(s)).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 省略代码...</span></span>
<span class="line"><span style="color:#24292E;">    } finally {</span></span>
<span class="line"><span style="color:#24292E;">        if (ss !</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            ss.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            ss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerTaskThread</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略代码...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">while</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 阻塞等待客户端发请求过来</span></span>
<span class="line"><span style="color:#24292E;">        String readLine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (readLine </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 省略代码...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略代码...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>这段代码的主要逻辑是：</strong> 在服务端创建一个 ServerSocket 对象，绑定 9090 端口，然后启动运行，阻塞等待客户端发起连接请求，直到有客户端的连接发送过来后，accept() 方法返回。当有客户端的连接请求后，服务端会启动一个新线程 ServerTaskThread，用新创建的线程去处理当前用户的读写操作。</p>`,16),u=s("<p>BIO 网络模型</p><p>所以，BIO 的网络模型中，<strong>每当客户端发送一个连接请求给服务端，服务端都会启动一个新的线程去处理客户端连接的读写操作</strong>，即每个 Socket 都对应一个独立的线程，客户端 Socket 和服务端工作线程的数量是 1 比 1，这会导致服务器的资源不够用，无法实现高并发下的网络开发。所以 BIO 的网络模型只适用于 Socket 连接不多的场景，无法支撑几十甚至上百万的连接场景。</p><p>另外，<strong>BIO 模型有两处阻塞的地方</strong>。</p><ul><li><p>服务端阻塞等待客户端发起连接。在第 11 行代码中，通过 serverSocket.accept() 方法服务端等待用户发连接请求过来。</p></li><li><p>连接成功后，工作线程阻塞读取客户端 Socket 发送数据。在第 27 行代码中，通过 in.readLine() 服务端从网络中读客户端发送过来的数据，这个地方也会阻塞。如果客户端已经和服务端建立了一个连接，但客户端迟迟不发送数据，那么服务端的 readLine() 操作会一直阻塞，造成资源浪费。</p></li></ul><p>以上这些就是 BIO 网络模型的问题所在，总结下来就两点：</p><ul><li><p><strong>Socket 连接数量受限，不适用于高并发场景；</strong></p></li><li><p><strong>有两处阻塞，分别是等待用户发起连接，和等待用户发送数据。</strong></p></li></ul><p><strong>那怎么解决这个问题呢？</strong> 答案是 NIO 网络模型，操作上是用一个线程处理多个连接，使得每一个工作线程都可以处理多个客户端的 Socket 请求，这样工作线程的利用率就能得到提升，所需的工作线程数量也随之减少。此时 NIO 的线程模型就变为 1 个工作线程对应多个客户端 Socket 的请求，这就是所谓的 I/O多路复用。</p>",7),_=s('<p>NIO 网络模型</p><p>顺着这个思路，我们继续深入思考：既然服务端的工作线程可以服务于多个客户端的连接请求，那么具体由哪个工作线程服务于哪个客户端请求呢？</p><p>这时就需要一个调度者去监控所有的客户端连接，比如当图中的客户端 A 的输入已经准备好后，就由这个调度者去通知服务端的工作线程，告诉它们由工作线程 1 去服务于客户端 A 的请求。这种思路就是 NIO 编程模型的基本原理，调度者就是 Selector 选择器。</p><p>由此可见，<strong>NIO 比 BIO 提高了服务端工作线程的利用率，并增加了一个调度者，来实现 Socket 连接与 Socket 数据读写之间的分离</strong>。</p><p>在目前主流的 RPC 框架中，广泛使用的也是 I/O 多路复用模型，Linux 系统中的 select、poll、epoll等系统调用都是 I/O 多路复用的机制。</p><p>在面试中，对于高级研发工程师的考察，还会有两个技术扩展考核点。</p><ul><li><p>Reactor 模型（即反应堆模式），以及 Reactor 的 3 种线程模型，分别是单线程 Reactor 线程模型、多线程 Reactor 线程模型，以及主从 Reactor 线程模型。</p></li><li><p>Java 中的高性能网络编程框架 Netty。</p></li></ul><p>可以这么说，在高性能网络编程中，大多数都是基于 Reactor 模式，其中最为典型的是 Java 的 Netty 框架，而 Reactor 模式是基于 I/O 多路复用的，所以，对于 Reactor 和 Netty 的考察也是避免不了的。因为相关资料很多，我就不展开了，你可以在课下补充这部分的知识，并在留言区与我交流。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲，我带你了解了面试官考察 RPC 技术的套路，无论是初中级还是高级研发工程师，都需要掌握这一讲的内容。</p><ul><li><p>在&quot;实践操作&quot;中，我带你通过&quot;如何设置 RPC 超时时间&quot;的场景，学习了在微服务系统中，系统整体的平均响应时长，会受到所有依赖服务接口的耗时和重传次数影响。</p></li><li><p>在&quot;原理掌握&quot;中，我通过&quot;商品详情页&quot;的案例，引出 RPC 框架的原理与核心功能，如网络通信模型的选型、序列化和反序列化框架的选型等。</p></li></ul><p>最后，我还是要强调一下，程序员一定要具备造轮子的能力，目的是突破技术栈瓶颈，因为技术只有动手实践过，才能有更加全面和深入的思考。学完这一讲后，我建议你阅读一些成熟的 RPC 框架的源代码，比如阿里开源的 Dubbo，或 Google 的 gRPC。</p><p>当然在实际工作中，一个产品级别的 RPC 框架的开发，除了要具备网络通信、序列化和反序列化、协议等基础的功能之外，还要具备如连接管理、负载均衡、请求路由、熔断降级、优雅关闭等高级功能的设计，虽然这些内容在面试中不要求你掌握，但是如果你了解是可以作为加分项的，例如连接管理就会涉及连接数的维护与服务心跳检测。</p><p>本节课的思考题是：结合你在工作中使用 RPC 框架的时候，遇到过什么问题，你是怎么解决的？我们下期再会！</p>',14);function C(P,R,A,d,g,h){const n=o("Image");return e(),t("div",null,[r,a(n,{alt:"Lark20210115-182949.png",src:"https://s0.lgstatic.com/i/image2/M01/05/F4/CgpVE2ABbtSAerROAADrjM6HgkI724.png"}),p(),E,a(n,{alt:"Lark20210115-182958.png",src:"https://s0.lgstatic.com/i/image2/M01/05/F4/CgpVE2ABbt-Aabb_AAEYewdmwhw920.png"}),p(),i,a(n,{alt:"Lark20210115-183000.png",src:"https://s0.lgstatic.com/i/image/M00/8E/05/Ciqc1GABbyeAWysgAAGQtM8Kx4Q574.png"}),p(),y,a(n,{alt:"Lark20210115-183003.png",src:"https://s0.lgstatic.com/i/image/M00/8E/05/Ciqc1GABbzKAHZZoAAG3ojSYQ8c878.png"}),p(),u,a(n,{alt:"Lark20210115-183005.png",src:"https://s0.lgstatic.com/i/image/M00/8E/05/Ciqc1GABbzqAPbdOAAIaibzeawc243.png"}),p(),_])}const S=l(c,[["render",C]]);export{F as __pageData,S as default};
