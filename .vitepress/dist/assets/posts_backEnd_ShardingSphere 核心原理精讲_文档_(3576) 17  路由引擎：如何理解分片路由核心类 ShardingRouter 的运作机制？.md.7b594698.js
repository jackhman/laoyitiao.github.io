import{_ as e,j as o,o as t,g as r,k as l,h as n,Q as p,s}from"./chunks/framework.a0d18f64.js";const _=JSON.parse('{"title":"17路由引擎：如何理解分片路由核心类ShardingRouter的运作机制？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3576) 17  路由引擎：如何理解分片路由核心类 ShardingRouter 的运作机制？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3576) 17  路由引擎：如何理解分片路由核心类 ShardingRouter 的运作机制？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3576) 17  路由引擎：如何理解分片路由核心类 ShardingRouter 的运作机制？.md"},E=p('<h1 id="_17路由引擎-如何理解分片路由核心类shardingrouter的运作机制" tabindex="-1">17路由引擎：如何理解分片路由核心类ShardingRouter的运作机制？ <a class="header-anchor" href="#_17路由引擎-如何理解分片路由核心类shardingrouter的运作机制" aria-label="Permalink to &quot;17路由引擎：如何理解分片路由核心类ShardingRouter的运作机制？&quot;">​</a></h1><p>前面我们花了几个课时对 ShardingSphere 中的 SQL 解析引擎做了介绍，我们明白 SQL 解析的作用就是根据输入的 SQL 语句生成一个 SQLStatement 对象。</p><p>从今天开始，我们将进入 <strong>ShardingSphere 的路由（Routing）引擎部分的源码解析</strong> 。从流程上讲，<strong>路由引擎</strong>是整个分片引擎执行流程中的第二步，即基于 SQL 解析引擎所生成的 SQLStatement，通过解析执行过程中所携带的上下文信息，来获取匹配数据库和表的分片策略，并生成路由结果。</p><h3 id="分层-路由引擎整体架构" tabindex="-1">分层：路由引擎整体架构 <a class="header-anchor" href="#分层-路由引擎整体架构" aria-label="Permalink to &quot;分层：路由引擎整体架构&quot;">​</a></h3><p>与介绍 SQL 解析引擎时一样，我们通过翻阅 ShardingSphere 源码，首先梳理了如下所示的包结构：</p>',5),y=p(`<p>上述包图总结了与路由机制相关的各个核心类，我们可以看到整体呈一种对称结构，即根据是 <strong>PreparedStatement</strong> 还是<strong>普通 Statement</strong> 分成两个分支流程。</p><p>同时，我们也可以把这张图中的类按照其所属的包结构<strong>分成两个层次</strong> ：位于底层的 sharding-core-route 和位于上层的 sharding-core-entry，这也是 ShardingSphere 中所普遍采用的一种分包原则，即<strong>根据类的所属层级来组织包结构</strong> 。关于 ShardingSphere 的分包原则我们在 <a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=&amp;courseId=257&amp;lagoufrom=noapp" target="_blank" rel="noreferrer">《12 | 从应用到原理：如何高效阅读 ShardingSphere 源码？》</a>中也已经进行了介绍，接下来我们具体分析这一原则在路由引擎中的应用。</p><h4 id="_1-sharding-core-route-工程" tabindex="-1">1.sharding-core-route 工程 <a class="header-anchor" href="#_1-sharding-core-route-工程" aria-label="Permalink to &quot;1.sharding-core-route 工程&quot;">​</a></h4><p>我们先来看图中的 ShardingRouter 类，该类是整个路由流程的启动点。ShardingRouter 类直接依赖于解析引擎 SQLParseEngine 类完成 SQL 解析并获取 SQLStatement 对象，然后供 PreparedStatementRoutingEngine 和 StatementRoutingEngine 进行使用。注意到这几个类都位于 sharding-core-route 工程中，<strong>处于底层组件</strong>。</p><h4 id="_2-sharding-core-entry-工程" tabindex="-1">2.sharding-core-entry 工程 <a class="header-anchor" href="#_2-sharding-core-entry-工程" aria-label="Permalink to &quot;2.sharding-core-entry 工程&quot;">​</a></h4><p>另一方面，上图中的 PreparedQueryShardingEngine 和 SimpleQueryShardingEngine 则位于 sharding-core-entry 工程中。从包的命名上看，entry 相当于是访问的入口，所以我们可以判断这个工程中所提供的类<strong>属于面向应用层组件</strong>，处于更加上层的位置。PreparedQueryShardingEngine 和 SimpleQueryShardingEngine 的使用者分别是 ShardingPreparedStatement 和 ShardingStatement。这两个类再往上就是 ShardingConnection 以及 ShardingDataSource 这些直接面向应用层的类了。</p><h3 id="路由核心类-shardingrouter" tabindex="-1">路由核心类：ShardingRouter <a class="header-anchor" href="#路由核心类-shardingrouter" aria-label="Permalink to &quot;路由核心类：ShardingRouter&quot;">​</a></h3><p>通过以上分析，我们对路由引擎的整体结构有了一个初步的认识。对于采用分层结构的执行流程而言，有两种解析思路，即自上而下或自下而上。今天，我们的思路是<strong>从底层出发逐层往上</strong>分析流程的链路，先来看路由引擎中最底层的对象 ShardingRouter，变量定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule shardingRule; </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingSphereMetaData metaData; </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLParseEngine parseEngine;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule shardingRule; </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingSphereMetaData metaData; </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLParseEngine parseEngine;</span></span></code></pre></div><p>在 ShardingRouter 中，我们首先看到了熟悉的 SQL 解析引擎 SQLParseEngine 以及它的使用方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SQLStatement </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicSQL, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> useCache) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parseEngine.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(logicSQL, useCache); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SQLStatement </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicSQL, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> useCache) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> parseEngine.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(logicSQL, useCache); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码非常简单，即通过 SQLParseEngine 对传入的 SQL 进行解析返回一个 SQLStatement 对象。这里将 SQL 命名为 logicSQL，以便区别在分片和读写分离情况下的真实 SQL。</p><p>接下来我们来看一下 ShardingRule，请注意这是一个基础类，代表着分片的各种规则信息。ShardingRule 类位于 sharding-core-common 工程中，主要保存着与分片相关的各种规则信息，以及 ShardingKeyGenerator 等分布式主键的创建过程，各个变量定义以及对应的注释如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//分片规则配置类，封装各种配置项信息 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRuleConfiguration ruleConfiguration; </span></span>
<span class="line"><span style="color:#6A737D;">//DataSource 名称列表 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingDataSourceNames shardingDataSourceNames; </span></span>
<span class="line"><span style="color:#6A737D;">//针对表的规则列表 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">TableRule</span><span style="color:#E1E4E8;">&gt; tableRules; </span></span>
<span class="line"><span style="color:#6A737D;">//针对绑定表的规则列表 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">BindingTableRule</span><span style="color:#E1E4E8;">&gt; bindingTableRules; </span></span>
<span class="line"><span style="color:#6A737D;">//广播表名称列表 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; broadcastTables; </span></span>
<span class="line"><span style="color:#6A737D;">//默认的数据库分片策略 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingStrategy defaultDatabaseShardingStrategy; </span></span>
<span class="line"><span style="color:#6A737D;">//默认的数据表分片策略 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingStrategy defaultTableShardingStrategy; </span></span>
<span class="line"><span style="color:#6A737D;">//默认的分片键生成器 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingKeyGenerator defaultShardingKeyGenerator; </span></span>
<span class="line"><span style="color:#6A737D;">//针对读写分离的规则列表 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">MasterSlaveRule</span><span style="color:#E1E4E8;">&gt; masterSlaveRules; </span></span>
<span class="line"><span style="color:#6A737D;">//加密规则 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EncryptRule encryptRule;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//分片规则配置类，封装各种配置项信息 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRuleConfiguration ruleConfiguration; </span></span>
<span class="line"><span style="color:#6A737D;">//DataSource 名称列表 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingDataSourceNames shardingDataSourceNames; </span></span>
<span class="line"><span style="color:#6A737D;">//针对表的规则列表 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">TableRule</span><span style="color:#24292E;">&gt; tableRules; </span></span>
<span class="line"><span style="color:#6A737D;">//针对绑定表的规则列表 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">BindingTableRule</span><span style="color:#24292E;">&gt; bindingTableRules; </span></span>
<span class="line"><span style="color:#6A737D;">//广播表名称列表 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; broadcastTables; </span></span>
<span class="line"><span style="color:#6A737D;">//默认的数据库分片策略 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingStrategy defaultDatabaseShardingStrategy; </span></span>
<span class="line"><span style="color:#6A737D;">//默认的数据表分片策略 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingStrategy defaultTableShardingStrategy; </span></span>
<span class="line"><span style="color:#6A737D;">//默认的分片键生成器 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingKeyGenerator defaultShardingKeyGenerator; </span></span>
<span class="line"><span style="color:#6A737D;">//针对读写分离的规则列表 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">MasterSlaveRule</span><span style="color:#24292E;">&gt; masterSlaveRules; </span></span>
<span class="line"><span style="color:#6A737D;">//加密规则 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EncryptRule encryptRule;</span></span></code></pre></div><p>ShardingRule 的内容非常丰富，但其定位更多是提供规则信息，而不属于核心流程，因此我们先不对其做详细展开。作为基础规则类，ShardingRule 会贯穿整个分片流程，在后续讲解过程中我们会穿插对它的介绍，这里先对上述变量的名称和含义有简单认识即可。</p><p>我们回到 ShardingRouter 类，发现其核心方法只有一个，即 route 方法。这个方法的逻辑比较复杂，我们梳理它的执行步骤，如下图所示：</p>`,16),i=p(`<p>ShardingRouter 是路由引擎的核心类，<strong>在接下来的内容中，我们将对上图中的 6 个步骤分别一 一 详细展开，帮忙你理解一个路由引擎的设计思想和实现机制。</strong></p><h4 id="_1-分片合理性验证" tabindex="-1">1.分片合理性验证 <a class="header-anchor" href="#_1-分片合理性验证" aria-label="Permalink to &quot;1.分片合理性验证&quot;">​</a></h4><p>我们首先来看 ShardingRouter 的第一个步骤，即验证分片信息的合理性，验证方式如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//使用ShardingStatementValidator对Statement进行验证 </span></span>
<span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">ShardingStatementValidator</span><span style="color:#E1E4E8;">&gt; shardingStatementValidator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ShardingStatementValidatorFactory.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(sqlStatement); </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shardingStatementValidator.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     shardingStatementValidator.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">validate</span><span style="color:#E1E4E8;">(shardingRule, sqlStatement, parameters); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//使用ShardingStatementValidator对Statement进行验证 </span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">ShardingStatementValidator</span><span style="color:#24292E;">&gt; shardingStatementValidator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ShardingStatementValidatorFactory.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(sqlStatement); </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shardingStatementValidator.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">     shardingStatementValidator.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">validate</span><span style="color:#24292E;">(shardingRule, sqlStatement, parameters); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码使用 ShardingStatementValidator 对输入的 SQLStatement 进行验证，可以看到这里用到了典型的工厂模式，工厂类 ShardingStatementValidatorFactory 如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingStatementValidatorFactory</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Optional&lt;</span><span style="color:#F97583;">ShardingStatementValidator</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatement </span><span style="color:#FFAB70;">sqlStatement</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> InsertStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingStatementValidator</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingInsertStatementValidator</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> UpdateStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingStatementValidator</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingUpdateStatementValidator</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">absent</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingStatementValidatorFactory</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Optional&lt;</span><span style="color:#D73A49;">ShardingStatementValidator</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatement </span><span style="color:#E36209;">sqlStatement</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> InsertStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingStatementValidator</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingInsertStatementValidator</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> UpdateStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingStatementValidator</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingUpdateStatementValidator</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">absent</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意到 ShardingStatementValidator 要验证的只有 InsertStatement 和 UpdateStatement 这两个 SQLStatement。那么如何进行验证呢？我们来看一下 ShardingStatementValidator 的定义，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingStatementValidator</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SQLStatement</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//验证分片操作是否支持 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">validate</span><span style="color:#E1E4E8;">(ShardingRule </span><span style="color:#FFAB70;">shardingRule</span><span style="color:#E1E4E8;">, T </span><span style="color:#FFAB70;">sqlStatement</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">parameters</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingStatementValidator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SQLStatement</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//验证分片操作是否支持 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">validate</span><span style="color:#24292E;">(ShardingRule </span><span style="color:#E36209;">shardingRule</span><span style="color:#24292E;">, T </span><span style="color:#E36209;">sqlStatement</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">parameters</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于验证过程而言，核心思想在于根据 SQLStatement 中的 Segment 与 ShardingRule 中的规则来判断它们之间是否有需要特殊处理的判断逻辑。我们以 ShardingInsertStatementValidator 为例来看验证过程，它的 validate 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingInsertStatementValidator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingStatementValidator</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">InsertStatement</span><span style="color:#E1E4E8;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">validate</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule </span><span style="color:#FFAB70;">shardingRule</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> InsertStatement </span><span style="color:#FFAB70;">sqlStatement</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">parameters</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Optional&lt;</span><span style="color:#F97583;">OnDuplicateKeyColumnsSegment</span><span style="color:#E1E4E8;">&gt; onDuplicateKeyColumnsSegment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlStatement.</span><span style="color:#B392F0;">findSQLSegment</span><span style="color:#E1E4E8;">(OnDuplicateKeyColumnsSegment.class); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//如果是&quot;ON DUPLICATE KEY UPDATE&quot;语句，且如果当前操作的是分片Column时，验证不通过 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (onDuplicateKeyColumnsSegment.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isUpdateShardingKey</span><span style="color:#E1E4E8;">(shardingRule, onDuplicateKeyColumnsSegment.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(), sqlStatement.</span><span style="color:#B392F0;">getTable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">())) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;INSERT INTO .... ON DUPLICATE KEY UPDATE can not support update for sharding column.&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingInsertStatementValidator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingStatementValidator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">InsertStatement</span><span style="color:#24292E;">&gt; { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">validate</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule </span><span style="color:#E36209;">shardingRule</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> InsertStatement </span><span style="color:#E36209;">sqlStatement</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">parameters</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">OnDuplicateKeyColumnsSegment</span><span style="color:#24292E;">&gt; onDuplicateKeyColumnsSegment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlStatement.</span><span style="color:#6F42C1;">findSQLSegment</span><span style="color:#24292E;">(OnDuplicateKeyColumnsSegment.class); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果是&quot;ON DUPLICATE KEY UPDATE&quot;语句，且如果当前操作的是分片Column时，验证不通过 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (onDuplicateKeyColumnsSegment.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isUpdateShardingKey</span><span style="color:#24292E;">(shardingRule, onDuplicateKeyColumnsSegment.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(), sqlStatement.</span><span style="color:#6F42C1;">getTable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">())) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;INSERT INTO .... ON DUPLICATE KEY UPDATE can not support update for sharding column.&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里的判断逻辑与&quot;ON DUPLICATE KEY UPDATE&quot;这一 Mysql 特有的语法相关，该语法允许我们通过 Update 的方式插入有重复主键的数据行（实际上这个语法也不是常规语法，本身也不大应该被使用）。</p><p>ShardingInsertStatementValidator 先判断是否存在 OnDuplicateKeyColumn，然后再判断这个 Column 是否是分片键，如果同时满足这两个条件，则直接抛出一个异常，不允许在分片 Column 上执行&quot;INSERT INTO .... ON DUPLICATE KEY UPDATE&quot;语法。</p><h4 id="_2-获取上下文" tabindex="-1">2.获取上下文 <a class="header-anchor" href="#_2-获取上下文" aria-label="Permalink to &quot;2.获取上下文&quot;">​</a></h4><p>接下来我们来看 ShardingRouter 类中 route 方法的第二段代码，该段代码比较简单，用于获取运行时的 SQLStatement 上下文，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//获取 SQLStatementContext </span></span>
<span class="line"><span style="color:#E1E4E8;">SQLStatementContext sqlStatementContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SQLStatementContextFactory.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(metaData.</span><span style="color:#B392F0;">getRelationMetas</span><span style="color:#E1E4E8;">(), logicSQL, parameters, sqlStatement);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//获取 SQLStatementContext </span></span>
<span class="line"><span style="color:#24292E;">SQLStatementContext sqlStatementContext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SQLStatementContextFactory.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(metaData.</span><span style="color:#6F42C1;">getRelationMetas</span><span style="color:#24292E;">(), logicSQL, parameters, sqlStatement);</span></span></code></pre></div><p>可以看到这里构建了上下文对象 SQLStatementContext，同样用到了工厂模式，工厂类 SQLStatementContextFactory 如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLStatementContextFactory</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> SQLStatementContext </span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RelationMetas </span><span style="color:#FFAB70;">relationMetas</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">parameters</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatement </span><span style="color:#FFAB70;">sqlStatement</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SelectStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SelectSQLStatementContext</span><span style="color:#E1E4E8;">(relationMetas, sql, parameters, (SelectStatement) sqlStatement); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> InsertStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InsertSQLStatementContext</span><span style="color:#E1E4E8;">(relationMetas, parameters, (InsertStatement) sqlStatement); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CommonSQLStatementContext</span><span style="color:#E1E4E8;">(sqlStatement); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLStatementContextFactory</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> SQLStatementContext </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RelationMetas </span><span style="color:#E36209;">relationMetas</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">parameters</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatement </span><span style="color:#E36209;">sqlStatement</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SelectStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SelectSQLStatementContext</span><span style="color:#24292E;">(relationMetas, sql, parameters, (SelectStatement) sqlStatement); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> InsertStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InsertSQLStatementContext</span><span style="color:#24292E;">(relationMetas, parameters, (InsertStatement) sqlStatement); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CommonSQLStatementContext</span><span style="color:#24292E;">(sqlStatement); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>请注意 SQLStatementContext 只有三种：</p><ul><li><p>SelectSQLStatementContext</p></li><li><p>InsertSQLStatementContext</p></li><li><p>CommonSQLStatementContext</p></li></ul><p>它们都实现了 SQLStatementContext 接口，顾名思义，所谓的 <strong>SQLStatementContext 就是一种上下文对象</strong>，保存着与特定 SQLStatement 相关的上下文信息，用于为后续处理提供数据存储和传递的手段。</p><p>我们可以想象在 SQLStatementContext 中势必都持有 SQLStatement 对象以及与表结构信息相关的上下文 TablesContext。</p><p>对于 SelectSQLStatement，通常也需要保存与查询相关的分组上下文 GroupByContext、排序上下文 OrderByContext 和分页上下文 PaginationContext；而对于InsertSQLStatementContext 而言，InsertValueContext 则包含了所有与插入操作相关的值对象。</p><h4 id="_3-自动生成主键" tabindex="-1">3.自动生成主键 <a class="header-anchor" href="#_3-自动生成主键" aria-label="Permalink to &quot;3.自动生成主键&quot;">​</a></h4><p>接下来的第三段代码与数据库主键相关，同样只有一句代码，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//如果是 InsertStatement 则自动生成主键 </span></span>
<span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">GeneratedKey</span><span style="color:#E1E4E8;">&gt; generatedKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> InsertStatement </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> GeneratedKey.</span><span style="color:#B392F0;">getGenerateKey</span><span style="color:#E1E4E8;">(shardingRule, metaData.</span><span style="color:#B392F0;">getTables</span><span style="color:#E1E4E8;">(), parameters, (InsertStatement) sqlStatement) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">GeneratedKey</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">absent</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//如果是 InsertStatement 则自动生成主键 </span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">GeneratedKey</span><span style="color:#24292E;">&gt; generatedKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> InsertStatement </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> GeneratedKey.</span><span style="color:#6F42C1;">getGenerateKey</span><span style="color:#24292E;">(shardingRule, metaData.</span><span style="color:#6F42C1;">getTables</span><span style="color:#24292E;">(), parameters, (InsertStatement) sqlStatement) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Optional.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">GeneratedKey</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">absent</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这段代码的逻辑比较明确，即如果输入的 SQLStatement 是 InsertStatement，则自动创建一个主键 GeneratedKey，反之就不做处理。</p><p>在数据分片的场景下，创建一个分布式主键实际上并没有那么简单，所以在这段代码背后有很多设计的思想和实现的技巧值得我们进行深入分析，关于这个主题，我们已经在 <a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=&amp;courseId=257&amp;lagoufrom=noapp" target="_blank" rel="noreferrer">《14 | 分布式主键：ShardingSphere 中有哪些分布式主键实现方式？》</a>中对分布式主键生成机制做了专题分享。</p><h4 id="_4-创建分片条件" tabindex="-1">4.创建分片条件 <a class="header-anchor" href="#_4-创建分片条件" aria-label="Permalink to &quot;4.创建分片条件&quot;">​</a></h4><p>我们来看 ShardingRouter 中 route 方法的第四个步骤，这个步骤的作用是创建分片条件，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//创建分片条件 </span></span>
<span class="line"><span style="color:#E1E4E8;">ShardingConditions shardingConditions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getShardingConditions</span><span style="color:#E1E4E8;">(parameters, sqlStatementContext, generatedKey.</span><span style="color:#B392F0;">orNull</span><span style="color:#E1E4E8;">(), metaData.</span><span style="color:#B392F0;">getRelationMetas</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> needMergeShardingValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNeedMergeShardingValues</span><span style="color:#E1E4E8;">(sqlStatementContext); </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DMLStatement </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> needMergeShardingValues) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">checkSubqueryShardingValues</span><span style="color:#E1E4E8;">(sqlStatementContext, shardingConditions); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">mergeShardingConditions</span><span style="color:#E1E4E8;">(shardingConditions); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//创建分片条件 </span></span>
<span class="line"><span style="color:#24292E;">ShardingConditions shardingConditions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getShardingConditions</span><span style="color:#24292E;">(parameters, sqlStatementContext, generatedKey.</span><span style="color:#6F42C1;">orNull</span><span style="color:#24292E;">(), metaData.</span><span style="color:#6F42C1;">getRelationMetas</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> needMergeShardingValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNeedMergeShardingValues</span><span style="color:#24292E;">(sqlStatementContext); </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DMLStatement </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> needMergeShardingValues) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkSubqueryShardingValues</span><span style="color:#24292E;">(sqlStatementContext, shardingConditions); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">mergeShardingConditions</span><span style="color:#24292E;">(shardingConditions); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ShardingSphere 中，分片条件对象 ShardingCondition 定义如下所示，包含了一组路由信息和节点信息，其中路由信息包含表名和列名，而节点信息包含数据源名和表名：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingCondition</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//路由信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">RouteValue</span><span style="color:#E1E4E8;">&gt; routeValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//节点信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">DataNode</span><span style="color:#E1E4E8;">&gt; dataNodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingCondition</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//路由信息 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">RouteValue</span><span style="color:#24292E;">&gt; routeValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//节点信息 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">DataNode</span><span style="color:#24292E;">&gt; dataNodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么如何获取分片条件呢？如下所示的 getShardingConditions 方法给出了具体的实现方式，可以看到这里根据输入的 SQL 类型，分别通过 InsertClauseShardingConditionEngine 和WhereClauseShardingConditionEngine 创建了 ShardingConditions：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ShardingConditions </span><span style="color:#B392F0;">getShardingConditions</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> GeneratedKey generatedKey, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> RelationMetas relationMetas) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DMLStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//如果是 InsertSQLStatement 上下文 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatementContext </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> InsertSQLStatementContext) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            InsertSQLStatementContext shardingInsertStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (InsertSQLStatementContext) sqlStatementContext; </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//通过 InsertClauseShardingConditionEngine 创建分片条件 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingConditions</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InsertClauseShardingConditionEngine</span><span style="color:#E1E4E8;">(shardingRule).</span><span style="color:#B392F0;">createShardingConditions</span><span style="color:#E1E4E8;">(shardingInsertStatement, generatedKey, parameters)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//否则直接通过 WhereClauseShardingConditionEngine 创建分片条件 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingConditions</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WhereClauseShardingConditionEngine</span><span style="color:#E1E4E8;">(shardingRule, relationMetas).</span><span style="color:#B392F0;">createShardingConditions</span><span style="color:#E1E4E8;">(sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">(), parameters)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingConditions</span><span style="color:#E1E4E8;">(Collections.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ShardingCondition</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ShardingConditions </span><span style="color:#6F42C1;">getShardingConditions</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> GeneratedKey generatedKey, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> RelationMetas relationMetas) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DMLStatement) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//如果是 InsertSQLStatement 上下文 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatementContext </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> InsertSQLStatementContext) { </span></span>
<span class="line"><span style="color:#24292E;">            InsertSQLStatementContext shardingInsertStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (InsertSQLStatementContext) sqlStatementContext; </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//通过 InsertClauseShardingConditionEngine 创建分片条件 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingConditions</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InsertClauseShardingConditionEngine</span><span style="color:#24292E;">(shardingRule).</span><span style="color:#6F42C1;">createShardingConditions</span><span style="color:#24292E;">(shardingInsertStatement, generatedKey, parameters)); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//否则直接通过 WhereClauseShardingConditionEngine 创建分片条件 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingConditions</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WhereClauseShardingConditionEngine</span><span style="color:#24292E;">(shardingRule, relationMetas).</span><span style="color:#6F42C1;">createShardingConditions</span><span style="color:#24292E;">(sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">(), parameters)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingConditions</span><span style="color:#24292E;">(Collections.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ShardingCondition</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于路由引擎而言，分片条件的主要目的就是提取用于路由的目标数据库、表和列之间的关系，InsertClauseShardingConditionEngine 和 WhereClauseShardingConditionEngine 中的处理逻辑都是为了构建包含这些关系信息的一组 ShardingCondition 对象。</p><p>当获取这些 ShardingCondition 之后，我们还看到有一个优化的步骤，即调用mergeShardingConditions，对可以合并的 ShardingCondition 进行合并。</p><h4 id="_5-执行路由" tabindex="-1">5.执行路由 <a class="header-anchor" href="#_5-执行路由" aria-label="Permalink to &quot;5.执行路由&quot;">​</a></h4><p>当我们获取了 SQLStatement 上下文，并创建了分片条件，接下来就是真正执行路由，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//获取 RoutingEngine 并执行路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">RoutingEngine routingEngine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RoutingEngineFactory.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(shardingRule, metaData, sqlStatementContext, shardingConditions); </span></span>
<span class="line"><span style="color:#E1E4E8;">RoutingResult routingResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> routingEngine.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//获取 RoutingEngine 并执行路由 </span></span>
<span class="line"><span style="color:#24292E;">RoutingEngine routingEngine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RoutingEngineFactory.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(shardingRule, metaData, sqlStatementContext, shardingConditions); </span></span>
<span class="line"><span style="color:#24292E;">RoutingResult routingResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> routingEngine.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这两句代码是 ShardingRouter 类的核心，我们获取了一个 RoutingEngine 实例，然后基于该实例执行路由并返回一个 RoutingResult 对象。RoutingEngine 定义如下，只有一个简单的 route 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingEngine</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//执行路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">    RoutingResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingEngine</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//执行路由 </span></span>
<span class="line"><span style="color:#24292E;">    RoutingResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ShardingSphere 中存在一批 RoutingEngine 的实现类，RoutingEngineFactory 工厂类负责生成这些具体的 RoutingEngine，生成逻辑如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> RoutingEngine </span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule shardingRule, </span></span>
<span class="line"><span style="color:#E1E4E8;">                                            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingSphereMetaData metaData, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingConditions shardingConditions) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        SQLStatement sqlStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; tableNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlStatementContext.</span><span style="color:#B392F0;">getTablesContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getTableNames</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//全库路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> TCLStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DatabaseBroadcastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//全库表路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DDLStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableBroadcastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, metaData.</span><span style="color:#B392F0;">getTables</span><span style="color:#E1E4E8;">(), sqlStatementContext); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//阻断路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DALStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDALRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, sqlStatement, tableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//全实例路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DCLStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDCLRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, sqlStatementContext, metaData); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//默认库路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shardingRule.</span><span style="color:#B392F0;">isAllInDefaultDataSource</span><span style="color:#E1E4E8;">(tableNames)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultDatabaseRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//全库路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shardingRule.</span><span style="color:#B392F0;">isAllBroadcastTables</span><span style="color:#E1E4E8;">(tableNames)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SelectStatement </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnicastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, tableNames) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DatabaseBroadcastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//默认库路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DMLStatement </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> tableNames.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">hasDefaultDataSourceName</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultDatabaseRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//单播路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatementContext.</span><span style="color:#B392F0;">getSqlStatement</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DMLStatement </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> shardingConditions.</span><span style="color:#B392F0;">isAlwaysFalse</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> tableNames.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">shardingRule.</span><span style="color:#B392F0;">tableRuleExists</span><span style="color:#E1E4E8;">(tableNames)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnicastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//分片路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getShardingRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, sqlStatementContext, shardingConditions, tableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> RoutingEngine </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule shardingRule, </span></span>
<span class="line"><span style="color:#24292E;">                                            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingSphereMetaData metaData, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingConditions shardingConditions) { </span></span>
<span class="line"><span style="color:#24292E;">        SQLStatement sqlStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; tableNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlStatementContext.</span><span style="color:#6F42C1;">getTablesContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getTableNames</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//全库路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> TCLStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseBroadcastRoutingEngine</span><span style="color:#24292E;">(shardingRule); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//全库表路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DDLStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableBroadcastRoutingEngine</span><span style="color:#24292E;">(shardingRule, metaData.</span><span style="color:#6F42C1;">getTables</span><span style="color:#24292E;">(), sqlStatementContext); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//阻断路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DALStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDALRoutingEngine</span><span style="color:#24292E;">(shardingRule, sqlStatement, tableNames); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//全实例路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DCLStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDCLRoutingEngine</span><span style="color:#24292E;">(shardingRule, sqlStatementContext, metaData); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//默认库路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shardingRule.</span><span style="color:#6F42C1;">isAllInDefaultDataSource</span><span style="color:#24292E;">(tableNames)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultDatabaseRoutingEngine</span><span style="color:#24292E;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//全库路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shardingRule.</span><span style="color:#6F42C1;">isAllBroadcastTables</span><span style="color:#24292E;">(tableNames)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SelectStatement </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnicastRoutingEngine</span><span style="color:#24292E;">(shardingRule, tableNames) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseBroadcastRoutingEngine</span><span style="color:#24292E;">(shardingRule); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//默认库路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DMLStatement </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> tableNames.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">hasDefaultDataSourceName</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultDatabaseRoutingEngine</span><span style="color:#24292E;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//单播路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatementContext.</span><span style="color:#6F42C1;">getSqlStatement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DMLStatement </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> shardingConditions.</span><span style="color:#6F42C1;">isAlwaysFalse</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> tableNames.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">shardingRule.</span><span style="color:#6F42C1;">tableRuleExists</span><span style="color:#24292E;">(tableNames)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnicastRoutingEngine</span><span style="color:#24292E;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//分片路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getShardingRoutingEngine</span><span style="color:#24292E;">(shardingRule, sqlStatementContext, shardingConditions, tableNames); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这些 RoutingEngine 的具体介绍我们放在下一课时《18 | 路由引擎：如何实现数据访问的分片路由和广播路由？》中进行详细介绍，这里只需要了解 ShardingSphere 在包结构的设计上把具体的 RoutingEngine 分成了六大类：即广播（broadcast）路由、混合（complex）路由、默认数据库（defaultdb）路由、无效（ignore）路由、标准（standard）路由以及单播（unicast）路由，如下所示：</p>`,44),g=p(`<p>不同类型的 RoutingEngine 实现类</p><p>RoutingEngine 的执行结果是 RoutingResult，而 RoutingResult 中包含了一个 RoutingUnit集合，RoutingUnit 中的变量定义如下所示，可以看到有两个关于 DataSource 名称的变量以及一个 TableUnit 列表：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//真实数据源名 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String dataSourceName; </span></span>
<span class="line"><span style="color:#6A737D;">//逻辑数据源名 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String masterSlaveLogicDataSourceName; </span></span>
<span class="line"><span style="color:#6A737D;">//表单元列表 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">TableUnit</span><span style="color:#E1E4E8;">&gt; tableUnits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//真实数据源名 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String dataSourceName; </span></span>
<span class="line"><span style="color:#6A737D;">//逻辑数据源名 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String masterSlaveLogicDataSourceName; </span></span>
<span class="line"><span style="color:#6A737D;">//表单元列表 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">TableUnit</span><span style="color:#24292E;">&gt; tableUnits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span></code></pre></div><p>而 TableUnit 保存着逻辑表名和实际表名，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableUnit</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//逻辑表名 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicTableName; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//真实表名 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String actualTableName; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableUnit</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//逻辑表名 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicTableName; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//真实表名 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String actualTableName; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>所以 RoutingResult 中保存的实际上就是一组关于数据库与数据表的对应关系，其中库与表都存在逻辑值和真实值。</p><h4 id="_6-构建路由结果" tabindex="-1">6.构建路由结果 <a class="header-anchor" href="#_6-构建路由结果" aria-label="Permalink to &quot;6.构建路由结果&quot;">​</a></h4><p>当通过一系列的路由引擎处理之后，我们获得了 RoutingResult 对象，但并不是直接将其进行返回，而是会构建一个 SQLRouteResult 对象。这就是 ShardingRouter 的 route 方法最后一个步骤，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//构建 SQLRouteResult </span></span>
<span class="line"><span style="color:#E1E4E8;">SQLRouteResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SQLRouteResult</span><span style="color:#E1E4E8;">(sqlStatementContext, shardingConditions, generatedKey.</span><span style="color:#B392F0;">orNull</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">setRoutingResult</span><span style="color:#E1E4E8;">(routingResult); </span></span>
<span class="line"><span style="color:#6A737D;">//如果是Insert语句，则设置自动生成的分片键 </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatementContext </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> InsertSQLStatementContext) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setGeneratedValues</span><span style="color:#E1E4E8;">(result); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//构建 SQLRouteResult </span></span>
<span class="line"><span style="color:#24292E;">SQLRouteResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SQLRouteResult</span><span style="color:#24292E;">(sqlStatementContext, shardingConditions, generatedKey.</span><span style="color:#6F42C1;">orNull</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">setRoutingResult</span><span style="color:#24292E;">(routingResult); </span></span>
<span class="line"><span style="color:#6A737D;">//如果是Insert语句，则设置自动生成的分片键 </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatementContext </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> InsertSQLStatementContext) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setGeneratedValues</span><span style="color:#24292E;">(result); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span></code></pre></div><p>我们来到 SQLRouteResult 的定义，看看它与 RouteResult 之间有什么不同，SQLRouteResult中 的变量如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//SQLStatement 上下文 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext; </span></span>
<span class="line"><span style="color:#6A737D;">//分片条件 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingConditions shardingConditions; </span></span>
<span class="line"><span style="color:#6A737D;">//自动生成的分片键 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> GeneratedKey generatedKey; </span></span>
<span class="line"><span style="color:#6A737D;">//一组路由单元 </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">RouteUnit</span><span style="color:#E1E4E8;">&gt; routeUnits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashSet&lt;&gt;(); </span></span>
<span class="line"><span style="color:#6A737D;">//由 RoutingEngine 生成的 RoutingResult </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RoutingResult routingResult;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//SQLStatement 上下文 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext; </span></span>
<span class="line"><span style="color:#6A737D;">//分片条件 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingConditions shardingConditions; </span></span>
<span class="line"><span style="color:#6A737D;">//自动生成的分片键 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> GeneratedKey generatedKey; </span></span>
<span class="line"><span style="color:#6A737D;">//一组路由单元 </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">RouteUnit</span><span style="color:#24292E;">&gt; routeUnits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashSet&lt;&gt;(); </span></span>
<span class="line"><span style="color:#6A737D;">//由 RoutingEngine 生成的 RoutingResult </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RoutingResult routingResult;</span></span></code></pre></div><p>可以看到 SQLRouteResult 中包含了 RoutingResult。我们可以认为 SQLRouteResult 是整个 SQL 路由返回的路由结果，在后续的流程中还会被 PreparedStatementRoutingEngine 等上层对象所使用，而 RoutingResult 只是 RoutingEngine 返回的路由结果，它的使用者就是位于底层的 ShardingRouter。</p><p>同时，我们注意到这里有一个新的 Unit 对象 RouteUnit，包含了数据源名称以及 SQL 单元对象 SQLUnit，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RouteUnit</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//数据源名 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String dataSourceName; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//SQL 单元 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLUnit sqlUnit; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RouteUnit</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//数据源名 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String dataSourceName; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//SQL 单元 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLUnit sqlUnit; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 SQLUnit 中就是最终的一条 SQL 语句以及相应参数的组合。因为路由结果对象 SQLRouteResult 会继续传递到分片引擎的后续流程，且内部结构比较复杂，所以这里通过如下所示的类图对其包含的各种变量进行总结，方便你进行理解。</p>`,15),d=s("p",null,"至此，我们把 ShardingRouter 类的核心流程做了介绍。在 ShardingSphere 的路由引擎中，ShardingRouter 可以说是一个承上启下的核心类，向下我们可以挖掘各种 RoutingEngine 的具体实现；向上我们可以延展到读写分离等面向应用的具体场景。",-1),u=s("p",null,"下图展示了 ShardingRouter 的这种定位关系。关于各种 RoutingEngine 的介绍是我们下一课时的内容，今天我们先将基于 ShardingRouter 讨论它的上层结构，从而引出了 ShardingEngine。",-1),S=p(`<h3 id="从底层-shardingrouter-到上层-shardingengine" tabindex="-1">从底层 ShardingRouter 到上层 ShardingEngine <a class="header-anchor" href="#从底层-shardingrouter-到上层-shardingengine" aria-label="Permalink to &quot;从底层 ShardingRouter 到上层 ShardingEngine&quot;">​</a></h3><p>我们的思路仍然是从下往上，先来看上图中的 StatementRoutingEngine，其实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatementRoutingEngine</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRouter shardingRouter; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingMasterSlaveRouter masterSlaveRouter; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatementRoutingEngine</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule </span><span style="color:#FFAB70;">shardingRule</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingSphereMetaData </span><span style="color:#FFAB70;">metaData</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLParseEngine </span><span style="color:#FFAB70;">sqlParseEngine</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        shardingRouter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingRouter</span><span style="color:#E1E4E8;">(shardingRule, metaData, sqlParseEngine); </span></span>
<span class="line"><span style="color:#E1E4E8;">        masterSlaveRouter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingMasterSlaveRouter</span><span style="color:#E1E4E8;">(shardingRule.</span><span style="color:#B392F0;">getMasterSlaveRules</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SQLRouteResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">logicSQL</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        SQLStatement sqlStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingRouter.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(logicSQL, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> masterSlaveRouter.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(shardingRouter.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(logicSQL, Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">(), sqlStatement)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatementRoutingEngine</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRouter shardingRouter; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingMasterSlaveRouter masterSlaveRouter; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatementRoutingEngine</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule </span><span style="color:#E36209;">shardingRule</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingSphereMetaData </span><span style="color:#E36209;">metaData</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLParseEngine </span><span style="color:#E36209;">sqlParseEngine</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        shardingRouter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingRouter</span><span style="color:#24292E;">(shardingRule, metaData, sqlParseEngine); </span></span>
<span class="line"><span style="color:#24292E;">        masterSlaveRouter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingMasterSlaveRouter</span><span style="color:#24292E;">(shardingRule.</span><span style="color:#6F42C1;">getMasterSlaveRules</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SQLRouteResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">logicSQL</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        SQLStatement sqlStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingRouter.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(logicSQL, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> masterSlaveRouter.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(shardingRouter.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(logicSQL, Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">(), sqlStatement)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到在 StatementRoutingEngine 的 route 方法中，通过 ShardingMasterSlaveRouter 对通过 ShardingRouter 所生成的 SQLRouteResult 进行了再一次路由，也就是说在分片路由的基础上添加了主从路由，关于读写分离和主从路由我们会在之后的《26 | 读写分离：普通主从架构和分片主从架构分别是如何实现的？》进行讨论。</p><p>现在我们来到 sharding-core-entry 工程，看看更上层的处理流程。整个 sharding-core-entry 工程只有三个类，即作为基类的 BaseShardingEngine 以及两个子类 PreparedQueryShardingEngine 和 SimpleQueryShardingEngine。我们先来看 BaseShardingEngine 类，它本质上是一个模板类，BaseShardingEngine 的 shard 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SQLRouteResult </span><span style="color:#B392F0;">shard</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//调用模板方法准备参数 </span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; clonedParameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cloneParameters</span><span style="color:#E1E4E8;">(parameters); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//执行路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">    SQLRouteResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executeRoute</span><span style="color:#E1E4E8;">(sql, clonedParameters); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//执行 SQL 转换（Convert）和改写（Rewrite） </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">getRouteUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(HintManager.</span><span style="color:#B392F0;">isDatabaseShardingOnly</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">convert</span><span style="color:#E1E4E8;">(sql, clonedParameters, result) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rewriteAndConvert</span><span style="color:#E1E4E8;">(sql, clonedParameters, result)); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//省略日志记录 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SQLRouteResult </span><span style="color:#6F42C1;">shard</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//调用模板方法准备参数 </span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; clonedParameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cloneParameters</span><span style="color:#24292E;">(parameters); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//执行路由 </span></span>
<span class="line"><span style="color:#24292E;">    SQLRouteResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeRoute</span><span style="color:#24292E;">(sql, clonedParameters); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//执行 SQL 转换（Convert）和改写（Rewrite） </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">getRouteUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(HintManager.</span><span style="color:#6F42C1;">isDatabaseShardingOnly</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">convert</span><span style="color:#24292E;">(sql, clonedParameters, result) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rewriteAndConvert</span><span style="color:#24292E;">(sql, clonedParameters, result)); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//省略日志记录 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这里我们看到了 SQL 转换（Convert）和改写（Rewrite）的入口，这是路由引擎之外的执行流程，我们今天不做展开。上述代码与路由相关最核心的就是 executeRoute 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SQLRouteResult </span><span style="color:#B392F0;">executeRoute</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> clonedParameters) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> routingHook.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(sql); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//调用模板方法执行路由并获取结果 </span></span>
<span class="line"><span style="color:#E1E4E8;">        SQLRouteResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(sql, clonedParameters); </span></span>
<span class="line"><span style="color:#E1E4E8;">        routingHook.</span><span style="color:#B392F0;">finishSuccess</span><span style="color:#E1E4E8;">(result, metaData.</span><span style="color:#B392F0;">getTables</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        routingHook.</span><span style="color:#B392F0;">finishFailure</span><span style="color:#E1E4E8;">(ex); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ex; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SQLRouteResult </span><span style="color:#6F42C1;">executeRoute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> clonedParameters) {</span></span>
<span class="line"><span style="color:#24292E;"> routingHook.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(sql); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//调用模板方法执行路由并获取结果 </span></span>
<span class="line"><span style="color:#24292E;">        SQLRouteResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(sql, clonedParameters); </span></span>
<span class="line"><span style="color:#24292E;">        routingHook.</span><span style="color:#6F42C1;">finishSuccess</span><span style="color:#24292E;">(result, metaData.</span><span style="color:#6F42C1;">getTables</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        routingHook.</span><span style="color:#6F42C1;">finishFailure</span><span style="color:#24292E;">(ex); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ex; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个方法的处理方式与 SQLParseEngine 的 parse 方法有着类似的代码结构，同样用到了 Hook 机制。</p><p>从设计模式上讲，BaseShardingEngine 采用了非常典型的模板方法。当我们需要完成一个过程或一系列步骤时，这些过程或步骤在某一细节层次保持一致，但个别步骤在更详细的层次上的实现可能不同时，可以考虑用模板方法模式来处理。实现模板方法的过程也非常简单，其实就是利用了类的继承机制。作为一个模板类，我们注意到 BaseShardingEngine 提供了两个模板方法供子类进行实现，分别是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//拷贝参数 </span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cloneParameters</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters); </span></span>
<span class="line"><span style="color:#6A737D;">//执行路由 </span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> SQLRouteResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(String sql, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> parameters);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//拷贝参数 </span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cloneParameters</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters); </span></span>
<span class="line"><span style="color:#6A737D;">//执行路由 </span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> SQLRouteResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(String sql, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> parameters);</span></span></code></pre></div><p>显然，对于 SimpleQueryShardingEngine 而言，不需要参数，所以 cloneParameters 直接返回空列表。而 route 方法则直接使用前面介绍的 StatementRoutingEngine 进行路由。SimpleQueryShardingEngine 类的完整实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleQueryShardingEngine</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseShardingEngine</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> StatementRoutingEngine routingEngine; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleQueryShardingEngine</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule </span><span style="color:#FFAB70;">shardingRule</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingProperties </span><span style="color:#FFAB70;">shardingProperties</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingSphereMetaData </span><span style="color:#FFAB70;">metaData</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLParseEngine </span><span style="color:#FFAB70;">sqlParseEngine</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(shardingRule, shardingProperties, metaData); </span></span>
<span class="line"><span style="color:#E1E4E8;">        routingEngine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatementRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, metaData, sqlParseEngine); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">cloneParameters</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">parameters</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptyList</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> SQLRouteResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">sql</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">parameters</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> routingEngine.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(sql); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleQueryShardingEngine</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseShardingEngine</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> StatementRoutingEngine routingEngine; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleQueryShardingEngine</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule </span><span style="color:#E36209;">shardingRule</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingProperties </span><span style="color:#E36209;">shardingProperties</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingSphereMetaData </span><span style="color:#E36209;">metaData</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLParseEngine </span><span style="color:#E36209;">sqlParseEngine</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(shardingRule, shardingProperties, metaData); </span></span>
<span class="line"><span style="color:#24292E;">        routingEngine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatementRoutingEngine</span><span style="color:#24292E;">(shardingRule, metaData, sqlParseEngine); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">cloneParameters</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">parameters</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> SQLRouteResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">sql</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">parameters</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> routingEngine.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(sql); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，关于 ShardingSphere 路由引擎部分的内容基本都介绍完毕。对于上层结构而言，我们以 SimpleQueryShardingEngine 为例进行了展开，对于 PreparedQueryShardingEngine 的处理方式也是类似。作为总结，我们通过如下所示的时序图来梳理这些路由的主流程。</p>`,14),h=s("h3",{id:"从源码解析到日常开发",tabindex:"-1"},[n("从源码解析到日常开发 "),s("a",{class:"header-anchor",href:"#从源码解析到日常开发","aria-label":'Permalink to "从源码解析到日常开发"'},"​")],-1),F=s("p",null,"分包设计原则可以用来设计和规划开源框架的代码结构。在今天的内容中，我们看到了 ShardingSphere 中非常典型的一种分层和分包实现策略。通过 sharding-core-route 和 sharding-core-entry 这两个工程，我们把路由引擎中位于底层的核心类 ShardingRouter 和位于上层的 PreparedQueryShardingEngine 及 SimpleQueryShardingEngine 类进行了合理的分层管理。ShardingSphere 对于分层和分包策略的应用有很多具体的表现形式，随着课程的不断演进，我们还会看到更多的应用场景。",-1),m=s("h3",{id:"小结与预告",tabindex:"-1"},[n("小结与预告 "),s("a",{class:"header-anchor",href:"#小结与预告","aria-label":'Permalink to "小结与预告"'},"​")],-1),D=s("p",null,"作为 ShardingSphere 分片引擎的第二个核心组件，路由引擎的目的在于生成 SQLRouteResult目标对象。而整个路由引擎中最核心的就是 ShardingRouter 类。今天，我们对 ShardingRouter 的整体执行流程进行了详细的讨论，同时也引出了路由引擎中的底层对象 RoutingEngine。",-1),A=s("p",null,[s("strong",null,"这里给你留一道思考题：ShardingSphere 中，一个完整的路由执行过程需要经历哪些步骤？"),n(" 欢迎你在留言区与大家讨论，我将一一点评解答。")],-1),C=s("p",null,"在今天的课程中，我们也提到了 ShardingSphere 中存在多种 RoutingEngine。在下一课时的内容中，我们将关注于这些 RoutingEngine 的具体实现过程。",-1);function R(v,b,f,L,q,B){const a=o("Image");return t(),r("div",null,[E,l(a,{alt:"Lark20201109-190944.png",src:"https://s0.lgstatic.com/i/image/M00/6A/D2/CgqCHl-pI5mAXrqWAACIykUr4yg379.png"}),n(),y,l(a,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/3F/D0/CgqCHl8xJyqAHmcfAACVSxCxm4s053.png"}),n(),i,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/3F/C4/Ciqc1F8xJvuALcqiAAA5dODyQeU720.png"}),n(),g,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/3F/D0/CgqCHl8xJ0eAMp1GAABywd2SYFQ497.png"}),n(),d,u,l(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/3F/D0/CgqCHl8xJ1WAbAmHAAB_-h8F66g956.png"}),n(),S,l(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/3F/D0/CgqCHl8xJ2aAQabtAACUcSURKVc544.png"}),n(),h,F,m,D,A,C])}const k=e(c,[["render",R]]);export{_ as __pageData,k as default};
