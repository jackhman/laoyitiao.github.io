import{_ as o,j as e,o as c,g as r,k as l,h as s,Q as p,s as n}from"./chunks/framework.cfb14fe0.js";const b=JSON.parse('{"title":"05开发框架：如何提高应用开发调试和部署效率？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/玩转 Serverless 架构_文档/(6033) 05  开发框架：如何提高应用开发调试和部署效率？.md","filePath":"posts/backEnd/玩转 Serverless 架构_文档/(6033) 05  开发框架：如何提高应用开发调试和部署效率？.md","lastUpdated":1696682708000}'),t={name:"posts/backEnd/玩转 Serverless 架构_文档/(6033) 05  开发框架：如何提高应用开发调试和部署效率？.md"},y=p('<h1 id="_05开发框架-如何提高应用开发调试和部署效率" tabindex="-1">05开发框架：如何提高应用开发调试和部署效率？ <a class="header-anchor" href="#_05开发框架-如何提高应用开发调试和部署效率" aria-label="Permalink to &quot;05开发框架：如何提高应用开发调试和部署效率？&quot;">​</a></h1><p>到目前为止，你已经知道怎么基于 FaaS 开发 Serverless 应用了。不过你应该可以发现，04讲中的应用很简单（只有一个函数）。而实际情况中，绝大部分应用都是由多个函数组成的，应用部署时需要将所有函数一同部署，并且函数运行依赖 FaaS 环境，这就导致函数代码不能直接在本地运行。这些限制就给我们的应用开发、调试和部署流程带来了挑战，比如：</p><ul><li><p>函数太多如何管理？</p></li><li><p>本地开发时如何进行调试？</p></li><li><p>代码开发完成后如何部署？</p></li><li><p>......</p></li></ul><p>要解决这些问题，你就需要一套完整的开发、调试和部署 Serverless 的解决方案，这个解决方案最终可以抽象为一个开发框架。那么什么是 Serverless 开发框架呢？我认为<strong>Serverless 的开发框架不是传统的 Express.js、Spring Boot 等代码框架，而是集成 Serverless 思想、贯穿 Serverless 应用从开发到上线全流程的工具。</strong> 基于 Serverless 开发框架，你很容易开发一个 Serverless 架构的应用，企业也能轻松把现有业务演化为 Serverless 架构。对 Serverless 来说，除了底层的 FaaS、BaaS 等基础设施， 上层的开发框架也是一个非常重要的部分，这直接决定了开发者使用 Serverless 的成本。</p><p>这一讲，我以框架开发者的视角，带你思考如何设计并实现一个 Serverless 开发框架，以此让你深入理解开发框架底层设计思路和实现原理，进而明白为什么开发框架能提高 Serverless 应用开发效率。这样一来，当你学完这一讲内容之后，再面对任何开发框架，都能快速上手了，甚至你也能成为一个框架开发者，为广大 Serverless 用户提供更好用的开发工具。</p><h3 id="如何设计-serverless-的开发框架" tabindex="-1">如何设计 Serverless 的开发框架 <a class="header-anchor" href="#如何设计-serverless-的开发框架" aria-label="Permalink to &quot;如何设计 Serverless 的开发框架&quot;">​</a></h3><p>前面我已经提到，Serverless 开发框架是贯穿 Serverless 应用从开发到上线全流程的工具。基于这个定义，<strong>一个开发框架至少要满足应用管理、应用开发、应用调试和应用部署这几个基本功能。</strong> 从形态上来看，Serverless 开发框架可以抽象为一个平台或服务，最终以终端工具（命令行工具）或控制台的方式提供给开发者使用。接下来我就从这几个方面进行讲解。</p><h4 id="应用管理" tabindex="-1">应用管理 <a class="header-anchor" href="#应用管理" aria-label="Permalink to &quot;应用管理&quot;">​</a></h4><p>Serverless 应用是由函数组成的，所以应用的管理主要就是函数的管理。各个 FaaS 平台其实也考虑到了这一点，比如函数计算的 &quot;服务&quot;功能或 Lambda 的 &quot;应用&quot; 功能。你可以把一个应用的函数都创建在同一个 &quot;服务&quot; 下，一个 &quot;服务&quot; 即代表一个应用。</p>',9),E=p(`<p>那么如何去描述 &quot;服务&quot; 和 &quot;函数&quot; 的关系呢？因为二者是静态的，不会在代码运行时改变，所以你可以用 YAML 或 JSON 配置文件来表示（我推荐 YAML，因为它可以编写注释，可读性更好）。在创建函数时，你还要指定函数的入口、编程语言、触发器等信息。<strong>所以 YAML 文件的内容可能是这样的：</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># serverless.yaml</span></span>
<span class="line"><span style="color:#6A737D;"># 应用名称</span></span>
<span class="line"><span style="color:#85E89D;">service</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myservice</span></span>
<span class="line"><span style="color:#6A737D;"># 函数列表</span></span>
<span class="line"><span style="color:#85E89D;">functions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 函数1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">hello.main</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 函数入口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">events</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;"># 函数触发器，一个函数可能有多个触发器</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">http</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">timer</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 函数2</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">goodbye</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">goodbye.main</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">events</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">http</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># serverless.yaml</span></span>
<span class="line"><span style="color:#6A737D;"># 应用名称</span></span>
<span class="line"><span style="color:#22863A;">service</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myservice</span></span>
<span class="line"><span style="color:#6A737D;"># 函数列表</span></span>
<span class="line"><span style="color:#22863A;">functions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 函数1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">hello</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">hello.main</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 函数入口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">events</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 函数触发器，一个函数可能有多个触发器</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">http</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">timer</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 函数2</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">goodbye</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">goodbye.main</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">events</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">http</span></span></code></pre></div><p>我来简单讲一下其中的关键属性。</p><ul><li><p>service：应用名称 。</p></li><li><p>functions：它的属性就是组成应用的函数，一个应用可以有多个函数，并且函数名不能重复，例如 hello 和 goodbye 就是 myservice 应用的两个函数。</p></li><li><p>handler ：函数的入口。</p></li><li><p>runtime ：函数运行环境（在 Serverless 中函数的运行环境是预先定义好的）。</p></li><li><p>events：一个函数可能有多个触发器，所以使用 events 数组来表示触发器，例如 hello 函数有 http 和 timer两个触发器。</p></li></ul><p><strong>这里你要注意，</strong> 当用户不了解你的 YAML 结构时，让用户去编写这个配置文件就很困难了，所以你要为用户提供一个初始化的功能。假设你的终端工具是一个可执行脚本，命令为 serverless，那么你就可以提供 serverless init 命令自动为用户创建一个管理 Serverless 应用的 YAML 配置文件。</p><h4 id="应用开发" tabindex="-1">应用开发 <a class="header-anchor" href="#应用开发" aria-label="Permalink to &quot;应用开发&quot;">​</a></h4><p>有了应用配置文件之后，开发者就可以开始开发代码了。为了进一步简化用户操作，你甚至可以提供一些代码模板，然后提供 init 命令让开发者基于模板一键生成一个 Serverless 应用。例如：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--template</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello-world</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello.js</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--template</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello-world</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.js</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless.yaml</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># serverless.yaml</span></span>
<span class="line"><span style="color:#85E89D;">service</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myservice</span></span>
<span class="line"><span style="color:#85E89D;">functions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">hello.main</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">events</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">http</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># serverless.yaml</span></span>
<span class="line"><span style="color:#22863A;">service</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myservice</span></span>
<span class="line"><span style="color:#22863A;">functions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">hello</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">hello.main</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">events</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">http</span></span></code></pre></div><p>这样开发者就能直接在本地用自己喜欢的编辑器编写代码了。</p><p>此外你也可以提供一个 Web IDE，在 Web IDE 中为开发者初始化运行环境，这样开发者不用在本地安装编辑器就能开发，也不用关心运行环境的差异。目前各个 FaaS 平台也有提供了自己的 Web IDE，比如 AWS 的 Cloud9、函数计算 Web IDE。</p><p><strong>这里我多说几句，丰富一下你的知识面。</strong> Cloud9 原本是一家创业公司，提供云上应用开发、部署能力，其 Web IDE 功能很强大，不过它在 2016 年 7 月就被 AWS 收购了。另一个比较有趣的事情是，腾讯在 2018 年投资了 Coding，Coding 的重点产品就是 Cloud Studio 这款 Web IDE，之后 Cloud Studio 就集成到了腾讯云中，腾讯云函数的 Web IDE 就是 Cloud Studio。2019 年腾讯则收购了 Coding。函数计算 Web IDE 则是基于 VS Code 开发的。微软在 2019 年 5 月发布了 Visual Studio Online，让开发者可以轻松实现一个 Web IDE。<strong>所以你也能感受到 Serverless 时代 Web IDE 的重要性。</strong></p><p>现在你基于 Visual Studio Online 也可以开发一个 Web IDE，当然要做一个完善的 Web IDE 还是很难的，我觉得目前体验最好的 Web IDE 还是 Cloud9，但相比本地开发还是有一定差距，不过我也相信，未来 Web IDE 的体验会越来越好。</p><h4 id="应用调试" tabindex="-1">应用调试 <a class="header-anchor" href="#应用调试" aria-label="Permalink to &quot;应用调试&quot;">​</a></h4><p>接着说回来，应用开发结束后，就要进入调试阶段了，<strong>毫不夸张地说，在 Serverless 应用开发中，应用调试十分麻烦。</strong></p><p>以《03 | 基础入门：开发你的第一个 Serverless 应用》中的函数为例，函数代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从 event 中获取 URL query 参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.queryStringParameters;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 定义 HTTP Response</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        statusCode: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        headers: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">        body: </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">({ message: </span><span style="color:#9ECBFF;">\`Hello \${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}!\`</span><span style="color:#E1E4E8;">} ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, response);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从 event 中获取 URL query 参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.queryStringParameters;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 定义 HTTP Response</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        statusCode: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        headers: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json&quot;</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">        body: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">({ message: </span><span style="color:#032F62;">\`Hello \${</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">} ),</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, response);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>要想调试这个函数，就需要手动构造 event、context 和 callback 三个对象，然后以它们为参数来调用函数，测试函数运行情况。<strong>麻烦点就在于：</strong> 这些参数运行依赖于 FaaS 环境，不同运行环境、不同触发器函数的入参都有差异，手动模拟这些对象很麻烦，且容易出错。<br><strong>那如何让开发者方便调试呢？</strong> 有两种方式。</p><ul><li><p>远程调试：将代码部署到 FaaS 平台，然后直接调用 FaaS 平台的接口执行函数，再得到函数运行日志及返回结果。</p></li><li><p>本地调试：由开发框架模拟函数运行时环境，构造函数参数来执行函数。</p></li></ul><p><strong>我认为对一个 Serverless 开发框架来说，这两种调试方式都需要，</strong> 也就是需要实现 serverless invoke 和 serverless local invoke 两个命令。虽然远程调试最接近代码真实运行情况，但需要进行网络调用，大部分情况还是本地调试效率更高。</p><h4 id="应用部署" tabindex="-1">应用部署 <a class="header-anchor" href="#应用部署" aria-label="Permalink to &quot;应用部署&quot;">​</a></h4><p>当代码开发完成后，就要部署应用了，过程是：根据 YAML 的配置，解析出应用的服务名称和函数列表，然后调用 FaaS 平台的接口来创建或更新服务和函数。</p><p>需要注意的是，在创建函数时，FaaS 平台中的函数代码通常以压缩包的方式存储在文件存储服务中，所以部署函数前需要先在本地把代码压缩成 .zip 文件。<strong>而在部署应用时，大部分同学会有这样一个担忧：</strong> 代码调试可以把函数部署到 FaaS 中进行调试，可能每次代码改动都会影响到线上服务，如果有版本控制就可以避免了。FaaS 平台当然考虑了这个问题，提供了函数版本功能（默认是 LATEST 版本）。通过版本控制，你在开发时可以使用 LATEST 版本进行开发，测试稳定了再发布稳定的新版本，用稳定版本提供线上服务。</p><p>所以在远程调试时，就不能更新函数版本，一直用 LATEST，而当应用部署时，就需要更新函数版本。</p>`,24),i=n("h4",{id:"账号设置与多平台支持",tabindex:"-1"},[s("账号设置与多平台支持 "),n("a",{class:"header-anchor",href:"#账号设置与多平台支持","aria-label":'Permalink to "账号设置与多平台支持"'},"​")],-1),F=n("p",null,[n("strong",null,"讲到这儿，我们已经完成了应用部署功能设计，"),s(" 但还有个问题没有解决，就是应用要部署到哪个云账号上？这时就需要账号功能了。")],-1),u=n("p",null,"在账号方面，对于接口编程访问，云厂商都是通过 AccessKeyId 和 AccessKeySecret 来授权的。你可以提供一个命令，让用户输入自己的云账号 AccessKeyId 和 AccessKeySecret，然后把账号信息保存到用户自己的磁盘上。这样应用部署的时候，你就可以从磁盘上读取账号信息，以用户的账号去调用 FaaS 平台的接口。这样就可以把应用部署到用户云账号下了，并且账号信息是存储在用户自己的磁盘上，也没有安全问题。",-1),d=n("p",null,[s("除此之外，我认为一个优秀的 Serverless 开发框架，还应该具备多种不同 Serverless 平台或云厂商的支持，因为你不能限制用户只使用某一种云服务。Serverless 开发框架最好还要抹平不同 Serverless 平台的差异，让应用能够在不同 Serverless 平台中进行平滑迁移，甚至让开发者使用一个开发框架、一套开发流程就能实现多云部署。"),n("strong",null,"而这，正是一个 Serverless 开发框架的核心竞争力之一。")],-1),C=n("p",null,[s("当然，要支持多种 Serverless 平台，就需要在框架层去适配各个不同的平台。但现在各个 Serverless 平台都没有遵循统一的标准，"),n("strong",null,"这也是实现一个多平台支持的难点所在。"),s(" 所以你在实现一个开发框架时，需要先抽象出各个平台公共部分，然后制订一套你的开发标准，再以适配器的方式去适配不同的 Serverless 平台。")],-1),v=p('<p>Serverless 框架架构</p><p>至此，你就完成了一个完整的 Serverless 开发框架的设计。在 Serverless 框架架构中，你通过一个 serverless 命令对开发者提供所有服务，贯穿 Serverless 应用开发到上线的全流程。</p><p><strong>这其实也是现在主流 Serverless 开发框架的实现原理</strong>。接下来，就让我带你看一下主流 Serverless 开发框架的实现细节、功能特性和使用方法，从而让你对 Serverless 开发框架的原理和实现有更多了解。</p><h3 id="主流-serverless-开发框架的实现" tabindex="-1">主流 Serverless 开发框架的实现 <a class="header-anchor" href="#主流-serverless-开发框架的实现" aria-label="Permalink to &quot;主流 Serverless 开发框架的实现&quot;">​</a></h3><p>整体而言，国外 Serverless 生态要比国内领先一到两年，因此国外有很多优秀的开发框架，但国内这方面还不够成熟，所以我就讲解一下国内外最具代表性的两个开发框架，<a href="https://github.com/serverless/serverless" target="_blank" rel="noreferrer">Serverless Framework</a>和<a href="https://github.com/alibaba/funcraft" target="_blank" rel="noreferrer">函数计算 Fun</a>。</p><p>我会按照以下顺序讲解这部分内容：</p>',6),h=p(`<h3 id="serverless-framework" tabindex="-1">Serverless Framework <a class="header-anchor" href="#serverless-framework" aria-label="Permalink to &quot;Serverless Framework&quot;">​</a></h3><p>说到 Serverless，就不得不说 Serverless Framework ，我认为这是目前最完善的 Serverless 开发框架之一。它不仅实现了前面提到的应用开发、调试、部署等基础功能，还实现了多个 Serverless 平台的支持（因为它不仅支持 AWS、Azure、Google、阿里云、腾讯云等公有云 Serverless 平台，还支持 CloudFlare、Kubeless、OpenWhisk 等私有 Serverless 平台）。</p><ul><li><strong>安装</strong></li></ul><p>Serverless Framework 是使用 Node.js 开发的，所以你可以使用 npm 直接来安装它，安装后你就可以直接使用 serverless 这个命令了（好巧，跟我们前面设计的开发框架的命令一样）。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--version</span></span>
<span class="line"><span style="color:#B392F0;">Framework</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Core:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.15</span><span style="color:#9ECBFF;">.0</span></span>
<span class="line"><span style="color:#B392F0;">Plugin:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4.2</span><span style="color:#9ECBFF;">.0</span></span>
<span class="line"><span style="color:#B392F0;">SDK:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.3</span><span style="color:#9ECBFF;">.2</span></span>
<span class="line"><span style="color:#B392F0;">Components:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.4</span><span style="color:#9ECBFF;">.3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--version</span></span>
<span class="line"><span style="color:#6F42C1;">Framework</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Core:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.15</span><span style="color:#032F62;">.0</span></span>
<span class="line"><span style="color:#6F42C1;">Plugin:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4.2</span><span style="color:#032F62;">.0</span></span>
<span class="line"><span style="color:#6F42C1;">SDK:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.3</span><span style="color:#032F62;">.2</span></span>
<span class="line"><span style="color:#6F42C1;">Components:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.4</span><span style="color:#032F62;">.3</span></span></code></pre></div><ul><li><strong>账号设置</strong></li></ul><p>你在使用 Serverless 时，第一件事就进行账号设置，假设你使用 AWS 则命令如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">credentials</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--provider</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aws</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--secret</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">secret</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless</span><span style="color:#24292E;"> </span><span style="color:#032F62;">config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">credentials</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--provider</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aws</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--secret</span><span style="color:#24292E;"> </span><span style="color:#032F62;">secret</span></span></code></pre></div><ul><li><p>--provider 具体的 Serverless 平台</p></li><li><p>--key AWS 账号的 aws_access_key_id</p></li><li><p>--secret AWS 账号的 aws_secret_access_key</p></li></ul><p>Serverless Framework 会把 AWS 的 aws_access_key_id 和 aws_secret_access_key 保存在 ~/.aws/credentials文件中。</p><p>在 Serverless Framework 中，通过 provider 来实现不同平台的支持。在不同 provider 中， Serverless Framework 的命令大部分相同，但不同 provider 的功能完整性还是有一定差异，比如它虽然支持阿里云 provider，但目前只支持 HTTP 触发器和 OSS 触发器。</p><ul><li><strong>应用配置</strong></li></ul><p>接下来你就可以使用 serverless 初始化一个应用了：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--template</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aws-nodejs</span></span>
<span class="line"><span style="color:#B392F0;">Serverless:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Generating</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">boilerplate...</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_______</span><span style="color:#E1E4E8;">                             </span><span style="color:#9ECBFF;">__</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">.-----.----.--.--.-----.----</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">-----</span><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">-----</span><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">-----</span><span style="color:#79B8FF;">.</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">___</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">-__</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">-__</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">-__</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">__</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">__</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">____</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">_____</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">__</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">\\___/</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">_____</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">__</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">__</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">_____</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">_____</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">_____</span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">             </span><span style="color:#B392F0;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Serverless</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Application</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Framework</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">                           </span><span style="color:#B392F0;">serverless.com,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v2.15.0</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">-------</span><span style="color:#B392F0;">&#39;</span></span>
<span class="line"><span style="color:#B392F0;">Serverless: Successfully generated boilerplate for template: &quot;aws-nodejs&quot;</span></span>
<span class="line"><span style="color:#B392F0;">Serverless: NOTE: Please update the &quot;service&quot; property in serverless.yml with your service name</span></span>
<span class="line"><span style="color:#B392F0;">$ ls</span></span>
<span class="line"><span style="color:#B392F0;">handler.js    serverless.yml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--template</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aws-nodejs</span></span>
<span class="line"><span style="color:#6F42C1;">Serverless:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Generating</span><span style="color:#24292E;"> </span><span style="color:#032F62;">boilerplate...</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_______</span><span style="color:#24292E;">                             </span><span style="color:#032F62;">__</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#6F42C1;">_</span><span style="color:#24292E;">   </span><span style="color:#032F62;">.-----.----.--.--.-----.----</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">.</span><span style="color:#24292E;">-----</span><span style="color:#005CC5;">.</span><span style="color:#24292E;">-----</span><span style="color:#005CC5;">.</span><span style="color:#24292E;">-----</span><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">___</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">-__</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#6F42C1;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">-__</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#6F42C1;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">-__</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">__</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">__</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">____</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">_____</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">__</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">\\___/</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">_____</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">__</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">__</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">_____</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">_____</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">_____</span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">             </span><span style="color:#6F42C1;">The</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Serverless</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Application</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Framework</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#24292E;">       </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">                           </span><span style="color:#6F42C1;">serverless.com,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v2.15.0</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">-------</span><span style="color:#6F42C1;">&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">Serverless: Successfully generated boilerplate for template: &quot;aws-nodejs&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">Serverless: NOTE: Please update the &quot;service&quot; property in serverless.yml with your service name</span></span>
<span class="line"><span style="color:#6F42C1;">$ ls</span></span>
<span class="line"><span style="color:#6F42C1;">handler.js    serverless.yml</span></span></code></pre></div><p>Serverless Framework 也是通过 YAML 配置文件来定义应用和函数的，其 YAML 格式如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">service</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myservice</span></span>
<span class="line"><span style="color:#85E89D;">frameworkVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#85E89D;">provider</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">aws</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">runtime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nodejs12.x</span></span>
<span class="line"><span style="color:#85E89D;">functions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">handler</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">handler.hello</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">events</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">http</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">users/create</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">method</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">get</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">websocket</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">$connect</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">s3</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${env:BUCKET}</span></span>
<span class="line"><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">Resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">NewResource</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">AWS::S3::Bucket</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">Properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">BucketName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">my-new-bucket</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">Outputs</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#85E89D;">NewOutput</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">Description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Description for the output&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#85E89D;">Value</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Some output value&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">service</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myservice</span></span>
<span class="line"><span style="color:#22863A;">frameworkVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;2&#39;</span></span>
<span class="line"><span style="color:#22863A;">provider</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">aws</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">runtime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nodejs12.x</span></span>
<span class="line"><span style="color:#22863A;">functions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">hello</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">handler</span><span style="color:#24292E;">: </span><span style="color:#032F62;">handler.hello</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">events</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">http</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">users/create</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">method</span><span style="color:#24292E;">: </span><span style="color:#032F62;">get</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">websocket</span><span style="color:#24292E;">: </span><span style="color:#032F62;">$connect</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">s3</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${env:BUCKET}</span></span>
<span class="line"><span style="color:#22863A;">resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">Resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">NewResource</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">AWS::S3::Bucket</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">Properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">BucketName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">my-new-bucket</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">Outputs</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#22863A;">NewOutput</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">Description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Description for the output&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#22863A;">Value</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Some output value&quot;</span></span></code></pre></div><p><strong>在这份 YAML 中，有一个前面没有提到过的属性 resources</strong>，resources 的作用就是帮你创建或更新资源（如果资源不存在则创建，如果资源已存在则更新）。比如示例中，就是为你创建一个 AWS 的 S3 存储桶。之所以会有 resources 属性，是因为通常一个应用都需要依赖其他云服务，比如存储、数据库等，之前你可能都是手动在云厂商的控制台去购买这些资源，一旦应用需要扩容的时候，手动创建资源就非常复杂且容易出错。Serverless Framework 则给你一种新的方式去管理云上资源，即通过代码来描述基础基础设施。</p><ul><li><strong>应用调试</strong></li></ul><p>在 Serverless Framework 中，调试函数也很简单，直接通过 invoke 命令即可：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 远程调试</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">invoke</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;statusCode&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;body&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{\\n  </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">message</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">Go Serverless v1.0! Your function executed successfully!</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">,\\n  </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">input</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">\\&quot;\\&quot;</span><span style="color:#9ECBFF;">\\n}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;"># 本地调试</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">invoke</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">local</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;statusCode&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;body&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{\\n  </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">message</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">Go Serverless v1.0! Your function executed successfully!</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">,\\n  </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">input</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">\\&quot;\\&quot;</span><span style="color:#9ECBFF;">\\n}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 远程调试</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless</span><span style="color:#24292E;"> </span><span style="color:#032F62;">invoke</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;statusCode&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;body&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{\\n  </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">message</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">Go Serverless v1.0! Your function executed successfully!</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">,\\n  </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">input</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">\\&quot;\\&quot;</span><span style="color:#032F62;">\\n}&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;"># 本地调试</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless</span><span style="color:#24292E;"> </span><span style="color:#032F62;">invoke</span><span style="color:#24292E;"> </span><span style="color:#032F62;">local</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;statusCode&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">&quot;body&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{\\n  </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">message</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">Go Serverless v1.0! Your function executed successfully!</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">,\\n  </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">input</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">\\&quot;\\&quot;</span><span style="color:#032F62;">\\n}&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然了，你也可以通过 serverless invoke local 来实现本地调试。</p><ul><li><strong>应用部署</strong></li></ul><p>应用开发完成后，你就可以使用 deploy 命令来部署应用，如下所示：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deploy</span></span>
<span class="line"><span style="color:#B392F0;">Serverless:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Packaging</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">service...</span></span>
<span class="line"><span style="color:#B392F0;">Serverless:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Excluding</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">development</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dependencies...</span></span>
<span class="line"><span style="color:#B392F0;">Serverless:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Service</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">files</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">changed.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Skipping</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deployment...</span></span>
<span class="line"><span style="color:#B392F0;">Service</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Information</span></span>
<span class="line"><span style="color:#B392F0;">service:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myservice</span></span>
<span class="line"><span style="color:#B392F0;">stage:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span>
<span class="line"><span style="color:#B392F0;">region:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">us-east-1</span></span>
<span class="line"><span style="color:#B392F0;">stack:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myservice-dev</span></span>
<span class="line"><span style="color:#B392F0;">resources:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span></span>
<span class="line"><span style="color:#B392F0;">functions:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hello:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myservice-dev-hello</span></span>
<span class="line"><span style="color:#B392F0;">layers:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tree</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.serverless</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myservice.zip</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">handler.js</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serverless.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deploy</span></span>
<span class="line"><span style="color:#6F42C1;">Serverless:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Packaging</span><span style="color:#24292E;"> </span><span style="color:#032F62;">service...</span></span>
<span class="line"><span style="color:#6F42C1;">Serverless:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Excluding</span><span style="color:#24292E;"> </span><span style="color:#032F62;">development</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dependencies...</span></span>
<span class="line"><span style="color:#6F42C1;">Serverless:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Service</span><span style="color:#24292E;"> </span><span style="color:#032F62;">files</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">changed.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Skipping</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deployment...</span></span>
<span class="line"><span style="color:#6F42C1;">Service</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Information</span></span>
<span class="line"><span style="color:#6F42C1;">service:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myservice</span></span>
<span class="line"><span style="color:#6F42C1;">stage:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span>
<span class="line"><span style="color:#6F42C1;">region:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">us-east-1</span></span>
<span class="line"><span style="color:#6F42C1;">stack:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myservice-dev</span></span>
<span class="line"><span style="color:#6F42C1;">resources:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#6F42C1;">functions:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hello:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myservice-dev-hello</span></span>
<span class="line"><span style="color:#6F42C1;">layers:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tree</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.serverless</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myservice.zip</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">handler.js</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serverless.yaml</span></span></code></pre></div><p>在将函数部署到 Lambda 之前，serverless 会先在本地将代码打包，最终代码是一个压缩包，路径为 .serverles/[serviceName].zip 。你也可以通过 serverless deploy function -f functionName 来单独部署某个函数。</p><p>除此之外，Serverless Framework 还提供了日志查询功能，当然，Serverless Framework 的功能不止于此（但因为不是这一讲的重点，所以我想留给你去探索），接下来我们再来了解一下，函数计算 Fun 的基本功能和使用，<strong>看看它和 Serverless Framework 有什么差异。</strong></p><h3 id="函数计算-fun" tabindex="-1">函数计算 Fun <a class="header-anchor" href="#函数计算-fun" aria-label="Permalink to &quot;函数计算 Fun&quot;">​</a></h3><p>Fun 是阿里云函数计算团队开发维护的一个 Serverles 开发框架，因此只支持函数计算。因为它是用 Node.js 编写的，所以也可以使用 npm 安装：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ npm install @</span><span style="color:#F97583;">alicloud/</span><span style="color:#E1E4E8;">fun </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">g</span></span>
<span class="line"><span style="color:#E1E4E8;">$ fun </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">version</span></span>
<span class="line"><span style="color:#79B8FF;">3.6</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ npm install @</span><span style="color:#D73A49;">alicloud/</span><span style="color:#24292E;">fun </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">g</span></span>
<span class="line"><span style="color:#24292E;">$ fun </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">version</span></span>
<span class="line"><span style="color:#005CC5;">3.6</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">20</span></span></code></pre></div><p><strong>安装后第一步同样是设置账号：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ fun config</span></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Aliyun Account ID </span><span style="color:#F97583;">*******</span></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Aliyun Access Key ID </span><span style="color:#F97583;">******</span></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Aliyun Access Key Secret </span><span style="color:#F97583;">******</span></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Default region name cn</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hangzhou</span></span>
<span class="line"><span style="color:#E1E4E8;">$ cat </span><span style="color:#F97583;">~/</span><span style="color:#E1E4E8;">.fcli</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">config.yaml</span></span>
<span class="line"><span style="color:#E1E4E8;">endpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://******.cn-hangzhou.fc.aliyuncs.com&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">api_version</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2016-08-15&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">access_key_id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">******</span></span>
<span class="line"><span style="color:#E1E4E8;">access_key_secret</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">******</span></span>
<span class="line"><span style="color:#E1E4E8;">security_token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">debug</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">timeout</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">retries</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">sls_endpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cn</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hangzhou.log.aliyuncs.com</span></span>
<span class="line"><span style="color:#E1E4E8;">report</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">enable_custom_endpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ fun config</span></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Aliyun Account ID </span><span style="color:#D73A49;">*******</span></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Aliyun Access Key ID </span><span style="color:#D73A49;">******</span></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Aliyun Access Key Secret </span><span style="color:#D73A49;">******</span></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Default region name cn</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hangzhou</span></span>
<span class="line"><span style="color:#24292E;">$ cat </span><span style="color:#D73A49;">~/</span><span style="color:#24292E;">.fcli</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">config.yaml</span></span>
<span class="line"><span style="color:#24292E;">endpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://******.cn-hangzhou.fc.aliyuncs.com&#39;</span></span>
<span class="line"><span style="color:#24292E;">api_version</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2016-08-15&#39;</span></span>
<span class="line"><span style="color:#24292E;">access_key_id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">******</span></span>
<span class="line"><span style="color:#24292E;">access_key_secret</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">******</span></span>
<span class="line"><span style="color:#24292E;">security_token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">debug</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">timeout</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">retries</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">sls_endpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cn</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hangzhou.log.aliyuncs.com</span></span>
<span class="line"><span style="color:#24292E;">report</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">enable_custom_endpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span></code></pre></div><p>配置完成后，fun 会将账号信息存储在.fcli/config.yaml 文件中。除此之外，你也可以在项目根目录中使用 .env文件来配置账号信息，其优先级更高。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 项目根目录 .env</span></span>
<span class="line"><span style="color:#E1E4E8;">ACCOUNT_ID</span><span style="color:#F97583;">=*****</span></span>
<span class="line"><span style="color:#E1E4E8;">REGION</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cn</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hangzhou</span></span>
<span class="line"><span style="color:#E1E4E8;">ACCESS_KEY_ID</span><span style="color:#F97583;">=******</span></span>
<span class="line"><span style="color:#E1E4E8;">ACCESS_KEY_SECRET</span><span style="color:#F97583;">=******</span></span>
<span class="line"><span style="color:#E1E4E8;">TIMEOUT</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">RETRIES</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">FC_ENDPOINT</span><span style="color:#F97583;">=******</span></span>
<span class="line"><span style="color:#E1E4E8;">ENABLE_CUSTOM_ENDPOINT</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 项目根目录 .env</span></span>
<span class="line"><span style="color:#24292E;">ACCOUNT_ID</span><span style="color:#D73A49;">=*****</span></span>
<span class="line"><span style="color:#24292E;">REGION</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cn</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hangzhou</span></span>
<span class="line"><span style="color:#24292E;">ACCESS_KEY_ID</span><span style="color:#D73A49;">=******</span></span>
<span class="line"><span style="color:#24292E;">ACCESS_KEY_SECRET</span><span style="color:#D73A49;">=******</span></span>
<span class="line"><span style="color:#24292E;">TIMEOUT</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">RETRIES</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">FC_ENDPOINT</span><span style="color:#D73A49;">=******</span></span>
<span class="line"><span style="color:#24292E;">ENABLE_CUSTOM_ENDPOINT</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span></code></pre></div><p><strong>在应用配置上，</strong> 你可以通过 fun init <code>&lt;templateName&gt;</code>命令来初始化一个项目：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ fun init event</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">$ ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l</span></span>
<span class="line"><span style="color:#E1E4E8;">index.js    template.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ fun init event</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodejs12</span></span>
<span class="line"><span style="color:#24292E;">$ ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l</span></span>
<span class="line"><span style="color:#24292E;">index.js    template.yaml</span></span></code></pre></div><p>其中 template.yaml 功能与 serverless.yaml 一致，但内容定义有较大差异。template.yaml 的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ROSTemplateFormatVersion</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">Transform</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">Resources</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  myservice</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Properties</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      Description</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;helloworld&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    hello</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Properties</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        Handler</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> index.handler</span></span>
<span class="line"><span style="color:#E1E4E8;">        Runtime</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nodejs12</span></span>
<span class="line"><span style="color:#E1E4E8;">        CodeUri</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ROSTemplateFormatVersion</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#24292E;">Transform</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#24292E;">Resources</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  myservice</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Service&#39;</span></span>
<span class="line"><span style="color:#24292E;">    Properties</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      Description</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;helloworld&#39;</span></span>
<span class="line"><span style="color:#24292E;">    hello</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#24292E;">      Properties</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        Handler</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> index.handler</span></span>
<span class="line"><span style="color:#24292E;">        Runtime</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nodejs12</span></span>
<span class="line"><span style="color:#24292E;">        CodeUri</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./&#39;</span></span></code></pre></div><p>其中 Resources 是表示资源的对象，对象的属性就是具体资源，对象属性中的Type 用来表示资源的类型。比如 Aliyun::Serverless::Service就表示是&quot;服务&quot;，Aliyun::Serverless::Function 表示函数。因此 template.yaml 中你可以定义多个服务，一个服务中也可以定义多个函数。</p><p><strong>接下来，你可以通过 fun invoke functionName 命令对函数进行远程调试：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ fun invoke hello</span></span>
<span class="line"><span style="color:#E1E4E8;">using template</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> template.yml</span></span>
<span class="line"><span style="color:#F97583;">=========</span><span style="color:#E1E4E8;"> FC invoke Logs begin </span><span style="color:#F97583;">=========</span></span>
<span class="line"><span style="color:#E1E4E8;">FC Invoke Start RequestId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> c6abf471</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">949a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4bbc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">9edf</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">35e4c312a974</span></span>
<span class="line"><span style="color:#E1E4E8;">load code </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> handler</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">index.handler</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">06T14</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">11.</span><span style="color:#FDAEB7;font-style:italic;">353Z</span><span style="color:#E1E4E8;"> c6abf471</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">949a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4bbc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">9edf</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">35e4c312a974 [verbose] hello world</span></span>
<span class="line"><span style="color:#E1E4E8;">FC Invoke End RequestId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> c6abf471</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">949a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4bbc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">9edf</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">35e4c312a974</span></span>
<span class="line"><span style="color:#E1E4E8;">Duration</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13.99</span><span style="color:#E1E4E8;"> ms, Billed Duration</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> ms, Memory Size</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">128</span><span style="color:#E1E4E8;"> MB, Max Memory Used</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17.30</span><span style="color:#E1E4E8;"> MB</span></span>
<span class="line"><span style="color:#F97583;">=========</span><span style="color:#E1E4E8;"> FC invoke Logs end </span><span style="color:#F97583;">=========</span></span>
<span class="line"><span style="color:#E1E4E8;">FC Invoke Result</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">hello world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ fun invoke hello</span></span>
<span class="line"><span style="color:#24292E;">using template</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> template.yml</span></span>
<span class="line"><span style="color:#D73A49;">=========</span><span style="color:#24292E;"> FC invoke Logs begin </span><span style="color:#D73A49;">=========</span></span>
<span class="line"><span style="color:#24292E;">FC Invoke Start RequestId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> c6abf471</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">949a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4bbc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">9edf</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">35e4c312a974</span></span>
<span class="line"><span style="color:#24292E;">load code </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> handler</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">index.handler</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">06T14</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">11.</span><span style="color:#B31D28;font-style:italic;">353Z</span><span style="color:#24292E;"> c6abf471</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">949a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4bbc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">9edf</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">35e4c312a974 [verbose] hello world</span></span>
<span class="line"><span style="color:#24292E;">FC Invoke End RequestId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> c6abf471</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">949a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4bbc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">9edf</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">35e4c312a974</span></span>
<span class="line"><span style="color:#24292E;">Duration</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13.99</span><span style="color:#24292E;"> ms, Billed Duration</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> ms, Memory Size</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> MB, Max Memory Used</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17.30</span><span style="color:#24292E;"> MB</span></span>
<span class="line"><span style="color:#D73A49;">=========</span><span style="color:#24292E;"> FC invoke Logs end </span><span style="color:#D73A49;">=========</span></span>
<span class="line"><span style="color:#24292E;">FC Invoke Result</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">hello world</span></span></code></pre></div><p>当然，你也可以通过fun local invoke function 在本地调试。但本地调试前，你必须先安装 Docker，因为 fun 的本地调试原理是通过 Docker 在本地启动一个代码运行环境来执行代码，而不是直接模拟函数参数。这样的好处是，更接近 FaaS 平台的运行环境。</p><p><strong>应用开发完毕后，你可以通过 fun deploy 进行应用部署。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ fun fun deploy</span></span>
<span class="line"><span style="color:#E1E4E8;">using template</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> template.yml</span></span>
<span class="line"><span style="color:#E1E4E8;">using region</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cn</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hangzhou</span></span>
<span class="line"><span style="color:#E1E4E8;">using accountId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">***********</span><span style="color:#79B8FF;">4698</span></span>
<span class="line"><span style="color:#E1E4E8;">using accessKeyId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">***********</span><span style="color:#E1E4E8;">QliF</span></span>
<span class="line"><span style="color:#E1E4E8;">using timeout</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">Waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> service myservice to be deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">    Waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> function hello to be deployed...</span></span>
<span class="line"><span style="color:#E1E4E8;">        Waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> packaging function hello code...</span></span>
<span class="line"><span style="color:#E1E4E8;">        The function hello has been packaged. A total of </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> file were compressed and the </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> size was </span><span style="color:#79B8FF;">318</span><span style="color:#E1E4E8;"> B</span></span>
<span class="line"><span style="color:#E1E4E8;">    function hello deploy success</span></span>
<span class="line"><span style="color:#E1E4E8;">service myservice deploy success</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ fun fun deploy</span></span>
<span class="line"><span style="color:#24292E;">using template</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> template.yml</span></span>
<span class="line"><span style="color:#24292E;">using region</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cn</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hangzhou</span></span>
<span class="line"><span style="color:#24292E;">using accountId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">***********</span><span style="color:#005CC5;">4698</span></span>
<span class="line"><span style="color:#24292E;">using accessKeyId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">***********</span><span style="color:#24292E;">QliF</span></span>
<span class="line"><span style="color:#24292E;">using timeout</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">Waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> service myservice to be deployed...</span></span>
<span class="line"><span style="color:#24292E;">    Waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> function hello to be deployed...</span></span>
<span class="line"><span style="color:#24292E;">        Waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> packaging function hello code...</span></span>
<span class="line"><span style="color:#24292E;">        The function hello has been packaged. A total of </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> file were compressed and the </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> size was </span><span style="color:#005CC5;">318</span><span style="color:#24292E;"> B</span></span>
<span class="line"><span style="color:#24292E;">    function hello deploy success</span></span>
<span class="line"><span style="color:#24292E;">service myservice deploy success</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在我看来，开发框架的意义就在于帮助开发者提升 Serverless 应用的开发效率， 因此一个 Serverless 开发框架最主要的就是要实现应用管理、应用调试、应用部署等功能。而在Serverless Framework 和 Fun 这两个开发框架中：</p><ul><li><p>Serverless Framework 特点是功能完善、支持平台丰富。但由于 Serverless 平台尚且没有统一标准，所以支持多平台难度极大，也导致其对国内产品支持不够友好；</p></li><li><p>Fun 的特点是只为函数计算服务，因此有很多针对函数计算的特定功能。</p></li></ul><p>除了 Serverless Framework 外，国外还有 <a href="https://vercel.com/" target="_blank" rel="noreferrer">Vercel</a>、<a href="https://apex.sh/up/" target="_blank" rel="noreferrer">Apex Up</a> 等非常优秀的 Serverless 开发框架，Vercel 的前生就是 now.sh ，Apex Up 则是 Node.js 领域的 TJ 大神 2016 年就开始开发的产品。而国内除了 Fun，现在也有 <a href="https://github.com/midwayjs/midway-faas" target="_blank" rel="noreferrer">Midway FaaS</a>、<a href="https://github.com/cellbang/malagu" target="_blank" rel="noreferrer">Malagu</a> 等新兴产品出现，这些产品虽然没有国外产品功能完善，但相信随着时间的推移，国内的 Serverless 开发体验也一定会越来越好。也是由于国内 Serverless 生态还不够完善，<strong>所以我们才有更多的机会，也希望你也能一起参与进来，为国内 Serverless 开发生态做出贡献。</strong></p><p>另一方面，现在绝大部分 Serverless 开发框架都是基于 Node.js 实现，并且大部分都是对 Node.js 编写语言支持最友好，甚至只支持 Node.js，这也能看出 Node.js 在 Serverless 领域的重要性。</p><p><strong>关于这节课，我想强调这几个点：</strong></p><ul><li><p>与 FaaS、BaaS 等基础技术一样，Serverless 开发框架也是 Serverless 领域中的非常重要的一部分；</p></li><li><p>一个优秀的 Serverless 开发框架，可以让开发者很容易开发一个 Serverless 架构的应用，也能让企业轻易将现有业务演化到 Serverless 架构；</p></li><li><p>Serverless 开发框架需要具备的基本能力是应用管理、应用调试和应用部署。</p></li></ul><p>最后，这节课我留给你的作业时，亲自体验一下本文中提到的各个开发框架，进而对 Serverless 的开发体系有更深的了解。</p>`,51);function g(A,_,B,D,m,S){const a=e("Image");return c(),r("div",null,[y,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/03/D4/Cip5yF_jCDqAd4mXAAFF8YqIxq8216.png"}),s(),E,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/8B/FD/CgqCHl_jCFuACP1uAAGWw6OtS60066.png"}),s(),i,F,u,d,l(a,{alt:"Lark20210104-183828.png",src:"https://s0.lgstatic.com/i/image/M00/8C/B3/CgqCHl_y8F-AKiNdAAGE8ajjCCA752.png"}),s(),C,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/8B/FD/CgqCHl_jCG6AHdZPAAOd4PqLzmk757.png"}),s(),v,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/8B/F2/Ciqc1F_jCHeASYj3AAGl95hTVl4092.png"}),s(),h])}const f=o(t,[["render",g]]);export{b as __pageData,f as default};
