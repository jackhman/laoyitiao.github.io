import{_ as a,j as l,o as p,g as o,k as e,h as t,Q as c,s}from"./chunks/framework.a0d18f64.js";const C=JSON.parse('{"title":"24自动化代码检查：剖析Lint工具和工程化接入&优化方案","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5953) 24  自动化代码检查：剖析 Lint 工具和工程化接入&优化方案.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5953) 24  自动化代码检查：剖析 Lint 工具和工程化接入&优化方案.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/105-前端基础建设与架构文档/(5953) 24  自动化代码检查：剖析 Lint 工具和工程化接入&优化方案.md"},E=c(`<h1 id="_24自动化代码检查-剖析lint工具和工程化接入-优化方案" tabindex="-1">24自动化代码检查：剖析Lint工具和工程化接入&amp;优化方案 <a class="header-anchor" href="#_24自动化代码检查-剖析lint工具和工程化接入-优化方案" aria-label="Permalink to &quot;24自动化代码检查：剖析Lint工具和工程化接入&amp;优化方案&quot;">​</a></h1><p>不管是团队的扩张还是业务的发展，都会导致项目代码量出现爆炸式增长。为了防止&quot;野蛮生长&quot;现象，我们需要有一个良好的技术选型和成熟的架构做支撑，也需要团队中每一个开发者都能用心维护项目。在此方向上，除了人工 code review 以外，相信大家对于一些规范工具并不陌生。</p><p>作为一名前端工程师，<strong>在使用现代化工具的基础上，如何尽可能发挥其能量？在必要的情况下，如何开发适合自己团队需求的工具</strong>？这一讲，我们将围绕这些问题展开。</p><h3 id="自动化工具巡礼" tabindex="-1">自动化工具巡礼 <a class="header-anchor" href="#自动化工具巡礼" aria-label="Permalink to &quot;自动化工具巡礼&quot;">​</a></h3><p>现代前端开发，&quot;武器&quot;都已经非常自动化了。不同工具的分工不同，我们的目标是合理结合各种工具，打造一条完善的自动化流水线，以高效率、低投入的方式，为我们的代码质量提供有效保障。</p><h4 id="prettier" tabindex="-1">Prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;Prettier&quot;">​</a></h4><p>首先从 Prettier 说起，英文单词 prettier 是 pretty 的比较级，pretty 译为&quot;漂亮、美化&quot;。顾名思义，Prettier 这个工具能够美化我们的代码，或者说<strong>格式化、规范化代码</strong> ，使其更加工整。它一般不会检查我们代码具体的写法，而是在&quot;<strong>可读性</strong>&quot;上做文章。目前支持包括 JavaScript、JSX、Angular、Vue、Flow、TypeScript、CSS（Less、SCSS）、JSON 等多种语言、数据交换格式、语法规范扩展。</p><p>总的来说，它能够将原始代码风格移除，并替换为团队统一配置的代码风格。虽然几乎所有团队都在使用这款工具，这里我们还是简单分析一下使用它的原因：</p><ul><li><p>构建并统一代码风格</p></li><li><p>帮助团队新成员快速融入团队</p></li><li><p>开发者可以完全聚焦业务开发，不必在代码整理上花费过多心思</p></li><li><p>方便，低成本灵活接入，并快速发挥作用</p></li><li><p>清理并规范已有代码</p></li><li><p>减少潜在 Bug</p></li><li><p>丰富强大的社区支持</p></li></ul><p>当然，Prettier 也可以与编辑器结合，在开发者保存后立即进行美化，也可以集成到 CI 环境中，或者 Git pre-commit 的 hook 阶段。比如使用 <a href="https://www.npmjs.com/package/pretty-quick" target="_blank" rel="noreferrer">pretty-quick</a>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">yarn add prettier pretty</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">quick husky </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">yarn add prettier pretty</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">quick husky </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">dev</span></span></code></pre></div><p>并在 package.json 中配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;husky&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;hooks&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;pre-commit&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;pretty-quick --staged&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;husky&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;hooks&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;pre-commit&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;pretty-quick --staged&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 husky 中，定义 pre-commit 阶段，对变化的文件运行 Prettier，--staged 参数表示 pre-commit 模式：只对 staged 的文件进行格式化。</p><p>这里我们使用了官方推荐的 <a href="https://www.npmjs.com/package/pretty-quick" target="_blank" rel="noreferrer">pretty-quick</a> 来实现 pre-commit 阶段的美化。这只是实现方式之一，还可以通过 lint-staged 来实现，我们会在下面 ESLint 和 husky 部分介绍。</p><p>通过 Demo 我们能看出，Prettier 确实很灵活，且自动化程度很高，接入项目也十分方便。</p><h4 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLint&quot;">​</a></h4><p>下面来看一下以 ESLint 为代表的 Linter。Code Linting 表示<strong>基于静态分析代码原理，找出代码反模式</strong>的过程。多数编程语言都有 Linter，它们往往被集成在编译阶段，完成 Coding Linting 的任务。</p><p>对于 JavaScript 这种动态、宽松类型的语言来说，开发者更容易犯错。由于 JavaScript 不具备先天编译流程，往往会在运行时暴露错误，而 Linter，尤其最具代表性的 ESLint 的出现，允许开发者在执行前发现代码错误或不合理的写法。</p><p>ESLint 最重要的几点哲学思想：</p><ul><li><p>所有规则都插件化</p></li><li><p>所有规则都可插拔（随时开关）</p></li><li><p>所有设计都透明化</p></li><li><p>使用 Espree 进行 JavaScript 解析</p></li><li><p>使用 AST 分析语法</p></li></ul><p>想要顺利执行 ESLint，还需要安装应用规则插件。</p><p>那么如何声明并应用规则呢？在根目录中打开 .eslintrc 配置文件，我们在该文件中加入：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;rules&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;semi&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;always&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;quote&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;double&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;rules&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;semi&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;always&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;quote&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;double&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>semi、quote 就是 ESLint 规则的名称，其值对应的数组第一项可以为：off/0、warn/1、error/2，分别表示关闭规则、以 warning 形式打开规则、以 error 形式打开规则。</p><ul><li><p>off/0：关闭规则</p></li><li><p>warn/1：以 warning 形式打开规则</p></li><li><p>error/2：以 error 形式打开规则</p></li></ul><p>同样我们还会在 .eslintrc 文件中发现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;extends&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;eslint:recommended&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;extends&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;eslint:recommended&quot;</span></span></code></pre></div><p>这行表示 ESLint 默认的规则都将会被打开。当然，我们也可以选取其他规则集合，比较出名的有：</p><ul><li><p><a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noreferrer">Google JavaScript Style Guide</a></p></li><li><p><a href="https://github.com/airbnb/javascript#table-of-contents" target="_blank" rel="noreferrer">Airbnb JavaScript Style Guide</a></p></li></ul><p>我们继续拆分 .eslintrc 文件，其实它主要由六个字段组成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">   env</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">   extends</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">   plugins</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">   parser</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">   parserOptions</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}, </span></span>
<span class="line"><span style="color:#E1E4E8;">   rules</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">   env</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}, </span></span>
<span class="line"><span style="color:#24292E;">   extends</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}, </span></span>
<span class="line"><span style="color:#24292E;">   plugins</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}, </span></span>
<span class="line"><span style="color:#24292E;">   parser</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}, </span></span>
<span class="line"><span style="color:#24292E;">   parserOptions</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}, </span></span>
<span class="line"><span style="color:#24292E;">   rules</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p>env：表示指定想启用的环境。</p></li><li><p>extends：指定额外配置的选项，如 [&#39;airbnb&#39;] 表示使用 Airbnb 的 Linting 规则。</p></li><li><p>plugins：设置规则插件。</p></li><li><p>parser：默认情况下 ESLint 使用 Espree 进行解析。</p></li><li><p>parserOptions：如果将默认解析器更改，需要制定 parserOptions。</p></li><li><p>rules：定义拓展并通过插件添加的所有规则。</p></li></ul><p>注意，上文中 .eslintrc 文件我们<strong>采用了 .eslintrc.js 的 JavaScript 文件格式</strong>，此外还可以采用 .yaml、.json、yml 等格式。如果项目中含有多种配置文件格式，优先级顺序为：</p><ul><li><p>.eslintrc.js</p></li><li><p>.eslintrc.yaml</p></li><li><p>.eslintrc.yml</p></li><li><p>.eslintrc.json</p></li><li><p>.eslintrc</p></li><li><p>package.json</p></li></ul><p>最终，我们在 package.json 中可以添加 script：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;lint&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;eslint --debug src/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;lint:write&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;eslint --debug src/ --fix&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> },</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;lint&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;eslint --debug src/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;lint:write&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;eslint --debug src/ --fix&quot;</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span></code></pre></div><p>我们对上述 npm script 进行分析，如下：</p><ul><li><p>lint 这个命令将遍历所有文件，并在每个找到错误的文件中提供详细日志，但<strong>需要开发者手动打开这些文件并更正错误</strong>。</p></li><li><p>lint:write 与 lint 命令类似，但这个命令可以自动纠正错误。</p></li></ul><h4 id="linter-vs-prettier" tabindex="-1">Linter VS Prettier <a class="header-anchor" href="#linter-vs-prettier" aria-label="Permalink to &quot;Linter VS Prettier&quot;">​</a></h4><p>我们应该如何对比以 ESLint 为代表的 Linter 和 Prettier 呢，它们到底是什么关系？就像开篇提到的那样，它们解决不同的问题，定位不同，但是又可以相辅相成。</p><p>所有的 Linter 类似 ESLint，其规则都可以划分为两类。</p><ul><li>格式化规则（Formatting Rules）</li></ul><p>这类&quot;格式化规则&quot;典型的有 max-len、no-mixed-spaces-and-tabs、keyword-spacing、comma-style，它们&quot;限制一行的最大长度&quot;&quot;禁止使用空格和 Tab 混合缩进&quot;等代码格式方面的规范。事实上，即便开发者写出的代码违反了这类规则，如果在 Lint 阶段前，先经过 Prettier 处理，这些问题会<strong>在 Prettier 阶段被纠正，因此 Linter 不会抛出提醒</strong>，非常省心，这也是 Linter 和 Prettier 重叠的地方。</p><ul><li>代码质量规则（Code Quality Rules）</li></ul><p>这类&quot;代码质量规则&quot;类似 no-unused-vars、no-extra-bind、no-implicit-globals、prefer-promise-reject-errors，它们限制&quot;声明未使用变量&quot;&quot;不必要的函数绑定&quot;等代码写法规范。这个时候，Prettier 对这些规则无能为力，而这些规则对于代码质量和强健性至关重要，还是需要 Linter 来保障的。</p><p>如同 Prettier，ESLint 也可以集成到编辑器或者 Git pre-commit 阶段。前文已经演示过了 Prettier 搭配 husky，下面我们来介绍一下 husky 到底是什么。</p><h4 id="husky-和-lint-staged" tabindex="-1">husky 和 lint-staged <a class="header-anchor" href="#husky-和-lint-staged" aria-label="Permalink to &quot;husky 和 lint-staged&quot;">​</a></h4><p>其实，husky 就是 Git 的一个钩子，在 Git 进行到某一时段时，可以交给开发者完成某些特定的操作。比如每次提交（commit 阶段）或者推送（push 阶段）代码时，就可以执行相关 npm 脚本。需要注意的是，<strong>在整个项目上运行 Lint 会很慢，我们一般只想对更改的文件进行检查，此时就需要使用到 lint-staged</strong>。比如如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;lint&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;eslint --debug src/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;lint:write&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;eslint --debug src/ --fix&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;prettier&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;prettier --write src/**/*.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;husky&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;hooks&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;pre-commit&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;lint-staged&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;lint-staged&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;*.(js|jsx)&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;npm run lint:write&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;npm run prettier&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;git add&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;lint&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;eslint --debug src/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;lint:write&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;eslint --debug src/ --fix&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;prettier&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;prettier --write src/**/*.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#032F62;">&quot;husky&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;hooks&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;pre-commit&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;lint-staged&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#032F62;">&quot;lint-staged&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;*.(js|jsx)&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;npm run lint:write&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;npm run prettier&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;git add&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre></div><p>上述代码表示在 pre-commit 阶段对于 js 或者 jsx 后缀且修改的文件执行 ESLint 和 Prettier 操作，通过之后再进行 git add 添加到暂存区。</p><h3 id="lucas-scripts-中的-lint-配置最佳实践" tabindex="-1">lucas-scripts 中的 Lint 配置最佳实践 <a class="header-anchor" href="#lucas-scripts-中的-lint-配置最佳实践" aria-label="Permalink to &quot;lucas-scripts 中的 Lint 配置最佳实践&quot;">​</a></h3><p>结合上一讲内容，我们可以扩充 lucas-scripts 项目关于 Lint 的抽象设计。相关脚本：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> spawn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cross-spawn&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> yargsParser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;yargs-parser&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {hasPkgProp, resolveBin, hasFile, fromRoot} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../utils&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">let args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> process.argv.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> here </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, p)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> hereRelative </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">here</span><span style="color:#E1E4E8;">(p).</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parsedArgs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">yargsParser</span><span style="color:#E1E4E8;">(args)</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用默认 eslint 配置</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> useBuiltinConfig </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--config&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.eslintrc&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.eslintrc.js&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasPkgProp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;eslintConfig&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#6A737D;">// 获取默认 eslintrc.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> useBuiltinConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--config&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">hereRelative</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../config/eslintrc.js&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> defaultExtensions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;js,ts,tsx&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--ext&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--ext&#39;</span><span style="color:#E1E4E8;">, defaultExtensions]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> extensions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (parsedArgs.ext </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> defaultExtensions).</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> useBuiltinIgnore </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--ignore-path&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.eslintignore&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">hasPkgProp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;eslintIgnore&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ignore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> useBuiltinIgnore</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;--ignore-path&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">hereRelative</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../config/eslintignore&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用 --no-cache</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--no-cache&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;--cache&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;--cache-location&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">fromRoot</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;node_modules/.cache/.eslintcache&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> filesGiven </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parsedArgs._.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> filesToApply </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> filesGiven </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> [] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (filesGiven) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 筛选出需要进行 lint 的相关文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    a </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">parsedArgs._.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(a) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> extensions.</span><span style="color:#B392F0;">some</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(e)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 spawn.sync 执行 eslint</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> spawn.</span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resolveBin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;eslint&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  [...config, ...ext, ...ignore, ...cache, ...args, ...filesToApply],</span></span>
<span class="line"><span style="color:#E1E4E8;">  {stdio</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;inherit&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(result.status)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> spawn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cross-spawn&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> yargsParser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;yargs-parser&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {hasPkgProp, resolveBin, hasFile, fromRoot} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../utils&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">let args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> process.argv.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> here </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, p)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> hereRelative </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">here</span><span style="color:#24292E;">(p).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parsedArgs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">yargsParser</span><span style="color:#24292E;">(args)</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用默认 eslint 配置</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> useBuiltinConfig </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--config&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.eslintrc&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.eslintrc.js&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasPkgProp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;eslintConfig&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">// 获取默认 eslintrc.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> useBuiltinConfig</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--config&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">hereRelative</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../config/eslintrc.js&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> defaultExtensions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;js,ts,tsx&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--ext&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--ext&#39;</span><span style="color:#24292E;">, defaultExtensions]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> extensions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (parsedArgs.ext </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> defaultExtensions).</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> useBuiltinIgnore </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--ignore-path&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.eslintignore&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasPkgProp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;eslintIgnore&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ignore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> useBuiltinIgnore</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;--ignore-path&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">hereRelative</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../config/eslintignore&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#6A737D;">// 是否使用 --no-cache</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;--no-cache&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;--cache&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;--cache-location&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">fromRoot</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;node_modules/.cache/.eslintcache&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> filesGiven </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parsedArgs._.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> filesToApply </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> filesGiven </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (filesGiven) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 筛选出需要进行 lint 的相关文件</span></span>
<span class="line"><span style="color:#24292E;">  args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    a </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">parsedArgs._.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(a) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> extensions.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(e)),</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 spawn.sync 执行 eslint</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> spawn.</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resolveBin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;eslint&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  [...config, ...ext, ...ignore, ...cache, ...args, ...filesToApply],</span></span>
<span class="line"><span style="color:#24292E;">  {stdio</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;inherit&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">process.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(result.status)</span></span></code></pre></div><p>npm-script 的 eslintrc.js 就比较简单了，我们默认使用以下配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {ifAnyDep} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../utils&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  extends</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 选用一种 eslint 规则即可</span></span>
<span class="line"><span style="color:#E1E4E8;">    require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;XXXX&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对于 react 相关环境，选用一种 eslint 规则即可</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ifAnyDep</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">, require.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;XXX&#39;</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ].</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Boolean),</span></span>
<span class="line"><span style="color:#E1E4E8;">  rules</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {ifAnyDep} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../utils&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  extends</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 选用一种 eslint 规则即可</span></span>
<span class="line"><span style="color:#24292E;">    require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;XXXX&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对于 react 相关环境，选用一种 eslint 规则即可</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ifAnyDep</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">, require.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;XXX&#39;</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">  ].</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Boolean),</span></span>
<span class="line"><span style="color:#24292E;">  rules</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中的规则配置，我们可以采用自定义的 eslint config，也可以选用社区上流行的 config。</p><p>具体流程执行原理上一讲中已经梳理，我们不再展开。下面，我们从 AST 的层面，深入 Lint 原理，并根据其实现和扩展能力，开发更加灵活的工具集。</p><h3 id="工具背后的技术原理和设计" tabindex="-1">工具背后的技术原理和设计 <a class="header-anchor" href="#工具背后的技术原理和设计" aria-label="Permalink to &quot;工具背后的技术原理和设计&quot;">​</a></h3><p>我们挑选实现更为复杂精妙的 ESLint 来分析。你应该很清楚，ESLint 是<strong>基于静态语法分析</strong>（AST）进行工作的，AST 已经不是一个新鲜话题。ESLint 使用 Espree 来解析 JavaScript 语句，生成 AST。</p><p>有了完整的解析树，我们就可以基于解析树，对代码进行检测和修改。ESLint 的灵魂是每一条 rule，每条规则都是独立且插件化的，我们挑一个比较简单的&quot;<strong>禁止块级注释规则</strong>&quot;源码来分析：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  meta</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    docs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      description</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;禁止块级注释&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      category</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Stylistic Issues&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      recommended</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;"> (context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> sourceCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getSourceCode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Program</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> comments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sourceCode.</span><span style="color:#B392F0;">getAllComments</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> blockComments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> comments.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(({ type }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Block&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        blockComments.length </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">report</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">          message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;No block comments&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  meta</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    docs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      description</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;禁止块级注释&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      category</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Stylistic Issues&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      recommended</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;"> (context) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> sourceCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">getSourceCode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Program</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> comments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sourceCode.</span><span style="color:#6F42C1;">getAllComments</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> blockComments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> comments.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(({ type }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Block&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        blockComments.length </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">report</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">          message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;No block comments&#39;</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从中我们看出，一条规则就是一个 node 模块，它由 meta 和 create 组成。meta 包含了该条规则的文档描述，相对简单。而 create 接受一个 context 参数，返回一个对象，如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    meta</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        docs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            description</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;禁止块级注释&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            category</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Stylistic Issues&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            recommended</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;"> (context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    meta</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        docs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            description</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;禁止块级注释&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            category</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Stylistic Issues&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            recommended</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;"> (context) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 context 对象上我们可以取得当前执行扫描到的代码，并通过选择器获取当前需要的内容。如上代码，我们获取代码的所有 comments（sourceCode.getAllComments()），如果 blockComments 长度大于 0，则 report No block comments 信息。了解了这些，相信你也能写出 no-alert、no-debugger 的规则内容。</p><p>虽然 ESLint 背后的技术内容比较复杂，但是基于 AST 技术，它已经给开发者提供了较为成熟的 APIs。写一条自己的规则并不是很难，只需要开发者找到相关的 AST 选择器。更多的选择器可以参考：<a href="https://eslint.org/docs/developer-guide/selectors" target="_blank" rel="noreferrer">Selectors - ESLint - Pluggable JavaScript linter</a>，熟练掌握选择器，将是我们开发插件扩展的关键。</p><p>当然，更复杂的场景远不止这么简单，比如，多条规则是如何串联起来生效的？</p><h4 id="多条规则串联生效" tabindex="-1">多条规则串联生效 <a class="header-anchor" href="#多条规则串联生效" aria-label="Permalink to &quot;多条规则串联生效&quot;">​</a></h4><p>事实上，<strong>规则可以从多个源来定义，比如代码的注释当中，或者配置文件当中。</strong></p><p>ESLint 首先收集到所有规则配置源，将所有规则归并之后，进行多重遍历：遍历由源码生成的 AST，将语法节点传入队列当中；之后遍历所有应用规则，采用<strong>事件发布订阅模式</strong> （类似 Webpack Tapable），为所有规则的选择器<strong>添加监听事件</strong>；在触发事件时执行，如果发现有问题，会将 report message 记录下来。最终记录下来的问题信息将会被输出。</p><p>请你再思考，我们的程序中免不了有各种条件语句、循环语句，因此<strong>代码的执行是非顺序的</strong>。相关规则比如：&quot;检测定义但未使用变量&quot;&quot;switch-case 中避免执行多条 case 语句&quot;，这些规则的实现，就涉及 ESLint 更高级的 Code Path Analysis 概念等。ESLint 将 Code Path 抽象为 5 个事件：</p><ul><li><p>onCodePathStart</p></li><li><p>onCodePathEnd</p></li><li><p>onCodePathSegmentStart</p></li><li><p>onCodePathSegmentEnd</p></li><li><p>onCodePathSegmentLoop</p></li></ul><p>利用这 5 个事件，我们可以<strong>更加精确地控制检测范围和粒度</strong> 。更多的 ESLint rule 实现，你可以翻看<a href="https://github.com/eslint/eslint/" target="_blank" rel="noreferrer">源码</a>进行学习，总之根据这 5 种事件，我们可以监测非顺序性代码，其核心原理还是<strong>事件机制</strong>。</p><p>这种优秀的插件扩展机制对于设计一个库，尤其是设计一个规范工具来说，是非常值得借鉴的模式。事实上，Prettier 也会在新的版本中引入插件机制，目前已经在 Beta 版引入，感兴趣的读者可以<a href="https://prettier.io/docs/en/plugins.html#docsNav" target="_blank" rel="noreferrer">尝鲜</a>。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们深入工程化体系的重点细节自动化代码检查，并反过来使用 lucas-scripts 实现了一套智能的代码 Lint 脚本，建议你结合上一讲内容共同学习。</p><p>本讲内容总结如下：</p>`,77),y=s("p",null,"在规范化的道路上，只有你想不到，没有你做不到。简单的规范化工具用起来非常清爽，但是背后的实现却蕴含了很深的设计与技术细节，值得我们深入学习。同时，作为前端工程师，我们应该从平时开发的痛点和效率瓶颈入手，敢于尝试，不断探索。保证团队开发的自动化程度，就能减少不必要的麻烦。",-1),i=s("p",null,'在工程化基建当中，除了项目管理和规范相对"偏硬"的强制规范手段；一些"软方向"，比如团队氛围、code review 等，也直接决定着团队的代码质量。进阶的工程师不仅需要在技术上成长，在团队建设上更需要主动交流。下一讲我们换一个方向，深入一个更具体的方案------前端+移动端离线包设计，请继续学习！',-1);function F(u,d,g,h,q,m){const n=l("Image");return p(),o("div",null,[E,e(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/0A/AA/CioPOWA3hxWAW7B4AAJMTIIarOQ990.png"}),t(),y,i])}const D=a(r,[["render",F]]);export{C as __pageData,D as default};
