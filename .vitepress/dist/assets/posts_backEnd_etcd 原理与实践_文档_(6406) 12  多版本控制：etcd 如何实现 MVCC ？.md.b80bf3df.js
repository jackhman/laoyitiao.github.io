import{_ as o,j as l,o as e,g as t,k as n,h as p,Q as a,s as c}from"./chunks/framework.4e7d56ce.js";const _=JSON.parse('{"title":"什么是 MVCC？ ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6406) 12  多版本控制：etcd 如何实现 MVCC ？.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6406) 12  多版本控制：etcd 如何实现 MVCC ？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/etcd 原理与实践_文档/(6406) 12  多版本控制：etcd 如何实现 MVCC ？.md"},y=a(`<p>上一讲我们介绍了 etcd-raft 模块实现分布式一致性的原理。今天我们继续介绍 etcd 的另一个重要特性------MVCC，即多版本控制。</p><p>etcd v2 版本存在<strong>丢弃历史版本数据</strong>的问题，仅保留最新版本的数据。但是这样做引起了一系列问题，比如 watch 机制依赖历史版本数据实现相应功能，因此 etcd v2 又采取了在内存中建立滑动窗口来维护部分历史变更数据的做法，然而在大型的业务场景下还是不足以支撑大量历史变更数据的维护。到了 etcd v3 版本，该功能得到了更新，etcd v3 支持 MVCC，可以保存一个键值对的多个历史版本。</p><p>MVCC 模块是 etcd 的核心模块。MVCC 作为底层模块，为上层提供统一的调用方法。这一讲我们将会重点介绍 etcd 多版本控制的实现。</p><h3 id="什么是-mvcc" tabindex="-1">什么是 MVCC？ <a class="header-anchor" href="#什么是-mvcc" aria-label="Permalink to &quot;什么是 MVCC？&quot;">​</a></h3><p>MVCC（Multi-Version Concurrency Control），即多版本并发控制，它是一种并发控制的方法，可以实现对数据库的并发访问。</p><p>数据库并发场景有三种，分别为读-读、读-写和写-写。第一种读-读没有问题，不需要并发控制；读-写和写-写都存在<strong>线程安全问题</strong>。读-写可能遇到脏读、幻读、不可重复读的问题；写-写可能会存在更新丢失问题。</p><p>并发控制机制用作对并发操作进行正确调度，保证事务的隔离性、数据库的一致性。可能你对并发控制并不陌生，它的主要技术包括悲观锁和乐观锁等。我们简单看一下这两种技术：</p><ul><li><p>悲观锁是一种排它锁，事务在操作数据时把这部分数据锁定，直到操作完毕后再解锁，这种方式容易造成系统吞吐量和性能方面的损失；</p></li><li><p>乐观锁在提交操作时检查是否违反数据完整性，大多数基于版本（Version）机制实现，<strong>MVCC 就是一种乐观锁</strong>。</p></li></ul><p>而在 MySQL 中，快照读实现了 MVCC 的非阻塞读功能。其为事务分配单向增长的时间戳，每次修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照。</p><p>MVCC 在数据库中的实现主要是为了<strong>提高数据库并发性能</strong>，用更好的方式去处理读写冲突，做到即使有读写冲突时，也不用加锁，实现非阻塞并发读。同时还可以解决脏读、幻读、不可重复读等事务隔离问题，但它也存在一个缺点，就是不能解决更新丢失问题。</p><h3 id="etcd-mvcc-的实现" tabindex="-1">etcd MVCC 的实现 <a class="header-anchor" href="#etcd-mvcc-的实现" aria-label="Permalink to &quot;etcd MVCC 的实现&quot;">​</a></h3><p>现在，相信你已经初步了解了 MVCC 的概念，接下来我们具体学习 etcd MVCC 的实现。</p><p><strong>MVCC 模块主要由 BoltDB 和 treeIndex 两部分组成</strong>。MVCC 底层基于 Backend 模块实现键值对存储，Backend 在设计上支持多种存储的实现，目前的具体实现为 BoltDB，BoltDB 是一个基于 B+ 树的 KV 存储数据库；treeIndex 模块基于内存版 BTree 实现键的索引管理，它是基于 Google 开源项目 Btree 实现的一个索引模块，保存了每一个 key 与对应的版本号（Revision）的映射关系等信息。</p><p>与其他的 KV 存储组件使用存放数据的键作为 key 不同，<strong>etcd 存储以数据的 Revision 作为 key</strong>，键值、创建时的版本号、最后修改的版本号等作为 value 保存到数据库。etcd 对于每一个键值对都维护了一个全局的 Revision 版本号，键值对的每一次变化都会被记录。获取某一个 key 对应的值时，需要先获取该 key 对应的 Revision，再通过它找到对应的值。</p><p>etcd 管理和存储一个 key 的多个版本与 treeIndex 模块中的结构体定义有关，下面我们具体来看。</p><p>我们通过下面这样的一个操作过程，来理解 etcd MVCC 产生的作用：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl put hello aoho</span></span>
<span class="line"><span style="color:#E1E4E8;">OK</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl get hello </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">w</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;header&quot;</span><span style="color:#E1E4E8;">:{</span><span style="color:#9ECBFF;">&quot;cluster_id&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">14841639068965178418</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;member_id&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">10276657743932975437</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;revision&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;raft_term&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">},</span><span style="color:#9ECBFF;">&quot;kvs&quot;</span><span style="color:#E1E4E8;">:[{</span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;aGVsbG8=&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;create_revision&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;mod_revision&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;YW9obw==&quot;</span><span style="color:#E1E4E8;">}],</span><span style="color:#9ECBFF;">&quot;count&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl put hello boho</span></span>
<span class="line"><span style="color:#E1E4E8;">OK</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl get hello</span></span>
<span class="line"><span style="color:#E1E4E8;">hello</span></span>
<span class="line"><span style="color:#E1E4E8;">boho</span></span>
<span class="line"><span style="color:#E1E4E8;">$ etcdctl get hello </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rev</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">hello</span></span>
<span class="line"><span style="color:#E1E4E8;">aoho</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl put hello aoho</span></span>
<span class="line"><span style="color:#24292E;">OK</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl get hello </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">w</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;header&quot;</span><span style="color:#24292E;">:{</span><span style="color:#032F62;">&quot;cluster_id&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">14841639068965178418</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;member_id&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">10276657743932975437</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;revision&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;raft_term&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">},</span><span style="color:#032F62;">&quot;kvs&quot;</span><span style="color:#24292E;">:[{</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;aGVsbG8=&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;create_revision&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;mod_revision&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;YW9obw==&quot;</span><span style="color:#24292E;">}],</span><span style="color:#032F62;">&quot;count&quot;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl put hello boho</span></span>
<span class="line"><span style="color:#24292E;">OK</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl get hello</span></span>
<span class="line"><span style="color:#24292E;">hello</span></span>
<span class="line"><span style="color:#24292E;">boho</span></span>
<span class="line"><span style="color:#24292E;">$ etcdctl get hello </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rev</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">hello</span></span>
<span class="line"><span style="color:#24292E;">aoho</span></span></code></pre></div><p>我来解释一下上面几条命令操作的过程：</p><ul><li><p>首先是写入一条命令；</p></li><li><p>写入成功后读取<code>hello</code>对应的值，命令中加上<code>-w=json</code>指定输出的格式为 json，可以看到更加详细的信息；</p></li><li><p>接着更新 hello 对应的值为<code>boho</code>；</p></li><li><p>更新成功之后，读取<code>hello</code>对应的值，可以看到原有的值<code>aoho</code>已经变成了我们更新之后的值了，符合预期；</p></li><li><p>最后一条命令用来读取指定版本的键值对，我们在第二条命令查询时获取了先前更新的版本号为 3，因此在查询命令中指定<code>--rev=3</code>，可以看到结果返回了版本 3 对应的值<code>aoho</code>。</p></li></ul><p>如上的操作过程，其实就是 MVCC 的一个简单的应用，下面我们将具体介绍多版本控制的实现。</p><h3 id="mvcc-写过程解析" tabindex="-1">MVCC 写过程解析 <a class="header-anchor" href="#mvcc-写过程解析" aria-label="Permalink to &quot;MVCC 写过程解析&quot;">​</a></h3><p>首先我们结合之前写请求实现流程图的内容分析 MVCC 写请求的过程：</p>`,22),E=a(`<p>写请求实现流程图</p><p>上图为写请求的过程，写请求在底层统一调用 put 方法。treeIndex 中根据查询的 key 从 B-tree 查找得到的是一个 keyIndex 对象，里面包含了 Revision 等全局版本号信息。</p><p>keyIndex 结构体定义如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:70</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyIndex</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	key         []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// key 名称</span></span>
<span class="line"><span style="color:#E1E4E8;">	modified    revision </span><span style="color:#6A737D;">// 最后一次修改的 etcd 版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">	generations []generation </span><span style="color:#6A737D;">// 保存了 key 多次修改的版本号信息</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:70</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyIndex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	key         []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// key 名称</span></span>
<span class="line"><span style="color:#24292E;">	modified    revision </span><span style="color:#6A737D;">// 最后一次修改的 etcd 版本号</span></span>
<span class="line"><span style="color:#24292E;">	generations []generation </span><span style="color:#6A737D;">// 保存了 key 多次修改的版本号信息</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>keyIndex 中保存了 key、modified 和 generations。</p><p>其中 generations 的结构体定义如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:335</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ver     </span><span style="color:#F97583;">int64</span></span>
<span class="line"><span style="color:#E1E4E8;">	created revision </span><span style="color:#6A737D;">// generation 创建时的版本</span></span>
<span class="line"><span style="color:#E1E4E8;">	revs    []revision</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:335</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generation</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	ver     </span><span style="color:#D73A49;">int64</span></span>
<span class="line"><span style="color:#24292E;">	created revision </span><span style="color:#6A737D;">// generation 创建时的版本</span></span>
<span class="line"><span style="color:#24292E;">	revs    []revision</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>generation 中的 ver 表示当前 generation 包含的修改次数，created 记录创建 generation 时的 Revision 版本，最后的 revs 用于存储所有的版本信息。</p><p>Revision 结构体的定义如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/revision.go:26</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">revision</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 事务发生时自动生成的主版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">	main </span><span style="color:#F97583;">int64</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 事务内的子版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">	sub </span><span style="color:#F97583;">int64</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/revision.go:26</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">revision</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 事务发生时自动生成的主版本号</span></span>
<span class="line"><span style="color:#24292E;">	main </span><span style="color:#D73A49;">int64</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 事务内的子版本号</span></span>
<span class="line"><span style="color:#24292E;">	sub </span><span style="color:#D73A49;">int64</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Revision 中定义了一个全局递增的主版本号<code>main</code>，发生 put、txn、del 操作会递增，一个事务内的 main 版本号是唯一的；事务内的子版本号定义为<code>sub</code>，事务发生 put 和 del 操作时，从 0 开始递增。</p>`,11),i=a(`<p>keyIndex、generation 和 revision 之间的关系</p><p>由于是第一次写，treeIndex 查询为空。etcd 会根据当前的全局版本号加 1（集群初始化从 1 开始），根据执行的结果，我们这里全局版本号在写之前为 2，自增之后变成 3。因此操作对应的版本号 revision {3,0}，对应写入 BoltDB 的 key。写入的 value 对应 mvccpb.KeyValue 结构体，其由 key、value、create_revision、mod_revision、version、lease 等字段组成，定义如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KeyValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 键</span></span>
<span class="line"><span style="color:#E1E4E8;">	Key []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`protobuf:&quot;bytes,1,opt,name=key,proto3&quot; json:&quot;key,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 创建时的版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">	CreateRevision </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`protobuf:&quot;varint,2,opt,name=create_revision,json=createRevision,proto3&quot; json:&quot;create_revision,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 最后一次修改的版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">	ModRevision </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`protobuf:&quot;varint,3,opt,name=mod_revision,json=modRevision,proto3&quot; json:&quot;mod_revision,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 表示 key 的修改次数，删除 key 会重置为 0，key 的更新会导致 version 增加</span></span>
<span class="line"><span style="color:#E1E4E8;">	Version </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`protobuf:&quot;varint,4,opt,name=version,proto3&quot; json:&quot;version,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 值</span></span>
<span class="line"><span style="color:#E1E4E8;">	Value []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`protobuf:&quot;bytes,5,opt,name=value,proto3&quot; json:&quot;value,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 键值对绑定的租约 LeaseId，0 表示未绑定</span></span>
<span class="line"><span style="color:#E1E4E8;">	Lease </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`protobuf:&quot;varint,6,opt,name=lease,proto3&quot; json:&quot;lease,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KeyValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 键</span></span>
<span class="line"><span style="color:#24292E;">	Key []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`protobuf:&quot;bytes,1,opt,name=key,proto3&quot; json:&quot;key,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 创建时的版本号</span></span>
<span class="line"><span style="color:#24292E;">	CreateRevision </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`protobuf:&quot;varint,2,opt,name=create_revision,json=createRevision,proto3&quot; json:&quot;create_revision,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 最后一次修改的版本号</span></span>
<span class="line"><span style="color:#24292E;">	ModRevision </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`protobuf:&quot;varint,3,opt,name=mod_revision,json=modRevision,proto3&quot; json:&quot;mod_revision,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 表示 key 的修改次数，删除 key 会重置为 0，key 的更新会导致 version 增加</span></span>
<span class="line"><span style="color:#24292E;">	Version </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`protobuf:&quot;varint,4,opt,name=version,proto3&quot; json:&quot;version,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 值</span></span>
<span class="line"><span style="color:#24292E;">	Value []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`protobuf:&quot;bytes,5,opt,name=value,proto3&quot; json:&quot;value,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 键值对绑定的租约 LeaseId，0 表示未绑定</span></span>
<span class="line"><span style="color:#24292E;">	Lease </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`protobuf:&quot;varint,6,opt,name=lease,proto3&quot; json:&quot;lease,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>构造好 key 和 value 之后，就可以写入 BoltDB 了。并同步更新 buffer。</p>`,4),d=a(`<p>此外还需将本次修改的版本号与用户 key 的映射关系保存到 treeIndex 模块中，key hello 的 keyIndex。对照着上面介绍的 keyIndex、generation 和 Revision 结构体的定义，写入的 keyIndex 记录如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">key:     </span><span style="color:#9ECBFF;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">modified: </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">generations:</span></span>
<span class="line"><span style="color:#E1E4E8;">[{ver:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,created:</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">,revs: [</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">]} ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">key:     </span><span style="color:#032F62;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#24292E;">modified: </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">generations:</span></span>
<span class="line"><span style="color:#24292E;">[{ver:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,created:</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">,revs: [</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">]} ]</span></span></code></pre></div><p>modified 为最后一次修改的 etcd 版本号，这里是 &lt;3,0&gt;。generations 数组有一个元素，首次创建 ver 为 1，created 创建时的版本为 &lt;3,0&gt;，revs 数组中也只有一个元素，存储了所有的版本信息。</p><p>至此，put 事务基本结束，之所以说是基本完场，是因为还差最后一步------写入的数据持久化到磁盘。数据持久化的操作由 Backend 的协程来完成，以此提高写的性能和吞吐量。协程通过事务批量提交，将 BoltDB 内存中的数据持久化存储磁盘中。</p><p>这里我们要提一下键值对的删除。与更新一样，键值对的删除也是<strong>异步</strong>完成，每当一个 key 被删除时都会调用 tombstone 方法向当前的 generation 中追加一个空的 generation 对象，其实现如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:119</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (ki </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">keyIndex) </span><span style="color:#B392F0;">tombstone</span><span style="color:#E1E4E8;">(lg </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">zap.Logger, main </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, sub </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ki.</span><span style="color:#79B8FF;">isEmpty</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		lg.</span><span style="color:#79B8FF;">Panic</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;&#39;tombstone&#39; got an unexpected empty keyIndex&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			zap.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(ki.key)),</span></span>
<span class="line"><span style="color:#E1E4E8;">		)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ki.generations[</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(ki.generations)</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">isEmpty</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ErrRevisionNotFound</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	ki.</span><span style="color:#79B8FF;">put</span><span style="color:#E1E4E8;">(lg, main, sub)</span></span>
<span class="line"><span style="color:#E1E4E8;">	ki.generations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(ki.generations, generation{})</span></span>
<span class="line"><span style="color:#E1E4E8;">	keysGauge.</span><span style="color:#79B8FF;">Dec</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:119</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (ki </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">keyIndex) </span><span style="color:#6F42C1;">tombstone</span><span style="color:#24292E;">(lg </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">zap.Logger, main </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, sub </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ki.</span><span style="color:#005CC5;">isEmpty</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		lg.</span><span style="color:#005CC5;">Panic</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;&#39;tombstone&#39; got an unexpected empty keyIndex&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			zap.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(ki.key)),</span></span>
<span class="line"><span style="color:#24292E;">		)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ki.generations[</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(ki.generations)</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">isEmpty</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ErrRevisionNotFound</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	ki.</span><span style="color:#005CC5;">put</span><span style="color:#24292E;">(lg, main, sub)</span></span>
<span class="line"><span style="color:#24292E;">	ki.generations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(ki.generations, generation{})</span></span>
<span class="line"><span style="color:#24292E;">	keysGauge.</span><span style="color:#005CC5;">Dec</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个空的 generation 标识说明当前的 key 已经被删除了。除此之外，生成的 BoltDB key 版本号中追加了 t（tombstone），如 &lt;3,0,t&gt;，用于标识删除，而对应的 value 变成了只含 key 属性。</p><p>当查询键值对时，treeIndex 模块查找到 key 对应的 keyIndex，若查询的版本号大于等于被删除时的版本号，则会返回空。而真正删除 treeIndex 中的索引对象以及 BoltDB 中的键值对，则由<strong>compactor 组件</strong>完成。</p><h3 id="mvcc-读过程解析" tabindex="-1">MVCC 读过程解析 <a class="header-anchor" href="#mvcc-读过程解析" aria-label="Permalink to &quot;MVCC 读过程解析&quot;">​</a></h3><p>我们继续来看读过程中的 MVCC 实现细节。还是使用讲解键值对查询时的流程图：</p>`,10),u=a(`<p>读请求实现流程图</p><p>读请求在底层统一调用的是 Range 方法，首先 treeIndex 根据查询的 key 从 BTree 查找对应 keyIndex 对象。从 keyIndex 结构体的定义可知，每一个 keyIndex 结构体中都包含当前键的值以及最后一次修改对应的 Revision 信息，其中还保存了一个 key 的多个 generation，每一个 generation 都会存储当前 key 的所有历史版本。</p><p>treeIndex 模块中提供了 Get 接口获取一个 key 对应 Revision 值：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/index.go:68</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (ti </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">treeIndex) </span><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">(key []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, atRev </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) (modified, created revision, ver </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	keyi </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">keyIndex{key: key}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> keyi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ti.</span><span style="color:#79B8FF;">keyIndex</span><span style="color:#E1E4E8;">(keyi); keyi </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> revision{}, revision{}, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, ErrRevisionNotFound</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> keyi.</span><span style="color:#79B8FF;">get</span><span style="color:#E1E4E8;">(ti.lg, atRev)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/index.go:68</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (ti </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">treeIndex) </span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">(key []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, atRev </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) (modified, created revision, ver </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	keyi </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">keyIndex{key: key}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> keyi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ti.</span><span style="color:#005CC5;">keyIndex</span><span style="color:#24292E;">(keyi); keyi </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> revision{}, revision{}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, ErrRevisionNotFound</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> keyi.</span><span style="color:#005CC5;">get</span><span style="color:#24292E;">(ti.lg, atRev)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Get 接口的实现通过 keyIndex 函数查找 key 对应的 keyIndex 结构体：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/index.go:78</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (ti </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">treeIndex) </span><span style="color:#B392F0;">keyIndex</span><span style="color:#E1E4E8;">(keyi </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">keyIndex) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">keyIndex {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ti.tree.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(keyi); item </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> item.(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">keyIndex)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/index.go:78</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (ti </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">treeIndex) </span><span style="color:#6F42C1;">keyIndex</span><span style="color:#24292E;">(keyi </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">keyIndex) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">keyIndex {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ti.tree.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(keyi); item </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> item.(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">keyIndex)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这里的实现非常简单，从 treeIndex 成员 BTree 中查找 keyIndex，将结果转换成 keyIndex 类型后返回；获取 key 对应 Revision 的实现如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:137</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (ki </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">keyIndex) </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(lg </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">zap.Logger, atRev </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) (modified, created revision, ver </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ki.</span><span style="color:#79B8FF;">isEmpty</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		lg.</span><span style="color:#79B8FF;">Panic</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;&#39;get&#39; got an unexpected empty keyIndex&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			zap.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(ki.key)),</span></span>
<span class="line"><span style="color:#E1E4E8;">		)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	g </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ki.</span><span style="color:#79B8FF;">findGeneration</span><span style="color:#E1E4E8;">(atRev)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> g.</span><span style="color:#79B8FF;">isEmpty</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> revision{}, revision{}, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, ErrRevisionNotFound</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	n </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> g.</span><span style="color:#79B8FF;">walk</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(rev revision) </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> rev.main </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> atRev })</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> g.revs[n], g.created, g.ver </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int64</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(g.revs)</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> revision{}, revision{}, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, ErrRevisionNotFound</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 mvcc/key_index.go:137</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (ki </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">keyIndex) </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(lg </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">zap.Logger, atRev </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) (modified, created revision, ver </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ki.</span><span style="color:#005CC5;">isEmpty</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		lg.</span><span style="color:#005CC5;">Panic</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;&#39;get&#39; got an unexpected empty keyIndex&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			zap.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(ki.key)),</span></span>
<span class="line"><span style="color:#24292E;">		)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	g </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ki.</span><span style="color:#005CC5;">findGeneration</span><span style="color:#24292E;">(atRev)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> g.</span><span style="color:#005CC5;">isEmpty</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> revision{}, revision{}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, ErrRevisionNotFound</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	n </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> g.</span><span style="color:#005CC5;">walk</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(rev revision) </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rev.main </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> atRev })</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> g.revs[n], g.created, g.ver </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int64</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(g.revs)</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> revision{}, revision{}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, ErrRevisionNotFound</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述实现中，通过遍历 generations 数组来获取 generation，匹配到有效的 generation 后，返回 generation 的 revisions 数组中最后一个版本号，即 &lt;3,0&gt; 给读事务。</p><p>获取到 Revision 信息之后，读事务接口优先从 buffer 中查询，如果命中则直接返回，否则根据 revision &lt;3,0&gt; 作为 key 在 BoltDB 中查询。</p><p>在查询时如果没有指定版本号，默认读取最新的数据。如果指定了版本号，比如我们在上面发起了一个指定历史版本号为 3 的读请求：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ etcdctl get hello </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rev</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ etcdctl get hello </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rev</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span></span></code></pre></div><p>在 treeIndex 模块获取 key 对应的 keyIndex 时，指定了读版本号为 3 的快照数据。keyIndex 会遍历 generation 内的历史版本号，返回小于等于 3 的最大历史版本号作为 BoltDB 的 key，从中查询对应的 value。</p><p>需要注意的是，<strong>并发读写事务不会阻塞在一个 buffer 资源锁上</strong>。并发读创建事务时，会全量拷贝当前未提交的 buffer 数据，以此实现并发读。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们主要介绍了 etcd 中多版本控制 MVCC 的实现。首先介绍了 MVCC 的概念，多版本并发控制可以维护一个数据的多个历史版本，并且使得读写操作没有冲突。接着通过一个示例介绍了 etcd 中 MVCC 的功能，重点介绍了在读写过程中如何实现多版本控制。键值对的更新和删除都是由异步协程完成的，在保证一致性的同时，也提升了读写的性能以及组件的吞吐量。</p><p>本讲内容总结如下：</p>`,17),F=c("p",null,"学习完这一讲，我想给大家留一个问题：既然是批量提交，那么在提交之前出现宕机等事故时，如何保证这部分数据不会丢失的呢？欢迎你在留言区和我交流自己的见解。下一讲，我们将介绍 etcd 事务的实现原理。",-1);function g(v,C,k,A,m,h){const s=l("Image");return e(),t("div",null,[y,n(s,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M01/12/58/Cgp9HWBAvdGAUB34AAJwukqHZTo156.png"}),p(),E,n(s,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/12/55/CioPOWBAva-AC-L1AANi-MAgn_0530.png"}),p(),i,n(s,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/12/59/CioPOWBAv_aAdaSVAABXITH1r1w095.png"}),d,n(s,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M01/12/58/Cgp9HWBAvXSARvMuAAIh2dCnpU8495.png"}),p(),u,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/10/BE/CioPOWA_CKuAUXIhAAFmNO_GQ6w590.png"}),F])}const q=o(r,[["render",g]]);export{_ as __pageData,q as default};
