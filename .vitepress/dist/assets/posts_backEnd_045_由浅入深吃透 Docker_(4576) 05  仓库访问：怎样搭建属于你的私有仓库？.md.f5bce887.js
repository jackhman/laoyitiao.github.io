import{_ as l,j as p,o as e,g as c,k as n,h as a,s,Q as t}from"./chunks/framework.cfb14fe0.js";const M=JSON.parse('{"title":"05仓库访问：怎样搭建属于你的私有仓库？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/045_由浅入深吃透 Docker/(4576) 05  仓库访问：怎样搭建属于你的私有仓库？.md","filePath":"posts/backEnd/045_由浅入深吃透 Docker/(4576) 05  仓库访问：怎样搭建属于你的私有仓库？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/045_由浅入深吃透 Docker/(4576) 05  仓库访问：怎样搭建属于你的私有仓库？.md"},y=s("h1",{id:"_05仓库访问-怎样搭建属于你的私有仓库",tabindex:"-1"},[a("05仓库访问：怎样搭建属于你的私有仓库？ "),s("a",{class:"header-anchor",href:"#_05仓库访问-怎样搭建属于你的私有仓库","aria-label":'Permalink to "05仓库访问：怎样搭建属于你的私有仓库？"'},"​")],-1),E=s("p",null,'在第三课时"镜像使用：Docker 环境下如何配置你的镜像？"里，我介绍了镜像的基本操作和镜像的原理，那么有了镜像，我们应该如何更好地存储和分发镜像呢？答案就是今天的主角------Docker 的镜像仓库。其实我们不仅可以使用公共镜像仓库存储和分发镜像，也可以自己搭建私有的镜像仓库，那在搭建之前，我们先回顾下仓库的基础知识。',-1),i=s("h3",{id:"仓库是什么",tabindex:"-1"},[a("仓库是什么？ "),s("a",{class:"header-anchor",href:"#仓库是什么","aria-label":'Permalink to "仓库是什么？"'},"​")],-1),d=s("p",null,"仓库（Repository）是存储和分发 Docker 镜像的地方。镜像仓库类似于代码仓库，Docker Hub 的命名来自 GitHub，Github 是我们常用的代码存储和分发的地方。同样 Docker Hub 是用来提供 Docker 镜像存储和分发的地方。",-1),F=s("p",null,"有的同学可能经常分不清注册服务器（Registry）和仓库（Repository）的概念。在这里我可以解释下这两个概念的区别：注册服务器是存放仓库的实际服务器，而仓库则可以被理解为一个具体的项目或者目录；注册服务器可以包含很多个仓库，每个仓库又可以包含多个镜像。例如我的镜像地址为 docker.io/centos，docker.io 是注册服务器，centos 是仓库名。 它们之间的关系如图 1 所示。",-1),b=s("p",null,"按照类型，我们将镜像仓库分为公共镜像仓库和私有镜像仓库。",-1),u=s("h3",{id:"公共镜像仓库",tabindex:"-1"},[a("公共镜像仓库 "),s("a",{class:"header-anchor",href:"#公共镜像仓库","aria-label":'Permalink to "公共镜像仓库"'},"​")],-1),g=s("p",null,"公共镜像仓库一般是 Docker 官方或者其他第三方组织（阿里云，腾讯云，网易云等）提供的，允许所有人注册和使用的镜像仓库。",-1),h=s("p",null,"Docker Hub 是全球最大的镜像市场，目前已经有超过 10w 个容器镜像，这些容器镜像主要来自软件供应商、开源组织和社区。大部分的操作系统镜像和软件镜像都可以直接在 Docker Hub 下载并使用。",-1),C=s("p",null,"图 2 Docker Hub 镜像",-1),k=s("p",null,"下面我以 Docker Hub 为例，教你如何使用公共镜像仓库分发和存储镜像。",-1),B=s("h4",{id:"注册-docker-hub-账号",tabindex:"-1"},[a("注册 Docker Hub 账号 "),s("a",{class:"header-anchor",href:"#注册-docker-hub-账号","aria-label":'Permalink to "注册 Docker Hub 账号"'},"​")],-1),f=s("p",null,[a("我们首先访问"),s("a",{href:"https://hub.docker.com/",target:"_blank",rel:"noreferrer"},"Docker Hub"),a("官网，点击注册按钮进入注册账号界面。")],-1),D=s("p",null,"图 3 注册 Docker Hub 账号",-1),v=s("p",null,"注册完成后，我们可以点击创建仓库，新建一个仓库用于推送镜像。",-1),_=t(`<p>图 4 创建仓库</p><p>这里我的账号为 lagoudocker，创建了一个名称为 busybox 的仓库，创建好仓库后我们就可以推送本地镜像到这个仓库里了。下面我通过一个实例来演示一下如何推送镜像到自己的仓库中。</p><p>首先我们使用以下命令拉取 busybox 镜像：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker pull busybox</span></span>
<span class="line"><span style="color:#E1E4E8;">Using </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">: latest</span></span>
<span class="line"><span style="color:#B392F0;">latest</span><span style="color:#E1E4E8;">: Pulling from library</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox</span></span>
<span class="line"><span style="color:#B392F0;">Digest</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">sha256</span><span style="color:#E1E4E8;">:4f47c01fa91355af2865ac10fef5bf6ec9c7f42ad2321377c21e844427972977</span></span>
<span class="line"><span style="color:#B392F0;">Status</span><span style="color:#E1E4E8;">: Image is up to date for </span><span style="color:#B392F0;">busybox</span><span style="color:#E1E4E8;">:latest</span></span>
<span class="line"><span style="color:#E1E4E8;">docker.io</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">library</span><span style="color:#F97583;">/</span><span style="color:#B392F0;">busybox</span><span style="color:#E1E4E8;">:latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker pull busybox</span></span>
<span class="line"><span style="color:#24292E;">Using </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">: latest</span></span>
<span class="line"><span style="color:#6F42C1;">latest</span><span style="color:#24292E;">: Pulling from library</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox</span></span>
<span class="line"><span style="color:#6F42C1;">Digest</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">sha256</span><span style="color:#24292E;">:4f47c01fa91355af2865ac10fef5bf6ec9c7f42ad2321377c21e844427972977</span></span>
<span class="line"><span style="color:#6F42C1;">Status</span><span style="color:#24292E;">: Image is up to date for </span><span style="color:#6F42C1;">busybox</span><span style="color:#24292E;">:latest</span></span>
<span class="line"><span style="color:#24292E;">docker.io</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">library</span><span style="color:#D73A49;">/</span><span style="color:#6F42C1;">busybox</span><span style="color:#24292E;">:latest</span></span></code></pre></div><p>在推送镜像仓库前，我们需要使用<code>docker login</code>命令先登录一下镜像服务器，因为只有已经登录的用户才可以推送镜像到仓库。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">$ docker login</span></span>
<span class="line"><span style="color:#9ECBFF;">Login with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https://hub.docker.com to create one.</span></span>
<span class="line"><span style="color:#85E89D;">Username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">lagoudocker</span></span>
<span class="line"><span style="color:#85E89D;">Password</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#9ECBFF;">Login Succeeded</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">$ docker login</span></span>
<span class="line"><span style="color:#032F62;">Login with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https://hub.docker.com to create one.</span></span>
<span class="line"><span style="color:#22863A;">Username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">lagoudocker</span></span>
<span class="line"><span style="color:#22863A;">Password</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#032F62;">Login Succeeded</span></span></code></pre></div><p>使用<code>docker login</code>命令登录镜像服务器，这时 Docker 会要求我们输入用户名和密码，输入我们刚才注册的账号和密码，看到<code>Login Succeeded</code>表示登录成功。登录成功后就可以推送镜像到自己创建的仓库了。</p><blockquote><p><code>docker login</code>命令默认会请求 Docker Hub，如果你想登录第三方镜像仓库或者自建的镜像仓库，在<code>docker login</code>后面加上注册服务器即可。例如我们想登录访问阿里云镜像服务器，则使用<code>docker login registry.cn-beijing.aliyuncs.com</code>，输入阿里云镜像服务的用户名密码即可。</p></blockquote><p>在本地镜像推送到自定义仓库前，我们需要先把镜像&quot;重命名&quot;一下，才能正确推送到自己创建的镜像仓库中，使用<code>docker tag</code>命令将镜像&quot;重命名&quot;：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tag</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">busybox</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lagoudocker/busybox</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tag</span><span style="color:#24292E;"> </span><span style="color:#032F62;">busybox</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lagoudocker/busybox</span></span></code></pre></div><p>镜像&quot;重命名&quot;后使用<code>docker push</code>命令就可以推送镜像到自己创建的仓库中了。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker push lagoudocker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox</span></span>
<span class="line"><span style="color:#E1E4E8;">The push refers to repository [docker.io</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lagoudocker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox]</span></span>
<span class="line"><span style="color:#E1E4E8;">514</span><span style="color:#B392F0;">c3a3e64d4</span><span style="color:#E1E4E8;">: Mounted from library</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox</span></span>
<span class="line"><span style="color:#B392F0;">latest</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">sha256</span><span style="color:#E1E4E8;">:400ee2ed939df769d4681023810d2e4fb9479b8401d97003c710d0e20f7c49c6 </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">527</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker push lagoudocker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox</span></span>
<span class="line"><span style="color:#24292E;">The push refers to repository [docker.io</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lagoudocker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox]</span></span>
<span class="line"><span style="color:#24292E;">514</span><span style="color:#6F42C1;">c3a3e64d4</span><span style="color:#24292E;">: Mounted from library</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox</span></span>
<span class="line"><span style="color:#6F42C1;">latest</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">sha256</span><span style="color:#24292E;">:400ee2ed939df769d4681023810d2e4fb9479b8401d97003c710d0e20f7c49c6 </span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">527</span></span></code></pre></div><p>此时，<code>busybox</code>这个镜像就被推送到自定义的镜像仓库了。这里我们也可以新建其他的镜像仓库，然后把自己构建的镜像推送到仓库中。</p><p>有时候，出于安全或保密的需求，你可能想要搭建一个自己的镜像仓库，下面我带你一步一步构建一个私有的镜像仓库。</p><h3 id="搭建私有仓库" tabindex="-1">搭建私有仓库 <a class="header-anchor" href="#搭建私有仓库" aria-label="Permalink to &quot;搭建私有仓库&quot;">​</a></h3><h4 id="启动本地仓库" tabindex="-1">启动本地仓库 <a class="header-anchor" href="#启动本地仓库" aria-label="Permalink to &quot;启动本地仓库&quot;">​</a></h4><p>Docker 官方提供了开源的镜像仓库 <a href="https://github.com/docker/distribution" target="_blank" rel="noreferrer">Distribution</a>，并且镜像存放在 Docker Hub 的 <a href="https://hub.docker.com/_/registry" target="_blank" rel="noreferrer">Registry</a> 仓库下供我们下载。</p><p>我们可以使用以下命令启动一个本地镜像仓库：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">name registry </span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2.7</span></span>
<span class="line"><span style="color:#E1E4E8;">Unable to find image </span><span style="color:#9ECBFF;">&#39;registry:2.7&#39;</span><span style="color:#E1E4E8;"> locally</span></span>
<span class="line"><span style="color:#79B8FF;">2.7</span><span style="color:#E1E4E8;">: Pulling from library</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">registry</span></span>
<span class="line"><span style="color:#B392F0;">cbdbe7a5bc2a</span><span style="color:#E1E4E8;">: Pull complete</span></span>
<span class="line"><span style="color:#E1E4E8;">47112</span><span style="color:#B392F0;">e65547d</span><span style="color:#E1E4E8;">: Pull complete</span></span>
<span class="line"><span style="color:#E1E4E8;">46</span><span style="color:#B392F0;">bcb632e506</span><span style="color:#E1E4E8;">: Pull complete</span></span>
<span class="line"><span style="color:#B392F0;">c1cc712bcecd</span><span style="color:#E1E4E8;">: Pull complete</span></span>
<span class="line"><span style="color:#E1E4E8;">3</span><span style="color:#B392F0;">db6272dcbfa</span><span style="color:#E1E4E8;">: Pull complete</span></span>
<span class="line"><span style="color:#B392F0;">Digest</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">sha256</span><span style="color:#E1E4E8;">:8be26f81ffea54106bae012c6f349df70f4d5e7e2ec01b143c46e2c03b9e551d</span></span>
<span class="line"><span style="color:#B392F0;">Status</span><span style="color:#E1E4E8;">: Downloaded newer image for </span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2.7</span></span>
<span class="line"><span style="color:#E1E4E8;">d7e449a8a93e71c9a7d99c67470bd7e7a723eee5ae97b3f7a2a8a1cf25982cc3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">name registry </span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2.7</span></span>
<span class="line"><span style="color:#24292E;">Unable to find image </span><span style="color:#032F62;">&#39;registry:2.7&#39;</span><span style="color:#24292E;"> locally</span></span>
<span class="line"><span style="color:#005CC5;">2.7</span><span style="color:#24292E;">: Pulling from library</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">registry</span></span>
<span class="line"><span style="color:#6F42C1;">cbdbe7a5bc2a</span><span style="color:#24292E;">: Pull complete</span></span>
<span class="line"><span style="color:#24292E;">47112</span><span style="color:#6F42C1;">e65547d</span><span style="color:#24292E;">: Pull complete</span></span>
<span class="line"><span style="color:#24292E;">46</span><span style="color:#6F42C1;">bcb632e506</span><span style="color:#24292E;">: Pull complete</span></span>
<span class="line"><span style="color:#6F42C1;">c1cc712bcecd</span><span style="color:#24292E;">: Pull complete</span></span>
<span class="line"><span style="color:#24292E;">3</span><span style="color:#6F42C1;">db6272dcbfa</span><span style="color:#24292E;">: Pull complete</span></span>
<span class="line"><span style="color:#6F42C1;">Digest</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">sha256</span><span style="color:#24292E;">:8be26f81ffea54106bae012c6f349df70f4d5e7e2ec01b143c46e2c03b9e551d</span></span>
<span class="line"><span style="color:#6F42C1;">Status</span><span style="color:#24292E;">: Downloaded newer image for </span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2.7</span></span>
<span class="line"><span style="color:#24292E;">d7e449a8a93e71c9a7d99c67470bd7e7a723eee5ae97b3f7a2a8a1cf25982cc3</span></span></code></pre></div><p>使用<code>docker ps</code>命令查看一下刚才启动的容器：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker ps</span></span>
<span class="line"><span style="color:#79B8FF;">CONTAINER</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ID</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">IMAGE</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">COMMAND</span><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">CREATED</span><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">STATUS</span><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">PORTS</span><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">NAMES</span></span>
<span class="line"><span style="color:#E1E4E8;">d7e449a8a93e        </span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2.7</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;/entrypoint.sh /etc...&quot;</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> seconds ago      Up </span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;"> seconds       </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">-&gt;</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">tcp   registry</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker ps</span></span>
<span class="line"><span style="color:#005CC5;">CONTAINER</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ID</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">IMAGE</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">COMMAND</span><span style="color:#24292E;">                  </span><span style="color:#005CC5;">CREATED</span><span style="color:#24292E;">             </span><span style="color:#005CC5;">STATUS</span><span style="color:#24292E;">              </span><span style="color:#005CC5;">PORTS</span><span style="color:#24292E;">                    </span><span style="color:#005CC5;">NAMES</span></span>
<span class="line"><span style="color:#24292E;">d7e449a8a93e        </span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2.7</span><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;/entrypoint.sh /etc...&quot;</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> seconds ago      Up </span><span style="color:#005CC5;">49</span><span style="color:#24292E;"> seconds       </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tcp   registry</span></span></code></pre></div><p>此时我们就拥有了一个私有镜像仓库，访问地址为<code>localhost</code>，端口号为 5000。</p><h4 id="推送镜像到本地仓库" tabindex="-1">推送镜像到本地仓库 <a class="header-anchor" href="#推送镜像到本地仓库" aria-label="Permalink to &quot;推送镜像到本地仓库&quot;">​</a></h4><p>我们依旧使用 busybox 镜像举例。首先我们使用<code>docker tag</code>命令把 busybox 镜像&quot;重命名&quot;为<code>localhost:5000/busybox</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker tag busybox </span><span style="color:#B392F0;">localhost</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker tag busybox </span><span style="color:#6F42C1;">localhost</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox</span></span></code></pre></div><p>此时 Docker 为<code>busybox</code>镜像创建了一个别名<code>localhost:5000/busybox</code>，<code>localhost:5000</code>为主机名和端口，Docker 将会把镜像推送到这个地址。</p><p>使用<code>docker push</code>推送镜像到本地仓库：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker push </span><span style="color:#B392F0;">localhost</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox</span></span>
<span class="line"><span style="color:#E1E4E8;">The push refers to repository [localhost:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox]</span></span>
<span class="line"><span style="color:#E1E4E8;">514</span><span style="color:#B392F0;">c3a3e64d4</span><span style="color:#E1E4E8;">: Layer already exists</span></span>
<span class="line"><span style="color:#B392F0;">latest</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">sha256</span><span style="color:#E1E4E8;">:400ee2ed939df769d4681023810d2e4fb9479b8401d97003c710d0e20f7c49c6 </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">527</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker push </span><span style="color:#6F42C1;">localhost</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox</span></span>
<span class="line"><span style="color:#24292E;">The push refers to repository [localhost:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox]</span></span>
<span class="line"><span style="color:#24292E;">514</span><span style="color:#6F42C1;">c3a3e64d4</span><span style="color:#24292E;">: Layer already exists</span></span>
<span class="line"><span style="color:#6F42C1;">latest</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">sha256</span><span style="color:#24292E;">:400ee2ed939df769d4681023810d2e4fb9479b8401d97003c710d0e20f7c49c6 </span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">527</span></span></code></pre></div><p>这里可以看到，我们已经可以把<code>busybox</code>推送到了本地镜像仓库。</p><p>此时，我们验证一下从本地镜像仓库拉取镜像。首先，我们删除本地的<code>busybox</code>和<code>localhost:5000/busybox</code>镜像。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker rmi busybox </span><span style="color:#B392F0;">localhost</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox</span></span>
<span class="line"><span style="color:#B392F0;">Untagged</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">busybox</span><span style="color:#E1E4E8;">:latest</span></span>
<span class="line"><span style="color:#B392F0;">Untagged</span><span style="color:#E1E4E8;">: busybox@</span><span style="color:#B392F0;">sha256</span><span style="color:#E1E4E8;">:4f47c01fa91355af2865ac10fef5bf6ec9c7f42ad2321377c21e844427972977</span></span>
<span class="line"><span style="color:#B392F0;">Untagged</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">localhost</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#B392F0;">busybox</span><span style="color:#E1E4E8;">:latest</span></span>
<span class="line"><span style="color:#B392F0;">Untagged</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">localhost</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox@</span><span style="color:#B392F0;">sha256</span><span style="color:#E1E4E8;">:400ee2ed939df769d4681023810d2e4fb9479b8401d97003c710d0e20f7c49c6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker rmi busybox </span><span style="color:#6F42C1;">localhost</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox</span></span>
<span class="line"><span style="color:#6F42C1;">Untagged</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">busybox</span><span style="color:#24292E;">:latest</span></span>
<span class="line"><span style="color:#6F42C1;">Untagged</span><span style="color:#24292E;">: busybox@</span><span style="color:#6F42C1;">sha256</span><span style="color:#24292E;">:4f47c01fa91355af2865ac10fef5bf6ec9c7f42ad2321377c21e844427972977</span></span>
<span class="line"><span style="color:#6F42C1;">Untagged</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">localhost</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#6F42C1;">busybox</span><span style="color:#24292E;">:latest</span></span>
<span class="line"><span style="color:#6F42C1;">Untagged</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">localhost</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox@</span><span style="color:#6F42C1;">sha256</span><span style="color:#24292E;">:400ee2ed939df769d4681023810d2e4fb9479b8401d97003c710d0e20f7c49c6</span></span></code></pre></div><p>查看一下本地<code>busybox</code>镜像：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">image</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">busybox</span></span>
<span class="line"><span style="color:#B392F0;">REPOSITORY</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">TAG</span><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">IMAGE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ID</span><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">CREATED</span><span style="color:#E1E4E8;">             </span><span style="color:#9ECBFF;">SIZE</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#032F62;">busybox</span></span>
<span class="line"><span style="color:#6F42C1;">REPOSITORY</span><span style="color:#24292E;">          </span><span style="color:#032F62;">TAG</span><span style="color:#24292E;">                 </span><span style="color:#032F62;">IMAGE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ID</span><span style="color:#24292E;">            </span><span style="color:#032F62;">CREATED</span><span style="color:#24292E;">             </span><span style="color:#032F62;">SIZE</span></span></code></pre></div><p>可以看到此时本地已经没有<code>busybox</code>这个镜像了。下面，我们从本地镜像仓库拉取<code>busybox</code>镜像：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker pull </span><span style="color:#B392F0;">localhost</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">busybox</span></span>
<span class="line"><span style="color:#E1E4E8;">Using </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">: latest</span></span>
<span class="line"><span style="color:#B392F0;">latest</span><span style="color:#E1E4E8;">: Pulling from busybox</span></span>
<span class="line"><span style="color:#B392F0;">Digest</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">sha256</span><span style="color:#E1E4E8;">:400ee2ed939df769d4681023810d2e4fb9479b8401d97003c710d0e20f7c49c6</span></span>
<span class="line"><span style="color:#B392F0;">Status</span><span style="color:#E1E4E8;">: Downloaded newer image for </span><span style="color:#B392F0;">localhost</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#B392F0;">busybox</span><span style="color:#E1E4E8;">:latest</span></span>
<span class="line"><span style="color:#B392F0;">localhost</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">/</span><span style="color:#B392F0;">busybox</span><span style="color:#E1E4E8;">:latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker pull </span><span style="color:#6F42C1;">localhost</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">busybox</span></span>
<span class="line"><span style="color:#24292E;">Using </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">: latest</span></span>
<span class="line"><span style="color:#6F42C1;">latest</span><span style="color:#24292E;">: Pulling from busybox</span></span>
<span class="line"><span style="color:#6F42C1;">Digest</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">sha256</span><span style="color:#24292E;">:400ee2ed939df769d4681023810d2e4fb9479b8401d97003c710d0e20f7c49c6</span></span>
<span class="line"><span style="color:#6F42C1;">Status</span><span style="color:#24292E;">: Downloaded newer image for </span><span style="color:#6F42C1;">localhost</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#6F42C1;">busybox</span><span style="color:#24292E;">:latest</span></span>
<span class="line"><span style="color:#6F42C1;">localhost</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">/</span><span style="color:#6F42C1;">busybox</span><span style="color:#24292E;">:latest</span></span></code></pre></div><p>然后再使用<code>docker image ls busybox</code>命令，这时可以看到我们已经成功从私有镜像仓库拉取<code>busybox</code>镜像到本地了</p><h4 id="持久化镜像存储" tabindex="-1">持久化镜像存储 <a class="header-anchor" href="#持久化镜像存储" aria-label="Permalink to &quot;持久化镜像存储&quot;">​</a></h4><p>我们知道，容器是无状态的。上面私有仓库的启动方式可能会导致镜像丢失，因为我们并没有把仓库的数据信息持久化到主机磁盘上，这在生产环境中是无法接受的。下面我们使用以下命令将镜像持久化到主机目录：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v </span><span style="color:#F97583;">/var</span><span style="color:#E1E4E8;">/lib/registry/data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">/</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;">/</span><span style="color:#B392F0;">lib</span><span style="color:#E1E4E8;">/</span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;"> -</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;"> -</span><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5000</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;"> --</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registry</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2.7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v </span><span style="color:#D73A49;">/var</span><span style="color:#24292E;">/lib/registry/data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">/</span><span style="color:#6F42C1;">var</span><span style="color:#24292E;">/</span><span style="color:#6F42C1;">lib</span><span style="color:#24292E;">/</span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;"> -</span><span style="color:#6F42C1;">d</span><span style="color:#24292E;"> -</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">5000</span><span style="color:#24292E;"> --</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registry</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2.7</span></span></code></pre></div><p>我们在上面启动<code>registry</code>的命令中加入了<code>-v /var/lib/registry/data:/var/lib/registry</code>，<code>-v</code>的含义是把 Docker 容器的某个目录或文件挂载到主机上，保证容器被重建后数据不丢失。<code>-v</code>参数冒号前面为主机目录，冒号后面为容器内目录。</p><blockquote><p>事实上，registry 的持久化存储除了支持本地文件系统还支持很多种类型，例如 S3、Google Cloud Platform、Microsoft Azure Blob Storage Service 等多种存储类型。</p></blockquote><p>到这里我们的镜像仓库虽然可以本地访问和拉取，但是如果你在另外一台机器上是无法通过 Docker 访问到这个镜像仓库的，因为 Docker 要求非<code>localhost</code>访问的镜像仓库必须使用 HTTPS，这时候就需要构建外部可访问的镜像仓库。</p><h4 id="构建外部可访问的镜像仓库" tabindex="-1">构建外部可访问的镜像仓库 <a class="header-anchor" href="#构建外部可访问的镜像仓库" aria-label="Permalink to &quot;构建外部可访问的镜像仓库&quot;">​</a></h4><p>要构建一个支持 HTTPS 访问的安全镜像仓库，需要满足以下两个条件：</p><ul><li><p>拥有一个合法的域名，并且可以正确解析到镜像服务器；</p></li><li><p>从证书颁发机构（CA）获取一个证书。</p></li></ul><p>在准备好域名和证书后，就可以部署我们的镜像服务器了。这里我以<code>regisry.lagoudocker.io</code>这个域名为例。首先准备存放证书的目录<code>/var/lib/registry/certs</code>，然后把申请到的证书私钥和公钥分别放到该目录下。 假设我们申请到的证书文件分别为<code>regisry.lagoudocker.io.crt</code>和<code>regisry.lagoudocker.io.key</code>。</p><p>如果上一步启动的仓库容器还在运行，我们需要先停止并删除它。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">registry</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">registry</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">registry</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">registry</span></span></code></pre></div><p>然后使用以下命令启动新的镜像仓库：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ docker run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">name registry \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v </span><span style="color:#9ECBFF;">&quot;/var/lib/registry/data:/var/lib/registry </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#9ECBFF;">  -v &quot;</span><span style="color:#F97583;">/var</span><span style="color:#E1E4E8;">/lib/registry/certs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">/</span><span style="color:#B392F0;">certs</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e </span><span style="color:#79B8FF;">REGISTRY_HTTP_ADDR</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">443</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e </span><span style="color:#79B8FF;">REGISTRY_HTTP_TLS_CERTIFICATE</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">certs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">regisry.lagoudocker.io.crt \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e </span><span style="color:#79B8FF;">REGISTRY_HTTP_TLS_KEY</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">certs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">regisry.lagoudocker.io.key \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p </span><span style="color:#79B8FF;">443</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">443</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">registry</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2.7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ docker run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">name registry \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v </span><span style="color:#032F62;">&quot;/var/lib/registry/data:/var/lib/registry </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#032F62;">  -v &quot;</span><span style="color:#D73A49;">/var</span><span style="color:#24292E;">/lib/registry/certs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">/</span><span style="color:#6F42C1;">certs</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e </span><span style="color:#005CC5;">REGISTRY_HTTP_ADDR</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">443</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e </span><span style="color:#005CC5;">REGISTRY_HTTP_TLS_CERTIFICATE</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">certs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">regisry.lagoudocker.io.crt \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e </span><span style="color:#005CC5;">REGISTRY_HTTP_TLS_KEY</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">certs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">regisry.lagoudocker.io.key \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p </span><span style="color:#005CC5;">443</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">443</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">registry</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2.7</span></span></code></pre></div><p>这里，我们使用 -v 参数把镜像数据持久化在<code>/var/lib/registry/data</code>目录中，同时把主机上的证书文件挂载到了容器的 /certs 目录下，同时通过 -e 参数设置 HTTPS 相关的环境变量参数，最后让仓库在主机上监听 443 端口。</p><p>仓库启动后，我们就可以远程推送镜像了。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tag</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">busybox</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">regisry.lagoudocker.io/busybox</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">regisry.lagoudocker.io/busybox</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tag</span><span style="color:#24292E;"> </span><span style="color:#032F62;">busybox</span><span style="color:#24292E;"> </span><span style="color:#032F62;">regisry.lagoudocker.io/busybox</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">regisry.lagoudocker.io/busybox</span></span></code></pre></div><h4 id="私有仓库进阶" tabindex="-1">私有仓库进阶 <a class="header-anchor" href="#私有仓库进阶" aria-label="Permalink to &quot;私有仓库进阶&quot;">​</a></h4><p>Docker 官方开源的镜像仓库<code>Distribution</code>仅满足了镜像存储和管理的功能，用户权限管理相对较弱，并且没有管理界面。</p><p>如果你想要构建一个企业的镜像仓库，<a href="https://goharbor.io/" target="_blank" rel="noreferrer">Harbor</a> 是一个非常不错的解决方案。Harbor 是一个基于<code>Distribution</code>项目开发的一款企业级镜像管理软件，拥有 RBAC （基于角色的访问控制）、管理用户界面以及审计等非常完善的功能。目前已经从 CNCF 毕业，这代表它已经有了非常高的软件成熟度。</p>`,56),m=s("p",null,"图 5 Harbor 官网",-1),x=s("p",null,[a("Harbor 的使命是成为 Kubernetes 信任的云原生镜像仓库。 Harbor 需要结合 Kubernetes 才能发挥其最大价值，因此，在这里我就不展开介绍 Harbor 了。如果你对 Harbor 构建企业级镜像仓库感兴趣，可以到它的"),s("a",{href:"https://goharbor.io/",target:"_blank",rel:"noreferrer"},"官网"),a("了解更多。")],-1),A=s("h3",{id:"结语",tabindex:"-1"},[a("结语 "),s("a",{class:"header-anchor",href:"#结语","aria-label":'Permalink to "结语"'},"​")],-1),T=s("p",null,"到此，相信你不仅可以使用公共镜像仓库存储和拉取镜像，还可以自己动手搭建一个私有的镜像仓库。那当你使用 Docker Hub 拉取镜像很慢的时候，你知道如何加快镜像的拉取速度吗？思考后，可以把你的想法写在留言区。",-1);function P(S,I,q,H,$,R){const o=p("Image");return e(),c("div",null,[y,E,i,d,F,n(o,{alt:"Lark20200911-162223.png",src:"https://s0.lgstatic.com/i/image/M00/4D/C7/Ciqc1F9bM-uAI6MDAADk1noY7ic639.png"}),a(),b,u,g,h,n(o,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/4D/C3/Ciqc1F9bL9yAYd_LAAJW9Q4Ue2w855.png"}),a(),C,k,B,f,n(o,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/4D/CE/CgqCHl9bL-aABPLiAABcwVxClDY261.png"}),a(),D,v,n(o,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/4D/C3/Ciqc1F9bL--AYVIKAADWoafHnho359.png"}),a(),_,n(o,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/4D/CF/CgqCHl9bMHCAFgcMAABNmNOujV4312.png"}),a(),m,x,A,T])}const U=l(r,[["render",P]]);export{M as __pageData,U as default};
