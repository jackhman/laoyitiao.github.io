import{_ as o,j as e,o as t,g as c,k as n,s as l,h as p,Q as a}from"./chunks/framework.b3d8e22e.js";const v=JSON.parse('{"title":"synchronied ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4190) 13  案例分析：多线程锁的优化.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4190) 13  案例分析：多线程锁的优化.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4190) 13  案例分析：多线程锁的优化.md"},E=l("p",null,[p("我们在上一课时，了解到可以使用 ThreadLocal，来避免 SimpleDateFormat 在并发环境下引起的时间错乱问题。其实还有一种解决方式，就是通过对"),l("strong",null,"parse 方法"),p(" 进行加锁，也能保证日期处理类的正确运行，代码如下图（可见"),l("a",{href:"https://gitee.com/xjjdog/tuning-lagou-res/tree/master/tuning-011/design-pattern",target:"_blank",rel:"noreferrer"},"仓库"),p("）：")],-1),y=a(`<p>其实锁对性能的影响，是非常大的。因为对资源加锁以后，资源就被加锁的线程独占，其他的线程就只能排队等待这个锁，此时程序由并行执行，变相地成了顺序执行，执行速度自然就降低了。</p><p>下面是开启了 50 个线程，使用 ThreadLocal 和同步锁方式性能的一个对比。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Benchmark                                 Mode  Cnt     Score      Error   Units</span></span>
<span class="line"><span style="color:#E1E4E8;">SynchronizedNormalBenchmark.sync         thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2554.628</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">5098.059</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span>
<span class="line"><span style="color:#E1E4E8;">SynchronizedNormalBenchmark.threadLocal  thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">3750.902</span><span style="color:#E1E4E8;"> ±  </span><span style="color:#79B8FF;">103.528</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span>
<span class="line"><span style="color:#F97583;">========</span><span style="color:#E1E4E8;">去掉业务影响</span><span style="color:#F97583;">========</span></span>
<span class="line"><span style="color:#E1E4E8;">Benchmark                                 Mode  Cnt        Score        Error   Units</span></span>
<span class="line"><span style="color:#E1E4E8;">SynchronizedNormalBenchmark.sync         thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">26905.514</span><span style="color:#E1E4E8;"> ±   </span><span style="color:#79B8FF;">1688.600</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span>
<span class="line"><span style="color:#E1E4E8;">SynchronizedNormalBenchmark.threadLocal  thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">7041876.244</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">355598.686</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Benchmark                                 Mode  Cnt     Score      Error   Units</span></span>
<span class="line"><span style="color:#24292E;">SynchronizedNormalBenchmark.sync         thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2554.628</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">5098.059</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span>
<span class="line"><span style="color:#24292E;">SynchronizedNormalBenchmark.threadLocal  thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">3750.902</span><span style="color:#24292E;"> ±  </span><span style="color:#005CC5;">103.528</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span>
<span class="line"><span style="color:#D73A49;">========</span><span style="color:#24292E;">去掉业务影响</span><span style="color:#D73A49;">========</span></span>
<span class="line"><span style="color:#24292E;">Benchmark                                 Mode  Cnt        Score        Error   Units</span></span>
<span class="line"><span style="color:#24292E;">SynchronizedNormalBenchmark.sync         thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">26905.514</span><span style="color:#24292E;"> ±   </span><span style="color:#005CC5;">1688.600</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span>
<span class="line"><span style="color:#24292E;">SynchronizedNormalBenchmark.threadLocal  thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">7041876.244</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">355598.686</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span></code></pre></div><p>可以看到，使用同步锁的方式，性能是比较低的。如果去掉业务本身逻辑的影响（删掉执行逻辑），这个差异会更大。代码执行的次数越多，锁的累加影响越大，对锁本身的速度优化，是非常重要的。</p><p>我们都知道，Java 中有两种加锁的方式：一种就是常见的<strong>synchronized 关键字</strong> ，另外一种，就是<strong>使用 concurrent 包里面的 Lock</strong>。针对这两种锁，JDK 自身做了很多的优化，它们的实现方式也是不同的。本课时将从这两种锁讲起，看一下对锁的一些优化方式。</p><h3 id="synchronied" tabindex="-1">synchronied <a class="header-anchor" href="#synchronied" aria-label="Permalink to &quot;synchronied&quot;">​</a></h3><p>synchronized 关键字给代码或者方法上锁时，都有显示或者隐藏的上锁对象。当一个线程试图<strong>访问同步代码块</strong> 时，它首先必须得到锁，而<strong>退出</strong> 或<strong>抛出异常</strong>时必须释放锁。</p><ul><li><p>给普通方法加锁时，上锁的对象是 this；</p></li><li><p>给静态方法加锁时，锁的是 class 对象；</p></li><li><p>给代码块加锁，可以指定一个具体的对象作为锁。</p></li></ul><h4 id="_1-monitor-原理" tabindex="-1">1.monitor 原理 <a class="header-anchor" href="#_1-monitor-原理" aria-label="Permalink to &quot;1.monitor 原理&quot;">​</a></h4><p><strong>在面试中，面试官很可能会问你：synchronized 在字节码中，是怎么体现的呢？</strong> 参照下面的代码，在命令行执行 javac，然后再执行 javap -v -p，就可以看到它具体的字节码。</p><p>可以看到，在字节码的体现上，它只给方法加了一个 flag：ACC_SYNCHRONIZED。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">synchronized </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">syncMethod</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">System</span><span style="color:#E1E4E8;">.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;syncMethod&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">======</span><span style="color:#E1E4E8;">字节码</span><span style="color:#F97583;">=====</span></span>
<span class="line"><span style="color:#E1E4E8;">synchronized </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">syncMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    descriptor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ()</span><span style="color:#79B8FF;">V</span></span>
<span class="line"><span style="color:#E1E4E8;">    flags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ACC_SYNCHRONIZED</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Code</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      stack</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, locals</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, args_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> getstatic     #</span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ldc           #</span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokevirtual #</span><span style="color:#79B8FF;">6</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">synchronized </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">syncMethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">System</span><span style="color:#24292E;">.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;syncMethod&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">======</span><span style="color:#24292E;">字节码</span><span style="color:#D73A49;">=====</span></span>
<span class="line"><span style="color:#24292E;">synchronized </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">syncMethod</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    descriptor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ()</span><span style="color:#005CC5;">V</span></span>
<span class="line"><span style="color:#24292E;">    flags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ACC_SYNCHRONIZED</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      stack</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, locals</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, args_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> getstatic     #</span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ldc           #</span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span></span></code></pre></div><p>我们再来看下同步代码块的字节码。可以看到，字节码是通过 monitorenter 和monitorexit 两个指令进行控制的。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">syncBlock</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    synchronized (</span><span style="color:#79B8FF;">Test</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">======</span><span style="color:#E1E4E8;">字节码</span><span style="color:#F97583;">======</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">syncBlock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    descriptor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ()</span><span style="color:#79B8FF;">V</span></span>
<span class="line"><span style="color:#E1E4E8;">    flags</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Code</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      stack</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, locals</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, args_size</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ldc           #</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dup</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> astore_1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> monitorenter</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_1</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> monitorexit</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> goto          </span><span style="color:#79B8FF;">15</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> astore_2</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">11</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> monitorexit</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> aload_2</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> athrow</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">15</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;"> table</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">         from    to  target type</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">   any</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">   any</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">syncBlock</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    synchronized (</span><span style="color:#005CC5;">Test</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">class</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">======</span><span style="color:#24292E;">字节码</span><span style="color:#D73A49;">======</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">syncBlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    descriptor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ()</span><span style="color:#005CC5;">V</span></span>
<span class="line"><span style="color:#24292E;">    flags</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Code</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      stack</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, locals</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, args_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ldc           #</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dup</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> astore_1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> monitorenter</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_1</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> monitorexit</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> goto          </span><span style="color:#005CC5;">15</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> astore_2</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">11</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> monitorexit</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_2</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> athrow</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">15</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;"> table</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">         from    to  target type</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">   any</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">   any</span></span></code></pre></div><p>这两者虽然显示效果不同，但他们都是通过 monitor 来实现同步的。我们可以通过下面这张图，来看一下 monitor 的原理。</p><p><strong>注意了，下面是面试题目高发地。比如，你能描述一下 monitor 锁的实现原理吗？</strong></p>`,16),i=a(`<p>如上图所示，我们可以把运行时的对象锁抽象地分成三部分。其中，EntrySet 和 WaitSet 是两个队列，中间虚线部分是当前持有锁的线程，我们可以想象一下线程的执行过程。</p><p>当第一个线程到来时，发现并没有线程持有对象锁，它会直接成为活动线程，进入 RUNNING 状态。</p><p>接着又来了三个线程，要争抢对象锁。此时，这三个线程发现锁已经被占用了，就先进入 EntrySet 缓存起来，进入 BLOCKED 状态。此时，从 jstack 命令，可以看到他们展示的信息都是 waiting for monitor entry。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;http-nio-8084-exec-120&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">143</span><span style="color:#E1E4E8;"> daemon prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;"> cpu</span><span style="color:#F97583;">=</span><span style="color:#FDAEB7;font-style:italic;">122.86ms</span><span style="color:#E1E4E8;"> elapsed</span><span style="color:#F97583;">=</span><span style="color:#FDAEB7;font-style:italic;">317.88s</span><span style="color:#E1E4E8;"> tid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">00007fedd8381000</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=0x</span><span style="color:#79B8FF;">1af03</span><span style="color:#E1E4E8;"> waiting </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> monitor entry  [</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">00007000150e1000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.Thread.State: BLOCKED (on object monitor)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at java.io.BufferedInputStream.</span><span style="color:#79B8FF;">read</span><span style="color:#E1E4E8;">(java.base@</span><span style="color:#FDAEB7;font-style:italic;">13.0.1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">BufferedInputStream.java:</span><span style="color:#79B8FF;">263</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> waiting to lock </span><span style="color:#F97583;">&lt;0x</span><span style="color:#79B8FF;">0000000782e1b590</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> (a java.io.BufferedInputStream)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at org.apache.commons.httpclient.HttpParser.</span><span style="color:#79B8FF;">readRawLine</span><span style="color:#E1E4E8;">(HttpParser.java:</span><span style="color:#79B8FF;">78</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at org.apache.commons.httpclient.HttpParser.</span><span style="color:#79B8FF;">readLine</span><span style="color:#E1E4E8;">(HttpParser.java:</span><span style="color:#79B8FF;">106</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at org.apache.commons.httpclient.HttpConnection.</span><span style="color:#79B8FF;">readLine</span><span style="color:#E1E4E8;">(HttpConnection.java:</span><span style="color:#79B8FF;">1116</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at org.apache.commons.httpclient.HttpMethodBase.</span><span style="color:#79B8FF;">readStatusLine</span><span style="color:#E1E4E8;">(HttpMethodBase.java:</span><span style="color:#79B8FF;">1973</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at org.apache.commons.httpclient.HttpMethodBase.</span><span style="color:#79B8FF;">readResponse</span><span style="color:#E1E4E8;">(HttpMethodBase.java:</span><span style="color:#79B8FF;">1735</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;http-nio-8084-exec-120&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">143</span><span style="color:#24292E;"> daemon prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> cpu</span><span style="color:#D73A49;">=</span><span style="color:#B31D28;font-style:italic;">122.86ms</span><span style="color:#24292E;"> elapsed</span><span style="color:#D73A49;">=</span><span style="color:#B31D28;font-style:italic;">317.88s</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">00007fedd8381000</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=0x</span><span style="color:#005CC5;">1af03</span><span style="color:#24292E;"> waiting </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> monitor entry  [</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">00007000150e1000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State: BLOCKED (on object monitor)</span></span>
<span class="line"><span style="color:#24292E;">    at java.io.BufferedInputStream.</span><span style="color:#005CC5;">read</span><span style="color:#24292E;">(java.base@</span><span style="color:#B31D28;font-style:italic;">13.0.1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">BufferedInputStream.java:</span><span style="color:#005CC5;">263</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> waiting to lock </span><span style="color:#D73A49;">&lt;0x</span><span style="color:#005CC5;">0000000782e1b590</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> (a java.io.BufferedInputStream)</span></span>
<span class="line"><span style="color:#24292E;">    at org.apache.commons.httpclient.HttpParser.</span><span style="color:#005CC5;">readRawLine</span><span style="color:#24292E;">(HttpParser.java:</span><span style="color:#005CC5;">78</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    at org.apache.commons.httpclient.HttpParser.</span><span style="color:#005CC5;">readLine</span><span style="color:#24292E;">(HttpParser.java:</span><span style="color:#005CC5;">106</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    at org.apache.commons.httpclient.HttpConnection.</span><span style="color:#005CC5;">readLine</span><span style="color:#24292E;">(HttpConnection.java:</span><span style="color:#005CC5;">1116</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    at org.apache.commons.httpclient.HttpMethodBase.</span><span style="color:#005CC5;">readStatusLine</span><span style="color:#24292E;">(HttpMethodBase.java:</span><span style="color:#005CC5;">1973</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    at org.apache.commons.httpclient.HttpMethodBase.</span><span style="color:#005CC5;">readResponse</span><span style="color:#24292E;">(HttpMethodBase.java:</span><span style="color:#005CC5;">1735</span><span style="color:#24292E;">)</span></span></code></pre></div><p>处于活动状态的线程，执行完毕退出了；或者由于某种原因执行了 wait 方法，释放了对象锁，进入了 WaitSet 队列，这就是在调用 wait 之前，需要先获得对象锁的原因。</p><p>就像下面的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (lock){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         lock.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (lock){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         lock.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时，jstack 显示的线程状态是 WAITING 状态，而原因是 in Object.wait()。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;wait-demo&quot;</span><span style="color:#E1E4E8;"> #</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> os_prio</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;"> cpu</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.</span><span style="color:#E1E4E8;">14ms elapsed</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">12.</span><span style="color:#E1E4E8;">58s tid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0x00007fb66609e000</span><span style="color:#E1E4E8;"> nid</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0x6103</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">()  [</span><span style="color:#79B8FF;">0x000070000f2bd000</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.lang.</span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">State</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WAITING</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">on</span><span style="color:#E1E4E8;"> object monitor)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at java.lang.</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">(java.</span><span style="color:#F97583;">base</span><span style="color:#E1E4E8;">@</span><span style="color:#79B8FF;">13.0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">Native</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Method</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> waiting </span><span style="color:#F97583;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">0x0000000787b48300</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> (a java.lang.</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at java.lang.</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">(java.</span><span style="color:#F97583;">base</span><span style="color:#E1E4E8;">@</span><span style="color:#79B8FF;">13.0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">326</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at </span><span style="color:#79B8FF;">WaitDemo</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">lambda$main$0</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">WaitDemo</span><span style="color:#E1E4E8;">.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> locked </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">0x0000000787b48300</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> (a java.lang.</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at </span><span style="color:#79B8FF;">WaitDemo$$Lambda$14</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0x0000000800b44840</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Unknown</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Source</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    at java.lang.</span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(java.</span><span style="color:#F97583;">base</span><span style="color:#E1E4E8;">@</span><span style="color:#79B8FF;">13.0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;">.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">830</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;wait-demo&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> cpu</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.</span><span style="color:#24292E;">14ms elapsed</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">12.</span><span style="color:#24292E;">58s tid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x00007fb66609e000</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x6103</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">()  [</span><span style="color:#005CC5;">0x000070000f2bd000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.</span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">State</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">WAITING</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">on</span><span style="color:#24292E;"> object monitor)</span></span>
<span class="line"><span style="color:#24292E;">    at java.lang.</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">(java.</span><span style="color:#D73A49;">base</span><span style="color:#24292E;">@</span><span style="color:#005CC5;">13.0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">Native</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Method</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> waiting </span><span style="color:#D73A49;">on</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">0x0000000787b48300</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> (a java.lang.</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    at java.lang.</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">(java.</span><span style="color:#D73A49;">base</span><span style="color:#24292E;">@</span><span style="color:#005CC5;">13.0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">326</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    at </span><span style="color:#005CC5;">WaitDemo</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">lambda$main$0</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">WaitDemo</span><span style="color:#24292E;">.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> locked </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">0x0000000787b48300</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> (a java.lang.</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    at </span><span style="color:#005CC5;">WaitDemo$$Lambda$14</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0x0000000800b44840</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Unknown</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Source</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    at java.lang.</span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(java.</span><span style="color:#D73A49;">base</span><span style="color:#24292E;">@</span><span style="color:#005CC5;">13.0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;">.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">830</span><span style="color:#24292E;">)</span></span></code></pre></div><p>发生了这两种情况，都会造成对象锁的释放，进而导致 EntrySet 里的线程重新争抢对象锁，成功抢到锁的线程成为活动线程，这是一个循环的过程。</p><p>那 WaitSet 中的线程是如何再次被激活的呢？接下来，在某个地方，执行了锁的 notify 或者 notifyAll 命令，会造成 WaitSet 中的线程，转移到 EntrySet 中，重新进行锁的争夺。</p><p>如此周而复始，线程就可按顺序排队执行。</p><h4 id="_2-分级锁" tabindex="-1">2.分级锁 <a class="header-anchor" href="#_2-分级锁" aria-label="Permalink to &quot;2.分级锁&quot;">​</a></h4><p>在 JDK 1.8 中，synchronized 的速度已经有了显著的提升，它都做了哪些优化呢？答案就是分级锁。JVM 会根据使用情况，对 synchronized 的锁，进行升级，它大体可以按照下面的路径进行升级：偏向锁 --- 轻量级锁 --- 重量级锁。</p><p><strong>锁只能升级，不能降级</strong>，所以一旦升级为重量级锁，就只能依靠操作系统进行调度。</p><p>要想了解锁升级的过程，需要先看一下对象在内存里的结构。</p>`,16),F=a(`<p>如上图所示，对象分为 MarkWord、Class Pointer、Instance Data、Padding 四个部分。</p><p>和锁升级关系最大的就是 MarkWord，它的长度是 24 位，我们着重介绍一下。它包含Thread ID（23bit）、Age（6bit）、Biased（1bit）、Tag（2bit） 四个部分，锁升级就是靠判断 Thread Id、Biased、Tag 等三个变量值来进行的。</p><ul><li><strong>偏向锁</strong></li></ul><p>在只有一个线程使用了锁的情况下，偏向锁能够保证更高的效率。</p><p>具体过程是这样的：当第一个线程第一次访问同步块时，会先检测对象头 Mark Word 中的标志位 Tag 是否为 01，以此判断此时对象锁是否处于无锁状态或者偏向锁状态（匿名偏向锁）。</p><p>01 也是锁默认的状态，线程一旦获取了这把锁，就会把自己的线程 ID 写到 MarkWord 中，在其他线程来获取这把锁之前，锁都处于偏向锁状态。</p><p>当下一个线程参与到偏向锁竞争时，会先判断 MarkWord 中保存的线程 ID 是否与这个线程 ID 相等，<strong>如果不相等，会立即撤销偏向锁，升级为轻量级锁</strong>。</p><ul><li><strong>轻量级锁</strong></li></ul><p>轻量级锁的获取是怎么进行的呢？它们使用的是自旋方式。</p><p>参与竞争的每个线程，会在自己的线程栈中生成一个 LockRecord ( LR )，然后每个线程通过 CAS（自旋）的方式，将锁对象头中的 MarkWord 设置为指向自己的 LR 的指针，哪个线程设置成功，就意味着哪个线程获得锁。</p><p>当锁处于轻量级锁的状态时，就不能够再通过简单地对比 Tag 的值进行判断，每次对锁的获取，都需要通过自旋。</p><p>当然，自旋也是面向不存在锁竞争的场景，比如一个线程运行完了，另外一个线程去获取这把锁；<strong>但如果自旋失败达到一定的次数，锁就会膨胀为重量级锁</strong>。</p><ul><li><strong>重量级锁</strong></li></ul><p>重量级锁，即我们对 synchronized 的直观认识，这种情况下，线程会挂起，进入到操作系统内核态，等待操作系统的调度，然后再映射回用户态。系统调用是昂贵的，所以重量级锁的名称由此而来。</p><p>如果系统的共享变量竞争非常激烈，锁会迅速膨胀到重量级锁，这些优化就名存实亡。如果并发非常严重，可以通过参数 -XX:-UseBiasedLocking 禁用偏向锁，理论上会有一些性能提升，但实际上并不确定。</p><h3 id="lock" tabindex="-1">Lock <a class="header-anchor" href="#lock" aria-label="Permalink to &quot;Lock&quot;">​</a></h3><p>在 concurrent 包里，我们能够发现 ReentrantLock 和 ReentrantReadWriteLock 两个类。Reentrant 就是可重入的意思，它们和 synchronized 关键字一样，都是可重入锁。</p><p>这里有必要解释一下**&quot;可重入&quot;这个概念，这是一个面试高频考点**。它的意思是，一个线程运行时，可以多次获取同一个对象锁，这是因为 Java 的锁是基于线程的，而不是基于调用的。</p><p>比如下面这段代码，由于方法 a、b、c 锁的都是当前的 this，线程在调用 a 方法的时候，就不需要多次获取对象锁。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">c</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">c</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">c</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">c</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_1-主要方法" tabindex="-1">1.主要方法 <a class="header-anchor" href="#_1-主要方法" aria-label="Permalink to &quot;1.主要方法&quot;">​</a></h4><p>Lock 是基于 AQS（AbstractQueuedSynchronizer）实现的，而 AQS 是基于 volitale 和 CAS 实现的（关于CAS，我们将在下一课时讲解）。</p><p>Lock 与 synchronized 的使用方法不同，它需要手动加锁，然后在 finally 中解锁。Lock 接口比 synchronized 灵活性要高，我们来看一下几个关键方法。</p><ul><li><p><strong>Lock：</strong> Lock 方法和 synchronized 没什么区别，如果获取不到锁，都会被阻塞；</p></li><li><p><strong>tryLock：</strong> 此方法会尝试获取锁，不管能不能获取到锁，都会立即返回，不会阻塞，它是有返回值的，获取到锁就会返回 true；</p></li><li><p><strong>tryLock(long time, TimeUnit unit)：</strong> 与 tryLock 类似，但它在拿不到锁的情况下，会等待一段时间，直到超时；</p></li><li><p><strong>LockInterruptibly：</strong> 与 Lock 类似，但是可以锁等待，可以被中断，中断后返回 InterruptedException；</p></li></ul><p>一般情况下，使用 Lock 方法就可以；但如果业务请求要求响应及时，那使用带超时时间的<strong>tryLock</strong>是更好的选择：我们的业务可以直接返回失败，而不用进行阻塞等待。tryLock 这种优化手段，采用降低请求成功率的方式，来保证服务的可用性，在高并发场景下常被高频采用。</p><h4 id="_2-读写锁" tabindex="-1">2.读写锁 <a class="header-anchor" href="#_2-读写锁" aria-label="Permalink to &quot;2.读写锁&quot;">​</a></h4><p>但对于有些业务来说，使用 Lock 这种粗粒度的锁还是太慢了。比如，对于一个HashMap 来说，某个业务是读多写少的场景，这个时候，如果给读操作，也加上和写操作一样的锁的话，效率就会很慢。</p><p>ReentrantReadWriteLock 是一种读写分离的锁，它允许多个读线程同时进行，但读和写、写和写是互斥的。</p><p>使用方法如下所示，分别获取读写锁，对写操作加写锁，对读操作加读锁，并在 finally 里释放锁即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ReentrantReadWriteLock lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReentrantReadWriteLock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Lock readLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lock.</span><span style="color:#B392F0;">readLock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Lock writeLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lock.</span><span style="color:#B392F0;">writeLock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(K k, V v) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        writeLock.</span><span style="color:#B392F0;">lock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(k, v);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            writeLock.</span><span style="color:#B392F0;">unlock</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ReentrantReadWriteLock lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReentrantReadWriteLock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Lock readLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lock.</span><span style="color:#6F42C1;">readLock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Lock writeLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lock.</span><span style="color:#6F42C1;">writeLock</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(K k, V v) {</span></span>
<span class="line"><span style="color:#24292E;">        writeLock.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(k, v);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            writeLock.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">...</span></span></code></pre></div><p><strong>这里留一个课后作业：除了 ReadWriteLock，我们能有更快的读写分离模式吗？JDK 1.8 加入了哪个 API？（欢迎你在留言区作答，我将与你们一一交流）</strong></p><h4 id="_3-公平锁与非公平锁" tabindex="-1">3.公平锁与非公平锁 <a class="header-anchor" href="#_3-公平锁与非公平锁" aria-label="Permalink to &quot;3.公平锁与非公平锁&quot;">​</a></h4><ul><li><strong>非公平锁</strong></li></ul><p>我们平常用到的锁，都是非公平锁，可以回过头来看一下 monitor 的原理。当持有锁的线程释放锁的时候，EntrySet 里的线程就会争抢这把锁，这个争抢过程，是随机的，也就是说你并不知道哪个线程会获取对象锁，谁抢到了就算谁的。</p><p>这就有一定的概率会发生，某个线程总是抢不到锁的情况。比如，某个线程通过 setPriority 设置得比较低的优先级，这个抢不到锁的线程，就一直处于饥饿状态，这就是<strong>线程饥饿</strong>的概念。</p><ul><li><strong>公平锁</strong></li></ul><p>而公平锁通过把随机变成有序，可以解决这个问题，synchronized 没有这个功能，在Lock 中可以通过构造参数设置成公平锁，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReentrantReadWriteLock</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> fair) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        sync </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fair </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FairSync</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NonfairSync</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        readerLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReadLock</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        writerLock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WriteLock</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReentrantReadWriteLock</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> fair) {</span></span>
<span class="line"><span style="color:#24292E;">        sync </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fair </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FairSync</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NonfairSync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        readerLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadLock</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        writerLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WriteLock</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于所有的线程都需要排队，需要在多核的场景下维护一个同步队列，在多个线程争抢锁的时候，吞吐量就很低。</p><p>下面是 20 个并发之下，锁的 JMH 测试结果，可以看到，<strong>非公平锁比公平锁的性能高出两个数量级。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Benchmark                      Mode  Cnt      Score      Error   Units</span></span>
<span class="line"><span style="color:#E1E4E8;">FairVSNoFairBenchmark.fair    thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">186.144</span><span style="color:#E1E4E8;"> ±   </span><span style="color:#79B8FF;">27.462</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span>
<span class="line"><span style="color:#E1E4E8;">FairVSNoFairBenchmark.nofair  thrpt   </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">35195.649</span><span style="color:#E1E4E8;"> ± </span><span style="color:#79B8FF;">6503.375</span><span style="color:#E1E4E8;">  ops</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Benchmark                      Mode  Cnt      Score      Error   Units</span></span>
<span class="line"><span style="color:#24292E;">FairVSNoFairBenchmark.fair    thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">186.144</span><span style="color:#24292E;"> ±   </span><span style="color:#005CC5;">27.462</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span>
<span class="line"><span style="color:#24292E;">FairVSNoFairBenchmark.nofair  thrpt   </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">35195.649</span><span style="color:#24292E;"> ± </span><span style="color:#005CC5;">6503.375</span><span style="color:#24292E;">  ops</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ms</span></span></code></pre></div><h3 id="锁的优化技巧" tabindex="-1">锁的优化技巧 <a class="header-anchor" href="#锁的优化技巧" aria-label="Permalink to &quot;锁的优化技巧&quot;">​</a></h3><h4 id="_1-死锁" tabindex="-1">1.死锁 <a class="header-anchor" href="#_1-死锁" aria-label="Permalink to &quot;1.死锁&quot;">​</a></h4><p>我们可以先看一下锁冲突最严重的一种情况：死锁。下面这段示例代码，两个线程分别持有对方所需要的锁，并进入了相互等待的状态，那么它们就进入了死锁。</p><p>在面试中，经常会要求被面试者手写下面这段代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DeadLockDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object object1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object object2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread t1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (object1) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (object2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;deadlock-demo-1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        t1.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread t2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (object2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (object1) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;deadlock-demo-2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        t2.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DeadLockDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Object object1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Object object2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Thread t1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (object1) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (object2) {</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#032F62;">&quot;deadlock-demo-1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        t1.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Thread t2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (object2) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (object1) {</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#032F62;">&quot;deadlock-demo-2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        t2.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码创建了两把对象锁，线程1 首先拿到了 object1 的对象锁，200ms 后尝试获取 object2 的对象锁。但这个时候，object2 的对象锁已经被线程2 获取了。这两个线程进入了相互等待的状态，产生了死锁。</p><p>使用我们上面提到的，带超时时间的 tryLock 方法，有一方超时让步，可以一定程度上避免死锁。</p><h4 id="_2-优化技巧" tabindex="-1">2.优化技巧 <a class="header-anchor" href="#_2-优化技巧" aria-label="Permalink to &quot;2.优化技巧&quot;">​</a></h4><p>锁的优化理论其实很简单，那就是<strong>减少锁的冲突</strong> 。无论是锁的读写分离，还是分段锁，本质上都是为了<strong>避免多个线程同时获取同一把锁</strong>。</p><p>所以我们可以总结一下优化的一般思路：减少锁的粒度、减少锁持有的时间、锁分级、锁分离 、锁消除、乐观锁、无锁等。</p>`,51),d=a(`<ul><li><strong>减少锁粒度</strong></li></ul><p>通过减小锁的粒度，可以将冲突分散，减少冲突的可能，从而提高并发量。简单来说，就是把资源进行抽象，针对每类资源<strong>使用单独的锁进行保护</strong>。</p><p>比如下面的代码，由于 list 1 和 list 2 属于两类资源，就没必要使用同一个对象锁进行处理。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockLessDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addList1</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.list1.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(v);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addList2</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.list2.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(v);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockLessDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addList1</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">v</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.list1.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addList2</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">v</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.list2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以创建两个不同的锁，改善情况如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockLessDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object lock1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object lock2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addList1</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (lock1) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.list1.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(v);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addList2</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (lock2) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.list2.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(v);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockLessDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object lock1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object lock2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addList1</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (lock1) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.list1.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addList2</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (lock2) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.list2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>减少锁持有时间</strong></li></ul><p>通过让锁资源尽快地释放，减少锁持有的时间，其他线程可更迅速地获取锁资源，进行其他业务的处理。</p><p>考虑到下面的代码，由于 slowMethod 不在锁的范围内，占用的时间又比较长，可以把它移动到 Synchronized 代码块外面，加速锁的释放。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockTimeDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Object lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addList</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (lock) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">slowMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(v);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">slowMethod</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockTimeDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Object lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addList</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (lock) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">slowMethod</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">slowMethod</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>锁分级</strong></li></ul><p>锁分级，指的是我们文章开始讲解的 Synchronied 锁的锁升级，属于 JVM 的内部优化，它从偏向锁开始，逐渐升级为轻量级锁、重量级锁，这个过程是不可逆的。</p><ul><li><strong>锁分离</strong></li></ul><p>我们在上面提到的读写锁，就是锁分离技术。这是因为，读操作一般是不会对资源产生影响的，可以并发执行；写操作和其他操作是互斥的，只能排队执行。所以读写锁适合读多写少的场景。</p><ul><li><strong>锁消除</strong></li></ul><p>通过 JIT 编译器，JVM 可以消除某些对象的加锁操作。举个例子，大家都知道StringBuffer 和 StringBuilder 都是做字符串拼接的，而且前者是线程安全的。</p><p>但其实，如果这两个字符串拼接对象用在函数内，JVM 通过逃逸分析这个对象的作用范围就是在本函数中，就会把锁的影响给消除掉。</p><p>比如下面这段代码，它和 StringBuilder 的效果是一样的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">m1</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    StringBuffer sb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuffer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    sb.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sb.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String </span><span style="color:#6F42C1;">m1</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    StringBuffer sb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuffer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sb.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然，对于读多写少的互联网场景，最有效的做法，是使用乐观锁，甚至无锁，这部分我们会在下一课时《14 | 案例分析：乐观锁和无锁》中介绍。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>Java 中有两种加锁方式：一种是使用 Synchronized 关键字，另外一种是 concurrent 包下面的 Lock。</p><p>本课时，我们详细地了解了它们的一些特性，包括实现原理，其对比如下：</p><table><thead><tr><th style="text-align:center;"><strong>类别</strong></th><th><strong>Synchronized</strong></th><th style="text-align:center;"><strong>Lock</strong></th></tr></thead><tbody><tr><td style="text-align:center;">实现方式</td><td>monitor</td><td style="text-align:center;">AQS</td></tr><tr><td style="text-align:center;">底层细节</td><td>JVM优化</td><td style="text-align:center;">Java API</td></tr><tr><td style="text-align:center;">分级锁</td><td>是</td><td style="text-align:center;">否</td></tr><tr><td style="text-align:center;">功能特性</td><td>单一</td><td style="text-align:center;">丰富</td></tr><tr><td style="text-align:center;">锁分离</td><td>无</td><td style="text-align:center;">读写锁</td></tr><tr><td style="text-align:center;">锁超时</td><td>无</td><td style="text-align:center;">带超时时间的 tryLock</td></tr><tr><td style="text-align:center;">可中断</td><td>否</td><td style="text-align:center;">lockInterruptibly</td></tr></tbody></table><p>Lock 的功能是比 Synchronized 多的，能够对线程行为进行更细粒度的控制。</p><p>但如果只是用最简单的锁互斥功能，建议直接使用 Synchronized，有两个原因：</p><ul><li><p>Synchronized 的编程模型更加简单，更易于使用</p></li><li><p>Synchronized 引入了偏向锁，轻量级锁等功能，能够从 JVM 层进行优化，同时JIT 编译器也会对它执行一些锁消除动作。</p></li></ul><p>我们还了解了公平锁与非公平锁，以及可重入锁的概念，以及一些通用的优化技巧。有冲突，才会有优化空间，那么无锁队列是怎么回事呢？它又是怎么实现的呢？下一课时《14 | 案例分析：乐观锁和无锁》，我们会来解答这些问题。</p>`,28);function C(h,g,B,u,A,D){const s=e("Image");return t(),c("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/45/BD/Ciqc1F9DbU6AeoPsAAC8Nn863qc911.png"}),y,n(s,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/45/E9/CgqCHl9Dl-mAHYlWAACjjjqUdwE492.png"}),i,n(s,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/45/DE/Ciqc1F9Dl_uAUOqvAABFvlyPAbE897.png"}),F,n(s,{alt:"3.png",src:"https://s0.lgstatic.com/i/image/M00/45/DE/Ciqc1F9DmBqAEgcKAABk33fmf4k676.png"}),d])}const b=o(r,[["render",C]]);export{v as __pageData,b as default};
