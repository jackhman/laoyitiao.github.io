import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.d3daa342.js";const D=JSON.parse('{"title":"加餐课后练习题详解","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/重学数据结构与算法_文档/(4510) 加餐  课后练习题详解.md","filePath":"posts/backEnd/重学数据结构与算法_文档/(4510) 加餐  课后练习题详解.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/重学数据结构与算法_文档/(4510) 加餐  课后练习题详解.md"},o=l(`<h1 id="加餐课后练习题详解" tabindex="-1">加餐课后练习题详解 <a class="header-anchor" href="#加餐课后练习题详解" aria-label="Permalink to &quot;加餐课后练习题详解&quot;">​</a></h1><p>专栏虽已结束，但学习不应停止。我看到很多同学依然还在这里学习，一部分同学积极地在留言区和大家分享学习总结和练习题答案。</p><p>我几乎在每个课时的结尾都留下了一道练习题，目的是帮助你检测和巩固本课时的重点内容，抑或是引出后续课时中的内容。在我处理留言的过程中，发现很多同学想要练习题详细解答过程以及答案，所以就有了今天的这一篇加餐内容，希望对你有所帮助。</p><p>接下来我会给出每个课时练习题的解题思路和答案，如果你没有找到对应的练习题答案，那么请你在正课中查找。</p><h4 id="_01-复杂度-如何衡量程序运行的效率" tabindex="-1">01 | 复杂度：如何衡量程序运行的效率？ <a class="header-anchor" href="#_01-复杂度-如何衡量程序运行的效率" aria-label="Permalink to &quot;01 \\| 复杂度：如何衡量程序运行的效率？&quot;">​</a></h4><p><strong>【问题】</strong> 评估一下，如下的代码片段，时间复杂度是多少？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; m </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; m</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">		} </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; m </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; m</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">		} </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>【解析】</strong> 在上面的代码中：</p><ul><li><p>第 3～5 行和 6～8 行，显然是一个 O(n) 复杂度的循环。这两个循环是顺序结构，因此合在一起的复杂度是 O(n) + O(n) = O(2n) = O(n)。</p></li><li><p>第 2～9 行是一个 for 循环，它的时间复杂度是 O(n)。这个 for 循环内部嵌套了 O(n) 复杂度的代码，因此合在一起就是 O(n ² ) 的时间复杂度。</p></li><li><p>在代码的最外部，第 1～10 行又是一个 O(n) 复杂度的循环，内部嵌套了 O(n ² ) 的时间复杂度的代码。因此合在一起就是 O(n ³ ) 的时间复杂度。</p></li></ul><h4 id="_02-数据结构-将-昂贵-的时间复杂度转换成-廉价-的空间复杂度" tabindex="-1">02 | 数据结构：将&quot;昂贵&quot;的时间复杂度转换成&quot;廉价&quot;的空间复杂度 <a class="header-anchor" href="#_02-数据结构-将-昂贵-的时间复杂度转换成-廉价-的空间复杂度" aria-label="Permalink to &quot;02 \\| 数据结构：将&quot;昂贵&quot;的时间复杂度转换成&quot;廉价&quot;的空间复杂度&quot;">​</a></h4><p><strong>【问题】</strong> 在下面这段代码中，如果要降低代码的执行时间，第 4 行代码需要做哪些改动呢？如果做出改动后，是否降低了时间复杂度呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">s2_2</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((</span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">j</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">((</span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">j</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">				count </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">			} </span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(count); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">s2_2</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((</span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">j</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;">((</span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">j</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">				count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">			} </span></span>
<span class="line"><span style="color:#24292E;">		} </span></span>
<span class="line"><span style="color:#24292E;">	} </span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(count); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>【解析】</strong> 代码的第 4 行可以改为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">i) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">i) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span></code></pre></div><p>代码改造完成后，时间复杂度并没有变小。但由于减少了一些不必要的计算量，程序的执行时间变少了。</p><h4 id="_03-增删查-掌握数据处理的基本操作-以不变应万变" tabindex="-1">03 | 增删查：掌握数据处理的基本操作，以不变应万变 <a class="header-anchor" href="#_03-增删查-掌握数据处理的基本操作-以不变应万变" aria-label="Permalink to &quot;03 \\| 增删查：掌握数据处理的基本操作，以不变应万变&quot;">​</a></h4><p><strong>【问题】</strong> 对于一个包含 5 个元素的数组，如果要把这个数组元素的顺序翻转过来。你可以试着分析该过程需要对数据进行哪些操作？</p><p><strong>【解析】</strong> 假设原数组 a = {1,2,3,4,5}，现在要更改为 a = {5,4,3,2,1}。要想得到新的数组，就要找到 &quot;1&quot; 和 &quot;5&quot;，再分别把它们赋值给对方。因此，这里主要会产生大量的基于索引位置的查找动作。</p><h4 id="_04-如何完成线性表结构下的增删查" tabindex="-1">04 | 如何完成线性表结构下的增删查？ <a class="header-anchor" href="#_04-如何完成线性表结构下的增删查" aria-label="Permalink to &quot;04 \\| 如何完成线性表结构下的增删查？&quot;">​</a></h4><p><strong>【问题】</strong> 给定一个包含 n 个元素的链表，现在要求每 k 个节点一组进行翻转，打印翻转后的链表结果。例如，链表为 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6，k = 3，则打印 321654。</p><p><strong>【解析】</strong> 我们给出一些提示。利用链表翻转的算法，这个问题应该很简单。利用 3 个指针，prev、curr、next，执行链表翻转，每次得到了 k 个翻转的结点就执行打印。</p><h4 id="_05-栈-后进先出的线性表-如何实现增删查" tabindex="-1">05 | 栈：后进先出的线性表，如何实现增删查？ <a class="header-anchor" href="#_05-栈-后进先出的线性表-如何实现增删查" aria-label="Permalink to &quot;05 \\| 栈：后进先出的线性表，如何实现增删查？&quot;">​</a></h4><p><strong>【问题】</strong> 给定一个包含 n 个元素的链表，现在要求每 k 个节点一组进行翻转，打印翻转后的链表结果。例如，链表为 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6，k = 3，则打印 321654。要求用栈来实现。</p><p><strong>【解析】</strong> 我们用栈来实现它，就很简单了。你可以牢牢记住，<strong>只要涉及翻转动作的题目，都是使用栈来解决的强烈信号</strong>。</p><p>具体的操作如下，设置一个栈，不断将队列数据入栈，并且实时记录栈的大小。当栈的大小达到 k 的时候，全部出栈。我们给出核心代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (tmp </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> k) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    stack.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(tmp.value); </span></span>
<span class="line"><span style="color:#E1E4E8;">    tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp.next; </span></span>
<span class="line"><span style="color:#E1E4E8;">    count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">stack.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(stack.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (tmp </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> k) { </span></span>
<span class="line"><span style="color:#24292E;">    stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(tmp.value); </span></span>
<span class="line"><span style="color:#24292E;">    tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp.next; </span></span>
<span class="line"><span style="color:#24292E;">    count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">stack.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_07-数组-如何实现基于索引的查找" tabindex="-1">07 | 数组：如何实现基于索引的查找？ <a class="header-anchor" href="#_07-数组-如何实现基于索引的查找" aria-label="Permalink to &quot;07 \\| 数组：如何实现基于索引的查找？&quot;">​</a></h4><p><strong>详细分析和答案，请翻阅 18 课时例题 1</strong>。</p><h4 id="_08-字符串-如何正确回答面试中高频考察的字符串匹配算法" tabindex="-1">08 | 字符串：如何正确回答面试中高频考察的字符串匹配算法？ <a class="header-anchor" href="#_08-字符串-如何正确回答面试中高频考察的字符串匹配算法" aria-label="Permalink to &quot;08 \\| 字符串：如何正确回答面试中高频考察的字符串匹配算法？&quot;">​</a></h4><p><strong>详细分析和解题步骤，请参考 17 课时例题 1。</strong></p><h4 id="_10-哈希表-如何利用好高效率查找的-利器" tabindex="-1">10 | 哈希表：如何利用好高效率查找的&quot;利器&quot;？ <a class="header-anchor" href="#_10-哈希表-如何利用好高效率查找的-利器" aria-label="Permalink to &quot;10 \\| 哈希表：如何利用好高效率查找的&quot;利器&quot;？&quot;">​</a></h4><p><strong>详细分析和答案，请翻阅 15 课时例题 1</strong>。</p><h4 id="_11-递归-如何利用递归求解汉诺塔问题" tabindex="-1">11 | 递归：如何利用递归求解汉诺塔问题？ <a class="header-anchor" href="#_11-递归-如何利用递归求解汉诺塔问题" aria-label="Permalink to &quot;11 \\| 递归：如何利用递归求解汉诺塔问题？&quot;">​</a></h4><p><strong>详细分析和答案，请翻阅 16 课时例题 1</strong>。</p><h4 id="_12-分治-如何利用分治法完成数据查找" tabindex="-1">12 | 分治：如何利用分治法完成数据查找？ <a class="header-anchor" href="#_12-分治-如何利用分治法完成数据查找" aria-label="Permalink to &quot;12 \\| 分治：如何利用分治法完成数据查找？&quot;">​</a></h4><p><strong>【问题】</strong> 在一个有序数组中，查找出第一个大于 9 的数字，假设一定存在。例如，arr = { -1, 3, 3, 7, 10, 14, 14 }；则返回 10。</p><p><strong>【解析】</strong> 在这里提醒一下，带查找的目标数字具备这样的性质：</p><ul><li><p>第一，它比 9 大；</p></li><li><p>第二，它前面的数字（除非它是第一个数字），比 9 小。</p></li></ul><p>因此，当我们作出向左走或向右走的决策时，必须满足这两个条件。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) { </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> targetNumb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 目标有序数组 </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> }; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> middle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> low </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> high </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (low </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> high) { </span></span>
<span class="line"><span style="color:#E1E4E8;">		middle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (high </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> low) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (arr[middle] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> targetNumb </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (middle </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> arr[middle </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> targetNumb)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">			System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;第一个比 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> targetNumb </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; 大的数字是 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> arr[middle]); </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (arr[middle] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> targetNumb) { </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 说明该数在low~middle之间 </span></span>
<span class="line"><span style="color:#E1E4E8;">			high </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> middle </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 说明该数在middle~high之间 </span></span>
<span class="line"><span style="color:#E1E4E8;">			low </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> middle </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span></span>
<span class="line"><span style="color:#E1E4E8;">	}	 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) { </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> targetNumb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 目标有序数组 </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">14</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> }; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> low </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> high </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (low </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> high) { </span></span>
<span class="line"><span style="color:#24292E;">		middle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (high </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> low) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr[middle] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> targetNumb </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (middle </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> arr[middle </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> targetNumb)) { </span></span>
<span class="line"><span style="color:#24292E;">			System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;第一个比 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> targetNumb </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 大的数字是 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> arr[middle]); </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr[middle] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> targetNumb) { </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 说明该数在low~middle之间 </span></span>
<span class="line"><span style="color:#24292E;">			high </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 说明该数在middle~high之间 </span></span>
<span class="line"><span style="color:#24292E;">			low </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">		} </span></span>
<span class="line"><span style="color:#24292E;">	}	 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_14-动态规划-如何通过最优子结构-完成复杂问题求解" tabindex="-1">14 | 动态规划：如何通过最优子结构，完成复杂问题求解？ <a class="header-anchor" href="#_14-动态规划-如何通过最优子结构-完成复杂问题求解" aria-label="Permalink to &quot;14 \\| 动态规划：如何通过最优子结构，完成复杂问题求解？&quot;">​</a></h4><p><strong>详细分析和答案，请翻阅 16 课时例题 3</strong>。</p><h4 id="_15-定位问题才能更好地解决问题-开发前的复杂度分析与技术选型" tabindex="-1">15 | 定位问题才能更好地解决问题：开发前的复杂度分析与技术选型 <a class="header-anchor" href="#_15-定位问题才能更好地解决问题-开发前的复杂度分析与技术选型" aria-label="Permalink to &quot;15 \\| 定位问题才能更好地解决问题：开发前的复杂度分析与技术选型&quot;">​</a></h4><p><strong>【问题】</strong> 下面的代码采用了两个 for 循环去实现 two sums。那么，能否只使用一个 for 循环完成呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">twoSum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] arr, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> target) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> arr.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(arr[i], i); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> arr.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> complement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> arr[i]; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (map.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(complement) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(complement) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> i) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] { map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(complement), i }; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">twoSum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> target) { </span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(arr[i], i); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> complement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> arr[i]; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (map.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(complement) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(complement) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> i) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] { map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(complement), i }; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>【解析】</strong> 原代码中，第 3 和第 6 行的 for 循环合并后，就需要把 map 的新增、查找合在一起执行。则代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">twoSum</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] arr, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> target) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> arr.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> complement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> arr[i]; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (map.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(complement) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(complement) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> i) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] { map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(complement), i }; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">            map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(arr[i], i); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">twoSum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> target) { </span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> complement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> arr[i]; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (map.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(complement) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(complement) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> i) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] { map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(complement), i }; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">            map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(arr[i], i); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_16-真题案例-一-算法思维训练" tabindex="-1">16 | 真题案例（一）：算法思维训练 <a class="header-anchor" href="#_16-真题案例-一-算法思维训练" aria-label="Permalink to &quot;16 \\| 真题案例（一）：算法思维训练&quot;">​</a></h4><p><strong>【问题】</strong> 如果现在是个线上实时交互的系统。客户端输入 x，服务端返回斐波那契数列中的第 x 位。那么，这个问题使用上面的解法是否可行。</p><p><strong>【解析】</strong> 这里给你一个小提示，既然我这么问，答案显然是不可行的。如果不可行，原因是什么呢？我们又该如何解决？</p><p>注意，题目中给出的是一个实时系统。当用户提交了 x，如果在几秒内没有得到系统响应，用户就会卸载 App 啦。</p><p>一个实时系统，必须想方设法在 O(1) 时间复杂度内返回结果。因此，一个可行的方式是，在系统上线之前，把输入 x 在 1～100 的结果预先就计算完，并且保存在数组里。当收到 1～100 范围内输入时，O(1) 时间内就可以返回。如果不在这个范围，则需要计算。计算之后的结果返回给用户，并在数组中进行保存。以方便后续同样输入时，能在 O(1) 时间内可以返回。</p><h4 id="_17-真题案例-二-数据结构训练" tabindex="-1">17 | 真题案例（二）：数据结构训练 <a class="header-anchor" href="#_17-真题案例-二-数据结构训练" aria-label="Permalink to &quot;17 \\| 真题案例（二）：数据结构训练&quot;">​</a></h4><p><strong>【问题】</strong> 对于树的层次遍历，我们再拓展一下。如果要打印的不是层次，而是蛇形遍历，又该如何实现呢？蛇形遍历就是 s 形遍历，即奇数层从左到右，偶数层从右到左。</p><p><strong>【解析】</strong> 这里要对数据的顺序进行逆序处理，直观上，你需要立马想到栈。毕竟只有栈是后进先出的结构，是能快速实现逆序的。具体而言，需要建立两个栈 s1 和 s2。进栈的顺序是，s1 先右后左，s2 先左后右。两个栈交替出栈的结果就是 s 形遍历，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ArrayList</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ArrayList</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Print</span><span style="color:#E1E4E8;">(TreeNodes pRoot) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 先右后左 </span></span>
<span class="line"><span style="color:#E1E4E8;">    Stack&lt;</span><span style="color:#F97583;">TreeNodes</span><span style="color:#E1E4E8;">&gt; s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Stack&lt;</span><span style="color:#F97583;">TreeNodes</span><span style="color:#E1E4E8;">&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 先左后右 </span></span>
<span class="line"><span style="color:#E1E4E8;">    Stack&lt;</span><span style="color:#F97583;">TreeNodes</span><span style="color:#E1E4E8;">&gt; s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Stack&lt;</span><span style="color:#F97583;">TreeNodes</span><span style="color:#E1E4E8;">&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    ArrayList&lt;ArrayList&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;ArrayList&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(pRoot.val); </span></span>
<span class="line"><span style="color:#E1E4E8;">    s1.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(pRoot); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (s1.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> s2.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s1.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> s2.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s2.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">s1.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s1.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().right </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().right.val); </span></span>
<span class="line"><span style="color:#E1E4E8;">                    s2.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().right); </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s1.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().left </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().left.val); </span></span>
<span class="line"><span style="color:#E1E4E8;">                    s2.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(s1.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().left); </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">                s1.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">s2.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s2.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().left </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s2.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().left.val); </span></span>
<span class="line"><span style="color:#E1E4E8;">                    s1.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(s2.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().left); </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (s2.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().right </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(s2.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().right.val); </span></span>
<span class="line"><span style="color:#E1E4E8;">                    s1.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(s2.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">().right); </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">                s2.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> list; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ArrayList</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ArrayList</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Print</span><span style="color:#24292E;">(TreeNodes pRoot) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 先右后左 </span></span>
<span class="line"><span style="color:#24292E;">    Stack&lt;</span><span style="color:#D73A49;">TreeNodes</span><span style="color:#24292E;">&gt; s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;</span><span style="color:#D73A49;">TreeNodes</span><span style="color:#24292E;">&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 先左后右 </span></span>
<span class="line"><span style="color:#24292E;">    Stack&lt;</span><span style="color:#D73A49;">TreeNodes</span><span style="color:#24292E;">&gt; s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;</span><span style="color:#D73A49;">TreeNodes</span><span style="color:#24292E;">&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    ArrayList&lt;ArrayList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;ArrayList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(pRoot.val); </span></span>
<span class="line"><span style="color:#24292E;">    s1.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(pRoot); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (s1.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> s2.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s1.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> s2.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s2.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">s1.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s1.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                    list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().right.val); </span></span>
<span class="line"><span style="color:#24292E;">                    s2.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().right); </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s1.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                    list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().left.val); </span></span>
<span class="line"><span style="color:#24292E;">                    s2.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().left); </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">                s1.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">s2.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s2.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().left </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                    list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s2.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().left.val); </span></span>
<span class="line"><span style="color:#24292E;">                    s1.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(s2.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().left); </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s2.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().right </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                    list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(s2.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().right.val); </span></span>
<span class="line"><span style="color:#24292E;">                    s1.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(s2.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">().right); </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">                s2.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_18-真题案例-三-力扣真题训练" tabindex="-1">18 | 真题案例（三）： 力扣真题训练 <a class="header-anchor" href="#_18-真题案例-三-力扣真题训练" aria-label="Permalink to &quot;18 \\| 真题案例（三）： 力扣真题训练&quot;">​</a></h4><p><strong>【问题】</strong> 给定一个链表，删除链表的倒数第 n 个节点。例如，给定一个链表: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5, 和 n = 2。当删除了倒数第二个节点后，链表变为 1 -&gt; 2 -&gt; 3 -&gt; 5。你可以假设，给定的 n 是有效的。额外要求就是，要在一趟扫描中实现，即时间复杂度是 O(n)。这里给你一个提示，可以采用快慢指针的方法。</p><p><strong>【解析】</strong> 定义快慢指针，slow 和 fast 并同时指向 header。然后，让 fast 指针先走 n 步。接着，让二者保持同样的速度，一起往前走。最后，fast 指针先到达终点，并指向了 null。此时，slow 指针的结果就是倒数第 n 个结点。比较简单，我们就不给代码了。</p><h4 id="_19-真题案例-四-大厂真题实战演练" tabindex="-1">19 | 真题案例（四）：大厂真题实战演练 <a class="header-anchor" href="#_19-真题案例-四-大厂真题实战演练" aria-label="Permalink to &quot;19 \\| 真题案例（四）：大厂真题实战演练&quot;">​</a></h4><p><strong>【问题】</strong> 小明从小就喜欢数学，喜欢在笔记里记录很多表达式。他觉得现在的表达式写法很麻烦，为了提高运算符优先级，不得不添加很多括号。如果不小心漏了一个右括号的话，就差之毫厘，谬之千里了。因此他改用前缀表达式，例如把 <code>(2 + 3) * 4</code>写成<code>* + 2 3 4</code>，这样就能避免使用括号了。这样的表达式虽然书写简单，但计算却不够直观。请你写一个程序帮他计算这些前缀表达式。</p><p><strong>【解析】</strong> 在这个题目中，输入就是前缀表达式，输出就是计算的结果。你可以假设除法为整除，即 &quot;5/3 = 1&quot;。例如，输入字符串为 + 2 3，输出 5；输入字符串为 * + 2 2 3，输出为 12；输入字符串为 * 2 + 2 3，输出为 10。</p><p>假设输入字符串为 * 2 + 2 3，即 2*(2+3)。第一个字符为运算符号 *，它将对两个数字进行乘法。如果后面紧接着的字符不全是数字字符，那就需要暂存下来，先计算后面的算式。一旦后面的计算完成，就需要接着从后往前去继续计算。因为从后往前是一种逆序动作，我们能够很自然地想到可以用栈的数据结构进行存储。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Stack&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; stack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Stack&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;* + 2 2 3&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    String attr[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> attr.length </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(attr[i].</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> attr[i].</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> attr[i].</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> attr[i].</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">))) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            stack.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(Integer.</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(attr[i])); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) stack.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">// 出栈 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) stack.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">// 出栈 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cal</span><span style="color:#E1E4E8;">(a, b, attr[i]); </span><span style="color:#6A737D;">// 调用函数计算结果值 </span></span>
<span class="line"><span style="color:#E1E4E8;">            stack.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(result); </span><span style="color:#6A737D;">// 结果进栈 </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) stack.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(ans); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cal</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b, String s) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (s) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;+&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> b; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> b; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) { </span></span>
<span class="line"><span style="color:#24292E;">    Stack&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; stack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;* + 2 2 3&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    String attr[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> attr.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(attr[i].</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> attr[i].</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> attr[i].</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> attr[i].</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">))) { </span></span>
<span class="line"><span style="color:#24292E;">            stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(Integer.</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(attr[i])); </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">// 出栈 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">// 出栈 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cal</span><span style="color:#24292E;">(a, b, attr[i]); </span><span style="color:#6A737D;">// 调用函数计算结果值 </span></span>
<span class="line"><span style="color:#24292E;">            stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(result); </span><span style="color:#6A737D;">// 结果进栈 </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(ans); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b, String s) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (s) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;+&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> b; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> b; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上这些练习题你做得怎么样呢？还能回忆起来每道题是源自哪个算法知识点或哪个课时吗？</p><p>你可以把课后习题和课程中的案例都当作一个小项目，自己动手实践，即使有些题目你还不能写出完整的代码，那也可以尝试写出解题思路，从看不明白到能够理解，再到能联想到用什么数据结构和算法去解决什么样的问题，这是一个循序渐进的过程，切勿着急。</p><p>通过留言可以看出，你们都在认真地学习这门课程，也正因如此，我才愿意付出更多的时间优化这个已经完结的专栏。所以，请你不要犹豫，尽管畅所欲言，在留言区留下你的思考，也欢迎你积极地提问，更欢迎你为专栏提出建议，这样我才能更直接地看到你们的想法和收获。也许你的一条留言，就是下一篇加餐的主题。</p><p>最后呢，我还想邀请你为本专栏课程进行结课评价，因为你的每一个观点，都是我们最关注的点。<a href="https://wj.qq.com/s2/6946469/226f/" target="_blank" rel="noreferrer">点击链接，即可参与课程评价。</a></p><p>很高兴遇见你，我是公瑾，后会有期。</p>`,69),t=[o];function e(c,r,E,y,i,F){return n(),a("div",null,t)}const u=s(p,[["render",e]]);export{D as __pageData,u as default};
