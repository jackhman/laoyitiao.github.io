import{_ as a,j as p,o as l,g as o,k as e,Q as t,s}from"./chunks/framework.4e7d56ce.js";const f=JSON.parse('{"title":"反射是什么？ ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5241) 15  运行时反射：字符串和结构体之间如何转换？.md","filePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5241) 15  运行时反射：字符串和结构体之间如何转换？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/22 讲通关 Go 语言_文档/(5241) 15  运行时反射：字符串和结构体之间如何转换？.md"},r=t(`<p>我们在开发中会接触很多字符串和结构体之间的转换，尤其是在调用 API 的时候，你需要把 API 返回的 JSON 字符串转换为 struct 结构体，便于操作。那么一个 JSON 字符串是如何转换为 struct 结构体的呢？这就需要用到反射的知识，这节课我会基于字符串和结构体之间的转换，一步步地为你揭开 Go 语言运行时反射的面纱。</p><h3 id="反射是什么" tabindex="-1">反射是什么？ <a class="header-anchor" href="#反射是什么" aria-label="Permalink to &quot;反射是什么？&quot;">​</a></h3><p>和 Java 语言一样，Go 语言也有运行时反射，这为我们提供了一种可以在运行时操作任意类型对象的能力。比如查看一个接口变量的具体类型、看看一个结构体有多少字段、修改某个字段的值等。</p><p>Go 语言是静态编译类语言，比如在定义一个变量的时候，已经知道了它是什么类型，那么为什么还需要反射呢？这是因为有些事情只有在运行时才知道。比如你定义了一个函数，它有一个**interface{}**类型的参数，这也就意味着调用者可以传递任何类型的参数给这个函数。在这种情况下，如果你想知道调用者传递的是什么类型的参数，就需要用到反射。如果你想知道一个结构体有哪些字段和方法，也需要反射。</p><p>还是以我常用的函数 fmt.Println 为例，如下所示：</p><p><em><strong>src/fmt/print.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">...interface</span><span style="color:#E1E4E8;">{}) (n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Fprintln</span><span style="color:#E1E4E8;">(os.Stdout, a</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">...interface</span><span style="color:#24292E;">{}) (n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Fprintln</span><span style="color:#24292E;">(os.Stdout, a</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>例子中 fmt.Println 的源代码有一个可变参数，类型为 interface{}，这意味着你可以传递零个或者多个任意类型参数给它，都能被正确打印。</p><h3 id="reflect-value-和-reflect-type" tabindex="-1">reflect.Value 和 reflect.Type <a class="header-anchor" href="#reflect-value-和-reflect-type" aria-label="Permalink to &quot;reflect.Value 和 reflect.Type&quot;">​</a></h3><p>在 Go 语言的反射定义中，任何接口都由两部分组成：接口的具体类型，以及具体类型对应的值。比如 var i int = 3，因为 interface{} 可以表示任何类型，所以变量 i 可以转为 interface{}。你可以把变量 i 当成一个接口，那么这个变量在 Go 反射中的表示就是 &lt;Value,Type&gt;。其中 Value 为变量的值，即 3，而 Type 为变量的类型，即 int。</p><blockquote><p>小提示：interface{} 是空接口，可以表示任何类型，也就是说你可以把任何类型转换为空接口，它通常用于反射、类型断言，以减少重复代码，简化编程。</p></blockquote><p>在 Go 反射中，标准库为我们提供了两种类型 reflect.Value 和 reflect.Type 来分别表示变量的值和类型，并且提供了两个函数 reflect.ValueOf 和 reflect.TypeOf 分别获取任意对象的 reflect.Value 和 reflect.Type。</p><p>我用下面的代码进行演示：</p><p><em><strong>ch15/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">   iv</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">ValueOf</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">   it</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">TypeOf</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(iv,it)</span><span style="color:#6A737D;">//3 int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">   iv</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">ValueOf</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">   it</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">TypeOf</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(iv,it)</span><span style="color:#6A737D;">//3 int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码定义了一个 int 类型的变量 i，它的值为 3，然后通过 reflect.ValueOf 和 reflect.TypeOf 函数就可以获得变量 i 对应的 reflect.Value 和 reflect.Type。通过 fmt.Println 函数打印后，可以看到结果是 3 int，这也可以证明 reflect.Value 表示的是变量的值，reflect.Type 表示的是变量的类型。</p><h3 id="reflect-value" tabindex="-1">reflect.Value <a class="header-anchor" href="#reflect-value" aria-label="Permalink to &quot;reflect.Value&quot;">​</a></h3><p>reflect.Value 可以通过函数 reflect.ValueOf 获得，下面我将为你介绍它的结构和用法。</p><h4 id="结构体定义" tabindex="-1">结构体定义 <a class="header-anchor" href="#结构体定义" aria-label="Permalink to &quot;结构体定义&quot;">​</a></h4><p>在 Go 语言中，reflect.Value 被定义为一个 struct 结构体，它的定义如下面的代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   typ </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rtype</span></span>
<span class="line"><span style="color:#E1E4E8;">   ptr unsafe.Pointer</span></span>
<span class="line"><span style="color:#E1E4E8;">   flag</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   typ </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rtype</span></span>
<span class="line"><span style="color:#24292E;">   ptr unsafe.Pointer</span></span>
<span class="line"><span style="color:#24292E;">   flag</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们发现 reflect.Value 结构体的字段都是私有的，也就是说，我们只能使用 reflect.Value 的方法。现在看看它有哪些常用方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//针对具体类型的系列方法</span></span>
<span class="line"><span style="color:#6A737D;">//以下是用于获取对应的值</span></span>
<span class="line"><span style="color:#E1E4E8;">Bool</span></span>
<span class="line"><span style="color:#E1E4E8;">Bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">Complex</span></span>
<span class="line"><span style="color:#E1E4E8;">Float</span></span>
<span class="line"><span style="color:#E1E4E8;">Int</span></span>
<span class="line"><span style="color:#E1E4E8;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">Uint</span></span>
<span class="line"><span style="color:#E1E4E8;">CanSet </span><span style="color:#6A737D;">//是否可以修改对应的值</span></span>
<span class="line"><span style="color:#E1E4E8;">以下是用于修改对应的值</span></span>
<span class="line"><span style="color:#E1E4E8;">Set</span></span>
<span class="line"><span style="color:#E1E4E8;">SetBool</span></span>
<span class="line"><span style="color:#E1E4E8;">SetBytes</span></span>
<span class="line"><span style="color:#E1E4E8;">SetComplex</span></span>
<span class="line"><span style="color:#E1E4E8;">SetFloat</span></span>
<span class="line"><span style="color:#E1E4E8;">SetInt</span></span>
<span class="line"><span style="color:#E1E4E8;">SetString</span></span>
<span class="line"><span style="color:#E1E4E8;">Elem </span><span style="color:#6A737D;">//获取指针指向的值，一般用于修改对应的值</span></span>
<span class="line"><span style="color:#6A737D;">//以下Field系列方法用于获取struct类型中的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">Field</span></span>
<span class="line"><span style="color:#E1E4E8;">FieldByIndex</span></span>
<span class="line"><span style="color:#E1E4E8;">FieldByName</span></span>
<span class="line"><span style="color:#E1E4E8;">FieldByNameFunc</span></span>
<span class="line"><span style="color:#E1E4E8;">Interface </span><span style="color:#6A737D;">//获取对应的原始类型</span></span>
<span class="line"><span style="color:#E1E4E8;">IsNil </span><span style="color:#6A737D;">//值是否为nil</span></span>
<span class="line"><span style="color:#E1E4E8;">IsZero </span><span style="color:#6A737D;">//值是否是零值</span></span>
<span class="line"><span style="color:#E1E4E8;">Kind </span><span style="color:#6A737D;">//获取对应的类型类别，比如Array、Slice、Map等</span></span>
<span class="line"><span style="color:#6A737D;">//获取对应的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">Method</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodByName</span></span>
<span class="line"><span style="color:#E1E4E8;">NumField </span><span style="color:#6A737D;">//获取struct类型中字段的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">NumMethod</span><span style="color:#6A737D;">//类型上方法集的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">Type</span><span style="color:#6A737D;">//获取对应的reflect.Type</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//针对具体类型的系列方法</span></span>
<span class="line"><span style="color:#6A737D;">//以下是用于获取对应的值</span></span>
<span class="line"><span style="color:#24292E;">Bool</span></span>
<span class="line"><span style="color:#24292E;">Bytes</span></span>
<span class="line"><span style="color:#24292E;">Complex</span></span>
<span class="line"><span style="color:#24292E;">Float</span></span>
<span class="line"><span style="color:#24292E;">Int</span></span>
<span class="line"><span style="color:#24292E;">String</span></span>
<span class="line"><span style="color:#24292E;">Uint</span></span>
<span class="line"><span style="color:#24292E;">CanSet </span><span style="color:#6A737D;">//是否可以修改对应的值</span></span>
<span class="line"><span style="color:#24292E;">以下是用于修改对应的值</span></span>
<span class="line"><span style="color:#24292E;">Set</span></span>
<span class="line"><span style="color:#24292E;">SetBool</span></span>
<span class="line"><span style="color:#24292E;">SetBytes</span></span>
<span class="line"><span style="color:#24292E;">SetComplex</span></span>
<span class="line"><span style="color:#24292E;">SetFloat</span></span>
<span class="line"><span style="color:#24292E;">SetInt</span></span>
<span class="line"><span style="color:#24292E;">SetString</span></span>
<span class="line"><span style="color:#24292E;">Elem </span><span style="color:#6A737D;">//获取指针指向的值，一般用于修改对应的值</span></span>
<span class="line"><span style="color:#6A737D;">//以下Field系列方法用于获取struct类型中的字段</span></span>
<span class="line"><span style="color:#24292E;">Field</span></span>
<span class="line"><span style="color:#24292E;">FieldByIndex</span></span>
<span class="line"><span style="color:#24292E;">FieldByName</span></span>
<span class="line"><span style="color:#24292E;">FieldByNameFunc</span></span>
<span class="line"><span style="color:#24292E;">Interface </span><span style="color:#6A737D;">//获取对应的原始类型</span></span>
<span class="line"><span style="color:#24292E;">IsNil </span><span style="color:#6A737D;">//值是否为nil</span></span>
<span class="line"><span style="color:#24292E;">IsZero </span><span style="color:#6A737D;">//值是否是零值</span></span>
<span class="line"><span style="color:#24292E;">Kind </span><span style="color:#6A737D;">//获取对应的类型类别，比如Array、Slice、Map等</span></span>
<span class="line"><span style="color:#6A737D;">//获取对应的方法</span></span>
<span class="line"><span style="color:#24292E;">Method</span></span>
<span class="line"><span style="color:#24292E;">MethodByName</span></span>
<span class="line"><span style="color:#24292E;">NumField </span><span style="color:#6A737D;">//获取struct类型中字段的数量</span></span>
<span class="line"><span style="color:#24292E;">NumMethod</span><span style="color:#6A737D;">//类型上方法集的数量</span></span>
<span class="line"><span style="color:#24292E;">Type</span><span style="color:#6A737D;">//获取对应的reflect.Type</span></span></code></pre></div><p>看着比较多，其实就三类：一类用于获取和修改对应的值；一类和 struct 类型的字段有关，用于获取对应的字段；一类和类型上的方法集有关，用于获取对应的方法。</p><p>下面我通过几个例子讲解如何使用它们。</p><h4 id="获取原始类型" tabindex="-1">获取原始类型 <a class="header-anchor" href="#获取原始类型" aria-label="Permalink to &quot;获取原始类型&quot;">​</a></h4><p>在上面的例子中，我通过 reflect.ValueOf 函数把任意类型的对象转为一个 reflect.Value，而如果想逆向转回来也可以，reflect.Value 为我们提供了 Inteface 方法，如下面的代码所示：</p><p><em><strong>ch15/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//int to reflect.Value</span></span>
<span class="line"><span style="color:#E1E4E8;">   iv</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">ValueOf</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//reflect.Value to int</span></span>
<span class="line"><span style="color:#E1E4E8;">   i1</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">iv.</span><span style="color:#79B8FF;">Interface</span><span style="color:#E1E4E8;">().(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(i1)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//int to reflect.Value</span></span>
<span class="line"><span style="color:#24292E;">   iv</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">ValueOf</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//reflect.Value to int</span></span>
<span class="line"><span style="color:#24292E;">   i1</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">iv.</span><span style="color:#005CC5;">Interface</span><span style="color:#24292E;">().(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(i1)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是 reflect.Value 和 int 类型互转，换成其他类型也可以。</p><h4 id="修改对应的值" tabindex="-1">修改对应的值 <a class="header-anchor" href="#修改对应的值" aria-label="Permalink to &quot;修改对应的值&quot;">​</a></h4><p>已经定义的变量可以通过反射在运行时修改，比如上面的示例 i=3，修改为 4，如下所示：</p><p><em><strong>ch15/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">   ipv</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">ValueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">i)</span></span>
<span class="line"><span style="color:#E1E4E8;">   ipv.</span><span style="color:#79B8FF;">Elem</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">SetInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">   ipv</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">ValueOf</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">i)</span></span>
<span class="line"><span style="color:#24292E;">   ipv.</span><span style="color:#005CC5;">Elem</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">SetInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样就通过反射修改了一个变量。因为 reflect.ValueOf 函数返回的是一份值的拷贝，所以我们要传入变量的指针才可以。 因为传递的是一个指针，所以需要调用 Elem 方法找到这个指针指向的值，这样才能修改。 最后我们就可以使用 SetInt 方法修改值了。</p><p>要修改一个变量的值，有几个关键点：传递指针（可寻址），通过 Elem 方法获取指向的值，才可以保证值可以被修改，reflect.Value 为我们提供了 CanSet 方法判断是否可以修改该变量。</p><p>那么如何修改 struct 结构体字段的值呢？参考变量的修改方式，可总结出以下步骤：</p><ol><li><p>传递一个 struct 结构体的指针，获取对应的 reflect.Value；</p></li><li><p>通过 Elem 方法获取指针指向的值；</p></li><li><p>通过 Field 方法获取要修改的字段；</p></li><li><p>通过 Set 系列方法修改成对应的值。</p></li></ol><p>运行下面的代码，你会发现变量 p 中的 Name 字段已经被修改为张三了。</p><p><em><strong>ch15/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">person{Name: </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">,Age: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   ppv</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">ValueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   ppv.</span><span style="color:#79B8FF;">Elem</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">Field</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">SetString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   Name </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">   Age </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">person{Name: </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">,Age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   ppv</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">ValueOf</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#24292E;">   ppv.</span><span style="color:#005CC5;">Elem</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">Field</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">SetString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   Name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">   Age </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后再来总结一下通过反射修改一个值的规则。</p><ol><li><p>可被寻址，通俗地讲就是要向 reflect.ValueOf 函数传递一个指针作为参数。</p></li><li><p>如果要修改 struct 结构体字段值的话，该字段需要是可导出的，而不是私有的，也就是该字段的首字母为大写。</p></li><li><p>记得使用 Elem 方法获得指针指向的值，这样才能调用 Set 系列方法进行修改。</p></li></ol><p>记住以上规则，你就可以在程序运行时通过反射修改一个变量或字段的值。</p><h4 id="获取对应的底层类型" tabindex="-1">获取对应的底层类型 <a class="header-anchor" href="#获取对应的底层类型" aria-label="Permalink to &quot;获取对应的底层类型&quot;">​</a></h4><p>底层类型是什么意思呢？其实对应的主要是基础类型，比如接口、结构体、指针......因为我们可以通过 type 关键字声明很多新的类型。比如在上面的例子中，变量 p 的实际类型是 person，但是 person 对应的底层类型是 struct 这个结构体类型，而 &amp;p 对应的则是指针类型。我们来通过下面的代码进行验证：</p><p><strong>ch15/main.go</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">person{Name: </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">,Age: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   ppv</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">ValueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(ppv.</span><span style="color:#79B8FF;">Kind</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">   pv</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">ValueOf</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(pv.</span><span style="color:#79B8FF;">Kind</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">person{Name: </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">,Age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   ppv</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">ValueOf</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(ppv.</span><span style="color:#005CC5;">Kind</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">   pv</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">ValueOf</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(pv.</span><span style="color:#005CC5;">Kind</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行以上代码，可以看到如下打印输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ptr</span></span>
<span class="line"><span style="color:#E1E4E8;">struct</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ptr</span></span>
<span class="line"><span style="color:#24292E;">struct</span></span></code></pre></div><p>Kind 方法返回一个 Kind 类型的值，它是一个常量，有以下可供使用的值：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Kind</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">uint</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">   Invalid Kind </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iota</span></span>
<span class="line"><span style="color:#E1E4E8;">   Bool</span></span>
<span class="line"><span style="color:#E1E4E8;">   Int</span></span>
<span class="line"><span style="color:#E1E4E8;">   Int8</span></span>
<span class="line"><span style="color:#E1E4E8;">   Int16</span></span>
<span class="line"><span style="color:#E1E4E8;">   Int32</span></span>
<span class="line"><span style="color:#E1E4E8;">   Int64</span></span>
<span class="line"><span style="color:#E1E4E8;">   Uint</span></span>
<span class="line"><span style="color:#E1E4E8;">   Uint8</span></span>
<span class="line"><span style="color:#E1E4E8;">   Uint16</span></span>
<span class="line"><span style="color:#E1E4E8;">   Uint32</span></span>
<span class="line"><span style="color:#E1E4E8;">   Uint64</span></span>
<span class="line"><span style="color:#E1E4E8;">   Uintptr</span></span>
<span class="line"><span style="color:#E1E4E8;">   Float32</span></span>
<span class="line"><span style="color:#E1E4E8;">   Float64</span></span>
<span class="line"><span style="color:#E1E4E8;">   Complex64</span></span>
<span class="line"><span style="color:#E1E4E8;">   Complex128</span></span>
<span class="line"><span style="color:#E1E4E8;">   Array</span></span>
<span class="line"><span style="color:#E1E4E8;">   Chan</span></span>
<span class="line"><span style="color:#E1E4E8;">   Func</span></span>
<span class="line"><span style="color:#E1E4E8;">   Interface</span></span>
<span class="line"><span style="color:#E1E4E8;">   Map</span></span>
<span class="line"><span style="color:#E1E4E8;">   Ptr</span></span>
<span class="line"><span style="color:#E1E4E8;">   Slice</span></span>
<span class="line"><span style="color:#E1E4E8;">   String</span></span>
<span class="line"><span style="color:#E1E4E8;">   Struct</span></span>
<span class="line"><span style="color:#E1E4E8;">   UnsafePointer</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Kind</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">uint</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">   Invalid Kind </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iota</span></span>
<span class="line"><span style="color:#24292E;">   Bool</span></span>
<span class="line"><span style="color:#24292E;">   Int</span></span>
<span class="line"><span style="color:#24292E;">   Int8</span></span>
<span class="line"><span style="color:#24292E;">   Int16</span></span>
<span class="line"><span style="color:#24292E;">   Int32</span></span>
<span class="line"><span style="color:#24292E;">   Int64</span></span>
<span class="line"><span style="color:#24292E;">   Uint</span></span>
<span class="line"><span style="color:#24292E;">   Uint8</span></span>
<span class="line"><span style="color:#24292E;">   Uint16</span></span>
<span class="line"><span style="color:#24292E;">   Uint32</span></span>
<span class="line"><span style="color:#24292E;">   Uint64</span></span>
<span class="line"><span style="color:#24292E;">   Uintptr</span></span>
<span class="line"><span style="color:#24292E;">   Float32</span></span>
<span class="line"><span style="color:#24292E;">   Float64</span></span>
<span class="line"><span style="color:#24292E;">   Complex64</span></span>
<span class="line"><span style="color:#24292E;">   Complex128</span></span>
<span class="line"><span style="color:#24292E;">   Array</span></span>
<span class="line"><span style="color:#24292E;">   Chan</span></span>
<span class="line"><span style="color:#24292E;">   Func</span></span>
<span class="line"><span style="color:#24292E;">   Interface</span></span>
<span class="line"><span style="color:#24292E;">   Map</span></span>
<span class="line"><span style="color:#24292E;">   Ptr</span></span>
<span class="line"><span style="color:#24292E;">   Slice</span></span>
<span class="line"><span style="color:#24292E;">   String</span></span>
<span class="line"><span style="color:#24292E;">   Struct</span></span>
<span class="line"><span style="color:#24292E;">   UnsafePointer</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>从以上源代码定义的 Kind 常量列表可以看到，已经包含了 Go 语言的所有底层类型。</p><h3 id="reflect-type" tabindex="-1">reflect.Type <a class="header-anchor" href="#reflect-type" aria-label="Permalink to &quot;reflect.Type&quot;">​</a></h3><p>reflect.Value 可以用于与值有关的操作中，而如果是和变量类型本身有关的操作，则最好使用 reflect.Type，比如要获取结构体对应的字段名称或方法。</p><p>要反射获取一个变量的 reflect.Type，可以通过函数 reflect.TypeOf。</p><h4 id="接口定义" tabindex="-1">接口定义 <a class="header-anchor" href="#接口定义" aria-label="Permalink to &quot;接口定义&quot;">​</a></h4><p>和 reflect.Value 不同，reflect.Type 是一个接口，而不是一个结构体，所以也只能使用它的方法。</p><p>以下是我列出来的 reflect.Type 接口常用的方法。从这个列表来看，大部分都和 reflect.Value 的方法功能相同。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Implements</span><span style="color:#E1E4E8;">(u Type) </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">AssignableTo</span><span style="color:#E1E4E8;">(u Type) </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">ConvertibleTo</span><span style="color:#E1E4E8;">(u Type) </span><span style="color:#F97583;">bool</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Comparable</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//以下这些方法和Value结构体的功能相同</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Kind</span><span style="color:#E1E4E8;">() Kind</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Method</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) Method</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">MethodByName</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (Method, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">NumMethod</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Elem</span><span style="color:#E1E4E8;">() Type</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Field</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) StructField</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">FieldByIndex</span><span style="color:#E1E4E8;">(index []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) StructField</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">FieldByName</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (StructField, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">FieldByNameFunc</span><span style="color:#E1E4E8;">(match </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">) (StructField, </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">NumField</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Implements</span><span style="color:#24292E;">(u Type) </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">AssignableTo</span><span style="color:#24292E;">(u Type) </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">ConvertibleTo</span><span style="color:#24292E;">(u Type) </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Comparable</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">bool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//以下这些方法和Value结构体的功能相同</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Kind</span><span style="color:#24292E;">() Kind</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Method</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) Method</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">MethodByName</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (Method, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">NumMethod</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Elem</span><span style="color:#24292E;">() Type</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">Field</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) StructField</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">FieldByIndex</span><span style="color:#24292E;">(index []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) StructField</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">FieldByName</span><span style="color:#24292E;">(name </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (StructField, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">FieldByNameFunc</span><span style="color:#24292E;">(match </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">) (StructField, </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">NumField</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中几个特有的方法如下：</p><ol><li><p>Implements 方法用于判断是否实现了接口 u；</p></li><li><p>AssignableTo 方法用于判断是否可以赋值给类型 u，其实就是是否可以使用 =，即赋值运算符；</p></li><li><p>ConvertibleTo 方法用于判断是否可以转换成类型 u，其实就是是否可以进行类型转换；</p></li><li><p>Comparable 方法用于判断该类型是否是可比较的，其实就是是否可以使用关系运算符进行比较。</p></li></ol><p>我同样会通过一些示例来讲解 reflect.Type 的使用。</p><h4 id="遍历结构体的字段和方法" tabindex="-1">遍历结构体的字段和方法 <a class="header-anchor" href="#遍历结构体的字段和方法" aria-label="Permalink to &quot;遍历结构体的字段和方法&quot;">​</a></h4><p>我还是采用上面示例中的 person 结构体进行演示，不过需要修改一下，为它增加一个方法 String，如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (p person) </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Name is </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">,Age is </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,p.Name,p.Age)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (p person) </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Name is </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">,Age is </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,p.Name,p.Age)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>新增一个 String 方法，返回对应的字符串信息，这样 person 这个 struct 结构体也实现了 fmt.Stringer 接口。</p><p>你可以通过 NumField 方法获取结构体字段的数量，然后使用 for 循环，通过 Field 方法就可以遍历结构体的字段，并打印出字段名称。同理，遍历结构体的方法也是同样的思路，代码也类似，如下所示：</p><p><em><strong>ch15/main.go</strong></em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">person{Name: </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">,Age: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   pt</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">TypeOf</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//遍历person的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pt.</span><span style="color:#79B8FF;">NumField</span><span style="color:#E1E4E8;">();i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;字段：&quot;</span><span style="color:#E1E4E8;">,pt.</span><span style="color:#79B8FF;">Field</span><span style="color:#E1E4E8;">(i).Name)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//遍历person的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pt.</span><span style="color:#79B8FF;">NumMethod</span><span style="color:#E1E4E8;">();i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;方法：&quot;</span><span style="color:#E1E4E8;">,pt.</span><span style="color:#79B8FF;">Method</span><span style="color:#E1E4E8;">(i).Name)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">person{Name: </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">,Age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   pt</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">TypeOf</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//遍历person的字段</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pt.</span><span style="color:#005CC5;">NumField</span><span style="color:#24292E;">();i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;字段：&quot;</span><span style="color:#24292E;">,pt.</span><span style="color:#005CC5;">Field</span><span style="color:#24292E;">(i).Name)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//遍历person的方法</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pt.</span><span style="color:#005CC5;">NumMethod</span><span style="color:#24292E;">();i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;方法：&quot;</span><span style="color:#24292E;">,pt.</span><span style="color:#005CC5;">Method</span><span style="color:#24292E;">(i).Name)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行这个代码，可以看到如下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">字段： Name</span></span>
<span class="line"><span style="color:#E1E4E8;">字段： Age</span></span>
<span class="line"><span style="color:#E1E4E8;">方法： String</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">字段： Name</span></span>
<span class="line"><span style="color:#24292E;">字段： Age</span></span>
<span class="line"><span style="color:#24292E;">方法： String</span></span></code></pre></div><p>这正好和我在结构体 person 中定义的一致，说明遍历成功。</p><blockquote><p>小技巧：你可以通过 FieldByName 方法获取指定的字段，也可以通过 MethodByName 方法获取指定的方法，这在需要获取某个特定的字段或者方法时非常高效，而不是使用遍历。</p></blockquote><h4 id="是否实现某接口" tabindex="-1">是否实现某接口 <a class="header-anchor" href="#是否实现某接口" aria-label="Permalink to &quot;是否实现某接口&quot;">​</a></h4><p>通过 reflect.Type 还可以判断是否实现了某接口。我还是以 person 结构体为例，判断它是否实现了接口 fmt.Stringer 和 io.Writer，如下面的代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">person{Name: </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">,Age: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   pt</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">TypeOf</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   stringerType</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">TypeOf</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">fmt.Stringer)(</span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)).</span><span style="color:#79B8FF;">Elem</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">   writerType</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">TypeOf</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">io.Writer)(</span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)).</span><span style="color:#79B8FF;">Elem</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;是否实现了fmt.Stringer：&quot;</span><span style="color:#E1E4E8;">,pt.</span><span style="color:#79B8FF;">Implements</span><span style="color:#E1E4E8;">(stringerType))</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;是否实现了io.Writer：&quot;</span><span style="color:#E1E4E8;">,pt.</span><span style="color:#79B8FF;">Implements</span><span style="color:#E1E4E8;">(writerType))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">person{Name: </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">,Age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   pt</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">TypeOf</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">   stringerType</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">TypeOf</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">fmt.Stringer)(</span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)).</span><span style="color:#005CC5;">Elem</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   writerType</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">TypeOf</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">io.Writer)(</span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)).</span><span style="color:#005CC5;">Elem</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是否实现了fmt.Stringer：&quot;</span><span style="color:#24292E;">,pt.</span><span style="color:#005CC5;">Implements</span><span style="color:#24292E;">(stringerType))</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是否实现了io.Writer：&quot;</span><span style="color:#24292E;">,pt.</span><span style="color:#005CC5;">Implements</span><span style="color:#24292E;">(writerType))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>小提示：尽可能通过类型断言的方式判断是否实现了某接口，而不是通过反射。</p></blockquote><p>这个示例通过 Implements 方法来判断是否实现了 fmt.Stringer 和 io.Writer 接口，运行它，你可以看到如下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">是否实现了fmt.Stringer： </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">是否实现了io.Writer： </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">是否实现了fmt.Stringer： </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">是否实现了io.Writer： </span><span style="color:#005CC5;">false</span></span></code></pre></div><p>因为结构体 person 只实现了 fmt.Stringer 接口，没有实现 io.Writer 接口，所以和验证的结果一致。</p><h3 id="字符串和结构体互转" tabindex="-1">字符串和结构体互转 <a class="header-anchor" href="#字符串和结构体互转" aria-label="Permalink to &quot;字符串和结构体互转&quot;">​</a></h3><p>在字符串和结构体互转的场景中，使用最多的就是 JSON 和 struct 互转。在这个小节中，我会用 JSON 和 struct 讲解 struct tag 这一功能的使用。</p><h4 id="json-和-struct-互转" tabindex="-1">JSON 和 Struct 互转 <a class="header-anchor" href="#json-和-struct-互转" aria-label="Permalink to &quot;JSON 和 Struct 互转&quot;">​</a></h4><p>Go 语言的标准库有一个 json 包，通过它可以把 JSON 字符串转为一个 struct 结构体，也可以把一个 struct 结构体转为一个 json 字符串。下面我还是以 person 这个结构体为例，讲解 JSON 和 struct 的相互转换。如下面的代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">person{Name: </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">,Age: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//struct to json</span></span>
<span class="line"><span style="color:#E1E4E8;">   jsonB,err</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">json.</span><span style="color:#79B8FF;">Marshal</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(jsonB))</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//json to struct</span></span>
<span class="line"><span style="color:#E1E4E8;">   respJSON</span><span style="color:#F97583;">:=</span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">Name</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">李四</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">,</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">Age</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:40}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   json.</span><span style="color:#79B8FF;">Unmarshal</span><span style="color:#E1E4E8;">([]</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(respJSON),</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">person{Name: </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">,Age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//struct to json</span></span>
<span class="line"><span style="color:#24292E;">   jsonB,err</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">json.</span><span style="color:#005CC5;">Marshal</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(jsonB))</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//json to struct</span></span>
<span class="line"><span style="color:#24292E;">   respJSON</span><span style="color:#D73A49;">:=</span><span style="color:#032F62;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">Name</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">李四</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">,</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">Age</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:40}&quot;</span></span>
<span class="line"><span style="color:#24292E;">   json.</span><span style="color:#005CC5;">Unmarshal</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(respJSON),</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个示例是我使用 Go 语言提供的 json 标准包做的演示。通过 json.Marshal 函数，你可以把一个 struct 转为 JSON 字符串。通过 json.Unmarshal 函数，你可以把一个 JSON 字符串转为 struct。</p><p>运行以上代码，你会看到如下结果输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;Age&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Name is 李四,Age is </span><span style="color:#79B8FF;">40</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Age&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Name is 李四,Age is </span><span style="color:#005CC5;">40</span></span></code></pre></div><p>仔细观察以上打印出的 JSON 字符串，你会发现 JSON 字符串的 Key 和 struct 结构体的字段名称一样，比如示例中的 Name 和 Age。那么是否可以改变它们呢？比如改成小写的 name 和 age，并且字段的名称还是大写的 Name 和 Age。当然可以，要达到这个目的就需要用到 struct tag 的功能了。</p><h4 id="struct-tag" tabindex="-1">Struct Tag <a class="header-anchor" href="#struct-tag" aria-label="Permalink to &quot;Struct Tag&quot;">​</a></h4><p>顾名思义，struct tag 是一个添加在 struct 字段上的标记，使用它进行辅助，可以完成一些额外的操作，比如 json 和 struct 互转。在上面的示例中，如果想把输出的 json 字符串的 Key 改为小写的 name 和 age，可以通过为 struct 字段添加 tag 的方式，示例代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   Name </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;name&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">   Age </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;age&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   Name </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;name&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">   Age </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;age&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为 struct 字段添加 tag 的方法很简单，只需要在字段后面通过反引号把一个键值对包住即可，比如以上示例中的 <code>json:&quot;name&quot;</code>。其中冒号前的 json 是一个 Key，可以通过这个 Key 获取冒号后对应的 name。</p><blockquote><p>小提示：json 作为 Key，是 Go 语言自带的 json 包解析 JSON 的一种约定，它会通过 json 这个 Key 找到对应的值，用于 JSON 的 Key 值。</p></blockquote><p>我们已经通过 struct tag 指定了可以使用 name 和 age 作为 json 的 Key，代码就可以修改成如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">respJSON</span><span style="color:#F97583;">:=</span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">name</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">李四</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">,</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">age</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:40}&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">respJSON</span><span style="color:#D73A49;">:=</span><span style="color:#032F62;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">name</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">李四</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">,</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">age</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:40}&quot;</span></span></code></pre></div><p>没错，JSON 字符串也可以使用小写的 name 和 age 了。现在再运行这段代码，你会看到如下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Name is 李四,Age is </span><span style="color:#79B8FF;">40</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Name is 李四,Age is </span><span style="color:#005CC5;">40</span></span></code></pre></div><p>输出的 JSON 字符串的 Key 是小写的 name 和 age，并且小写的 name 和 age JSON 字符串也可以转为 person 结构体。</p><p>相信你已经发现，struct tag 是整个 JSON 和 struct 互转的关键，这个 tag 就像是我们为 struct 字段起的别名，那么 json 包是如何获得这个 tag 的呢？这就需要反射了。我们来看下面的代码：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//遍历person字段中key为json的tag</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pt.</span><span style="color:#79B8FF;">NumField</span><span style="color:#E1E4E8;">();i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   sf</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">pt.</span><span style="color:#79B8FF;">Field</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;字段</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">上,json tag为</span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,sf.Name,sf.Tag.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;json&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//遍历person字段中key为json的tag</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pt.</span><span style="color:#005CC5;">NumField</span><span style="color:#24292E;">();i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   sf</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">pt.</span><span style="color:#005CC5;">Field</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;字段</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">上,json tag为</span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,sf.Name,sf.Tag.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;json&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>要想获得字段上的 tag，就要先反射获得对应的字段，我们可以通过 Field 方法做到。该方法返回一个 StructField 结构体，它有一个字段是 Tag，存有字段的所有 tag。示例中要获得 Key 为 json 的 tag，所以只需要调用 sf.Tag.Get(&quot;json&quot;) 即可。</p><p>结构体的字段可以有多个 tag，用于不同的场景，比如 json 转换、bson 转换、orm 解析等。如果有多个 tag，要使用空格分隔。采用不同的 Key 可以获得不同的 tag，如下面的代码所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//遍历person字段中key为json、bson的tag</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pt.</span><span style="color:#79B8FF;">NumField</span><span style="color:#E1E4E8;">();i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   sf</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">pt.</span><span style="color:#79B8FF;">Field</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;字段</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">上,json tag为</span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,sf.Name,sf.Tag.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;json&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;字段</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">上,bson tag为</span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,sf.Name,sf.Tag.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bson&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   Name </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;name&quot; bson:&quot;b_name&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">   Age </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;age&quot; bson:&quot;b_name&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//遍历person字段中key为json、bson的tag</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pt.</span><span style="color:#005CC5;">NumField</span><span style="color:#24292E;">();i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   sf</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">pt.</span><span style="color:#005CC5;">Field</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;字段</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">上,json tag为</span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,sf.Name,sf.Tag.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;json&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;字段</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">上,bson tag为</span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,sf.Name,sf.Tag.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bson&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   Name </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;name&quot; bson:&quot;b_name&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">   Age </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;age&quot; bson:&quot;b_name&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行代码，你可以看到如下结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">字段Name上,key为json的tag为name</span></span>
<span class="line"><span style="color:#E1E4E8;">字段Name上,key为bson的tag为b_name</span></span>
<span class="line"><span style="color:#E1E4E8;">字段Age上,key为json的tag为age</span></span>
<span class="line"><span style="color:#E1E4E8;">字段Age上,key为bson的tag为b_name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">字段Name上,key为json的tag为name</span></span>
<span class="line"><span style="color:#24292E;">字段Name上,key为bson的tag为b_name</span></span>
<span class="line"><span style="color:#24292E;">字段Age上,key为json的tag为age</span></span>
<span class="line"><span style="color:#24292E;">字段Age上,key为bson的tag为b_name</span></span></code></pre></div><p>可以看到，通过不同的 Key，使用 Get 方法就可以获得自定义的不同的 tag。</p><h4 id="实现-struct-转-json" tabindex="-1">实现 Struct 转 JSON <a class="header-anchor" href="#实现-struct-转-json" aria-label="Permalink to &quot;实现 Struct 转 JSON&quot;">​</a></h4><p>相信你已经理解了什么是 struct tag，下面我再通过一个 struct 转 json 的例子演示它的使用：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   p</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">person{Name: </span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">,Age: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">   pv</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">ValueOf</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   pt</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">reflect.</span><span style="color:#79B8FF;">TypeOf</span><span style="color:#E1E4E8;">(p)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//自己实现的struct to json</span></span>
<span class="line"><span style="color:#E1E4E8;">   jsonBuilder</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">strings.Builder{}</span></span>
<span class="line"><span style="color:#E1E4E8;">   jsonBuilder.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   num</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">pt.</span><span style="color:#79B8FF;">NumField</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">:=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">num;i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      jsonTag</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">pt.</span><span style="color:#79B8FF;">Field</span><span style="color:#E1E4E8;">(i).Tag.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;json&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//获取json tag</span></span>
<span class="line"><span style="color:#E1E4E8;">      jsonBuilder.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">jsonTag</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      jsonBuilder.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//获取字段的值</span></span>
<span class="line"><span style="color:#E1E4E8;">      jsonBuilder.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(fmt.</span><span style="color:#79B8FF;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;%v\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,pv.</span><span style="color:#79B8FF;">Field</span><span style="color:#E1E4E8;">(i)))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">num</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">         jsonBuilder.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   jsonBuilder.</span><span style="color:#79B8FF;">WriteString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(jsonBuilder.</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">())</span><span style="color:#6A737D;">//打印json字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">person{Name: </span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">,Age: </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">   pv</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">ValueOf</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">   pt</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">reflect.</span><span style="color:#005CC5;">TypeOf</span><span style="color:#24292E;">(p)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//自己实现的struct to json</span></span>
<span class="line"><span style="color:#24292E;">   jsonBuilder</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">strings.Builder{}</span></span>
<span class="line"><span style="color:#24292E;">   jsonBuilder.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   num</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">pt.</span><span style="color:#005CC5;">NumField</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">num;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      jsonTag</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">pt.</span><span style="color:#005CC5;">Field</span><span style="color:#24292E;">(i).Tag.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;json&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//获取json tag</span></span>
<span class="line"><span style="color:#24292E;">      jsonBuilder.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">jsonTag</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      jsonBuilder.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//获取字段的值</span></span>
<span class="line"><span style="color:#24292E;">      jsonBuilder.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(fmt.</span><span style="color:#005CC5;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;%v\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,pv.</span><span style="color:#005CC5;">Field</span><span style="color:#24292E;">(i)))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">num</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">         jsonBuilder.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   jsonBuilder.</span><span style="color:#005CC5;">WriteString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(jsonBuilder.</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">())</span><span style="color:#6A737D;">//打印json字符串</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是一个比较简单的 struct 转 json 示例，但是已经可以很好地演示 struct 的使用。在上述示例中，自定义的 jsonBuilder 负责 json 字符串的拼接，通过 for 循环把每一个字段拼接成 json 字符串。运行以上代码，你可以看到如下打印结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;飞雪无情&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;20&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;飞雪无情&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;20&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>json 字符串的转换只是 struct tag 的一个应用场景，你完全可以把 struct tag 当成结构体中字段的元数据配置，使用它来做想做的任何事情，比如 orm 映射、xml 转换、生成 swagger 文档等。</p><h3 id="反射定律" tabindex="-1">反射定律 <a class="header-anchor" href="#反射定律" aria-label="Permalink to &quot;反射定律&quot;">​</a></h3><p>反射是计算机语言中程序检视其自身结构的一种方法，它属于元编程的一种形式。反射灵活、强大，但也存在不安全。它可以绕过编译器的很多静态检查，如果过多使用便会造成混乱。为了帮助开发者更好地理解反射，Go 语言的作者在博客上总结了<a href="https://blog.golang.org/laws-of-reflection" target="_blank" rel="noreferrer">反射的三大定律</a>。</p><ol><li><p>任何接口值 interface{} 都可以反射出反射对象，也就是 reflect.Value 和 reflect.Type，通过函数 reflect.ValueOf 和 reflect.TypeOf 获得。</p></li><li><p>反射对象也可以还原为 interface{} 变量，也就是第 1 条定律的可逆性，通过 reflect.Value 结构体的 Interface 方法获得。</p></li><li><p>要修改反射的对象，该值必须可设置，也就是可寻址，参考上节课修改变量的值那一节的内容理解。</p></li></ol><blockquote><p>小提示：任何类型的变量都可以转换为空接口 intferface{}，所以第 1 条定律中函数 reflect.ValueOf 和 reflect.TypeOf 的参数就是 interface{}，表示可以把任何类型的变量转换为反射对象。在第 2 条定律中，reflect.Value 结构体的 Interface 方法返回的值也是 interface{}，表示可以把反射对象还原为对应的类型变量。</p></blockquote><p>一旦你理解了这三大定律，就可以更好地理解和使用 Go 语言反射。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在反射中，reflect.Value 对应的是变量的值，如果你需要进行和变量的值有关的操作，应该优先使用 reflect.Value，比如获取变量的值、修改变量的值等。reflect.Type 对应的是变量的类型，如果你需要进行和变量的类型本身有关的操作，应该优先使用 reflect.Type，比如获取结构体内的字段、类型拥有的方法集等。</p><p>此外我要再次强调：反射虽然很强大，可以简化编程、减少重复代码，但是过度使用会让你的代码变得复杂混乱。所以除非非常必要，否则尽可能少地使用它们。</p>`,122),E=s("p",null,"这节课的作业是：自己写代码运行通过反射调用结构体的方法。",-1),y=s("p",null,'下节课我将介绍"非类型安全：让你既爱又恨的 unsafe"，记得来听课！',-1);function i(F,u,d,g,C,m){const n=p("Image");return l(),o("div",null,[r,e(n,{alt:"go语言15金句.png",src:"https://s0.lgstatic.com/i/image2/M01/02/28/Cip5yF_Z2aWAS1bVAAVmaigbiLc421.png"}),E,y])}const B=a(c,[["render",i]]);export{f as __pageData,B as default};
