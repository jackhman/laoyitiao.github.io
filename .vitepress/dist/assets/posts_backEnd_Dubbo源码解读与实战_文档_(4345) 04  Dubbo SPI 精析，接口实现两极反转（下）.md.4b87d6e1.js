import{_ as p,j as o,o as e,g as t,k as n,h as a,Q as l,s as c}from"./chunks/framework.a0d18f64.js";const x=JSON.parse('{"title":"04DubboSPI精析，接口实现两极反转（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4345) 04  Dubbo SPI 精析，接口实现两极反转（下）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4345) 04  Dubbo SPI 精析，接口实现两极反转（下）.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4345) 04  Dubbo SPI 精析，接口实现两极反转（下）.md"},E=l('<h1 id="_04dubbospi精析-接口实现两极反转-下" tabindex="-1">04DubboSPI精析，接口实现两极反转（下） <a class="header-anchor" href="#_04dubbospi精析-接口实现两极反转-下" aria-label="Permalink to &quot;04DubboSPI精析，接口实现两极反转（下）&quot;">​</a></h1><p>在上一课时，我们一起学习了 JDK SPI 的基础使用以及核心原理，不过 Dubbo 并没有直接使用 JDK SPI 机制，而是借鉴其思想，实现了自身的一套 SPI 机制，这就是本课时将重点介绍的内容。</p><h3 id="dubbo-spi" tabindex="-1">Dubbo SPI <a class="header-anchor" href="#dubbo-spi" aria-label="Permalink to &quot;Dubbo SPI&quot;">​</a></h3><p>在开始介绍 Dubbo SPI 实现之前，我们先来统一下面两个概念。</p><ul><li><p><strong>扩展点</strong>：通过 SPI 机制查找并加载实现的接口（又称&quot;扩展接口&quot;）。前文示例中介绍的 Log 接口、com.mysql.cj.jdbc.Driver 接口，都是扩展点。</p></li><li><p><strong>扩展点实现</strong>：实现了扩展接口的实现类。</p></li></ul><p>通过前面的分析可以发现，JDK SPI 在查找扩展实现类的过程中，需要遍历 SPI 配置文件中定义的所有实现类，该过程中会将这些实现类全部实例化。如果 SPI 配置文件中定义了多个实现类，而我们只需要使用其中一个实现类时，就会生成不必要的对象。例如，org.apache.dubbo.rpc.Protocol 接口有 InjvmProtocol、DubboProtocol、RmiProtocol、HttpProtocol、HessianProtocol、ThriftProtocol 等多个实现，如果使用 JDK SPI，就会加载全部实现类，导致资源的浪费。</p><p><strong>Dubbo SPI 不仅解决了上述资源浪费的问题，还对 SPI 配置文件扩展和修改。</strong></p><p>首先，Dubbo 按照 SPI 配置文件的用途，将其分成了三类目录。</p><ul><li><p>META-INF/services/ 目录：该目录下的 SPI 配置文件用来兼容 JDK SPI 。</p></li><li><p>META-INF/dubbo/ 目录：该目录用于存放用户自定义 SPI 配置文件。</p></li><li><p>META-INF/dubbo/internal/ 目录：该目录用于存放 Dubbo 内部使用的 SPI 配置文件。</p></li></ul><p>然后，Dubbo 将 SPI 配置文件改成了 <strong>KV 格式</strong>，例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol</span></span></code></pre></div><p>其中 key 被称为扩展名（也就是 ExtensionName），当我们在为一个接口查找具体实现类时，可以指定扩展名来选择相应的扩展实现。例如，这里指定扩展名为 dubbo，Dubbo SPI 就知道我们要使用：org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol 这个扩展实现类，只实例化这一个扩展实现即可，无须实例化 SPI 配置文件中的其他扩展实现类。</p><p>使用 KV 格式的 SPI 配置文件的另一个好处是：让我们更容易定位到问题。假设我们使用的一个扩展实现类所在的 jar 包没有引入到项目中，那么 Dubbo SPI 在抛出异常的时候，会携带该扩展名信息，而不是简单地提示扩展实现类无法加载。这些更加准确的异常信息降低了排查问题的难度，提高了排查问题的效率。</p><p>下面我们正式进入 Dubbo SPI 核心实现的介绍。</p><h4 id="_1-spi-注解" tabindex="-1">1. @SPI 注解 <a class="header-anchor" href="#_1-spi-注解" aria-label="Permalink to &quot;1. @SPI 注解&quot;">​</a></h4><p>Dubbo 中某个接口被 @SPI注解修饰时，就表示该接口是<strong>扩展接口</strong>，前文示例中的 org.apache.dubbo.rpc.Protocol 接口就是一个扩展接口：</p>',16),y=c("p",null,"@SPI 注解的 value 值指定了默认的扩展名称，例如，在通过 Dubbo SPI 加载 Protocol 接口实现时，如果没有明确指定扩展名，则默认会将 @SPI 注解的 value 值作为扩展名，即加载 dubbo 这个扩展名对应的 org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol 这个扩展实现类，相关的 SPI 配置文件在 dubbo-rpc-dubbo 模块中，如下图所示：",-1),i=l(`<p><strong>那 ExtensionLoader 是如何处理 @SPI 注解的呢？</strong></p><p>ExtensionLoader 位于 dubbo-common 模块中的 extension 包中，功能类似于 JDK SPI 中的 java.util.ServiceLoader。Dubbo SPI 的核心逻辑几乎都封装在 ExtensionLoader 之中（其中就包括 @SPI 注解的处理逻辑），其使用方式如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Protocol protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader </span></span>
<span class="line"><span style="color:#E1E4E8;">   .</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Protocol.class).</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dubbo&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Protocol protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader </span></span>
<span class="line"><span style="color:#24292E;">   .</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Protocol.class).</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dubbo&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>这里首先来了解一下 ExtensionLoader 中三个核心的静态字段。</p><ul><li><strong>strategies（LoadingStrategy[]类型）:</strong> LoadingStrategy 接口有三个实现（通过 JDK SPI 方式加载的），如下图所示，分别对应前面介绍的三个 Dubbo SPI 配置文件所在的目录，且都继承了 Prioritized 这个优先级接口，默认优先级是</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> DubboInternalLoadingStrategy </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> DubboLoadingStrategy </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ServicesLoadingStrateg</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> DubboInternalLoadingStrategy </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> DubboLoadingStrategy </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ServicesLoadingStrateg</span></span></code></pre></div>`,6),d=l(`<ul><li><p><strong>EXTENSION_LOADERS（ConcurrentMap&lt;Class, ExtensionLoader&gt;类型）</strong></p><p>：Dubbo 中一个扩展接口对应一个 ExtensionLoader 实例，该集合缓存了全部 ExtensionLoader 实例，其中的 Key 为扩展接口，Value 为加载其扩展实现的 ExtensionLoader 实例。</p></li><li><p><strong>EXTENSION_INSTANCES（ConcurrentMap&lt;Class&lt;?&gt;, Object&gt;类型）</strong>：该集合缓存了扩展实现类与其实例对象的映射关系。在前文示例中，Key 为 Class，Value 为 DubboProtocol 对象。</p></li></ul><p>下面我们再来关注一下 ExtensionLoader 的实例字段。</p><ul><li><p><strong>type（Class&lt;?&gt;类型）</strong>：当前 ExtensionLoader 实例负责加载扩展接口。</p></li><li><p><strong>cachedDefaultName（String类型）</strong>：记录了 type 这个扩展接口上 @SPI 注解的 value 值，也就是默认扩展名。</p></li><li><p><strong>cachedNames（ConcurrentMap&lt;Class&lt;?&gt;, String&gt;类型）</strong>：缓存了该 ExtensionLoader 加载的扩展实现类与扩展名之间的映射关系。</p></li><li><p><strong>cachedClasses（Holder&lt;Map&lt;String, Class&lt;?&gt;&gt;&gt;类型）</strong>：缓存了该 ExtensionLoader 加载的扩展名与扩展实现类之间的映射关系。cachedNames 集合的反向关系缓存。</p></li><li><p><strong>cachedInstances（ConcurrentMap&lt;String, Holder<code>&lt;Object&gt;</code>&gt;类型）</strong>：缓存了该 ExtensionLoader 加载的扩展名与扩展实现对象之间的映射关系。</p></li></ul><p>ExtensionLoader.getExtensionLoader() 方法会根据扩展接口从 EXTENSION_LOADERS 缓存中查找相应的 ExtensionLoader 实例，核心实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ExtensionLoader</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    ExtensionLoader&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; loader </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">         (ExtensionLoader</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) EXTENSION_LOADERS.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (loader </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        EXTENSION_LOADERS.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(type, </span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ExtensionLoader&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;(type)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        loader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ExtensionLoader</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) EXTENSION_LOADERS.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loader; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ExtensionLoader</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type) { </span></span>
<span class="line"><span style="color:#24292E;">    ExtensionLoader&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; loader </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">         (ExtensionLoader</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) EXTENSION_LOADERS.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        EXTENSION_LOADERS.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(type, </span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ExtensionLoader&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;(type)); </span></span>
<span class="line"><span style="color:#24292E;">        loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ExtensionLoader</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) EXTENSION_LOADERS.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loader; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>得到接口对应的 ExtensionLoader 对象之后会调用其 getExtension() 方法，根据传入的扩展名称从 cachedInstances 缓存中查找扩展实现的实例，最终将其实例化后返回：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(String name) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// getOrCreateHolder()方法中封装了查找cachedInstances缓存的逻辑 </span></span>
<span class="line"><span style="color:#E1E4E8;">    Holder&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; holder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOrCreateHolder</span><span style="color:#E1E4E8;">(name); </span></span>
<span class="line"><span style="color:#E1E4E8;">    Object instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> holder.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// double-check防止并发问题 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (holder) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> holder.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 根据扩展名从SPI配置文件中查找对应的扩展实现类 </span></span>
<span class="line"><span style="color:#E1E4E8;">                instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createExtension</span><span style="color:#E1E4E8;">(name); </span></span>
<span class="line"><span style="color:#E1E4E8;">                holder.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(instance); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) instance; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(String name) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// getOrCreateHolder()方法中封装了查找cachedInstances缓存的逻辑 </span></span>
<span class="line"><span style="color:#24292E;">    Holder&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; holder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOrCreateHolder</span><span style="color:#24292E;">(name); </span></span>
<span class="line"><span style="color:#24292E;">    Object instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> holder.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// double-check防止并发问题 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (holder) { </span></span>
<span class="line"><span style="color:#24292E;">            instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> holder.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 根据扩展名从SPI配置文件中查找对应的扩展实现类 </span></span>
<span class="line"><span style="color:#24292E;">                instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createExtension</span><span style="color:#24292E;">(name); </span></span>
<span class="line"><span style="color:#24292E;">                holder.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(instance); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) instance; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 createExtension() 方法中完成了 SPI 配置文件的查找以及相应扩展实现类的实例化，同时还实现了自动装配以及自动 Wrapper 包装等功能。其核心流程是这样的：</p><ol><li><p>获取 cachedClasses 缓存，根据扩展名从 cachedClasses 缓存中获取扩展实现类。如果 cachedClasses 未初始化，则会扫描前面介绍的三个 SPI 目录获取查找相应的 SPI 配置文件，然后加载其中的扩展实现类，最后将扩展名和扩展实现类的映射关系记录到 cachedClasses 缓存中。这部分逻辑在 loadExtensionClasses() 和 loadDirectory() 方法中。</p></li><li><p>根据扩展实现类从 EXTENSION_INSTANCES 缓存中查找相应的实例。如果查找失败，会通过反射创建扩展实现对象。</p></li><li><p><strong>自动装配</strong>扩展实现对象中的属性（即调用其 setter）。这里涉及 ExtensionFactory 以及自动装配的相关内容，本课时后面会进行详细介绍。</p></li><li><p><strong>自动包装</strong>扩展实现对象。这里涉及 Wrapper 类以及自动包装特性的相关内容，本课时后面会进行详细介绍。</p></li><li><p>如果扩展实现类实现了 Lifecycle 接口，在 initExtension() 方法中会调用 initialize() 方法进行初始化。</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">createExtension</span><span style="color:#E1E4E8;">(String name) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; clazz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtensionClasses</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(name); </span><span style="color:#6A737D;">// --- 1 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (clazz </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findException</span><span style="color:#E1E4E8;">(name); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        T instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (T) EXTENSION_INSTANCES.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(clazz); </span><span style="color:#6A737D;">// --- 2 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            EXTENSION_INSTANCES.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(clazz, clazz.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (T) EXTENSION_INSTANCES.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(clazz); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">injectExtension</span><span style="color:#E1E4E8;">(instance); </span><span style="color:#6A737D;">// --- 3 </span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; wrapperClasses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cachedWrapperClasses; </span><span style="color:#6A737D;">// --- 4 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(wrapperClasses)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; wrapperClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> wrapperClasses) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">injectExtension</span><span style="color:#E1E4E8;">((T) wrapperClass.</span><span style="color:#B392F0;">getConstructor</span><span style="color:#E1E4E8;">(type).</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(instance)); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">initExtension</span><span style="color:#E1E4E8;">(instance); </span><span style="color:#6A737D;">// ---5</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Extension instance (name: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;, class: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                type </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;) couldn&#39;t be instantiated: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">(), t); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">createExtension</span><span style="color:#24292E;">(String name) { </span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtensionClasses</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(name); </span><span style="color:#6A737D;">// --- 1 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (clazz </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findException</span><span style="color:#24292E;">(name); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        T instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (T) EXTENSION_INSTANCES.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(clazz); </span><span style="color:#6A737D;">// --- 2 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            EXTENSION_INSTANCES.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(clazz, clazz.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (T) EXTENSION_INSTANCES.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(clazz); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">injectExtension</span><span style="color:#24292E;">(instance); </span><span style="color:#6A737D;">// --- 3 </span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; wrapperClasses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedWrapperClasses; </span><span style="color:#6A737D;">// --- 4 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(wrapperClasses)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; wrapperClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> wrapperClasses) { </span></span>
<span class="line"><span style="color:#24292E;">                instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">injectExtension</span><span style="color:#24292E;">((T) wrapperClass.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">(type).</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(instance)); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">initExtension</span><span style="color:#24292E;">(instance); </span><span style="color:#6A737D;">// ---5</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance; </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Extension instance (name: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, class: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                type </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;) couldn&#39;t be instantiated: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">(), t); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-adaptive-注解与适配器" tabindex="-1">2. @Adaptive 注解与适配器 <a class="header-anchor" href="#_2-adaptive-注解与适配器" aria-label="Permalink to &quot;2. @Adaptive 注解与适配器&quot;">​</a></h4><p>@Adaptive 注解用来实现 Dubbo 的适配器功能，那什么是适配器呢？这里我们通过一个示例进行说明。Dubbo 中的 ExtensionFactory 接口有三个实现类，如下图所示，ExtensionFactory 接口上有 @SPI 注解，AdaptiveExtensionFactory 实现类上有 @Adaptive 注解。</p>`,12),F=l(`<p>AdaptiveExtensionFactory 不实现任何具体的功能，而是用来适配 ExtensionFactory 的 SpiExtensionFactory 和 SpringExtensionFactory 这两种实现。AdaptiveExtensionFactory 会根据运行时的一些状态来选择具体调用 ExtensionFactory 的哪个实现。</p><p>@Adaptive 注解还可以加到接口方法之上，Dubbo 会动态生成适配器类。例如，Transporter接口有两个被 @Adaptive 注解修饰的方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;netty&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Transporter</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Adaptive</span><span style="color:#E1E4E8;">({Constants.SERVER_KEY, Constants.TRANSPORTER_KEY}) </span></span>
<span class="line"><span style="color:#E1E4E8;">    RemotingServer </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, ChannelHandler </span><span style="color:#FFAB70;">handler</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RemotingException; </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Adaptive</span><span style="color:#E1E4E8;">({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY}) </span></span>
<span class="line"><span style="color:#E1E4E8;">    Client </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, ChannelHandler </span><span style="color:#FFAB70;">handler</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RemotingException; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;netty&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Transporter</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Adaptive</span><span style="color:#24292E;">({Constants.SERVER_KEY, Constants.TRANSPORTER_KEY}) </span></span>
<span class="line"><span style="color:#24292E;">    RemotingServer </span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">, ChannelHandler </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RemotingException; </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Adaptive</span><span style="color:#24292E;">({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY}) </span></span>
<span class="line"><span style="color:#24292E;">    Client </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">, ChannelHandler </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RemotingException; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Dubbo 会生成一个 Transporter$Adaptive 适配器类，该类继承了 Transporter 接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Transporter$Adaptive</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Transporter</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> org.apache.dubbo.remoting.Client </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">arg0</span><span style="color:#E1E4E8;">, ChannelHandler </span><span style="color:#FFAB70;">arg1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> RemotingException { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 必须传递URL参数 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (arg0 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;url == null&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        URL url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arg0; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 确定扩展名，优先从URL中的client参数获取，其次是transporter参数 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这两个参数名称由@Adaptive注解指定，最后是@SPI注解中的默认值 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String extName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;client&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;transporter&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;netty&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (extName </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过ExtensionLoader加载Transporter接口的指定扩展实现 </span></span>
<span class="line"><span style="color:#E1E4E8;">        Transporter extension </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Transporter) ExtensionLoader </span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Transporter.class) </span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(extName); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> extension.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(arg0, arg1); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略bind()方法 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Transporter$Adaptive</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Transporter</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> org.apache.dubbo.remoting.Client </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">arg0</span><span style="color:#24292E;">, ChannelHandler </span><span style="color:#E36209;">arg1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> RemotingException { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 必须传递URL参数 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arg0 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;url == null&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        URL url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arg0; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 确定扩展名，优先从URL中的client参数获取，其次是transporter参数 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这两个参数名称由@Adaptive注解指定，最后是@SPI注解中的默认值 </span></span>
<span class="line"><span style="color:#24292E;">        String extName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;client&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;transporter&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;netty&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (extName </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过ExtensionLoader加载Transporter接口的指定扩展实现 </span></span>
<span class="line"><span style="color:#24292E;">        Transporter extension </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Transporter) ExtensionLoader </span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Transporter.class) </span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(extName); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> extension.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(arg0, arg1); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略bind()方法 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>生成 Transporter$Adaptive 这个类的逻辑位于 ExtensionLoader.createAdaptiveExtensionClass() 方法，若感兴趣你可以看一下相关代码，其中涉及的 javassist 等方面的知识，在后面的课时中我们会进行介绍。</p><p>明确了 @Adaptive 注解的作用之后，我们回到 ExtensionLoader.createExtension() 方法，其中在扫描 SPI 配置文件的时候，会调用 loadClass() 方法加载 SPI 配置文件中指定的类，如下图所示：</p>`,7),A=l(`<p>loadClass() 方法中会识别加载扩展实现类上的 @Adaptive 注解，将该扩展实现的类型缓存到 cachedAdaptiveClass 这个实例字段上（volatile修饰）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(){ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (clazz.</span><span style="color:#B392F0;">isAnnotationPresent</span><span style="color:#E1E4E8;">(Adaptive.class)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 缓存到cachedAdaptiveClass字段 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">cacheAdaptiveClass</span><span style="color:#E1E4E8;">(clazz, overridden);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> ... </span><span style="color:#6A737D;">// 省略其他分支 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadClass</span><span style="color:#24292E;">(){ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (clazz.</span><span style="color:#6F42C1;">isAnnotationPresent</span><span style="color:#24292E;">(Adaptive.class)) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 缓存到cachedAdaptiveClass字段 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">cacheAdaptiveClass</span><span style="color:#24292E;">(clazz, overridden);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> ... </span><span style="color:#6A737D;">// 省略其他分支 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以通过 ExtensionLoader.getAdaptiveExtension() 方法获取适配器实例，并将该实例缓存到 cachedAdaptiveInstance 字段（Holder类型）中，核心流程如下：</p><ul><li><p>首先，检查 cachedAdaptiveInstance 字段中是否已缓存了适配器实例，如果已缓存，则直接返回该实例即可。</p></li><li><p>然后，调用 getExtensionClasses() 方法，其中就会触发前文介绍的 loadClass() 方法，完成 cachedAdaptiveClass 字段的填充。</p></li><li><p>如果存在 @Adaptive 注解修饰的扩展实现类，该类就是适配器类，通过 newInstance() 将其实例化即可。如果不存在 @Adaptive 注解修饰的扩展实现类，就需要通过 createAdaptiveExtensionClass() 方法扫描扩展接口中方法上的 @Adaptive 注解，动态生成适配器类，然后实例化。</p></li><li><p>接下来，调用 injectExtension() 方法进行自动装配，就能得到一个完整的适配器实例。</p></li><li><p>最后，将适配器实例缓存到 cachedAdaptiveInstance 字段，然后返回适配器实例。</p></li></ul><p>getAdaptiveExtension() 方法的流程涉及多个方法，这里不再粘贴代码，感兴趣的同学可以参考上述流程分析相应源码。</p><p>此外，我们还可以通过 API 方式（addExtension() 方法）设置 cachedAdaptiveClass 这个字段，指定适配器类型（这个方法你知道即可）。</p><p>总之，适配器什么实际工作都不用做，就是根据参数和状态选择其他实现来完成工作。 。</p><h4 id="_3-自动包装特性" tabindex="-1">3. 自动包装特性 <a class="header-anchor" href="#_3-自动包装特性" aria-label="Permalink to &quot;3. 自动包装特性&quot;">​</a></h4><p>Dubbo 中的一个扩展接口可能有多个扩展实现类，这些扩展实现类可能会包含一些相同的逻辑，如果在每个实现类中都写一遍，那么这些重复代码就会变得很难维护。Dubbo 提供的自动包装特性，就可以解决这个问题。 Dubbo 将多个扩展实现类的公共逻辑，抽象到 Wrapper 类中，Wrapper 类与普通的扩展实现类一样，也实现了扩展接口，在获取真正的扩展实现对象时，在其外面包装一层 Wrapper 对象，你可以理解成一层装饰器。</p><p>了解了 Wrapper 类的基本功能，我们回到 ExtensionLoader.loadClass() 方法中，可以看到：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(){ </span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略前面对@Adaptive注解的处理 </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isWrapperClass</span><span style="color:#E1E4E8;">(clazz)) { </span><span style="color:#6A737D;">// ---1 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">cacheWrapperClass</span><span style="color:#E1E4E8;">(clazz); </span><span style="color:#6A737D;">// ---2 </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> ... </span><span style="color:#6A737D;">// 省略其他分支</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadClass</span><span style="color:#24292E;">(){ </span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略前面对@Adaptive注解的处理 </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isWrapperClass</span><span style="color:#24292E;">(clazz)) { </span><span style="color:#6A737D;">// ---1 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">cacheWrapperClass</span><span style="color:#24292E;">(clazz); </span><span style="color:#6A737D;">// ---2 </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> ... </span><span style="color:#6A737D;">// 省略其他分支</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol><li><p>在 isWrapperClass() 方法中，会判断该扩展实现类是否包含拷贝构造函数（即构造函数只有一个参数且为扩展接口类型），如果包含，则为 Wrapper 类，这就是判断 Wrapper 类的标准。</p></li><li><p>将 Wrapper 类记录到 cachedWrapperClasses（Set&lt;Class&lt;?&gt;&gt;类型）这个实例字段中进行缓存。</p></li></ol><p>前面在介绍 createExtension() 方法时的 4 处，有下面这段代码，其中会遍历全部 Wrapper 类并一层层包装到真正的扩展实例对象外层：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Set&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; wrapperClasses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cachedWrapperClasses;</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(wrapperClasses)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; wrapperClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> wrapperClasses) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">injectExtension</span><span style="color:#E1E4E8;">((T) wrapperClass </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">getConstructor</span><span style="color:#E1E4E8;">(type).</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(instance)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Set&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; wrapperClasses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedWrapperClasses;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(wrapperClasses)) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; wrapperClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> wrapperClasses) { </span></span>
<span class="line"><span style="color:#24292E;">        instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">injectExtension</span><span style="color:#24292E;">((T) wrapperClass </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">(type).</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(instance)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_4-自动装配特性" tabindex="-1">4. 自动装配特性 <a class="header-anchor" href="#_4-自动装配特性" aria-label="Permalink to &quot;4. 自动装配特性&quot;">​</a></h4><p>在 createExtension() 方法中我们看到，Dubbo SPI 在拿到扩展实现类的对象（以及 Wrapper 类的对象）之后，还会调用 injectExtension() 方法扫描其全部 setter 方法，并根据 setter 方法的名称以及参数的类型，加载相应的扩展实现，然后调用相应的 setter 方法填充属性，这就实现了 Dubbo SPI 的自动装配特性。简单来说，自动装配属性就是在加载一个扩展点的时候，将其依赖的扩展点一并加载，并进行装配。</p><p>下面简单看一下 injectExtension() 方法的具体实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">injectExtension</span><span style="color:#E1E4E8;">(T instance) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (objectFactory </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 检测objectFactory字段 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Method method </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> instance.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMethods</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 如果不是setter方法，忽略该方法(略) </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (method.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(DisableInject.class) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 如果方法上明确标注了@DisableInject注解，忽略该方法 </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据setter方法的参数，确定扩展接口 </span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; pt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">()[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]; </span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 如果参数为简单类型，忽略该setter方法(略) </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据setter方法的名称确定属性名称 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String property </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSetterProperty</span><span style="color:#E1E4E8;">(method); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 加载并实例化扩展实现类 </span></span>
<span class="line"><span style="color:#E1E4E8;">        Object object </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> objectFactory.</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(pt, property); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (object </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            method.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(instance, object); </span><span style="color:#6A737D;">// 调用setter方法进行装配 </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instance; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">injectExtension</span><span style="color:#24292E;">(T instance) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (objectFactory </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 检测objectFactory字段 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Method method </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> instance.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 如果不是setter方法，忽略该方法(略) </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (method.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(DisableInject.class) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 如果方法上明确标注了@DisableInject注解，忽略该方法 </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据setter方法的参数，确定扩展接口 </span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; pt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]; </span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 如果参数为简单类型，忽略该setter方法(略) </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据setter方法的名称确定属性名称 </span></span>
<span class="line"><span style="color:#24292E;">        String property </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSetterProperty</span><span style="color:#24292E;">(method); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 加载并实例化扩展实现类 </span></span>
<span class="line"><span style="color:#24292E;">        Object object </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> objectFactory.</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(pt, property); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (object </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(instance, object); </span><span style="color:#6A737D;">// 调用setter方法进行装配 </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instance; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>injectExtension() 方法实现的自动装配依赖了 ExtensionFactory（即 objectFactory 字段），前面我们提到过 ExtensionFactory 有 SpringExtensionFactory 和 SpiExtensionFactory 两个真正的实现（还有一个实现是 AdaptiveExtensionFactory 是适配器）。下面我们分别介绍下这两个真正的实现。</p><p><strong>第一个，SpiExtensionFactory。</strong> 根据扩展接口获取相应的适配器，没有到属性名称：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type, String name) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type.</span><span style="color:#B392F0;">isInterface</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> type.</span><span style="color:#B392F0;">isAnnotationPresent</span><span style="color:#E1E4E8;">(SPI.class)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 查找type对应的ExtensionLoader实例 </span></span>
<span class="line"><span style="color:#E1E4E8;">        ExtensionLoader&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; loader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(type); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">loader.</span><span style="color:#B392F0;">getSupportedExtensions</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loader.</span><span style="color:#B392F0;">getAdaptiveExtension</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取适配器实现 </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type, String name) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type.</span><span style="color:#6F42C1;">isInterface</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> type.</span><span style="color:#6F42C1;">isAnnotationPresent</span><span style="color:#24292E;">(SPI.class)) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 查找type对应的ExtensionLoader实例 </span></span>
<span class="line"><span style="color:#24292E;">        ExtensionLoader&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(type); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">loader.</span><span style="color:#6F42C1;">getSupportedExtensions</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loader.</span><span style="color:#6F42C1;">getAdaptiveExtension</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取适配器实现 </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第二个，SpringExtensionFactory。</strong> 将属性名称作为 Spring Bean 的名称，从 Spring 容器中获取 Bean：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type, String name) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 检查:type必须为接口且必须包含@SPI注解(略) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ApplicationContext context </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> CONTEXTS) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从Spring容器中查找Bean </span></span>
<span class="line"><span style="color:#E1E4E8;">        T bean </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BeanFactoryUtils.</span><span style="color:#B392F0;">getOptionalBean</span><span style="color:#E1E4E8;">(context,name,type); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bean; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type, String name) { </span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 检查:type必须为接口且必须包含@SPI注解(略) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ApplicationContext context </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> CONTEXTS) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从Spring容器中查找Bean </span></span>
<span class="line"><span style="color:#24292E;">        T bean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BeanFactoryUtils.</span><span style="color:#6F42C1;">getOptionalBean</span><span style="color:#24292E;">(context,name,type); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bean </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_5-activate注解与自动激活特性" tabindex="-1">5. @Activate注解与自动激活特性 <a class="header-anchor" href="#_5-activate注解与自动激活特性" aria-label="Permalink to &quot;5. @Activate注解与自动激活特性&quot;">​</a></h4><p>这里以 Dubbo 中的 Filter 为例说明自动激活特性的含义，org.apache.dubbo.rpc.Filter 接口有非常多的扩展实现类，在一个场景中可能需要某几个 Filter 扩展实现类协同工作，而另一个场景中可能需要另外几个实现类一起工作。这样，就需要一套配置来指定当前场景中哪些 Filter 实现是可用的，这就是 @Activate 注解要做的事情。</p><p>@Activate 注解标注在扩展实现类上，有 group、value 以及 order 三个属性。</p><ul><li><p>group 属性：修饰的实现类是在 Provider 端被激活还是在 Consumer 端被激活。</p></li><li><p>value 属性：修饰的实现类只在 URL 参数中出现指定的 key 时才会被激活。</p></li><li><p>order 属性：用来确定扩展实现类的排序。</p></li></ul><p>我们先来看 loadClass() 方法对 @Activate 的扫描，其中会将包含 @Activate 注解的实现类缓存到 cachedActivates 这个实例字段（Map&lt;String, Object&gt;类型，Key为扩展名，Value为 @Activate 注解）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(){ </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (clazz.</span><span style="color:#B392F0;">isAnnotationPresent</span><span style="color:#E1E4E8;">(Adaptive.class)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理@Adaptive注解 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">cacheAdaptiveClass</span><span style="color:#E1E4E8;">(clazz, overridden); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isWrapperClass</span><span style="color:#E1E4E8;">(clazz)) { </span><span style="color:#6A737D;">// 处理Wrapper类 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">cacheWrapperClass</span><span style="color:#E1E4E8;">(clazz); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 处理真正的扩展实现类 </span></span>
<span class="line"><span style="color:#E1E4E8;">        clazz.</span><span style="color:#B392F0;">getConstructor</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 扩展实现类必须有无参构造函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span><span style="color:#6A737D;">// 兜底:SPI配置文件中未指定扩展名称，则用类的简单名称作为扩展名(略) </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] names </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> NAME_SEPARATOR.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(name); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ArrayUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(names)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将包含@Activate注解的实现类缓存到cachedActivates集合中 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">cacheActivateClass</span><span style="color:#E1E4E8;">(clazz, names[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String n </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> names) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 在cachedNames集合中缓存实现类-&gt;扩展名的映射 </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">cacheName</span><span style="color:#E1E4E8;">(clazz, n);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 在cachedClasses集合中缓存扩展名-&gt;实现类的映射 </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">saveInExtensionClass</span><span style="color:#E1E4E8;">(extensionClasses, clazz, n, </span></span>
<span class="line"><span style="color:#E1E4E8;">                     overridden); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadClass</span><span style="color:#24292E;">(){ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (clazz.</span><span style="color:#6F42C1;">isAnnotationPresent</span><span style="color:#24292E;">(Adaptive.class)) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理@Adaptive注解 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">cacheAdaptiveClass</span><span style="color:#24292E;">(clazz, overridden); </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isWrapperClass</span><span style="color:#24292E;">(clazz)) { </span><span style="color:#6A737D;">// 处理Wrapper类 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">cacheWrapperClass</span><span style="color:#24292E;">(clazz); </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 处理真正的扩展实现类 </span></span>
<span class="line"><span style="color:#24292E;">        clazz.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 扩展实现类必须有无参构造函数 </span></span>
<span class="line"><span style="color:#24292E;">        ...</span><span style="color:#6A737D;">// 兜底:SPI配置文件中未指定扩展名称，则用类的简单名称作为扩展名(略) </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NAME_SEPARATOR.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(name); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ArrayUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(names)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将包含@Activate注解的实现类缓存到cachedActivates集合中 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">cacheActivateClass</span><span style="color:#24292E;">(clazz, names[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String n </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> names) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 在cachedNames集合中缓存实现类-&gt;扩展名的映射 </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">cacheName</span><span style="color:#24292E;">(clazz, n);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 在cachedClasses集合中缓存扩展名-&gt;实现类的映射 </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">saveInExtensionClass</span><span style="color:#24292E;">(extensionClasses, clazz, n, </span></span>
<span class="line"><span style="color:#24292E;">                     overridden); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用 cachedActivates 这个集合的地方是 getActivateExtension() 方法。首先来关注 getActivateExtension() 方法的参数：url 中包含了配置信息，values 是配置中指定的扩展名，group 为 Provider 或 Consumer。下面是 getActivateExtension() 方法的核心逻辑：</p><ol><li><p>首先，获取默认激活的扩展集合。默认激活的扩展实现类有几个条件：①在 cachedActivates 集合中存在；②@Activate 注解指定的 group 属性与当前 group 匹配；③扩展名没有出现在 values 中（即未在配置中明确指定，也未在配置中明确指定删除）；④URL 中出现了 @Activate 注解中指定的 Key。</p></li><li><p>然后，按照 @Activate 注解中的 order 属性对默认激活的扩展集合进行排序。</p></li><li><p>最后，按序添加自定义扩展实现类的对象。</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getActivateExtension</span><span style="color:#E1E4E8;">(URL url, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] values, </span></span>
<span class="line"><span style="color:#E1E4E8;">         String group) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; activateExtensions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// values配置就是扩展名 </span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; names </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> values </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(values); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">names.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(REMOVE_VALUE_PREFIX </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> DEFAULT_KEY)) {</span><span style="color:#6A737D;">// ---1 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getExtensionClasses</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 触发cachedActivates等缓存字段的加载 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; entry </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                  cachedActivates.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 扩展名 </span></span>
<span class="line"><span style="color:#E1E4E8;">            Object activate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// @Activate注解 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] activateGroup, activateValue; </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (activate </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> Activate) { </span><span style="color:#6A737D;">// @Activate注解中的配置 </span></span>
<span class="line"><span style="color:#E1E4E8;">                activateGroup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((Activate) activate).</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">                activateValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ((Activate) activate).</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isMatchGroup</span><span style="color:#E1E4E8;">(group, activateGroup) </span><span style="color:#6A737D;">// 匹配group </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 没有出现在values配置中的，即为默认激活的扩展实现 </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">names.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(name)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 通过&quot;-&quot;明确指定不激活该扩展实现 </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">names.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(REMOVE_VALUE_PREFIX </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 检测URL中是否出现了指定的Key </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isActive</span><span style="color:#E1E4E8;">(activateValue, url)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 加载扩展实现的实例对象，这些都是激活的 </span></span>
<span class="line"><span style="color:#E1E4E8;">                activateExtensions.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(name)); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 排序 --- 2 </span></span>
<span class="line"><span style="color:#E1E4E8;">        activateExtensions.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(ActivateComparator.COMPARATOR); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; loadedExtensions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> names.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// ---3 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> names.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过&quot;-&quot;开头的配置明确指定不激活的扩展实现，直接就忽略了 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">name.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(REMOVE_VALUE_PREFIX) </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">names.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(REMOVE_VALUE_PREFIX </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (DEFAULT_KEY.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(name)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">loadedExtensions.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 按照顺序，将自定义的扩展添加到默认扩展集合前面 </span></span>
<span class="line"><span style="color:#E1E4E8;">                    activateExtensions.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, loadedExtensions); </span></span>
<span class="line"><span style="color:#E1E4E8;">                    loadedExtensions.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">                loadedExtensions.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(name)); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">loadedExtensions.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 按照顺序，将自定义的扩展添加到默认扩展集合后面 </span></span>
<span class="line"><span style="color:#E1E4E8;">        activateExtensions.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(loadedExtensions); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> activateExtensions; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getActivateExtension</span><span style="color:#24292E;">(URL url, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] values, </span></span>
<span class="line"><span style="color:#24292E;">         String group) { </span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; activateExtensions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// values配置就是扩展名 </span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> values </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(values); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">names.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(REMOVE_VALUE_PREFIX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> DEFAULT_KEY)) {</span><span style="color:#6A737D;">// ---1 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getExtensionClasses</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 触发cachedActivates等缓存字段的加载 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                  cachedActivates.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 扩展名 </span></span>
<span class="line"><span style="color:#24292E;">            Object activate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// @Activate注解 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] activateGroup, activateValue; </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (activate </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Activate) { </span><span style="color:#6A737D;">// @Activate注解中的配置 </span></span>
<span class="line"><span style="color:#24292E;">                activateGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((Activate) activate).</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">                activateValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((Activate) activate).</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isMatchGroup</span><span style="color:#24292E;">(group, activateGroup) </span><span style="color:#6A737D;">// 匹配group </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 没有出现在values配置中的，即为默认激活的扩展实现 </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">names.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(name)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 通过&quot;-&quot;明确指定不激活该扩展实现 </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">names.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(REMOVE_VALUE_PREFIX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 检测URL中是否出现了指定的Key </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isActive</span><span style="color:#24292E;">(activateValue, url)) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 加载扩展实现的实例对象，这些都是激活的 </span></span>
<span class="line"><span style="color:#24292E;">                activateExtensions.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(name)); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 排序 --- 2 </span></span>
<span class="line"><span style="color:#24292E;">        activateExtensions.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(ActivateComparator.COMPARATOR); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; loadedExtensions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> names.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// ---3 </span></span>
<span class="line"><span style="color:#24292E;">        String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> names.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过&quot;-&quot;开头的配置明确指定不激活的扩展实现，直接就忽略了 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">name.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(REMOVE_VALUE_PREFIX) </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">names.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(REMOVE_VALUE_PREFIX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name)) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (DEFAULT_KEY.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(name)) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">loadedExtensions.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 按照顺序，将自定义的扩展添加到默认扩展集合前面 </span></span>
<span class="line"><span style="color:#24292E;">                    activateExtensions.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, loadedExtensions); </span></span>
<span class="line"><span style="color:#24292E;">                    loadedExtensions.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">                loadedExtensions.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(name)); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">loadedExtensions.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 按照顺序，将自定义的扩展添加到默认扩展集合后面 </span></span>
<span class="line"><span style="color:#24292E;">        activateExtensions.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(loadedExtensions); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> activateExtensions; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后举个简单的例子说明上述处理流程，假设 cachedActivates 集合缓存的扩展实现如下表所示：</p>`,33),g=l('<p>在 Provider 端调用 getActivateExtension() 方法时传入的 values 配置为 &quot;demoFilter3、-demoFilter2、default、demoFilter1&quot;，那么根据上面的逻辑：</p><ol><li><p>得到默认激活的扩展实实现集合中有 [ demoFilter4, demoFilter6 ]；</p></li><li><p>排序后为 [ demoFilter6, demoFilter4 ]；</p></li><li><p>按序添加自定义扩展实例之后得到 [ demoFilter3, demoFilter6, demoFilter4, demoFilter1 ]。</p></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们深入全面地讲解了 Dubbo SPI 的核心实现：首先介绍了 @SPI 注解的底层实现，这是 Dubbo SPI 最核心的基础；然后介绍了 @Adaptive 注解与动态生成适配器类的核心原理和实现；最后分析了 Dubbo SPI 中的自动包装和自动装配特性，以及 @Activate 注解的原理。</p><p>Dubbo SPI 是 Dubbo 框架实现扩展机制的核心，希望你仔细研究其实现，为后续源码分析过程打下基础。</p><p>也欢迎你在留言区分享你的学习心得和实践经验。</p>',6);function u(D,C,v,b,h,m){const s=o("Image");return e(),t("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/3E/A4/CgqCHl8s936AYuePAABLd6cRz6w646.png"}),a(),y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/3E/A4/CgqCHl8s94mAaj2mAABcaXHNXqc467.png"}),a(),i,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/3E/99/Ciqc1F8s95mANXYKAADUVwBlgxs297.png"}),a(),d,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/3E/99/Ciqc1F8s-D6AZFtdAAC318rtQ-I710.png"}),a(),F,n(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/3E/A5/CgqCHl8s-H2AJE1LAACILXqbtHY819.png"}),a(),A,n(s,{alt:"11.png",src:"https://s0.lgstatic.com/i/image/M00/3E/CB/CgqCHl8tNGCAIw8fAACXC_dle_g809.png"}),a(),g])}const _=p(r,[["render",u]]);export{x as __pageData,_ as default};
