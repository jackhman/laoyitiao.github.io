import{_ as o,j as e,o as t,h as c,k as l,f as n,s,Q as p}from"./chunks/framework.d3daa342.js";const I=JSON.parse('{"title":"21场景案例：如何用FlinkSQLCDC实现实时数据同步？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/21讲吃透实时流计算_文档/(6438) 21  场景案例：如何用 Flink SQL CDC 实现实时数据同步？.md","filePath":"posts/backEnd/21讲吃透实时流计算_文档/(6438) 21  场景案例：如何用 Flink SQL CDC 实现实时数据同步？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/21讲吃透实时流计算_文档/(6438) 21  场景案例：如何用 Flink SQL CDC 实现实时数据同步？.md"},E=s("h1",{id:"_21场景案例-如何用flinksqlcdc实现实时数据同步",tabindex:"-1"},[n("21场景案例：如何用FlinkSQLCDC实现实时数据同步？ "),s("a",{class:"header-anchor",href:"#_21场景案例-如何用flinksqlcdc实现实时数据同步","aria-label":'Permalink to "21场景案例：如何用FlinkSQLCDC实现实时数据同步？"'},"​")],-1),y=s("p",null,"今天我们来看第二个案例，也就是用 Flink SQL CDC 实现实时数据同步。",-1),i=s("p",null,"那究竟什么是 Flink SQL CDC 呢？毕竟这是个相对还比较新的技术，可能很多人都还没听说过这个技术，所以我们先从它诞生的业务场景说起。",-1),F=s("h3",{id:"业务场景",tabindex:"-1"},[n("业务场景 "),s("a",{class:"header-anchor",href:"#业务场景","aria-label":'Permalink to "业务场景"'},"​")],-1),C=s("p",null,"如果你是一名后端开发的话，相信十有八九遇到过这样的问题，有时候一种数据库满足不了业务的需求，我们需要将相同的数据，存入多种不同的数据库。",-1),u=s("p",null,"比如，最开始的时候业务比较简单，数据量也很小，数据只需要保存到 MySQL 中，作为主数据库即可。之后，随着业务的发展，数据量变得越来越大，为了提升查询效率，需要将数据写一份到 Redis 缓存。同时，业务查询也变得越来越复杂，为了提供更加灵活和高效的查询分析方式，需要将数据再写一份到 Elasticsearch 里。",-1),d=s("p",null,"面对以上这种情况，你会怎么做呢？一般情况下，我们首先想到的可能就是，改代码！改成类似于下面图 1 这样的方案。",-1),D=p("<p>在上面的图 1 中，我们直接在业务代码中，将数据写入了几种不同的数据库里，包括 MySQL、Redis 和 Elasticsearch。</p><p>这种方案看着简单，也很容易实现。但这种做法<strong>非常不好</strong>，原因是这样的：</p><ol><li><p>代码严重耦合，每次需要修改业务代码后重新测试和上线才行；</p></li><li><p>在业务系统中需要多次将数据写入不同数据库，严重影响业务代码性能；</p></li><li><p>增量同步前，需要先由人工（至少你要写脚本和执行脚本吧）做一次全量同步。</p></li></ol><p>一种好的改进方法，则是<strong>使用消息中间件</strong>，就像下面的图 2 这样。</p>",4),h=p("<p>在上面的图 2 中，首先由业务系统将数据写入 Kafka，然后由 Flink 从 Kafka 将消息读取出来，最后再写入不同的数据库。</p><p>这种做法最大的优点在于<strong>将业务系统和写入数据库的逻辑隔离开，降低了代码的耦合度</strong>，并且在业务中只需要写一次数据到 Kafka 即可，提升了业务系统的性能。</p><p>但它还是有几个缺点：</p><ol><li><p>还是需要修改代码，比如在写数据的地方埋点写入 Kafka；</p></li><li><p>增加了系统的复杂性，因为需要维护 Kafka，并且要开发写入数据库的代码。当需要写入的数据库和表比较多时，这种复杂性就更加严重了；</p></li><li><p>增量同步前，同样需要先由人工做一次全量同步。</p></li></ol><p>虽然有以上这些缺点，但不管怎样，这种方法在思路上都是值得遵循的。因为它可以解耦，并且性能会更好。特别是当我们有了 Flink 这种神器后，可以直接通过 Flink 从 Kafka 里读取出数据，然后高效地使用流计算技术写入各种数据库。</p><p>面对以上图 2 方案的缺点，咱们的 Flink 神器当然没有熟视无睹。所以，它基于 CDC 技术的思路，推出了 Flink CDC 实现。</p><p>CDC（Change Data Capture，变化数据捕获）正如其名，是一种捕获数据变化的技术。比如在 MySQL 做同步时，我们设置 MySQL<strong>从数据库</strong> （secondary database）来跟随<strong>主数据库</strong>（primary database）的 binlog 日志，从而将主数据库的所有数据变化同步到从数据库中，这其实就是一个 CDC 的使用场景。</p><p>而 Flink CDC 就是一种使用 Flink 流计算框架，来实现 CDC 功能的技术。比如，我们可以通过 Flink CDC 技术，先将主数据库的全量数据同步到另外的数据库中，然后再跟随主数据库的 binlog 日志，将所有增量的数据也实时同步到从数据库中。</p><p>由于 Flink CDC 将全量同步和增量同步的操作封装到了一起，并且因为 Flink 还支持 SQL 语句，所以最终我们只需要写几行简单的 SQL，就能轻松解决将同一份数据写入多种不同数据库的问题。</p><p>下面的图 3 就展示了使用 Flink CDC 进行数据同步的方案。</p>",10),g=p(`<p>从上面的图 3 可以看出，相比前面图 2 的方案，这里不需要再引入单独的 Kafka，也不需要我们修改业务系统的代码，只需要引入一个 Flink SQL CDC 工具，就能够同时实现数据的全量同步和增量同步。并且，由于 Flink SQL CDC 封装得很好，我们只需要写一些 SQL 就可以了。</p><p>Flink CDC 如此神奇，那它究竟是怎样实现的呢？接下来，我们就来看下 Flink CDC 的实现原理。</p><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p>我们以使用 Flink CDC 从 MySQL 中同步数据的情景，来讲解下 Flink CDC 的工作原理。</p><p>一般来说，Flink CDC 同步数据需要两个步骤。</p><ul><li><p><strong>第一步是将源数据库的数据全量同步到目标数据库；</strong></p></li><li><p><strong>第二步是跟随源数据库的 binlog 日志，将源数据库的所有变动，以增量数据的方式同步到目标数据库。</strong></p></li></ul><p>我们先来看将源数据库的数据<strong>全量同步</strong>到目标数据库的过程。Flink CDC 将这个过程称之为&quot;快照&quot;（sanpshot），具体步骤是这样的。</p><ol><li><p>Flink CDC 会获取一个全局读锁（global read lock），从而阻塞其他客户端往数据库写入数据。不用担心这个锁定时间会很长，因为它马上就会在第 5 步中被释放掉。</p></li><li><p>启动一个可重复读语义（repeatable read semantics）的事务，从而确保后续在该事务内的所有&quot;读&quot;操作都是在&quot;一致的快照&quot;（consistent snapshot）中进行。这一步中&quot;可重复读语义&quot;以及后续步骤只涉及&quot;读&quot;操作是非常关键的。因为只有在&quot;可重复读语义&quot;且不存在&quot;写&quot;操作的情况下， MySQL 的&quot;可重复读语义&quot;级别事务才不会存在&quot;幻读&quot;现象（<a href="https://stackoverflow.com/questions/47041215/innodb-mysql-select-query-locking?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">具体原因可以参考这个问题的两个回答</a>），这样才能保证后续做&quot;扫描&quot;和读取 binlog 位置时，它们的数据和时间点是对得上的。这就是&quot;一致的快照&quot;的含义，它保证了同步到目标数据库中的数据是完整的，并且和源数据库中的数据是完全相同的，既不会多一条，也不会少一条。</p></li><li><p>读取当前 binlog 的位置。</p></li><li><p>读取 Flink CDC 配置指定的数据库和表定义(schema)。</p></li><li><p>释放步骤 1 中的全局读锁。这个时候其他的客户端就可以继续往数据库中写入数据了。从步骤 1 到步骤 5，Flink CDC 并没有做非常耗时的任务，所以全局锁定的时间很短，这样对业务运行的影响可以尽量降至最小。</p></li><li><p>将步骤 4 读取的数据库和表定义，作用到目标数据库上。</p></li><li><p>对数据库里的表进行全表扫描，将读取出的每条记录，都发送到目标数据库。</p></li><li><p>完成全表扫描后，提交（commit）步骤 2 时启动的可重复读语义事务。</p></li><li><p>将步骤 3 读取的 binlog 位置记录下来，表明本次数据全量同步过程（也就是&quot;快照&quot;）成功完成。后续做增量同步时，如果发现没有这个 binlog 位置记录，就意味着数据全量同步过程是失败的，可以重新再做一次步骤 1 到步骤 9，直到全量同步成功为止。</p></li></ol><p>可以看出，数据全量同步的过程还是比较复杂的，但好在 Flink CDC 的<a href="https://github.com/ververica/flink-cdc-connectors/wiki/MySQL-CDC-Connector?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">flink-connector-mysql-cdc 连接器插件</a>已经为我们实现了这个过程，所以我们直接使用它就好了。</p><p>完成数据全量同步后，后面的<strong>增量同步</strong> 过程就相对简单了，直接跟随源数据库的 binlog 日志，然后将每次的数据变更同步到目标数据库即可。增量同步过程中，Flink 自己会<strong>周期性地执行 checkpoint 操作</strong>，从而记录下当时增量同步到的 binlog 位置。</p><p>这样，如果 Flink CDC 作业（job）因为发生故障而重启的话，也能够从最近一次 checkpoint 处，<strong>恢复出故障发生前的状态</strong>，从而继续执行之前的过程。</p><p>最后，再配合<strong>写入目标数据库时是幂等性的操作</strong> 。这样，就保证了 Flink CDC 的整个数据同步过程，<strong>能够达到 exactly once 级别的数据处理可靠性</strong>。是不是非常惊艳！</p><p>以上就是 Flink CDC 的工作原理。接下来，我们就具体展示下，如何使用 Flink CDC 技术，进行实时数据同步。</p><h3 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-label="Permalink to &quot;具体实现&quot;">​</a></h3><p>我们这里以将 MySQL 里的数据实时同步到 Elasticsearch 为例。Flink CDC 的具体实现方式有两种，一种是基于 DataStream（<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/connectors/elasticsearch.html?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">参见链接</a>）的方式，另一种是基于 Table &amp; SQL（<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/connectors/elasticsearch.html?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">参见链接</a>）的方式。我们说的 Flink SQL CDC 就是指基于 Table &amp; SQL 方式的 Flink CDC 实现。</p><p>由于 Flink SQL 在经过解析之后，最终也会转化为基于 DataStream 的底层代码。所以我先演示直接使用 DataStream 的方式，然后再演示使用 SQL 的方式，这样更加有助于理解。</p><h4 id="基于-datastream-的方式" tabindex="-1">基于 DataStream 的方式 <a class="header-anchor" href="#基于-datastream-的方式" aria-label="Permalink to &quot;基于 DataStream 的方式&quot;">​</a></h4><p>我们先来看基于 DataStream 的方式。具体代码如下（<a href="https://github.com/alain898/realtime_stream_computing_course/tree/main/course21?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">完整代码和操作说明参看这里</a>）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FlinkCdcDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 源数据库，下面是以 MySQL 作为源数据库的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        SourceFunction&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; sourceFunction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MySQLSource.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">hostname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3306</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">databaseList</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db001&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">username</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">)       </span><span style="color:#6A737D;">// 测试用，生产不要用root账号！</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">password</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">)     </span><span style="color:#6A737D;">// 测试用，生产不要用这种简单密码！</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">deserializer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringDebeziumDeserializationSchema</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 目标数据库，下面是以 Elasticsearch 作为目标数据库的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">HttpHost</span><span style="color:#E1E4E8;">&gt; httpHosts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        httpHosts.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpHost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9200</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        ElasticsearchSink.Builder&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; esSinkBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ElasticsearchSink.Builder&lt;&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">                httpHosts,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ElasticsearchSinkFunction&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> IndexRequest </span><span style="color:#B392F0;">createIndexRequest</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 这里直接将数据 element 表示为字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">                        json.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, element);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Requests.</span><span style="color:#B392F0;">indexRequest</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                                .</span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;table001&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                                .</span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">(json);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">, RuntimeContext </span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, RequestIndexer </span><span style="color:#FFAB70;">indexer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 这里就是将数据同步到目标数据库 Elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">                        indexer.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createIndexRequest</span><span style="color:#E1E4E8;">(element));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 实验时配置逐条插入，生产为了提升性能的话，可以改为批量插入</span></span>
<span class="line"><span style="color:#E1E4E8;">        esSinkBuilder.</span><span style="color:#B392F0;">setBulkFlushMaxActions</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        StreamExecutionEnvironment env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StreamExecutionEnvironment.</span><span style="color:#B392F0;">getExecutionEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        env</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">addSource</span><span style="color:#E1E4E8;">(sourceFunction)  </span><span style="color:#6A737D;">// 设置源数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">addSink</span><span style="color:#E1E4E8;">(esSinkBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">())  </span><span style="color:#6A737D;">// 设置目标数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setParallelism</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 设置并行度为1，以保持消息顺序</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;FlinkCdcDemo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FlinkCdcDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 源数据库，下面是以 MySQL 作为源数据库的配置</span></span>
<span class="line"><span style="color:#24292E;">        SourceFunction&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; sourceFunction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MySQLSource.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">hostname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3306</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">databaseList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db001&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">username</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">)       </span><span style="color:#6A737D;">// 测试用，生产不要用root账号！</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">password</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">)     </span><span style="color:#6A737D;">// 测试用，生产不要用这种简单密码！</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">deserializer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringDebeziumDeserializationSchema</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 目标数据库，下面是以 Elasticsearch 作为目标数据库的配置</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">HttpHost</span><span style="color:#24292E;">&gt; httpHosts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        httpHosts.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpHost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9200</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        ElasticsearchSink.Builder&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; esSinkBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ElasticsearchSink.Builder&lt;&gt;(</span></span>
<span class="line"><span style="color:#24292E;">                httpHosts,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ElasticsearchSinkFunction&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> IndexRequest </span><span style="color:#6F42C1;">createIndexRequest</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">element</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 这里直接将数据 element 表示为字符串</span></span>
<span class="line"><span style="color:#24292E;">                        json.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, element);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Requests.</span><span style="color:#6F42C1;">indexRequest</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                                .</span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;table001&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                                .</span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">(json);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">element</span><span style="color:#24292E;">, RuntimeContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, RequestIndexer </span><span style="color:#E36209;">indexer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 这里就是将数据同步到目标数据库 Elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">                        indexer.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createIndexRequest</span><span style="color:#24292E;">(element));</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 实验时配置逐条插入，生产为了提升性能的话，可以改为批量插入</span></span>
<span class="line"><span style="color:#24292E;">        esSinkBuilder.</span><span style="color:#6F42C1;">setBulkFlushMaxActions</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        StreamExecutionEnvironment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StreamExecutionEnvironment.</span><span style="color:#6F42C1;">getExecutionEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        env</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">addSource</span><span style="color:#24292E;">(sourceFunction)  </span><span style="color:#6A737D;">// 设置源数据库</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">addSink</span><span style="color:#24292E;">(esSinkBuilder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">())  </span><span style="color:#6A737D;">// 设置目标数据库</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setParallelism</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 设置并行度为1，以保持消息顺序</span></span>
<span class="line"><span style="color:#24292E;">        env.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;FlinkCdcDemo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的代码中，我们首先使用 MySQLSource 类配置了一个 MySQL 源数据库。然后，我们再使用 ElasticsearchSink 类配置了一个 Elasticsearch 目标数据库。最后，我们使用 addSource 和 addSink 函数，将源数据库和目标数据库之间的数据同步链路打通。这样，我们就实现了基于 DataStream 的 Flink CDC 实时数据同步功能。</p><p>可以看到，上面的代码还是非常简单的。主要的原因在于 MySQLSource 这个 CDC Connector 为我们封装了所有的复杂操作，这些复杂操作就包括我们在实现原理部分讲到的&quot;全量同步&quot;和&quot;增量同步&quot;的实现细节。</p><p>不过，上面的代码并不完美，它主要有两个问题：</p><ol><li><p>一是，同步数据时，写入 Elasticsearch 的数据是字符串，而不是经过解析的各个独立字段。这样就会导致很多没有用的字段也保存到了 Elasticsearch ，并且后续查询的效率会非常低。</p></li><li><p>二是，还是需要写一些代码。虽然上面的代码并不复杂，但是毕竟还是没有 SQL 方便。</p></li></ol><p>为了解决以上两个问题，接下来我们就使用 Table &amp; SQL 的方式来实现 Flink CDC 功能，这就是 Flink SQL CDC。你会发现，我们真的就只需要写几行 SQL 语句，就能轻松解决上面两个问题。</p><h4 id="基于-table-sql-方式" tabindex="-1">基于 Table &amp; SQL 方式 <a class="header-anchor" href="#基于-table-sql-方式" aria-label="Permalink to &quot;基于 Table \\&amp; SQL 方式&quot;">​</a></h4><p>下面就是基于 Table &amp; SQL 方式实现 Flink CDC 功能的代码（<a href="https://github.com/alain898/realtime_stream_computing_course/tree/main/course21?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">完整代码和操作说明参看这里</a>）。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- 在 Flink SQL Client 里执行以下 SQL。</span></span>
<span class="line"><span style="color:#6A737D;">-- 创建源数据库</span></span>
<span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sourceTable</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  id </span><span style="color:#F97583;">INT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;"> STRING,</span></span>
<span class="line"><span style="color:#E1E4E8;">  counts </span><span style="color:#F97583;">INT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">description</span><span style="color:#E1E4E8;"> STRING</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">WITH</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;connector&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mysql-cdc&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hostname&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;192.168.1.7&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;port&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;3306&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123456&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;database-name&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;db001&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;table-name&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;table001&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">-- 创建目标数据库</span></span>
<span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sinkTable</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  id </span><span style="color:#F97583;">INT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;"> STRING,</span></span>
<span class="line"><span style="color:#E1E4E8;">  counts </span><span style="color:#F97583;">INT</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">WITH</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;connector&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;elasticsearch-7&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;hosts&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://192.168.1.7:9200&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;index&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;table001&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">-- 启动 Flink SQL CDC 作业</span></span>
<span class="line"><span style="color:#F97583;">insert into</span><span style="color:#E1E4E8;"> sinkTable </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> id, </span><span style="color:#F97583;">name</span><span style="color:#E1E4E8;">, counts </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sourceTable;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- 在 Flink SQL Client 里执行以下 SQL。</span></span>
<span class="line"><span style="color:#6A737D;">-- 创建源数据库</span></span>
<span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sourceTable</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  id </span><span style="color:#D73A49;">INT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">name</span><span style="color:#24292E;"> STRING,</span></span>
<span class="line"><span style="color:#24292E;">  counts </span><span style="color:#D73A49;">INT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">description</span><span style="color:#24292E;"> STRING</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">WITH</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;connector&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mysql-cdc&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hostname&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;192.168.1.7&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;port&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;3306&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123456&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;database-name&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;db001&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;table-name&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;table001&#39;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">-- 创建目标数据库</span></span>
<span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sinkTable</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  id </span><span style="color:#D73A49;">INT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">name</span><span style="color:#24292E;"> STRING,</span></span>
<span class="line"><span style="color:#24292E;">  counts </span><span style="color:#D73A49;">INT</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">WITH</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;connector&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;elasticsearch-7&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;hosts&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://192.168.1.7:9200&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;index&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;table001&#39;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">-- 启动 Flink SQL CDC 作业</span></span>
<span class="line"><span style="color:#D73A49;">insert into</span><span style="color:#24292E;"> sinkTable </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> id, </span><span style="color:#D73A49;">name</span><span style="color:#24292E;">, counts </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sourceTable;</span></span></code></pre></div><p>看到没！只需要简简单单三个 SQL 语句，就实现了 Flink CDC 的功能。</p><p>其中，CREATE TABLE sourceTable 是在配置一个 MySQL 源数据库，CREATE TABLE sinkTable 是在配置一个 Elasticsearch 目标数据库。而 insert into select from 则是指定了需要从源数据库向目标数据库<strong>同步哪些字段</strong>，并且它会触发启动这个 Flink CDC 作业。</p><p>当启动 Flink CDC 作业后，如果我们向 MySQL 写入数据，你就可以看到数据从 MySQL 同步到 Elasticsearch 的效果了。</p><p>下面的图 4 就是 Flink CDC 数据同步的效果图。</p>`,31),k=s("p",null,"图 4 使用 Flink CDC 实时同步数据的效果图",-1),S=s("p",null,"从上面的图 4 可以看出，左边源数据库 MySQL 里的数据和右边目标数据库 Elasticsearch 里的数据是完全对应的。并且，同步到 Elasticsearch 里数据的字段，也是和我们在 insert into select from 语句里指定的字段是完全一致的。你看，Flink SQL CDC 实现实时数据同步的效果是不是很不错！",-1),m=s("p",null,[n("最后还需要说明下的是，这里我为了专注于讲解 Flink CDC 的工作原理本身，就使用了相对简单的 SQL 语句。其实，Flink SQL CDC 是可以使用一些更加复杂的 SQL 语句，来实现更加丰富的数据同步功能的。比如，使用 GROUP BY 分组和使用 Window 进行窗口计算等。对于这些更完整和更复杂的 Flink SQL 语句说明，你可以参考"),s("a",{href:"https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/sql/?fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"这里的官方文档"),n("。")],-1),A=s("h3",{id:"小结",tabindex:"-1"},[n("小结 "),s("a",{class:"header-anchor",href:"#小结","aria-label":'Permalink to "小结"'},"​")],-1),_=s("p",null,"总的来说，相比 DataStream 的方式，Flink SQL CDC 使用起来会更加方便些。但这两种方式我们都需要掌握，因为目前 Flink SQL CDC 还不算非常成熟，一些 Flink SQL 暂时不支持的功能和插件，还是需要我们自己基于 DataStream 在底层实现。",-1),q=s("p",null,"你的工作中有没有可以使用到 Flink CDC，或者用 Flink CDC 进行改造的场景呢？可以将你的想法或问题写在留言区。",-1),b=s("p",null,"下面是本课时的知识脑图。",-1);function B(L,T,Q,x,f,v){const a=e("Image");return t(),c("div",null,[E,y,i,F,C,u,d,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/2D/90/Cgp9HWBmt66ACLVqAABVxuvt-SA692.png"}),n(),D,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/2D/98/CioPOWBmt7aAP2UtAACBbUI0Ab4887.png"}),n(),h,l(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M00/2D/98/CioPOWBmt8CACcZ1AAB-UuW3dDg051.png"}),n(),g,l(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M01/2D/90/Cgp9HWBmt-WAB1cbABNhEi6mLVE369.png"}),n(),k,S,m,A,_,q,b,l(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/2D/90/Cgp9HWBmt_uANir5AAfXEAo3ILg905.png"})])}const H=o(r,[["render",B]]);export{I as __pageData,H as default};
