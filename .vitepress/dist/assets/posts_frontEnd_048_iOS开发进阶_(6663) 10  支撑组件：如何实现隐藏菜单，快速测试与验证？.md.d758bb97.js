import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.f949202b.js";const g=JSON.parse('{"title":"View ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6663) 10  支撑组件：如何实现隐藏菜单，快速测试与验证？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6663) 10  支撑组件：如何实现隐藏菜单，快速测试与验证？.md","lastUpdated":null}'),e={name:"posts/frontEnd/048_iOS开发进阶/(6663) 10  支撑组件：如何实现隐藏菜单，快速测试与验证？.md"},p=l(`<p>不知道在工作当中，你有没有为了测试和验证开发中的功能，特意为测试和产品经理打包一个特殊版本的 App？或者当多个团队并行开发的时候，为了测试，每个团队都单独打包出不同版本的 App？还有当你想添加某些供内部使用的功能（如清理 Cache），但又不想让 App Store 的用户使用，你是不是又专门打包了一个特殊版本的 App？</p><p>每次遇到这些情况，你是不是觉得特麻烦？</p><p>其实，这些都可以通过一个内部隐藏功能菜单来解决。在这一讲我就结合我们的 Moments App 来和你介绍下，如何开发了一个隐藏功能菜单，快速实现功能测试和验证。</p><p><img src="https://s0.lgstatic.com/i/image6/M00/25/25/Cgp9HWBZZJ2AH9MrAAKIA8i2Fmc948.png" alt="Drawing 0.png"><br> Moments App 的隐藏菜单</p><p>下面是隐藏菜单模块使用到的所有源代码文件。</p><p><img src="https://s0.lgstatic.com/i/image6/M00/25/25/Cgp9HWBZZKaAdBs7AAsAbhLBscQ965.png" alt="Drawing 1.png"></p><p>我把这些模块中使用到的类型分成两大类：</p><ul><li><p>用于呈现的 <strong>View</strong>，主要分为 ViewController + Tableview 以及 TableViewCell 两层；</p></li><li><p>用于存储配置数据的 <strong>ViewModel</strong>，它分为用于 TableView 的 ViewModel，用于 TableView Section 的 ViewModel 以及用于 TableView Cell 的 ViewModel。</p></li></ul><p>下面是所有类型的分类总揽图，你可以简单看一下，我会在后面进行一一介绍。</p><p><img src="https://s0.lgstatic.com/i/image6/M01/26/78/Cgp9HWBa_RSAdIwEAA0pmTe83Oo125.png" alt="图片20.png"></p><h3 id="view" tabindex="-1">View <a class="header-anchor" href="#view" aria-label="Permalink to &quot;View&quot;">​</a></h3><p>下面是 View 部分的所有类型的关系图。</p><p><img src="https://s0.lgstatic.com/i/image6/M00/26/75/CioPOWBa_MyAWG4pAAZ-OokPy3k632.png" alt="图片19.png"></p><p>隐藏菜单的 UI 使用了 UIKit 的<code>UITableView</code>来实现，其包含了四大部分：<strong>通用信息、DesignKit 范例、功能开关和工具箱，每一部分都是一个 TableView Section。</strong></p><p>为了提高可重用性，以便于快速开发新的隐藏功能，我们把<code>UITableView</code>嵌入到<code>UIViewController</code>的子类<code>InternalMenuViewController</code>里面。然后通过 RxDataSources 把<code>tableView</code>和<code>viewModel</code>绑定到一起。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RxTableViewSectionedReloadDataSource</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">InternalMenuSection</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">configureCell</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;">, tableView, indexPath, item </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cell </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tableView.</span><span style="color:#79B8FF;">dequeueReusableCell</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">withIdentifier</span><span style="color:#E1E4E8;">: item.type.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">for</span><span style="color:#E1E4E8;">: indexPath)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cell </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cell </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> InternalMenuCellType {</span></span>
<span class="line"><span style="color:#E1E4E8;">            cell.</span><span style="color:#79B8FF;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">with</span><span style="color:#E1E4E8;">: item)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cell</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">titleForHeaderInSection</span><span style="color:#E1E4E8;">: { dataSource, section </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataSource.sectionModels[section].title</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">titleForFooterInSection</span><span style="color:#E1E4E8;">: { dataSource, section </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataSource.sectionModels[section].footer</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">viewModel.sections</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: tableView.rx.</span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">dataSource</span><span style="color:#E1E4E8;">: dataSource))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RxTableViewSectionedReloadDataSource</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">InternalMenuSection</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">configureCell</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">_</span><span style="color:#24292E;">, tableView, indexPath, item </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cell </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tableView.</span><span style="color:#005CC5;">dequeueReusableCell</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">withIdentifier</span><span style="color:#24292E;">: item.type.</span><span style="color:#005CC5;">rawValue</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">for</span><span style="color:#24292E;">: indexPath)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cell </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cell </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> InternalMenuCellType {</span></span>
<span class="line"><span style="color:#24292E;">            cell.</span><span style="color:#005CC5;">update</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">with</span><span style="color:#24292E;">: item)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cell</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">titleForHeaderInSection</span><span style="color:#24292E;">: { dataSource, section </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataSource.sectionModels[section].title</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">titleForFooterInSection</span><span style="color:#24292E;">: { dataSource, section </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataSource.sectionModels[section].footer</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">viewModel.sections</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: tableView.rx.</span><span style="color:#005CC5;">items</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">dataSource</span><span style="color:#24292E;">: dataSource))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>你可以看到，RxDataSources 帮我们把 UIKit 里面恼人的 DataSource 和 Delegate 通过封包封装起来。当生成 Cell 的时候，统一调用<code>InternalMenuCellType</code>协议的<code>update(with item: InternalMenuItemViewModel)</code>方法来更新 Cell 的 UI。因此所有的 Cell 都必须遵循<code>InternalMenuCellType</code>协议。</p><p>根据 Cell 的不同作用，我们把它分成三类：</p><ul><li><p>用于显示描述信息的<code>InternalMenuDescriptionCell</code></p></li><li><p>用于响应点击事件的<code>InternalMenuActionTriggerCell</code></p></li><li><p>用于功能开关的<code>InternalMenuFeatureToggleCell</code></p></li></ul><p>它们都必须实现<code>InternalMenuCellType</code>协议里面的<code>update(with item: InternalMenuItemViewModel)</code>方法。下面以<code>InternalMenuDescriptionCell</code>为例子来看看具体代码是怎样实现的。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuDescriptionCell</span><span style="color:#E1E4E8;">: UITableViewCell, InternalMenuCellType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> item: InternalMenuItemViewModel) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> InternalMenuDescriptionItemViewModel </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        selectionStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">none</span></span>
<span class="line"><span style="color:#E1E4E8;">        textLabel</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.title</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuDescriptionCell</span><span style="color:#24292E;">: UITableViewCell, InternalMenuCellType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> item: InternalMenuItemViewModel) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> InternalMenuDescriptionItemViewModel </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        selectionStyle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">none</span></span>
<span class="line"><span style="color:#24292E;">        textLabel</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item.title</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在<code>update</code>的方法里，我们通过<code>guard</code>语句检查并把<code>item</code>的类型从<code>InternalMenuItemViewModel</code>向下转型（downcast）为<code>InternalMenuDescriptionItemViewModel</code>。因为只有在类型转换成功的时候，才能更新当前 Cell 的 UI。<code>InternalMenuActionTriggerCell</code>和<code>InternalMenuFeatureToggleCell</code>的实现方法也和<code>InternalMenuDescriptionCell</code>一样。</p><p>到此为止， View 部分的实现以及完成了。你可能会问<code>InternalMenuItemViewModel</code>和<code>InternalMenuDescriptionItemViewModel</code>那些类型是哪里来的？我们一起来看看 ViewModel 部分吧。</p><h3 id="viewmodel" tabindex="-1">ViewModel <a class="header-anchor" href="#viewmodel" aria-label="Permalink to &quot;ViewModel&quot;">​</a></h3><p>ViewModel 的作用是为 View 准备需要呈现的数据，因此 ViewModel 的类型层级关系也与 View 类型层级关系一一对应起来，分成三大类。</p><ul><li><p>用于准备 TableView 数据的<code>InternalMenuViewModel</code></p></li><li><p>用于准备 TableView Section 数据的<code>InternalMenuSection</code></p></li><li><p>由于准备 TableView Cell 数据的<code>InternalMenuItemViewModel</code></p></li></ul><p>由于位于上层的类型会引用到下层的类型，为了更好地理解它们的依赖关系，我准备从下往上为你介绍各层类型的实现。</p><h4 id="用于-tableview-cell-的-viewmodel" tabindex="-1">用于 TableView Cell 的 ViewModel <a class="header-anchor" href="#用于-tableview-cell-的-viewmodel" aria-label="Permalink to &quot;用于 TableView Cell 的 ViewModel&quot;">​</a></h4><p><img src="https://s0.lgstatic.com/i/image6/M00/26/75/CioPOWBa_K6AYenCAAQfOR83siU591.png" alt="图片18.png"></p><p>前面提到过，我把 Cell 分成了三类，与之对应的 ViewModel 也分成三类。我定义了一个名叫<code>InternalMenuItemType</code>的枚举类型（enum）来存放这些分类信息，假如以后要在隐藏菜单里开发新功能的 Cell，我们可以在该类型里面增加一个<code>case</code>。下面是当前<code>InternalMenuItemType</code>的代码。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuItemType</span><span style="color:#E1E4E8;">: String {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> description</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> featureToggle</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> actionTrigger</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuItemType</span><span style="color:#24292E;">: String {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> description</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> featureToggle</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> actionTrigger</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>因为我们在为<code>InternalMenuViewController</code>的<code>tableView</code>注册 Cell 的时候使用了这个枚举作为<code>ReuseIdentifier</code>，因此把这个枚举的原始值（Raw value）定义为<code>String</code>类型。下面是注册 Cell 时的代码。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$tableView.</span><span style="color:#79B8FF;">register</span><span style="color:#E1E4E8;">(InternalMenuDescriptionCell.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">forCellReuseIdentifier</span><span style="color:#E1E4E8;">: InternalMenuItemType.</span><span style="color:#79B8FF;">description</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$tableView.</span><span style="color:#005CC5;">register</span><span style="color:#24292E;">(InternalMenuDescriptionCell.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">forCellReuseIdentifier</span><span style="color:#24292E;">: InternalMenuItemType.</span><span style="color:#005CC5;">description</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">rawValue</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>为了提高代码的可扩展性，我们在架构和开发 Moments App 时都遵守面向协议编程（Protocol Oriented Programming）的原则。落实到这个地方，我们为三个 ViewModel 抽象出一个共同的协议<code>InternalMenuItemViewModel</code>，其代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuItemViewModel</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> type: InternalMenuItemType { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> title: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuItemViewModel</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> type: InternalMenuItemType { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> title: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>InternalMenuItemViewModel</code>定义了两个属性分别用于表示 Cell 类型以及显示的标题，同时也定义了一个名叫<code>select()</code>方法来处理 Cell 的点击事件。我们在<code>InternalMenuViewController</code>里通过 RxDataSources 把<code>tableView</code>和<code>InternalMenuItemViewModel</code>绑定起来，使得<code>InternalMenuItemViewModel</code>可以处理 Cell 的点击事件。代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tableView.rx</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">modelSelected</span><span style="color:#E1E4E8;">(InternalMenuItemViewModel.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: { item </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">        item.</span><span style="color:#79B8FF;">select</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tableView.rx</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">modelSelected</span><span style="color:#24292E;">(InternalMenuItemViewModel.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: { item </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">        item.</span><span style="color:#005CC5;">select</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当用户点击 TableView 上某个 Cell 的时候，就会调用对应的 ViewModel 的<code>select()</code>方法。 但并不是所有的 Cell 都需要响应点击的事件，例如用于描述 App 版本号的 Cell，就不需要处理点击事件。</p><p>为了简化开发的工作量，我们为<code>InternalMenuItemViewModel</code>定义了一个名叫<code>select()</code>的协议扩展方法，并且为该协议提供了一个默认的实现，即当遵循<code>InternalMenuItemViewModel</code>协议的类型未实现<code>select()</code>方法时，程序就会执行协议扩展所定义的<code>select()</code>方法 。代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuItemViewModel</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">() { }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">extension</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuItemViewModel</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">() { }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>下面一起看看不同类型 Cell 所对应的 ViewModel 实现方法。</p><h5 id="internalmenudescriptionitemviewmodel" tabindex="-1">InternalMenuDescriptionItemViewModel <a class="header-anchor" href="#internalmenudescriptionitemviewmodel" aria-label="Permalink to &quot;InternalMenuDescriptionItemViewModel&quot;">​</a></h5><p><code>InternalMenuDescriptionItemViewModel</code>用于显示描述类型的 Cell，其功能非常简单，就是显示一句描述信息，例如 App 的版本号。其代码实现也十分容易，首先它需要实现来自<code>InternalMenuItemViewModel</code>的<code>type</code>属性并返回<code>.description</code>，然后实现<code>title</code>属性来存储描述信息的字符串。 其具体代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuDescriptionItemViewModel</span><span style="color:#E1E4E8;">: InternalMenuItemViewModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> type: InternalMenuItemType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">description</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> title: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuDescriptionItemViewModel</span><span style="color:#24292E;">: InternalMenuItemViewModel {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> type: InternalMenuItemType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">description</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> title: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="internalmenufeaturetoggleitemviewmodel" tabindex="-1">InternalMenuFeatureToggleItemViewModel <a class="header-anchor" href="#internalmenufeaturetoggleitemviewmodel" aria-label="Permalink to &quot;InternalMenuFeatureToggleItemViewModel&quot;">​</a></h5><p><code>InternalMenuFeatureToggleItemViewModel</code>用于存放本地功能开关的配置数据，因此它引用了上一讲提到过的<code>InternalTogglesDataStore</code>来存储和读取本地开关的信息。</p><p>除了实现<code>type</code>和<code>title</code>属性以外，它提供了两个关键的接口供外部使用：</p><ol><li><p>命名为<code>isOn</code>的计算属性（Computed property），供外部读取开关的状态；</p></li><li><p><code>toggle(isOn: Bool)</code>方法，给外部更新开关的状态。</p></li></ol><p>具体代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#E1E4E8;">: InternalMenuItemViewModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> toggle: ToggleType</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> togglesDataStore: TogglesDataStoreType</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">toggle</span><span style="color:#E1E4E8;">: ToggleType, </span><span style="color:#B392F0;">togglesDataStore</span><span style="color:#E1E4E8;">: TogglesDataStoreType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> InternalTogglesDataStore.shared) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> title</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.toggle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toggle</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.togglesDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> togglesDataStore</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> type: InternalMenuItemType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .featureToggle</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> title: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isOn: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> togglesDataStore.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(toggle)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toggle</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isOn</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        togglesDataStore.</span><span style="color:#79B8FF;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">toggle</span><span style="color:#E1E4E8;">: toggle, </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">: isOn)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#24292E;">: InternalMenuItemViewModel {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> toggle: ToggleType</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> togglesDataStore: TogglesDataStoreType</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">toggle</span><span style="color:#24292E;">: ToggleType, </span><span style="color:#6F42C1;">togglesDataStore</span><span style="color:#24292E;">: TogglesDataStoreType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> InternalTogglesDataStore.shared) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> title</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.toggle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toggle</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.togglesDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> togglesDataStore</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> type: InternalMenuItemType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .featureToggle</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> title: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isOn: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> togglesDataStore.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(toggle)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toggle</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isOn</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        togglesDataStore.</span><span style="color:#005CC5;">update</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">toggle</span><span style="color:#24292E;">: toggle, </span><span style="color:#005CC5;">value</span><span style="color:#24292E;">: isOn)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h5 id="internalmenuactiontriggeritemviewmodel" tabindex="-1">InternalMenuActionTriggerItemViewModel <a class="header-anchor" href="#internalmenuactiontriggeritemviewmodel" aria-label="Permalink to &quot;InternalMenuActionTriggerItemViewModel&quot;">​</a></h5><p>我们为响应点击事件的 Cell 都封装在<code>InternalMenuActionTriggerItemViewModel</code>里面，该 ViewModel 是一个类。代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuActionTriggerItemViewModel</span><span style="color:#E1E4E8;">: InternalMenuItemViewModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> type: InternalMenuItemType { .actionTrigger }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> title: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">fatalError</span><span style="color:#E1E4E8;">(L10n.Development.fatalErrorSubclassToImplement) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">() { </span><span style="color:#79B8FF;">fatalError</span><span style="color:#E1E4E8;">(L10n.Development.fatalErrorSubclassToImplement) }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuActionTriggerItemViewModel</span><span style="color:#24292E;">: InternalMenuItemViewModel {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> type: InternalMenuItemType { .actionTrigger }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> title: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">fatalError</span><span style="color:#24292E;">(L10n.Development.fatalErrorSubclassToImplement) }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">() { </span><span style="color:#005CC5;">fatalError</span><span style="color:#24292E;">(L10n.Development.fatalErrorSubclassToImplement) }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>InternalMenuActionTriggerItemViewModel</code>遵循了<code>InternalMenuItemViewModel</code>协议，因此也需要实现<code>type</code>属性，并返回<code>.actionTrigger</code>，同时我还实现了<code>title</code>属性和<code>select()</code>方法，它们都直接抛出<code>fatalError</code>错误。这是为什么呢？</p><p>因为我们想把<code>InternalMenuActionTriggerItemViewModel</code>定义为一个抽象类，然后把<code>title</code>属性和<code>select()</code>方法都定义为抽象属性和抽象方法。可是 Swift 并不支持抽象类，为了模拟概念上的抽象类，我们定义了一个普通的类，然后在<code>title</code>属性和<code>select()</code>方法里面抛出<code>fatalError</code>错误。</p><p>这样做有两个作用，第一是能防止调用者直接构造出<code>InternalMenuActionTriggerItemViewModel</code>的实例。第二是强迫其子类重写<code>title</code>属性和<code>select()</code>方法。下面是它的两个子类的实现代码。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuCrashAppItemViewModel</span><span style="color:#E1E4E8;">: InternalMenuActionTriggerItemViewModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> title: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> L10n.InternalMenu.crashApp</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">fatalError</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuDesignKitDemoItemViewModel</span><span style="color:#E1E4E8;">: InternalMenuActionTriggerItemViewModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> router: AppRouting</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> routingSourceProvider: RoutingSourceProvider</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">router</span><span style="color:#E1E4E8;">: AppRouting, </span><span style="color:#B392F0;">routingSourceProvider</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">@escaping</span><span style="color:#E1E4E8;"> RoutingSourceProvider) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.router </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> router</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.routingSourceProvider </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> routingSourceProvider</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> title: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> L10n.InternalMenu.designKitDemo</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        router.</span><span style="color:#79B8FF;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">\\(UniversalLinks.</span><span style="color:#E1E4E8;">baseURL</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">DesignKit&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">routingSourceProvider</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: .show)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuCrashAppItemViewModel</span><span style="color:#24292E;">: InternalMenuActionTriggerItemViewModel {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> title: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> L10n.InternalMenu.crashApp</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">fatalError</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuDesignKitDemoItemViewModel</span><span style="color:#24292E;">: InternalMenuActionTriggerItemViewModel {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> router: AppRouting</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> routingSourceProvider: RoutingSourceProvider</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">router</span><span style="color:#24292E;">: AppRouting, </span><span style="color:#6F42C1;">routingSourceProvider</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">@escaping</span><span style="color:#24292E;"> RoutingSourceProvider) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.router </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> router</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.routingSourceProvider </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> routingSourceProvider</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> title: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> L10n.InternalMenu.designKitDemo</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        router.</span><span style="color:#005CC5;">route</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">\\(UniversalLinks.</span><span style="color:#24292E;">baseURL</span><span style="color:#032F62;">)</span><span style="color:#032F62;">DesignKit&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">routingSourceProvider</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: .show)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>当我们为<code>InternalMenuActionTriggerItemViewModel</code>定义子类的时候，为了让子类不能被其他子类所继承，而且提高编译速度，我们把子类<code>InternalMenuCrashAppItemViewModel</code>和<code>InternalMenuDesignKitDemoItemViewModel</code>都定义成<code>final class</code>。</p><p>这两个子类都重写了<code>title</code>属性和<code>select()</code>方法。下面分别看看它们的具体实现。</p><p><code>InternalMenuCrashAppItemViewModel</code>的作用是把 App 给闪退了，因此在其<code>select()</code>方法里面调用了<code>fatalError()</code>。当用户点击<strong>闪退 App</strong> Cell 的时候，App 会立刻崩溃并退出。</p><p>而<code>InternalMenuDesignKitDemoItemViewModel</code>是用于打开 DesignKit 的范例页面。我们在其<code>select()</code>方法里面调用了<code>router.route(to:from:using)</code>进行导航。当用户点击 <strong>DesignKit 范例</strong> Cell 的时候，App 会导航到 DesignKit 的范例页面，方便设计师和产品经理查看公共设计组件。</p><p>以上是如何开发用于显示<code>UITableViewCell</code>的 ViewModel 。下面一起看看 TableView Section 所对应的 ViewModel。</p><h4 id="用于-tableview-section-的-viewmodel" tabindex="-1">用于 TableView Section 的 ViewModel <a class="header-anchor" href="#用于-tableview-section-的-viewmodel" aria-label="Permalink to &quot;用于 TableView Section 的 ViewModel&quot;">​</a></h4><p>为了准备 TableView Section 的数据，我建立一个名叫<code>InternalMenuSection</code>的结构体（Struct）。这个结构体遵循了自于 RxDataSources 的<code>SectionModelType</code>协议。</p><p><img src="https://s0.lgstatic.com/i/image6/M01/26/78/Cgp9HWBa_HGAVEN9AANjLQSDkHA044.png" alt="图片17.png"></p><p>因为<code>SectionModelType</code>使用了<code>associatedtype</code>来定义<code>Item</code>的类型，所有遵循该协议的类型都必须为<code>Item</code>明确指明其类型信息，代码如下。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SectionModelType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">associatedtype</span><span style="color:#E1E4E8;"> Item</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> items: [Item] { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">original</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Self</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">: [Item])</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SectionModelType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">associatedtype</span><span style="color:#24292E;"> Item</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> items: [Item] { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">original</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Self</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">: [Item])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>因为<code>InternalMenuSection</code>遵循了<code>SectionModelType</code>协议，所以需要明确指明<code>Item</code>的类型为<code>InternalMenuItemViewModel</code>。<code>InternalMenuSection</code>还实现了两个<code>init</code>方法来进行初始化。具体代码如下。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuSection</span><span style="color:#E1E4E8;">: SectionModelType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> title: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> items: [InternalMenuItemViewModel]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> footer: </span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">: [InternalMenuItemViewModel], </span><span style="color:#B392F0;">footer</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> title</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.items </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> items</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.footer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> footer</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">original</span><span style="color:#E1E4E8;">: InternalMenuSection, </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">: [InternalMenuItemViewModel]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: original.title, </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;">: items, </span><span style="color:#79B8FF;">footer</span><span style="color:#E1E4E8;">: original.footer)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuSection</span><span style="color:#24292E;">: SectionModelType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> title: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> items: [InternalMenuItemViewModel]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> footer: </span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">: [InternalMenuItemViewModel], </span><span style="color:#6F42C1;">footer</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> title</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> items</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.footer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> footer</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">original</span><span style="color:#24292E;">: InternalMenuSection, </span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">: [InternalMenuItemViewModel]) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: original.title, </span><span style="color:#005CC5;">items</span><span style="color:#24292E;">: items, </span><span style="color:#005CC5;">footer</span><span style="color:#24292E;">: original.footer)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>有了用于<code>UITableViewCell</code>和 TableView Section 的 ViewModel 以后，现在就剩下最后一个了，一起看看如何实现一个用于<code>UITableView</code>的 ViewModel 吧。</p><h4 id="用于-tableview-的-viewmodel" tabindex="-1">用于 TableView 的 ViewModel <a class="header-anchor" href="#用于-tableview-的-viewmodel" aria-label="Permalink to &quot;用于 TableView 的 ViewModel&quot;">​</a></h4><p><img src="https://s0.lgstatic.com/i/image6/M01/26/78/Cgp9HWBa_F2ANOdDAAMyEuhYLPE545.png" alt="1.png"></p><p>用于<code>UITableView</code>的 ViewModel 也是遵循面向协议编程的原则。首先，我们定义了一个名叫<code>InternalMenuViewModelType</code>的协议。该协议只有两个属性<code>title</code>和<code>sections</code>。其中，<code>title</code>用于显示 ViewController 的标题，<code>sections</code>用于显示 TableView 的数据，代码如下。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuViewModelType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> title: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sections: Observable&lt;[InternalMenuSection]&gt; { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuViewModelType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> title: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sections: Observable&lt;[InternalMenuSection]&gt; { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>InternalMenuViewModel</code>作为一个遵循<code>InternalMenuViewModelType</code>协议的结构体，它要实现<code>title</code>和<code>sections</code>属性。其中，<code>title</code>只是返回包含标题的字符串即可。而<code>sections</code>则需要使用 RxSwift 的<code>Observable</code>来返回一个数组，这个数组包含了多个 Session ViewModel。</p><p>我们会在响应式编程一讲中详细讲述<code>Observable</code>。在此你可以把它理解为一个能返回数组的数据流。下面是具体的代码实现。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalMenuViewModel</span><span style="color:#E1E4E8;">: InternalMenuViewModelType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> L10n.InternalMenu.area51</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sections: Observable&lt;[InternalMenuSection]&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">router</span><span style="color:#E1E4E8;">: AppRouting, </span><span style="color:#B392F0;">routingSourceProvider</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">@escaping</span><span style="color:#E1E4E8;"> RoutingSourceProvider) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> appVersion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">\\(L10n.</span><span style="color:#E1E4E8;">InternalMenu</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">version</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\\((Bundle.</span><span style="color:#E1E4E8;">main</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">object</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">forInfoDictionaryKey</span><span style="color:#9ECBFF;">: L10n.</span><span style="color:#E1E4E8;">InternalMenu</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">cfBundleVersion</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">as?</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">String</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">??</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> infoSection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">InternalMenuSection</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: L10n.InternalMenu.generalInfo,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">InternalMenuDescriptionItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: appVersion)]</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> designKitSection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">InternalMenuSection</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: L10n.InternalMenu.designKitDemo,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">InternalMenuDesignKitDemoItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;">: router, </span><span style="color:#79B8FF;">routingSourceProvider</span><span style="color:#E1E4E8;">: routingSourceProvider)])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> featureTogglesSection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">InternalMenuSection</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: L10n.InternalMenu.featureToggles,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: L10n.InternalMenu.likeButtonForMomentEnabled, </span><span style="color:#79B8FF;">toggle</span><span style="color:#E1E4E8;">: InternalToggle.isLikeButtonForMomentEnabled),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: L10n.InternalMenu.swiftUIEnabled, </span><span style="color:#79B8FF;">toggle</span><span style="color:#E1E4E8;">: InternalToggle.isSwiftUIEnabled)</span></span>
<span class="line"><span style="color:#E1E4E8;">            ])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> toolsSection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">InternalMenuSection</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: L10n.InternalMenu.tools,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">InternalMenuCrashAppItemViewModel</span><span style="color:#E1E4E8;">()]</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">        sections </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">just</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">            infoSection,</span></span>
<span class="line"><span style="color:#E1E4E8;">            designKitSection,</span></span>
<span class="line"><span style="color:#E1E4E8;">            featureTogglesSection,</span></span>
<span class="line"><span style="color:#E1E4E8;">            toolsSection</span></span>
<span class="line"><span style="color:#E1E4E8;">        ])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalMenuViewModel</span><span style="color:#24292E;">: InternalMenuViewModelType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> L10n.InternalMenu.area51</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sections: Observable&lt;[InternalMenuSection]&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">router</span><span style="color:#24292E;">: AppRouting, </span><span style="color:#6F42C1;">routingSourceProvider</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">@escaping</span><span style="color:#24292E;"> RoutingSourceProvider) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> appVersion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">\\(L10n.</span><span style="color:#24292E;">InternalMenu</span><span style="color:#032F62;">.</span><span style="color:#24292E;">version</span><span style="color:#032F62;">)</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\\((Bundle.</span><span style="color:#24292E;">main</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">object</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">forInfoDictionaryKey</span><span style="color:#032F62;">: L10n.</span><span style="color:#24292E;">InternalMenu</span><span style="color:#032F62;">.</span><span style="color:#24292E;">cfBundleVersion</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">as?</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">String</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">??</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#032F62;">)</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> infoSection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">InternalMenuSection</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: L10n.InternalMenu.generalInfo,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">items</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">InternalMenuDescriptionItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: appVersion)]</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> designKitSection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">InternalMenuSection</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: L10n.InternalMenu.designKitDemo,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">items</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">InternalMenuDesignKitDemoItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">router</span><span style="color:#24292E;">: router, </span><span style="color:#005CC5;">routingSourceProvider</span><span style="color:#24292E;">: routingSourceProvider)])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> featureTogglesSection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">InternalMenuSection</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: L10n.InternalMenu.featureToggles,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">items</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: L10n.InternalMenu.likeButtonForMomentEnabled, </span><span style="color:#005CC5;">toggle</span><span style="color:#24292E;">: InternalToggle.isLikeButtonForMomentEnabled),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: L10n.InternalMenu.swiftUIEnabled, </span><span style="color:#005CC5;">toggle</span><span style="color:#24292E;">: InternalToggle.isSwiftUIEnabled)</span></span>
<span class="line"><span style="color:#24292E;">            ])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> toolsSection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">InternalMenuSection</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: L10n.InternalMenu.tools,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">items</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">InternalMenuCrashAppItemViewModel</span><span style="color:#24292E;">()]</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        sections </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">just</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">            infoSection,</span></span>
<span class="line"><span style="color:#24292E;">            designKitSection,</span></span>
<span class="line"><span style="color:#24292E;">            featureTogglesSection,</span></span>
<span class="line"><span style="color:#24292E;">            toolsSection</span></span>
<span class="line"><span style="color:#24292E;">        ])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>从代码可以看到，<code>InternalMenuViewModel</code>的主要任务是把各个 Cell 的 ViewModel 进行初始化，然后放进各组 Section 的 ViewModel 里面，最后把各组 Section 的 ViewModel 放到<code>items</code>属性里面。</p><p>因为所有用于<code>UITableViewCell</code>的 ViewModel 都遵循了<code>InternalMenuItemViewModel</code>协议，所以它们能够保持统一的接口，方便我们快速扩展新功能。比如，我们要为实时聊天功能添加一个新的本地功能开关时，只需要下面一行代码就行了。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">: L10n.InternalMenu.instantMessagingEnabled, </span><span style="color:#79B8FF;">toggle</span><span style="color:#E1E4E8;">: InternalToggle.isInstantMessagingEnabled)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">InternalMenuFeatureToggleItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">title</span><span style="color:#24292E;">: L10n.InternalMenu.instantMessagingEnabled, </span><span style="color:#005CC5;">toggle</span><span style="color:#24292E;">: InternalToggle.isInstantMessagingEnabled)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行效果如下。<br><img src="https://s0.lgstatic.com/i/image6/M01/27/9B/CioPOWBdV52AV1OAAAF2RV7abDM895.png" alt="图片1.png"></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲中，我向你介绍了如何实现一个隐藏菜单功能，有了这个功能，我们的测试人员和产品经理可以使用这些功能来加速功能的测试与验证。在实现过程，我们把 UI 和配置数据部分进行分离，而且使用了面向协议的编程方式，让这个功能变得灵活且易于可扩展。在实际工作当中，你也可以使用这个模式来快速开发出各种配置页面。<br><img src="https://s0.lgstatic.com/i/image6/M01/26/8B/Cgp9HWBbDhmAB2gcAAUFC1DGm_M896.png" alt="思维导图+二维码.png"></p><p>思考题：</p><blockquote><p>在当前的实现中还可以进一步的优化，请尝试把<code>InternalMenuDesignKitDemoItemViewModel</code>和<code>InternalMenuCrashAppItemViewModel</code>重构成结构体（struct），做完记住提交一个 PR 哦。</p></blockquote><p>如果你在做这个任务时有任何问题，可以写到下面的留言区哦，我会不定期回复。我们下一讲将介绍如何开发通用的路由组件。</p><p><strong>源码地址：</strong></p><blockquote><p>隐藏菜单功能的文件地址：<a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/InternalMenu?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/InternalMenu</a></p></blockquote>`,88),o=[p];function t(r,c,i,E,y,d){return n(),a("div",null,o)}const b=s(e,[["render",t]]);export{g as __pageData,b as default};
