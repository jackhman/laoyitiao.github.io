import{_ as o,j as e,o as t,h as r,k as l,f as s,Q as p,s as a}from"./chunks/framework.d3daa342.js";const v=JSON.parse('{"title":"22基于MyBati的衍生框架一览","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6392) 22  基于 MyBati 的衍生框架一览.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6392) 22  基于 MyBati 的衍生框架一览.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6392) 22  基于 MyBati 的衍生框架一览.md"},y=p(`<h1 id="_22基于mybati的衍生框架一览" tabindex="-1">22基于MyBati的衍生框架一览 <a class="header-anchor" href="#_22基于mybati的衍生框架一览" aria-label="Permalink to &quot;22基于MyBati的衍生框架一览&quot;">​</a></h1><p>在前面的课时中，我们深入分析了 MyBatis 的内核，了解了 MyBatis 处理一条 SQL 的完整流程，剖析了 MyBatis 中动态 SQL、结果集映射、缓存等核心功能的实现原理。在日常工作中，除了单纯使用 MyBatis 之外，还可能会涉及 MyBatis 的衍生框架，这一讲我们就来介绍一下工作中常用的 MyBatis 衍生框架。</p><h3 id="mybatis-generator" tabindex="-1">MyBatis-Generator <a class="header-anchor" href="#mybatis-generator" aria-label="Permalink to &quot;MyBatis-Generator&quot;">​</a></h3><p>虽然使用 MyBatis 编写 DAO 层已经非常方便，但是我们还是要编写 Mapper 接口和相应的 Mapper.xml 配置文件。为了进一步节省编码时间，我们<strong>可以选择 MyBatis-Generator 工具自动生成 Mapper 接口和 Mapper.xml 配置文件</strong>。</p><p>这里我们通过一个简单示例介绍一下 MyBatis-Generator 工具的基本功能。</p><p>MyBatis-Generator 目前最新的版本是 1.4.0 版本，首先我们需要下载<a href="https://github.com/mybatis/generator/releases/download/mybatis-generator-1.4.0/mybatis-generator-core-1.4.0-bundle.zip?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">这个</a>最新的 zip 包，并进行解压，得到 mybatis-generator-core-1.4.0.jar 这个 jar 包。</p><p>由于我们本地使用的是 MySQL 数据库，所以需要准备一个 mysql-connector-java 的 jar 包，我们可以从本地的 Maven 仓库中获得，具体的目录是：.m2/repository/mysql/mysql-connector-java/，在这个目录中选择一个最新版本的 jar 包拷贝到 mybatis-generator-core-1.4.0.jar 同目录下。</p><p>接下来，我们需要编写一个 generatorConfig.xml 配置文件，其中会告诉 MyBatis-Generator 去连接哪个数据库、连接数据库的用户名和密码分别是什么、需要根据哪些表生成哪些配置文件和类，以及这些生成文件的存放位置。下面是一个 generatorConfig.xml 配置文件的完整示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">xml version</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#E1E4E8;"> encoding</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#F97583;">?&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;!</span><span style="color:#E1E4E8;">DOCTYPE generatorConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">        PUBLIC </span><span style="color:#9ECBFF;">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">generatorConfiguration</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 使用的数据库驱动jar包 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">classPathEntry location</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;mysql-connector-java-8.0.22.jar&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 指定数据库地址、数据库用户名和密码 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">context id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;DB2Tables&quot;</span><span style="color:#E1E4E8;"> targetRuntime</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;MyBatis3&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">jdbcConnection driverClass</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;com.mysql.jdbc.Driver&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                connectionURL</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;jdbc:mysql://localhost:3306/test&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                userId</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">  password</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">jdbcConnection</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">javaTypeResolver</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;forceBigDecimals&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">javaTypeResolver</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 生成的Model类存放位置 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">javaModelGenerator targetPackage</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example&quot;</span><span style="color:#E1E4E8;"> targetProject</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 是否支持生成子package </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;enableSubPackages&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 对String进行操作时，会添加</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()方法进行处理 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;trimStrings&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">javaModelGenerator</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 生成的Mapper.xml映射配置文件的存放位置</span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">sqlMapGenerator targetPackage</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.mapper&quot;</span><span style="color:#E1E4E8;"> targetProject</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;enableSubPackages&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">sqlMapGenerator</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 生成的Mapper接口的存放位置</span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">javaClientGenerator type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;XMLMAPPER&quot;</span><span style="color:#E1E4E8;"> targetPackage</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;org.example.mapper&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                     targetProject</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;enableSubPackages&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">javaClientGenerator</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 数据库表与Model类之间的映射关系，根据t_customer表进行映射</span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">table schema</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;"> tableName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;t_customer&quot;</span><span style="color:#E1E4E8;"> domainObjectName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Customer&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">               enableCountByExample</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;"> enableUpdateByExample</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">               enableDeleteByExample</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">               enableSelectByExample</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;"> selectByExampleQueryId</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">table</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">context</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">generatorConfiguration</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;">xml version</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#24292E;"> encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#D73A49;">?&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;!</span><span style="color:#24292E;">DOCTYPE generatorConfiguration</span></span>
<span class="line"><span style="color:#24292E;">        PUBLIC </span><span style="color:#032F62;">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">generatorConfiguration</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 使用的数据库驱动jar包 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">classPathEntry location</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;mysql-connector-java-8.0.22.jar&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 指定数据库地址、数据库用户名和密码 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">context id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;DB2Tables&quot;</span><span style="color:#24292E;"> targetRuntime</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;MyBatis3&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">jdbcConnection driverClass</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.mysql.jdbc.Driver&quot;</span></span>
<span class="line"><span style="color:#24292E;">                connectionURL</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;jdbc:mysql://localhost:3306/test&quot;</span></span>
<span class="line"><span style="color:#24292E;">                userId</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">  password</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">jdbcConnection</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">javaTypeResolver</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;forceBigDecimals&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">javaTypeResolver</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 生成的Model类存放位置 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">javaModelGenerator targetPackage</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example&quot;</span><span style="color:#24292E;"> targetProject</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;src&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 是否支持生成子package </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;enableSubPackages&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 对String进行操作时，会添加</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">()方法进行处理 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;trimStrings&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">javaModelGenerator</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 生成的Mapper.xml映射配置文件的存放位置</span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">sqlMapGenerator targetPackage</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.mapper&quot;</span><span style="color:#24292E;"> targetProject</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;src&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;enableSubPackages&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">sqlMapGenerator</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 生成的Mapper接口的存放位置</span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">javaClientGenerator type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;XMLMAPPER&quot;</span><span style="color:#24292E;"> targetPackage</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;org.example.mapper&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                     targetProject</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;src&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;enableSubPackages&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">javaClientGenerator</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 数据库表与Model类之间的映射关系，根据t_customer表进行映射</span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">table schema</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;"> tableName</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;t_customer&quot;</span><span style="color:#24292E;"> domainObjectName</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Customer&quot;</span></span>
<span class="line"><span style="color:#24292E;">               enableCountByExample</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;"> enableUpdateByExample</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">               enableDeleteByExample</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;false&quot;</span></span>
<span class="line"><span style="color:#24292E;">               enableSelectByExample</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;"> selectByExampleQueryId</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">table</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">context</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">generatorConfiguration</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>然后，我们准备一下数据库中的表，在 MySQL 中建立一个 test 数据库，并创建 t_customer 表，使用到的建库建表语句如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">create databases test; # 创建数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">use test;</span></span>
<span class="line"><span style="color:#E1E4E8;">DROP TABLE IF EXISTS \`t_customer\`; # 删除已有的t_customer表</span></span>
<span class="line"><span style="color:#E1E4E8;">CREATE TABLE \`t_customer\` ( # 创建t_customer表</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`id\` </span><span style="color:#B392F0;">int</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">) NOT NULL,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`name\` </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`password\` </span><span style="color:#B392F0;">varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#E1E4E8;">  \`account\` </span><span style="color:#B392F0;">bigint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#E1E4E8;">  PRIMARY </span><span style="color:#B392F0;">KEY</span><span style="color:#E1E4E8;"> (\`id\`)</span></span>
<span class="line"><span style="color:#E1E4E8;">) ENGINE</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">InnoDB DEFAULT CHARSET</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">utf8;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">create databases test; # 创建数据库</span></span>
<span class="line"><span style="color:#24292E;">use test;</span></span>
<span class="line"><span style="color:#24292E;">DROP TABLE IF EXISTS \`t_customer\`; # 删除已有的t_customer表</span></span>
<span class="line"><span style="color:#24292E;">CREATE TABLE \`t_customer\` ( # 创建t_customer表</span></span>
<span class="line"><span style="color:#24292E;">  \`id\` </span><span style="color:#6F42C1;">int</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">) NOT NULL,</span></span>
<span class="line"><span style="color:#24292E;">  \`name\` </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#24292E;">  \`password\` </span><span style="color:#6F42C1;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#24292E;">  \`account\` </span><span style="color:#6F42C1;">bigint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">) DEFAULT NULL,</span></span>
<span class="line"><span style="color:#24292E;">  PRIMARY </span><span style="color:#6F42C1;">KEY</span><span style="color:#24292E;"> (\`id\`)</span></span>
<span class="line"><span style="color:#24292E;">) ENGINE</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">InnoDB DEFAULT CHARSET</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">utf8;</span></span></code></pre></div><p>最后，我们在 mybatis-generator-core-1.4.0.jar 包同目录下新建一个 src 目录，存放生成的代码，然后执行如下命令，逆向生成需要的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jar mybatis</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">core</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1.4</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.jar </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">configfile generatorConfig.xml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jar mybatis</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">core</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1.4</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.jar </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">configfile generatorConfig.xml</span></span></code></pre></div><p>命令正常执行完成之后，可以看到 src 目录下生成的文件如下图所示：</p>`,14),E=p(`<p>MyBatis-Generator 工具类生成结果图</p><p>生成的 Customer.java 类是一个 Model 类（或者说 Domain 类），包含了 id、name、password、account 属性；CustomerMapper.xml 是 Customer 对应的 Mapper.xml 配置文件，其中定义了按照 id 进行查询和删除的 select、delete 语句，以及全字段写入和更新的 insert、update 语句；CustomerMapper 接口中包含了与 CustomerMapper.xml 对应的方法。该示例中生成的代码并不复杂，在你生成代码之后，也希望你能够自己分析一下。</p><h3 id="mybatis-分页插件" tabindex="-1">MyBatis 分页插件 <a class="header-anchor" href="#mybatis-分页插件" aria-label="Permalink to &quot;MyBatis 分页插件&quot;">​</a></h3><p>MyBatis 本身提供了 RowBounds 参数，可以实现分页的效果，但是在前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6385&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 14 讲</a>中我们提到过，通过 RowBounds 方式实现分页的时候，本质是将整个结果集数据加载到内存中，然后在内存中过滤出需要的数据，这其实也是我们常说的&quot;内存分页&quot;。而真正的分页是为了解决数据量太大，无法直接加载到内存或无法直接传输的问题，显然&quot;内存分页&quot;并没有解决这个问题。</p><p>你如果用过 MySQL 的话，应该知道我们常用 limit 方式进行分页，例如下面这条 select 语句：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">select </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> from t_customer limit </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">select </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from t_customer limit </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span></code></pre></div><p>使用 Oracle 实现分页时，则需要用 rownum 实现，可见在不同数据库中实现物理分页的写法各不相同。</p><p>如果我们想屏蔽底层数据库的分页 SQL 语句的差异，同时使用 MyBatis 的 RowBounds 参数实现&quot;物理分页&quot;，可以考虑使用 MyBatis 的分页插件<a href="https://github.com/pagehelper/Mybatis-PageHelper?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">PageHelper</a>。PageHelper 的使用比较简单，只需要在 pom.xml 中引入 PageHelper 依赖包，并在 mybatis-config.xml 配置文件中配置 PageInterceptor 插件即可，核心配置如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">plugins</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">plugin interceptor</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;com.github.pagehelper.PageInterceptor&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;helperDialect&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;mysql&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">plugins</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">plugin interceptor</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.github.pagehelper.PageInterceptor&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;helperDialect&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;mysql&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p><strong>PageHelper 核心原理是使用 MyBatis 的插件机制，整个插件的入口是在 PageInterceptor</strong>。</p><p>在 PageInterceptor 初始化的时候，会根据配置的 helperDialect 属性以及 MyBatis 使用的 JDBC URL 信息确定底层连接的数据库类型，并创建一个 Dialect 对象。我们可以再来看 PageInterceptor 的注解信息，会发现 PageInterceptor 会拦截 Executor 中带有 RowBounds 参数的两个查询方法。拦截到目标方法之后，PageInterceptor.intercept() 方法会通过 Dialect 对象完成分页操作，核心代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">List resultList;</span></span>
<span class="line"><span style="color:#6A737D;">// 判断是否需要进行分页</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">dialect.</span><span style="color:#B392F0;">skip</span><span style="color:#E1E4E8;">(ms, parameter, rowBounds)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 是否需要查询总记录数，这可以帮助我们显示总页数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (dialect.</span><span style="color:#B392F0;">beforeCount</span><span style="color:#E1E4E8;">(ms, parameter, rowBounds)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 查询总记录数</span></span>
<span class="line"><span style="color:#E1E4E8;">        Long count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">(executor, ms, parameter, rowBounds, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, boundSql);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 处理查询总记录数，返回true时继续分页查询，false时直接返回，会返回false的原因很多，可能是count为0，或是当前已经到最后一页等原因</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">dialect.</span><span style="color:#B392F0;">afterCount</span><span style="color:#E1E4E8;">(count, parameter, rowBounds)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dialect.</span><span style="color:#B392F0;">afterPage</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayList</span><span style="color:#E1E4E8;">(), parameter, rowBounds);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 执行分页查询</span></span>
<span class="line"><span style="color:#E1E4E8;">    resultList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExecutorUtil.</span><span style="color:#B392F0;">pageQuery</span><span style="color:#E1E4E8;">(dialect, executor,</span></span>
<span class="line"><span style="color:#E1E4E8;">            ms, parameter, rowBounds, resultHandler, boundSql, cacheKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果不需要，直接交给Executor执行查询，返回结果</span></span>
<span class="line"><span style="color:#E1E4E8;">    resultList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> executor.</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">(ms, parameter, rowBounds, resultHandler, cacheKey, boundSql);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 在afterPage()方法中会完成总页数的计算等后置操作</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dialect.</span><span style="color:#B392F0;">afterPage</span><span style="color:#E1E4E8;">(resultList, parameter, rowBounds);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List resultList;</span></span>
<span class="line"><span style="color:#6A737D;">// 判断是否需要进行分页</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">dialect.</span><span style="color:#6F42C1;">skip</span><span style="color:#24292E;">(ms, parameter, rowBounds)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 是否需要查询总记录数，这可以帮助我们显示总页数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (dialect.</span><span style="color:#6F42C1;">beforeCount</span><span style="color:#24292E;">(ms, parameter, rowBounds)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 查询总记录数</span></span>
<span class="line"><span style="color:#24292E;">        Long count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(executor, ms, parameter, rowBounds, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, boundSql);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 处理查询总记录数，返回true时继续分页查询，false时直接返回，会返回false的原因很多，可能是count为0，或是当前已经到最后一页等原因</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">dialect.</span><span style="color:#6F42C1;">afterCount</span><span style="color:#24292E;">(count, parameter, rowBounds)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dialect.</span><span style="color:#6F42C1;">afterPage</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">(), parameter, rowBounds);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行分页查询</span></span>
<span class="line"><span style="color:#24292E;">    resultList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExecutorUtil.</span><span style="color:#6F42C1;">pageQuery</span><span style="color:#24292E;">(dialect, executor,</span></span>
<span class="line"><span style="color:#24292E;">            ms, parameter, rowBounds, resultHandler, boundSql, cacheKey);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果不需要，直接交给Executor执行查询，返回结果</span></span>
<span class="line"><span style="color:#24292E;">    resultList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> executor.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(ms, parameter, rowBounds, resultHandler, cacheKey, boundSql);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 在afterPage()方法中会完成总页数的计算等后置操作</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dialect.</span><span style="color:#6F42C1;">afterPage</span><span style="color:#24292E;">(resultList, parameter, rowBounds);</span></span></code></pre></div><p>通过对 PageInterceptor 的分析我们看到，<strong>核心的分页逻辑都是在 Dialect 中完成的</strong>，PageHelper 针对每个数据库都提供了一个 Dialect 接口实现。下图展示了 MySQL 数据库对应的 Dialect 接口实现：</p>`,13),i=p('<p>MySqlDialect 的继承关系图</p><p>在上图中，PageHelper 是一个通用的 Dialect 实现，会将上述分页操作委托给当前线程绑定的 Dialect 实现进行处理，这主要是靠其中的 autoDialect 字段（PageAutoDialect 类型）实现的。AbstractDialect 中只提供了一个生成&quot;查询总记录数&quot;SQL 语句（即 select count(*) 语句）的功能。</p><p>AbstractRowBoundsDialect 这条继承线是针对 RowBounds 进行分页的 Dialect 实现，其中会根据 RowBounds 实现 Dialect 接口，例如，在 MySqlRowBoundsDialect 中的 getPageSql() 方法实现中会改写 SQL 语句，添加 limit 子句，其中的 offset、limit 参数均来自传入的 RowBounds 参数。</p><p>如果没有用 RowBounds 参数进行分页，而是在传入的 SQL 语句绑定实参（即 Executor.query() 方法的第二个参数 parameter）中指定 pageNum、pageSize 等分页信息，则会走 AbstractHelperDialect 这条继承线。在 PageObjectUtil 这个工具类中，会从绑定实参中解析出分页信息并封装成 Page 对象，然后传递给 AbstractHelperDialect 完成分页操作。例如，在 MySqlDialect 实现中的 getPageSql() 方法和 processPageParameter() 方法，都会从 Page 参数中获取分页信息，这两个方法的具体实现就留给你自己分析了。</p><p>到此为止，PageHelper 分页插件中的分页功能就介绍完了，除了基本的分页功能，PageHelper 还提供了分页使用的缓存等相关能力，这里就不再展开详细分析了，你若感兴趣的话可以下载其源码进行深入分析。</p><h3 id="mybatis-plus" tabindex="-1">MyBatis-Plus <a class="header-anchor" href="#mybatis-plus" aria-label="Permalink to &quot;MyBatis-Plus&quot;">​</a></h3><p>MyBatis-Plus 是国人开发的一款 MyBatis 增强工具，通过其名字就能看出，<strong>它并没有改变 MyBatis 本身的功能，而是在 MyBatis 的基础上提供了很多增强功能，使我们的开发更加简洁高效</strong>。也正是由于其&quot;只做增强不做改变&quot;的特性，让我们可以在使用 MyBatis 的项目中无感知地引入 MyBatis-Plus。</p><p>MyBatis-Plus 对 MyBatis 的很多方面进行了增强，例如：</p><ul><li><p>内置了通用的 Mapper 和通用的 Service，只需要添加少量配置即可实现 DAO 层和 Service 层；</p></li><li><p>内置了一个分布式唯一 ID 生成器，可以提供分布式环境下的 ID 生成策略；</p></li><li><p>通过 Maven 插件可以集成生成代码能力，可以快速生成 Mapper、Service 以及 Controller 层的代码，同时支持模块引擎的生成；</p></li><li><p>内置了分页插件，可以实现和 PageHelper 类似的&quot;物理分页&quot;，而且分页插件支持多种数据库；</p></li><li><p>内置了一款性能分析插件，通过该插件我们可以获取一条 SQL 语句的执行时间，可以更快地帮助我们发现慢查询。</p></li></ul><p>既然 MyBatis-Plus 在 MyBatis 之上提供了这么多的扩展，那么我们就来快速上手体验一下 MyBatis-Plus。这里我们依旧选用 MySQL 数据库，复用上面介绍 MyBatis-Generator 示例时用到的 test 库和 t_customer 表。</p><p>首先，新建一个 Spring Boot 项目，这里我们可以使用 Spring 官网提供的<a href="https://start.spring.io/?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">项目生成器</a>快速生成，导入 IDEA 之后会发现 Spring Boot 的配置和启动类都已经生成好了，如下图所示：</p>',11),u=p(`<p>Spring Boot 示例项目的结构图</p><p>接下来我们打开 pom.xml 文件，看到其中已经自动添加了 Spring Boot 的全部依赖，此时只需要添加 mysql-connector-java 依赖以及 MyBatis-Plus 依赖即可（目前 MyBatis-Plus 最新版本是 3.4.2）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">com.baomidou</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">mybatis</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plus</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">boot</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">starter</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;">3.4</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">connector</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">java</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">com.baomidou</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">mybatis</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plus</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">boot</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">starter</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">3.4</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">connector</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">java</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>再接下来，我们修改 application.properties 文件，添加数据库的相关配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.datasource.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">xxx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.datasource.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">xxx</span></span></code></pre></div><p>然后，我们开始编写 Customer 类和 CustomerMapper 接口，这两个类非常简单，Customer 类中需要定义 t_customer 表中各列对应的属性，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TableName</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;t_customer&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 通过@TableName注解，指定Customer与 t_customer表的关联关系</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String password;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long account;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略上述字段的getter/setter方法，以及toString()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TableName</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;t_customer&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 通过@TableName注解，指定Customer与 t_customer表的关联关系</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer id;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String password;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long account;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略上述字段的getter/setter方法，以及toString()方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>CustomerMapper 接口的定义更加简单，只需要继承 BaseMapper 即可，具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomerMapper</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseMapper</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Customer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 无须提供任何方法定义，而是从BaseMapper继承</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomerMapper</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseMapper</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Customer</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 无须提供任何方法定义，而是从BaseMapper继承</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，我们修改一下这个 Spring Boot 项目的启动类 DemoApplication，在其中添加 @MapperScan 注解指定 Mapper 接口所在的包，该注解会自动进行扫描，DemoApplication 的具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">MapperScan</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.example.demo.mapper&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(DemoApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MapperScan</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.example.demo.mapper&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(DemoApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>完成上述示例的编写之后，我们可以添加一个测试用例来查询 t_customer 表中的数据，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootTest</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoApplicationTests</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CustomerMapper customerMapper;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testSelect</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Customer customer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Customer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Bob&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer.</span><span style="color:#B392F0;">setPassword</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pwd&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        customer.</span><span style="color:#B392F0;">setAccount</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10097L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> insert </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> customerMapper.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(customer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;affect row num:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> insert);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Customer</span><span style="color:#E1E4E8;">&gt; userList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> customerMapper.</span><span style="color:#B392F0;">selectList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        userList.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootTest</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoApplicationTests</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CustomerMapper customerMapper;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testSelect</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Customer customer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Customer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        customer.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        customer.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Bob&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        customer.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pwd&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        customer.</span><span style="color:#6F42C1;">setAccount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10097L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> insert </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> customerMapper.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(customer);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;affect row num:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> insert);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Customer</span><span style="color:#24292E;">&gt; userList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> customerMapper.</span><span style="color:#6F42C1;">selectList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        userList.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行该单元测试之后，得到如下输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">affect row num</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">Customer{id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Bob&#39;</span><span style="color:#E1E4E8;">, password</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;pwd&#39;</span><span style="color:#E1E4E8;">, account</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10097</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">affect row num</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">Customer{id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Bob&#39;</span><span style="color:#24292E;">, password</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;pwd&#39;</span><span style="color:#24292E;">, account</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10097</span><span style="color:#24292E;">}</span></span></code></pre></div><p>MyBatis-Plus 的基础使用示例就介绍到这里了。另外，MyBatis-Plus<a href="https://baomidou.com/guide/#%E7%89%B9%E6%80%A7?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">官方文档</a>中还提供了很多核心功能的说明和介绍，同时 MyBatis-Plus 还提供了<a href="https://github.com/baomidou/mybatis-plus-samples?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">示例 GitHub 仓库</a>，其中包含了非常多的 MyBatis-Plus 示例代码和使用技巧，非常值得你参考。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲我们重点介绍了 MyBatis 相关的辅助工具以及在 MyBatis 之上衍生出来的扩展框架。</p><ul><li><p>首先，分析了 MyBatis-Generator 工具，它可以根据我们已有的数据表快速生成 MyBatis 中的 Domain 类、Mapper 接口以及 Mapper.xml 文件。</p></li><li><p>然后，介绍了 MyBatis 分页插件------ PageHelper，PageHelper 可以让我们直接使用 RowBounds API 实现&quot;内存分页&quot;，同时也可以帮助我们实现对不同数据库产品的分页功能。</p></li><li><p>最后，还讲解了 MyBatis-Plus 框架，MyBatis-Plus 内置了默认的 DAO 和 Service 实现以及分页功能，可以大幅度提高开发效率，你也可以结合我展示的示例来帮助你快速上手 MyBatis-Plus 框架。</p></li></ul><p>至此，我们这门课程的全部内容就讲解完了，关于每个主题或者相关知识点，如果有什么问题或疑惑，欢迎你留言和我交流。</p><hr><p>[</p>`,22),F=a("p",null,[s("]("),a("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/Mka"),s(")")],-1),g=a("p",null,[a("strong",null,"《Java 工程师高薪训练营》")],-1),d=a("p",null,[s("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),a("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),s("！")],-1);function m(D,A,q,B,C,b){const n=e("Image");return t(),r("div",null,[y,l(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/31/F3/CioPOWBtTDqAYagkAABmeFv2Z84519.png"}),s(),E,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/31/EA/Cgp9HWBtTFKAVlWCAACyAbYHCQg938.png"}),s(),i,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/31/EA/Cgp9HWBtTGCAB50qAADaNi9sMew051.png"}),s(),u,l(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"}),s(),F,g,d])}const M=o(c,[["render",m]]);export{v as __pageData,M as default};
