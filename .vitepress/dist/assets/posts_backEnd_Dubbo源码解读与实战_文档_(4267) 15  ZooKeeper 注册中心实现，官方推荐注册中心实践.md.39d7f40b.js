import{_ as l,j as o,o as t,g as r,k as p,h as n,s,Q as e}from"./chunks/framework.4e7d56ce.js";const M=JSON.parse('{"title":"15ZooKeeper注册中心实现，官方推荐注册中心实践","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4267) 15  ZooKeeper 注册中心实现，官方推荐注册中心实践.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4267) 15  ZooKeeper 注册中心实现，官方推荐注册中心实践.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4267) 15  ZooKeeper 注册中心实现，官方推荐注册中心实践.md"},E=s("h1",{id:"_15zookeeper注册中心实现-官方推荐注册中心实践",tabindex:"-1"},[n("15ZooKeeper注册中心实现，官方推荐注册中心实践 "),s("a",{class:"header-anchor",href:"#_15zookeeper注册中心实现-官方推荐注册中心实践","aria-label":'Permalink to "15ZooKeeper注册中心实现，官方推荐注册中心实践"'},"​")],-1),y=s("p",null,"Dubbo 支持 ZooKeeper 作为注册中心服务，这也是 Dubbo 推荐使用的注册中心。为了让你能更好地理解 ZooKeeper 在 Dubbo 中的应用，接下来我们就先简单回顾下 ZooKeeper。",-1),i=s("p",null,[n("Dubbo 本身是一个分布式的 RPC 开源框架，各个依赖于 Dubbo 的服务节点都是单独部署的，为了让 Provider 和 Consumer 能够实时获取彼此的信息，就得依赖于一个"),s("strong",null,"一致性的服务发现组件"),n("实现注册和订阅。Dubbo 可以接入多种服务发现组件，例如，ZooKeeper、etcd、Consul、Eureka 等。其中，Dubbo 特别推荐使用 ZooKeeper。")],-1),d=s("p",null,[s("strong",null,"ZooKeeper 是为分布式应用所设计的高可用且一致性的开源协调服务"),n("。它是一个树型的目录服务，支持变更推送，非常适合应用在生产环境中。")],-1),C=s("p",null,"下面是 Dubbo 官方文档中的一张图，展示了 Dubbo 在 Zookeeper 中的节点层级结构：",-1),u=s("p",null,"Zookeeper 存储的 Dubbo 数据",-1),F=s("p",null,'图中的"dubbo"节点是 Dubbo 在 Zookeeper 中的根节点，"dubbo"是这个根节点的默认名称，当然我们也可以通过配置进行修改。',-1),h=s("p",null,'图中 Service 这一层的节点名称是服务接口的全名，例如 demo 示例中，该节点的名称为"org.apache.dubbo.demo.DemoService"。',-1),g=s("p",null,"图中 Type 这一层的节点是 URL 的分类，一共有四种分类，分别是：providers（服务提供者列表）、consumers（服务消费者列表）、routes（路由规则列表）和 configurations（配置规则列表）。",-1),D=s("p",null,"根据不同的 Type 节点，图中 URL 这一层中的节点包括：Provider URL 、Consumer URL 、Routes URL 和 Configurations URL。",-1),k=s("h3",{id:"zookeeperregistryfactory",tabindex:"-1"},[n("ZookeeperRegistryFactory "),s("a",{class:"header-anchor",href:"#zookeeperregistryfactory","aria-label":'Permalink to "ZookeeperRegistryFactory"'},"​")],-1),A=s("p",null,[n("在前面第 13 课时介绍 Dubbo 注册中心核心概念的时候，我们讲解了 RegistryFactory 这个工厂接口以及其子类 AbstractRegistryFactory，AbstractRegistryFactory 仅仅是提供了缓存 Registry 对象的功能，并未真正实现 Registry 的创建，具体的创建逻辑是由子类完成的。在 dubbo-registry-zookeeper 模块中的 SPI 配置文件（目录位置如下图所示）中，指定了"),s("strong",null,"RegistryFactory 的实现类------ ZookeeperRegistryFactory"),n("。")],-1),b=e(`<p>RegistryFactory 的 SPI 配置文件位置</p><p>ZookeeperRegistryFactory 实现了 AbstractRegistryFactory，其中的 createRegistry() 方法会创建 ZookeeperRegistry 实例，后续将由该 ZookeeperRegistry 实例完成与 Zookeeper 的交互。</p><p>另外，ZookeeperRegistryFactory 中还提供了一个 setZookeeperTransporter() 方法，你可以回顾一下之前我们介绍的 Dubbo SPI 机制，会通过 SPI 或 Spring Ioc 的方式完成自动装载。</p><h3 id="zookeepertransporter" tabindex="-1">ZookeeperTransporter <a class="header-anchor" href="#zookeepertransporter" aria-label="Permalink to &quot;ZookeeperTransporter&quot;">​</a></h3><p>dubbo-remoting-zookeeper 模块是 dubbo-remoting 模块的子模块，但它并不依赖 dubbo-remoting 中的其他模块，是相对独立的，所以这里我们可以直接介绍该模块。</p><p>简单来说，dubbo-remoting-zookeeper 模块是在 Apache Curator 的基础上封装了一套 Zookeeper 客户端，将与 Zookeeper 的交互融合到 Dubbo 的体系之中。</p><p><strong>dubbo-remoting-zookeeper 模块中有两个核心接口：ZookeeperTransporter 接口和 ZookeeperClient 接口。</strong></p><p>ZookeeperTransporter 只负责一件事情，那就是创建 ZookeeperClient 对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">SPI</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;curator&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZookeeperTransporter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#B392F0;">Adaptive</span><span style="color:#E1E4E8;">({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY})</span></span>
<span class="line"><span style="color:#E1E4E8;">    ZookeeperClient </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">URL</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">SPI</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;curator&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ZookeeperTransporter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#6F42C1;">Adaptive</span><span style="color:#24292E;">({Constants.CLIENT_KEY, Constants.TRANSPORTER_KEY})</span></span>
<span class="line"><span style="color:#24292E;">    ZookeeperClient </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span><span style="color:#E36209;">URL</span><span style="color:#24292E;"> </span><span style="color:#E36209;">url</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们从代码中可以看到，ZookeeperTransporter 接口被 @SPI 注解修饰，成为一个扩展点，默认选择扩展名 &quot;curator&quot; 的实现，其中的 connect() 方法用于创建 ZookeeperClient 实例（该方法被 @Adaptive 注解修饰，我们可以通过 URL 参数中的 client 或 transporter 参数覆盖 @SPI 注解指定的默认扩展名）。</p>`,10),L=e(`<p>按照前面对 Registry 分析的思路，作为一个抽象实现，AbstractZookeeperTransporter 肯定是实现了创建 ZookeeperClient 之外的其他一些增强功能，然后由子类继承。不然的话，直接由 CuratorZookeeperTransporter 实现 ZookeeperTransporter 接口创建 ZookeeperClient 实例并返回即可，没必要在继承关系中再增加一层抽象类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CuratorZookeeperTransporter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">AbstractZookeeperTransporter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建ZookeeperClient实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ZookeeperClient </span><span style="color:#B392F0;">createZookeeperClient</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CuratorZookeeperClient</span><span style="color:#E1E4E8;">(url); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CuratorZookeeperTransporter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">AbstractZookeeperTransporter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建ZookeeperClient实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ZookeeperClient </span><span style="color:#6F42C1;">createZookeeperClient</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CuratorZookeeperClient</span><span style="color:#24292E;">(url); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AbstractZookeeperTransporter 的核心功能有如下：</p><ul><li><p>缓存 ZookeeperClient 实例；</p></li><li><p>在某个 Zookeeper 节点无法连接时，切换到备用 Zookeeper 地址。</p></li></ul><p>在配置 Zookeeper 地址的时候，我们可以配置多个 Zookeeper 节点的地址，这样的话，当一个 Zookeeper 节点宕机之后，Dubbo 就可以主动切换到其他 Zookeeper 节点。例如，我们提供了如下的 URL 配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zookeeper</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?backup=127.0.0.1:8989,127.0.0.1:9999</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zookeeper</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?backup=127.0.0.1:8989,127.0.0.1:9999</span></span></code></pre></div><p>AbstractZookeeperTransporter 的 connect() 方法首先会得到上述 URL 中配置的 127.0.0.1:2181、127.0.0.1:8989 和 127.0.0.1:9999 这三个 Zookeeper 节点地址，然后从 ZookeeperClientMap 缓存（这是一个 Map，Key 为 Zookeeper 节点地址，Value 是相应的 ZookeeperClient 实例）中查找一个可用 ZookeeperClient 实例。如果查找成功，则复用 ZookeeperClient 实例；如果查找失败，则创建一个新的 ZookeeperClient 实例返回并更新 ZookeeperClientMap 缓存。</p><p>ZookeeperClient 实例连接到 Zookeeper 集群之后，就可以了解整个 Zookeeper 集群的拓扑，后续再出现 Zookeeper 节点宕机的情况，就是由 Zookeeper 集群本身以及 Apache Curator 共同完成故障转移。</p><h3 id="zookeeperclient" tabindex="-1">ZookeeperClient <a class="header-anchor" href="#zookeeperclient" aria-label="Permalink to &quot;ZookeeperClient&quot;">​</a></h3><p>从名字就可以看出，ZookeeperClient 接口是 Dubbo 封装的 Zookeeper 客户端，该接口定义了大量的方法，都是用来与 Zookeeper 进行交互的。</p><ul><li><p>create() 方法：创建 ZNode 节点，还提供了创建临时 ZNode 节点的重载方法。</p></li><li><p>getChildren() 方法：获取指定节点的子节点集合。</p></li><li><p>getContent() 方法：获取某个节点存储的内容。</p></li><li><p>delete() 方法：删除节点。</p></li><li><p>add*Listener() / remove*Listener() 方法：添加/删除监听器。</p></li><li><p>close() 方法：关闭当前 ZookeeperClient 实例。</p></li></ul><p><strong>AbstractZookeeperClient 作为 ZookeeperClient 接口的抽象实现</strong>，主要提供了如下几项能力：</p><ul><li><p>缓存当前 ZookeeperClient 实例创建的持久 ZNode 节点；</p></li><li><p>管理当前 ZookeeperClient 实例添加的各类监听器；</p></li><li><p>管理当前 ZookeeperClient 的运行状态。</p></li></ul><p>我们来看 AbstractZookeeperClient 的核心字段，首先是 persistentExistNodePath（ConcurrentHashSet<code>&lt;String&gt;</code>类型）字段，它缓存了当前 ZookeeperClient 创建的持久 ZNode 节点路径，在创建 ZNode 节点之前，会先查这个缓存，而不是与 Zookeeper 交互来判断持久 ZNode 节点是否存在，这就减少了一次与 Zookeeper 的交互。</p><p>dubbo-remoting-zookeeper 对外提供了 StateListener、DataListener 和 ChildListener 三种类型的监听器。</p><ul><li><strong>StateListener</strong>：主要负责监听 Dubbo 与 Zookeeper 集群的连接状态，包括 SESSION_LOST、CONNECTED、RECONNECTED、SUSPENDED 和 NEW_SESSION_CREATED。</li></ul>`,16),Z=s("ul",null,[s("li",null,[s("strong",null,"DataListener"),n("：主要监听某个节点存储的数据变化。")])],-1),v=s("ul",null,[s("li",null,"**ChildListener：**主要监听某个 ZNode 节点下的子节点变化。")],-1),_=e(`<p>在 AbstractZookeeperClient 中维护了 stateListeners、listeners 以及 childListeners 三个集合，分别管理上述三种类型的监听器。虽然监听内容不同，但是它们的管理方式是类似的，所以这里我们只分析 listeners 集合的操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addDataListener</span><span style="color:#E1E4E8;">(String path, </span></span>
<span class="line"><span style="color:#E1E4E8;">      DataListener listener, Executor executor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取指定path上的DataListener集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConcurrentMap&lt;</span><span style="color:#F97583;">DataListener</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">TargetDataListener</span><span style="color:#E1E4E8;">&gt; dataListenerMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      listeners.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(path, k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查询该DataListener关联的TargetDataListener</span></span>
<span class="line"><span style="color:#E1E4E8;">    TargetDataListener targetListener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        dataListenerMap.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(listener, </span></span>
<span class="line"><span style="color:#E1E4E8;">            k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createTargetDataListener</span><span style="color:#E1E4E8;">(path, k));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过TargetDataListener在指定的path上添加监听</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addTargetDataListener</span><span style="color:#E1E4E8;">(path, targetListener, executor);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addDataListener</span><span style="color:#24292E;">(String path, </span></span>
<span class="line"><span style="color:#24292E;">      DataListener listener, Executor executor) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取指定path上的DataListener集合</span></span>
<span class="line"><span style="color:#24292E;">    ConcurrentMap&lt;</span><span style="color:#D73A49;">DataListener</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">TargetDataListener</span><span style="color:#24292E;">&gt; dataListenerMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      listeners.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(path, k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查询该DataListener关联的TargetDataListener</span></span>
<span class="line"><span style="color:#24292E;">    TargetDataListener targetListener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        dataListenerMap.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(listener, </span></span>
<span class="line"><span style="color:#24292E;">            k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createTargetDataListener</span><span style="color:#24292E;">(path, k));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过TargetDataListener在指定的path上添加监听</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addTargetDataListener</span><span style="color:#24292E;">(path, targetListener, executor);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的 createTargetDataListener() 方法和 addTargetDataListener() 方法都是抽象方法，由 AbstractZookeeperClient 的子类实现，TargetDataListener 是 AbstractZookeeperClient 中标记的一个泛型。</p><p>为什么 AbstractZookeeperClient 要使用泛型定义？这是因为不同的 ZookeeperClient 实现可能依赖不同的 Zookeeper 客户端组件，不同 Zookeeper 客户端组件的监听器实现也有所不同，而整个 dubbo-remoting-zookeeper 模块对外暴露的监听器是统一的，就是上面介绍的那三种。因此，这时就需要一层转换进行解耦，这层解耦就是通过 TargetDataListener 完成的。</p><blockquote><p>虽然在 Dubbo 2.7.7 版本中只支持 Curator，但是在 Dubbo 2.6.5 版本的源码中可以看到，ZookeeperClient 还有使用 ZkClient 的实现。</p></blockquote><p><strong>在最新的 Dubbo 版本中，CuratorZookeeperClient 是 AbstractZookeeperClient 的唯一实现类</strong>，在其构造方法中会初始化 Curator 客户端并阻塞等待连接成功：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CuratorZookeeperClient</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;timeout&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sessionExpireMs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zk.session.expire&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">60000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    CuratorFrameworkFactory.Builder builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        CuratorFrameworkFactory.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">connectString</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">getBackupAddress</span><span style="color:#E1E4E8;">())</span><span style="color:#6A737D;">//zk地址(包括备用地址)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">retryPolicy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RetryNTimes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// 重试配置</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">connectionTimeoutMs</span><span style="color:#E1E4E8;">(timeout) </span><span style="color:#6A737D;">// 连接超时时长</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">sessionTimeoutMs</span><span style="color:#E1E4E8;">(sessionExpireMs); </span><span style="color:#6A737D;">// session过期时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略处理身份验证的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加连接状态的监听</span></span>
<span class="line"><span style="color:#E1E4E8;">    client.</span><span style="color:#B392F0;">getConnectionStateListenable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CuratorConnectionStateListener</span><span style="color:#E1E4E8;">(url));</span></span>
<span class="line"><span style="color:#E1E4E8;">    client.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> connected </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">blockUntilConnected</span><span style="color:#E1E4E8;">(timeout, </span></span>
<span class="line"><span style="color:#E1E4E8;">        TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 检测connected这个返回值，连接失败抛出异常</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CuratorZookeeperClient</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;timeout&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sessionExpireMs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zk.session.expire&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">60000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    CuratorFrameworkFactory.Builder builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        CuratorFrameworkFactory.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">connectString</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">getBackupAddress</span><span style="color:#24292E;">())</span><span style="color:#6A737D;">//zk地址(包括备用地址)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">retryPolicy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RetryNTimes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 重试配置</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">connectionTimeoutMs</span><span style="color:#24292E;">(timeout) </span><span style="color:#6A737D;">// 连接超时时长</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">sessionTimeoutMs</span><span style="color:#24292E;">(sessionExpireMs); </span><span style="color:#6A737D;">// session过期时间</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略处理身份验证的逻辑</span></span>
<span class="line"><span style="color:#24292E;">    client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加连接状态的监听</span></span>
<span class="line"><span style="color:#24292E;">    client.</span><span style="color:#6F42C1;">getConnectionStateListenable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CuratorConnectionStateListener</span><span style="color:#24292E;">(url));</span></span>
<span class="line"><span style="color:#24292E;">    client.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> connected </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">blockUntilConnected</span><span style="color:#24292E;">(timeout, </span></span>
<span class="line"><span style="color:#24292E;">        TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 检测connected这个返回值，连接失败抛出异常</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>CuratorZookeeperClient 与 Zookeeper 交互的全部操作，都是围绕着这个 Apache Curator 客户端展开的， Apache Curator 的具体使用方式在前面的第 6 和 7 课时已经介绍过了，这里就不再赘述。</p><p>内部类 CuratorWatcherImpl 就是 CuratorZookeeperClient 实现 AbstractZookeeperClient 时指定的泛型类，它实现了 TreeCacheListener 接口，可以添加到 TreeCache 上监听自身节点以及子节点的变化。在 childEvent() 方法的实现中我们可以看到，当 TreeCache 关注的树型结构发生变化时，会将触发事件的路径、节点内容以及事件类型传递给关联的 DataListener 实例进行回调：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">childEvent</span><span style="color:#E1E4E8;">(CuratorFramework client, TreeCacheEvent event) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (dataListener </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TreeCacheEvent.Type type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        EventType eventType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> NODE_ADDED</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                eventType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EventType.NodeCreated;</span></span>
<span class="line"><span style="color:#E1E4E8;">                path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(), CHARSET);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> NODE_UPDATED</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                ...</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> NODE_REMOVED</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                ...</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 省略其他时间的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 回调DataListener，传递触发事件的path、节点内容以及事件类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        dataListener.</span><span style="color:#B392F0;">dataChanged</span><span style="color:#E1E4E8;">(path, content, eventType);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">childEvent</span><span style="color:#24292E;">(CuratorFramework client, TreeCacheEvent event) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (dataListener </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        TreeCacheEvent.Type type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        EventType eventType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (type) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> NODE_ADDED</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                eventType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EventType.NodeCreated;</span></span>
<span class="line"><span style="color:#24292E;">                path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(), CHARSET);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> NODE_UPDATED</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                ...</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> NODE_REMOVED</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                ...</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 省略其他时间的处理</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 回调DataListener，传递触发事件的path、节点内容以及事件类型</span></span>
<span class="line"><span style="color:#24292E;">        dataListener.</span><span style="color:#6F42C1;">dataChanged</span><span style="color:#24292E;">(path, content, eventType);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 CuratorZookeeperClient 的 addTargetDataListener() 方法实现中，我们可以看到 TreeCache 的创建、启动逻辑以及添加 CuratorWatcherImpl 监听的逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addTargetDataListener</span><span style="color:#E1E4E8;">(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener, Executor executor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建TreeCache</span></span>
<span class="line"><span style="color:#E1E4E8;">    TreeCache treeCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TreeCache.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">(client, path).</span><span style="color:#B392F0;">setCacheData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    treeCacheMap.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(path, treeCache); </span><span style="color:#6A737D;">// 缓存TreeCache</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (executor </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 添加监听</span></span>
<span class="line"><span style="color:#E1E4E8;">        treeCache.</span><span style="color:#B392F0;">getListenable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(treeCacheListener);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        treeCache.</span><span style="color:#B392F0;">getListenable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(treeCacheListener, executor);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    treeCache.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 启动</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addTargetDataListener</span><span style="color:#24292E;">(String path, CuratorZookeeperClient.CuratorWatcherImpl treeCacheListener, Executor executor) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建TreeCache</span></span>
<span class="line"><span style="color:#24292E;">    TreeCache treeCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TreeCache.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">(client, path).</span><span style="color:#6F42C1;">setCacheData</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    treeCacheMap.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(path, treeCache); </span><span style="color:#6A737D;">// 缓存TreeCache</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (executor </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 添加监听</span></span>
<span class="line"><span style="color:#24292E;">        treeCache.</span><span style="color:#6F42C1;">getListenable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(treeCacheListener);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        treeCache.</span><span style="color:#6F42C1;">getListenable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(treeCacheListener, executor);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    treeCache.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 启动</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果需要在回调中获取全部 Child 节点，那么 dubbo-remoting-zookeeper 调用方需要使用 ChildListener（在下面即将介绍的 ZookeeperRegistry 中可以看到 ChildListener 相关使用方式）。CuratorWatcherImpl 也是 ChildListener 与 CuratorWatcher 的桥梁，具体实现方式与上述逻辑类似，这里不再展开。</p><p>到此为止，dubbo-remoting-zookeeper 模块的核心实现就介绍完了，该模块作为 Dubbo 与 Zookeeper 交互的基础，不仅支撑了基于 Zookeeper 的注册中心的实现，还支撑了基于 Zookeeper 的服务发现的实现。这里我们重点关注基于 Zookeeper 的注册中心实现。</p><h3 id="zookeeperregistry" tabindex="-1">ZookeeperRegistry <a class="header-anchor" href="#zookeeperregistry" aria-label="Permalink to &quot;ZookeeperRegistry&quot;">​</a></h3><p>下面我们回到 dubbo-registry-zookeeper 模块，继续分析基于 Zookeeper 的注册中心实现。</p><p>在 ZookeeperRegistry 的构造方法中，会通过 ZookeeperTransporter 创建 ZookeeperClient 实例并连接到 Zookeeper 集群，同时还会添加一个连接状态的监听器。在该监听器中主要关注RECONNECTED 状态和 NEW_SESSION_CREATED 状态，在当前 Dubbo 节点与 Zookeeper 的连接恢复或是 Session 恢复的时候，会重新进行注册/订阅，防止数据丢失。这段代码比较简单，我们就不展开分析了。</p><p>doRegister() 方法和 doUnregister() 方法的实现都是通过 ZookeeperClient 找到合适的路径，然后创建（或删除）相应的 ZNode 节点。这里唯一需要注意的是，doRegister() 方法注册 Provider URL 的时候，会根据 dynamic 参数决定创建临时 ZNode 节点还是持久 ZNode 节点（默认创建临时 ZNode 节点），这样当 Provider 端与 Zookeeper 会话关闭时，可以快速将变更推送到 Consumer 端。</p><p>这里注意一下 toUrlPath() 这个方法得到的路径，是由下图中展示的方法拼装而成的，其中每个方法对应本课时开始展示的 Zookeeper 节点层级图中的一层。</p>`,19),m=s("p",null,"doSubscribe() 方法的核心是通过 ZookeeperClient 在指定的 path 上添加 ChildListener 监听器，当订阅的节点发现变化的时候，会通过 ChildListener 监听器触发 notify() 方法，在 notify() 方法中会触发传入的 NotifyListener 监听器。",-1),T=s("p",null,"从 doSubscribe() 方法的代码结构可看出，doSubscribe() 方法的逻辑分为了两个大的分支。",-1),B=s("p",null,"一个分支是处理：订阅 URL 中明确指定了 Service 层接口的订阅请求。该分支会从 URL 拿到 Consumer 关注的 category 节点集合，然后在每个 category 节点上添加 ChildListener 监听器。下面是 Demo 示例中 Consumer 订阅的三个 path，图中展示了构造 path 各个部分的相关方法：",-1),S=e(`<p>下面是这个分支的核心源码分析：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; urls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String path </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toCategoriesPath</span><span style="color:#E1E4E8;">(url)) { </span><span style="color:#6A737D;">// 要订阅的所有path</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 订阅URL对应的Listener集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConcurrentMap&lt;</span><span style="color:#F97583;">NotifyListener</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ChildListener</span><span style="color:#E1E4E8;">&gt; listeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        zkListeners.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(url, </span></span>
<span class="line"><span style="color:#E1E4E8;">               k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 一个NotifyListener关联一个ChildListener，这个ChildListener会回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ZookeeperRegistry.notify()方法，其中会回调当前NotifyListener</span></span>
<span class="line"><span style="color:#E1E4E8;">    ChildListener zkListener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> listeners.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(listener, </span></span>
<span class="line"><span style="color:#E1E4E8;">      k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> (parentPath, currentChilds) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          ZookeeperRegistry.this.</span><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(url, k, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">toUrlsWithEmpty</span><span style="color:#E1E4E8;">(url, parentPath, currentChilds)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 尝试创建持久节点，主要是为了确保当前path在Zookeeper上存在</span></span>
<span class="line"><span style="color:#E1E4E8;">    zkClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(path, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这一个ChildListener会添加到多个path上</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zkClient.</span><span style="color:#B392F0;">addChildListener</span><span style="color:#E1E4E8;">(path, </span></span>
<span class="line"><span style="color:#E1E4E8;">        zkListener);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (children </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果没有Provider注册，toUrlsWithEmpty()方法会返回empty协议的URL</span></span>
<span class="line"><span style="color:#E1E4E8;">        urls.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toUrlsWithEmpty</span><span style="color:#E1E4E8;">(url, path, children));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 初次订阅的时候，会主动调用一次notify()方法，通知NotifyListener处理当前已有的</span></span>
<span class="line"><span style="color:#6A737D;">// URL等注册数据</span></span>
<span class="line"><span style="color:#B392F0;">notify</span><span style="color:#E1E4E8;">(url, listener, urls);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; urls </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String path </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toCategoriesPath</span><span style="color:#24292E;">(url)) { </span><span style="color:#6A737D;">// 要订阅的所有path</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 订阅URL对应的Listener集合</span></span>
<span class="line"><span style="color:#24292E;">    ConcurrentMap&lt;</span><span style="color:#D73A49;">NotifyListener</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ChildListener</span><span style="color:#24292E;">&gt; listeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        zkListeners.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(url, </span></span>
<span class="line"><span style="color:#24292E;">               k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 一个NotifyListener关联一个ChildListener，这个ChildListener会回调</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ZookeeperRegistry.notify()方法，其中会回调当前NotifyListener</span></span>
<span class="line"><span style="color:#24292E;">    ChildListener zkListener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> listeners.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(listener, </span></span>
<span class="line"><span style="color:#24292E;">      k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> (parentPath, currentChilds) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          ZookeeperRegistry.this.</span><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(url, k, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">toUrlsWithEmpty</span><span style="color:#24292E;">(url, parentPath, currentChilds)));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 尝试创建持久节点，主要是为了确保当前path在Zookeeper上存在</span></span>
<span class="line"><span style="color:#24292E;">    zkClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(path, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这一个ChildListener会添加到多个path上</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zkClient.</span><span style="color:#6F42C1;">addChildListener</span><span style="color:#24292E;">(path, </span></span>
<span class="line"><span style="color:#24292E;">        zkListener);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (children </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果没有Provider注册，toUrlsWithEmpty()方法会返回empty协议的URL</span></span>
<span class="line"><span style="color:#24292E;">        urls.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">toUrlsWithEmpty</span><span style="color:#24292E;">(url, path, children));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 初次订阅的时候，会主动调用一次notify()方法，通知NotifyListener处理当前已有的</span></span>
<span class="line"><span style="color:#6A737D;">// URL等注册数据</span></span>
<span class="line"><span style="color:#6F42C1;">notify</span><span style="color:#24292E;">(url, listener, urls);</span></span></code></pre></div><p>doSubscribe() 方法的另一个分支是处理：监听所有 Service 层节点的订阅请求，例如，Monitor 就会发出这种订阅请求，因为它需要监控所有 Service 节点的变化。这个分支的处理逻辑是在根节点上添加一个 ChildListener 监听器，当有 Service 层的节点出现的时候，会触发这个 ChildListener，其中会重新触发 doSubscribe() 方法执行上一个分支的逻辑（即前面分析的针对确定的 Service 层接口订阅分支）。</p><p>下面是针对这个分支核心代码的分析：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toRootPath</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取根节点</span></span>
<span class="line"><span style="color:#6A737D;">// 获取NotifyListener对应的ChildListener</span></span>
<span class="line"><span style="color:#E1E4E8;">ConcurrentMap&lt;</span><span style="color:#F97583;">NotifyListener</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ChildListener</span><span style="color:#E1E4E8;">&gt; listeners </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    zkListeners.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(url, k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">ChildListener zkListener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> listeners.</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(listener, k </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  (parentPath, currentChilds) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String child </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> currentChilds) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URL.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(child);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">anyServices.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(child)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            anyServices.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(child); </span><span style="color:#6A737D;">// 记录该节点已经订阅过</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 该ChildListener要做的就是触发对具体Service节点的订阅</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">setPath</span><span style="color:#E1E4E8;">(child).</span><span style="color:#B392F0;">addParameters</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;interface&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                child, </span><span style="color:#9ECBFF;">&quot;check&quot;</span><span style="color:#E1E4E8;">, String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)), k);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">zkClient.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(root, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 保证根节点存在</span></span>
<span class="line"><span style="color:#6A737D;">// 第一次订阅的时候，要处理当前已有的Service层节点</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; services </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zkClient.</span><span style="color:#B392F0;">addChildListener</span><span style="color:#E1E4E8;">(root, zkListener);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">(services)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String service </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> services) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        service </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URL.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(service);</span></span>
<span class="line"><span style="color:#E1E4E8;">        anyServices.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(service);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(url.</span><span style="color:#B392F0;">setPath</span><span style="color:#E1E4E8;">(service).</span><span style="color:#B392F0;">addParameters</span><span style="color:#E1E4E8;">(INTERFACE_KEY,</span></span>
<span class="line"><span style="color:#E1E4E8;">           service, </span><span style="color:#9ECBFF;">&quot;check&quot;</span><span style="color:#E1E4E8;">, String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)), listener);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toRootPath</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取根节点</span></span>
<span class="line"><span style="color:#6A737D;">// 获取NotifyListener对应的ChildListener</span></span>
<span class="line"><span style="color:#24292E;">ConcurrentMap&lt;</span><span style="color:#D73A49;">NotifyListener</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ChildListener</span><span style="color:#24292E;">&gt; listeners </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    zkListeners.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(url, k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">ChildListener zkListener </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> listeners.</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(listener, k </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  (parentPath, currentChilds) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String child </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> currentChilds) {</span></span>
<span class="line"><span style="color:#24292E;">        child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> URL.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(child);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">anyServices.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(child)) {</span></span>
<span class="line"><span style="color:#24292E;">            anyServices.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(child); </span><span style="color:#6A737D;">// 记录该节点已经订阅过</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 该ChildListener要做的就是触发对具体Service节点的订阅</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">setPath</span><span style="color:#24292E;">(child).</span><span style="color:#6F42C1;">addParameters</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;interface&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                child, </span><span style="color:#032F62;">&quot;check&quot;</span><span style="color:#24292E;">, String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)), k);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">zkClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(root, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 保证根节点存在</span></span>
<span class="line"><span style="color:#6A737D;">// 第一次订阅的时候，要处理当前已有的Service层节点</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; services </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zkClient.</span><span style="color:#6F42C1;">addChildListener</span><span style="color:#24292E;">(root, zkListener);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(services)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String service </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> services) {</span></span>
<span class="line"><span style="color:#24292E;">        service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> URL.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(service);</span></span>
<span class="line"><span style="color:#24292E;">        anyServices.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(service);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">setPath</span><span style="color:#24292E;">(service).</span><span style="color:#6F42C1;">addParameters</span><span style="color:#24292E;">(INTERFACE_KEY,</span></span>
<span class="line"><span style="color:#24292E;">           service, </span><span style="color:#032F62;">&quot;check&quot;</span><span style="color:#24292E;">, String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)), listener);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ZookeeperRegistry 提供的 doUnsubscribe() 方法实现会将 URL 和 NotifyListener 对应的 ChildListener 从相关的 path 上删除，从而达到不再监听该 path 的效果。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们重点介绍了 Dubbo 接入 Zookeeper 作为注册中心的核心实现。</p><p>首先我们快速回顾了 Zookeeper 的基础内容，以及作为 Dubbo 注册中心时 Zookeeper 存储的具体内容，之后介绍了针对 Zookeeper 的 RegistryFactory 实现------ ZookeeperRegistryFactory。</p><p>接下来我们讲解了 Dubbo 接入 Zookeeper 时使用的组件实现，重点分析了 ZookeeperTransporter 和 ZookeeperClient 实现，它们底层依赖 Apache Curator 与 Zookeeper 完成交互。</p><p>最后，我们还说明了 ZookeeperRegistry 是如何通过 ZookeeperClient 接入 Zookeeper，实现 Registry 的相关功能。</p><p>关于本课时，你若还有什么疑问或想法，欢迎你留言跟我分享。</p>`,12);function R(f,N,P,q,I,U){const a=o("Image");return t(),r("div",null,[E,y,i,d,C,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/4F/67/Ciqc1F9gay-AdrWMAAGjEWP00aQ382.png"}),n(),u,F,h,g,D,k,A,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/4F/72/CgqCHl9ga02AUesuAABPhgP1Voc406.png"}),n(),b,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/4F/73/CgqCHl9ga2CAVhNZAACNo2yx1q4384.png"}),n(),L,p(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/4F/73/CgqCHl9ga4GAQmYSAAAtjyGIDtE504.png"}),n(),Z,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/4F/67/Ciqc1F9ga4qAVm-6AAAzoshbsio688.png"}),n(),v,p(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/4F/73/CgqCHl9ga4-Aa-4IAABLF9PT8ls256.png"}),n(),_,p(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/4F/67/Ciqc1F9ga6qAOzWsAAGn7w4zPbo192.png"}),n(),m,T,B,p(a,{alt:"Lark20200915-155646.png",src:"https://s0.lgstatic.com/i/image/M00/4F/6F/Ciqc1F9gc_WAYTGzAAEKDnK-16Q791.png"}),n(),S])}const w=l(c,[["render",R]]);export{M as __pageData,w as default};
