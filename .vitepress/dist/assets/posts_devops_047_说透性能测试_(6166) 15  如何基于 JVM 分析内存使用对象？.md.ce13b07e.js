import{_ as o,j as e,o as t,g as c,k as n,h as l,s,Q as p}from"./chunks/framework.4e7d56ce.js";const I=JSON.parse('{"title":"JVM 内存分配 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/047_说透性能测试/(6166) 15  如何基于 JVM 分析内存使用对象？.md","filePath":"posts/devops/047_说透性能测试/(6166) 15  如何基于 JVM 分析内存使用对象？.md","lastUpdated":1696417798000}'),r={name:"posts/devops/047_说透性能测试/(6166) 15  如何基于 JVM 分析内存使用对象？.md"},E=s("p",null,"上一讲我带你学习了基于 JVM 的线程分析，相信你已经可以通过热点线程分析出哪些方法在消耗 CPU，拿到这些方法之后你就可以和研发人员讨论后续的优化方案了。那这一讲我们就来重点学习 JVM 内存是如何管理的，有哪些手段可以分析内存对象，并帮助你定位内存的瓶颈。",-1),y=s("p",null,"提到分析 JVM 的内存对象，可能你会问我，之前讲过如何判断服务器内存瓶颈，那 JVM 内存和服务器内存有什么联系呢。我们先来看下这两者的关系，如下图所示：",-1),i=s("p",null,"图 1：内存关系示意图",-1),C=s("p",null,"其实二者的关系很简单，对于服务器系统而言，JVM 只是其中的一部分。当操作系统内存出现瓶颈时，我们便会重点排查哪些应用会占用内存。不过对于更深一步分析内存的使用，并不仅仅是统计使用、空闲等这些数值，我们需要进一步去了解内存结构，以及内存如何分配、如何回收，这样你才能更好地确定内存的问题。",-1),F=s("h3",{id:"jvm-内存分配",tabindex:"-1"},[l("JVM 内存分配 "),s("a",{class:"header-anchor",href:"#jvm-内存分配","aria-label":'Permalink to "JVM 内存分配"'},"​")],-1),d=s("p",null,"通过第 14 讲的学习你可以知道，Java 文件一般是先编译成 class 结尾的文件，然后通过类加载器到 JVM 内存中。接着我们来看看 JVM 内存结构图，这样能够对它有个全局的了解。",-1),h=p('<p>图 2：JVM 内存分配示意图</p><h4 id="_1-本地方法栈" tabindex="-1">1.本地方法栈 <a class="header-anchor" href="#_1-本地方法栈" aria-label="Permalink to &quot;1.本地方法栈&quot;">​</a></h4><p>本地方法栈保存的是 native 方法的信息，native 方法就是 Java 调用非 Java 代码的接口，为什么会有这样的设置呢？简单来说，sun 的解释器是由 C 语言实现的，而 jre 又是基于 Java 语言，所以需要 native 方法来进行跨语言的调用。</p><h4 id="_2-java-栈" tabindex="-1">2.Java 栈 <a class="header-anchor" href="#_2-java-栈" aria-label="Permalink to &quot;2.Java 栈&quot;">​</a></h4><p>Java 栈是常用的内存区域之一，它里面存放着<strong>基本数据类型</strong> 和<strong>对象的引用</strong>，可能你不太清楚什么是对象的引用，拿上一讲中 HelloTester helloTester=new HelloTester() 为例，在 Java 栈中 HelloTester 是个引用，指向在堆空间中开辟的该对象的空间。</p><h4 id="_3-方法区-jdk-1-8-已经移除" tabindex="-1">3.方法区（JDK 1.8+已经移除） <a class="header-anchor" href="#_3-方法区-jdk-1-8-已经移除" aria-label="Permalink to &quot;3.方法区（JDK 1.8+已经移除）&quot;">​</a></h4><p>也叫作永久区，用来<strong>存储类信息</strong>，如上文描述的 HelloTester。值得注意的是方法区在 JDK 1.8 以上已经被元空间取代，并且元空间不在 JVM 中了，而是在本地内存中独立开辟存储空间。</p><h4 id="_4-程序计数器" tabindex="-1">4.程序计数器 <a class="header-anchor" href="#_4-程序计数器" aria-label="Permalink to &quot;4.程序计数器&quot;">​</a></h4><p>可以认为是<strong>线程的信号指示器</strong>，它的作用是保存线程当前程序的执行位置，以保证多线程的切换。因为在多线程的情况下，CPU 并不是完成一个线程执行再去执行另外一个线程，而是不停地切换线程执行，这时程序计数器就可以发挥作用了。</p><h4 id="_5-堆" tabindex="-1">5.堆 <a class="header-anchor" href="#_5-堆" aria-label="Permalink to &quot;5.堆&quot;">​</a></h4><p>堆区域是 JVM 调优最重要的区域，堆中存放的数据很多是对象实例，如 HelloTester 的对象存储。堆空间占据着 JVM 中最大的存储区域，存放了很多对象，所以大多数基于 JVM 的内存调优也是对堆空间的调优。</p><p>堆空间并非取之不尽，如果一直存放总有用完的时候，所以对于有用的对象应当保存起来，无用的对象应当回收，为了更好地实现这一机制，JVM 将堆空间分成了新生代和老生代，如下图所示：</p>',12),m=s("p",null,"图 3：GC 示意对比图",-1),g=s("p",null,"通过图 3 可以看到新生代和老年代的对比，Minor GC 发生在新生代，而 Full GC 发生在老年代。新生代分为三个区，一个 Eden 区和两个 Survivor 区。",-1),_=s("p",null,"先来看下 Eden 区的作用，大部分新生成的对象都是在 Eden 区，Eden 区满了之后便没有内存给新对象使用，Eden 区便会 Minor GC 回收无用内存，剩下的存活对象便会转移到 Survivor 区。",-1),u=s("p",null,"那两个 Survivor 区的作用分别是什么呢？两者其实是对称分布的，一个是 From 区，一个是 To 区。从 Eden 区存活下来的对象首先会被复制到 From 区，当 From 区满时，此时还存活的对象会被转移到 To 区，经历了多次的 Minor GC 后，还存活的对象就会被复制到老年代，老年代的 GC 一般叫作 FullGC 或者 MajorGC。",-1),v=s("p",null,"我们对比下新生代垃圾回收和老年代垃圾回收的区别，如下表所示：",-1),A=p(`<h3 id="如何定位内存占用问题" tabindex="-1">如何定位内存占用问题 <a class="header-anchor" href="#如何定位内存占用问题" aria-label="Permalink to &quot;如何定位内存占用问题&quot;">​</a></h3><p>回到我们实际工作当中，当你发现 JVM 中使用的内存越来越多或者增长很快的时候，频繁 GC 的时候，应当如何去定位哪些对象导致的这些问题呢？</p><p>这其实涉及两个问题：</p><ul><li><p>如何去观察 GC 的频次；</p></li><li><p>定位占用内存的对象。</p></li></ul><h4 id="_1-如何观察-gc-的频次" tabindex="-1">1.如何观察 GC 的频次？ <a class="header-anchor" href="#_1-如何观察-gc-的频次" aria-label="Permalink to &quot;1.如何观察 GC 的频次？&quot;">​</a></h4><p>本部分我以 JDK 自带的工具来讲解，我一般使用 jstat 来查看 GC 的频次。首先我们来看下基本用法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# jstat </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">gc </span><span style="color:#79B8FF;">26607</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span></span>
<span class="line"><span style="color:#79B8FF;">512.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">512.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">320.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">86016.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">27828.5</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">175104.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">157974.6</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">122840.0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">116934.9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16128.0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15060.4</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">5328</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">37.311</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">1.042</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">38.353</span></span>
<span class="line"><span style="color:#79B8FF;">512.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">512.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">320.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">86016.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">27981.9</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">175104.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">157974.6</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">122840.0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">116934.9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16128.0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15060.4</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">5328</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">37.311</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">1.042</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">38.353</span></span>
<span class="line"><span style="color:#79B8FF;">512.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">512.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">320.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">86016.0</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">28885.4</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">175104.0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">157974.6</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">122840.0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">116934.9</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16128.0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15060.4</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">5328</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">37.311</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">1.042</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">38.353</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# jstat </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">gc </span><span style="color:#005CC5;">26607</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span></span>
<span class="line"><span style="color:#005CC5;">512.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">512.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">320.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">86016.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">27828.5</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">175104.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">157974.6</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">122840.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">116934.9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16128.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15060.4</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">5328</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">37.311</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">1.042</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">38.353</span></span>
<span class="line"><span style="color:#005CC5;">512.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">512.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">320.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">86016.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">27981.9</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">175104.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">157974.6</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">122840.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">116934.9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16128.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15060.4</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">5328</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">37.311</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">1.042</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">38.353</span></span>
<span class="line"><span style="color:#005CC5;">512.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">512.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">320.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">86016.0</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">28885.4</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">175104.0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">157974.6</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">122840.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">116934.9</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16128.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15060.4</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">5328</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">37.311</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">1.042</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">38.353</span></span></code></pre></div><p>我们来解析下终端输入的命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">jstat </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">gc </span><span style="color:#79B8FF;">26607</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">jstat </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">gc </span><span style="color:#005CC5;">26607</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span></code></pre></div><ul><li><p>26607 代表查看的 PID 的 Java 进程号；</p></li><li><p>1000 代表每隔 1000ms 也就是 1s 显示一次；</p></li><li><p>3 代表一共显示三次。</p></li></ul><p>接着我们再来看输出选项代表的含义有哪些？这个输出的信息含量比较大，不过信息是有对应关系的，比如 S0C 和 S0U：</p><ul><li><p>一般 C 结尾的代表总的容量大小或者计数的次数；</p></li><li><p>U 结尾代表已使用的容量大小。</p></li></ul><p>这是通用的，你可以看到输出项中有很多以 C 或者 U 结尾。S0 则代表第一个 Survivor 区，也就是我上文说的 From 区。通过以上的讲解，我相信很多名词你不用死记硬背也能理解了，比如 S1C 和 S1U 则表示第二个 Survivor 区也就是 To 区的总容量和使用容量。</p><p>接下来我罗列下其他的输出选项含义。</p><ul><li><p>EC / EU：Eden 区的总容量/已使用空间的大小。</p></li><li><p>OC / OU：老年代总容量/老年代已使用空间大小。</p></li><li><p>MC / MU：方法区总容量/方法区已使用容量大小。</p></li><li><p>CCSC / CCSU：压缩类总容量/压缩类空间使用大小。</p></li><li><p>YGC / YGCT：年轻代垃圾回收的次数/年轻代垃圾回收消耗时间。</p></li><li><p>FGC / FGCT： 老年代垃圾回收次数/老年代垃圾回收消耗时间。</p></li><li><p>GCT：垃圾回收消耗总时间。</p></li></ul><p>这样对比着看会更直观一点，对于上述输出选项的含义我们都需要有一定的印象，从而通过垃圾回收频率和消耗时间初步判断 GC 是否存在可疑问题。</p><p>有同学问过这样的问题，<strong>堆内存区域划分了这么多代</strong>，感觉很复杂，为什么要这么做呢？</p><p>我想不分代，内存垃圾肯定也是可以回收的。而让内存区域分代，主要就是优化垃圾回收的性能，也就是 GC 的性能。有点类似于我们日常生活中的垃圾分类，你把干湿垃圾分离，一方面有利于下一步的再利用，再者对于我们后续垃圾的处理效率也会有较大的提升。对于内存回收其实也是这样的，如果不分代那么所有的对象可能都在同一个大的区间里，GC 依次判断则效率必然是很低，如果是分代处理，对不同的区域分以不同的回收策略，这样效率会高很多。</p><h4 id="_2-如何定位占用内存的对象" tabindex="-1">2.如何定位占用内存的对象？ <a class="header-anchor" href="#_2-如何定位占用内存的对象" aria-label="Permalink to &quot;2.如何定位占用内存的对象？&quot;">​</a></h4><p>这里我将推荐一个工具 jmap，通过 jmap 可以指定 Java 进程的 PID，查看该进程的对象、数量等等，接下来我做一个演示。</p><p>首先我们来查看进程号为 18658 的应用包，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# ps </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ef</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">grep demo</span></span>
<span class="line"><span style="color:#E1E4E8;">root     </span><span style="color:#79B8FF;">18658</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> Dec09 </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">后续省略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# ps </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ef</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">grep demo</span></span>
<span class="line"><span style="color:#24292E;">root     </span><span style="color:#005CC5;">18658</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> Dec09 </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">后续省略</span></span></code></pre></div><p>其中上述输出的第二列 18658 为进程号，然后将进程号通过命令组合可以查看以下信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# jmap </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">histo </span><span style="color:#79B8FF;">18658</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">head </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#79B8FF;">20</span></span>
<span class="line"><span style="color:#E1E4E8;"> num     #instances         #bytes  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span></span>
<span class="line"><span style="color:#E1E4E8;">----------------------------------------------</span></span>
<span class="line"><span style="color:#E1E4E8;">   1:        157619       18840672  [C</span></span>
<span class="line"><span style="color:#E1E4E8;">   2:          8326        8324360  [B</span></span>
<span class="line"><span style="color:#E1E4E8;">   3:        146319        3511656  java.lang.String</span></span>
<span class="line"><span style="color:#E1E4E8;">   4:          9224        2825584  [I</span></span>
<span class="line"><span style="color:#E1E4E8;">   5:         65733        2103456  com.example.demo.entity.User</span></span>
<span class="line"><span style="color:#E1E4E8;">   6:         62508        2000256  java.util.HashMap$Node</span></span>
<span class="line"><span style="color:#E1E4E8;">   7:         21868        1618832  [Ljava.lang.Object;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# jmap </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">histo </span><span style="color:#005CC5;">18658</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">head </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;"> num     #instances         #bytes  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span></span>
<span class="line"><span style="color:#24292E;">----------------------------------------------</span></span>
<span class="line"><span style="color:#24292E;">   1:        157619       18840672  [C</span></span>
<span class="line"><span style="color:#24292E;">   2:          8326        8324360  [B</span></span>
<span class="line"><span style="color:#24292E;">   3:        146319        3511656  java.lang.String</span></span>
<span class="line"><span style="color:#24292E;">   4:          9224        2825584  [I</span></span>
<span class="line"><span style="color:#24292E;">   5:         65733        2103456  com.example.demo.entity.User</span></span>
<span class="line"><span style="color:#24292E;">   6:         62508        2000256  java.util.HashMap$Node</span></span>
<span class="line"><span style="color:#24292E;">   7:         21868        1618832  [Ljava.lang.Object;</span></span></code></pre></div><ul><li><p>num 是编号；</p></li><li><p>instances 是生成的实例个数；</p></li><li><p>bytes 是实例占用的大小；</p></li><li><p>classs name 对象的类名。</p></li></ul><p>其中 [C、[S、[I、[B 对应的类型如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[C is a </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">[S is a </span><span style="color:#F97583;">short</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">[I is a </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">[B is a </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[C is a </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[]</span></span>
<span class="line"><span style="color:#24292E;">[S is a </span><span style="color:#D73A49;">short</span><span style="color:#24292E;">[]</span></span>
<span class="line"><span style="color:#24292E;">[I is a </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[]</span></span>
<span class="line"><span style="color:#24292E;">[B is a </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[]</span></span></code></pre></div><p>你注意下第五行，这是能够最直接看到的业务类，如果是业务对象尤其需要关注，看是否一直上升。</p><h3 id="可视化的-jvm-监控工具" tabindex="-1">可视化的 JVM 监控工具 <a class="header-anchor" href="#可视化的-jvm-监控工具" aria-label="Permalink to &quot;可视化的 JVM 监控工具&quot;">​</a></h3><p>在第三模块中，你可以知道，对于监控定位我一般会采用命令行结合可视化的方案一并讲解，接下来我介绍一个 JDK 自带的 JVM 监控工具：jvisual。</p><p>jvisual 能做的事情很多，监控内存泄漏、跟踪垃圾回收、执行时内存分析、CPU 线程分析等，而且通过图形化的界面指引就可以完成，接下来我主要讲述 jvisual 如何使用以及如何看内存对象的占用。</p><p>先来看下 jvisual 是如何使用的，一般我们会在启动被测的 jar 服务里进行如下配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">nohup java </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Djava.rmi.server.hostname</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">实际ip </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1099</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote.authenticate</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote.ssl</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jar demo</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SNAPSHOT.jar </span><span style="color:#F97583;">&amp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">nohup java </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Djava.rmi.server.hostname</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">实际ip </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote.port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1099</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote.authenticate</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote.ssl</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jar demo</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SNAPSHOT.jar </span><span style="color:#D73A49;">&amp;</span></span></code></pre></div><p>通过这样的方式可以启动暴露 1099 端口，且连接时不需要认证。</p><p>然后在本机电脑 jdk 路径 bin 目录下找到 jvisualvm，双击打开，如下图所示：</p>`,35),B=s("p",null,"我们再配置相应的 jmx 连接，如下图所示：",-1),j=s("p",null,"如果出现如下图所示的界面，就证明连接成功了。",-1),D=s("p",null,"这样我们就能够概览 JVM 的 CPU 和内存的使用情况，如下图所示，通过点击抽样器，你可以分别获得对象在 CPU 和内存的占用。值得注意的是很多初学者把这部分 CPU 监控或者内存监控认为是服务器硬件级别的，这是不对的，这些都是基于 JVM 的监控。",-1),b=s("p",null,"按照内存占用进行排序是非常清晰的，你可以看到随着性能测试的进行，User 类字节占用比例越来越高，如下图所示：",-1),J=s("h3",{id:"总结",tabindex:"-1"},[l("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),M=s("p",null,"通过本讲的学习，你了解了 JVM 的内存结构，知道了 Java 内存对象经常活动的区域，同时列举了常见的排查手段诊断内存问题。",-1),S=s("p",null,"在本讲中有一个名词叫作 GC 频繁，那在你的实际工作当中，年轻代或者老年代一般多久回收一次算频繁呢？或者什么样的场景让你认为 GC 可能是有问题的呢？欢迎在评论区分享你的观点。",-1),k=s("p",null,"下一讲我将带你一起探讨一款阿里巴巴的监控工具------Arthas，到时见。",-1);function G(T,V,P,U,f,x){const a=e("Image");return t(),c("div",null,[E,y,n(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/09/FA/Cgp9HWA2u5SAFtvHAABjYpky-g8347.png"}),l(),i,C,F,d,n(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/09/FA/Cgp9HWA2u6iAHNxJAACTuTJQcko749.png"}),l(),h,n(a,{alt:"4.png",src:"https://s0.lgstatic.com/i/image6/M00/09/F7/CioPOWA2vFqAaIvdAAChz7EIEu0014.png"}),l(),m,g,_,u,v,n(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/09/F7/CioPOWA2vG2AJj5oAACm26T__YI787.png"}),A,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/07/73/Cgp9HWAze7uAY4i0AAIY8AO0bo0055.png"}),B,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/07/70/CioPOWAze8GAEEsIAALCNqd4FCQ080.png"}),j,n(a,{alt:"image (2).jpeg",src:"https://s0.lgstatic.com/i/image6/M00/09/FA/Cgp9HWA2vMaASqv3AAJ2rG-zf3U45.jpeg"}),D,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M00/07/70/CioPOWAze9CAShx_AAG7jwD3hwI714.png"}),b,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M00/07/70/CioPOWAze9aAZifIAANlYUMJTPQ367.png"}),J,M,S,k])}const O=o(r,[["render",G]]);export{I as __pageData,O as default};
