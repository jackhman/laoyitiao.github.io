import{_ as o,j as e,o as t,g as r,k as n,h as l,Q as p,s}from"./chunks/framework.4e7d56ce.js";const N=JSON.parse('{"title":"系统改造：如何实现分表？ ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3566) 07  数据分片：如何实现分库、分表、分库+分表以及强制路由？（下）.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3566) 07  数据分片：如何实现分库、分表、分库+分表以及强制路由？（下）.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3566) 07  数据分片：如何实现分库、分表、分库+分表以及强制路由？（下）.md"},E=p(`<p>在上一课时中，我们基于业务场景介绍了如何将单库单表架构改造成分库架构。今天我们继续后续的改造工作，主要涉及如何实现分表、分库+分表以及如何实现强制路由。</p><h3 id="系统改造-如何实现分表" tabindex="-1">系统改造：如何实现分表？ <a class="header-anchor" href="#系统改造-如何实现分表" aria-label="Permalink to &quot;系统改造：如何实现分表？&quot;">​</a></h3><p>相比分库，分表操作是在同一个数据库中，完成对一张表的拆分工作。所以从数据源上讲，我们只需要定义一个 DataSource 对象即可，这里把这个新的 DataSource 命名为 ds2：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds2</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds2.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds2.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds2.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/ds2</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds2.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds2.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds2</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds2.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds2.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds2.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/ds2</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds2.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds2.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span></code></pre></div><p>同样，为了提高访问性能，我们设置了绑定表和广播表：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.binding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tables</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_record, health_task</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.broadcast</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tables</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_level</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.binding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tables</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_record, health_task</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.broadcast</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tables</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_level</span></span></code></pre></div><p>现在，让我们再次回想起 TableRuleConfiguration 配置，该配置中的 tableShardingStrategyConfig 代表分表策略。与用于分库策略的 databaseShardingStrategyConfig 一样，设置分表策略的方式也是指定一个用于分表的分片键以及分片表达式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_record$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{record_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_record$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{record_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span></code></pre></div><p>在代码中可以看到，对于 health_record 表而言，我们设置它用于分表的分片键为 record_id，以及它的分片行表达式为 health_record$-&gt;{record_id % 2}。也就是说，我们会根据 record_id 将 health_record 单表拆分成 health_record0 和 health_record1 这两张分表。</p><p>基于分表策略，再加上 actualDataNodes 和 keyGeneratorConfig 配置项，我们就可以完成对 health_record 表的完整分表配置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds2.health_record$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_record$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{record_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.props.worker.id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">33</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds2.health_record$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_record$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{record_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.props.worker.id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">33</span></span></code></pre></div><p>对于 health_task 表而言，可以采用同样的配置方法完成分表操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds2.health_task$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_task$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{record_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.props.worker.id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">33</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds2.health_task$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_task$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{record_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.props.worker.id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">33</span></span></code></pre></div><p>可以看到，由于 health_task 与 health_record 互为绑定表，所以在 health_task 的配置中，我们同样基于 record_id 列进行分片，也就是说，我们会根据 record_id 将 health_task 单表拆分成 health_task0 和 health_task1 两张分表。当然，自增键的生成列还是需要设置成 health_task 表中的 task_id 字段。</p><p>这样，完整的分表配置就完成了。现在，让我们重新执行 HealthRecordTest 单元测试，会发现数据已经进行了正确的分表。下图是分表之后的 health_record0 和 health_record1 表：</p>`,15),y=s("p",null,"分表后的 health_record0 表数据",-1),i=s("p",null,"分表后的 health_record1 表数据",-1),d=s("p",null,"而这是分表之后的 health_task0 和 health_task1 表：",-1),h=s("p",null,"分表后的 health_task0 表数据",-1),g=p(`<p>分表后的 health_task1表数据</p><h3 id="系统改造-如何实现分库-分表" tabindex="-1">系统改造：如何实现分库+分表？ <a class="header-anchor" href="#系统改造-如何实现分库-分表" aria-label="Permalink to &quot;系统改造：如何实现分库+分表？&quot;">​</a></h3><p>在完成独立的分库和分表操作之后，系统改造的第三步是尝试把分库和分表结合起来。这个过程听起来比较复杂，但事实上，基于 ShardingSphere 提供的强大配置体系，开发人员要做的只是将分表针对分库和分表的配置项整合在一起就可以了。这里我们重新创建 3 个新的数据源，分别为 ds3、ds4 和 ds5:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds3,ds4,ds5</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds3.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds3.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds3.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/ds3</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds3.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds3.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds4.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds4.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds4.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/ds4</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds4.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds4.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds5.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds5.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds5.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/ds5</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds5.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds5.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds3,ds4,ds5</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds3.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds3.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds3.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/ds3</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds3.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds3.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds4.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds4.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds4.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/ds4</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds4.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds4.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds5.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds5.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds5.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/ds5</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds5.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds5.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span></code></pre></div><p><strong>注意，到现在有 3 个数据源，而且命名分别是 ds3、ds4 和 ds5</strong>。所以，为了根据 user_id 来将数据分别分片到对应的数据源，我们需要调整行表达式，这时候的行表达式应该是 ds$-&gt;{user_id % 3 + 3}：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{user_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.binding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tables</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_record,health_task</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.broadcast</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">tables</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_level</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{user_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.binding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tables</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_record,health_task</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.broadcast</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">tables</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_level</span></span></code></pre></div><p>对于 health_record 和 health_task 表而言，同样需要调整对应的行表达式，我们将 actual-data-nodes 设置为 ds$-&gt;{3..5}.health_record$-&gt;{0..2}，也就是说每张原始表将被拆分成 3 张分表：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{3..</span><span style="color:#FDAEB7;font-style:italic;">5</span><span style="color:#E1E4E8;">}.health_record$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_record$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{record_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.props.worker.id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">33</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{3..</span><span style="color:#FDAEB7;font-style:italic;">5</span><span style="color:#E1E4E8;">}.health_task$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{0..</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">record_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">health_task$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{record_id </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">task_id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.props.worker.id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">33</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{3..</span><span style="color:#B31D28;font-style:italic;">5</span><span style="color:#24292E;">}.health_record$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_record$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{record_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_record.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.props.worker.id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">33</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{3..</span><span style="color:#B31D28;font-style:italic;">5</span><span style="color:#24292E;">}.health_task$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{0..</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">record_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">health_task$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{record_id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">task_id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.health_task.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.props.worker.id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">33</span></span></code></pre></div><p>这样，整合分库+分表的配置方案就介绍完毕了，可以看到，这里并没有引入任何新的配置项让我们重新执行单元测试，从而确认数据是否已经正确地进行了分库分表。这是 ds3 中的 health_record0、health_record1 和 health_record2 表：</p>`,9),F=s("p",null,"ds3 中的 health_record0 表数据",-1),u=s("p",null,"ds3 中的 health_record1 表数据",-1),A=s("p",null,"ds3 中的 health_record2 表数据",-1),D=s("p",null,"这是 ds4 中的 health_record0、health_record1 和 health_record2 表：",-1),b=s("p",null,"ds4 中的 health_record0 表数据",-1),_=s("p",null,"ds4 中的 health_record1 表数据",-1),m=s("p",null,"ds4 中的 health_record2 表数据",-1),C=s("p",null,"而下面是 ds5 中的 health_record0、health_record1 和 health_record2 表：",-1),v=s("p",null,"ds5 中的 health_record0 表数据",-1),S=s("p",null,"ds5 中的 health_record1 表数据",-1),k=p(`<p>ds5 中的 health_record2 表数据</p><p>对于 health_task 表而言，我们得到的也是类似的分库分表效果。</p><h3 id="系统改造-如何实现强制路由" tabindex="-1">系统改造：如何实现强制路由？ <a class="header-anchor" href="#系统改造-如何实现强制路由" aria-label="Permalink to &quot;系统改造：如何实现强制路由？&quot;">​</a></h3><p>从 SQL 执行效果而言，分库分表可以看作是一种路由机制，也就是说把 SQL 语句路由到目标数据库或数据表中并获取数据。<strong>在实现了分库分表的基础之上，我们将要引入一种不同的路由方法，即强制路由。</strong></p><h4 id="什么是强制路由" tabindex="-1">什么是强制路由？ <a class="header-anchor" href="#什么是强制路由" aria-label="Permalink to &quot;什么是强制路由？&quot;">​</a></h4><p>强制路由与一般的分库分表路由不同，它并没有使用任何的分片键和分片策略。我们知道通过解析 SQL 语句提取分片键，并设置分片策略进行分片是 ShardingSphere 对重写 JDBC 规范的实现方式。但是，如果我们没有分片键，是否就只能访问所有的数据库和数据表进行全路由呢？显然，这种处理方式也不大合适。<strong>有时候，我们需要为 SQL 执行开一个&quot;后门&quot;，允许在没有分片键的情况下，同样可以在外部设置目标数据库和表，这就是强制路由的设计理念。</strong></p><p>在 ShardingSphere 中，通过 Hint 机制实现强制路由。我们在这里对 Hint 这一概念再做进一步的阐述。在关系型数据库中，Hint 作为一种 SQL 补充语法扮演着非常重要的角色。它允许用户通过相关的语法影响 SQL 的执行方式，改变 SQL 的执行计划，从而对 SQL 进行特殊的优化。很多数据库工具也提供了特殊的 Hint 语法。以 MySQL 为例，比较典型的 Hint 使用方式之一就是对所有索引的强制执行和忽略机制。</p><br><p>MySQL 中的强制索引能够确保所需要执行的 SQL 语句只作用于所指定的索引上，我们可以通过 FORCE INDEX 这一 Hint 语法实现这一目标：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> FROM TABLE1 FORCE </span><span style="color:#B392F0;">INDEX</span><span style="color:#E1E4E8;"> (FIELD1)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> FROM TABLE1 FORCE </span><span style="color:#6F42C1;">INDEX</span><span style="color:#24292E;"> (FIELD1)</span></span></code></pre></div><p>类似的，IGNORE INDEX 这一 Hint 语法使得原本设置在具体字段上的索引不被使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> FROM TABLE1 IGNORE </span><span style="color:#B392F0;">INDEX</span><span style="color:#E1E4E8;"> (FIELD1, FIELD2)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> FROM TABLE1 IGNORE </span><span style="color:#6F42C1;">INDEX</span><span style="color:#24292E;"> (FIELD1, FIELD2)</span></span></code></pre></div><p>对于分片字段非 SQL 决定、而由其他外置条件决定的场景，可使用 SQL Hint 灵活地注入分片字段。</p><h4 id="如何设计和开发强制路由" tabindex="-1">如何设计和开发强制路由？ <a class="header-anchor" href="#如何设计和开发强制路由" aria-label="Permalink to &quot;如何设计和开发强制路由？&quot;">​</a></h4><p>基于 Hint 进行强制路由的设计和开发过程需要遵循一定的约定，同时，ShardingSphere 也提供了专门的 HintManager 来简化强制路由的开发过程。</p><ul><li>HintManager</li></ul><p>HintManager 类的使用方式比较固化，我们可以通过查看源码中的类定义以及核心变量来理解它所包含的操作内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintManager</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AutoCloseable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//基于ThreadLocal存储HintManager实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ThreadLocal&lt;</span><span style="color:#F97583;">HintManager</span><span style="color:#E1E4E8;">&gt; HINT_MANAGER_HOLDER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ThreadLocal&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//数据库分片值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Multimap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; databaseShardingValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HashMultimap.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//数据表分片值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Multimap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; tableShardingValues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HashMultimap.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否只有数据库分片</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> databaseShardingOnly;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否只路由主库</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> masterRouteOnly;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintManager</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AutoCloseable</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//基于ThreadLocal存储HintManager实例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ThreadLocal&lt;</span><span style="color:#D73A49;">HintManager</span><span style="color:#24292E;">&gt; HINT_MANAGER_HOLDER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ThreadLocal&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//数据库分片值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Multimap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; databaseShardingValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HashMultimap.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//数据表分片值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Multimap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; tableShardingValues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HashMultimap.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否只有数据库分片</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> databaseShardingOnly;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否只路由主库</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> masterRouteOnly;</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在变量定义上，我们注意到 HintManager 使用了 ThreadLocal 来保存 HintManager 实例。显然，基于这种处理方式，所有分片信息的作用范围就是当前线程。我们也看到了用于分别存储数据库分片值和数据表分片值的两个 Multimap 对象，以及分别用于指定是否只有数据库分片，以及是否只路由主库的标志位。可以想象，HintManager 基于这些变量开放了一组 get/set 方法供开发人员根据具体业务场景进行分片键的设置。</p><p>同时，在类的定义上，我们也注意到 HintManager 实现了 AutoCloseable 接口，这个接口是在 JDK7 中引入的一个新接口，用于自动释放资源。AutoCloseable 接口只有一个 close 方法，我们可以实现这个方法来释放自定义的各种资源。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AutoCloseable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AutoCloseable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 JDK1.7 之前，我们需要手动通过 try/catch/finally 中的 finally 语句来释放资源，而使用 AutoCloseable 接口，在 try 语句结束的时候，不需要实现 finally 语句就会自动将这些资源关闭，JDK 会通过回调的方式，调用 close 方法来做到这一点。这种机制被称为 try with resource。AutoCloseable 还提供了语法糖，在 try 语句中可以同时使用多个实现这个接口的资源，并通过使用分号进行分隔。</p><p>HintManager 中通过实现 AutoCloseable 接口支持资源的自动释放，事实上，JDBC 中的 Connection 和 Statement 接口的实现类同样也实现了这个 AutoCloseable 接口。</p><p>对于 HintManager 而言，所谓的资源实际上就是 ThreadLocal 中所保存的 HintManager 实例。下面这段代码实现了 AutoCloseable 接口的 close 方法，进行资源的释放：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    HINT_MANAGER_HOLDER.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    HintManager.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    HINT_MANAGER_HOLDER.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    HintManager.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>HintManager 的创建过程使用了典型的单例设计模式，下面这段代码展现了通过一个静态的 getInstance 方法，从 ThreadLocal 中获取或设置针对当前线程的 HintManager 实例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> HintManager </span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Preconditions.</span><span style="color:#B392F0;">checkState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> HINT_MANAGER_HOLDER.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;Hint has previous value, please clear first.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    HintManager result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintManager</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    HINT_MANAGER_HOLDER.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> HintManager </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Preconditions.</span><span style="color:#6F42C1;">checkState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> HINT_MANAGER_HOLDER.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;Hint has previous value, please clear first.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    HintManager result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintManager</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    HINT_MANAGER_HOLDER.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在理解了 HintManager 的基本结构之后，在应用程序中获取 HintManager 的过程就显得非常简单了，这里给出推荐的使用方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (HintManager hintManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HintManager.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Connection connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    Statement statement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">createStatement</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (HintManager hintManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HintManager.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Statement statement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">createStatement</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，我们在 try 语句中获取了 HintManager、Connection 和 Statement 实例，然后就可以基于这些实例来完成具体的 SQL 执行。</p><ul><li>实现并配置强制路由分片算法</li></ul><p><strong>开发基于 Hint 的强制路由的基础还是配置</strong>。在介绍与 Hint 相关的配置项之前，让我们回想在 05 课时：&quot;ShardingSphere 中的配置体系是如何设计的？&quot;中介绍的 TableRuleConfiguration。我们知道 TableRuleConfiguration 中包含两个 ShardingStrategyConfiguration，分别用于设置分库策略和分表策略。而 ShardingSphere 专门提供了 HintShardingStrategyConfiguration 用于完成 Hint 的分片策略配置，如下面这段代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingStrategyConfiguration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingStrategyConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HintShardingAlgorithm shardingAlgorithm;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingStrategyConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HintShardingAlgorithm </span><span style="color:#FFAB70;">shardingAlgorithm</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Preconditions.</span><span style="color:#B392F0;">checkNotNull</span><span style="color:#E1E4E8;">(shardingAlgorithm, </span><span style="color:#9ECBFF;">&quot;ShardingAlgorithm is required.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.shardingAlgorithm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingAlgorithm;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingStrategyConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingStrategyConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HintShardingAlgorithm shardingAlgorithm;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingStrategyConfiguration</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HintShardingAlgorithm </span><span style="color:#E36209;">shardingAlgorithm</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Preconditions.</span><span style="color:#6F42C1;">checkNotNull</span><span style="color:#24292E;">(shardingAlgorithm, </span><span style="color:#032F62;">&quot;ShardingAlgorithm is required.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.shardingAlgorithm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingAlgorithm;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，HintShardingStrategyConfiguration 中需要设置一个 HintShardingAlgorithm。HintShardingAlgorithm 是一个接口，我们需要提供它的实现类来根据 Hint 信息执行分片。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingAlgorithm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> Comparable&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingAlgorithm</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//根据Hint信息执行分片</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, HintShardingValue&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValue</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingAlgorithm</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> Comparable&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingAlgorithm</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//根据Hint信息执行分片</span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, HintShardingValue&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValue</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ShardingSphere 中内置了一个 HintShardingAlgorithm 的实现类 DefaultHintShardingAlgorithm，但这个实现类并没有执行任何的分片逻辑，只是将传入的所有 availableTargetNames 直接进行返回而已，如下面这段代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultHintShardingAlgorithm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingAlgorithm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HintShardingValue&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> availableTargetNames;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultHintShardingAlgorithm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingAlgorithm</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HintShardingValue&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> availableTargetNames;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以根据需要提供自己的 HintShardingAlgorithm 实现类并集成到 HintShardingStrategyConfiguration 中。例如，我们可以对比所有可用的分库分表键值，然后与传入的强制分片键进行精准匹配，从而确定目标的库表信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MatchHintShardingAlgorithm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintShardingAlgorithm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">doSharding</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">availableTargetNames</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HintShardingValue&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">shardingValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> availableTargetNames) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Long value </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> shardingValue.</span><span style="color:#B392F0;">getValues</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(value))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(each);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MatchHintShardingAlgorithm</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintShardingAlgorithm</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">doSharding</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">availableTargetNames</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HintShardingValue&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">shardingValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> availableTargetNames) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Long value </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> shardingValue.</span><span style="color:#6F42C1;">getValues</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(value))) {</span></span>
<span class="line"><span style="color:#24292E;">                    result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(each);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一旦提供了自定的 HintShardingAlgorithm 实现类，就需要将它添加到配置体系中。在这里，我们基于 Yaml 配置风格来完成这一操作：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">defaultDatabaseStrategy</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">hint</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">algorithmClassName</span><span style="color:#E1E4E8;">: com.tianyilan.shardingsphere.demo.hint.MatchHintShardingAlgorithm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">defaultDatabaseStrategy</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">hint</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">algorithmClassName</span><span style="color:#24292E;">: com.tianyilan.shardingsphere.demo.hint.MatchHintShardingAlgorithm</span></span></code></pre></div><p>ShardingSphere 在进行路由时，如果发现 TableRuleConfiguration 中设置了 Hint 的分片算法，就会从 HintManager 中获取分片值并进行路由操作。</p><h4 id="如何基于强制路由访问目标库表" tabindex="-1">如何基于强制路由访问目标库表？ <a class="header-anchor" href="#如何基于强制路由访问目标库表" aria-label="Permalink to &quot;如何基于强制路由访问目标库表？&quot;">​</a></h4><p>在理解了强制路由的概念和开发过程之后，让我们回到案例。这里以针对数据库的强制路由为例，给出具体的实现过程。为了更好地组织代码结构，我们先来构建两个 Helper 类，一个是用于获取 DataSource 的 DataSourceHelper。在这个 Helper 类中，我们通过加载 .yaml 配置文件来完成 DataSource 的构建：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceHelper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">getDataSourceForShardingDatabases</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException, SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> YamlShardingDataSourceFactory.</span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/META-INF/hint-databases.yaml&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> File </span><span style="color:#B392F0;">getFile</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">configFile</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#E1E4E8;">(Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getResource</span><span style="color:#E1E4E8;">(configFile).</span><span style="color:#B392F0;">getFile</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceHelper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">getDataSourceForShardingDatabases</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException, SQLException {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> YamlShardingDataSourceFactory.</span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/META-INF/hint-databases.yaml&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> File </span><span style="color:#6F42C1;">getFile</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">configFile</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getResource</span><span style="color:#24292E;">(configFile).</span><span style="color:#6F42C1;">getFile</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里用到了 YamlShardingDataSourceFactory 工厂类，针对 Yaml 配置的实现方案你可以回顾 05 课时中的内容。</p><p>另一个 Helper 类是包装 HintManager 的 HintManagerHelper。在这个帮助类中，我们通过使用 HintManager 开放的 setDatabaseShardingValue 来完成数据库分片值的设置。在这个示例中，我们只想从第一个库中获取目标数据。HintManager 还提供了 addDatabaseShardingValue 和 addTableShardingValue 等方法设置强制路由的分片值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintManagerHelper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initializeHintManagerForShardingDatabases</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> HintManager </span><span style="color:#FFAB70;">hintManager</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       hintManager.</span><span style="color:#B392F0;">setDatabaseShardingValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintManagerHelper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initializeHintManagerForShardingDatabases</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> HintManager </span><span style="color:#E36209;">hintManager</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">       hintManager.</span><span style="color:#6F42C1;">setDatabaseShardingValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，我们构建一个 HintService 来完成整个强制路由流程的封装：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HintService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processWithHintValueForShardingDatabases</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException, IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">       DataSource dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DataSourceHelper.</span><span style="color:#B392F0;">getDataSourceForShardingDatabases</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (HintManager hintManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HintManager.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">              Connection connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">              Statement statement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">createStatement</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           HintManagerHelper.</span><span style="color:#B392F0;">initializeHintManagerForShardingDatabases</span><span style="color:#E1E4E8;">(hintManager);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">           ResultSet result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> statement.</span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select * from health_record&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (result.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">getInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HintService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processWithHintValueForShardingDatabases</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException, IOException {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">       DataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DataSourceHelper.</span><span style="color:#6F42C1;">getDataSourceForShardingDatabases</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (HintManager hintManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HintManager.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">              Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">              Statement statement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">createStatement</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">           HintManagerHelper.</span><span style="color:#6F42C1;">initializeHintManagerForShardingDatabases</span><span style="color:#24292E;">(hintManager);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           ResultSet result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> statement.</span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;select * from health_record&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (result.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">              System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">getInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，在这个 processWithHintValueForShardingDatabases 方法中，我们首先通过 DataSourceHelper 获取目标 DataSource。然后使用 try with resource 机制在 try 语句中获取了 HintManager、Connection 和 Statement 实例，并通过 HintManagerHelper 帮助类设置强制路由的分片值。最后，通过 Statement 来执行一个全表查询，并打印查询结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">58</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">13.932</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">20024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [           main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL                       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Logic SQL</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> select user_id, user_name from user</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">58</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">13.932</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">20024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [           main] ShardingSphere</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">SQL                       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Actual SQL</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ds1 </span><span style="color:#F97583;">:::</span><span style="color:#E1E4E8;"> select user_id, user_name from user</span></span>
<span class="line"><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user_6</span></span>
<span class="line"><span style="color:#79B8FF;">7</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user_7</span></span>
<span class="line"><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user_8</span></span>
<span class="line"><span style="color:#79B8FF;">9</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user_9</span></span>
<span class="line"><span style="color:#79B8FF;">10</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user_10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">58</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">13.932</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">20024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [           main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL                       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Logic SQL</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> select user_id, user_name from user</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">58</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">13.932</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">20024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [           main] ShardingSphere</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">SQL                       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Actual SQL</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ds1 </span><span style="color:#D73A49;">:::</span><span style="color:#24292E;"> select user_id, user_name from user</span></span>
<span class="line"><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user_6</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user_7</span></span>
<span class="line"><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user_8</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user_9</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user_10</span></span></code></pre></div><p>我们获取执行过程中的日志信息，可以看到原始的逻辑 SQL 是 select user_id, user_name from user，而真正执行的真实 SQL 则是 ds1 ::: select user_id, user_name from user。显然，强制路由发生了效果，我们获取的只是 ds1 中的所有 User 信息。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>承接上一课时的内容，今天我们继续在对单库单表架构进行分库操作的基础上，讲解如何实现分表、分库+分表以及强制路由的具体细节。有了分库的实践经验，要完成分表以及分库分表是比较容易的，所做的工作只是调整和设置对应的配置项。而强制路由是一种新的路由机制，我们通过较大的篇幅来对它的概念和实现方法进行了展开，并结合业务场景给出了案例分析。</p><p>这里给你留一道思考题：ShardingSphere 如何基于 Hint 机制实现分库分表场景下的强制路由？</p><p>从路由的角度讲，基于数据库主从架构的读写分离机制也可以被认为是一种路由。在下一课时的内容中，我们将对 ShardingSphere 提供的读写分离机制进行讲解，并同样给出读写分离与分库分表、强制路由进行整合的具体方法。</p>`,57);function H(B,f,M,L,T,q){const a=e("Image");return t(),r("div",null,[E,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/2D/4A/Ciqc1F8DAu2AZENtAAAorUxRubo162.png"}),l(),y,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/2D/55/CgqCHl8DAvqAd70QAAAoo2znVos400.png"}),l(),i,d,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/2D/4A/Ciqc1F8DAwSAYM8IAAAwZnweE9o329.png"}),l(),h,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/2D/55/CgqCHl8DAxuAKVVqAAAv_CCh4xs830.png"}),l(),g,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/2D/55/CgqCHl8DAzSASmBxAAAd6KQozFQ934.png"}),l(),F,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/2D/4A/Ciqc1F8DAzyASYmJAAAcLJ8apdE028.png"}),l(),u,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/2D/4A/Ciqc1F8DA0SAYIakAAAhEMAxu08885.png"}),l(),A,D,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/2D/55/CgqCHl8DA0yAOsX6AAAdfXJXZLU117.png"}),l(),b,n(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/2D/55/CgqCHl8DA1SAL5oqAAAkdpi4XLE109.png"}),l(),_,n(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/2D/55/CgqCHl8DA1uAOGMkAAAbjxxXSj0605.png"}),l(),m,C,n(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/2D/55/CgqCHl8DA2WAKMa9AAAcEzad5hA767.png"}),l(),v,n(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/2D/55/CgqCHl8DA22ATWUKAAAb7_TpJ5A158.png"}),l(),S,n(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/2D/4A/Ciqc1F8DA3SAY3EWAAAkd3H1CBI553.png"}),l(),k])}const I=o(c,[["render",H]]);export{N as __pageData,I as default};
