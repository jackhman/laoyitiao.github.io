import{_ as o,j as e,o as t,g as c,k as p,h as s,Q as l,s as a}from"./chunks/framework.cfb14fe0.js";const W=JSON.parse('{"title":"12性能分析：性能影响的关键路径以及优化策略","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Node.js 应用开发实战_文档/(6794) 12  性能分析：性能影响的关键路径以及优化策略.md","filePath":"posts/frontEnd/Node.js 应用开发实战_文档/(6794) 12  性能分析：性能影响的关键路径以及优化策略.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/Node.js 应用开发实战_文档/(6794) 12  性能分析：性能影响的关键路径以及优化策略.md"},E=l(`<h1 id="_12性能分析-性能影响的关键路径以及优化策略" tabindex="-1">12性能分析：性能影响的关键路径以及优化策略 <a class="header-anchor" href="#_12性能分析-性能影响的关键路径以及优化策略" aria-label="Permalink to &quot;12性能分析：性能影响的关键路径以及优化策略&quot;">​</a></h1><p>模块一的<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=694#/detail/pc?id=6788&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《06 | 哪些因素会影响 Node.js 性能？》</a>，我们详细讲解了影响到 Node.js 性能的一些因素，但是在实际开发过程中，我们应该如何去定位影响性能的关键因素呢？定位到性能问题后，又该如何去优化这部分功能呢？以上就是本讲要介绍的核心知识点。</p><h3 id="工具介绍" tabindex="-1">工具介绍 <a class="header-anchor" href="#工具介绍" aria-label="Permalink to &quot;工具介绍&quot;">​</a></h3><p>在讲解性能分析实践之前，我们先来看看性能分析所应用的两个比较关键的工具：</p><ul><li><p>压测所使用到的 WRK（Windows Research Kernel）；</p></li><li><p>性能分析所使用到的 Chrome 分析工具 JavaScript Profile。</p></li></ul><h4 id="wrk-的安装及参数" tabindex="-1">WRK 的安装及参数 <a class="header-anchor" href="#wrk-的安装及参数" aria-label="Permalink to &quot;WRK 的安装及参数&quot;">​</a></h4><p>在压测工具上可选择的比较多，比如 Apache-ab 压测工具、Siege 及本讲所应用的 WRK。<strong>为了能够更好地利用多核的多线程并发测试，这里我们选择使用 WRK 来作为压测工具</strong>。我们看下该工具的安装以及一些常用参数。</p><ul><li>在<strong>Mac</strong>上使用软件包管理工具 Homebrew 来安装，使用如下命令即可：</li></ul><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">brew install wrk</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">brew install wrk</span></span></code></pre></div><ul><li>在<strong>Linux</strong>上依次执行......的命令安装就可以（如果 Linux 上没有安装 GCC、Make 或者 Git，就需要先安装这几个工具）。</li></ul><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#下载命令</span></span>
<span class="line"><span style="color:#E1E4E8;">git clone https:</span><span style="color:#F97583;">//</span><span style="color:#79B8FF;">github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wg</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wrk.git </span></span>
<span class="line"><span style="color:#6A737D;">#切换路径到wrk目录下</span></span>
<span class="line"><span style="color:#E1E4E8;">cd wrk  </span></span>
<span class="line"><span style="color:#6A737D;">#使用make命令编译环境</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">make</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#下载命令</span></span>
<span class="line"><span style="color:#24292E;">git clone https:</span><span style="color:#D73A49;">//</span><span style="color:#005CC5;">github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wg</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wrk.git </span></span>
<span class="line"><span style="color:#6A737D;">#切换路径到wrk目录下</span></span>
<span class="line"><span style="color:#24292E;">cd wrk  </span></span>
<span class="line"><span style="color:#6A737D;">#使用make命令编译环境</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">make</span></span></code></pre></div><ul><li>在<strong>Windows</strong>上就非常遗憾了，因为这个工具不支持 Windows。但如果你是 Windows 10，可以切换到 Ubuntu 子系统的方式来安装，或者在 Windows 上安装 Linux 虚拟机也是可以的。</li></ul><p>成功安装后，你可以在命令行使用......命令查看具体的参数说明和介绍：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wrk</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wrk</span></span></code></pre></div><p>这一讲因为需要进行并发请求的验证，所以我们会使用下面的压测命令：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wrk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t4 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c300 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d20s https:</span><span style="color:#F97583;">//</span><span style="color:#79B8FF;">www.baidu.com</span><span style="color:#F97583;">/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wrk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t4 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c300 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d20s https:</span><span style="color:#D73A49;">//</span><span style="color:#005CC5;">www.baidu.com</span><span style="color:#D73A49;">/</span></span></code></pre></div><p>其参数说明如下：</p><ul><li><p>-t 代表的是启动 4 个线程；</p></li><li><p>-c 代表的是并发数，300 个并发请求；</p></li><li><p>-d 代表的是持续时长，20s 就是 20 秒。</p></li></ul><p>我们运行上面的命令后，会有相应的压测结果，如下所示：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Running 20s test @ https:</span><span style="color:#F97583;">//</span><span style="color:#79B8FF;">www.baidu.com</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> threads and </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;"> connections</span></span>
<span class="line"><span style="color:#E1E4E8;">  Thread Stats   Avg      Stdev     Max   </span><span style="color:#F97583;">+/-</span><span style="color:#E1E4E8;"> Stdev</span></span>
<span class="line"><span style="color:#E1E4E8;">    Latency   </span><span style="color:#79B8FF;">789.</span><span style="color:#E1E4E8;">93ms  </span><span style="color:#79B8FF;">393.</span><span style="color:#E1E4E8;">84ms   </span><span style="color:#79B8FF;">2.</span><span style="color:#E1E4E8;">00s    </span><span style="color:#79B8FF;">76.57</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">    Req</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Sec    </span><span style="color:#79B8FF;">14.33</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">10.17</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">59.00</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">72.31</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2252</span><span style="color:#E1E4E8;"> requests </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20.</span><span style="color:#E1E4E8;">10s</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">34.49</span><span style="color:#F97583;">MB</span><span style="color:#E1E4E8;"> read</span></span>
<span class="line"><span style="color:#E1E4E8;">  Socket errors: connect </span><span style="color:#79B8FF;">60</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> read </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> write </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">,</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#79B8FF;">481</span></span>
<span class="line"><span style="color:#E1E4E8;">Requests</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sec:    </span><span style="color:#79B8FF;">112.05</span></span>
<span class="line"><span style="color:#E1E4E8;">Transfer</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sec:      </span><span style="color:#79B8FF;">1.72</span><span style="color:#F97583;">MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Running 20s test @ https:</span><span style="color:#D73A49;">//</span><span style="color:#005CC5;">www.baidu.com</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> threads and </span><span style="color:#005CC5;">300</span><span style="color:#24292E;"> connections</span></span>
<span class="line"><span style="color:#24292E;">  Thread Stats   Avg      Stdev     Max   </span><span style="color:#D73A49;">+/-</span><span style="color:#24292E;"> Stdev</span></span>
<span class="line"><span style="color:#24292E;">    Latency   </span><span style="color:#005CC5;">789.</span><span style="color:#24292E;">93ms  </span><span style="color:#005CC5;">393.</span><span style="color:#24292E;">84ms   </span><span style="color:#005CC5;">2.</span><span style="color:#24292E;">00s    </span><span style="color:#005CC5;">76.57</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">    Req</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Sec    </span><span style="color:#005CC5;">14.33</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">10.17</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">59.00</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">72.31</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">2252</span><span style="color:#24292E;"> requests </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20.</span><span style="color:#24292E;">10s</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">34.49</span><span style="color:#D73A49;">MB</span><span style="color:#24292E;"> read</span></span>
<span class="line"><span style="color:#24292E;">  Socket errors: connect </span><span style="color:#005CC5;">60</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> read </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> write </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> timeout </span><span style="color:#005CC5;">481</span></span>
<span class="line"><span style="color:#24292E;">Requests</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sec:    </span><span style="color:#005CC5;">112.05</span></span>
<span class="line"><span style="color:#24292E;">Transfer</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sec:      </span><span style="color:#005CC5;">1.72</span><span style="color:#D73A49;">MB</span></span></code></pre></div><p>上面的结果，我们核心应该关注的是 Requests/sec 为 QPS，其次也需要了解平均耗时的情况，也就是上面的 Avg 789.93ms，以及失败超时的情况，即上面 socket errors 的 timeout 481。</p><h4 id="chrome-分析工具-javascript-profiler" tabindex="-1">Chrome 分析工具 JavaScript Profiler <a class="header-anchor" href="#chrome-分析工具-javascript-profiler" aria-label="Permalink to &quot;Chrome 分析工具 JavaScript Profiler&quot;">​</a></h4><p>在压测下，如果发现请求 QPS 非常低、平均耗时非常长，或者失败率非常高的话，这时就需要将 CPU 信息进行保存，然后用 Chrome 的 JavaScript Profiler 工具来进行分析。</p><p>方法也很简单，用 Chrome 的开发者工具 More-tools → JavaScript Profiler → Load，读取 CPU Profile，查看火焰图（如图 1 所示）。</p>`,24),y=l(`<p>图 1 Chrome 打开 JavaScript Profiler 指引图</p><p>要使用这个功能，需要在 Node.js 中对 CPU 进行采集，采集的方式需要使用 v8-profiler 这个库（如果你的 Node.js 版本大于 10，则需要使用 v8-profiler-next 这个库），在上一讲中已经应用过该工具分析过内存泄漏问题。</p><h4 id="简单-demo-演示" tabindex="-1">简单 Demo 演示 <a class="header-anchor" href="#简单-demo-演示" aria-label="Permalink to &quot;简单 Demo 演示&quot;">​</a></h4><p>为了演示这个分析方式，我们写一个最简单的测试代码，如下所示：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">http</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 引入 v8-profiler 库，可以作为一个中间件来实现</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">v8Profiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./lib/v8_profiler&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 http 服务，简单返回</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello world&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 启动服务，并开始执行 v8 profiler 的采集工作</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;server start http://127.0.0.1:3000&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    v8Profiler.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">http</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 引入 v8-profiler 库，可以作为一个中间件来实现</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">v8Profiler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./lib/v8_profiler&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 http 服务，简单返回</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello world&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 启动服务，并开始执行 v8 profiler 的采集工作</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;server start http://127.0.0.1:3000&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    v8Profiler.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>在上面代码中的第二行，我们引入了一个自身写的 v8-profiler 库，接下来看看这个库的逻辑。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">v8Profiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;v8-profiler-next&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置采集数据保存的文件名</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;example&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;start&#39;</span><span style="color:#E1E4E8;"> : () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 启动采集，如果需要定时采集，可以将 title 设置为一个动态的根据时间变化的值</span></span>
<span class="line"><span style="color:#E1E4E8;">        v8Profiler.</span><span style="color:#B392F0;">startProfiling</span><span style="color:#E1E4E8;">(title, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 30 秒后采集并导出</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">profile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v8Profiler.</span><span style="color:#B392F0;">stopProfiling</span><span style="color:#E1E4E8;">(title);</span></span>
<span class="line"><span style="color:#E1E4E8;">          profile.</span><span style="color:#B392F0;">export</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 将内容写入指定文件</span></span>
<span class="line"><span style="color:#E1E4E8;">            fs.</span><span style="color:#B392F0;">writeFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`./cpu_profiler/\${</span><span style="color:#E1E4E8;">title</span><span style="color:#9ECBFF;">}.cpuprofile\`</span><span style="color:#E1E4E8;">, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">            profile.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;use strict&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">v8Profiler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;v8-profiler-next&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置采集数据保存的文件名</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">title</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;example&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;start&#39;</span><span style="color:#24292E;"> : () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 启动采集，如果需要定时采集，可以将 title 设置为一个动态的根据时间变化的值</span></span>
<span class="line"><span style="color:#24292E;">        v8Profiler.</span><span style="color:#6F42C1;">startProfiling</span><span style="color:#24292E;">(title, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 30 秒后采集并导出</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">profile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v8Profiler.</span><span style="color:#6F42C1;">stopProfiling</span><span style="color:#24292E;">(title);</span></span>
<span class="line"><span style="color:#24292E;">          profile.</span><span style="color:#6F42C1;">export</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 将内容写入指定文件</span></span>
<span class="line"><span style="color:#24292E;">            fs.</span><span style="color:#6F42C1;">writeFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`./cpu_profiler/\${</span><span style="color:#24292E;">title</span><span style="color:#032F62;">}.cpuprofile\`</span><span style="color:#24292E;">, result);</span></span>
<span class="line"><span style="color:#24292E;">            profile.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          });</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><strong>上面代码中的 start 方法，就是核心的采集代码</strong>。v8-Profiler 开始采集，使用 title 作为唯一标示，在 30 秒后，停止这个 title 的采集，并获取数据保存在文件中。</p><p>为了验证效果，你可以根据我们下面的步骤来进行分析（代码源码保存在<a href="https://github.com/love-flutter/nodejs-column?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">GitHub</a>中，自行下载后，可按照下面步骤执行）。</p><p>（1）打开项目，进入项目根目录，执行命令启动服务。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm run test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm run test</span></span></code></pre></div><p>（2）打开另外一个命令窗口，开始执行压测程序。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wrk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t2 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c300 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d20s http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wrk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c300 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d20s http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/</span></span></code></pre></div><p>（3）大概 30 秒后，项目目录下的 cpu_profiler 文件夹下会生成 example.cpuprofile 文件。</p><p>（4）打开 Chrome 工具中的 JavaScript Profiler，然后 load 刚才项目目录下的 cpu_profiler/example.cpuprofile 文件，就可以看到如图 2 所示的结果。</p>`,15),i=l('<p>图 2 cpuprofile 演示结果</p><p>从上面的结果可以看到相应的单个执行时间和总的耗时。如果性能较慢，你可以参照标准的结果来进行分析，或者对比一个性能较好、一个性能较差的执行结果。为了让你更清晰地了解这些，下面我将从实践来进行分析。</p><h3 id="实践分析" tabindex="-1">实践分析 <a class="header-anchor" href="#实践分析" aria-label="Permalink to &quot;实践分析&quot;">​</a></h3><p>在分析任何数据之前，首先必须有一个标准的数据进行比较，如果你用的是 Express、Eggjs 等框架，需要做一个完全空转的数据作为标准分析数据。在本讲，由于我们没有用任何框架，所以需要设计一个完全空转的 HTTP 服务来作为标准的分析数据。</p><h4 id="标准数据" tabindex="-1">标准数据 <a class="header-anchor" href="#标准数据" aria-label="Permalink to &quot;标准数据&quot;">​</a></h4><p>这里我们还是用上面&quot;简单 Demo 演示&quot;中的代码，然后通过 WRK 下面的压测命令来压测，看下具体的数据情况。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wrk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t2 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c300 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d20s http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wrk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c300 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d20s http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/</span></span></code></pre></div><p>压测得到的结果如表 1 所示。</p>',8),F=l(`<p>有了这份数据后，我们再来逐个分析以下问题。</p><h4 id="cpu-计算耗时" tabindex="-1">CPU 计算耗时 <a class="header-anchor" href="#cpu-计算耗时" aria-label="Permalink to &quot;CPU 计算耗时&quot;">​</a></h4><p>为了验证效果，这里我们写一个 CPU 计算耗时的逻辑，然后继续压测。这点在模块一的<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=694#/detail/pc?id=6788&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《06 | 哪些因素会影响 Node.js 性能？》</a>已经有一些例子，我们拿一个出来尝试一下，比如 MD5 计算的逻辑，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">crypto </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;crypto&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> crypto.</span><span style="color:#B392F0;">createHash</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;md5&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(content).</span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hex&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">crypto </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;crypto&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">content</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> crypto.</span><span style="color:#6F42C1;">createHash</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;md5&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(content).</span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hex&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>核心逻辑就是应用 crypto 来生成 MD5 加密数据，为了效果更好，我们在入口文件 index.js 中多调用几次，这里只修改 server 中的代码逻辑，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 设置返回的字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加密一组数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">md5List</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Node.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;lagou&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;is&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;great&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    md5List.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">( (</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(ret){</span></span>
<span class="line"><span style="color:#E1E4E8;">            ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">ret</span><span style="color:#9ECBFF;">} \${</span><span style="color:#B392F0;">getMd5</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">str</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMd5</span><span style="color:#E1E4E8;">(str)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ret);</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 设置返回的字符串</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加密一组数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">md5List</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Node.js&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;lagou&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;is&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;great&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    md5List.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">( (</span><span style="color:#E36209;">str</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ret){</span></span>
<span class="line"><span style="color:#24292E;">            ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">ret</span><span style="color:#032F62;">} \${</span><span style="color:#6F42C1;">getMd5</span><span style="color:#032F62;">(</span><span style="color:#24292E;">str</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMd5</span><span style="color:#24292E;">(str)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ret);</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>修改完成后，我们再按照简单 Demo 中的四个步骤压测数据即可：</p><ul><li><p>启动服务</p></li><li><p>开始压测</p></li><li><p>等待 CPU 采集</p></li><li><p>分析压测数据</p></li></ul><p>接下来我们看下压测后的数据，如表 2 所示。</p>`,9),d=a("p",null,"这一对比可以非常清晰地看到，相对于标准服务，CPU 耗时服务在各方面（平均耗时、最低耗时、最大耗时以及失败率）都差很多，在性能上两者是有比较大的落差的，如果我们不知道是因为 MD5 影响到 CPU 计算导致的，那么就需要分析 CPU 耗时的情况了。",-1),h=a("p",null,"接下来我们打开 Chrome JavaScript Profiler 工具，可以看到如图 3 所示的结果。",-1),A=l(`<p>图 3 CPU 压测 CPU 耗时分析</p><p>几个耗时较长的函数，例如 digest、Hash 以及 update 等，都是在 MD5 计算中的逻辑，因此可以非常清晰地了解到，在 MD5 计算方面会对 Node.js 的服务有一个比较大的性能影响，因此在开发时尽量减少或者避免这种类似的计算服务。</p><h4 id="网络-i-o" tabindex="-1">网络 I/O <a class="header-anchor" href="#网络-i-o" aria-label="Permalink to &quot;网络 I/O&quot;">​</a></h4><p>为了演示效果，我们<strong>先创建一个新的服务</strong>，这个服务在原来的&quot;简单 Demo 演示&quot;基础上增加了一个延迟返回的效果，具体代码在 api_server 文件项目中，核心代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">http</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 http 服务，简单返回</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 延迟 1 秒返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;this is api result&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 启动服务，并开始执行 v8 profiler 的采集工作</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4000</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;server start http://127.0.0.1:4000&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">http</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 http 服务，简单返回</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 延迟 1 秒返回</span></span>
<span class="line"><span style="color:#24292E;">        res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;this is api result&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 启动服务，并开始执行 v8 profiler 的采集工作</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4000</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;server start http://127.0.0.1:4000&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>核心代码是在 setTimeout 延迟返回，其次修改了以下监听端口，从 3000 修改为 4000。</p><p><strong>接下来我们创建一个 network_io</strong>，实现调用 <a href="http://127.0.0.1:4000" target="_blank" rel="noreferrer">http://127.0.0.1:4000</a> 这个服务，从而实现网络 I/O 操作。首先还是实现一个 call_api 的服务，该服务会应用到 request 这个 npm 库（后续这个库不会维护了，暂时还没有替代方案，除非自己手动实现），代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 引入 request 库，需要在 package.json 中申明，并且 npm install</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;request&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * request 调用外部 api</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">apiLink</span><span style="color:#6A737D;"> string</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">callback</span><span style="color:#6A737D;"> funtion</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">apiLink</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(apiLink, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">body</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(body);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 引入 request 库，需要在 package.json 中申明，并且 npm install</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">request</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;request&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * request 调用外部 api</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">apiLink</span><span style="color:#6A737D;"> string</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">callback</span><span style="color:#6A737D;"> funtion</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">apiLink</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(apiLink, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, </span><span style="color:#E36209;">body</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(error) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(body);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这部分代码主要是应用 request 模块调用 apiLink 服务，并获取执行结果。通过回调的方式返回具体的数据，也就是上面的参数 callback。</p><p>最后我们再来看下 index.js 中的核心部分 server 的修改，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 http 服务，简单返回</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callApi</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://127.0.0.1:4000&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">ret</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 调用 4000 服务，并显示返回结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(ret) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ret);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;call api server error&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 http 服务，简单返回</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callApi</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://127.0.0.1:4000&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">ret</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 调用 4000 服务，并显示返回结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ret) {</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ret);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;call api server error&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>接下来就启动两个服务，分别打开地址：</p><ul><li><p><a href="http://127.0.0.1:4000?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://127.0.0.1:4000</a></p></li><li><p><a href="http://127.0.0.1:3000?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">http://127.0.0.1:3000</a></p></li></ul><p>看下是否正常响应，正常返回数据后，我们再启动对 3000 服务的压测，运行如下命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wrk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t2 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c300 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d20s http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wrk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c300 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d20s http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/</span></span></code></pre></div><p>接下来我们看下压测后的数据，如表 3 所示：</p>`,16),C=a("p",null,"拿到压测数据后，同样按照 CPU 分析方法，可以看到如图 4 所示的性能分析结果。",-1),g=l(`<p>图 4 网络 I/O 性能分析数据</p><p>其中有一个 connect，该模块在 net.js 中，这里就可以得到是网络 I/O 引起的问题。</p><p>最后我们再来看下 磁盘 I/O 的问题。</p><h4 id="磁盘-i-o" tabindex="-1">磁盘 I/O <a class="header-anchor" href="#磁盘-i-o" aria-label="Permalink to &quot;磁盘 I/O&quot;">​</a></h4><p>这里主要使用 Node.js 的 fs 模块来读取本地的文件，并显示返回文件的内容，核心代码是 server 回调部分，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./test_file.conf&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(ret);</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./test_file.conf&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ret);</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>接下来，我们同样用如下命令来启动压测服务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">wrk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t2 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c300 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d20s http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">wrk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c300 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d20s http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/</span></span></code></pre></div><p>压测后将得到如表格 4 所示的结果。</p>`,9),u=a("p",null,"从结果看也是存在一定损耗的，具体在哪方面影响到性能，同样用 Chrome 工具载入该服务采集的 CPU 信息，如图 5 所示。",-1),D=l(`<p>图 5 磁盘 I/O CPU 采集信息</p><p>从图 5 中可以非常清晰地看到前面几个耗时较长的都是关于文件读写相关的模块，如上面红色圈里面的信息。</p><h3 id="优化以及效果" tabindex="-1">优化以及效果 <a class="header-anchor" href="#优化以及效果" aria-label="Permalink to &quot;优化以及效果&quot;">​</a></h3><p>上面已经介绍到了那么多性能影响的部分，那么接下来看看如何进行一些优化，来提升性能。</p><h4 id="cpu-计算耗时-1" tabindex="-1">CPU 计算耗时 <a class="header-anchor" href="#cpu-计算耗时-1" aria-label="Permalink to &quot;CPU 计算耗时&quot;">​</a></h4><p>这部分只能说减少操作，或者减少运算。像我们上面的例子，如果都是一样的 MD5 计算，那么增加一个短时间的缓存就可以了。当然这里我们可以直接用内存来缓存（实际开发过程中，不能使用内存的方式，因为会造成内存使用越来越大，一般使用共享内存，并短时间保存即可），代码如下（代码保存在 cpu_opt 中）：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">crypto </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;crypto&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 保存缓存信息</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">md5Cache</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(md5Cache[content]) { </span><span style="color:#6A737D;">// 判断是否存在缓存信息，存在则直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> md5Cache[content]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** 不存在则计算并返回 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    md5Cache[content] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> crypto.</span><span style="color:#B392F0;">createHash</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;md5&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(content).</span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hex&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> md5Cache[content];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">crypto </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;crypto&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 保存缓存信息</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">md5Cache</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">content</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(md5Cache[content]) { </span><span style="color:#6A737D;">// 判断是否存在缓存信息，存在则直接返回</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> md5Cache[content]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/** 不存在则计算并返回 */</span></span>
<span class="line"><span style="color:#24292E;">    md5Cache[content] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> crypto.</span><span style="color:#6F42C1;">createHash</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;md5&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(content).</span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hex&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> md5Cache[content];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>核心就是在原来的基础上，增加计算的缓存，避免多次相同的计算</strong>，接下来我们压测后看看实际的效果数据，并与之前的进行对比，得到的结果如表 5 所示。</p>`,8),v=l(`<p>对比数据后，可以看到已经非常好了，已经和标准数据相差无几，QPS 和 标准服务也基本一致（这里比标准服务高，是因为本机测试，会有一定的起伏，是正常情况）。也就代表本次优化是达到了效果的。</p><h4 id="网络-i-o-1" tabindex="-1">网络 I/O <a class="header-anchor" href="#网络-i-o-1" aria-label="Permalink to &quot;网络 I/O&quot;">​</a></h4><p>网络 I/O 同样的办法也是增加缓存，避免重复的请求导致的问题。这里我们同样<strong>用缓存的方式来保存请求结果</strong>，优化的代码如下（代码保存在 network_io_opt 中）：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 引入 request 库，需要在 package.json 中申明，并且 npm install</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;request&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 缓存 api 请求结果数据</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">apiCacheData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * request 调用外部 api</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">apiLink</span><span style="color:#6A737D;"> string</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">callback</span><span style="color:#6A737D;"> funtion</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">apiLink</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(apiCacheData[apiLink]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(apiCacheData[apiLink]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(apiLink, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">body</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            apiCacheData[apiLink] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(body);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 引入 request 库，需要在 package.json 中申明，并且 npm install</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">request</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;request&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 缓存 api 请求结果数据</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">apiCacheData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * request 调用外部 api</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">apiLink</span><span style="color:#6A737D;"> string</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">callback</span><span style="color:#6A737D;"> funtion</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">apiLink</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(apiCacheData[apiLink]) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(apiCacheData[apiLink]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(apiLink, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, </span><span style="color:#E36209;">body</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(error) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            apiCacheData[apiLink] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(body);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>其次为了服务性能考虑，我们可以考虑放弃部分超时请求，从而提升服务性能</strong>。避免因为部分请求返回慢，导致整体服务被 block 住，修改 request 部分增加超时处理，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">apiLink</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(apiCacheData[apiLink]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(apiCacheData[apiLink]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(apiLink, {timeout: </span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">}, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">body</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            apiCacheData[apiLink] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(body);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">apiLink</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(apiCacheData[apiLink]) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(apiCacheData[apiLink]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(apiLink, {timeout: </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">}, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, </span><span style="color:#E36209;">body</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(error) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            apiCacheData[apiLink] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(body);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>实际情况需要根据具体的接口性能来设置这个超时时间，避免超时时间过度影响服务，也避免时间过长无法达到效果。</p><p>优化完成后，同样我们再跑一遍测试数据：</p><ul><li><p>首先还是先去 api_server 中启动 api 服务；</p></li><li><p>接下来再启动本文件夹 network_io_opt 的服务；</p></li><li><p>启动完成后，再进行压测。</p></li></ul><p>可以得到表 6 的压测对比数据。</p>`,10),B=l(`<p>从结果中可以看出优化效果非常明显，一个简单的优化就可以将原来 272.96 的 QPS 提升到 31503.58。</p><p>最后我们再来看看磁盘 I/O 的优化。</p><h4 id="磁盘-i-o-1" tabindex="-1">磁盘 I/O <a class="header-anchor" href="#磁盘-i-o-1" aria-label="Permalink to &quot;磁盘 I/O&quot;">​</a></h4><p><strong>磁盘 I/O 的优化分为读优化和写优化</strong>，优化的策略有：</p><ul><li><p>为了提升性能需要将同步修改异步，避免影响主线程的性能；</p></li><li><p>读优化，必须增加必要的缓存，减少相同文件的重复读取；</p></li><li><p>写优化，可以使用异步写文件的方式，先将写内容缓存到队列（如我们第一部分的第 08 讲的方案）；</p></li><li><p>合并多次写操作，避免频繁打开文件，读写文件内容。</p></li></ul><p>当然对于本讲，我们着重优化 2 点：</p><ul><li><p>修改为异步</p></li><li><p>增加缓存</p></li></ul><p>优化代码如下（代码在 disk_io_opt 中）：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">readFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./test_file.conf&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error read file&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./test_file.conf&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error read file&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>接下来继续压测看下效果，如表 7 所示：</p>`,10),_=l(`<p>从上面看得出异步 I/O 对服务性能提升还是比较突出，也是比较关键的。如果文件大会更突出，因此在平时代码中要非常注重这点，减少同步读写的操作。</p><p>那么如果我们继续优化，增加缓存呢？我们来看下效果，修改下面代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 文件缓存</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fileCache;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 http 服务，简单返回</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">server</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fileCache) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(fileCache);</span></span>
<span class="line"><span style="color:#E1E4E8;">        res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">readFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./test_file.conf&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error read file&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            fileCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">            res.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 文件缓存</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fileCache;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span></span>
<span class="line"><span style="color:#6A737D;"> * 创建 http 服务，简单返回</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">server</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">((</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fileCache) {</span></span>
<span class="line"><span style="color:#24292E;">        res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(fileCache);</span></span>
<span class="line"><span style="color:#24292E;">        res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./test_file.conf&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error read file&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            fileCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">            res.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>并且重新压测看下数据，如表格 8 所示。</p>`,4),k=a("p",null,[s("从结果看已经和标准的数据非常接近，因此"),a("strong",null,"在 Node.js 开发过程中，要特别注意文件读取，避免相同文件的重复读取"),s("。从表格 8 中的异步和缓存数据对比来看，通过缓存的处理优化，就可以在 QPS 上从 18353.39 提升至 35058.79，有 91% 以上的性能提升。")],-1),b=a("h3",{id:"总结",tabindex:"-1"},[s("总结 "),a("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),f=a("p",null,"学完本讲，你应该要掌握两个工具的应用，对于服务端研发来说这些工具是非常重要的，我希望你能深入去实践应用这两个工具。其次了解 3 种影响性能因素的优化策略，同时在日常开发中，应尽量避免影响性能的代码逻辑。",-1),m=a("p",null,"那你在实际的工作中，是如何提升性能的呢，欢迎在评论区分享你的经验。",-1),w=a("p",null,'这一讲就讲完了，下一讲将讲解"常见网络攻击以及防护策略"，到时见~',-1),q=a("hr",null,null,-1),P=a("p",null,"[",-1),T=a("p",null,[s("]("),a("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/mka"),s(")")],-1),S=a("p",null,[a("strong",null,"《大前端高薪训练营》")],-1),j=a("p",null,[s("对标阿里 P7 技术需求 + 每月大厂内推，6 个月助你斩获名企高薪 Offer。"),a("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"点击链接"),s("，快来领取！")],-1);function x(I,L,M,R,N,O){const n=e("Image");return t(),c("div",null,[E,p(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD02Ab_ffAAK5Evk7rNM190.png"}),s(),y,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/33/FF/Cgp9HWBwD1yAaayGAAO16nRrzQQ497.png"}),s(),i,p(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD2aAAtjKAABBXwAaJE8675.png"}),s(),F,p(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD3SAIEtvAABS4dW-YPo314.png"}),s(),d,h,p(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD3uADtMhAAMNNH1bIOY973.png"}),s(),A,p(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M00/34/00/Cgp9HWBwD4-AFJLoAABlk46DdAs957.png"}),s(),C,p(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M01/34/00/Cgp9HWBwD5mAFR0WAAHjSmqkmd0847.png"}),s(),g,p(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD6SAOvwRAAB4GHKuanE270.png"}),s(),u,p(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M00/34/00/Cgp9HWBwD6yATYtxAAHRgb9iz4o952.png"}),s(),D,p(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image6/M01/34/00/Cgp9HWBwD7aAKWHYAABelIOMBeE096.png"}),s(),v,p(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M00/34/00/Cgp9HWBwD8GACAFLAABqJCdynds886.png"}),s(),B,p(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image6/M00/34/00/Cgp9HWBwD8qATRwGAABrIJLpIKs046.png"}),s(),_,p(n,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD9KAICB5AAB9TVaRLF4498.png"}),s(),k,b,f,m,w,q,P,p(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/12/FA/CioPOWBBrAKAAod-AASyC72ZqWw233.png"}),s(),T,S,j])}const H=o(r,[["render",x]]);export{W as __pageData,H as default};
