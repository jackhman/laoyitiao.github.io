import{_ as o,j as e,o as t,h as c,k as p,f as n,Q as l,s}from"./chunks/framework.d3daa342.js";const q=JSON.parse('{"title":"13如何正确使用@Entity里面的回调方法？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4713) 13  如何正确使用 @Entity 里面的回调方法？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4713) 13  如何正确使用 @Entity 里面的回调方法？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4713) 13  如何正确使用 @Entity 里面的回调方法？.md"},y=l('<h1 id="_13如何正确使用-entity里面的回调方法" tabindex="-1">13如何正确使用@Entity里面的回调方法？ <a class="header-anchor" href="#_13如何正确使用-entity里面的回调方法" aria-label="Permalink to &quot;13如何正确使用@Entity里面的回调方法？&quot;">​</a></h1><p>本课时我要介绍的是 @Entity 的回调方法。</p><p>为什么要讲回调函数呢？因为在工作中，我发现有些同事会把这个回调方法用得非常复杂，不得要领，所以我专门拿出一个课时来为你详细说明，并分享我的经验供你参考。我将通过&quot;语法 + 实践&quot;的方式讲解如何使用 @Entity 的回调方法，从而达到提高开发效率的目的。下面开始本课时的学习。</p><h3 id="java-persistence-api-里面规定的回调方法有哪些" tabindex="-1">Java Persistence API 里面规定的回调方法有哪些？ <a class="header-anchor" href="#java-persistence-api-里面规定的回调方法有哪些" aria-label="Permalink to &quot;Java Persistence API 里面规定的回调方法有哪些？&quot;">​</a></h3><p>JPA 协议里面规定，可以通过一些注解，为其监听回调事件、指定回调方法。下面我整理了一个回调事件注解表，分别列举了 @PrePersist、@PostPersist、@PreRemove、@PostRemove、@PreUpdate、@PostUpdate、@PostLoad注解及其概念。</p><h4 id="回调事件注解表" tabindex="-1">回调事件注解表 <a class="header-anchor" href="#回调事件注解表" aria-label="Permalink to &quot;回调事件注解表&quot;">​</a></h4>',6),E=l(`<h4 id="语法注意事项" tabindex="-1">语法注意事项 <a class="header-anchor" href="#语法注意事项" aria-label="Permalink to &quot;语法注意事项&quot;">​</a></h4><p>关于上表所述的几个方法有一些需要注意的地方，如下：</p><ol><li><p>回调函数都是和 EntityManager.flush 或 EntityManager.commit 在同一个线程里面执行的，只不过调用方法有先后之分，都是同步调用，所以当任何一个回调方法里面发生异常，都会触发事务进行回滚，而不会触发事务提交。</p></li><li><p>Callbacks 注解可以放在实体里面，可以放在 super-class 里面，也可以定义在 entity 的 listener 里面，但需要注意的是：放在实体（或者 super-class）里面的方法，签名格式为&quot;void ()&quot;，即没有参数，方法里面操作的是 this 对象自己；放在实体的 EntityListener 里面的方法签名格式为&quot;void (Object)&quot;，也就是方法可以有参数，参数是代表用来接收回调方法的实体。</p></li><li><p>使上述注解生效的回调方法可以是 public、private、protected、friendly 类型的，但是不能是 static 和 finnal 类型的方法。</p></li></ol><p>JPA 里面规定的回调方法还有一些，但不常用，我就不过多介绍了。接下来，我们看一下回调注解在实体里面是如何使用的。</p><h3 id="jpa-callbacks-的使用方法" tabindex="-1">JPA Callbacks 的使用方法 <a class="header-anchor" href="#jpa-callbacks-的使用方法" aria-label="Permalink to &quot;JPA Callbacks 的使用方法&quot;">​</a></h3><p>这里我介绍两种方法，是你可能会在实际工作中用到的。</p><h4 id="第一种用法-在实体和-super-class-中使用" tabindex="-1">第一种用法：在实体和 super-class 中使用 <a class="header-anchor" href="#第一种用法-在实体和-super-class-中使用" aria-label="Permalink to &quot;第一种用法：在实体和 super-class 中使用&quot;">​</a></h4><p><strong>第一步：修改 BaseEntity，在里面新增回调函数和注解，代码如下:</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.base;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.Data;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.annotation.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.data.jpa.domain.support.AuditingEntityListener;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">MappedSuperclass</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EntityListeners</span><span style="color:#E1E4E8;">(AuditingEntityListener.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#6A737D;">// @CreatedBy 这个可能会被 AuditingEntityListener覆盖，为了方便测试，我们先注释掉</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer createUserId;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">CreatedDate</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Instant createTime;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">LastModifiedBy</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer lastModifiedUserId;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">LastModifiedDate</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Instant lastModifiedTime;</span></span>
<span class="line"><span style="color:#6A737D;">//  @Version 由于本身有乐观锁机制，这个我们测试的时候先注释掉，改用手动设置的值；</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer version;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PreUpdate</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preUpdate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;preUpdate::&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setCreateUserId</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostUpdate</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postUpdate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postUpdate::&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PreRemove</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preRemove</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;preRemove::&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostRemove</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postRemove</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postRemove::&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostLoad</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postLoad</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postLoad::&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.base;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.Data;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.data.jpa.domain.support.AuditingEntityListener;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.time.Instant;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MappedSuperclass</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EntityListeners</span><span style="color:#24292E;">(AuditingEntityListener.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#6A737D;">// @CreatedBy 这个可能会被 AuditingEntityListener覆盖，为了方便测试，我们先注释掉</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer createUserId;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">CreatedDate</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Instant createTime;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">LastModifiedBy</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer lastModifiedUserId;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">LastModifiedDate</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Instant lastModifiedTime;</span></span>
<span class="line"><span style="color:#6A737D;">//  @Version 由于本身有乐观锁机制，这个我们测试的时候先注释掉，改用手动设置的值；</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer version;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PreUpdate</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preUpdate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;preUpdate::&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setCreateUserId</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostUpdate</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postUpdate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;postUpdate::&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PreRemove</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preRemove</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;preRemove::&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostRemove</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postRemove</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;postRemove::&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostLoad</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postLoad</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;postLoad::&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中，我在类里面使用了@PreUpdate、@PostUpdate、@PreRemove、@PostRemove、@PostLoad 几个注解，并在相应的回调方法里面加了相应的日志。并且在 @PreUpdate 方法里面修改了 create_user_id 的值为 200，这样做是为了方便我们后续测试。</p><p><strong>第二步：修改一下 User 类，也新增两个回调函数，并且和 BaseEntity 做法一样，代码如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.jpa.example1.base.BaseEntity;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.fasterxml.jackson.annotation.JsonIgnore;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.List;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Builder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;addresses&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">callSuper</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EqualsAndHashCode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">callSuper</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;">// implements Auditable&lt;Integer,Long, Instant&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String email;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Enumerated</span><span style="color:#E1E4E8;">(EnumType.STRING)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> SexEnum sex;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer age;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonIgnore</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">UserAddress</span><span style="color:#E1E4E8;">&gt; addresses;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Boolean deleted;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PrePersist</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prePersist</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;prePersist::&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setVersion</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostPersist</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postPersist</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postPersist::&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.jpa.example1.base.BaseEntity;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.fasterxml.jackson.annotation.JsonIgnore;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.List;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Builder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;addresses&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">callSuper</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EqualsAndHashCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">callSuper</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;">// implements Auditable&lt;Integer,Long, Instant&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String email;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Enumerated</span><span style="color:#24292E;">(EnumType.STRING)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> SexEnum sex;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer age;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonIgnore</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">UserAddress</span><span style="color:#24292E;">&gt; addresses;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Boolean deleted;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PrePersist</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prePersist</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;prePersist::&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setVersion</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostPersist</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postPersist</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;postPersist::&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我在其中使用了 @PrePersist、@PostPersist 回调事件，为了方便我们测试，我在 @PrePersist 里面将 version 修改为 1。</p><p><strong>第三步：写一个测试用例测试一下。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DataJpaTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">TestInstance</span><span style="color:#E1E4E8;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">(JpaConfiguration.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserRepositoryTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">MockBean</span></span>
<span class="line"><span style="color:#E1E4E8;">    MyAuditorAware myAuditorAware;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 为了和测试方法的事务分开，我们在 init 里面初始化数据做新增操作</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">BeforeAll</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//由于测试用例模拟 web context 环境不是我们的重点，这里利用@MockBean，mock掉我们的方法，期待返回13这个用户ID</span></span>
<span class="line"><span style="color:#E1E4E8;">       Mockito.</span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(myAuditorAware.</span><span style="color:#B392F0;">getCurrentAuditor</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">thenReturn</span><span style="color:#E1E4E8;">(Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        User u1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456@126.com&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">sex</span><span style="color:#E1E4E8;">(SexEnum.BOY)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//没有save之前 version是null</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertNull</span><span style="color:#E1E4E8;">(u1.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(u1);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//这里面触发保存方法，这个时候我们将version设置成了1，然后验证一下</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,u1.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试一下更新和查询</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCallBackUpdate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//此时会触发@PostLoad事件</span></span>
<span class="line"><span style="color:#E1E4E8;">        User u1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//我们从db里面重新查询出来，验证一下version是不是1</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,u1.</span><span style="color:#B392F0;">getVersion</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        u1.</span><span style="color:#B392F0;">setSex</span><span style="color:#E1E4E8;">(SexEnum.GIRL);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//此时会触发@PreUpdate事件</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(u1);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; u3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        u3.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(u</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//我们从db查询出来，验证一下CcreateUserId是否为我们刚才修改的200</span></span>
<span class="line"><span style="color:#E1E4E8;">           Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,u.</span><span style="color:#B392F0;">getCreateUserId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试一下删除事件</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Rollback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCallBackDelete</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//此时会触发@PostLoad事件</span></span>
<span class="line"><span style="color:#E1E4E8;">        User u1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">getOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,u1.</span><span style="color:#B392F0;">getCreateUserId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        userRepository.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(u1);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//此时会触发@PreRemove、@PostRemove事件</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;delete_after::&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DataJpaTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">TestInstance</span><span style="color:#24292E;">(TestInstance.Lifecycle.PER_CLASS)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">(JpaConfiguration.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserRepositoryTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">MockBean</span></span>
<span class="line"><span style="color:#24292E;">    MyAuditorAware myAuditorAware;</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 为了和测试方法的事务分开，我们在 init 里面初始化数据做新增操作</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">BeforeAll</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//由于测试用例模拟 web context 环境不是我们的重点，这里利用@MockBean，mock掉我们的方法，期待返回13这个用户ID</span></span>
<span class="line"><span style="color:#24292E;">       Mockito.</span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(myAuditorAware.</span><span style="color:#6F42C1;">getCurrentAuditor</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">thenReturn</span><span style="color:#24292E;">(Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        User u1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">email</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456@126.com&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">sex</span><span style="color:#24292E;">(SexEnum.BOY)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//没有save之前 version是null</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertNull</span><span style="color:#24292E;">(u1.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(u1);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//这里面触发保存方法，这个时候我们将version设置成了1，然后验证一下</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,u1.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试一下更新和查询</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCallBackUpdate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//此时会触发@PostLoad事件</span></span>
<span class="line"><span style="color:#24292E;">        User u1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//我们从db里面重新查询出来，验证一下version是不是1</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,u1.</span><span style="color:#6F42C1;">getVersion</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        u1.</span><span style="color:#6F42C1;">setSex</span><span style="color:#24292E;">(SexEnum.GIRL);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//此时会触发@PreUpdate事件</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(u1);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; u3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        u3.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(u</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//我们从db查询出来，验证一下CcreateUserId是否为我们刚才修改的200</span></span>
<span class="line"><span style="color:#24292E;">           Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,u.</span><span style="color:#6F42C1;">getCreateUserId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 测试一下删除事件</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Rollback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCallBackDelete</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//此时会触发@PostLoad事件</span></span>
<span class="line"><span style="color:#24292E;">        User u1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">getOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,u1.</span><span style="color:#6F42C1;">getCreateUserId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        userRepository.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(u1);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//此时会触发@PreRemove、@PostRemove事件</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;delete_after::&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过测试用例验证了回调函数的事件后，看一下输出的 SQL 和日志：</p>`,16),i=l(`<p>我们通过上图的日志也可以看到响应的回调函数被触发了，并且可以看到我们在insert之前执行 prePersist 日志、在 insert 之后执行 postPersist 日志、在 select 之后执行 postLoad 方法的日志，以及在 update 的 sql 前后执行的 preUpdate 和 postUpdate 日志。</p><p>如果我们执行上面 remove 的测试用例，也会得到一样的效果：在 delete sql 之前会执行 preRemove 的方法并且打印日志，在 delete sql 之后会执行 postRemove 方法并打印日志。</p><p>那么使用这种方法，回调函数里面发生异常会怎么样呢？这也是你可能会遇到的问题，我来告诉你解决办法。</p><p>我们稍微修改一下上面的 @PostPersist 方法，手动抛一个异常出来，看看会发生什么。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostPersist</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postPersist</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postPersist::&quot;</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jack test exception transactional roll back&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostPersist</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postPersist</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;postPersist::&quot;</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jack test exception transactional roll back&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们再跑测试用例就会发现，其中发生了 RollbackException 异常，这样的话数据是不会提交到 DB 里面的，也就会导致数据进行回滚，后面的业务流程无法执行下去。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Could not commit JPA transaction; nested exception is javax.persistence.RollbackException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Error </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> committing the transaction</span></span>
<span class="line"><span style="color:#E1E4E8;">org.springframework.transaction.TransactionSystemException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Could not commit JPA transaction; nested exception is javax.persistence.RollbackException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Error </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> committing the transaction</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Could not commit JPA transaction; nested exception is javax.persistence.RollbackException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Error </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> committing the transaction</span></span>
<span class="line"><span style="color:#24292E;">org.springframework.transaction.TransactionSystemException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Could not commit JPA transaction; nested exception is javax.persistence.RollbackException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Error </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> committing the transaction</span></span></code></pre></div><p>所以在使用此方法时，你要注意考虑异常情况，避免不必要的麻烦。</p><h4 id="第二种用法-自定义-entitylistener" tabindex="-1">第二种用法：自定义 EntityListener <a class="header-anchor" href="#第二种用法-自定义-entitylistener" aria-label="Permalink to &quot;第二种用法：自定义 EntityListener&quot;">​</a></h4><p><strong>第一步：自定义一个 EntityLoggingListenner 用来记录操作日志，通过 listener 的方式配置回调函数注解，代码如下:</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.jpa.example1.base;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.extern.log4j.Log4j2;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Log4j2</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EntityLoggingListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PrePersist</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prePersist</span><span style="color:#E1E4E8;">(BaseEntity </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//entity.setVersion(1); 如果注释了，测试用例这个地方的验证也需要去掉</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;prePersist::{}&quot;</span><span style="color:#E1E4E8;">,entity.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostPersist</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postPersist</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postPersist::{}&quot;</span><span style="color:#E1E4E8;">,entity.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PreUpdate</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preUpdate</span><span style="color:#E1E4E8;">(BaseEntity </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//entity.setCreateUserId(200); 如果注释了，测试用例这个地方的验证也需要去掉</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;preUpdate::{}&quot;</span><span style="color:#E1E4E8;">,entity.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostUpdate</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postUpdate</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postUpdate::{}&quot;</span><span style="color:#E1E4E8;">,entity.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PreRemove</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preRemove</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;preRemove::{}&quot;</span><span style="color:#E1E4E8;">,entity.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostRemove</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postRemove</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postRemove::{}&quot;</span><span style="color:#E1E4E8;">,entity.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostLoad</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postLoad</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//查询方法里面可以对一些敏感信息做一些日志</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (User.class.</span><span style="color:#B392F0;">isInstance</span><span style="color:#E1E4E8;">(entity)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postLoad::{}&quot;</span><span style="color:#E1E4E8;">,entity.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.jpa.example1.base;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> com.example.jpa.example1.User;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.extern.log4j.Log4j2;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Log4j2</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EntityLoggingListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PrePersist</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prePersist</span><span style="color:#24292E;">(BaseEntity </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//entity.setVersion(1); 如果注释了，测试用例这个地方的验证也需要去掉</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;prePersist::{}&quot;</span><span style="color:#24292E;">,entity.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostPersist</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postPersist</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;postPersist::{}&quot;</span><span style="color:#24292E;">,entity.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PreUpdate</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preUpdate</span><span style="color:#24292E;">(BaseEntity </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//entity.setCreateUserId(200); 如果注释了，测试用例这个地方的验证也需要去掉</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;preUpdate::{}&quot;</span><span style="color:#24292E;">,entity.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostUpdate</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postUpdate</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;postUpdate::{}&quot;</span><span style="color:#24292E;">,entity.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PreRemove</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preRemove</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;preRemove::{}&quot;</span><span style="color:#24292E;">,entity.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostRemove</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postRemove</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;postRemove::{}&quot;</span><span style="color:#24292E;">,entity.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostLoad</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postLoad</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//查询方法里面可以对一些敏感信息做一些日志</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (User.class.</span><span style="color:#6F42C1;">isInstance</span><span style="color:#24292E;">(entity)) {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;postLoad::{}&quot;</span><span style="color:#24292E;">,entity.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这一步骤中需要注意的是：</p><ol><li><p>我们上面注释的代码，也可以改变 entity 里面的值，但是在这个 Listener 的里面我们不做修改，所以把 setVersion 和 setCreateUserId 注释掉了，要注意测试用例里面这两处也需要修改。</p></li><li><p>如果在 @PostLoad 里面记录日志，不一定每个实体、每次查询都需要记录日志，只需要对一些敏感的实体或者字段做日志记录即可。</p></li><li><p>回调函数时我们可以加上参数，这个参数可以是父类 Object，可以是 BaseEntity，也可以是具体的某一个实体；我推荐用 BaseEntity，因为这样的方法是类型安全的，它可以约定一些框架逻辑，比如 getCreateUserId、getLastModifiedUserId 等。</p></li></ol><p><strong>第二步：还是一样的道理，写一个测试用例跑一下。</strong></p><p>这次我们执行 testCallBackDelete()，看看会得到什么样的效果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19.332</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">62541</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> prePersist</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">super</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, createUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, createTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, lastModifiedUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, lastModifiedTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, version</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">), name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jack, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">126</span><span style="color:#E1E4E8;">.com, sex</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">BOY, age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, deleted</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19.449</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">62541</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> postPersist</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">super</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, createUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, createTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, lastModifiedUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, lastModifiedTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, version</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">), name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jack, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">126</span><span style="color:#E1E4E8;">.com, sex</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">BOY, age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, deleted</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19.698</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">62541</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> postLoad</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">super</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, createUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, createTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, lastModifiedUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, lastModifiedTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, version</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">), name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jack, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">126</span><span style="color:#E1E4E8;">.com, sex</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">BOY, age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, deleted</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19.719</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">62541</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> preRemove</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">super</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, createUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, createTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, lastModifiedUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, lastModifiedTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, version</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">), name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jack, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">126</span><span style="color:#E1E4E8;">.com, sex</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">BOY, age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, deleted</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">05</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19.798</span><span style="color:#E1E4E8;">  INFO </span><span style="color:#79B8FF;">62541</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> postRemove</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">super</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;">(id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, createUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, createTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, lastModifiedUserId</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, lastModifiedTime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">05T05</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">19.</span><span style="color:#FDAEB7;font-style:italic;">246Z</span><span style="color:#E1E4E8;">, version</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">), name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jack, email</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123456</span><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">126</span><span style="color:#E1E4E8;">.com, sex</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">BOY, age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, deleted</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19.332</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">62541</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> prePersist</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">super</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, createUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, createTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, lastModifiedUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, lastModifiedTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, version</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">), name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jack, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">126</span><span style="color:#24292E;">.com, sex</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">BOY, age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, deleted</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19.449</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">62541</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> postPersist</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">super</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, createUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, createTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, lastModifiedUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, lastModifiedTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, version</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">), name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jack, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">126</span><span style="color:#24292E;">.com, sex</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">BOY, age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, deleted</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19.698</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">62541</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> postLoad</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">super</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, createUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, createTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, lastModifiedUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, lastModifiedTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, version</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">), name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jack, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">126</span><span style="color:#24292E;">.com, sex</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">BOY, age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, deleted</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19.719</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">62541</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> preRemove</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">super</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, createUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, createTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, lastModifiedUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, lastModifiedTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, version</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">), name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jack, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">126</span><span style="color:#24292E;">.com, sex</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">BOY, age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, deleted</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">05</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19.798</span><span style="color:#24292E;">  INFO </span><span style="color:#005CC5;">62541</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">---</span><span style="color:#24292E;"> [    Test worker] c.e.j.e.base.EntityLoggingListener       </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> postRemove</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">super</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;">(id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, createUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, createTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, lastModifiedUserId</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, lastModifiedTime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">05T05</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">19.</span><span style="color:#B31D28;font-style:italic;">246Z</span><span style="color:#24292E;">, version</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">), name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jack, email</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">@</span><span style="color:#D73A49;">126</span><span style="color:#24292E;">.com, sex</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">BOY, age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, deleted</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span></code></pre></div><p>通过日志我们可以很清晰地看到 callback 注解标注的方法的执行过程，及其实体参数的值。你就会发现，原来自定义 EntityListener 回调函数的方法也是如此简单。</p><p>细心的你这个时候可能也会发现，我们上面其实应用了两个 EntityListener，所以这个时候 @EntityListeners 有个加载顺序的问题，你需要重点注意一下。</p><h4 id="关于-entitylisteners-加载顺序的说明" tabindex="-1">关于 @EntityListeners 加载顺序的说明 <a class="header-anchor" href="#关于-entitylisteners-加载顺序的说明" aria-label="Permalink to &quot;关于 @EntityListeners 加载顺序的说明&quot;">​</a></h4><ol><li><p>默认如果子类和父类都有 EntityListeners，那么 listeners 会按照加载的顺序执行所有 EntityListeners；</p></li><li><p>EntityListeners 和实体里面的回调函数注解可以同时使用，但需要注意顺序问题；</p></li><li><p>如果我们不想加载super-class里面的EntityListeners，那么我们可以通过注解 @ExcludeSuperclassListeners，排除所有父类里面的实体监听者，需要用到的时候，我们再在子类实体里面重新引入即可，代码如下：</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ExcludeSuperclassListeners</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">......}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ExcludeSuperclassListeners</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">......}</span></span></code></pre></div><p>看完了上面介绍的两种方式，关于 Callbacks 注解的用法你是不是已经掌握了呢？我强调需要注意的地方你要重点看一下，并切记在应用时不要搞错了。</p><p>上面说了这么多回调函数的注解使用方法，那么它的最佳实践是什么呢？</p><h3 id="jpa-callbacks-的最佳实践" tabindex="-1">JPA Callbacks 的最佳实践 <a class="header-anchor" href="#jpa-callbacks-的最佳实践" aria-label="Permalink to &quot;JPA Callbacks 的最佳实践&quot;">​</a></h3><p><strong>我以个人经验总结了几个最佳实践。</strong></p><p>1.回调函数里面应尽量避免直接操作业务代码，最好用一些具有框架性的公用代码，如上一课时我们讲的 Auditing，以及本课时前面提到的实体操作日志等；</p><p>2.注意回调函数方法要在同一个事务中进行，异常要可预期，非可预期的异常要进行捕获，以免出现意想不到的线上 Bug；</p><p>3.回调函数方法是同步的，如果一些计算量大的和一些耗时的操作，可以通过发消息等机制异步处理，以免阻塞主流程，影响接口的性能。比如上面说的日志，如果我们要将其记录到数据库里面，可以在回调方法里面发个消息，改进之后将变成如下格式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuditLoggingListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostLoad</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postLoad</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">notice</span><span style="color:#E1E4E8;">(entity, OperateType.load);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostPersist</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postPersist</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">notice</span><span style="color:#E1E4E8;">(entity, OperateType.create);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostRemove</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PostRemove</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">notice</span><span style="color:#E1E4E8;">(entity, OperateType.remove);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostUpdate</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PostUpdate</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">notice</span><span style="color:#E1E4E8;">(entity, OperateType.update);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">notice</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">entity</span><span style="color:#E1E4E8;">, OperateType </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//我们通过active mq 异步发出消息处理事件</span></span>
<span class="line"><span style="color:#E1E4E8;">      ActiveMqEventManager.</span><span style="color:#B392F0;">notice</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActiveMqEvent</span><span style="color:#E1E4E8;">(type, entity));</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Getter</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OperateType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;创建&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;删除&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#79B8FF;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;修改&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#79B8FF;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;查询&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String description;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">OperateType</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">description</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.description</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">description;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuditLoggingListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostLoad</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postLoad</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">notice</span><span style="color:#24292E;">(entity, OperateType.load);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostPersist</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postPersist</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">notice</span><span style="color:#24292E;">(entity, OperateType.create);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostRemove</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostRemove</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">notice</span><span style="color:#24292E;">(entity, OperateType.remove);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostUpdate</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostUpdate</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">notice</span><span style="color:#24292E;">(entity, OperateType.update);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notice</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">entity</span><span style="color:#24292E;">, OperateType </span><span style="color:#E36209;">type</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//我们通过active mq 异步发出消息处理事件</span></span>
<span class="line"><span style="color:#24292E;">      ActiveMqEventManager.</span><span style="color:#6F42C1;">notice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ActiveMqEvent</span><span style="color:#24292E;">(type, entity));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Getter</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OperateType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;创建&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;删除&quot;</span><span style="color:#24292E;">),</span><span style="color:#005CC5;">update</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;修改&quot;</span><span style="color:#24292E;">),</span><span style="color:#005CC5;">load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;查询&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String description;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">OperateType</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">description</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.description</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">description;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>4.在回调函数里面，尽量不要直接在操作 EntityManager 后再做 session 的整个生命周期的其他持久化操作，以免破坏事务的处理流程；也不要进行其他额外的关联关系更新动作，业务性的代码一定要放在 service 层面，否则太过复杂，时间长了代码很难维护；（ps：我曾经看到有人把回调函数用得十分复杂，做各种状态流转逻辑，时间长了连他自己也不知道是干什么的，耦合度太高了，你一定要谨慎。）</p><p>5.回调函数里面比较适合用一些计算型的transient方法，如下面这个操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PrePersist</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prePersist</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过一些逻辑计算年龄；</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">calculationAge</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PrePersist</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prePersist</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过一些逻辑计算年龄；</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">calculationAge</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>6.JPA 官方比较建议放一些默认值，但是我不是特别赞同，因为觉得那样不够直观，我们直接用字段初始化就可以了，没必要在回调函数里面放置默认值。</p><p><strong>那么除了日志，还有没有其他实战应用场景呢？</strong></p><p>确实目前除了日志，Auditing 稍微公用一点，其他公用的场景不多。当遇到其他场景，你可以根据不同的实体实际情况制定自己独有的 EntityListener 方法，如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EntityListeners</span><span style="color:#E1E4E8;">(UserListener.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;">// implements Auditable&lt;Integer,Long, Instant&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Transient</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">calculationAge</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//通过一些逻辑计算年龄；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   ......</span><span style="color:#6A737D;">//其他不重要的省略</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EntityListeners</span><span style="color:#24292E;">(UserListener.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;">// implements Auditable&lt;Integer,Long, Instant&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Transient</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calculationAge</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//通过一些逻辑计算年龄；</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   ......</span><span style="color:#6A737D;">//其他不重要的省略</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>例如，User 中我们有个计算年龄的逻辑要独立调用，就可以在持久化之前调用此方法，新建一个自己的 UserListener 即可，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PrePersist</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prePersist</span><span style="color:#E1E4E8;">(User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过一些逻辑计算年龄；</span></span>
<span class="line"><span style="color:#E1E4E8;">        user.</span><span style="color:#B392F0;">calculationAge</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserListener</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PrePersist</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prePersist</span><span style="color:#24292E;">(User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过一些逻辑计算年龄；</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">calculationAge</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上，关于 JPA Callbacks 在一些实际场景中的最佳实践就介绍这些，希望你在应用的时候多注意找方法，避免不必要的操作，也希望我的经验可以帮助到你。</p><h3 id="jpa-callbacks-的实现原理-事件机制" tabindex="-1">JPA Callbacks 的实现原理，事件机制 <a class="header-anchor" href="#jpa-callbacks-的实现原理-事件机制" aria-label="Permalink to &quot;JPA Callbacks 的实现原理，事件机制&quot;">​</a></h3><p>那么 callbacks 的实现原理是什么呢？其实很简单，Java Persistence API规定：JPA 的实现方需要实现功能，需要支持回调事件注解；而 Hibernate 内部负责实现，Hibernate 内部维护了一套实体的 EventType，其内部包含了各种回调事件，下面列举一下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventType&lt;</span><span style="color:#F97583;">PreLoadEventListener</span><span style="color:#E1E4E8;">&gt; PRE_LOAD </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;pre-load&quot;</span><span style="color:#E1E4E8;">, PreLoadEventListener.class );</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventType&lt;</span><span style="color:#F97583;">PreDeleteEventListener</span><span style="color:#E1E4E8;">&gt; PRE_DELETE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;pre-delete&quot;</span><span style="color:#E1E4E8;">, PreDeleteEventListener.class );</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventType&lt;</span><span style="color:#F97583;">PreUpdateEventListener</span><span style="color:#E1E4E8;">&gt; PRE_UPDATE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;pre-update&quot;</span><span style="color:#E1E4E8;">, PreUpdateEventListener.class );</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventType&lt;</span><span style="color:#F97583;">PreInsertEventListener</span><span style="color:#E1E4E8;">&gt; PRE_INSERT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;pre-insert&quot;</span><span style="color:#E1E4E8;">, PreInsertEventListener.class );</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventType&lt;</span><span style="color:#F97583;">PostLoadEventListener</span><span style="color:#E1E4E8;">&gt; POST_LOAD </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;post-load&quot;</span><span style="color:#E1E4E8;">, PostLoadEventListener.class );</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventType&lt;</span><span style="color:#F97583;">PostDeleteEventListener</span><span style="color:#E1E4E8;">&gt; POST_DELETE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;post-delete&quot;</span><span style="color:#E1E4E8;">, PostDeleteEventListener.class );</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventType&lt;</span><span style="color:#F97583;">PostUpdateEventListener</span><span style="color:#E1E4E8;">&gt; POST_UPDATE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;post-update&quot;</span><span style="color:#E1E4E8;">, PostUpdateEventListener.class );</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventType&lt;</span><span style="color:#F97583;">PostInsertEventListener</span><span style="color:#E1E4E8;">&gt; POST_INSERT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;post-insert&quot;</span><span style="color:#E1E4E8;">, PostInsertEventListener.class );</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventType&lt;</span><span style="color:#D73A49;">PreLoadEventListener</span><span style="color:#24292E;">&gt; PRE_LOAD </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;pre-load&quot;</span><span style="color:#24292E;">, PreLoadEventListener.class );</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventType&lt;</span><span style="color:#D73A49;">PreDeleteEventListener</span><span style="color:#24292E;">&gt; PRE_DELETE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;pre-delete&quot;</span><span style="color:#24292E;">, PreDeleteEventListener.class );</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventType&lt;</span><span style="color:#D73A49;">PreUpdateEventListener</span><span style="color:#24292E;">&gt; PRE_UPDATE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;pre-update&quot;</span><span style="color:#24292E;">, PreUpdateEventListener.class );</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventType&lt;</span><span style="color:#D73A49;">PreInsertEventListener</span><span style="color:#24292E;">&gt; PRE_INSERT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;pre-insert&quot;</span><span style="color:#24292E;">, PreInsertEventListener.class );</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventType&lt;</span><span style="color:#D73A49;">PostLoadEventListener</span><span style="color:#24292E;">&gt; POST_LOAD </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;post-load&quot;</span><span style="color:#24292E;">, PostLoadEventListener.class );</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventType&lt;</span><span style="color:#D73A49;">PostDeleteEventListener</span><span style="color:#24292E;">&gt; POST_DELETE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;post-delete&quot;</span><span style="color:#24292E;">, PostDeleteEventListener.class );</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventType&lt;</span><span style="color:#D73A49;">PostUpdateEventListener</span><span style="color:#24292E;">&gt; POST_UPDATE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;post-update&quot;</span><span style="color:#24292E;">, PostUpdateEventListener.class );</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventType&lt;</span><span style="color:#D73A49;">PostInsertEventListener</span><span style="color:#24292E;">&gt; POST_INSERT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;post-insert&quot;</span><span style="color:#24292E;">, PostInsertEventListener.class );</span></span></code></pre></div><p>更多的事件类型，你可以通过查看 org.hibernate.event.spi.EventType 类，了解更多；在 session factory 构建的时候，EventListenerRegistryImpl 负责注册这些事件，我们看一下 debug 的关键节点：</p>`,43),F=s("p",null,"通过一步一步断点，再结合 Hibernate 的官方文档，可以了解内部 EventType 事件的创建机制，由于我们不常用这部分原理，知道有这么回事即可，你有兴趣也可以深入 debug 研究一下。",-1),d=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),A=s("p",null,"到这里，本课时内容就介绍这么多。这一节，我们分析了语法，列举了实战使用场景及最佳实践，相信通过上面提到的异常、异步、避免死循环等处理方法，你已经知道回调函数的正确使用方法了。其中最佳实践场景也欢迎你补充，我们可以一起探讨。",-1),C=s("p",null,'下一课时，我们将迎来很多人都感兴趣的"乐观锁机制和重试机制"相关内容，到时候我会告诉你它们在实战中都是怎么使用的。',-1),u=s("blockquote",null,[s("p",null,"点击下方链接查看源码：（不定时更新）")],-1);function D(B,g,v,m,b,P){const a=e("Image");return t(),c("div",null,[y,p(a,{alt:"image (5).png",src:"https://s0.lgstatic.com/i/image/M00/62/8F/Ciqc1F-SoLyAODuaAADhS0Urg_0032.png"}),n(),E,p(a,{alt:"image (6).png",src:"https://s0.lgstatic.com/i/image/M00/62/9A/CgqCHl-SoPOAN80hAAMNJSyVLgc502.png"}),n(),i,p(a,{alt:"image (7).png",src:"https://s0.lgstatic.com/i/image/M00/62/9B/CgqCHl-SoWSAXvSiAARU062JRFI108.png"}),n(),F,d,A,C,u])}const L=o(r,[["render",D]]);export{q as __pageData,L as default};
