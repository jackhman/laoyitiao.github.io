import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.f949202b.js";const d=JSON.parse('{"title":"分布式系统中的服务雪崩 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3819) 24  如何实现熔断机制？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3819) 24  如何实现熔断机制？.md","lastUpdated":null}'),l={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3819) 24  如何实现熔断机制？.md"},o=p(`<p>在第 22 课时中，我们已经了解了熔断的基本原理和断路器在服务高可用架构中的重要性。那本课时我们继续往下剖析，来详细介绍熔断主要预防的<strong>服务雪崩现象的形成和危害</strong> ，以及推荐使用的断路器中间件<strong>Hystrix 的使用方法和相关原理</strong>。</p><h3 id="分布式系统中的服务雪崩" tabindex="-1">分布式系统中的服务雪崩 <a class="header-anchor" href="#分布式系统中的服务雪崩" aria-label="Permalink to &quot;分布式系统中的服务雪崩&quot;">​</a></h3><p>在分布式系统中，由于业务上的划分，一次完整的请求可能需要借助好几个不同的模块协力完成，在微服务架构中就是需要多个服务实例协力完成。请求会在这些服务实例中传递，服务之间的调用会产生新的请求，它们共同组成一次<strong>服务调用链</strong>，关系如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/4F/F7/CgqCHl9hoYyAd7J7AAAu6XVpTzE568.png" alt="Drawing 0.png"><br> 微服务服务调用链示意图</p><p>通过该时序图，我们可以看到：客户端（Client）发起了一次请求 Request1，网关（Gateway）在接收到请求后将它转发（标记为 Request2）给 Service-A；由于这次请求涉及 Service-B 中的数据，所以 Service-A 又向 Service-B 发起了一次 Request3 获取对应的数据；处理结束后，将结果返回给网关，由网关将结果返回给客户端。这里的 Request2 和 Request3 就共同组成了这次调用的调用链。</p><p>至于服务雪崩，我们在第 22 课时曾讲解过，<strong>服务雪崩是指当调用链的某个环节（特别是服务提供方服务）不可用时，将会导致其上游环节不可用，并最终将这种影响扩大到整个系统中，导致整个系统的不可用</strong>。如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/4F/F7/CgqCHl9hoZqAaUmRAABYO2_cRvk414.png" alt="Drawing 1.png"><br> 服务雪崩示意图</p><p>从图中我们可以看到，服务雪崩一般有 3 个阶段流程。</p><p><strong>第一阶段是服务提供者不能用。</strong> 如上图所示，在初始阶段，一切运行良好，网关、Service-A 和 Service-B 可以响应客户端的各种请求。但在某一个时间节点，服务提供者 Service-B 由于网络故障或者请求过载不可用，而无法及时响应各类请求。</p><p><strong>第二阶段是服务调用者不可用</strong>。在服务提供者不可用之后，客户端可能会因为错误提示或者长时间的阻塞而不断发送相同的请求到网关中，网关再次将请求转发给 Service-A 进行处理，Service-A 根据业务流程也向 Service-B 发起数据请求；同时，上一阶段中 Service-A 对 Service-B 超时或者失败的请求可能会因为 Service-A 中的重试机制再次请求 Service-B。但这些请求都无法从 Service-B 中获取到有效的返回，最坏的结果就是都被阻塞，无法及时响应。Service-A 会因为发起过多对 Service-B 的请求而逐渐累积一堆等待线程，耗尽线程池中的资源，从而无法响应其他请求，最终导致自身的不可用。</p><p><strong>最后一阶段是整个系统的不可用</strong>。Service-A 中的等待请求同样阻塞了转发请求的网关。在多线程阻塞型的网关中，大量等待请求将会产生大量的阻塞线程，使得网关没有足够的资源处理其他请求，进而导致整个系统无法对外提供服务。</p><p>为了避免服务雪崩现象的出现，我们就需要及时&quot;壮士断腕&quot;，在必要的时候暂时切断对异常服务提供者的调用，以保证部分服务可用和整体系统的稳定性。这时<strong>断路器</strong>（Circuit Breaker）就该登场了。</p><p><img src="https://s0.lgstatic.com/i/image/M00/4F/EC/Ciqc1F9hoaiANJYgAAA_xMaFiWc181.png" alt="Drawing 2.png"><br> 断路器</p><p>如上图所示，我们在 Serivce-A 向 Service-B 的请求中增加了一根&quot;保险丝&quot;------断路器。它统计一段时间内 Service-A 对 Serivice-B 请求的响应结果，在超时或者失败次数过多的情况下，阻断 Service-A 对 Service-B 的请求，直接返回相关的异常处理结果，使得 Service-A 中的请求线程能够及时返回，避免资源耗尽而不可用，从而保护了服务调用者和避免了服务级联失败。</p><p>到这里，相信你已经迫不及待地准备在项目中使用断路器保护自己的服务不受分布式系统服务雪崩的影响。但自研断路器组件往往费时费力，秉承着不能重复&quot;造轮子&quot;的理念，我这里推荐你使用 Hystrix。</p><h3 id="hystrix-简介" tabindex="-1">Hystrix 简介 <a class="header-anchor" href="#hystrix-简介" aria-label="Permalink to &quot;Hystrix 简介&quot;">​</a></h3><p><strong>Hystrix 是 Netflix 开源的一个优秀的服务间断路器</strong>。它能够在服务提供者出现故障时，隔离服务调用者和服务提供者，防止服务级联失败；同时提供失败回滚逻辑，使系统快速从异常中恢复。</p><p>Hystrix 完美地实现了断路器模式，同时还提供了信号量和线程隔离的方式保护服务调用者的线程资源，对延迟和失败提供强大的容错能力，进而保护和控制系统。</p><p>典型的 Hystrix 编程形式如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> hystrix.</span><span style="color:#B392F0;">Do</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test_command&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">() error {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 远程调用&amp;或者其他需要保护的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nil</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(err error) error{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 失败回滚方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nil</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> hystrix.</span><span style="color:#6F42C1;">Do</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test_command&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">() error {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 远程调用&amp;或者其他需要保护的方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nil</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(err error) error{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 失败回滚方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nil</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>被 hystrix 包装的远程调用逻辑都会封装为一个 hystrix 命令，其内包含<strong>远程调用逻辑</strong> 和<strong>失败回滚逻辑</strong>，根据 hystrix 命名唯一确认一个 hystrix 命令。</p><p>上述代码执行时会先根据 hystrix 命令的命名获取到对应的断路器，并判断断路器是否打开。如果断路器打开，说明此时服务调用已经被熔断了，将直接执行失败回滚逻辑，不执行真正的远程调用逻辑；如果断路器关闭或者处于半开状态，则执行远程调用逻辑。</p><p>接下来我们将通过一个简单的例子来了解 Hystrix 的使用方式。</p><h3 id="hystrix-基础使用案例" tabindex="-1">Hystrix 基础使用案例 <a class="header-anchor" href="#hystrix-基础使用案例" aria-label="Permalink to &quot;Hystrix 基础使用案例&quot;">​</a></h3><p>我们以常见的电商商品系统为例，商品详情页面需要展示下游评论系统的具体评论信息，但是实时最新的评论信息相对来说并不是不可或缺的，紧急情况下可以不进行显示。下图展示了相关的服务交互图：</p><p><img src="https://s0.lgstatic.com/i/image/M00/4F/F8/CgqCHl9hobqAJ0fBAABU7XC4gtY397.png" alt="Drawing 3.png"><br> 商品系统和评论系统交互图</p><p>商品系统相对于下游的评论系统来说，级别更高，不应该受到评论系统的错误影响，为避免上面我们所说的服务雪崩问题，这二者之间的交互需要使用断路器进行熔断保护。其示例代码如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">GetGoodsComments</span><span style="color:#E1E4E8;">(id string) (common.CommentListVO, error)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   var result common.CommentListVO</span></span>
<span class="line"><span style="color:#E1E4E8;">   serviceName </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Comments&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> hystrix.</span><span style="color:#B392F0;">Do</span><span style="color:#E1E4E8;">(serviceName, </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">() error{</span></span>
<span class="line"><span style="color:#E1E4E8;">      requestUrl </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> url.URL{</span></span>
<span class="line"><span style="color:#E1E4E8;">         Scheme</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;8081&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         Path</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;/comments/detail&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">         RawQuery</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;id=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> id,</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">(requestUrl.</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil{</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      body, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ioutil.</span><span style="color:#B392F0;">ReadAll</span><span style="color:#E1E4E8;">(resp.Body)</span></span>
<span class="line"><span style="color:#E1E4E8;">​      jsonErr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#B392F0;">Unmarshal</span><span style="color:#E1E4E8;">(body, result)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> jsonErr </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonErr</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nil</span></span>
<span class="line"><span style="color:#E1E4E8;">   }, </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(e error) error {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 断路器打开时的处理逻辑，本示例是直接返回错误提示</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Http errors！&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   })​</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result, err</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">GetGoodsComments</span><span style="color:#24292E;">(id string) (common.CommentListVO, error)  {</span></span>
<span class="line"><span style="color:#24292E;">   var result common.CommentListVO</span></span>
<span class="line"><span style="color:#24292E;">   serviceName </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Comments&quot;</span></span>
<span class="line"><span style="color:#24292E;">   err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> hystrix.</span><span style="color:#6F42C1;">Do</span><span style="color:#24292E;">(serviceName, </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">() error{</span></span>
<span class="line"><span style="color:#24292E;">      requestUrl </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> url.URL{</span></span>
<span class="line"><span style="color:#24292E;">         Scheme</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;8081&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         Path</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;/comments/detail&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">         RawQuery</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;id=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> id,</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">(requestUrl.</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil{</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      body, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ioutil.</span><span style="color:#6F42C1;">ReadAll</span><span style="color:#24292E;">(resp.Body)</span></span>
<span class="line"><span style="color:#24292E;">​      jsonErr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> json.</span><span style="color:#6F42C1;">Unmarshal</span><span style="color:#24292E;">(body, result)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> jsonErr </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonErr</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nil</span></span>
<span class="line"><span style="color:#24292E;">   }, </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(e error) error {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 断路器打开时的处理逻辑，本示例是直接返回错误提示</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> errors.</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Http errors！&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   })​</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result, nil</span></span>
<span class="line"><span style="color:#24292E;">   } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result, err</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>我们启动 Goods 服务和 Comments 服务，接着我们访问 Goods 的 /goods/detail 接口，查询固定商品的详情，Goods 服务会发起对 Comments 服务的远程调用。访问地址如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:12312/goods/detail/id=1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:12312/goods/detail/id=1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以获取到正确的响应，如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;detail&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Comments&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;Id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;CommentList&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">               {</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">&quot;Id&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">&quot;Desc&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;Comments&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">&quot;Score&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">&quot;ReplyId&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">               }</span></span>
<span class="line"><span style="color:#E1E4E8;">            ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;detail&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;Comments&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;Id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;CommentList&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">               {</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#032F62;">&quot;Id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#032F62;">&quot;Desc&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;Comments&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#032F62;">&quot;Score&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#032F62;">&quot;ReplyId&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;0&quot;</span></span>
<span class="line"><span style="color:#24292E;">               }</span></span>
<span class="line"><span style="color:#24292E;">            ]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>然后，我们关闭 Comments 服务模仿下游服务出现错误的场景，继续访问上述地址，得到的结果包含如下内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Get http://127.0.0.1:8081/comments/detail?id=1: dial tcp 127.0.0.1:8081: connect: connection refused&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Get http://127.0.0.1:8081/comments/detail?id=1: dial tcp 127.0.0.1:8081: connect: connection refused&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看到返回结果中直接把异常输出了，同时日志中也会输出上述的 connection refused 信息，这说明 hystrix.Do 中包装代码被执行，但是找不到下游服务实例，无法发起调用，返回了错误码。</p><p>接着，我们再多次访问上述地址，发现被包装的代码会被一直执行，并没有触发断路器打开逻辑。这是为什么呢？</p><p>原来 hystrix 的默认配置是访问请求数在 20 次以上才会触发断路器计算的逻辑，我们可以在程序启动时修改断路器最低启动阈值为 4 次，来验证断路器打开后效果，在 Goods 的 main 函数中添加 hystrix 的配置信息，如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()  {</span></span>
<span class="line"><span style="color:#E1E4E8;">  .....</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 设置断路器最低启动阈值为 4</span></span>
<span class="line"><span style="color:#E1E4E8;">  hystrix.</span><span style="color:#B392F0;">ConfigureCommand</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Comments&quot;</span><span style="color:#E1E4E8;">, hystrix.CommandConfig{</span></span>
<span class="line"><span style="color:#E1E4E8;">    RequestVolumeThreshold</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  })​</span></span>
<span class="line"><span style="color:#E1E4E8;">  .....</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()  {</span></span>
<span class="line"><span style="color:#24292E;">  .....</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置断路器最低启动阈值为 4</span></span>
<span class="line"><span style="color:#24292E;">  hystrix.</span><span style="color:#6F42C1;">ConfigureCommand</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Comments&quot;</span><span style="color:#24292E;">, hystrix.CommandConfig{</span></span>
<span class="line"><span style="color:#24292E;">    RequestVolumeThreshold</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  })​</span></span>
<span class="line"><span style="color:#24292E;">  .....</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>重新启动 Goods 服务，连续访问接口失败 4 次之后，继续访问将不会持续出现 connection refused 的错误日志，说明此时断路器已经打开，直接执行了失败回滚函数，返回异常结果。</p><p>如果 5 秒之后我们重新访问接口，将会发现请求重新执行了 hystrix.Do 中的远程调用代码，这是因为断路器打开之后的超时时间已经结束（默认为 5 秒钟），断路器进入了半开状态，允许程序重新执行远程调用，试探下游服务是否恢复可用状态，因为 Comments 服务处于一直不可用的状态，请求失败后，断路器又回到的打开状态。</p><h3 id="hystrix-原理" tabindex="-1">Hystrix 原理 <a class="header-anchor" href="#hystrix-原理" aria-label="Permalink to &quot;Hystrix 原理&quot;">​</a></h3><p>看完 Hystrix 使用的简单案例后，我们再来了解一下 Hystrix 断路器的相关原理，分析一下 Hystrix.Do 的关键实现。</p><p><img src="https://s0.lgstatic.com/i/image/M00/4F/EC/Ciqc1F9hodmASLFTAADzDRuBp1g798.png" alt="Drawing 4.png"><br> Hystrix 断路器原理示意图</p><p>从上述的流程图中，可以看到：</p><ul><li><p>Hystrix.Do 或 Go 函数执行时，都会调用 Hystrix.Doc 函数，然后交由对应的 HystrixCommand 处理。</p></li><li><p>HystrixCommand 会首先调用 allowRequest 函数判断当前是否处在熔断状态中，如果不是则直接放行，执行包装定义的代码逻辑；如果是的话，还要看是否到达预定熔断时长，如果熔断时长到了，也是放行，否则直接执行预先设定的错误逻辑。</p></li><li><p>HystrixCommand 执行结束前都会调用 markSuccess(duration) 或 markFailure(duration) 函数，统计一下在一定的 duration（时间间隔）内有多少调用是成功的，另有多少调用是失败的。</p></li><li><p>isOpen 函数会判断当前是否需要打开断路器，计算一下本个周期内的请求整体错误率，如果高于一个阈值，那么打开熔断，否则关闭。</p></li><li><p>Hystrix 会在内存中为每个 HystrixCommand 维护一个数组，其记录着每一个周期的请求结果的统计。该数组只能维护固定数量的周期数据，超过一定时间的周期数据会被删除掉，这样才能添加新的周期数据进入数组。</p></li></ul><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>在本课时，我为你讲述了 Hystrix 的使用和原理，作为开源的熔断组件，Hystrix 能在下游服务调用出现问题时，主动打开断路器，返回预先设置的默认值，防止服务雪崩现象，这为我们提供了开箱即用的服务自我保护能力。</p><p>那么除了使用 Hystrix 作为熔断组件外，你知道还有哪些组件或者中间件可以为服务提供熔断功能呢？欢迎你在评论区积极留言讨论。</p>`,48),e=[o];function r(t,c,E,i,y,u){return n(),a("div",null,e)}const b=s(l,[["render",r]]);export{d as __pageData,b as default};
