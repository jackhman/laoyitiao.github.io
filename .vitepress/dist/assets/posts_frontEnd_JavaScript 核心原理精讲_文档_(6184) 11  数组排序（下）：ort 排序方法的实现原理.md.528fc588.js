import{_ as a,j as p,o as l,g as o,k as t,h as e,Q as r,s}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"11数组排序（下）：ort排序方法的实现原理","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6184) 11  数组排序（下）：ort 排序方法的实现原理.md","filePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6184) 11  数组排序（下）：ort 排序方法的实现原理.md","lastUpdated":1696417798000}'),c={name:"posts/frontEnd/JavaScript 核心原理精讲_文档/(6184) 11  数组排序（下）：ort 排序方法的实现原理.md"},E=r(`<h1 id="_11数组排序-下-ort排序方法的实现原理" tabindex="-1">11数组排序（下）：ort排序方法的实现原理 <a class="header-anchor" href="#_11数组排序-下-ort排序方法的实现原理" aria-label="Permalink to &quot;11数组排序（下）：ort排序方法的实现原理&quot;">​</a></h1><p>我在上一讲为你介绍了用 JS 实现数组的各种排序，那么这一讲作为进阶，我要带你了解一下 JS 提供的数组排序的 sort 方法。数组排序在日常工作中经常会出现，除了上一讲介绍的排序算法外，通过 sort 方法也可以实现数组的排序，因此这一讲我会带你剖析 JS 数组 sort 方法的底层实现。</p><p>我们比较常用的是直接调用 JS 的 sort 方法，这一讲会围绕原生 JS 方法，并结合 V8 排序的代码一起来分析，以便你碰到类似的 JS 排序问题时能够轻松应对。</p><p>那么，在课程开始前请你先思考一下：</p><ol><li><p>sort 方法到底是用了哪种排序思路？</p></li><li><p>sort 方法里面的参数对比函数是什么意思？</p></li></ol><p>带着问题，我们开始说说 sort 方法的基本内容。</p><h3 id="sort-方法的基本使用" tabindex="-1">sort 方法的基本使用 <a class="header-anchor" href="#sort-方法的基本使用" aria-label="Permalink to &quot;sort 方法的基本使用&quot;">​</a></h3><p>sort 方法是对数组元素进行排序，默认排序顺序是先将元素转换为字符串，然后再进行排序，先来看一下它的语法：</p><blockquote><p>arr.sort([compareFunction])</p></blockquote><p>其中 compareFunction 用来指定按某种顺序进行排列的函数，如果省略不写，元素按照转换为字符串的各个字符的 Unicode 位点进行排序。我们来看一下代码。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">months</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;March&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Jan&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Feb&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Dec&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">months.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(months);</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;March&quot;]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">array1.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(array1);</span></span>
<span class="line"><span style="color:#6A737D;">// [1, 100000, 21, 30, 4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">months</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;March&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Jan&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Feb&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Dec&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">months.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(months);</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;March&quot;]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">array1.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(array1);</span></span>
<span class="line"><span style="color:#6A737D;">// [1, 100000, 21, 30, 4]</span></span></code></pre></div><p>从上面的执行结果可以看出，如果不加参数，在第二段代码中，21 会排到 4 的前面。这样按照从小到大的逻辑是行不通的，如果想要按照从小到大排序或者从大到小排序，那么上面的代码就需要调整为下面这样。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">array1.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> a);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(array1);    </span><span style="color:#6A737D;">// [100000, 30, 21, 4, 1]</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">array1.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(array1);    </span><span style="color:#6A737D;">// [1, 4, 21, 30, 100000]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">array1.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> a);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(array1);    </span><span style="color:#6A737D;">// [100000, 30, 21, 4, 1]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">array1.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(array1);    </span><span style="color:#6A737D;">// [1, 4, 21, 30, 100000]</span></span></code></pre></div><p>如果指明了 compareFunction 参数 ，那么数组会按照调用该函数的返回值排序，即 a 和 b 是两个将要被比较的元素：</p><ul><li><p>如果 compareFunction（a, b）小于 0，那么 a 会被排列到 b 之前；</p></li><li><p>如果 compareFunction（a, b）等于 0，a 和 b 的相对位置不变；</p></li><li><p>如果 compareFunction（a, b）大于 0，b 会被排列到 a 之前。</p></li></ul><p>说完 sort 方法的对比函数，下面我们来看一下 sort 的底层实现。</p><h3 id="sort-方法的底层实现" tabindex="-1">sort 方法的底层实现 <a class="header-anchor" href="#sort-方法的底层实现" aria-label="Permalink to &quot;sort 方法的底层实现&quot;">​</a></h3><p>相信你对 JS 数组的 sort 方法已经不陌生了，上面我也对它的用法进行了详细的介绍。那么它的内部是如何实现的呢？如果你能够进入它的内部看一看源码，理解背后的设计，这对编程思维的提升是一个很好的帮助。</p><p>sort 方法在 V8 内部相较于其他方法而言是一个比较难的算法，对于很多边界情况结合排序算法做了反复的优化，但是这里我不会直接拿源码来讲，而是会根据源码的思路，循序善诱地带你实现一个跟引擎性能类似的排序算法，并且一步步拆解其中的奥秘。</p><p>这里你需要回顾上一讲说的插入排序和快速排序，接下来我们就对 sort 源码进行分析。</p><h4 id="底层-sort-源码分析" tabindex="-1">底层 sort 源码分析 <a class="header-anchor" href="#底层-sort-源码分析" aria-label="Permalink to &quot;底层 sort 源码分析&quot;">​</a></h4><p>先大概来梳理一下源码中排序的思路（下面的源码均来自 V8 源码中关于 sort 排序的摘要，地址：<a href="https://github.com/v8/v8/blob/98d735069d0937f367852ed968a33210ceb527c2/src/js/array.js#L709" target="_blank" rel="noreferrer">V8 源码 sort 排序部分</a>）。</p><p>通过研究源码我们先直接看一下结论，如果要排序的元素个数是 n 的时候，那么就会有以下几种情况：</p><ol><li><p>当 n&lt;=10 时，采用插入排序；</p></li><li><p>当 n&gt;10 时，采用三路快速排序；</p></li><li><p>10&lt;n &lt;=1000，采用中位数作为哨兵元素；</p></li><li><p>n&gt;1000，每隔 200~215 个元素挑出一个元素，放到一个新数组中，然后对它排序，找到中间位置的数，以此作为中位数。</p></li></ol><p>在得出这个结论之前，我觉得有必要让你了解为什么这么做。下面就一起来思考两个问题。</p><p><strong>1. 为什么元素个数少的时候要采用插入排序？</strong></p><p>虽然插入排序理论上是平均时间复杂度为 O(n^2) 的算法，快速排序是一个平均 O(nlogn) 级别的算法。但是别忘了，这只是理论上平均的时间复杂度估算，但是它们也有最好的时间复杂度情况，而插入排序在最好的情况下时间复杂度是 O(n)。</p><p>在实际情况中两者的算法复杂度前面都会有一个系数，当 n 足够小的时候，快速排序 nlogn 的优势会越来越小。倘若插入排序的 n 足够小，那么就会超过快排。而事实上正是如此，插入排序经过优化以后，对于小数据集的排序会有非常优越的性能，很多时候甚至会超过快排。因此，对于很小的数据量，应用插入排序是一个非常不错的选择。</p><p><strong>2. 为什么要花这么大的力气选择哨兵元素？</strong></p><p>因为快速排序的性能瓶颈在于递归的深度，最坏的情况是每次的哨兵都是最小元素或者最大元素，那么进行 partition（一边是小于哨兵的元素，另一边是大于哨兵的元素）时，就会有一边是空的。如果这么排下去，递归的层数就达到了 n , 而每一层的复杂度是 O(n)，因此快排这时候会退化成 O(n^2) 级别。</p><p>这种情况是要尽力避免的，那么如何来避免？就是让哨兵元素尽可能地处于数组的中间位置，让最大或者最小的情况尽可能少。这时候，你就能理解 V8 里面所做的各种优化了。</p><p>接下来，我们看一下官方实现的 sort 排序算法的代码基本结构。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArraySort</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">comparefn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#B392F0;">CHECK_OBJECT_COERCIBLE</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;Array.prototype.sort&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TO_OBJECT</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TO_LENGTH</span><span style="color:#E1E4E8;">(array.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InnerArraySort</span><span style="color:#E1E4E8;">(array, length, comparefn);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InnerArraySort</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">length</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">comparefn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 比较函数未传入</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">IS_CALLABLE</span><span style="color:#E1E4E8;">(comparefn)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#B392F0;">comparefn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> y) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">%</span><span style="color:#B392F0;">_IsSmi</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#B392F0;">_IsSmi</span><span style="color:#E1E4E8;">(y)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#B392F0;">SmiLexicographicCompare</span><span style="color:#E1E4E8;">(x, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TO_STRING</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">	      y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TO_STRING</span><span style="color:#E1E4E8;">(y);</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> y) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 };</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InsertionSort</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 插入排序</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> to; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> from; j</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">comparefn</span><span style="color:#E1E4E8;">(tmp, element);</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (order </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	          a[j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	    a[j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetThirdIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">) {   </span><span style="color:#6A737D;">// 元素个数大于1000时寻找哨兵元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t_array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalArray</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> increment </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((to </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> from) </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	from </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	to </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> from; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> to; i </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> increment) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	   t_array[j] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [i, a[i]];</span></span>
<span class="line"><span style="color:#E1E4E8;">	   j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	t_array.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">comparefn</span><span style="color:#E1E4E8;">(a[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], b[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">	});</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> third_index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t_array[t_array.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> third_index;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QuickSort</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">) {  </span><span style="color:#6A737D;">// 快速排序实现</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//哨兵位置</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> third_index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (to </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#B392F0;">InsertionSort</span><span style="color:#E1E4E8;">(a, from, to); </span><span style="color:#6A737D;">// 数据量小，使用插入排序，速度较快</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (to </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        third_index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetThirdIndex</span><span style="color:#E1E4E8;">(a, from, to);</span></span>
<span class="line"><span style="color:#E1E4E8;">	      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 小于1000 直接取中点</span></span>
<span class="line"><span style="color:#E1E4E8;">	        third_index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((to </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> from) </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 下面开始快排</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> v0 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[from];</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> v1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[to </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> v2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[third_index];</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c01 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">comparefn</span><span style="color:#E1E4E8;">(v0, v1);</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (c01 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v0;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        v0 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v1;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        v1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c02 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">comparefn</span><span style="color:#E1E4E8;">(v0, v2);</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (c02 </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v0;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        v0 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v2;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        v2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v1;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        v1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c12 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">comparefn</span><span style="color:#E1E4E8;">(v1, v2);</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (c12 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v1;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          v1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v2;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          v2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      a[from] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v0;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      a[to </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v2;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> pivot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v1;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> low_end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> from </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> high_start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> to </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      a[third_index] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[low_end];</span></span>
<span class="line"><span style="color:#E1E4E8;">	      a[low_end] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pivot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> low_end </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> high_start; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">comparefn</span><span style="color:#E1E4E8;">(element, pivot);</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (order </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	          a[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[low_end];</span></span>
<span class="line"><span style="color:#E1E4E8;">	          a[low_end] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          low_end</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (order </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            high_start</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (high_start </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> i) </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	            </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> top_elem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[high_start];</span></span>
<span class="line"><span style="color:#E1E4E8;">	            order </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">comparefn</span><span style="color:#E1E4E8;">(top_elem, pivot);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          } </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (order </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	          a[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[high_start];</span></span>
<span class="line"><span style="color:#E1E4E8;">	          a[high_start] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (order </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	            element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">	            a[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a[low_end];</span></span>
<span class="line"><span style="color:#E1E4E8;">	            a[low_end] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element;</span></span>
<span class="line"><span style="color:#E1E4E8;">	            low_end</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	          }</span></span>
<span class="line"><span style="color:#E1E4E8;">	        }</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 快排的核心思路，递归调用快速排序方法</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (to </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> high_start </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> low_end </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> from) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#B392F0;">QuickSort</span><span style="color:#E1E4E8;">(a, high_start, to);</span></span>
<span class="line"><span style="color:#E1E4E8;">	        to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> low_end;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	        </span><span style="color:#B392F0;">QuickSort</span><span style="color:#E1E4E8;">(a, from, low_end);</span></span>
<span class="line"><span style="color:#E1E4E8;">	        from </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> high_start;</span></span>
<span class="line"><span style="color:#E1E4E8;">	      }</span></span>
<span class="line"><span style="color:#E1E4E8;">	  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArraySort</span><span style="color:#24292E;">(</span><span style="color:#E36209;">comparefn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6F42C1;">CHECK_OBJECT_COERCIBLE</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Array.prototype.sort&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> array </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TO_OBJECT</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TO_LENGTH</span><span style="color:#24292E;">(array.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InnerArraySort</span><span style="color:#24292E;">(array, length, comparefn);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InnerArraySort</span><span style="color:#24292E;">(</span><span style="color:#E36209;">array</span><span style="color:#24292E;">, </span><span style="color:#E36209;">length</span><span style="color:#24292E;">, </span><span style="color:#E36209;">comparefn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 比较函数未传入</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">IS_CALLABLE</span><span style="color:#24292E;">(comparefn)) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#6F42C1;">comparefn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> y) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">%</span><span style="color:#6F42C1;">_IsSmi</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#6F42C1;">_IsSmi</span><span style="color:#24292E;">(y)) {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#6F42C1;">SmiLexicographicCompare</span><span style="color:#24292E;">(x, y);</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	      x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TO_STRING</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">	      y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TO_STRING</span><span style="color:#24292E;">(y);</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> y) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	 };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InsertionSort</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">to</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 插入排序</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> to; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[i];</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> from; j</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[j];</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">comparefn</span><span style="color:#24292E;">(tmp, element);</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (order </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	          a[j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#24292E;">	        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	        }</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	    a[j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element;</span></span>
<span class="line"><span style="color:#24292E;">	 }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetThirdIndex</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">to</span><span style="color:#24292E;">) {   </span><span style="color:#6A737D;">// 元素个数大于1000时寻找哨兵元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t_array </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalArray</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> increment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((to </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> from) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	from </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	to </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> to; i </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> increment) {</span></span>
<span class="line"><span style="color:#24292E;">	   t_array[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [i, a[i]];</span></span>
<span class="line"><span style="color:#24292E;">	   j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	t_array.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">comparefn</span><span style="color:#24292E;">(a[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], b[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> third_index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t_array[t_array.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> third_index;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QuickSort</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">to</span><span style="color:#24292E;">) {  </span><span style="color:#6A737D;">// 快速排序实现</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//哨兵位置</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> third_index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (to </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#6F42C1;">InsertionSort</span><span style="color:#24292E;">(a, from, to); </span><span style="color:#6A737D;">// 数据量小，使用插入排序，速度较快</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (to </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	        third_index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetThirdIndex</span><span style="color:#24292E;">(a, from, to);</span></span>
<span class="line"><span style="color:#24292E;">	      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 小于1000 直接取中点</span></span>
<span class="line"><span style="color:#24292E;">	        third_index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((to </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> from) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 下面开始快排</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> v0 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[from];</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> v1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[to </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> v2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[third_index];</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c01 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">comparefn</span><span style="color:#24292E;">(v0, v1);</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (c01 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v0;</span></span>
<span class="line"><span style="color:#24292E;">	        v0 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#24292E;">	        v1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c02 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">comparefn</span><span style="color:#24292E;">(v0, v2);</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (c02 </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v0;</span></span>
<span class="line"><span style="color:#24292E;">	        v0 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v2;</span></span>
<span class="line"><span style="color:#24292E;">	        v2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#24292E;">	        v1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#24292E;">	      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c12 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">comparefn</span><span style="color:#24292E;">(v1, v2);</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (c12 </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#24292E;">	          v1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v2;</span></span>
<span class="line"><span style="color:#24292E;">	          v2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#24292E;">	        }</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	      a[from] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v0;</span></span>
<span class="line"><span style="color:#24292E;">	      a[to </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v2;</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> pivot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> low_end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> from </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> high_start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	      a[third_index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[low_end];</span></span>
<span class="line"><span style="color:#24292E;">	      a[low_end] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pivot;</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> low_end </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> high_start; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[i];</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">comparefn</span><span style="color:#24292E;">(element, pivot);</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (order </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	          a[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[low_end];</span></span>
<span class="line"><span style="color:#24292E;">	          a[low_end] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element;</span></span>
<span class="line"><span style="color:#24292E;">	          low_end</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (order </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	            high_start</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (high_start </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> i) </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	            </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> top_elem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[high_start];</span></span>
<span class="line"><span style="color:#24292E;">	            order </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">comparefn</span><span style="color:#24292E;">(top_elem, pivot);</span></span>
<span class="line"><span style="color:#24292E;">	          } </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (order </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	          a[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[high_start];</span></span>
<span class="line"><span style="color:#24292E;">	          a[high_start] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element;</span></span>
<span class="line"><span style="color:#24292E;">	          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (order </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	            element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[i];</span></span>
<span class="line"><span style="color:#24292E;">	            a[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a[low_end];</span></span>
<span class="line"><span style="color:#24292E;">	            a[low_end] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element;</span></span>
<span class="line"><span style="color:#24292E;">	            low_end</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	          }</span></span>
<span class="line"><span style="color:#24292E;">	        }</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 快排的核心思路，递归调用快速排序方法</span></span>
<span class="line"><span style="color:#24292E;">	      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (to </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> high_start </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> low_end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> from) {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#6F42C1;">QuickSort</span><span style="color:#24292E;">(a, high_start, to);</span></span>
<span class="line"><span style="color:#24292E;">	        to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> low_end;</span></span>
<span class="line"><span style="color:#24292E;">	      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	        </span><span style="color:#6F42C1;">QuickSort</span><span style="color:#24292E;">(a, from, low_end);</span></span>
<span class="line"><span style="color:#24292E;">	        from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> high_start;</span></span>
<span class="line"><span style="color:#24292E;">	      }</span></span>
<span class="line"><span style="color:#24292E;">	  }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>从上面的源码分析来看，当数据量小于 10 的时候用插入排序；当数据量大于 10 之后采用三路快排；当数据量为 10~1000 时候直接采用中位数为哨兵元素；当数据量大于 1000 的时候就开始寻找哨兵元素。</p><p>我们直接从上面的源码中就可以看到整个 sort 源码的编写逻辑，也就是上面总结分析的逻辑对应实现。如果你还是没有理解得很好，我建议你再重新看一下插入排序和快速排序的核心逻辑。其实关键点在于根据数据量的大小，从而确定用什么排序来解决；时间复杂度是根据数据量的大小，从而进行变化的，这一点需要深入理解。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>那么关于 sort 排序方法我就介绍到这里了。这一讲，我把 JS 中的 sort 方法详细讲解了一遍，同时又带你剖析了 sort 方法中内部的原理实现，你需要好好学习排序相关的算法，才能真正理解 V8 源码中实现的排序逻辑。</p><p>此外，关于排序时间复杂度也不用死记硬背，在不同的数据量情况下，不代表某种排序一定就要比另外一种排序速度快，这点你要牢记，然后根据不同的场景进行不同的分析。</p><p>那么讲到这里，我们再来整理一下快速排序和插入排序的最好以及最快情况下的时间复杂度的对比，请看下面的表格。</p><p>|</p>`,40),y=s("p",null,"将这两个排序的时间复杂度对比来看，如果当 n 足够小的时候，最好的情况下，插入排序的时间复杂度为 O(n) 要优于快速排序的 O(nlogn)，因此就解释了这里当 V8 实现 JS 数组排序算法时，数据量较小的时候会采用插入排序的原因了。",-1),i=s("p",null,"在日常的前端开发工作中，对此的应用会比较多，研究源码的机会也是相对较少的。通过本讲的学习，我还是希望你能够多想想日常工作中经常用到的 JS 方法，及其底层源代码的实现逻辑，从而整体提升 JS 的编程能力和理解能力。",-1),F=s("p",null,"这一讲我只是带你剖析了 sort 的源码实现，下一讲我会带你手写 JS 数组多个方法的底层实现。",-1),A=s("p",null,"另外在后面的课程中，类似这样的源码剖析还会有很多，在看每一个部分的同时，希望你能多练习、多研究，也欢迎你在下方留言发表自己在学习过程中遇到的困惑以及学习感悟等，让我们共同进步。",-1);function D(C,d,m,_,v,h){const n=p("Image");return l(),o("div",null,[E,t(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/04/2B/Cgp9HWAib-6AdHI6AADCTvUUDdI454.png"}),e(),y,i,F,A])}const g=a(c,[["render",D]]);export{B as __pageData,g as default};
