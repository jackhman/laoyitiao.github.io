import{_ as o,j as e,o as t,g as c,k as l,h as s,s as n,Q as p}from"./chunks/framework.a0d18f64.js";const C=JSON.parse('{"title":"18路由引擎：如何实现数据访问的分片路由和广播路由？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3577) 18  路由引擎：如何实现数据访问的分片路由和广播路由？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3577) 18  路由引擎：如何实现数据访问的分片路由和广播路由？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3577) 18  路由引擎：如何实现数据访问的分片路由和广播路由？.md"},E=n("h1",{id:"_18路由引擎-如何实现数据访问的分片路由和广播路由",tabindex:"-1"},[s("18路由引擎：如何实现数据访问的分片路由和广播路由？ "),n("a",{class:"header-anchor",href:"#_18路由引擎-如何实现数据访问的分片路由和广播路由","aria-label":'Permalink to "18路由引擎：如何实现数据访问的分片路由和广播路由？"'},"​")],-1),y=n("p",null,"在上一课时中，我们看到起到承上启下作用的 ShardingRouter 会调用 RoutingEngine 获取路由结果，而在 ShardingSphere 中存在多种不同类型的 RoutingEngine，分别针对不同的应用场景。",-1),i=n("p",null,[s("我们可以按照"),n("strong",null,"是否携带分片键信息"),s("将这些路由方式分成两大类，即分片路由和广播路由，而这两类路由中又存在一些常见的 RoutingEngine 实现类型，如下图所示：")],-1),g=p(`<p>我们无意对所有这些 RoutingEngine 进行详细 的 展开，但在接下来的内容中，我们会分别对分片路由和广播路由中具有代表性的 RoutingEngine 进行讨论。</p><h3 id="分片路由" tabindex="-1">分片路由 <a class="header-anchor" href="#分片路由" aria-label="Permalink to &quot;分片路由&quot;">​</a></h3><p>对于分片路由而言，我们将重点介绍<strong>标准路由</strong>，标准路由是 ShardingSphere 推荐使用的分片方式。</p><p>在使用过程中，我们需要首先考虑标准路由的适用范围。标准路由适用范围有两大场景：一种面向不包含关联查询的 SQL；另一种则适用于仅包含绑定表关联查询的 SQL。前面一种场景比较好理解，而针对后者，我们就需要引入绑定表这个 ShardingSphere 中的重要概念。</p><p>关于绑定表，我们已经在 <a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=&amp;courseId=257&amp;lagoufrom=noapp" target="_blank" rel="noreferrer">《06 | 数据分片：如何实现分库、分表、分库+分表以及强制路由（上）？》</a>中进行了讨论，在明确了这些概念之后，我们来看标准路由的具体实现过程。</p><h4 id="_1-standardroutingengine-的创建过程" tabindex="-1">1.StandardRoutingEngine 的创建过程 <a class="header-anchor" href="#_1-standardroutingengine-的创建过程" aria-label="Permalink to &quot;1.StandardRoutingEngine 的创建过程&quot;">​</a></h4><p>明确了标准路由的基本含义之后，我们回顾一下上一课时中介绍的工厂类 RoutingEngineFactory。RoutingEngineFactory 类根据上下文中的路由信息构建对应的 RoutingEngine，但在其 newInstance 方法中，我们并没有发现直接创建StandardRoutingEngine 的代码。事实上，StandardRoutingEngine 的创建是在 newInstance 方法中的最后一个代码分支，即当所有前置的判断都不成立时会进入到最后的 getShardingRoutingEngine 代码分支中，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> RoutingEngine </span><span style="color:#B392F0;">getShardingRoutingEngine</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule shardingRule, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatementContext sqlStatementContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingConditions shardingConditions, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> tableNames) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//根据分片规则获取分片表 </span></span>
<span class="line"><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; shardingTableNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">getShardingLogicTableNames</span><span style="color:#E1E4E8;">(tableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//如果目标表只要一张，或者说目标表都是绑定表关系，则构建StandardRoutingEngine </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> shardingTableNames.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">isAllBindingTables</span><span style="color:#E1E4E8;">(shardingTableNames)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StandardRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, shardingTableNames.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(), sqlStatementContext, shardingConditions); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//否则构建ComplexRoutingEngine </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ComplexRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, tableNames, sqlStatementContext, shardingConditions); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> RoutingEngine </span><span style="color:#6F42C1;">getShardingRoutingEngine</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule shardingRule, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatementContext sqlStatementContext,</span></span>
<span class="line"><span style="color:#24292E;">                                                      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingConditions shardingConditions, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> tableNames) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//根据分片规则获取分片表 </span></span>
<span class="line"><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; shardingTableNames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">getShardingLogicTableNames</span><span style="color:#24292E;">(tableNames); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//如果目标表只要一张，或者说目标表都是绑定表关系，则构建StandardRoutingEngine </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> shardingTableNames.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">isAllBindingTables</span><span style="color:#24292E;">(shardingTableNames)) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StandardRoutingEngine</span><span style="color:#24292E;">(shardingRule, shardingTableNames.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(), sqlStatementContext, shardingConditions); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//否则构建ComplexRoutingEngine </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ComplexRoutingEngine</span><span style="color:#24292E;">(shardingRule, tableNames, sqlStatementContext, shardingConditions); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码首先根据解析出来的逻辑表获取分片表，以如下所示的 SQL 语句为例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SELECT record.remark_name FROM health_record record JOIN health_task task ON record.record_id=task.record_id WHERE record.record_id = 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SELECT record.remark_name FROM health_record record JOIN health_task task ON record.record_id=task.record_id WHERE record.record_id = 1</span></span></code></pre></div><p>那么 shardingTableNames 应该为 health_record 和 health_task。如果分片操作只涉及一张表，或者涉及多张表，但这些表是互为绑定表的关系时，则使用 StandardRoutingEngine 进行路由。</p><p>基于绑定表的概念，当多表互为绑定表关系时，每张表的路由结果是相同的，所以只要计算第一张表的分片即可；反之，如果不满足这一条件，则构建一个 ComplexRoutingEngine 进行路由。</p><p>这里我们来看一下代码中的 isAllBindingTables 方法如何对多表互为绑定表关系进行判定，该方法位于 ShardingRule 中，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isAllBindingTables</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> logicTableNames) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logicTableNames.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//通过传入的logicTableNames构建一个专门的BindingTableRule </span></span>
<span class="line"><span style="color:#E1E4E8;">    Optional&lt;</span><span style="color:#F97583;">BindingTableRule</span><span style="color:#E1E4E8;">&gt; bindingTableRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findBindingTableRule</span><span style="color:#E1E4E8;">(logicTableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">bindingTableRule.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//获取BindingTableRule中的LogicTable </span></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(bindingTableRule.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getAllLogicTables</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//判断获取的LogicTable是否与传入的logicTableNames一致 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">containsAll</span><span style="color:#E1E4E8;">(logicTableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isAllBindingTables</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> logicTableNames) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logicTableNames.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//通过传入的logicTableNames构建一个专门的BindingTableRule </span></span>
<span class="line"><span style="color:#24292E;">    Optional&lt;</span><span style="color:#D73A49;">BindingTableRule</span><span style="color:#24292E;">&gt; bindingTableRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findBindingTableRule</span><span style="color:#24292E;">(logicTableNames); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">bindingTableRule.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeSet&lt;&gt;(String.CASE_INSENSITIVE_ORDER); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取BindingTableRule中的LogicTable </span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(bindingTableRule.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAllLogicTables</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//判断获取的LogicTable是否与传入的logicTableNames一致 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">containsAll</span><span style="color:#24292E;">(logicTableNames); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码会通过传入的 logicTableNames 构建一个专门的 BindingTableRule，然后看最终获取的 BindingTableRule 中的 LogicTable 是否与传入的 logicTableNames 一致。这里构建 BindingTableRule 的过程实际上是根据传入的 logicTableName 来从 ShardingRule 中自身保存的 Collection<code>&lt;BindingTableRule&gt;</code> 获取对应的 BindingTableRule，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Optional</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">BindingTableRule</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findBindingTableRule</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicTableName) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (BindingTableRule each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> bindingTableRules) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (each.</span><span style="color:#B392F0;">hasLogicTable</span><span style="color:#E1E4E8;">(logicTableName)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(each); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">absent</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Optional</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">BindingTableRule</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findBindingTableRule</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicTableName) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (BindingTableRule each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> bindingTableRules) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (each.</span><span style="color:#6F42C1;">hasLogicTable</span><span style="color:#24292E;">(logicTableName)) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(each); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">absent</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码的 bindingTableRules 就是 ShardingRule 中自身保存的 BindingTableRule 集合，我们在 ShardingRule 构造函数中发现了初始化 bindingTableRules 的代码，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">bindingTableRules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBindingTableRules</span><span style="color:#E1E4E8;">(shardingRuleConfig.</span><span style="color:#B392F0;">getBindingTableGroups</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bindingTableRules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBindingTableRules</span><span style="color:#24292E;">(shardingRuleConfig.</span><span style="color:#6F42C1;">getBindingTableGroups</span><span style="color:#24292E;">());</span></span></code></pre></div><p>显然，这个构建过程与规则配置机制有关。如果基于 Yaml 配置文件，绑定表的配置一般会采用如下形式：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">shardingRule:</span></span>
<span class="line"><span style="color:#E1E4E8;">  bindingTables: </span></span>
<span class="line"><span style="color:#E1E4E8;">     health_record,health_task</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">shardingRule:</span></span>
<span class="line"><span style="color:#24292E;">  bindingTables: </span></span>
<span class="line"><span style="color:#24292E;">     health_record,health_task</span></span></code></pre></div><p>针对这种配置形式，ShardingRule 会对其进行解析并生成 BindingTableRule 对象，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> BindingTableRule </span><span style="color:#B392F0;">createBindingTableRule</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String bindingTableGroup) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">TableRule</span><span style="color:#E1E4E8;">&gt; tableRules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Splitter.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">trimResults</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">splitToList</span><span style="color:#E1E4E8;">(bindingTableGroup)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        tableRules.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTableRule</span><span style="color:#E1E4E8;">(each)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BindingTableRule</span><span style="color:#E1E4E8;">(tableRules); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BindingTableRule </span><span style="color:#6F42C1;">createBindingTableRule</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String bindingTableGroup) { </span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">TableRule</span><span style="color:#24292E;">&gt; tableRules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Splitter.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">trimResults</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">splitToList</span><span style="color:#24292E;">(bindingTableGroup)) { </span></span>
<span class="line"><span style="color:#24292E;">        tableRules.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTableRule</span><span style="color:#24292E;">(each)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingTableRule</span><span style="color:#24292E;">(tableRules); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，我们终于把绑定表相关的概念以及实现方式做了介绍，也就是说完成了 RoutingEngineFactory 中进入到 StandardRoutingEngine 这条代码分支的介绍。</p><h4 id="_2-standardroutingengine-的运行机制" tabindex="-1">2.StandardRoutingEngine 的运行机制 <a class="header-anchor" href="#_2-standardroutingengine-的运行机制" aria-label="Permalink to &quot;2.StandardRoutingEngine 的运行机制&quot;">​</a></h4><p>现在，我们已经创建了 StandardRoutingEngine，接下来就看它的运行机制。作为一种具体的路由引擎实现方案，StandardRoutingEngine 实现了 RoutingEngine 接口，它的 route 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RoutingResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">	    ... </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateRoutingResult</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getDataNodes</span><span style="color:#E1E4E8;">(shardingRule.</span><span style="color:#B392F0;">getTableRule</span><span style="color:#E1E4E8;">(logicTableName))); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RoutingResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">	    ... </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateRoutingResult</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getDataNodes</span><span style="color:#24292E;">(shardingRule.</span><span style="color:#6F42C1;">getTableRule</span><span style="color:#24292E;">(logicTableName))); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的核心方法就是 generateRoutingResult，在此之前需要先通过 getDataNodes 方法来获取数据节点信息，该方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">DataNode</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDataNodes</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TableRule tableRule) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//如基于Hint进行路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isRoutingByHint</span><span style="color:#E1E4E8;">(tableRule)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">routeByHint</span><span style="color:#E1E4E8;">(tableRule); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//基于分片条件进行路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isRoutingByShardingConditions</span><span style="color:#E1E4E8;">(tableRule)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">routeByShardingConditions</span><span style="color:#E1E4E8;">(tableRule); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//执行混合路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">routeByMixedConditions</span><span style="color:#E1E4E8;">(tableRule); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">DataNode</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDataNodes</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TableRule tableRule) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//如基于Hint进行路由 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isRoutingByHint</span><span style="color:#24292E;">(tableRule)) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">routeByHint</span><span style="color:#24292E;">(tableRule); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//基于分片条件进行路由 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isRoutingByShardingConditions</span><span style="color:#24292E;">(tableRule)) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">routeByShardingConditions</span><span style="color:#24292E;">(tableRule); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//执行混合路由 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">routeByMixedConditions</span><span style="color:#24292E;">(tableRule); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到这个方法的入参是一个 TableRule 对象，而 TableRule 属于分片规则 ShardingRule 中的一部分。我们在上一课时中知道该对象主要保存着与分片相关的各种规则信息，其中就包括 ShardingStrategy。从命名上看，ShardingStrategy 属于一种分片策略，用于指定分片的具体 Column，以及执行分片并返回目标 DataSource 和 Table。</p><p>这部分内容我们会在下一课时中进行展开。这里，我们先梳理与 ShardingStrategy 相关的类结构，如下所示：</p>`,30),u=p(`<p>在 StandardRoutingEngine 中，整体结构也与上图类似。在 StandardRoutingEngine 中，前面所介绍的 getDataNodes 方法的第一个判断分支 isRoutingByHint 方法中会判断是否根据 Hint 来进行路由，其判断依据是它的 DatabaseShardingStrategy 和 TableShardingStrategy 是否都为 HintShardingStrategy，这个方法就用到了 ShardingRule 的这两个ShardingStrategy 对象，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isRoutingByHint</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TableRule tableRule) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">getDatabaseShardingStrategy</span><span style="color:#E1E4E8;">(tableRule) </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> HintShardingStrategy </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">getTableShardingStrategy</span><span style="color:#E1E4E8;">(tableRule) </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> HintShardingStrategy; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isRoutingByHint</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TableRule tableRule) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">getDatabaseShardingStrategy</span><span style="color:#24292E;">(tableRule) </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> HintShardingStrategy </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">getTableShardingStrategy</span><span style="color:#24292E;">(tableRule) </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> HintShardingStrategy; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 ShardingSphere 中，Hint 代表的是一种强制路由的方法，是一条流程的支线。然后，我们再看 getDataNodes 方法中的 isRoutingByShardingConditions 判断。想要判断是否根据分片条件进行路由，其逻辑在于 DatabaseShardingStrategy 和 TableShardingStrategy 都不是 HintShardingStrategy 时就走这个代码分支。而最终如果 isRoutingByHint 和 isRoutingByShardingConditions 都不满足，也就是说，DatabaseShardingStrategy 或 TableShardingStrategy 中任意一个是 HintShardingStrategy，则执行 routeByMixedConditions 这一混合的路由方式。</p><p>以上三条代码分支虽然处理方式有所不同，但<strong>本质上都是获取 RouteValue 的集合</strong>，我们在上一课时中介绍路由条件 ShardingCondition 时知道，RouteValue 保存的就是用于路由的表名和列名。在获取了所需的 RouteValue 之后，在 StandardRoutingEngine 中，以上三种场景最终都会调用 route0 基础方法进行路由，该方法的作用就是根据这些 RouteValue 得出目标 DataNode 的集合。同样，我们也知道 DataNode 中保存的就是具体的目标节点，包括 dataSourceName和tableName。route0 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">DataNode</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route0</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> TableRule tableRule, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">RouteValue</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> databaseShardingValues, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">RouteValue</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> tableShardingValues) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//路由DataSource </span></span>
<span class="line"><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; routedDataSources </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">routeDataSources</span><span style="color:#E1E4E8;">(tableRule, databaseShardingValues); </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">DataNode</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//路由Table，并完成DataNode集合的拼装 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> routedDataSources) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">routeTables</span><span style="color:#E1E4E8;">(tableRule, each, tableShardingValues)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">DataNode</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route0</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> TableRule tableRule, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">RouteValue</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> databaseShardingValues, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">RouteValue</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> tableShardingValues) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//路由DataSource </span></span>
<span class="line"><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; routedDataSources </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">routeDataSources</span><span style="color:#24292E;">(tableRule, databaseShardingValues); </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">DataNode</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//路由Table，并完成DataNode集合的拼装 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> routedDataSources) { </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">routeTables</span><span style="color:#24292E;">(tableRule, each, tableShardingValues)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，该方法首先路由 DataSource，然后再根据每个 DataSource 路由 Table，最终完成 DataNode 集合的拼装。在上述 routeDataSources 和 routeTables 方法中，最终都会分别依赖 DatabaseShardingStrategy 和 TableShardingStrategy 完成背后的路由计算以获取目标 DataSource 以及 Table。</p><p>当获取了 DataNode 集合之后，我们回到 StandardRoutingEngine 的 generateRoutingResult 方法，该方法用于组装路由结果并返回一个 RoutingResult：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RoutingResult </span><span style="color:#B392F0;">generateRoutingResult</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">DataNode</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> routedDataNodes) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    RoutingResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingResult</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (DataNode each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> routedDataNodes) { </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//根据每个DataNode构建一个RoutingUnit对象 </span></span>
<span class="line"><span style="color:#E1E4E8;">        RoutingUnit routingUnit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingUnit</span><span style="color:#E1E4E8;">(each.</span><span style="color:#B392F0;">getDataSourceName</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//填充RoutingUnit中的TableUnit </span></span>
<span class="line"><span style="color:#E1E4E8;">        routingUnit.</span><span style="color:#B392F0;">getTableUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableUnit</span><span style="color:#E1E4E8;">(logicTableName, each.</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">getRoutingUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(routingUnit); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RoutingResult </span><span style="color:#6F42C1;">generateRoutingResult</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">DataNode</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> routedDataNodes) { </span></span>
<span class="line"><span style="color:#24292E;">    RoutingResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingResult</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (DataNode each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> routedDataNodes) { </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">//根据每个DataNode构建一个RoutingUnit对象 </span></span>
<span class="line"><span style="color:#24292E;">        RoutingUnit routingUnit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingUnit</span><span style="color:#24292E;">(each.</span><span style="color:#6F42C1;">getDataSourceName</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//填充RoutingUnit中的TableUnit </span></span>
<span class="line"><span style="color:#24292E;">        routingUnit.</span><span style="color:#6F42C1;">getTableUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableUnit</span><span style="color:#24292E;">(logicTableName, each.</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">getRoutingUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(routingUnit); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这部分代码的作用就是根据每个 DataNode 构建一个 RoutingUnit 对象，然后再填充 RoutingUnit 中的 TableUnit。关于 RoutingUnit 和 TableUnit 的数据结构我们在上一课时中已经进行了介绍，这里不再展开。</p><p>至此，对标准路由引擎 StandardRoutingEngine 的介绍就告一段落，标准路由是 ShardingSphere 最为推荐使用的分片方式，在日常开发中应用也最广泛。</p><h3 id="广播路由" tabindex="-1">广播路由 <a class="header-anchor" href="#广播路由" aria-label="Permalink to &quot;广播路由&quot;">​</a></h3><p>对于不携带分片键的 SQL，路由引擎会采取广播路由的方式。在 ShardingSphere，根据输入 SQL 的类型，存在很多种用于广播的路由引擎，我们同样可以回顾 RoutingEngineFactory 中创建 RoutingEngine的 方法。</p><p>首先，如果输入的是 TCLStatement，即授权、角色控制等数据库控制语言，那么直接执行 DatabaseBroadcastRoutingEngine；同样，如果执行的是用于数据定义的 DDLStatement，则执行 TableBroadcastRoutingEngine 中的路由方法，判断条件如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//全库路由 </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> TCLStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DatabaseBroadcastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">//全库表路由 </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> DDLStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableBroadcastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, metaData.</span><span style="color:#B392F0;">getTables</span><span style="color:#E1E4E8;">(), sqlStatementContext); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//全库路由 </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> TCLStatement) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseBroadcastRoutingEngine</span><span style="color:#24292E;">(shardingRule); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">//全库表路由 </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> DDLStatement) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableBroadcastRoutingEngine</span><span style="color:#24292E;">(shardingRule, metaData.</span><span style="color:#6F42C1;">getTables</span><span style="color:#24292E;">(), sqlStatementContext); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>DatabaseBroadcastRoutingEngine 的路由方法非常直接，即基于每个 DataSourceName 构建一个 RoutingUnit，然后再拼装成 RoutingResult，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DatabaseBroadcastRoutingEngine</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingEngine</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule shardingRule; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RoutingResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        RoutingResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingResult</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">getShardingDataSourceNames</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDataSourceNames</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//基于每个DataSourceName构建一个RoutingUnit </span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">getRoutingUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingUnit</span><span style="color:#E1E4E8;">(each)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseBroadcastRoutingEngine</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingEngine</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule shardingRule; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RoutingResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        RoutingResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingResult</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">getShardingDataSourceNames</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getDataSourceNames</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//基于每个DataSourceName构建一个RoutingUnit </span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">getRoutingUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingUnit</span><span style="color:#24292E;">(each)); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同样也可以想象 TableBroadcastRoutingEngine 的实现过程，我们根据 logicTableName 获取对应的 TableRule，然后根据 TableRule 中的真实 DataNode 构建 RoutingUnit 对象，这一过程如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">RoutingUnit</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAllRoutingUnits</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String logicTableName) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">RoutingUnit</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//根据logicTableName获取对应的TableRule </span></span>
<span class="line"><span style="color:#E1E4E8;">    TableRule tableRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">getTableRule</span><span style="color:#E1E4E8;">(logicTableName); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (DataNode each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> tableRule.</span><span style="color:#B392F0;">getActualDataNodes</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据TableRule中的真实DataNode构建RoutingUnit对象 </span></span>
<span class="line"><span style="color:#E1E4E8;">        RoutingUnit routingUnit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingUnit</span><span style="color:#E1E4E8;">(each.</span><span style="color:#B392F0;">getDataSourceName</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据DataNode的TableName构建TableUnit </span></span>
<span class="line"><span style="color:#E1E4E8;">        routingUnit.</span><span style="color:#B392F0;">getTableUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableUnit</span><span style="color:#E1E4E8;">(logicTableName, each.</span><span style="color:#B392F0;">getTableName</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(routingUnit); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">RoutingUnit</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAllRoutingUnits</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String logicTableName) { </span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">RoutingUnit</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//根据logicTableName获取对应的TableRule </span></span>
<span class="line"><span style="color:#24292E;">    TableRule tableRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">getTableRule</span><span style="color:#24292E;">(logicTableName); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (DataNode each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> tableRule.</span><span style="color:#6F42C1;">getActualDataNodes</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据TableRule中的真实DataNode构建RoutingUnit对象 </span></span>
<span class="line"><span style="color:#24292E;">        RoutingUnit routingUnit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingUnit</span><span style="color:#24292E;">(each.</span><span style="color:#6F42C1;">getDataSourceName</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据DataNode的TableName构建TableUnit </span></span>
<span class="line"><span style="color:#24292E;">        routingUnit.</span><span style="color:#6F42C1;">getTableUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableUnit</span><span style="color:#24292E;">(logicTableName, each.</span><span style="color:#6F42C1;">getTableName</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(routingUnit); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着我们来看针对 DALStatement 的场景，这一场景相对复杂，根据输入的 DALStatement 的不同类型，会有几个不同的处理分支，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> RoutingEngine </span><span style="color:#B392F0;">getDALRoutingEngine</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ShardingRule shardingRule, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> SQLStatement sqlStatement, </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Collection</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> tableNames) { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果是Use语句，则什么也不做 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> UseStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IgnoreRoutingEngine</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果是Set或ResetParameter语句，则进行全数据库广播 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> SetStatement </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ResetParameterStatement </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> sqlStatement </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> ShowDatabasesStatement) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DatabaseBroadcastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//如果存在默认数据库，则执行默认数据库路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tableNames.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">shardingRule.</span><span style="color:#B392F0;">tableRuleExists</span><span style="color:#E1E4E8;">(tableNames) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">hasDefaultDataSourceName</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultDatabaseRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//如果表列表不为空，则执行单播路由 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">tableNames.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnicastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceGroupBroadcastRoutingEngine</span><span style="color:#E1E4E8;">(shardingRule); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> RoutingEngine </span><span style="color:#6F42C1;">getDALRoutingEngine</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ShardingRule shardingRule, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> SQLStatement sqlStatement, </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Collection</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> tableNames) { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果是Use语句，则什么也不做 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> UseStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IgnoreRoutingEngine</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果是Set或ResetParameter语句，则进行全数据库广播 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> SetStatement </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ResetParameterStatement </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> sqlStatement </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ShowDatabasesStatement) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseBroadcastRoutingEngine</span><span style="color:#24292E;">(shardingRule); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果存在默认数据库，则执行默认数据库路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tableNames.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">shardingRule.</span><span style="color:#6F42C1;">tableRuleExists</span><span style="color:#24292E;">(tableNames) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">hasDefaultDataSourceName</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultDatabaseRoutingEngine</span><span style="color:#24292E;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果表列表不为空，则执行单播路由 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">tableNames.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnicastRoutingEngine</span><span style="color:#24292E;">(shardingRule, tableNames); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceGroupBroadcastRoutingEngine</span><span style="color:#24292E;">(shardingRule); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们分别来看一下这里面的几个路由引擎。首先是最简单的 IgnoreRoutingEngine，它只返回一个空的 RoutingResult 对象，其他什么都不做，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IgnoreRoutingEngine</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingEngine</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RoutingResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingResult</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IgnoreRoutingEngine</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingEngine</span><span style="color:#24292E;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RoutingResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingResult</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>本质上，UnicastRoutingEngine 代表单播路由，用于获取某一真实表信息的场景，它只需要从任意库中的任意真实表中获取数据即可。例如 DESCRIBE 语句就适合使用 UnicastRoutingEngine，因为每个真实表中的数据描述结构都是相同的。</p><p>UnicastRoutingEngine 实现过程如下所示，由于方法比较长，我们裁剪了代码，直接使用注释来标明每个分支的执行逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RoutingResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    RoutingResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingResult</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shardingRule.</span><span style="color:#B392F0;">isAllBroadcastTables</span><span style="color:#E1E4E8;">(logicTables)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果都是广播表，则对每个logicTable组装TableUnit，再构建RoutingUnit</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (logicTables.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果表为null，则直接组装RoutingUnit，不用构建TableUnit</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> logicTables.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果只有一张表，则组装RoutingUnit和单个表的TableUnit</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//如果存在多个实体表，则先获取DataSource，再组装RoutingUnit和TableUnit</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RoutingResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    RoutingResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingResult</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (shardingRule.</span><span style="color:#6F42C1;">isAllBroadcastTables</span><span style="color:#24292E;">(logicTables)) { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果都是广播表，则对每个logicTable组装TableUnit，再构建RoutingUnit</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logicTables.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果表为null，则直接组装RoutingUnit，不用构建TableUnit</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> logicTables.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果只有一张表，则组装RoutingUnit和单个表的TableUnit</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//如果存在多个实体表，则先获取DataSource，再组装RoutingUnit和TableUnit</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>DefaultDatabaseRoutingEngine，顾名思义是对默认的数据库执行路由。那么这个默认数据库是怎么来的呢？我们可以从 ShardingRule的ShardingDataSourceNames 类中的 getDefaultDataSourceName 方法中找到答案。</p><p>一般，这种默认数据库可以通过配置的方式进行设置。明白这一点，DefaultDatabaseRoutingEngine 的路由过程也就不难理解了，其 route 方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RoutingResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    RoutingResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingResult</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">TableUnit</span><span style="color:#E1E4E8;">&gt; routingTables </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(logicTables.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> logicTables) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        routingTables.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableUnit</span><span style="color:#E1E4E8;">(each, each)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//从ShardingRule中获取默认所配置的数据库名 </span></span>
<span class="line"><span style="color:#E1E4E8;">    RoutingUnit routingUnit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingUnit</span><span style="color:#E1E4E8;">(shardingRule.</span><span style="color:#B392F0;">getShardingDataSourceNames</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDefaultDataSourceName</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    routingUnit.</span><span style="color:#B392F0;">getTableUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(routingTables); </span></span>
<span class="line"><span style="color:#E1E4E8;">    result.</span><span style="color:#B392F0;">getRoutingUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(routingUnit); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RoutingResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    RoutingResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingResult</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">TableUnit</span><span style="color:#24292E;">&gt; routingTables </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(logicTables.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> logicTables) { </span></span>
<span class="line"><span style="color:#24292E;">        routingTables.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableUnit</span><span style="color:#24292E;">(each, each)); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//从ShardingRule中获取默认所配置的数据库名 </span></span>
<span class="line"><span style="color:#24292E;">    RoutingUnit routingUnit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingUnit</span><span style="color:#24292E;">(shardingRule.</span><span style="color:#6F42C1;">getShardingDataSourceNames</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getDefaultDataSourceName</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    routingUnit.</span><span style="color:#6F42C1;">getTableUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(routingTables); </span></span>
<span class="line"><span style="color:#24292E;">    result.</span><span style="color:#6F42C1;">getRoutingUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(routingUnit); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，我们来看一下针对数据控制语言 DCLStatement 的处理流程。在主从环境下，对于 DCLStatement 而言，有时候我们希望 SQL 语句只针对主数据库进行执行，所以就有了如下所示的 MasterInstanceBroadcastRoutingEngine：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RoutingResult </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    RoutingResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingResult</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String each </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">getShardingDataSourceNames</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDataSourceNames</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (dataSourceMetas.</span><span style="color:#B392F0;">getAllInstanceDataSourceNames</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(each)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//通过MasterSlaveRule获取主从数据库信息 </span></span>
<span class="line"><span style="color:#E1E4E8;">            Optional&lt;</span><span style="color:#F97583;">MasterSlaveRule</span><span style="color:#E1E4E8;">&gt; masterSlaveRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shardingRule.</span><span style="color:#B392F0;">findMasterSlaveRule</span><span style="color:#E1E4E8;">(each); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">masterSlaveRule.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> masterSlaveRule.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getMasterDataSourceName</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(each)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">getRoutingUnits</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingUnit</span><span style="color:#E1E4E8;">(each)); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RoutingResult </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    RoutingResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingResult</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String each </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">getShardingDataSourceNames</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getDataSourceNames</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (dataSourceMetas.</span><span style="color:#6F42C1;">getAllInstanceDataSourceNames</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(each)) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//通过MasterSlaveRule获取主从数据库信息 </span></span>
<span class="line"><span style="color:#24292E;">            Optional&lt;</span><span style="color:#D73A49;">MasterSlaveRule</span><span style="color:#24292E;">&gt; masterSlaveRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shardingRule.</span><span style="color:#6F42C1;">findMasterSlaveRule</span><span style="color:#24292E;">(each); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">masterSlaveRule.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> masterSlaveRule.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getMasterDataSourceName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(each)) { </span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">getRoutingUnits</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingUnit</span><span style="color:#24292E;">(each)); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这里引入了一个 MasterSlaveRule 规则，该规则提供 getMasterDataSourceName 方法以获取主 DataSourceName，这样我们就可以针对这个主数据执行，如 Grant 等数据控制语言。</p><h3 id="从源码解析到日常开发" tabindex="-1">从源码解析到日常开发 <a class="header-anchor" href="#从源码解析到日常开发" aria-label="Permalink to &quot;从源码解析到日常开发&quot;">​</a></h3><p>在 ShardingSphere 中，我们还是有必要再次强调其在配置信息管理上的一些设计和实践。基于 ShardingRule 和 TableRule 这两个配置类，ShardingSphere 把大量纷繁复杂的配置信息从业务流程中进行隔离，而这些配置信息往往需要灵活进行设置，以及多种默认配置值。基于 ShardingRule 和 TableRule 的两层配置体系，系统能够更好地完成业务逻辑的变化和配置信息变化之间的有效整合，值得我们在日常开发过程中进行尝试和应用。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>今天我们关注的是 ShardingSphere 中各种路由引擎的实现过程，ShardingSphere 中实现了多款不同的路由引擎，可以分为分片路由和广播路由两大类。我们针对这两类路由引擎中的代表性实现方案分别展开了讨论。</p><p><strong>这里给你留一道思考题：ShardingSphere 中如何判断两张表是互为绑定表关系？</strong> 欢迎你在留言区与大家讨论，我将一一点评解答。</p><p>从今天的内容中，我们也看到了路由引擎中路由机制的实现需要依赖于分片策略及其背后分片算法的集成，下一课时将对 ShardingSphere 中的各种分片策略进行具体的展开。</p>`,37);function d(F,R,b,h,D,A){const a=e("Image");return t(),c("div",null,[E,y,i,l(a,{alt:"image (8).png",src:"https://s0.lgstatic.com/i/image/M00/41/6C/Ciqc1F81FdqANHr4AACO1I-IihE703.png"}),s(),g,l(a,{alt:"image (9).png",src:"https://s0.lgstatic.com/i/image/M00/41/77/CgqCHl81FfKAYWCOAACN0o0OVu8479.png"}),s(),u])}const m=o(r,[["render",d]]);export{C as __pageData,m as default};
