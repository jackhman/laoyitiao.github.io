import{_ as s,j as n,o as p,g as _,k as e,h as o,s as t,Q as l}from"./chunks/framework.4e7d56ce.js";const $=JSON.parse('{"title":"12写多读少：MySQL如何优化数据存储方案？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/架构设计面试精讲_文档/(6062) 12  写多读少：MySQL 如何优化数据存储方案？.md","filePath":"posts/backEnd/架构设计面试精讲_文档/(6062) 12  写多读少：MySQL 如何优化数据存储方案？.md","lastUpdated":1696682708000}'),i={name:"posts/backEnd/架构设计面试精讲_文档/(6062) 12  写多读少：MySQL 如何优化数据存储方案？.md"},r=t("h1",{id:"_12写多读少-mysql如何优化数据存储方案",tabindex:"-1"},[o("12写多读少：MySQL如何优化数据存储方案？ "),t("a",{class:"header-anchor",href:"#_12写多读少-mysql如何优化数据存储方案","aria-label":'Permalink to "12写多读少：MySQL如何优化数据存储方案？"'},"​")],-1),c=t("p",null,"上一讲，我带你学习了在高并发读多写少的场景下，数据库的一种优化方案：读写分离。通过主从复制的技术把数据复制多份，读操作只读取从数据库中的数据，这样就增强了抵抗大量并发读请求的能力，提升了数据库的查询性能。这时，你的系统架构如下：",-1),h=l("",23),u=t("p",null,"垂直拆分",-1),d=t("p",null,'比如在对做系统"微服务"改造时，将原本一个单体系统拆分成多个子系统，每个系统提供单独的服务，那么随着应用层面的拆分带来的也有数据层面的拆分，将一个主库的数据表，拆分到多个独立的子库中去。',-1),g=t("p",null,"对数据库进行垂直拆分最常规，优缺点也很明显。",-1),q=t("p",null,'垂直拆分可以把不同的业务数据进行隔离，让系统和数据更为"纯粹"，更有助于架构上的扩展。但它依然不能解决某一个业务的数据大量膨胀的问题，一旦系统中的某一个业务库的数据量剧增，比如商品系统接入了一个大客户的供应链，对于商品数据的存储需求量暴增，在这个时候，就要把数据拆分到多个数据库和数据表中，也就是对数据做水平拆分。',-1),m=t("ul",null,[t("li",null,[t("strong",null,"水平拆分")])],-1),A=t("p",null,"垂直拆分随架构改造而拆分，关注点在于业务领域，而水平拆分指的是把单一库表数据按照规则拆分到多个数据库和多个数据表中，比如把单表 1 亿的数据按 Hash 取模拆分到 10 个相同结构的表中，每个表 1 千万的数据。并且拆分出来的表，可以分别存放到不同的物理数据库中，关注点在于数据扩展。",-1),S=t("p",null,"水平拆分",-1),b=t("p",null,"拆分的规则就是哈希分片和范围分片（这部分内容你可以参考 04 讲中的内容，我就不赘述了）。但我要强调一下 Range 分片，因为 04 讲中有些同学对 Range 分片解决数据热点的问题有些误解。",-1),k=t("ul",null,[t("li",null,[t("strong",null,"Range（范围分片）")])],-1),P=t("p",null,"是按照某一个字段的区间来拆分，最好理解的就是按照时间字段分片，比如可以把一个月的数据放入一张表中，这样在查询时就可以根据时间先定位数据存储在哪个表里面，再按照查询条件来查询。",-1),L=t("p",null,"但是按时间字段进行范围分片的场景并不多，因为会导致数据分布不均，毕竟不是每个月的销量都是平均的。所以常见的 Range 分片是按照字段类型，比如按照商品的所属品类进行分片。这样与 Hash 分片不同的是，Range 分片就可以加入对于业务的预估。",-1),f=t("p",null,"Range 分片",-1),M=t("p",null,'但是同样的，由于不同"商品品类"的业务热点不同，对于商品数据存储也会存在热点数据问题，这个时候处理的手段有两个。',-1),Q=t("p",null,[t("strong",null,"1、垂直扩展")],-1),T=t("p",null,'由于 Range 分片是按照业务特性进行的分片策略，所以可以对热点数据做垂直扩展，即提升单机处理能力。在业务发展突飞猛进的初期，建议使用"增强单机硬件性能"的方式提升系统处理能力，因为此阶段，公司的战略往往是发展业务抢时间，"增强单机硬件性能"是最快的方法。',-1),y=t("p",null,[t("strong",null,"2、分片元数据")],-1),C=t("p",null,'单机性能总是有极限的，互联网分布式架构设计高并发终极解决方案还是水平扩展，所以结合业务的特性，就需要在 Range 的基础上引入"分片元数据"的概念：分片的规则记录在一张表里面，每次执行查询的时候，先去表里查一下要找的数据在哪个分片中。',-1),N=t("p",null,"这种方式的优点是灵活性高，并且分片规则可以随着业务发展随意改动。比如当某个分片已经是热点了，那就可以把这个分片再拆成几个分片，或者把这个分片的数据移到其他分片中去，然后修改一下分片元数据表，就可以在线完成数据的再分片了。",-1),R=t("p",null,"分片元数据",-1),x=t("p",null,"但你要注意，分片元数据本身需要做高可用（面试考察点可以参考 04 讲中的内容）。方案缺点是实现起来复杂，需要二次查询，需要保证分片元数据服务的高可用。不过分片元数据表可以通过缓存进行提速。",-1),H=t("ul",null,[t("li",null,[t("strong",null,"垂直水平拆分")])],-1),I=t("p",null,"垂直水平拆分，是综合垂直和水平拆分方式的一种混合方式，垂直拆分把不同类型的数据存储到不同库中，再结合水平拆分，使单表数据量保持在合理范围内，提升性能。",-1),V=l("",16);function E(W,w,D,O,B,F){const a=n("Image");return p(),_("div",null,[r,c,e(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image6/M01/04/15/CioPOWAguzCALW6-AAFqyLONgRo485.png"}),o(),h,e(a,{alt:"2021-02-08 (5).png",src:"https://s0.lgstatic.com/i/image6/M01/04/15/CioPOWAgu0WAIPgVAAFI7tXmc4k883.png"}),o(),u,d,g,q,m,A,e(a,{alt:"2021-02-08 (6).png",src:"https://s0.lgstatic.com/i/image6/M01/04/18/Cgp9HWAgu1iATPotAAFyw-cShto270.png"}),o(),S,b,k,P,L,e(a,{alt:"2021-02-08 (9).png",src:"https://s0.lgstatic.com/i/image6/M01/04/18/Cgp9HWAgu2qAUY42AAJC1rwUuj0065.png"}),o(),f,M,Q,T,y,C,N,e(a,{alt:"2021-02-08 (7).png",src:"https://s0.lgstatic.com/i/image6/M01/04/18/Cgp9HWAgu4OAUhLoAAIZaMG-qhk310.png"}),o(),R,x,H,I,e(a,{alt:"2021-02-08 (8).png",src:"https://s0.lgstatic.com/i/image6/M01/04/15/CioPOWAgu5GABkVtAAGYeNyTfrM932.png"}),o(),V])}const v=s(i,[["render",E]]);export{$ as __pageData,v as default};
