import{_ as o,j as e,o as t,g as c,k as l,h as s,Q as p,s as n}from"./chunks/framework.cfb14fe0.js";const w=JSON.parse('{"title":"25CICD：容器化后如何实现持续集成与交付？（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/045_由浅入深吃透 Docker/(4596) 25  CICD：容器化后如何实现持续集成与交付？（下）.md","filePath":"posts/backEnd/045_由浅入深吃透 Docker/(4596) 25  CICD：容器化后如何实现持续集成与交付？（下）.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/045_由浅入深吃透 Docker/(4596) 25  CICD：容器化后如何实现持续集成与交付？（下）.md"},E=p(`<h1 id="_25cicd-容器化后如何实现持续集成与交付-下" tabindex="-1">25CICD：容器化后如何实现持续集成与交付？（下） <a class="header-anchor" href="#_25cicd-容器化后如何实现持续集成与交付-下" aria-label="Permalink to &quot;25CICD：容器化后如何实现持续集成与交付？（下）&quot;">​</a></h1><p>上一讲，我介绍了 CI 和 CD 的相关概念，并且使用 Docker+Jenkins+GitLab 搭建了我们的 CI/CD 环境，今天我们就来使用已经构建好的环境来实际构建和部署一个应用。</p><p>构建和部署一个应用的流程可以分为五部分。</p><ol><li><p>我们首先需要配置 GitLab SSH 访问公钥，使得我们可以直接通过 SSH 拉取或推送代码到 GitLab。</p></li><li><p>接着将代码通过 SSH 上传到 GitLab。</p></li><li><p>再在 Jenkins 创建构建任务，使得 Jenkins 可以成功拉取 GitLab 的代码并进行构建。</p></li><li><p>然后配置代码变更自动构建流程，使得代码变更可以触发自动构建 Docker 镜像。</p></li><li><p>最后配置自动部署流程，镜像构建完成后自动将镜像发布到测试或生产环境。</p></li></ol><p>接下来我们逐一操作。</p><h3 id="_1-配置-gitlab-ssh-访问公钥" tabindex="-1">1. 配置 GitLab SSH 访问公钥 <a class="header-anchor" href="#_1-配置-gitlab-ssh-访问公钥" aria-label="Permalink to &quot;1. 配置 GitLab SSH 访问公钥&quot;">​</a></h3><p>为了能够让 Jenkins 顺利从 GitLab 拉取代码，我们需要先生成 ssh 密钥。我们可以使用 ssh-keygen 命令来生成 2048 位的 ras 密钥。在 Linux 上执行如下命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ ssh</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">keygen </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t rsa </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b </span><span style="color:#79B8FF;">2048</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">C </span><span style="color:#9ECBFF;">&quot;email@example.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"># 输入上面命令后系统会提示我们密钥保存的位置等信息，只需要按回车即可。</span></span>
<span class="line"><span style="color:#E1E4E8;">Generating </span><span style="color:#F97583;">public/private</span><span style="color:#E1E4E8;"> rsa key pair.</span></span>
<span class="line"><span style="color:#E1E4E8;">Enter file in which to save the </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">centos</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.ssh</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id_rsa)</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">Enter </span><span style="color:#B392F0;">passphrase</span><span style="color:#E1E4E8;"> (empty </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> no passphrase)</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">Enter same passphrase again</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">Your identification has been saved in </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">centos</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.ssh</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id_rsa.</span></span>
<span class="line"><span style="color:#E1E4E8;">Your </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> key has been saved in </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">centos</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.ssh</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id_rsa.pub.</span></span>
<span class="line"><span style="color:#E1E4E8;">The key fingerprint is</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">SHA256</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">A</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">d0NQQrjxV2h</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">zR3BQIJxT23puXoLi1RiTKJm16</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">rg email@</span><span style="color:#F97583;">example</span><span style="color:#E1E4E8;">.com</span></span>
<span class="line"><span style="color:#E1E4E8;">The key</span><span style="color:#9ECBFF;">&#39;s randomart image is:</span></span>
<span class="line"><span style="color:#9ECBFF;">+---[RSA 2048]----+</span></span>
<span class="line"><span style="color:#9ECBFF;">|          =XB=o+o|</span></span>
<span class="line"><span style="color:#9ECBFF;">|         ..=B+o .|</span></span>
<span class="line"><span style="color:#9ECBFF;">|      . + +. o   |</span></span>
<span class="line"><span style="color:#9ECBFF;">|       = B .o .  |</span></span>
<span class="line"><span style="color:#9ECBFF;">|      o S +  o . |</span></span>
<span class="line"><span style="color:#9ECBFF;">|     . * .... . +|</span></span>
<span class="line"><span style="color:#9ECBFF;">|      =  ..o   +.|</span></span>
<span class="line"><span style="color:#9ECBFF;">|     ...  o..   .|</span></span>
<span class="line"><span style="color:#9ECBFF;">|     E=. ...     |</span></span>
<span class="line"><span style="color:#9ECBFF;">+----[SHA256]-----+</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ ssh</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">keygen </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t rsa </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b </span><span style="color:#005CC5;">2048</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">C </span><span style="color:#032F62;">&quot;email@example.com&quot;</span></span>
<span class="line"><span style="color:#24292E;"># 输入上面命令后系统会提示我们密钥保存的位置等信息，只需要按回车即可。</span></span>
<span class="line"><span style="color:#24292E;">Generating </span><span style="color:#D73A49;">public/private</span><span style="color:#24292E;"> rsa key pair.</span></span>
<span class="line"><span style="color:#24292E;">Enter file in which to save the </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">centos</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.ssh</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id_rsa)</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">Enter </span><span style="color:#6F42C1;">passphrase</span><span style="color:#24292E;"> (empty </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> no passphrase)</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">Enter same passphrase again</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">Your identification has been saved in </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">centos</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.ssh</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id_rsa.</span></span>
<span class="line"><span style="color:#24292E;">Your </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> key has been saved in </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">centos</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.ssh</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id_rsa.pub.</span></span>
<span class="line"><span style="color:#24292E;">The key fingerprint is</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">SHA256</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">A</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">d0NQQrjxV2h</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">zR3BQIJxT23puXoLi1RiTKJm16</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">rg email@</span><span style="color:#D73A49;">example</span><span style="color:#24292E;">.com</span></span>
<span class="line"><span style="color:#24292E;">The key</span><span style="color:#032F62;">&#39;s randomart image is:</span></span>
<span class="line"><span style="color:#032F62;">+---[RSA 2048]----+</span></span>
<span class="line"><span style="color:#032F62;">|          =XB=o+o|</span></span>
<span class="line"><span style="color:#032F62;">|         ..=B+o .|</span></span>
<span class="line"><span style="color:#032F62;">|      . + +. o   |</span></span>
<span class="line"><span style="color:#032F62;">|       = B .o .  |</span></span>
<span class="line"><span style="color:#032F62;">|      o S +  o . |</span></span>
<span class="line"><span style="color:#032F62;">|     . * .... . +|</span></span>
<span class="line"><span style="color:#032F62;">|      =  ..o   +.|</span></span>
<span class="line"><span style="color:#032F62;">|     ...  o..   .|</span></span>
<span class="line"><span style="color:#032F62;">|     E=. ...     |</span></span>
<span class="line"><span style="color:#032F62;">+----[SHA256]-----+</span></span></code></pre></div><p>执行完上述命令后 ，$HOME/.ssh/ 目录下会自动生成两个文件：id_rsa.pub 文件为公钥文件，id_rsa 文件为私钥文件。我们可以通过 cat 命令来查看公钥文件内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ cat $HOME</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.ssh</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">id_rsa.pub</span></span>
<span class="line"><span style="color:#E1E4E8;">ssh</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDljSlDNHnUr4ursYISKXK5j2mWTYnt100mvYeJCLpr6tpeSarGyr7FnTc6sLM721plU2xq0bqlFEU5</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">0SSvFdLTht7bcfm</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Hf31EdAuIqZuy</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">guP06ijpidfX6lVDxLWx</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sO3Wbj3t7xgj4sfCFTiv</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">OOFP0NxKr5wy</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">emojm6KIaXkhjbPeJDgph5bvluFnKAtesMUkdhceAdN9grE3nkBOnwWw6G4dCtbrKt2o9wSyzgkDwPjj2qjFhcE9571</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">61</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Nr8v9iqSHvcb</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">d7WZ0Qq7a2LYds6hQkpBg2RCDDJA16fFVs8Q5eNCpDQwGG3IbhHMUwvpKDf0OYrS9iftc5 email@</span><span style="color:#F97583;">example</span><span style="color:#E1E4E8;">.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ cat $HOME</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.ssh</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">id_rsa.pub</span></span>
<span class="line"><span style="color:#24292E;">ssh</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDljSlDNHnUr4ursYISKXK5j2mWTYnt100mvYeJCLpr6tpeSarGyr7FnTc6sLM721plU2xq0bqlFEU5</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">0SSvFdLTht7bcfm</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Hf31EdAuIqZuy</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">guP06ijpidfX6lVDxLWx</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sO3Wbj3t7xgj4sfCFTiv</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">OOFP0NxKr5wy</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">emojm6KIaXkhjbPeJDgph5bvluFnKAtesMUkdhceAdN9grE3nkBOnwWw6G4dCtbrKt2o9wSyzgkDwPjj2qjFhcE9571</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">61</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Nr8v9iqSHvcb</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">d7WZ0Qq7a2LYds6hQkpBg2RCDDJA16fFVs8Q5eNCpDQwGG3IbhHMUwvpKDf0OYrS9iftc5 email@</span><span style="color:#D73A49;">example</span><span style="color:#24292E;">.com</span></span></code></pre></div><p>然后将公钥文件拷贝到 GitLab 的个人设置 -&gt; SSH Keys 中，点击添加按钮，将我们的公钥添加到 GitLab 中。</p>`,11),y=p(`<h3 id="_2-上传服务代码到-gitlab" tabindex="-1">2. 上传服务代码到 GitLab <a class="header-anchor" href="#_2-上传服务代码到-gitlab" aria-label="Permalink to &quot;2. 上传服务代码到 GitLab&quot;">​</a></h3><p>这里，我使用 Golang 编写了一个 HTTP 服务，代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net/http</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(w http.ResponseWriter, req </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Fprintf</span><span style="color:#E1E4E8;">(w, </span><span style="color:#9ECBFF;">&quot;hello</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">headers</span><span style="color:#E1E4E8;">(w http.ResponseWriter, req </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> name, headers </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> req.Header {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, h </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> headers {</span></span>
<span class="line"><span style="color:#E1E4E8;">            fmt.</span><span style="color:#79B8FF;">Fprintf</span><span style="color:#E1E4E8;">(w, </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, name, h)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    http.</span><span style="color:#79B8FF;">HandleFunc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/hello&quot;</span><span style="color:#E1E4E8;">, hello)</span></span>
<span class="line"><span style="color:#E1E4E8;">    http.</span><span style="color:#79B8FF;">HandleFunc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/headers&quot;</span><span style="color:#E1E4E8;">, headers)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    http.</span><span style="color:#79B8FF;">ListenAndServe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:8090&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net/http</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(w http.ResponseWriter, req </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Fprintf</span><span style="color:#24292E;">(w, </span><span style="color:#032F62;">&quot;hello</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">headers</span><span style="color:#24292E;">(w http.ResponseWriter, req </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name, headers </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> req.Header {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, h </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> headers {</span></span>
<span class="line"><span style="color:#24292E;">            fmt.</span><span style="color:#005CC5;">Fprintf</span><span style="color:#24292E;">(w, </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, name, h)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    http.</span><span style="color:#005CC5;">HandleFunc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">, hello)</span></span>
<span class="line"><span style="color:#24292E;">    http.</span><span style="color:#005CC5;">HandleFunc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/headers&quot;</span><span style="color:#24292E;">, headers)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    http.</span><span style="color:#005CC5;">ListenAndServe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:8090&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后编写一个 Dockerfile，利用多阶段构建将我们的 Go 编译，并将编译后的二进制文件拷贝到 scratch（scratch 是一个空镜像，用于构建其他镜像，体积非常小）的基础镜像中。Dockerfile 的内容如下：</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> golang:1.14 </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> builder</span></span>
<span class="line"><span style="color:#F97583;">WORKDIR</span><span style="color:#E1E4E8;"> /go/src/github.com/wilhelmguo/devops-demo/</span></span>
<span class="line"><span style="color:#F97583;">COPY</span><span style="color:#E1E4E8;"> main.go .</span></span>
<span class="line"><span style="color:#F97583;">RUN</span><span style="color:#E1E4E8;"> CGO_ENABLED=0 GOOS=linux go build -o /tmp/http-server .</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> scratch</span></span>
<span class="line"><span style="color:#F97583;">WORKDIR</span><span style="color:#E1E4E8;"> /root/</span></span>
<span class="line"><span style="color:#F97583;">COPY</span><span style="color:#E1E4E8;"> --from=builder /tmp/http-server .</span></span>
<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;./http-server&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> golang:1.14 </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> builder</span></span>
<span class="line"><span style="color:#D73A49;">WORKDIR</span><span style="color:#24292E;"> /go/src/github.com/wilhelmguo/devops-demo/</span></span>
<span class="line"><span style="color:#D73A49;">COPY</span><span style="color:#24292E;"> main.go .</span></span>
<span class="line"><span style="color:#D73A49;">RUN</span><span style="color:#24292E;"> CGO_ENABLED=0 GOOS=linux go build -o /tmp/http-server .</span></span>
<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> scratch</span></span>
<span class="line"><span style="color:#D73A49;">WORKDIR</span><span style="color:#24292E;"> /root/</span></span>
<span class="line"><span style="color:#D73A49;">COPY</span><span style="color:#24292E;"> --from=builder /tmp/http-server .</span></span>
<span class="line"><span style="color:#D73A49;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;./http-server&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>编写完 Go HTTP 文件和 Dockerfile 文件后，代码目录内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ ls </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">lh</span></span>
<span class="line"><span style="color:#E1E4E8;">total </span><span style="color:#79B8FF;">24</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root  root   243B Nov  </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">03</span><span style="color:#E1E4E8;"> Dockerfile</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root  root    26B Nov  </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">06</span><span style="color:#E1E4E8;"> README.md</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rw</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> root  root   441B Nov  </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">03</span><span style="color:#E1E4E8;"> main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ ls </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">lh</span></span>
<span class="line"><span style="color:#24292E;">total </span><span style="color:#005CC5;">24</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root  root   243B Nov  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">03</span><span style="color:#24292E;"> Dockerfile</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root  root    26B Nov  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">06</span><span style="color:#24292E;"> README.md</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">rw</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> root  root   441B Nov  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">03</span><span style="color:#24292E;"> main.go</span></span></code></pre></div><blockquote><p>源码详见<a href="https://github.com/wilhelmguo/devops-demo" target="_blank" rel="noreferrer">这里</a></p></blockquote><p>然后，我们在 GitLab 上创建一个 hello 项目，并将代码上传。</p>`,9),i=n("p",null,"项目创建完成后，GitLab 会自动跳转到项目详情页面。",-1),F=n("h3",{id:"_3-创建-jenkins-任务",tabindex:"-1"},[s("3. 创建 Jenkins 任务 "),n("a",{class:"header-anchor",href:"#_3-创建-jenkins-任务","aria-label":'Permalink to "3. 创建 Jenkins 任务"'},"​")],-1),d=n("p",null,"在 Jenkins 中添加一个自由风格的任务。",-1),h=n("p",null,"点击确定，然后到源码管理选择 Git，填写 GitLab 项目的 URL。此时 Jenkins 会提示没有访问 GitLab 的相关权限，我们需要点击添加按钮将私钥添加到 Jenkins 中用以鉴权。",-1),C=n("blockquote",null,[n("p",null,"由于部署 GitLab 的宿主机 ssh 默认端口为 22，为了避免与宿主机的 ssh 端口冲突，我们的 GitLab ssh 端口配置为 2222，因此 Jenkins 连接 GitLab 的 URL 中需要包含端口号 2222， 配置格式为 ssh://git@172.20.1.6:2222/root/hello.git。")],-1),A=n("p",null,'选择添加的密钥类型为 "SSH Username with private key"，Username 设置为 jenkins，然后将私钥粘贴到 Private Key 输入框中，点击添加即可。',-1),g=n("p",null,"添加完成后，认证名称选择 jenkins 后，红色报错提示就会消失。这证明此时 Jenkins 和 GitLab 已经认证成功，可以成功从 GitLab 拉取代码了。",-1),u=p(`<p>下面我们使用 shell 脚本来构建我们的应用镜像，在构建中增加一个 Shell 类型的构建步骤，并且填入以下信息，将 USER 替换为目标镜像仓库的用户名，将 PASSWORD 替换为镜像仓库的密码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 第一步，登录镜像仓库</span></span>
<span class="line"><span style="color:#E1E4E8;">$ docker login </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">u {USER} </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p  {PASSWORD}</span></span>
<span class="line"><span style="color:#E1E4E8;"># 第二步，使用 docker build 命令构建镜像</span></span>
<span class="line"><span style="color:#E1E4E8;">$ docker build </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t lagoudocker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">devops</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo . </span></span>
<span class="line"><span style="color:#E1E4E8;"># 第三步, 使用 docker push 命令推送镜像</span></span>
<span class="line"><span style="color:#E1E4E8;">$ docker push lagoudocker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">devops</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 第一步，登录镜像仓库</span></span>
<span class="line"><span style="color:#24292E;">$ docker login </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">u {USER} </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p  {PASSWORD}</span></span>
<span class="line"><span style="color:#24292E;"># 第二步，使用 docker build 命令构建镜像</span></span>
<span class="line"><span style="color:#24292E;">$ docker build </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t lagoudocker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">devops</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo . </span></span>
<span class="line"><span style="color:#24292E;"># 第三步, 使用 docker push 命令推送镜像</span></span>
<span class="line"><span style="color:#24292E;">$ docker push lagoudocker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">devops</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span></span></code></pre></div>`,2),D=n("p",null,"完成后点击保存，此时任务已经成功添加到 Jenkins 中。回到任务首页，点击构建按钮即可开始构建。第一次构建需要下载依赖的基础镜像，这个过程可能比较慢。构建过程中，我们也可以点击控制台查看构建输出的内容：",-1),k=n("h3",{id:"_4-配置自动构建",tabindex:"-1"},[s("4. 配置自动构建 "),n("a",{class:"header-anchor",href:"#_4-配置自动构建","aria-label":'Permalink to "4. 配置自动构建"'},"​")],-1),_=n("p",null,"点击上一步创建的任务，点击配置进入任务配置界面，到构建触发器下勾选 GitLab 相关的选项，点击 Generate 按钮生成一个 GitLab 回调 Jenkins 的 token。记录下 Jenkins 的回调地址和生成的 token 信息。",-1),m=n("p",null,"在 GitLab 项目设置中，选择 Webhooks，将 Jenkins 的回调地址和 token 信息添加到 Webhooks 的配置中，点击添加即可。",-1),b=p(`<p>后面我们的每次提交都会触发自动构建。</p><p>为了实现根据 git 的 tag 自动构建相应版本的镜像，我们需要修改 Jenkins 构建步骤中的 shell 脚本为以下内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 需要推送的镜像名称</span></span>
<span class="line"><span style="color:#E1E4E8;">IMAGE_NAME</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;lagoudocker/devops-demo&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 获取当前构建的版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">GIT_VERSION</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> describe </span><span style="color:#79B8FF;">--always</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">--tag</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#6A737D;"># 生成完整的镜像 URL 变量，用于构建和推送镜像</span></span>
<span class="line"><span style="color:#E1E4E8;">REPOSITORY</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">docker.io/</span><span style="color:#E1E4E8;">\${IMAGE_NAME}</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;">\${GIT_VERSION} </span></span>
<span class="line"><span style="color:#6A737D;"># 构建Docker镜像 </span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> $REPOSITORY </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Dockerfile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 登录镜像仓库，username 跟 password 为目标镜像仓库的用户名和密码</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">login</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--username=xxxxx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--password=xxxxxx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker.io</span></span>
<span class="line"><span style="color:#6A737D;"># 推送 Docker 镜像到目标镜像仓库</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> $REPOSITORY</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 需要推送的镜像名称</span></span>
<span class="line"><span style="color:#24292E;">IMAGE_NAME</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;lagoudocker/devops-demo&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 获取当前构建的版本号</span></span>
<span class="line"><span style="color:#24292E;">GIT_VERSION</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">git</span><span style="color:#032F62;"> describe </span><span style="color:#005CC5;">--always</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">--tag</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#6A737D;"># 生成完整的镜像 URL 变量，用于构建和推送镜像</span></span>
<span class="line"><span style="color:#24292E;">REPOSITORY</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">docker.io/</span><span style="color:#24292E;">\${IMAGE_NAME}</span><span style="color:#032F62;">:</span><span style="color:#24292E;">\${GIT_VERSION} </span></span>
<span class="line"><span style="color:#6A737D;"># 构建Docker镜像 </span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> $REPOSITORY </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Dockerfile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 登录镜像仓库，username 跟 password 为目标镜像仓库的用户名和密码</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">login</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--username=xxxxx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--password=xxxxxx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker.io</span></span>
<span class="line"><span style="color:#6A737D;"># 推送 Docker 镜像到目标镜像仓库</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> $REPOSITORY</span></span></code></pre></div><p>好了，到此我们已经完成了 GitLab -&gt; Jenkins -&gt; Docker 镜像仓库的自动构建和推送。当我们推送代码到 GitLab 中时，会自动触发 Webhooks，然后 GitLab 会根据配置的 Webhooks 调用 Jenkins 开始构建镜像，镜像构建完成后自动将镜像上传到我们的镜像仓库。</p><h3 id="_5-配置自动部署" tabindex="-1">5. 配置自动部署 <a class="header-anchor" href="#_5-配置自动部署" aria-label="Permalink to &quot;5. 配置自动部署&quot;">​</a></h3><p>镜像构建完成后，我们还需要将镜像发布到测试或生产环境中将镜像运行起来。发布到环境的过程可以设置为自动发布，每当我们推送代码到 master 中时，即开始自动构建镜像，并将构建后的镜像发布到测试环境中。</p><p>在镜像构建过程中，实际上 Jenkins 是通过执行我们编写的 shell 脚本完成的，要想实现镜像构建完成后自动在远程服务器上运行最新的镜像，我们需要借助一个 Jenkins 插件 Publish Over SSH，这个插件可以帮助我们自动登录远程服务器，并执行一段脚本将我们的服务启动。</p><p>下面我们来实际操作下这个插件。</p><p><strong>第一步，在 Jenkins 中安装 Publish Over SSH 插件。</strong> 在 Jenkins 系统管理，插件管理中，搜索 Publish Over SSH，然后点击安装并重启 Jenkins 服务。</p>`,9),B=n("p",null,[n("strong",null,"第二步，配置 Publish Over SSH 插件。"),s(" 插件安装完成后，在 Jenkins 系统管理的系统设置下，找到 Publish Over SSH 功能模块，添加远程服务器节点，这里我使用密码验证的方式添加一台服务器。配置好后，我们可以使用测试按钮测试服务器是否可以正常连接，显示Success 代表服务器可以正常连接，测试连接成功后，点击保存按钮保存配置。")],-1),S=p(`<p><strong>第三步，修改之前 shell 任务中脚本，</strong> 添加部署相关的内容：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 需要推送的镜像名称</span></span>
<span class="line"><span style="color:#E1E4E8;">IMAGE_NAME</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;lagoudocker/devops-demo&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 获取当前构建的版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">GIT_VERSION</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">git</span><span style="color:#9ECBFF;"> describe </span><span style="color:#79B8FF;">--always</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">--tag</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#6A737D;"># 生成完整的镜像 URL 变量，用于构建和推送镜像</span></span>
<span class="line"><span style="color:#E1E4E8;">REPOSITORY</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">docker.io/</span><span style="color:#E1E4E8;">\${IMAGE_NAME}</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;">\${GIT_VERSION} </span></span>
<span class="line"><span style="color:#6A737D;"># 构建Docker镜像 </span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> $REPOSITORY </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Dockerfile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 登录镜像仓库，username 跟 password 为目标镜像仓库的用户名和密码</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">login</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--username=</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">USER}</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--password=</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">PASSWORD}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker.io</span></span>
<span class="line"><span style="color:#6A737D;"># 推送 Docker 镜像到目标镜像仓库</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> $REPOSITORY </span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./shell</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\ </span></span>
<span class="line"><span style="color:#B392F0;">&quot;docker login --username={USER} --password={PASSWORD} \\n&quot;</span><span style="color:#B392F0;">\\</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">&quot;docker pull </span><span style="color:#E1E4E8;">$REPOSITORY</span><span style="color:#B392F0;">\\n&quot;</span><span style="color:#B392F0;">\\</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">&quot;docker kill hello \\n&quot;</span><span style="color:#B392F0;">\\</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">&quot;docker run --rm --name=hello -p 8090:8090 -d </span><span style="color:#E1E4E8;">$REPOSITORY</span><span style="color:#B392F0;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./shell/release</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 需要推送的镜像名称</span></span>
<span class="line"><span style="color:#24292E;">IMAGE_NAME</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;lagoudocker/devops-demo&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 获取当前构建的版本号</span></span>
<span class="line"><span style="color:#24292E;">GIT_VERSION</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">git</span><span style="color:#032F62;"> describe </span><span style="color:#005CC5;">--always</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">--tag</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#6A737D;"># 生成完整的镜像 URL 变量，用于构建和推送镜像</span></span>
<span class="line"><span style="color:#24292E;">REPOSITORY</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">docker.io/</span><span style="color:#24292E;">\${IMAGE_NAME}</span><span style="color:#032F62;">:</span><span style="color:#24292E;">\${GIT_VERSION} </span></span>
<span class="line"><span style="color:#6A737D;"># 构建Docker镜像 </span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> $REPOSITORY </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Dockerfile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 登录镜像仓库，username 跟 password 为目标镜像仓库的用户名和密码</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">login</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--username=</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">USER}</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--password=</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">PASSWORD}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker.io</span></span>
<span class="line"><span style="color:#6A737D;"># 推送 Docker 镜像到目标镜像仓库</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> $REPOSITORY </span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./shell</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\ </span></span>
<span class="line"><span style="color:#6F42C1;">&quot;docker login --username={USER} --password={PASSWORD} \\n&quot;</span><span style="color:#6F42C1;">\\</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">&quot;docker pull </span><span style="color:#24292E;">$REPOSITORY</span><span style="color:#6F42C1;">\\n&quot;</span><span style="color:#6F42C1;">\\</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">&quot;docker kill hello \\n&quot;</span><span style="color:#6F42C1;">\\</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">&quot;docker run --rm --name=hello -p 8090:8090 -d </span><span style="color:#24292E;">$REPOSITORY</span><span style="color:#6F42C1;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./shell/release</span></span></code></pre></div><p>我们在 docker push 命令后，增加一个输出 shell 脚本到 release 文件的命令，这个脚本会发送到远端的服务器上并执行，通过执行这个脚本文件可以在远端服务器上，拉取最新镜像并且重新启动容器。</p><p><strong>第四步，配置远程执行。<strong>在 Jenkins 的 hello 项目中，点击配置，在执行步骤中点击添加</strong>Send files or execute commands over SSH</strong>的步骤，选择之前添加的服务器，并且按照以下内容填写相关信息。</p>`,4),v=p('<ul><li><p>Source file 就是我们要传递的 shell 脚本信息，这里填写我们上面生成的 shell 脚本文件即可。</p></li><li><p>Remove prefix 是需要过滤的目录，这里我们填写 shell。</p></li><li><p>Remote directory 为远程执行脚本的目录。</p></li></ul><p>最后点击保存，保存我们的配置即可。配置完成后，我们就完成了推送代码到 GitLab，Jenkins 自动构建镜像，之后推送镜像到镜像仓库，最后自动在远程服务器上拉取并重新部署容器。</p><blockquote><p>如果你是生产环境中使用的 Kubernetes 管理服务，可以在 Jenkins 中安装 Kubernetes 的插件，然后构建完成后直接发布镜像到 Kubernetes 集群中。</p></blockquote><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>本课时我们使用 Go 开发了一个简单的 HTTP 服务，并将代码托管在了 GitLab 中。然后通过配置 GitLab 和 Jenkins 的相互调用，实现了推送代码到 GitLab 代码仓库自动触发构建镜像并将镜像推送到远程镜像仓库中，最后将最新版本镜像发布到远程服务器上。</p><p>DevOps 是一个非常棒的指导思想，而 CI/CD 是整个 DevOps 流程中最重要的部分，目前 CI/CD 的市场已经非常成熟，CI/CD 的工具链也非常完善，因此，无论是小团队还是大团队，都有必要去学习和掌握 CI/CD，以便帮助我们改善团队的效能，一切可以自动化的流程，都应该尽量避免人工参与。</p><p>那么，你知道如何使用 Jenkins 将构建后的镜像发布到 Kubernetes 中吗?</p>',7);function q(R,I,O,T,f,G){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/6F/A8/CgqCHl-2P_qAO6VIAAIAcpA55IY226.png"}),s(),y,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/6F/A8/CgqCHl-2QA2ARz39AADE_fukgio780.png"}),s(),l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/6F/A9/CgqCHl-2QQCAZUxWAAF7KHvN2DI582.png"}),s(),i,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/6F/9D/Ciqc1F-2QQeAXsbVAAELrFGkphU008.png"}),s(),F,d,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/6F/9D/Ciqc1F-2QRGAIS83AAGKHDb05xE232.png"}),s(),h,l(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/6F/9D/Ciqc1F-2QSWAceMNAADnnjcKzCo548.png"}),s(),C,A,l(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/6F/9D/Ciqc1F-2QTSARpg5AAET_4BGb-0066.png"}),s(),g,l(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/6F/A9/CgqCHl-2QTqAQf8RAACXxIBN-Z8663.png"}),s(),u,l(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/6F/A9/CgqCHl-2QUKAJ-psAABwghmp76g949.png"}),s(),D,l(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/6F/9D/Ciqc1F-2QUuAEXcXAAGe5l9e2h0928.png"}),s(),k,_,l(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/6F/9E/Ciqc1F-2QWCABHzrAAFQCgpFnLs787.png"}),s(),m,l(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/6F/9E/Ciqc1F-2QWiAFOVBAAI93Lelr38996.png"}),s(),b,l(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/6F/A9/CgqCHl-2QfmAc4iBAACDzvOoPWI585.png"}),s(),B,l(a,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/6F/A9/CgqCHl-2QgSAVk0bAAC6abody2k836.png"}),s(),S,l(a,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image/M00/6F/9E/Ciqc1F-2QhKAPblBAAC4Bp33K2Y632.png"}),s(),v])}const x=o(r,[["render",q]]);export{w as __pageData,x as default};
