import{_ as s,o as a,g as n,Q as p}from"./chunks/framework.f949202b.js";const F=JSON.parse('{"title":"nmon ------ 获取系统性能数据 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4181) 04  工具实践：如何获取代码性能数据？.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4181) 04  工具实践：如何获取代码性能数据？.md","lastUpdated":null}'),l={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4181) 04  工具实践：如何获取代码性能数据？.md"},o=p(`<p>首先解答一下上一课时的问题。磁盘的速度这么慢，为什么 Kafka 操作磁盘，吞吐量还能那么高？</p><p>这是因为，磁盘之所以慢，主要就是慢在寻道的操作上面。Kafka 官方测试表明，这个寻道时间长达 10ms。磁盘的顺序写和随机写的速度比，可以达到 6 千倍，Kafka 就是采用的顺序写的方式。</p><p>经过上一课时我们了解到，想要进行深入排查，需要收集较详细的性能数据，包括操作系统性能数据、JVM 的性能数据、应用的性能数据等。</p><p>那么，我们应该如何获取这些数据呢？本课时我将介绍一系列常用的性能测试工具。</p><h3 id="nmon-获取系统性能数据" tabindex="-1">nmon ------ 获取系统性能数据 <a class="header-anchor" href="#nmon-获取系统性能数据" aria-label="Permalink to &quot;nmon ------ 获取系统性能数据&quot;">​</a></h3><p>除了在上一课时中介绍的 top、free 等命令，还有一些将资源整合在一起的监控工具，</p><p>nmon 便是一个老牌的 Linux 性能监控工具，它不仅有漂亮的监控界面（如下图所示），还能产出细致的监控报表。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/9A/CgqCHl8X2gWANM2wAAkEF7IjoMg031.png" alt="Drawing 0.png"></p><p>nmon 监控界面</p><p>我在对应用做性能评估时，通常会加上 nmon 的报告，这会让测试结果更加有说服力。你在平时工作中也可如此尝试。</p><p>上一课时介绍的一些操作系统性能指标，都可从 nmon 中获取。它的监控范围很广，包括 CPU、内存、网络、磁盘、文件系统、NFS、系统资源等信息。</p><p>nmon 在 sourceforge 发布，我已经下载下来并上传到了仓库中。比如我的是 CentOS 7 系统，选择对应的版本即可执行。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nmon_x86_64_centos7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nmon_x86_64_centos7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>按 C 键可加入 CPU 面板；按 M 键可加入内存面板；按 N 键可加入网络；按 D 键可加入磁盘等。</p><p>通过下面的命令，表示每 5 秒采集一次数据，共采集 12 次，它会把这一段时间之内的数据记录下来。比如本次生成了 localhost_200623_1633.nmon 这个文件，我们把它从服务器上下载下来。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nmon_x86_64_centos7  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">s </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nmon_x86_64_centos7  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">s </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c </span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>注意：执行命令之后，可以通过 ps 命令找到这个进程。</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">localhost</span><span style="color:#E1E4E8;"> nmon16m_helpsystems]# ps </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ef</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> grep nmon</span></span>
<span class="line"><span style="color:#E1E4E8;">root      </span><span style="color:#79B8FF;">2228</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;"> pts</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">nmon_x86_64_centos7 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">s </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">localhost</span><span style="color:#24292E;"> nmon16m_helpsystems]# ps </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ef</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> grep nmon</span></span>
<span class="line"><span style="color:#24292E;">root      </span><span style="color:#005CC5;">2228</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">33</span><span style="color:#24292E;"> pts</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">nmon_x86_64_centos7 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">s </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c </span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用 nmonchart 工具（见仓库），即可生成 html 文件。下面是生成文件的截图。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/8F/Ciqc1F8X2m6ABh9lAAqiFOnIMT0061.png" alt="Drawing 1.png"></p><p>nmonchart 报表</p><h3 id="jvisualvm-获取-jvm-性能数据" tabindex="-1">jvisualvm ------ 获取 JVM 性能数据 <a class="header-anchor" href="#jvisualvm-获取-jvm-性能数据" aria-label="Permalink to &quot;jvisualvm ------ 获取 JVM 性能数据&quot;">​</a></h3><p>jvisualvm 原是随着 JDK 发布的一个工具，Java 9 之后开始单独发布。通过它，可以了解应用在运行中的内部情况。我们可以连接本地或者远程的服务器，监控大量的性能数据。</p><p>通过插件功能，jvisualvm 能获得更强大的扩展。如下图所示，建议把所有的插件下载下来进行体验。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/9C/CgqCHl8X3PeAPufLAAPBFcBR8qY801.png" alt="Drawing 2.png"></p><p>jvisualvm 插件安装</p><p>要想监控远程的应用，还需要在被监控的 App 上加入 jmx 参数。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">14000</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote.authenticate</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dcom.sun.management.jmxremote.ssl</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote.port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">14000</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote.authenticate</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dcom.sun.management.jmxremote.ssl</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上述配置的意义是开启 JMX 连接端口 14000，同时配置不需要 SSL 安全认证方式连接。</p><p>对于性能优化来说，我们主要用到它的采样器。注意，由于抽样分析过程对程序运行性能有较大的影响，一般我们只在测试环境中使用此功能。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/9C/CgqCHl8X3QOANLEGAAaKW6xLOSg775.png" alt="Drawing 3.png"></p><p>jvisualvm CPU 性能采样图</p><p>对于一个 Java 应用来说，除了要关注它的 CPU 指标，垃圾回收方面也是不容忽视的性能点，我们主要关注以下三点。</p><ul><li><p><strong>CPU 分析</strong>：统计方法的执行次数和执行耗时，这些数据可用于分析哪个方法执行时间过长，成为热点等。</p></li><li><p><strong>内存分析</strong>：可以通过内存监视和内存快照等方式进行分析，进而检测内存泄漏问题，优化内存使用情况。</p></li><li><p><strong>线程分析</strong>：可以查看线程的状态变化，以及一些死锁情况。</p></li></ul><h3 id="jmc-获取-java-应用详细性能数据" tabindex="-1">JMC ------ 获取 Java 应用详细性能数据 <a class="header-anchor" href="#jmc-获取-java-应用详细性能数据" aria-label="Permalink to &quot;JMC ------ 获取 Java 应用详细性能数据&quot;">​</a></h3><p>对于我们常用的 HotSpot 来说，有更强大的工具，那就是 JMC。 JMC 集成了一个非常好用的功能：JFR（Java Flight Recorder）。</p><p>Flight Recorder 源自飞机的黑盒子，是用来录制信息然后事后分析的。在 Java11 中，它可以通过 jcmd 命令进行录制，主要包括 configure、check、start、dump、stop 这五个命令，其执行顺序为，start --- dump --- stop，例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">jcmd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pid</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JFR</span><span style="color:#E1E4E8;">.start</span></span>
<span class="line"><span style="color:#E1E4E8;">jcmd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pid</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JFR</span><span style="color:#E1E4E8;">.dump filename</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">recording.jfr</span></span>
<span class="line"><span style="color:#E1E4E8;">jcmd </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">pid</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JFR</span><span style="color:#E1E4E8;">.stop</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">jcmd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pid</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JFR</span><span style="color:#24292E;">.start</span></span>
<span class="line"><span style="color:#24292E;">jcmd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pid</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JFR</span><span style="color:#24292E;">.dump filename</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">recording.jfr</span></span>
<span class="line"><span style="color:#24292E;">jcmd </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pid</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JFR</span><span style="color:#24292E;">.stop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>JFR 功能是建在 JVM 内部的，不需要额外依赖，可以直接使用，它能够监测大量数据。比如，我们提到的锁竞争、延迟、阻塞等；甚至在 JVM 内部，比如 SafePoint、JIT 编译等，也能去分析。</p><p><strong>JMC 集成了 JFR 的功能</strong>，下面介绍一下 JMC 的使用。</p><h4 id="_1-录制" tabindex="-1">1.录制 <a class="header-anchor" href="#_1-录制" aria-label="Permalink to &quot;1.录制&quot;">​</a></h4><p>下图是录制了一个 Tomcat 一分钟之后的结果，从左边的菜单栏即可进入相应的性能界面。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/9C/CgqCHl8X3SyAbYa7AAfd6jZo6t4915.png" alt="Drawing 4.png"></p><p>JMC 录制结果主界面</p><p>通过录制数据，可以清晰了解到某一分钟内，操作系统资源，以及 JVM 内部的性能数据情况。</p><h4 id="_2-线程" tabindex="-1">2.线程 <a class="header-anchor" href="#_2-线程" aria-label="Permalink to &quot;2.线程&quot;">​</a></h4><p>选择相应的线程，即可了解线程的执行情况，比如 Wait、Idle 、Block 等状态和时序。</p><p>以 C2 编译器线程为例，可以看到详细的热点类，以及方法内联后的代码大小。如下图所示，C2 此时正在疯狂运转。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/91/Ciqc1F8X3TWASVq0AAY9V2QKEX8030.png" alt="Drawing 5.png"></p><p>JMC 录制结果 线程界面</p><h4 id="_3-内存" tabindex="-1">3.内存 <a class="header-anchor" href="#_3-内存" aria-label="Permalink to &quot;3.内存&quot;">​</a></h4><p>通过内存界面，可以看到每个时间段内内存的申请情况。在排查内存溢出、内存泄漏等情况时，这个功能非常有用。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/91/Ciqc1F8X3T6AesX5AAcyVYacyeQ529.png" alt="Drawing 6.png"></p><p>JMC 录制结果 内存界面</p><h4 id="_4-锁" tabindex="-1">4.锁 <a class="header-anchor" href="#_4-锁" aria-label="Permalink to &quot;4.锁&quot;">​</a></h4><p>一些竞争非常严重的锁信息，以及一些死锁信息，都可以在锁信息界面中找到。</p><p>可以看到，一些锁的具体 ID，以及关联的线程信息，都可以进行联动分析。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3UeAJ5L_AAQ7-kTs7YM289.png" alt="Drawing 7.png"></p><p>JMC 录制结果 锁信息界面</p><h4 id="_5-文件和-socket" tabindex="-1">5.文件和 Socket <a class="header-anchor" href="#_5-文件和-socket" aria-label="Permalink to &quot;5.文件和 Socket&quot;">​</a></h4><p>文件和 Socket 界面能够监控对 I/O 的读写，界面一目了然。如果你的应用 I/O 操作比较繁重，比如日志打印比较多、网络读写频繁，就可以在这里监控到相应的信息，并能够和执行栈关联起来。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/91/Ciqc1F8X3VGABH4xAAfkaSBZDio750.png" alt="Drawing 8.png"></p><p>JMC 录制结果 文件和 Socket 界面</p><h4 id="_6-方法调用" tabindex="-1">6.方法调用 <a class="header-anchor" href="#_6-方法调用" aria-label="Permalink to &quot;6.方法调用&quot;">​</a></h4><p>这个和 jvisualvm 的功能类似，展示的是方法调用信息和排行。从这里可以看到一些高耗时方法和热点方法。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3WOAYQSCAAVmKbHpuBQ717.png" alt="Drawing 9.png"></p><p>JMC 录制结果 方法调用</p><h4 id="_7-垃圾回收" tabindex="-1">7.垃圾回收 <a class="header-anchor" href="#_7-垃圾回收" aria-label="Permalink to &quot;7.垃圾回收&quot;">​</a></h4><p>如果垃圾回收过于频繁，就会影响应用的性能。JFR 对垃圾回收进行了详细的记录，比如什么时候发生了垃圾回收，用的什么垃圾回收器，每次垃圾回收的耗时，甚至是什么原因引起的等问题，都可以在这里看到。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/92/Ciqc1F8X3X6ACtlVAAgwHnO3oHQ281.png" alt="Drawing 10.png"></p><p>JMC 录制结果 垃圾回收</p><h4 id="_8-jit" tabindex="-1">8.JIT <a class="header-anchor" href="#_8-jit" aria-label="Permalink to &quot;8.JIT&quot;">​</a></h4><p>JIT 编译后的代码，执行速度会特别快，但它需要一个编译过程。编译界面显示了详细的 JIT 编译过程信息，包括生成后的 CodeCache 大小、方法内联信息等。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3Y2AWi8dAAZ8RGTPyoA991.png" alt="Drawing 11.png"></p><p>JMC 录制结果 JIT 信息</p><h4 id="_9-tlab" tabindex="-1">9.TLAB <a class="header-anchor" href="#_9-tlab" aria-label="Permalink to &quot;9.TLAB&quot;">​</a></h4><p>JVM 默认给每个线程开辟一个 buffer 区域，用来加速对象分配，这就是 TLAB（Thread Local Allocation Buffer）的概念。这个 buffer，就放在 Eden 区。</p><p>原理和 Java 语言中的 ThreadLocal 类似，能够避免对公共区的操作，可以减少一些锁竞争。如下图所示的界面，详细地显示了这个分配过程。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3baAW4VFAAaz04YR1w4277.png" alt="Drawing 12.png"></p><p>JMC 录制结果 TLAB 信息</p><p>在后面的课时中，我们会有多个使用此工具的分析案例。</p><h3 id="arthas-获取单个请求的调用链耗时" tabindex="-1">Arthas ------ 获取单个请求的调用链耗时 <a class="header-anchor" href="#arthas-获取单个请求的调用链耗时" aria-label="Permalink to &quot;Arthas ------ 获取单个请求的调用链耗时&quot;">​</a></h3><p>Arthas 是一个 Java 诊断工具，可以排查内存溢出、CPU 飙升、负载高等内容，可以说是一个 jstack、jmap 等命令的大集合。</p><p><img src="https://s0.lgstatic.com/i/image/M00/36/9D/CgqCHl8X3eSAP67rAANG-JDjv2E614.png" alt="Drawing 13.png"></p><p>Arthas 启动界面</p><p>Arthas 支持很多命令，我们以 trace 命令为例。</p><p>有时候，我们统计到某个接口的耗时非常高，但又无法找到具体原因时，就可以使用这个 trace 命令。该命令会从方法执行开始记录整个链路上的执行情况，然后统计每个节点的性能开销，最终以树状打印，很多性能问题一眼就能看出来。</p><p>下面就是一个执行结果示例。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ trace demo.MathGame run</span></span>
<span class="line"><span style="color:#E1E4E8;">Press Q or Ctrl</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">C to abort.</span></span>
<span class="line"><span style="color:#B392F0;">Affect</span><span style="color:#E1E4E8;">(class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cnt</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> , method</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cnt</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) cost in </span><span style="color:#79B8FF;">28</span><span style="color:#E1E4E8;"> ms.</span></span>
<span class="line"><span style="color:#E1E4E8;">\`</span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2019</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">04</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">08;thread_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">main;id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;is_daemon</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;priority</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;TCCL</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sun.misc.Launcher$AppClassLoader@</span><span style="color:#F97583;">3d4eac69</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`</span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;">[0.</span><span style="color:#FDAEB7;font-style:italic;">617465ms</span><span style="color:#E1E4E8;">] demo.MathGame</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        \`</span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;">[0.</span><span style="color:#FDAEB7;font-style:italic;">078946ms</span><span style="color:#E1E4E8;">] demo.MathGame</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">primeFactors</span><span style="color:#E1E4E8;">() #</span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> [throws Exception]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">\`</span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2019</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">12</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">04</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">00</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">09;thread_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">main;id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;is_daemon</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;priority</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;TCCL</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sun.misc.Launcher$AppClassLoader@</span><span style="color:#F97583;">3d4eac69</span></span>
<span class="line"><span style="color:#E1E4E8;">    \`</span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;">[1.</span><span style="color:#FDAEB7;font-style:italic;">276874ms</span><span style="color:#E1E4E8;">] demo.MathGame</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        \`</span><span style="color:#F97583;">---</span><span style="color:#E1E4E8;">[0.</span><span style="color:#FDAEB7;font-style:italic;">03752ms</span><span style="color:#E1E4E8;">] demo.MathGame</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">primeFactors</span><span style="color:#E1E4E8;">() #</span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> [throws Exception]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ trace demo.MathGame run</span></span>
<span class="line"><span style="color:#24292E;">Press Q or Ctrl</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">C to abort.</span></span>
<span class="line"><span style="color:#6F42C1;">Affect</span><span style="color:#24292E;">(class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cnt</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> , method</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cnt</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) cost in </span><span style="color:#005CC5;">28</span><span style="color:#24292E;"> ms.</span></span>
<span class="line"><span style="color:#24292E;">\`</span><span style="color:#D73A49;">---</span><span style="color:#24292E;">ts</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">04</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">45</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">08;thread_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">main;id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;is_daemon</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;priority</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;TCCL</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sun.misc.Launcher$AppClassLoader@</span><span style="color:#D73A49;">3d4eac69</span></span>
<span class="line"><span style="color:#24292E;">    \`</span><span style="color:#D73A49;">---</span><span style="color:#24292E;">[0.</span><span style="color:#B31D28;font-style:italic;">617465ms</span><span style="color:#24292E;">] demo.MathGame</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        \`</span><span style="color:#D73A49;">---</span><span style="color:#24292E;">[0.</span><span style="color:#B31D28;font-style:italic;">078946ms</span><span style="color:#24292E;">] demo.MathGame</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">primeFactors</span><span style="color:#24292E;">() #</span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> [throws Exception]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">\`</span><span style="color:#D73A49;">---</span><span style="color:#24292E;">ts</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">12</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">04</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">00</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">45</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">09;thread_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">main;id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;is_daemon</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;priority</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;TCCL</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sun.misc.Launcher$AppClassLoader@</span><span style="color:#D73A49;">3d4eac69</span></span>
<span class="line"><span style="color:#24292E;">    \`</span><span style="color:#D73A49;">---</span><span style="color:#24292E;">[1.</span><span style="color:#B31D28;font-style:italic;">276874ms</span><span style="color:#24292E;">] demo.MathGame</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        \`</span><span style="color:#D73A49;">---</span><span style="color:#24292E;">[0.</span><span style="color:#B31D28;font-style:italic;">03752ms</span><span style="color:#24292E;">] demo.MathGame</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">primeFactors</span><span style="color:#24292E;">() #</span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> [throws Exception]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>我们在后面的课时中，也会有实例来演示如何找到问题发生的具体原因。</p><h3 id="wrk-获取-web-接口的性能数据" tabindex="-1">wrk ------ 获取 Web 接口的性能数据 <a class="header-anchor" href="#wrk-获取-web-接口的性能数据" aria-label="Permalink to &quot;wrk ------ 获取 Web 接口的性能数据&quot;">​</a></h3><p><a href="https://github.com/wg/wrk" target="_blank" rel="noreferrer">wrk（点击进入 GitHub 网站查看）</a>是一款 HTTP 压测工具，和 ab 命令类似，它也是一个命令行工具。</p><p>我们先来看一下它的执行结果。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Running 30s test @ </span><span style="color:#F97583;">http:</span><span style="color:#6A737D;">//127.0.0.1:8080/index.html</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> threads and </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;"> connections</span></span>
<span class="line"><span style="color:#E1E4E8;">  Thread Stats   Avg      Stdev     Max   </span><span style="color:#F97583;">+/-</span><span style="color:#E1E4E8;"> Stdev</span></span>
<span class="line"><span style="color:#E1E4E8;">    Latency   635.</span><span style="color:#FDAEB7;font-style:italic;">91us</span><span style="color:#E1E4E8;">    0.</span><span style="color:#FDAEB7;font-style:italic;">89ms</span><span style="color:#E1E4E8;">  12.</span><span style="color:#FDAEB7;font-style:italic;">92ms</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">93.69</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">    Req</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Sec    56.</span><span style="color:#FDAEB7;font-style:italic;">20k</span><span style="color:#E1E4E8;">     8.</span><span style="color:#FDAEB7;font-style:italic;">07k</span><span style="color:#E1E4E8;">   62.</span><span style="color:#FDAEB7;font-style:italic;">00k</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">86.54</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">22464657</span><span style="color:#E1E4E8;"> requests in 30.</span><span style="color:#FDAEB7;font-style:italic;">00s</span><span style="color:#E1E4E8;">, 17.</span><span style="color:#FDAEB7;font-style:italic;">76GB</span><span style="color:#E1E4E8;"> read</span></span>
<span class="line"><span style="color:#E1E4E8;">Requests</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sec</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">748868.53</span></span>
<span class="line"><span style="color:#E1E4E8;">Transfer</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sec</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">    606.</span><span style="color:#FDAEB7;font-style:italic;">33MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Running 30s test @ </span><span style="color:#D73A49;">http:</span><span style="color:#6A737D;">//127.0.0.1:8080/index.html</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> threads and </span><span style="color:#005CC5;">400</span><span style="color:#24292E;"> connections</span></span>
<span class="line"><span style="color:#24292E;">  Thread Stats   Avg      Stdev     Max   </span><span style="color:#D73A49;">+/-</span><span style="color:#24292E;"> Stdev</span></span>
<span class="line"><span style="color:#24292E;">    Latency   635.</span><span style="color:#B31D28;font-style:italic;">91us</span><span style="color:#24292E;">    0.</span><span style="color:#B31D28;font-style:italic;">89ms</span><span style="color:#24292E;">  12.</span><span style="color:#B31D28;font-style:italic;">92ms</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">93.69</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">    Req</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Sec    56.</span><span style="color:#B31D28;font-style:italic;">20k</span><span style="color:#24292E;">     8.</span><span style="color:#B31D28;font-style:italic;">07k</span><span style="color:#24292E;">   62.</span><span style="color:#B31D28;font-style:italic;">00k</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">86.54</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">22464657</span><span style="color:#24292E;"> requests in 30.</span><span style="color:#B31D28;font-style:italic;">00s</span><span style="color:#24292E;">, 17.</span><span style="color:#B31D28;font-style:italic;">76GB</span><span style="color:#24292E;"> read</span></span>
<span class="line"><span style="color:#24292E;">Requests</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sec</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">748868.53</span></span>
<span class="line"><span style="color:#24292E;">Transfer</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sec</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">    606.</span><span style="color:#B31D28;font-style:italic;">33MB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>可以看到，wrk 统计了常见的性能指标，对 Web 服务性能测试非常有用。同时，wrk 支持 Lua 脚本，用来控制 setup、init、delay、request、response 等函数，可以更好地模拟用户请求。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>为了获取更多性能数据，我们在本课时介绍了以下 5 款工具。</p><ul><li><p><strong>nmon</strong> 获取系统性能数据；</p></li><li><p><strong>jvisualvm</strong> 获取 JVM 性能数据；</p></li><li><p><strong>jmc</strong> 获取 Java 应用详细性能数据；</p></li><li><p><strong>arthas</strong> 获取单个请求的调用链耗时；</p></li><li><p><strong>wrk</strong> 获取 Web 接口的性能数据。</p></li></ul><p>可以看出，这些工具有偏低层的、有偏应用的、有偏统计的、有偏细节的，在定位性能问题时，你需要灵活地使用这些工具，既从全貌上掌握应用的属性，也从细节上找到性能的瓶颈，对应用性能进行全方位的掌控。</p><p>这些工具能够很好地帮助我们找到系统的瓶颈点，那么对代码进行优化时，如何分析优化效果呢？又如何对代码片段进行快速、专业的测试呢？下一课时，我将介绍&quot;基准测试 JMH&quot;，来解答以上问题。</p>`,100),e=[o];function t(r,c,y,i,E,m){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{F as __pageData,h as default};
