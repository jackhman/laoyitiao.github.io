import{_ as o,j as e,o as t,g as c,k as n,s as l,h as p,Q as a}from"./chunks/framework.b3d8e22e.js";const D=JSON.parse('{"title":"SwiftUI 的状态管理 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6687) 32  UI 替换：如何使用 SwiftUI 快速替换原有 UI？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6687) 32  UI 替换：如何使用 SwiftUI 快速替换原有 UI？.md","lastUpdated":1696417798000}'),r={name:"posts/frontEnd/048_iOS开发进阶/(6687) 32  UI 替换：如何使用 SwiftUI 快速替换原有 UI？.md"},E=l("p",null,"如今苹果公司力推的 SwiftUI 越来越流行，例如 Widget 等一些新功能只能使用 SwiftUI 进行开发，再加上 SwiftUI 又变得越来越稳定，可以说现在是学习和使用 SwiftUI 的良好时机。但并不是每个 App 都可以很方便地升级技术栈，幸运的是，Moments App 使用了 MVVM 的架构，该架构为我们提供了良好的灵活性和可扩展性，下面我们一起看看如何把 Moments App 的 UI 层从 UIKit 替换成 SwiftUI。",-1),y=l("p",null,[p("在前面"),l("a",{href:"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=657&sid=20-h5Url-0&buyFrom=2&pageId=1pz4#/detail/pc?id=6669&fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"第 16 讲"),p("里，我们讲了如何使用 MVVM 模式来架构 Moments App。在这一讲中，我准备把 UIViewController 和 UIView 从 View 层移除，替换成 SwiftUI 的实现，如下图所示：")],-1),i=a("",28),d=a("",9),F=a("",17),C=a("",13),g=a("",14),u=a("",9);function B(m,w,h,b,v,f){const s=e("Image");return t(),c("div",null,[E,y,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/44/1B/Cgp9HWC90WWALsfHAAMRfIFPUjA184.png"}),i,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/44/23/CioPOWC90amACsvfAAHhOfaicTI452.png"}),d,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/44/1B/Cgp9HWC90b-AAGkCAAdM0BD6GgE546.png"}),F,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/44/1B/Cgp9HWC90d-AH97-AAYCP8Dw-HE675.png"}),C,n(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M01/44/1C/Cgp9HWC90huAF_a6AAIy6uuggTs430.png"}),g,n(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M00/44/24/CioPOWC90g2ANeBIAAWrFoNi17Q433.png"}),u])}const I=o(r,[["render",B]]);export{D as __pageData,I as default};
