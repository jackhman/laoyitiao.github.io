import{_ as p,j as _,o as n,g as e,k as o,h as t,Q as l,s}from"./chunks/framework.e0c66c3f.js";const J=JSON.parse('{"title":"案例背景 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/架构设计面试精讲_文档/(6053) 04  亿级商品存储下，如何深度回答分布式系统的原理性问题？.md","filePath":"posts/backEnd/架构设计面试精讲_文档/(6053) 04  亿级商品存储下，如何深度回答分布式系统的原理性问题？.md","lastUpdated":1696338709000}'),i={name:"posts/backEnd/架构设计面试精讲_文档/(6053) 04  亿级商品存储下，如何深度回答分布式系统的原理性问题？.md"},c=l("",12),h=s("h3",{id:"案例解答",tabindex:"-1"},[t("案例解答 "),s("a",{class:"header-anchor",href:"#案例解答","aria-label":'Permalink to "案例解答"'},"​")],-1),r=s("p",null,'就如我开篇提到的，面试官往往会把"案例背景中"的四个问题串联到具体的场景中，以具体的场景设问，比如"假设你是一家电商网站的架构师，现在要将原有单点上百 G 的商品做数据重构，存储到多个节点上，你会如何设计存储策略 ？"',-1),g=s("p",null,[t("因为是商品存储扩容的设计问题，很容易想到做数据的分库分表，也就是重新设计数据的分片规则，常用的分片策略有两种，即 Hash（哈希）分片和 Range（范围）分片。"),s("strong",null,"从这一点出发会考察你Hash（哈希）分片的具体实现原理。")],-1),d=s("p",null,"商品表包括主键、商品 ID、商品名称、所属品类和上架时间等字段。如果以商品 ID 作为关键字进行分片，系统会通过一个 Hash 函数计算商品 ID 的 Hash 值，然后取模，就能得到对应的分片。模为 4 就表示系统一共有四个节点，每个节点作为一个分片。",-1),u=s("p",null,'假设Hash 函数为 "商品 ID % 节点个数 4"，通过计算可以得到每个数据应该存入的节点：计算结果为 0 的数据存入节点 A；结果为 1 的数据存入节点 B；结果为 2 的数据存入节点 C；计算为 3 的数据存储节点 D。',-1),A=s("p",null,"商品数据 Hash 存储",-1),C=s("p",null,"可以看出，Hash 分片的优点在于可以保证数据非常均匀地分布到多个分片上，并且实现起来简单，但扩展性很差，因为分片的计算方式就是直接用节点取模，节点数量变动，就需要重新计算 Hash，就会导致大规模数据迁移的工作。",-1),m=s("p",null,[s("strong",null,"这时，就会延伸出第二个问题，如何解决 Hash 分片的缺点，既保证数据均匀分布，又保证扩展性？")],-1),P=s("p",null,"答案就是一致性 Hash ：它是指将存储节点和数据都映射到一个首尾相连的哈希环上。存储节点一般可以根据 IP 地址进行 Hash 计算，数据的存储位置是从数据映射在环上的位置开始，依照顺时针方向所找到的第一个存储节点。",-1),H=s("p",null,"在具体操作过程中，通常会选择带有虚拟节点的一致性 Hash。假设在这个案例中将虚拟节点的数量设定为 10 个，就形成 10 个分片，而这 10 个分片构成了整个 Hash 空间。现在让 A 节点对应虚拟节点 0 ~ 3，B 节点对应虚拟节点 4 ~ 6，C 节点对应虚拟节点 7 ~ 8，D 节点对应虚拟节点 9。",-1),T=s("p",null,'同样根据哈希函数为 "商品 ID % 节点个数 10"得到每一个商品在 Hash 环上的位置，然后根据顺时针查找最近的存储节点，即数据实际映射的位置。计算结果为：0 ~ 3 的数据存入节点 A；结果为 4 ~ 6 的数据存入节点 B；结果为 7 ~ 8 的数据存入节点 C；计算为 9 的数据存储节点 D。',-1),f=s("p",null,"商品一致性Hash存储",-1),D=s("p",null,"当我们新增一台服务器，即节点 E 时，受影响的数据仅仅是新服务器到所处环空间中前一台服务器（即沿着逆时针方向的第一台服务器）之间的数据。结合我们的示例，只有商品 100 和商品 101 从节点 A 被移动到节点 E，其他节点的数据保持不变。此后，节点 A 只存储 Hash 值为 2 和 3 的商品，节点 E 存储 Hash 值为 0 和 1 的商品。",-1),x=s("p",null,"商品数据迁移",-1),R=s("p",null,"一致性 Hash 分片的优点是数据可以较为均匀地分配到各节点，其并发写入性能表现也不错。如果你应聘的是初级研发工程师，面试官通常不会追问下去，但是应聘中高级别研发的话，这样的回答还不够，你还要进一步阐述对分布式数据存储的理解。",-1),E=s("p",null,[t("要知道，虽然一致性 Hash 提升了稳定性，使节点的加入和退出不会造成大规模的数据迁移，但本质上 Hash 分片是一种静态的分片方式，必须要提前设定分片的最大规模，"),s("strong",null,"而且无法避免单一热点问题，"),t(" 某一数据被海量并发请求后，不论如何进行 Hash，数据也只能存在一个节点上，这势必会带来热点请求问题。比如案例中的电商商品，如果某些商品卖得非常火爆，通过 Hash 分片的方式很难针对热点商品做单独的架构设计。")],-1),B=s("p",null,[t("所以，如果面试官想深入考核你对分布式数据存储的架构设计，一般会追问你："),s("strong",null,"如何解决单一热点问题？")],-1),I=s("p",null,[s("strong",null,"答案是做 Range（范围）分片。"),t(' 与 Hash 分片不同的是，Range 分片能结合业务逻辑规则，例如，我们用 "Category（商品类目）" 作为关键字进行分片时，不是以统一的商品一级类目为标准，而是可以按照一、二、三级类目进行灵活分片。例如，对于京东强势的 3C 品类，可以按照 3C 的三级品类设置分片；对于弱势品类，可以先按照一级品类进行分片，这样会让分片间的数据更加平衡。')],-1),q=l("",6),S=l("",11),k=s("p",null,"从图中你可以看到，节点 A 向节点 B、C 发送新数据，节点 B 收到新数据后，变成了活跃节点，然后节点 B 向节点 C、D 发送新数据。",-1),M=s("p",null,"到此，我们对一致性共识算法做个总结，共识算法的选择和数据副本数量的多少息息相关，如果副本少、参与共识的节点少，推荐采用广播方式，如 Paxos、Raft 等协议。如果副本多、参与共识的节点多，那就更适合采用 Gossip 这种最终一致性协议。",-1),b=s("h3",{id:"总结",tabindex:"-1"},[t("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),V=s("p",null,"总的来说，今天我通过电商场景下商品的存储设计，一步步延伸出了分布式系统的数据存储、分片，与数据一致性等分布式问题，它们包含了分布式系统知识体系中最基础的理论，也是最复杂的问题。今天这一讲，我强调这样几点：",-1),G=s("ul",null,[s("li",null,[s("p",null,'面试官往往会通过"海量数据的存储设计"问题考察候选人对分布式系统技术的掌握情况，而回答好基于 Hash 取模、一致性 Hash 实现分库分表的解决方案，是你能否通过这第一关的关键。')]),s("li",null,[s("p",null,"当你掌握了常规的 Hash 取模分片方式后，面试官会引入一个场景问题（如大促热点问题）来考察你解决架构设计问题的思路。因为分布式系统架构设计离不开系统可用性与一致性之间的权衡，所以你的解题思路要站在这两个技术点之上。")]),s("li",null,[s("p",null,"如果面试官满意你的表现，会进一步考察你算法原理，所以对于分布式系统中的一致性共识算法，如 Basic Paxos、Multi Paxos、Raft、Zab、Gossip 也是你要提前掌握的。")])],-1),N=s("p",null,"本节课的思考题是：你能介绍一下 Basic Paxos 和 Multi Paxos 的区别吗？欢迎你把答案写到留言区，和我一起讨论。",-1);function F(y,O,v,L,w,Q){const a=_("Image");return n(),e("div",null,[c,o(a,{alt:"Lark20210106-170227.png",src:"https://s0.lgstatic.com/i/image/M00/8C/E8/CgqCHl_1fLCAU01mAAGC5GguKkM382.png"}),h,r,g,d,u,o(a,{alt:"12.png",src:"https://s0.lgstatic.com/i/image2/M01/05/43/Cip5yF_-eayAB5wqAAJhp0sQN50761.png"}),t(),A,C,m,P,H,T,o(a,{alt:"13.png",src:"https://s0.lgstatic.com/i/image2/M01/05/43/Cip5yF_-ebmAAIvTAAOI5nij8GY653.png"}),t(),f,D,o(a,{alt:"14.png",src:"https://s0.lgstatic.com/i/image2/M01/05/43/Cip5yF_-ecOAOYQuAAH1dFZCfd0612.png"}),t(),x,R,E,B,I,o(a,{alt:"15.png",src:"https://s0.lgstatic.com/i/image2/M01/05/45/CgpVE1_-ed6AfUBMAAFtDc6PlH4881.png"}),t(),q,o(a,{alt:"16.png",src:"https://s0.lgstatic.com/i/image2/M01/05/43/Cip5yF_-eeuAR6ptAAGr8tkm4aA309.png"}),t(),S,o(a,{alt:"17.png",src:"https://s0.lgstatic.com/i/image/M00/8D/5C/Ciqc1F_-ehOAYwr5AADJW3KSBTc125.png"}),k,M,o(a,{alt:"Lark20210113-120243.png",src:"https://s0.lgstatic.com/i/image/M00/8D/67/CgqCHl_-eiqASOXFAAD1S3fPmgw076.png"}),b,V,G,N])}const U=p(i,[["render",F]]);export{J as __pageData,U as default};
