import{_ as o,j as e,o as t,g as c,k as n,h as s,Q as l,s as p}from"./chunks/framework.4e7d56ce.js";const I=JSON.parse('{"title":"20SpringBoot服务性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4197) 20  SpringBoot 服务性能优化.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4197) 20  SpringBoot 服务性能优化.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4197) 20  SpringBoot 服务性能优化.md"},E=l(`<h1 id="_20springboot服务性能优化" tabindex="-1">20SpringBoot服务性能优化 <a class="header-anchor" href="#_20springboot服务性能优化" aria-label="Permalink to &quot;20SpringBoot服务性能优化&quot;">​</a></h1><p>在开始对 SpringBoot 服务进行性能优化之前，你需要做一些准备，把 SpringBoot 服务的一些数据暴露出来。比如，你的服务用到了缓存，就需要把缓存命中率这些数据进行收集；用到了数据库连接池，就需要把连接池的参数给暴露出来。</p><p>我们这里采用的监控工具是 Prometheus，它是一个是时序数据库，能够存储我们的指标。SpringBoot 可以非常方便地接入到 Prometheus 中。</p><h3 id="springboot-如何开启监控" tabindex="-1">SpringBoot 如何开启监控？ <a class="header-anchor" href="#springboot-如何开启监控" aria-label="Permalink to &quot;SpringBoot 如何开启监控？&quot;">​</a></h3><p>创建一个 SpringBoot 项目后，首先加入 maven 依赖。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-actuator&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;io.micrometer&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;micrometer-registry-prometheus&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;io.micrometer&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;micrometer-core&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;"> &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-actuator&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;io.micrometer&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;micrometer-registry-prometheus&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;io.micrometer&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;micrometer-core&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;"> &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后，我们需要在 application.properties 配置文件中，开放相关的监控接口。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">management.endpoint.metrics.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">management.endpoints.web.exposure.include</span><span style="color:#F97583;">=*</span></span>
<span class="line"><span style="color:#E1E4E8;">management.endpoint.prometheus.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">management.metrics.export.prometheus.enabled</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">management.endpoint.metrics.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">management.endpoints.web.exposure.include</span><span style="color:#D73A49;">=*</span></span>
<span class="line"><span style="color:#24292E;">management.endpoint.prometheus.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">management.metrics.export.prometheus.enabled</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span></code></pre></div><p>启动之后，我们就可以通过访问<a href="http://localhost:8080/actuator/prometheus" target="_blank" rel="noreferrer">监控接口</a>来获取监控数据。</p>`,9),y=l(`<p>想要监控业务数据也是比较简单的，你只需要注入一个 MeterRegistry 实例即可，下面是一段示例代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">MeterRegistry registry;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/test&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@ResponseBody</span></span>
<span class="line"><span style="color:#E1E4E8;">public String </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    registry.</span><span style="color:#B392F0;">counter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;from&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;method&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ).</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ok&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@Autowired</span></span>
<span class="line"><span style="color:#24292E;">MeterRegistry registry;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">public String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    registry.</span><span style="color:#6F42C1;">counter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;from&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;method&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ).</span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ok&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从监控连接中，我们可以找到刚刚添加的监控信息。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">test_total{from</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="color:#E1E4E8;">,method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">,} </span><span style="color:#79B8FF;">5.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">test_total{from</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">,method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">,} </span><span style="color:#005CC5;">5.0</span></span></code></pre></div><p>这里简单介绍一下流行的<strong>Prometheus 监控体系</strong>，Prometheus 使用拉的方式获取监控数据，这个暴露数据的过程可以交给功能更加齐全的 telegraf 组件。</p>`,5),i=p("p",null,"如上图，我们通常使用 Grafana 进行监控数据的展示，使用 AlertManager 组件进行提前预警。这一部分的搭建工作不是我们的重点，感兴趣的同学可自行研究。",-1),g=p("p",null,"下图便是一张典型的监控图，可以看到 Redis 的缓存命中率等情况。",-1),d=l('<h3 id="java-生成火焰图" tabindex="-1">Java 生成火焰图 <a class="header-anchor" href="#java-生成火焰图" aria-label="Permalink to &quot;Java 生成火焰图&quot;">​</a></h3><p><strong>火焰图</strong>是用来分析程序运行瓶颈的工具。</p><p>火焰图也可以用来分析 Java 应用。可以从 <a href="https://github.com/jvm-profiling-tools/async-profiler" target="_blank" rel="noreferrer">github</a> 上下载 async-profiler 的压缩包进行相关操作。比如，我们把它解压到 /root/ 目录，然后以 javaagent 的方式来启动 Java 应用，命令行如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java </span><span style="color:#F97583;">-</span><span style="color:#B392F0;">agentpath</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">root</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">build</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">libasyncProfiler.so</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">start,svg,file</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">profile.svg </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jar spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">petclinic</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2.3</span><span style="color:#E1E4E8;">.1.</span><span style="color:#79B8FF;">BUILD</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">SNAPSHOT</span><span style="color:#E1E4E8;">.jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java </span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">agentpath</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">root</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">build</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">libasyncProfiler.so</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">start,svg,file</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">profile.svg </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jar spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">petclinic</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2.3</span><span style="color:#24292E;">.1.</span><span style="color:#005CC5;">BUILD</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">SNAPSHOT</span><span style="color:#24292E;">.jar</span></span></code></pre></div><p>运行一段时间后，停止进程，可以看到在当前目录下，生成了 profile.svg 文件，这个文件是可以用浏览器打开的。</p><p>如下图所示，纵向，表示的是调用栈的深度；横向，表明的是消耗的时间。所以格子的宽度越大，越说明它可能是一个瓶颈。一层层向下浏览，即可找到需要优化的目标。</p>',6),F=p("h3",{id:"优化思路",tabindex:"-1"},[s("优化思路 "),p("a",{class:"header-anchor",href:"#优化思路","aria-label":'Permalink to "优化思路"'},"​")],-1),C=p("p",null,"对一个普通的 Web 服务来说，我们来看一下，要访问到具体的数据，都要经历哪些主要的环节？",-1),h=p("p",null,"如下图，在浏览器中输入相应的域名，需要通过 DNS 解析到具体的 IP 地址上，为了保证高可用，我们的服务一般都会部署多份，然后使用 Nginx 做反向代理和负载均衡。",-1),u=l(`<p>Nginx 根据资源的特性，会承担一部分动静分离的功能。其中，动态功能部分，会进入我们的SpringBoot 服务。</p><p>SpringBoot 默认使用内嵌的 tomcat 作为 Web 容器，使用典型的 MVC 模式，最终访问到我们的数据。</p><h3 id="http-优化" tabindex="-1">HTTP 优化 <a class="header-anchor" href="#http-优化" aria-label="Permalink to &quot;HTTP 优化&quot;">​</a></h3><p>下面我们举例来看一下，哪些动作能够加快网页的获取。为了描述方便，我们仅讨论 HTTP1.1 协议的。</p><p><strong>1.使用 CDN 加速文件获取</strong></p><p>比较大的文件，尽量使用 CDN（Content Delivery Network）分发，甚至是一些常用的前端脚本、样式、图片等，都可以放到 CDN 上。CDN 通常能够加快这些文件的获取，网页加载也更加迅速。</p><p><strong>2.合理设置 Cache-Control 值</strong></p><p>浏览器会判断 HTTP 头 Cache-Control 的内容，用来决定是否使用浏览器缓存，这在管理一些静态文件的时候，非常有用，相同作用的头信息还有 Expires。Cache-Control 表示多久之后过期；Expires 则表示什么时候过期。</p><p>这个参数可以在 Nginx 的配置文件中进行设置。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">location </span><span style="color:#F97583;">~*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">\\.(ico</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">gif</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">jpg</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">jpeg</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">png)$ { </span></span>
<span class="line"><span style="color:#E1E4E8;">            # 缓存1年</span></span>
<span class="line"><span style="color:#E1E4E8;">            add_header </span><span style="color:#79B8FF;">Cache</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache, max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">31536000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">location </span><span style="color:#D73A49;">~*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">^</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">\\.(ico</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">gif</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">jpg</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">jpeg</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">png)$ { </span></span>
<span class="line"><span style="color:#24292E;">            # 缓存1年</span></span>
<span class="line"><span style="color:#24292E;">            add_header </span><span style="color:#005CC5;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache, max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">31536000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>3.减少单页面请求域名的数量</strong></p><p>减少每个页面请求的域名数量，尽量保证在 4 个之内。这是因为，浏览器每次访问后端的资源，都需要先查询一次 DNS，然后找到 DNS 对应的 IP 地址，再进行真正的调用。</p><p>DNS 有多层缓存，比如浏览器会缓存一份、本地主机会缓存、ISP 服务商缓存等。从 DNS 到 IP 地址的转变，通常会花费 20-120ms 的时间。减少域名的数量，可加快资源的获取。</p><p><strong>4.开启 gzip</strong></p><p>开启 gzip，可以先把内容压缩后，浏览器再进行解压。由于减少了传输的大小，会减少带宽的使用，提高传输效率。</p><p>在 nginx 中可以很容易地开启，配置如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gzip on;</span></span>
<span class="line"><span style="color:#E1E4E8;">gzip_min_length 1k;</span></span>
<span class="line"><span style="color:#E1E4E8;">gzip_buffers </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> 16k;</span></span>
<span class="line"><span style="color:#E1E4E8;">gzip_comp_level </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">gzip_http_version </span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">gzip_types text</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">plain application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">javascript text</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">css;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gzip on;</span></span>
<span class="line"><span style="color:#24292E;">gzip_min_length 1k;</span></span>
<span class="line"><span style="color:#24292E;">gzip_buffers </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> 16k;</span></span>
<span class="line"><span style="color:#24292E;">gzip_comp_level </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">gzip_http_version </span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">gzip_types text</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">plain application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">javascript text</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">css;</span></span></code></pre></div><p><strong>5.对资源进行压缩</strong></p><p>对 JavaScript 和 CSS，甚至是 HTML 进行压缩。道理类似，现在流行的前后端分离模式，一般都是对这些资源进行压缩的。</p><p><strong>6.使用 keepalive</strong></p><p>由于连接的创建和关闭，都需要耗费资源。用户访问我们的服务后，后续也会有更多的互动，所以保持长连接可以显著减少网络交互，提高性能。</p><p>nginx 默认开启了对客户端的 keep avlide 支持，你可以通过下面两个参数来调整它的行为。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http {</span></span>
<span class="line"><span style="color:#E1E4E8;">    keepalive_timeout  120s 120s;</span></span>
<span class="line"><span style="color:#E1E4E8;">    keepalive_requests </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http {</span></span>
<span class="line"><span style="color:#24292E;">    keepalive_timeout  120s 120s;</span></span>
<span class="line"><span style="color:#24292E;">    keepalive_requests </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>nginx 与后端 upstream 的长连接，需要手工开启，参考配置如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">location </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">       proxy_pass </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//backend;</span></span>
<span class="line"><span style="color:#E1E4E8;">       proxy_http_version </span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">       proxy_set_header Connection </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">location </span><span style="color:#D73A49;">~</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">       proxy_pass </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//backend;</span></span>
<span class="line"><span style="color:#24292E;">       proxy_http_version </span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">       proxy_set_header Connection </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="自定义-web-容器" tabindex="-1">自定义 Web 容器 <a class="header-anchor" href="#自定义-web-容器" aria-label="Permalink to &quot;自定义 Web 容器&quot;">​</a></h3><p>如果你的项目并发量比较高，想要修改最大线程数、最大连接数等配置信息，可以通过自定义Web 容器的方式，代码如下所示。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">SpringBootApplication</span><span style="color:#E1E4E8;">(proxyBeanMethods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebServerFactoryCustomizer</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ConfigurableServletWebServerFactory</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(PetClinicApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customize</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ConfigurableServletWebServerFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">factory</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TomcatServletWebServerFactory f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (TomcatServletWebServerFactory) factory;</span></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">setProtocol</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        f.</span><span style="color:#B392F0;">addConnectorCustomizers</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Http11NioProtocol protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Http11NioProtocol) c.</span><span style="color:#B392F0;">getProtocolHandler</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            protocol.setMaxConnections(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            protocol.setMaxThreads(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            protocol.setSelectorTimeout(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            protocol.setSessionTimeout(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            protocol.setConnectionTimeout(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">SpringBootApplication</span><span style="color:#24292E;">(proxyBeanMethods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebServerFactoryCustomizer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ConfigurableServletWebServerFactory</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#E36209;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(PetClinicApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customize</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ConfigurableServletWebServerFactory</span><span style="color:#24292E;"> </span><span style="color:#E36209;">factory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        TomcatServletWebServerFactory f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TomcatServletWebServerFactory) factory;</span></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">setProtocol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        f.</span><span style="color:#6F42C1;">addConnectorCustomizers</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Http11NioProtocol protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Http11NioProtocol) c.</span><span style="color:#6F42C1;">getProtocolHandler</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            protocol.setMaxConnections(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            protocol.setMaxThreads(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            protocol.setSelectorTimeout(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            protocol.setSessionTimeout(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            protocol.setConnectionTimeout(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意上面的代码，我们设置了它的协议为 org.apache.coyote.http11.Http11Nio2Protocol，意思就是开启了 Nio2。这个参数在 Tomcat 8.0之后才有，开启之后会增加一部分性能。</p><p>对比如下（测试项目代码见 <a href="https://gitee.com/xjjdog/tuning-lagou-res/tree/master/tuning-020/spring-petclinic-main" target="_blank" rel="noreferrer">spring-petclinic-main</a>）：</p><p>默认。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root</span><span style="color:#F97583;">@localhost</span><span style="color:#E1E4E8;"> wrk2</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">master]# .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wrk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t2 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c100 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d30s </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">R2000</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//172.16.1.57:8080/owners?lastName=</span></span>
<span class="line"><span style="color:#79B8FF;">Running</span><span style="color:#E1E4E8;"> 30s test @ http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//172.16.1.57:8080/owners?lastName=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> threads and </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> connections</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;"> calibration</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mean lat.</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4588.</span><span style="color:#E1E4E8;">131ms, rate sampling interval</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 16277ms</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;"> calibration</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mean lat.</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4647.</span><span style="color:#E1E4E8;">927ms, rate sampling interval</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 16285ms</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Stats</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Avg</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Stdev</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">Max</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">+/-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Stdev</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Latency</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">16.</span><span style="color:#E1E4E8;">49s     </span><span style="color:#79B8FF;">4.</span><span style="color:#E1E4E8;">98s   </span><span style="color:#79B8FF;">27.</span><span style="color:#E1E4E8;">34s    </span><span style="color:#79B8FF;">63.90</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Req</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">Sec</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">106.50</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">1.50</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">108.00</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">100.00</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">6471</span><span style="color:#E1E4E8;"> requests </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30.</span><span style="color:#E1E4E8;">03s, </span><span style="color:#79B8FF;">39.</span><span style="color:#E1E4E8;">31MB read</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Socket</span><span style="color:#E1E4E8;"> errors</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> connect </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, read </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, write </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, timeout </span><span style="color:#79B8FF;">60</span></span>
<span class="line"><span style="color:#79B8FF;">Requests</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sec</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">215.51</span></span>
<span class="line"><span style="color:#79B8FF;">Transfer</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sec</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">31MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root</span><span style="color:#D73A49;">@localhost</span><span style="color:#24292E;"> wrk2</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">master]# .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wrk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c100 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d30s </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">R2000</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//172.16.1.57:8080/owners?lastName=</span></span>
<span class="line"><span style="color:#005CC5;">Running</span><span style="color:#24292E;"> 30s test @ http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//172.16.1.57:8080/owners?lastName=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> threads and </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> connections</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;"> calibration</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mean lat.</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4588.</span><span style="color:#24292E;">131ms, rate sampling interval</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 16277ms</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;"> calibration</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mean lat.</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4647.</span><span style="color:#24292E;">927ms, rate sampling interval</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 16285ms</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Stats</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">Avg</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">Stdev</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">Max</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">+/-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Stdev</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Latency</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">16.</span><span style="color:#24292E;">49s     </span><span style="color:#005CC5;">4.</span><span style="color:#24292E;">98s   </span><span style="color:#005CC5;">27.</span><span style="color:#24292E;">34s    </span><span style="color:#005CC5;">63.90</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Req</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">Sec</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">106.50</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">1.50</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">108.00</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">100.00</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">6471</span><span style="color:#24292E;"> requests </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30.</span><span style="color:#24292E;">03s, </span><span style="color:#005CC5;">39.</span><span style="color:#24292E;">31MB read</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Socket</span><span style="color:#24292E;"> errors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> connect </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, read </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, write </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, timeout </span><span style="color:#005CC5;">60</span></span>
<span class="line"><span style="color:#005CC5;">Requests</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sec</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">215.51</span></span>
<span class="line"><span style="color:#005CC5;">Transfer</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sec</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">31MB</span></span></code></pre></div><p>Nio2。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root</span><span style="color:#F97583;">@localhost</span><span style="color:#E1E4E8;"> wrk2</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">master]# .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wrk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">t2 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c100 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d30s </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">R2000</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//172.16.1.57:8080/owners?lastName=</span></span>
<span class="line"><span style="color:#79B8FF;">Running</span><span style="color:#E1E4E8;"> 30s test @ http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//172.16.1.57:8080/owners?lastName=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> threads and </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> connections</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;"> calibration</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mean lat.</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4358.</span><span style="color:#E1E4E8;">805ms, rate sampling interval</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 15835ms</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;"> calibration</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> mean lat.</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4622.</span><span style="color:#E1E4E8;">087ms, rate sampling interval</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 16293ms</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Thread</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Stats</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">Avg</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Stdev</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">Max</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">+/-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Stdev</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Latency</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">17.</span><span style="color:#E1E4E8;">47s     </span><span style="color:#79B8FF;">4.</span><span style="color:#E1E4E8;">98s   </span><span style="color:#79B8FF;">26.</span><span style="color:#E1E4E8;">90s    </span><span style="color:#79B8FF;">57.69</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Req</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">Sec</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">125.50</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">2.50</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">128.00</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">100.00</span><span style="color:#F97583;">%</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">7469</span><span style="color:#E1E4E8;"> requests </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30.</span><span style="color:#E1E4E8;">04s, </span><span style="color:#79B8FF;">45.</span><span style="color:#E1E4E8;">38MB read</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Socket</span><span style="color:#E1E4E8;"> errors</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> connect </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, read </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, write </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, timeout </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#79B8FF;">Requests</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sec</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">248.64</span></span>
<span class="line"><span style="color:#79B8FF;">Transfer</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sec</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">51MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root</span><span style="color:#D73A49;">@localhost</span><span style="color:#24292E;"> wrk2</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">master]# .</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wrk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">t2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c100 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d30s </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">R2000</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//172.16.1.57:8080/owners?lastName=</span></span>
<span class="line"><span style="color:#005CC5;">Running</span><span style="color:#24292E;"> 30s test @ http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//172.16.1.57:8080/owners?lastName=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> threads and </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> connections</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;"> calibration</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mean lat.</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4358.</span><span style="color:#24292E;">805ms, rate sampling interval</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 15835ms</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;"> calibration</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mean lat.</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4622.</span><span style="color:#24292E;">087ms, rate sampling interval</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 16293ms</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Thread</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Stats</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">Avg</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">Stdev</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">Max</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">+/-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Stdev</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Latency</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">17.</span><span style="color:#24292E;">47s     </span><span style="color:#005CC5;">4.</span><span style="color:#24292E;">98s   </span><span style="color:#005CC5;">26.</span><span style="color:#24292E;">90s    </span><span style="color:#005CC5;">57.69</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Req</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">Sec</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">125.50</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">2.50</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">128.00</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">100.00</span><span style="color:#D73A49;">%</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">7469</span><span style="color:#24292E;"> requests </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30.</span><span style="color:#24292E;">04s, </span><span style="color:#005CC5;">45.</span><span style="color:#24292E;">38MB read</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Socket</span><span style="color:#24292E;"> errors</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> connect </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, read </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, write </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, timeout </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#005CC5;">Requests</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sec</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">248.64</span></span>
<span class="line"><span style="color:#005CC5;">Transfer</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sec</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">51MB</span></span></code></pre></div><p>你甚至可以将 tomcat 替换成 undertow。undertow 也是一个 Web 容器，更加轻量级一些，占用的内存更少，启动的守护进程也更少，更改方式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">exclusions</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">exclusion</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-tomcat&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">exclusion</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">exclusions</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-undertow&lt;/</span><span style="color:#79B8FF;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-tomcat&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-undertow&lt;/</span><span style="color:#005CC5;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>其实，对于 tomcat 优化最为有效的，还是 JVM 参数的配置，你可以参考上一课时的内容进行调整。</p><p>比如，使用下面的参数启动，QPS 由 248 上升到 308。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-</span><span style="color:#B392F0;">XX</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">UseG1GC </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Xmx2048m </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Xms2048m </span><span style="color:#F97583;">-</span><span style="color:#B392F0;">XX</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">AlwaysPreTouch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">XX</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">UseG1GC </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Xmx2048m </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Xms2048m </span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">XX</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">AlwaysPreTouch</span></span></code></pre></div><h3 id="skywalking" tabindex="-1">Skywalking <a class="header-anchor" href="#skywalking" aria-label="Permalink to &quot;Skywalking&quot;">​</a></h3><p>对于一个 web 服务来说，最缓慢的地方就在于数据库操作。所以，使用&quot;07 | 案例分析：无处不在的缓存，高并发系统的法宝&quot;和&quot;08 | 案例分析：Redis 如何助力秒杀业务&quot;提供的本地缓存和分布式缓存优化，能够获得最大的性能提升。</p><p>对于如何定位到复杂分布式环境中的问题，我这里想要分享另外一个工具：Skywalking。</p><p>Skywalking 是使用探针技术（JavaAgent）来实现的。通过在 Java 的启动参数中，加入 javaagent 的 Jar 包，即可将性能数据和调用链数据封装，并发送到 Skywalking 的服务器。</p><p>下载相应的安装包（如果使用 ES 存储，需要下载专用的安装包），配置好存储之后，即可一键启动。</p><p>将 agent 的压缩包，解压到相应的目录。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tar xvf skywalking</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">agent.tar.gz  </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">opt</span><span style="color:#F97583;">/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tar xvf skywalking</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">agent.tar.gz  </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">opt</span><span style="color:#D73A49;">/</span></span></code></pre></div><p>在业务启动参数中加入 agent 的包。比如，原来的启动命令是：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jar </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">opt</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">boot</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo.jar  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">spring.profiles.active</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jar </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">opt</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">boot</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo.jar  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">spring.profiles.active</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dev</span></span></code></pre></div><p>改造后的启动命令是：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java </span><span style="color:#F97583;">-</span><span style="color:#B392F0;">javaagent</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">opt</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">skywalking</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">agent</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">skywalking</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">agent.jar </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Dskywalking.agent.service_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">the</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jar </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">opt</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">service</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">boot</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo.ja  </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">spring.profiles.active</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java </span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">javaagent</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">opt</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">skywalking</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">agent</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">skywalking</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">agent.jar </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Dskywalking.agent.service_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">the</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jar </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">opt</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">service</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">boot</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo.ja  </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">spring.profiles.active</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dev</span></span></code></pre></div><p>访问一些服务的链接，打开 Skywalking 的 UI，即可看到下图的界面。这些指标可以类比&quot;01 | 理论分析：性能优化，有哪些衡量指标？需要注意什么？&quot;提到的衡量指标去理解，我们就可以从图中找到响应比较慢 QPS 又比较高的接口，进行专项优化。</p>`,51),m=l('<h3 id="各个层次的优化方向" tabindex="-1">各个层次的优化方向 <a class="header-anchor" href="#各个层次的优化方向" aria-label="Permalink to &quot;各个层次的优化方向&quot;">​</a></h3><h4 id="_1-controller-层" tabindex="-1">1.Controller 层 <a class="header-anchor" href="#_1-controller-层" aria-label="Permalink to &quot;1.Controller 层&quot;">​</a></h4><p>controller 层用于接收前端的查询参数，然后构造查询结果。现在很多项目都采用前后端分离的架构，所以 controller 层的方法，一般会使用 @ResponseBody 注解，把查询的结果，解析成 JSON 数据返回（兼顾效率和可读性）。</p><p>由于 controller 只是充当了一个类似功能组合和路由的角色，所以这部分对性能的影响就主要体现在数据集的大小上。如果结果集合非常大，JSON 解析组件就要花费较多的时间进行解析，</p><p>大结果集不仅会影响解析时间，还会造成内存浪费。</p><p>假如结果集在解析成 JSON 之前，占用的内存是 10MB，那么在解析过程中，有可能会使用 20M 或者更多的内存去做这个工作。</p><p>我见过很多案例，由于返回对象的嵌套层次太深、引用了不该引用的对象（比如非常大的 byte[] 对象），造成了内存使用的飙升。</p><p>所以，<strong>对于一般的服务，保持结果集的精简，是非常有必要的</strong>，这也是 DTO（data transfer object）存在的必要。如果你的项目，返回的结果结构比较复杂，对结果集进行一次转换是非常有必要的。</p><h4 id="_2-service-层" tabindex="-1">2.Service 层 <a class="header-anchor" href="#_2-service-层" aria-label="Permalink to &quot;2.Service 层&quot;">​</a></h4><p>service 层用于处理具体的业务，大部分功能需求都是在这里完成的。service 层一般是使用单例模式，很少会保存状态，而且可以被 controller 复用。</p><p>service 层的代码组织，对代码的可读性、性能影响都比较大。我们常说的设计模式，大多数都是针对 service 层来说的。</p><p>service 层会频繁使用更底层的资源，通过组合的方式获取我们所需要的数据，大多数可以通过我们前面课时提供的优化思路进行优化。</p><p>这里要着重提到的一点，就是分布式事务。</p>',13),A=p("p",null,"如上图，四个操作分散在三个不同的资源中。要想达到一致性，需要三个不同的资源 MySQL、MQ、ElasticSearch 进行统一协调。它们底层的协议，以及实现方式，都是不一样的，那就无法通过 Spring 提供的 Transaction 注解来解决，需要借助外部的组件来完成。",-1),v=p("p",null,"很多人都体验过，加入了一些保证一致性的代码，一压测，性能掉的惊掉下巴。分布式事务是性能杀手，因为它要使用额外的步骤去保证一致性，常用的方法有：两阶段提交方案、TCC、本地消息表、MQ 事务消息、分布式事务中间件等。",-1),B=l('<p>如上图，分布式事务要在改造成本、性能、时效等方面进行综合考虑。有一个介于分布式事务和非事务之间的名词，叫作<strong>柔性事务</strong>。柔性事务的理念是将业务逻辑和互斥操作，从资源层上移至业务层面。</p><p><strong>关于传统事务和柔性事务，我们来简单比较一下。</strong></p><p><strong>ACID</strong></p><p>关系数据库, 最大的特点就是事务处理, 即满足 ACID。</p><ul><li><p>原子性（Atomicity）：事务中的操作要么都做，要么都不做。</p></li><li><p>一致性（Consistency）：系统必须始终处在强一致状态下。</p></li><li><p>隔离性（Isolation）：一个事务的执行不能被其他事务所干扰。</p></li><li><p>持久性（Durability）：一个已提交的事务对数据库中数据的改变是永久性的。</p></li></ul><p><strong>BASE</strong></p><p>BASE 方法通过牺牲一致性和孤立性来提高可用性和系统性能。</p><p>BASE 为 Basically Available、Soft-state、Eventually consistent 三者的缩写，其中 BASE 分别代表：</p><ul><li><p>基本可用（Basically Available）：系统能够基本运行、一直提供服务。</p></li><li><p>软状态（Soft-state）：系统不要求一直保持强一致状态。</p></li><li><p>最终一致性（Eventual consistency）：系统需要在某一时刻后达到一致性要求。</p></li></ul><p>互联网业务，推荐使用补偿事务，完成最终一致性。比如，通过一系列的定时任务，完成对数据的修复。</p><h4 id="_3-dao-层" tabindex="-1">3.Dao 层 <a class="header-anchor" href="#_3-dao-层" aria-label="Permalink to &quot;3.Dao 层&quot;">​</a></h4><p>经过合理的数据缓存，我们都会尽量避免请求穿透到 Dao 层。除非你对 ORM 本身提供的缓存特性特别的熟悉；否则，都推荐你使用更加通用的方式去缓存数据。</p><p>Dao 层，主要在于对 ORM 框架的使用上。比如，在 JPA 中，如果加了一对多或者多对多的映射关系，而又没有开启懒加载，级联查询的时候就容易造成深层次的检索，造成了内存开销大、执行缓慢的后果。</p><p>在一些数据量比较大的业务中，多采用分库分表的方式。在这些分库分表组件中，很多简单的查询语句，都会被重新解析后分散到各个节点进行运算，最后进行结果合并。</p><p>举个例子，select count(*) from a 这句简单的 count 语句，就可能将请求路由到十几张表中去运算，最后在协调节点进行统计，执行效率是可想而知的。目前，分库分表中间件，比较有代表性的是驱动层的 ShardingJdbc 和代理层的 MyCat，它们都有这样的问题。这些组件提供给使用者的视图是一致的，但我们在编码的时候，一定要注意这些区别。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>下面我们来总结一下。</p><p>本课时，我们简单看了一下 SpringBoot 常见的优化思路，然后介绍了三个新的性能分析工具。</p><ul><li><p>一个是监控系统 Prometheus，可以看到一些具体的指标大小；</p></li><li><p>一个是火焰图，可以看到具体的代码热点；</p></li><li><p>一个是 Skywalking，可以分析分布式环境中的调用链。</p></li></ul><p>SpringBoot 自身的 Web 容器是 Tomcat，那我们就可以通过对 Tomcat 的调优来获取性能提升。当然，对于服务上层的负载均衡 Nginx，我们也提供了一系列的优化思路。</p><p>最后，我们看了在经典的 MVC 架构下，Controller、Service、Dao 的一些优化方向，并着重看了 Service 层的分布式事务问题。</p><p>SpringBoot 作为一个广泛应用的服务框架，在性能优化方面已经做了很多工作，选用了很多高速组件。比如，数据库连接池默认使用 hikaricp，Redis 缓存框架默认使用 lettuce，本地缓存提供 caffeine 等。对于一个普通的数据库交互的 Web 服务来说，缓存是最主要的优化手段。</p><p>但细节决定成败，05-19 课时的内容对性能优化都有借鉴意义。下一课时（也就是咱们专栏的最后一课时），我将从问题发现、目标制定、优化方式上进行整体性的总结。</p><p><a href="https://wj.qq.com/s2/7200077/1134/" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品~</a></p>',24);function D(b,_,k,S,f,q){const a=e("Image");return t(),c("div",null,[E,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/50/07/CgqCHl9htcuAAw51AAK0O_g_pbM862.png"}),s(),y,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/50/07/CgqCHl9htdiAO89HAAK1NRYCNZE604.png"}),s(),i,g,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/4F/FB/Ciqc1F9htd-AXIKHAANYYdIDl6g753.png"}),s(),d,n(a,{alt:"2020-08-21 17-07-35.2020-08-21 17_12_29.gif",src:"https://s0.lgstatic.com/i/image/M00/4F/FC/Ciqc1F9htfOAN3G1AEK7W4TM0AU264.gif"}),s(),F,C,h,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/4F/FC/Ciqc1F9htgCAcdwGAAIVQmXnOPo885.png"}),s(),u,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/4F/FD/Ciqc1F9htwyARKqMAAgxG3QYe8A553.png"}),s(),m,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/50/08/CgqCHl9htvaAf1S-AAKlZCq3SXg275.png"}),s(),A,v,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/4F/FD/Ciqc1F9htx6ADeh6AAFoqvxy4eM753.png"}),s(),B])}const w=o(r,[["render",D]]);export{I as __pageData,w as default};
