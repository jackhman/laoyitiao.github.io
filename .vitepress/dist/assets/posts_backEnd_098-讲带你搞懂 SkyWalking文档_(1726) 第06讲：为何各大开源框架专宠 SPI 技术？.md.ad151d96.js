import{_ as o,j as e,o as t,g as c,k as l,h as n,s,Q as p}from"./chunks/framework.cfb14fe0.js";const m=JSON.parse('{"title":"第06讲：为何各大开源框架专宠SPI技术？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1726) 第06讲：为何各大开源框架专宠 SPI 技术？.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1726) 第06讲：为何各大开源框架专宠 SPI 技术？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1726) 第06讲：为何各大开源框架专宠 SPI 技术？.md"},E=s("h1",{id:"第06讲-为何各大开源框架专宠spi技术",tabindex:"-1"},[n("第06讲：为何各大开源框架专宠SPI技术？ "),s("a",{class:"header-anchor",href:"#第06讲-为何各大开源框架专宠spi技术","aria-label":'Permalink to "第06讲：为何各大开源框架专宠SPI技术？"'},"​")],-1),y=s("p",null,"在此前的课时中，已经详细介绍了 SkyWalking Agent 用到的多种基础技术，例如，Byte Buddy、Java Agent 以及 OpenTracing 中的核心概念。本课时将深入介绍 SkyWalking Agent 以及 OAP 中都会使用到的 SPI 技术。",-1),i=s("h3",{id:"jdk-spi-机制",tabindex:"-1"},[n("JDK SPI 机制 "),s("a",{class:"header-anchor",href:"#jdk-spi-机制","aria-label":'Permalink to "JDK SPI 机制"'},"​")],-1),d=s("p",null,"SPI（Service Provider Interface）主要是被框架开发人员使用的一种技术。例如，使用 Java 语言访问数据库时我们会使用到 java.sql.Driver 接口，每个数据库厂商使用的协议不同，提供的 java.sql.Driver 实现也不同，在开发 java.sql.Driver 接口时，开发人员并不清楚用户最终会使用哪个数据库，在这种情况下就可以使用 Java SPI 机制为 java.sql.Driver 接口寻找具体的实现。",-1),F=s("p",null,"当服务的提供者提供了一种接口的实现之后，需要在 Classpath 下的 META-INF/services/ 目录里创建一个以服务接口命名的文件，此文件记录了该 jar 包提供的服务接口的具体实现类。当某个应用引入了该 jar 包且需要使用该服务时，JDK SPI 机制就可以通过查找这个 jar 包的 META-INF/services/ 中的配置文件来获得具体的实现类名，进行实现类的加载和实例化，最终使用该实现类完成业务功能。",-1),g=s("p",null,"下面通过一个简单的示例演示 JDK SPI 的基本使用方式，示例如下：",-1),D=p(`<p>首先我们需要创建一个 Log 接口，来模拟日志打印的功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">info</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来提供两个实现 ------ Logback 和 Log4j，分别代表两个不同日志框架的实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Logback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Logback:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> info);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log4j</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Log4j:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> info);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Logback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Logback:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> info);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log4j</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">info</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Log4j:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> info);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在项目的 resources/META-INF/services 目录下添加一个名为 com.xxx.Log 的文件，这是 JDK SPI 需要读取的配置文件，具体内容如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">com.xxx.impl.Log4j</span></span>
<span class="line"><span style="color:#E1E4E8;">com.xxx.impl.Logback</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">com.xxx.impl.Log4j</span></span>
<span class="line"><span style="color:#24292E;">com.xxx.impl.Logback</span></span></code></pre></div><p>最后创建 main() 方法，其中会加载上述配置文件，创建全部 Log 接口实现的实例，并执行其 log() 方法，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ServiceLoader&lt;</span><span style="color:#F97583;">Log</span><span style="color:#E1E4E8;">&gt; serviceLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                ServiceLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(Log.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Iterator&lt;</span><span style="color:#F97583;">Log</span><span style="color:#E1E4E8;">&gt; iterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceLoader.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (iterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Log log </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            log.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;JDK SPI&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 输出如下:</span></span>
<span class="line"><span style="color:#6A737D;">// Log4j:JDK SPI</span></span>
<span class="line"><span style="color:#6A737D;">// Logback:JDK SPI</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ServiceLoader&lt;</span><span style="color:#D73A49;">Log</span><span style="color:#24292E;">&gt; serviceLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                ServiceLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(Log.class);</span></span>
<span class="line"><span style="color:#24292E;">        Iterator&lt;</span><span style="color:#D73A49;">Log</span><span style="color:#24292E;">&gt; iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceLoader.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (iterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            Log log </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JDK SPI&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 输出如下:</span></span>
<span class="line"><span style="color:#6A737D;">// Log4j:JDK SPI</span></span>
<span class="line"><span style="color:#6A737D;">// Logback:JDK SPI</span></span></code></pre></div><h3 id="jdk-spi源码分析" tabindex="-1">JDK SPI源码分析 <a class="header-anchor" href="#jdk-spi源码分析" aria-label="Permalink to &quot;JDK SPI源码分析&quot;">​</a></h3><p>通过上述示例，我们可以看到 JDK SPI 的入口方法是 ServiceLoader.load() 方法，接下来我将对其具体实现进行深入分析。</p><p>在 ServiceLoader.load() 方法中，首先会尝试获取当前使用的 ClassLoader（获取当前线程绑定的 ClassLoader，查找失败后使用 SystemClassLoader），然后调用 reload() 方法，调用关系如下图所示：</p>`,11),v=p(`<p>在 reload() 方法中首先会清理 providers 缓存（LinkedHashMap 类型的集合），该缓存用来记录 ServiceLoader 创建的实现对象，其中 Key 为实现类的完整类名，Value 为实现类的对象。之后创建 LazyIterator 迭代器，该迭代器用于读取 SPI 配置文件并实例化实现类对象。</p><p>ServiceLoader.reload() 方法的具体实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 缓存，用来缓存 ServiceLoader创建的实现对象</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> LinkedHashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt; providers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reload</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    providers.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 清空缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    lookupIterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LazyIterator</span><span style="color:#E1E4E8;">(service, loader); </span><span style="color:#6A737D;">// 迭代器</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 缓存，用来缓存 ServiceLoader创建的实现对象</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> LinkedHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt; providers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reload</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    providers.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 清空缓存</span></span>
<span class="line"><span style="color:#24292E;">    lookupIterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LazyIterator</span><span style="color:#24292E;">(service, loader); </span><span style="color:#6A737D;">// 迭代器</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在前面的示例中，main() 方法中使用的迭代器底层就是调用了 ServiceLoader.LazyIterator 实现的。Iterator 接口有两个关键方法：hasNext() 方法和 next() 方法，这里的 LazyIterator 中的next() 方法最终调用的是其 nextService() 方法，hasNext() 方法最终调用的是 hasNextService() 方法，调用关系如下图所示：</p>`,4),u=p(`<p>首先来看 LazyIterator.hasNextService() 方法，该方法主要负责查找 META-INF/services 目录下的 SPI 配置文件，并进行遍历，大致实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String PREFIX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;META-INF/services/&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Enumeration&lt;</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">&gt; configs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Iterator&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String nextName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasNextService</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nextName </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (configs </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// PREFIX前缀与服务接口的名称拼接起来，就是META-INF目录下定义的SPI配</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 置文件(即示例中的META-INF/services/com.xxx.Log)</span></span>
<span class="line"><span style="color:#E1E4E8;">        String fullName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PREFIX </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> service.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 加载配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (loader </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            configs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassLoader.</span><span style="color:#B392F0;">getSystemResources</span><span style="color:#E1E4E8;">(fullName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">            configs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loader.</span><span style="color:#B392F0;">getResources</span><span style="color:#E1E4E8;">(fullName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 按行SPI遍历配置文件的内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((pending </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">pending.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">configs.</span><span style="color:#B392F0;">hasMoreElements</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 解析配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(service, configs.</span><span style="color:#B392F0;">nextElement</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    nextName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pending.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 更新 nextName字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String PREFIX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;META-INF/services/&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Enumeration&lt;</span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">&gt; configs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Iterator&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String nextName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNextService</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nextName </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (configs </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// PREFIX前缀与服务接口的名称拼接起来，就是META-INF目录下定义的SPI配</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 置文件(即示例中的META-INF/services/com.xxx.Log)</span></span>
<span class="line"><span style="color:#24292E;">        String fullName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PREFIX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 加载配置文件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            configs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassLoader.</span><span style="color:#6F42C1;">getSystemResources</span><span style="color:#24292E;">(fullName);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">            configs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader.</span><span style="color:#6F42C1;">getResources</span><span style="color:#24292E;">(fullName);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 按行SPI遍历配置文件的内容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((pending </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">pending.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">configs.</span><span style="color:#6F42C1;">hasMoreElements</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 解析配置文件</span></span>
<span class="line"><span style="color:#24292E;">        pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(service, configs.</span><span style="color:#6F42C1;">nextElement</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    nextName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pending.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 更新 nextName字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，在 hasNextService() 方法中完成 SPI 配置文件的解析之后，再来看 LazyIterator.nextService() 方法，该方法负责实例化 hasNextService() 方法读取到的实现类，其中会将实例化的对象放到 providers 集合中缓存起来，核心实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> S </span><span style="color:#B392F0;">nextService</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String cn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nextName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    nextName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载 nextName字段指定的类</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(cn, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, loader);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">service.</span><span style="color:#B392F0;">isAssignableFrom</span><span style="color:#E1E4E8;">(c)) { </span><span style="color:#6A737D;">// 检测类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">fail</span><span style="color:#E1E4E8;">(service, </span><span style="color:#9ECBFF;">&quot;Provider &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> cn  </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; not a subtype&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    S p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> service.</span><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;">(c.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 创建实现类的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    providers.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(cn, p); </span><span style="color:#6A737D;">// 将实现类名称以及相应实例对象添加到缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> S </span><span style="color:#6F42C1;">nextService</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    String cn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextName;</span></span>
<span class="line"><span style="color:#24292E;">    nextName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载 nextName字段指定的类</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(cn, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, loader);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">isAssignableFrom</span><span style="color:#24292E;">(c)) { </span><span style="color:#6A737D;">// 检测类型</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(service, </span><span style="color:#032F62;">&quot;Provider &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> cn  </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; not a subtype&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    S p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">cast</span><span style="color:#24292E;">(c.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 创建实现类的对象</span></span>
<span class="line"><span style="color:#24292E;">    providers.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(cn, p); </span><span style="color:#6A737D;">// 将实现类名称以及相应实例对象添加到缓存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 main() 方法中使用的迭代器的底层实现介绍完了，我们再来看一下其使用的真正迭代器，核心实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Iterator</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">S</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Iterator&lt;</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// knownProviders用来迭代 providers缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">        Iterator&lt;</span><span style="color:#F97583;">Map</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">Entry</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">S</span><span style="color:#E1E4E8;">&gt;&gt; knownProviders</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> providers.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 先走查询缓存，缓存查询失败，再通过 LazyIterator加载</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (knownProviders.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> lookupIterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> S </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 先走查询缓存，缓存查询失败，再通过 LazyIterator加载</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (knownProviders.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> knownProviders.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> lookupIterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 省略remove()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Iterator</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">S</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Iterator&lt;</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// knownProviders用来迭代 providers缓存</span></span>
<span class="line"><span style="color:#24292E;">        Iterator&lt;</span><span style="color:#D73A49;">Map</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">S</span><span style="color:#24292E;">&gt;&gt; knownProviders</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> providers.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 先走查询缓存，缓存查询失败，再通过 LazyIterator加载</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (knownProviders.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lookupIterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> S </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 先走查询缓存，缓存查询失败，再通过 LazyIterator加载</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (knownProviders.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> knownProviders.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lookupIterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 省略remove()方法</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span></code></pre></div><h3 id="jdk-spi-在-jdbc-中的应用" tabindex="-1">JDK SPI 在 JDBC 中的应用 <a class="header-anchor" href="#jdk-spi-在-jdbc-中的应用" aria-label="Permalink to &quot;JDK SPI 在 JDBC 中的应用&quot;">​</a></h3><p>了解了 JDK SPI 实现的原理之后，我们来看实践中 JDBC 是如何使用 JDK SPI 机制加载不同数据库厂商的实现类。</p><p>JDK 中只定义了一个 java.sql.Driver 接口，具体的实现是由不同数据库厂商来提供的。这里以 MySQL 提供的 JDBC 实现包为例进行分析。</p><p>在 mysql-connector-java-*.jar 包中的 META-INF/services 目录下，有一个 java.sql.Driver 文件中只有一行内容，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">com.mysql.cj.jdbc.Driver</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">com.mysql.cj.jdbc.Driver</span></span></code></pre></div><p>在使用 mysql-connector-java-*.jar 包连接 MySQL 数据库的时候，我们会用到如下语句创建数据库连接：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jdbc:xxx://xxx:xxx/xxx&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Connection conn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DriverManager.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(url, username, pwd);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jdbc:xxx://xxx:xxx/xxx&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Connection conn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DriverManager.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(url, username, pwd);</span></span></code></pre></div><p>DriverManager 是 JDK 提供的数据库驱动管理器，其中的代码片段，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">loadInitialDrivers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;JDBC DriverManager initialized&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">loadInitialDrivers</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JDBC DriverManager initialized&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在调用 getConnection() 方法的时候，DriverManager 类会被 Java 虚拟机加载、解析并触发 static 代码块的执行，在 loadInitialDrivers() 方法中通过 JDK SPI 扫描 Classpath 下 java.sql.Driver 接口实现类并实例化，核心实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadInitialDrivers</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String drivers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jdbc.drivers&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用 JDK SPI机制加载所有 java.sql.Driver实现类</span></span>
<span class="line"><span style="color:#E1E4E8;">    ServiceLoader&lt;</span><span style="color:#F97583;">Driver</span><span style="color:#E1E4E8;">&gt; loadedDrivers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">           ServiceLoader.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(Driver.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;</span><span style="color:#F97583;">Driver</span><span style="color:#E1E4E8;">&gt; driversIterator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loadedDrivers.</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(driversIterator.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        driversIterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] driversList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> drivers.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String aDriver </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> driversList) { </span><span style="color:#6A737D;">// 初始化Driver实现类</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(aDriver, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            ClassLoader.</span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadInitialDrivers</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    String drivers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jdbc.drivers&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 JDK SPI机制加载所有 java.sql.Driver实现类</span></span>
<span class="line"><span style="color:#24292E;">    ServiceLoader&lt;</span><span style="color:#D73A49;">Driver</span><span style="color:#24292E;">&gt; loadedDrivers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           ServiceLoader.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(Driver.class);</span></span>
<span class="line"><span style="color:#24292E;">    Iterator&lt;</span><span style="color:#D73A49;">Driver</span><span style="color:#24292E;">&gt; driversIterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loadedDrivers.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(driversIterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        driversIterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] driversList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> drivers.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String aDriver </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> driversList) { </span><span style="color:#6A737D;">// 初始化Driver实现类</span></span>
<span class="line"><span style="color:#24292E;">        Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(aDriver, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            ClassLoader.</span><span style="color:#6F42C1;">getSystemClassLoader</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 MySQL 提供的 com.mysql.cj.jdbc.Driver 实现类中，同样有一段 static 静态代码块，这段代码会创建一个 com.mysql.cj.jdbc.Driver 对象并注册到 DriverManager.registeredDrivers 集合中（ CopyOnWriteArrayList 类型），如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   java.sql.DriverManager.</span><span style="color:#B392F0;">registerDriver</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Driver</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   java.sql.DriverManager.</span><span style="color:#6F42C1;">registerDriver</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Driver</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 getConnection() 方法中，DriverManager 从该 registeredDrivers 集合中获取对应的 Driver 对象创建 Connection，核心实现如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Connection </span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">(String url, java.util.Properties info, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> caller) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略 try/catch代码块以及权限处理逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(DriverInfo aDriver </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> registeredDrivers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Connection con </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aDriver.driver.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(url, info);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> con;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Connection </span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">(String url, java.util.Properties info, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> caller) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略 try/catch代码块以及权限处理逻辑</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(DriverInfo aDriver </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> registeredDrivers) {</span></span>
<span class="line"><span style="color:#24292E;">        Connection con </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aDriver.driver.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(url, info);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> con;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="dubbo-对-jdk-spi-的改进" tabindex="-1">Dubbo 对 JDK SPI 的改进 <a class="header-anchor" href="#dubbo-对-jdk-spi-的改进" aria-label="Permalink to &quot;Dubbo 对 JDK SPI 的改进&quot;">​</a></h3><p>通过前面的分析可以发现，JDK SPI 在查找具体实现类的过程中，需要遍历 SPI 配置文件中定义的所有实现类，该过程中会将这些实现类全部实例化。如果 SPI 配置文件中定义了多个实现类，而我们只需要其中一个实现类时，就会生成不必要的对象。</p><p>Dubbo 为了解决上述问题，自己设计了一套 SPI 实现，但是思想与 JDK SPI 机制类似。作为思路的扩展，这里简单介绍一下 Dubbo SPI 的实现原理（SkyWalking 使用是 JDK SPI 而不是 Dubbo SPI ）。</p><p>首先，Dubbo 将 SPI 配置文件改成了 KV 格式，例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dubbo</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dubbo</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol</span></span></code></pre></div><p>其中 key 就是一个简单的标记，当我们在为一个接口查找具体实现类时，可以指定 key 来选择具体实现，例如，这里指定 key 为 dubbo，Dubbo SPI 就知道我们要的是：org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol 这个实现类。</p><p>Dubbo SPI 核心实现是 ExtensionLoader（位于 dubbo-common 模块中的 extension 包中），功能类似于 JDK SPI 中的 java.util.ServiceLoader，其使用方式如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Protocol protocol </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Protocol.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dubbo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 很明显，在查找 Protocol这个接口的实现类时，还指定了&quot;dubbo&quot;这个key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Protocol protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Protocol.class)</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dubbo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 很明显，在查找 Protocol这个接口的实现类时，还指定了&quot;dubbo&quot;这个key</span></span></code></pre></div><p>ExtensionLoader.getExtensionLoader() 方法会根据接口类型从缓存中查找相应的 ExtensionLoader 实现，核心实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConcurrentMap</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">, ExtensionLoader</span><span style="color:#F97583;">&lt;?&gt;&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    EXTENSION_LOADERS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ExtensionLoader</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(Class</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExtensionLoader&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; loader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">         (ExtensionLoader</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) EXTENSION_LOADERS.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (loader </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        EXTENSION_LOADERS.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(type,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ExtensionLoader&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;(type));</span></span>
<span class="line"><span style="color:#E1E4E8;">        loader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (ExtensionLoader</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) EXTENSION_LOADERS.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(type);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loader;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConcurrentMap</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">, ExtensionLoader</span><span style="color:#D73A49;">&lt;?&gt;&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    EXTENSION_LOADERS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ExtensionLoader</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type) {</span></span>
<span class="line"><span style="color:#24292E;">    ExtensionLoader&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">         (ExtensionLoader</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) EXTENSION_LOADERS.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        EXTENSION_LOADERS.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(type,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ExtensionLoader&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;(type));</span></span>
<span class="line"><span style="color:#24292E;">        loader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ExtensionLoader</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) EXTENSION_LOADERS.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loader;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>查找到接口对应的 ExtensionLoader 对象之后，会调用 getExtension() 方法，再根据传入的 key 查找相应的实现类，最终将其实例化后返回：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 缓存，记录了 key到实现类对象Holder之间的映射关系</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ConcurrentMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, Holder&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;&gt; cachedInstances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getExtension</span><span style="color:#E1E4E8;">(String name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Holder&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; holder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOrCreateHolder</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> holder.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// double-check防止并发问题</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">synchronized</span><span style="color:#E1E4E8;"> (holder) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> holder.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instance </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// createExtension()方法中完成了 SPI配置文件的查找以及实现类</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 的实例化，具体实现与 JDK SPI原理类似，其中还会处理 Dubbo中</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 自定义的一些注解，不再展开分析</span></span>
<span class="line"><span style="color:#E1E4E8;">                instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createExtension</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">                holder.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(instance);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) instance;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 缓存，记录了 key到实现类对象Holder之间的映射关系</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ConcurrentMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Holder&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;&gt; cachedInstances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getExtension</span><span style="color:#24292E;">(String name) {</span></span>
<span class="line"><span style="color:#24292E;">    Holder&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; holder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOrCreateHolder</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">    Object instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> holder.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// double-check防止并发问题</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (holder) {</span></span>
<span class="line"><span style="color:#24292E;">            instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> holder.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instance </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// createExtension()方法中完成了 SPI配置文件的查找以及实现类</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 的实例化，具体实现与 JDK SPI原理类似，其中还会处理 Dubbo中</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 自定义的一些注解，不再展开分析</span></span>
<span class="line"><span style="color:#24292E;">                instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createExtension</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">                holder.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(instance);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) instance;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时首先介绍了 JDK SPI 机制的原理，并通过 Log 示例演示了 JDK SPI 的使用方式，然后深入到 ServiceLoader 的源码中分析了 JDK SPI 的实现方式，接下来介绍了 JDBC 4.0 如何使用 JDK SPI 机制加载数据库驱动类，最后介绍了 Dubbo 对 JDK SPI 的改进。</p>`,35);function A(h,C,b,S,x,k){const a=e("Image");return t(),c("div",null,[E,y,i,d,F,g,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/7A/CD/Cgq2xl55wp-AB3-XAAAzU_GplFY907.png"}),n(),D,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B7/Ciqah155wp-Af69RAABMERGHE0g472.png"}),n(),v,l(a,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/7A/CD/Cgq2xl55wp-ADMceAABXf_a-pjQ712.png"}),n(),u])}const L=o(r,[["render",A]]);export{m as __pageData,L as default};
