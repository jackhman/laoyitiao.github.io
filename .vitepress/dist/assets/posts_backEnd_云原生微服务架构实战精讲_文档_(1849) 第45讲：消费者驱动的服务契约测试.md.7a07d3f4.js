import{_ as l,j as o,o as e,g as t,k as p,h as n,s,Q as c}from"./chunks/framework.a0d18f64.js";const k=JSON.parse('{"title":"第45讲：消费者驱动的服务契约测试","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1849) 第45讲：消费者驱动的服务契约测试.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1849) 第45讲：消费者驱动的服务契约测试.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1849) 第45讲：消费者驱动的服务契约测试.md"},E=s("h1",{id:"第45讲-消费者驱动的服务契约测试",tabindex:"-1"},[n("第45讲：消费者驱动的服务契约测试 "),s("a",{class:"header-anchor",href:"#第45讲-消费者驱动的服务契约测试","aria-label":'Permalink to "第45讲：消费者驱动的服务契约测试"'},"​")],-1),y=s("p",null,"本课时作为云原生微服务专栏的最后一个课时，将介绍如何进行消费者驱动的服务契约测试。",-1),i=s("h3",{id:"api-测试",tabindex:"-1"},[n("API 测试 "),s("a",{class:"header-anchor",href:"#api-测试","aria-label":'Permalink to "API 测试"'},"​")],-1),u=s("p",null,"在云原生微服务架构应用的开发中，一个很重要的问题是如何对单个微服务的 API 进行测试。第 10 课时介绍了 API 优先的设计策略，也就是从 OpenAPI 规范文档出发，让 API 的消费者和提供者可以并行工作。OpenAPI 规范成为 API 的消费者和提供者之间的契约，OpenAPI 规范文档通过消费者和提供者的协商和沟通来确定，这种方式虽然保证了 API 契约的稳定性，但是存在一个很大的问题，那就是如何验证提供者所实际提供的 API 满足契约的要求。",-1),F=s("p",null,"下图给出了一个微服务架构应用中的不同微服务之间的 API 调用关系，其中服务 A 需要调用服务 B 和 D 的 API。当需要测试服务 A 时，一种做法是在所有服务都部署之后，再进行集成测试。这种做法的问题是测试环境的搭建很复杂，除了每个服务自身之外，还需要运行其他支撑服务。",-1),d=s("p",null,"另外一种做法是为服务 B 和 D 分别创建模拟对象（Mock），由 Mock 来模拟服务 B 和 D 的功能。这种做法的好处是运行测试的环境简单，测试的执行速度也很快，也是一般使用的做法。",-1),C=s("p",null,"模拟对象一般由 API 的消费者来创建，比如，服务 A 需要创建服务 B 和 D 的模拟对象。由于模拟对象由 API 消费者来创建，所以模拟对象反映的是消费者对于 API 的理解，与 API 提供者对 API 的理解可能存在偏差。当服务 A 完成测试，并与服务 B 和 D 进行集成时，可能会发现在运行时出现错误。这种问题的出现，会大大降低服务 A 的测试的可信度。",-1),A=s("h3",{id:"消费者驱动的契约",tabindex:"-1"},[n("消费者驱动的契约 "),s("a",{class:"header-anchor",href:"#消费者驱动的契约","aria-label":'Permalink to "消费者驱动的契约"'},"​")],-1),g=s("p",null,"消费者驱动的契约（Consumer Driven Contract）是一种 API 开发的实践，把行为驱动开发的思想应用到了 API 的设计中，消费者驱动的含义是由 API 的消费者来驱动 API 的设计。如果 API 的目的是满足消费者的需求，那么 API 的消费者对于 API 有决定权，包括 API 中包含的全部路径，以及每个路径的请求和响应的内容格式。API 的提供者需要按照消费者指定的契约，来完成 API 的具体实现。",-1),q=s("p",null,"消费者驱动的契约的不足之处在于，它并不适合于开放 API 的设计，因为开放 API 有非常多的消费者，不太可能为了单个消费者而做出改变。微服务之间的 API 则没有这个限制，可以使用消费者驱动的方式来设计。",-1),v=s("p",null,"本课时通过 Spring Cloud Contract 来说明消费者驱动的契约的做法。Spring Cloud Contract 的特点是从声明式的契约中自动创建出可执行的存根代码，以及测试用例。",-1),h=s("p",null,"在下图中，服务 B 和 D 分别被替换成相应的存根，测试运行起来更简单。",-1),B=c(`<p>本课时所介绍的示例与专栏所使用的示例存在一定的关联性，但是对应用的场景进行了简化。本课时的示例中各有一个 API 的提供者和消费者，API 的提供者是验证行程的服务，而消费者是行程管理服务。当行程管理服务接收到创建行程的请求时，需要调到行程验证服务来进行验证，并根据返回的结果来进行不同的处理。这个示例的场景非常简单，可以展示 Spring Cloud Contract 的用法。完整的代码请在 <a href="https://github.com/VividcodeIO/spring-cloud-contract-example" target="_blank" rel="noreferrer">GitHub</a>中下载。</p><p>从实际的业务场景来说，API 的提供者和消费者之间的契约很简单，在验证行程时，需要提供行程的金额数量，返回的结果则说明行程是否有效。当金额小于或等于 1000 时，行程被认为有效；否则，行程被认为是无效的。虽然场景简单，但实际的契约需要更加具体的描述。如果以 API 优先的方式来设计，会先从 OpenAPI 文档规范开始。下面我们来看一下如何使用消费者驱动的契约来完成。</p><h4 id="创建契约" tabindex="-1">创建契约 <a class="header-anchor" href="#创建契约" aria-label="Permalink to &quot;创建契约&quot;">​</a></h4><p>首先需要由消费者来创建契约，契约并不是以 OpenAPI 规范文档这样的形式化方式来描述，而只是一些请求和对应的响应示例，每个示例称为一个契约。API 的消费者根据需求，定义出需要使用的 API 路径、请求和响应的内容。从这里就可以看出契约和 OpenAPI 规范的最大区别：OpenAPI 规范描述的是 API 的请求和响应内容的格式，而契约则描述的是具体的请求和期望的响应实例。</p><p>下面的代码给出了行程验证服务的 OpenAPI 规范文档的声明，其中包含了一个路径 /trip_validation，以及 POST 方法的请求格式和响应格式。从这个规范中我们可以看到，表示请求的 TripValidationRequest 类型中有一个 double 类型的 amount 属性，而表示响应的 TripValidationResponse 类型中有一个 boolean 类型的 valid 属性。很明显，表示金额的 amount 属性的值，与作为结果的 valid 属性之间，存在业务逻辑上的对应关系，但是这个对应关系没有体现在 OpenAPI 文档规范中。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">openapi</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;3.0.3&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">info</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">行程验证服务</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;1.0&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">servers</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">http://localhost:8090/</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">tags</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">trip</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">行程</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">paths</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">/trip_validation</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">post</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">tags</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">trip</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">summary</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">验证行程</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">operationId</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">validateTrip</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">requestBody</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">content</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">application/json</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">schema</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">$ref</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;#/components/schemas/TripValidationRequest&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">required</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">responses</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;200&#39;</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">验证结果</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">content</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">application/json</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">schema</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#85E89D;">$ref</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;#/components/schemas/TripValidationResponse&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#85E89D;">components</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">schemas</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">TripValidationRequest</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">object</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">amount</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">number</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">format</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">double</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">required</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">amount</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">TripValidationResponse</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">object</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">valid</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">boolean</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">required</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">valid</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">openapi</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;3.0.3&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">info</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">title</span><span style="color:#24292E;">: </span><span style="color:#032F62;">行程验证服务</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;1.0&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">servers</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">url</span><span style="color:#24292E;">: </span><span style="color:#032F62;">http://localhost:8090/</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">tags</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">trip</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">行程</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">paths</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">/trip_validation</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">post</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">tags</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">trip</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">summary</span><span style="color:#24292E;">: </span><span style="color:#032F62;">验证行程</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">operationId</span><span style="color:#24292E;">: </span><span style="color:#032F62;">validateTrip</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">requestBody</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">content</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">application/json</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">schema</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">$ref</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;#/components/schemas/TripValidationRequest&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">responses</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;200&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">description</span><span style="color:#24292E;">: </span><span style="color:#032F62;">验证结果</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">content</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">application/json</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">schema</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#22863A;">$ref</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;#/components/schemas/TripValidationResponse&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#22863A;">components</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">schemas</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">TripValidationRequest</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">object</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">properties</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">amount</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">number</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">format</span><span style="color:#24292E;">: </span><span style="color:#032F62;">double</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">required</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">amount</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">TripValidationResponse</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">object</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">properties</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">valid</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">boolean</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">required</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">valid</span></span></code></pre></div><p>与 OpenAPI 规范不同，契约描述的是请求和响应的示例。我们可以使用 Groovy 或 YAML 来描述契约，推荐使用 Groovy，因为可以使用 IDE 来进行代码提示和编译检查。下面是一个契约的 Groovy 代码的示例。</p><p>Groovy 文件的名称是 tripValidationPassed.groovy，并保存在 API 提供者项目的 src/test/resources/contracts/trip 目录中。根据命名惯例，契约文件被存放在 src/test/resources/contracts 目录中，不同的子目录代表不同的功能集。</p><p>Groovy 文件通过 DSL 来描述请求和响应的契约。Contract.make 方法用来创建新的 Contract 对象。在 DSL 中，request 描述 HTTP 请求的详情，包括 HTTP 方法、URL、请求内容和 HTTP 头；response 描述 HTTP 响应的详情，包括 HTTP 状态码、响应内容和 HTTP 头。该契约描述的场景是，当请求的 amount 属性的值为 999 时，返回的响应中的 valid 属性的值为 true。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> contracts.trip </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.springframework.cloud.contract.spec.Contract </span></span>
<span class="line"><span style="color:#F97583;">Contract.</span><span style="color:#E1E4E8;">make { </span></span>
<span class="line"><span style="color:#E1E4E8;">  request { </span></span>
<span class="line"><span style="color:#E1E4E8;">    method </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#9ECBFF;">&#39;/trip_validation&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    body([ </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">amount</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">999.00</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    ]) </span></span>
<span class="line"><span style="color:#E1E4E8;">    headers { </span></span>
<span class="line"><span style="color:#E1E4E8;">      contentType(</span><span style="color:#9ECBFF;">&#39;application/json&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  response { </span></span>
<span class="line"><span style="color:#E1E4E8;">    status </span><span style="color:#79B8FF;">OK</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">    body([ </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">valid</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    ]) </span></span>
<span class="line"><span style="color:#E1E4E8;">    headers { </span></span>
<span class="line"><span style="color:#E1E4E8;">      contentType(</span><span style="color:#9ECBFF;">&#39;application/json&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> contracts.trip </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.cloud.contract.spec.Contract </span></span>
<span class="line"><span style="color:#D73A49;">Contract.</span><span style="color:#24292E;">make { </span></span>
<span class="line"><span style="color:#24292E;">  request { </span></span>
<span class="line"><span style="color:#24292E;">    method </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#032F62;">&#39;/trip_validation&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    body([ </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">amount</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">999.00</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    ]) </span></span>
<span class="line"><span style="color:#24292E;">    headers { </span></span>
<span class="line"><span style="color:#24292E;">      contentType(</span><span style="color:#032F62;">&#39;application/json&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  response { </span></span>
<span class="line"><span style="color:#24292E;">    status </span><span style="color:#005CC5;">OK</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">    body([ </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">valid</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    ]) </span></span>
<span class="line"><span style="color:#24292E;">    headers { </span></span>
<span class="line"><span style="color:#24292E;">      contentType(</span><span style="color:#032F62;">&#39;application/json&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与上述契约相似的是另外一个名为 tripValidationFailed.groovy 的契约，用来描述行程验证不通过的场景，该契约的请求中 amount 的值为 1100，而响应中 valid 的值为 false。</p><p>需要注意的是，我们只添加了两个契约，分别对应行程验证的结果为有效和无效这两种情况。在契约中所指定的 amount 的具体值并不重要，只需要满足所限定的条件即可。</p><h4 id="生成存根代码" tabindex="-1">生成存根代码 <a class="header-anchor" href="#生成存根代码" aria-label="Permalink to &quot;生成存根代码&quot;">​</a></h4><p>契约被添加在 API 提供者项目中，我们接着从契约中生成存根代码。存根代码的生成由 Spring Cloud Contract 的 Maven 插件来完成，下面的代码展示了如何配置该 Maven 插件。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-contract-maven-plugin&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;\${spring-cloud-contract.version}&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">extensions</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">extensions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">testFramework</span><span style="color:#E1E4E8;">&gt;JUNIT5&lt;/</span><span style="color:#85E89D;">testFramework</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">packageWithBaseClasses</span><span style="color:#E1E4E8;">&gt;io.vividcode.contract.trip </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">packageWithBaseClasses</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-contract-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;\${spring-cloud-contract.version}&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">extensions</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">extensions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">testFramework</span><span style="color:#24292E;">&gt;JUNIT5&lt;/</span><span style="color:#22863A;">testFramework</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">packageWithBaseClasses</span><span style="color:#24292E;">&gt;io.vividcode.contract.trip </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">packageWithBaseClasses</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在运行了 mvn clean install -DskipTests 命令之后，会在 targets 目录生成一个带 stubs 后缀的 JAR 文件，该文件就是生成的存根代码，它被安装到了本地 Maven 仓库中。</p><h4 id="api-消费者的测试" tabindex="-1">API 消费者的测试 <a class="header-anchor" href="#api-消费者的测试" aria-label="Permalink to &quot;API 消费者的测试&quot;">​</a></h4><p>我们再回到 API 的消费者，也就是行程管理服务，这其中的 REST 控制器如下面的代码所示。在 createTrip 方法中，首先使用 TripService 来计算出行程的费用金额，再调用行程验证服务的 API 来进行验证，最后根据验证结果返回不同的响应。行程验证服务的 URL 通过配置项 trip_validation.url 来指定。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TripController</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${trip_validation.url:}&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  String tripValidationServiceUrl; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  TripService tripService; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  RestTemplate restTemplate; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/trip&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">consumes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MediaType.APPLICATION_JSON_VALUE) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseEntity&lt;Response&lt;</span><span style="color:#F97583;">CreateTripData</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">createTrip</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> CreateTripRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> amount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tripService </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">calculate</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">getStart</span><span style="color:#E1E4E8;">(), request.</span><span style="color:#B392F0;">getEnd</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    ResponseEntity&lt;</span><span style="color:#F97583;">TripValidationResponse</span><span style="color:#E1E4E8;">&gt; response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.restTemplate </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">exchange</span><span style="color:#E1E4E8;">(RequestEntity </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">                    URI.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tripValidationServiceUrl </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/trip_validation&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">contentType</span><span style="color:#E1E4E8;">(MediaType.APPLICATION_JSON) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TripValidationRequest</span><span style="color:#E1E4E8;">(amount)), </span></span>
<span class="line"><span style="color:#E1E4E8;">            TripValidationResponse.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">isValid</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ResponseEntity.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(Response </span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateTripData</span><span style="color:#E1E4E8;">(UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()))); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ResponseEntity.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(Response.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;invalid trip&quot;</span><span style="color:#E1E4E8;">))); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TripController</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${trip_validation.url:}&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  String tripValidationServiceUrl; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  TripService tripService; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  RestTemplate restTemplate; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/trip&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">consumes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MediaType.APPLICATION_JSON_VALUE) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseEntity&lt;Response&lt;</span><span style="color:#D73A49;">CreateTripData</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">createTrip</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> CreateTripRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> amount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tripService </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">calculate</span><span style="color:#24292E;">(request.</span><span style="color:#6F42C1;">getStart</span><span style="color:#24292E;">(), request.</span><span style="color:#6F42C1;">getEnd</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    ResponseEntity&lt;</span><span style="color:#D73A49;">TripValidationResponse</span><span style="color:#24292E;">&gt; response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.restTemplate </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">exchange</span><span style="color:#24292E;">(RequestEntity </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">                    URI.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tripValidationServiceUrl </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/trip_validation&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">contentType</span><span style="color:#24292E;">(MediaType.APPLICATION_JSON) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TripValidationRequest</span><span style="color:#24292E;">(amount)), </span></span>
<span class="line"><span style="color:#24292E;">            TripValidationResponse.class); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">isValid</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResponseEntity.</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">(Response </span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateTripData</span><span style="color:#24292E;">(UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()))); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResponseEntity.</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">(Response.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;invalid trip&quot;</span><span style="color:#24292E;">))); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 API 消费者项目中，我们添加对 TripController 的测试用例，测试用例的完整代码如下所示。该测试用例是一个标准的 Spring Boot 测试，在测试时，会在随机端口启动 Spring Boot 服务器，并通过 REST Assured 发送 HTTP 请求到 TripController，然后验证响应的内容是否正确。变量 serverPort 表示的是 Spring Boot 服务器实际运行的端口。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">webEnvironment</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebEnvironment.RANDOM_PORT) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureStubRunner</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">stubsMode</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StubRunnerProperties.StubsMode.LOCAL, </span><span style="color:#79B8FF;">ids</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;io.vividcode:producer&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Trip validation&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TripValidationTest</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  TripController tripController; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">LocalServerPort</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> serverPort; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">StubRunnerPort</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;producer&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> producerPort; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">BeforeEach</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupProducer</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tripController.tripValidationServiceUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;http://localhost:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.producerPort; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Test</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;validation success&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testTripValidationSuccess</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateTripRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;normal&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">contentType</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://localhost:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.serverPort </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/trip&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">statusCode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;status&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SUCCESS&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Test</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;validation failed&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testTripValidationFailed</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateTripRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;long&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">contentType</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://localhost:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.serverPort </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/trip&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">statusCode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;status&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ERROR&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">webEnvironment</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebEnvironment.RANDOM_PORT) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigureStubRunner</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">stubsMode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StubRunnerProperties.StubsMode.LOCAL, </span><span style="color:#005CC5;">ids</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;io.vividcode:producer&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Trip validation&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TripValidationTest</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  TripController tripController; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">LocalServerPort</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> serverPort; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">StubRunnerPort</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;producer&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> producerPort; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">BeforeEach</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupProducer</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tripController.tripValidationServiceUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;http://localhost:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.producerPort; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Test</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;validation success&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testTripValidationSuccess</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateTripRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;normal&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">contentType</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://localhost:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serverPort </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/trip&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">statusCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;status&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">is</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SUCCESS&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Test</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;validation failed&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testTripValidationFailed</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateTripRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;long&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">contentType</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://localhost:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serverPort </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/trip&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">statusCode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;status&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">is</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ERROR&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个测试用例中，我们用到了一个特殊的注解 @AutoConfigureStubRunner 来运行契约对应的存根代码，该注解的属性 stubsMode 表示的是获取存根代码的方式，LOCAL 表示从本地 Maven 仓库中获取，而 REMOTE 则表示从远程 Maven 仓库中获取。属性 ids 表示的是存根代码的 Maven 工件的标识符，当不指定版本号时，默认使用最新版本的工件，属性 ids 的值与 API 提供者相对应。</p><p>在测试的运行过程中，Spring Cloud Contract 会启动一个 <a href="http://wiremock.org/" target="_blank" rel="noreferrer">WireMock</a>服务器，并把契约中声明的请求和响应规则，添加到 WireMock 中。当 TripController 访问行程验证服务时，实际访问的是 WireMock 服务器，而 WireMock 会根据契约来返回不同请求对应的响应。由于 WireMock 会在随机端口启动，@StubRunnerPort 注解用来获取实际运行的端口，并绑定到字段 producerPort 中。在进行测试之前，会使用 producerPort 字段来设置 TripController 所连接的行程验证服务的 URL。从底层的实现来说，Spring Cloud Contract 实际上把契约文件，转换成了 WireMock 的 JSON 配置文件，由 WireMock 模拟 API 提供者的行为。</p><p>为了运行存根代码，需要添加下面代码中给出的 Maven 依赖。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-contract-stub-runner&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">exclusions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">exclusion</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">exclusion</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">exclusions</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-contract-stub-runner&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>使用 mvn test 命令就可以进行 API 消费者的测试，通过这种方式，API 消费者可以确保遵循了契约来调用 API。</p><h4 id="api-提供者的测试" tabindex="-1">API 提供者的测试 <a class="header-anchor" href="#api-提供者的测试" aria-label="Permalink to &quot;API 提供者的测试&quot;">​</a></h4><p>我们接着需要确保 API 的提供者正确的实现了契约。下面代码给出了行程验证服务的控制器的实现，该控制器的实现非常简单，只是根据 amount 的值来进行判断。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TripValidationController</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/trip_validation&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> TripValidationResponse </span><span style="color:#B392F0;">validate</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">      @</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> TripValidationRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> valid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.amount </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TripValidationResponse</span><span style="color:#E1E4E8;">(valid); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TripValidationController</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/trip_validation&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> TripValidationResponse </span><span style="color:#6F42C1;">validate</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> TripValidationRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> valid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.amount </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TripValidationResponse</span><span style="color:#24292E;">(valid); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以使用 Spring Cloud Contract 的 Maven 插件来从契约中自动生成测试用例，只需要使用 mvn generate-test-sources 命令即可。在生成之前，首先需要创建一个类作为生成的测试用例的基类。</p><p>下面代码中的 TripBase 类是行程验证服务的测试的基类。在 setup 方法中，通过 RestAssuredMockMvc 的 standaloneSetup 方法来配置需要访问的控制器对象；基类的名称 TripBase 是通过命名惯例得到的，其中的后缀 Base 是固定的，而 Trip 来自契约文件所在的目录的名称。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TripBase</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">BeforeEach</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    RestAssuredMockMvc.</span><span style="color:#B392F0;">standaloneSetup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TripValidationController</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TripBase</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">BeforeEach</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    RestAssuredMockMvc.</span><span style="color:#6F42C1;">standaloneSetup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TripValidationController</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面代码中的 TripTest 是自动生成的测试类，其中的每个测试方法对应于一个契约。在每个测试中，根据契约中声明的请求和响应的内容，REST Assured 会发送请求到控制器，并验证响应的内容。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TripTest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TripBase</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Test</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">validate_tripValidationFailed</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// given: </span></span>
<span class="line"><span style="color:#E1E4E8;">   MockMvcRequestSpecification request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">amount</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:1100.00}&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// when: </span></span>
<span class="line"><span style="color:#E1E4E8;">   ResponseOptions response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">spec</span><span style="color:#E1E4E8;">(request) </span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/trip_validation&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// then: </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">statusCode</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;application/json.*&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// and: </span></span>
<span class="line"><span style="color:#E1E4E8;">   DocumentContext parsedJson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> JsonPath.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">asString</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">assertThatJson</span><span style="color:#E1E4E8;">(parsedJson).</span><span style="color:#B392F0;">field</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[&#39;valid&#39;]&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;"> } </span></span>
<span class="line"><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Test</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">validate_tripValidationPassed</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// given: </span></span>
<span class="line"><span style="color:#E1E4E8;">   MockMvcRequestSpecification request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">amount</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">:100.00}&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// when: </span></span>
<span class="line"><span style="color:#E1E4E8;">   ResponseOptions response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">given</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">spec</span><span style="color:#E1E4E8;">(request) </span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/trip_validation&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// then: </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">statusCode</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">assertThat</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">header</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;application/json.*&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// and: </span></span>
<span class="line"><span style="color:#E1E4E8;">   DocumentContext parsedJson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> JsonPath.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">getBody</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">asString</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">assertThatJson</span><span style="color:#E1E4E8;">(parsedJson).</span><span style="color:#B392F0;">field</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[&#39;valid&#39;]&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">isEqualTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;"> } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TripTest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TripBase</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Test</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">validate_tripValidationFailed</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// given: </span></span>
<span class="line"><span style="color:#24292E;">   MockMvcRequestSpecification request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">amount</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:1100.00}&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// when: </span></span>
<span class="line"><span style="color:#24292E;">   ResponseOptions response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">spec</span><span style="color:#24292E;">(request) </span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/trip_validation&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// then: </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">statusCode</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;application/json.*&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// and: </span></span>
<span class="line"><span style="color:#24292E;">   DocumentContext parsedJson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JsonPath.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">asString</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">assertThatJson</span><span style="color:#24292E;">(parsedJson).</span><span style="color:#6F42C1;">field</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[&#39;valid&#39;]&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;"> } </span></span>
<span class="line"><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Test</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">validate_tripValidationPassed</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// given: </span></span>
<span class="line"><span style="color:#24292E;">   MockMvcRequestSpecification request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">amount</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">:100.00}&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// when: </span></span>
<span class="line"><span style="color:#24292E;">   ResponseOptions response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">given</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">spec</span><span style="color:#24292E;">(request) </span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/trip_validation&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// then: </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">statusCode</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">header</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;application/json.*&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// and: </span></span>
<span class="line"><span style="color:#24292E;">   DocumentContext parsedJson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JsonPath.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">asString</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">assertThatJson</span><span style="color:#24292E;">(parsedJson).</span><span style="color:#6F42C1;">field</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[&#39;valid&#39;]&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;"> } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过自动化单元测试的做法，我们可以保证 API 提供者的实现，满足消费者所声明的契约的要求。考虑下面一种情况，如果 API 提供者认为行程金额的上限 1000 的值过高，而需要改成 900，那么可以修改 TripValidationController 的实现，把其中的一行修改成如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> valid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.amount </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">900</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> valid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.amount </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">900</span><span style="color:#24292E;">;</span></span></code></pre></div><p>再运行测试时会发现测试失败，产生的错误如下所示。从错误中可以看到，契约中的声明是，当 amount 值为 999 时，响应中的 valid 的值应该为 true，而 TripValidationController 实际返回的响应中的 valid 的值是 false，这就表示了契约被破坏。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.767 s </span><span style="color:#FDAEB7;font-style:italic;">&lt;&lt;&lt;</span><span style="color:#E1E4E8;"> FAILURE! - in io.vividcode.contract.trip.TripTest </span></span>
<span class="line"><span style="color:#E1E4E8;">[ERROR] validate_tripValidationPassed  Time elapsed: 0.033 s  </span><span style="color:#FDAEB7;font-style:italic;">&lt;&lt;&lt;</span><span style="color:#E1E4E8;"> ERROR! </span></span>
<span class="line"><span style="color:#E1E4E8;">java.lang.IllegalStateException: Parsed JSON [{&quot;valid&quot;:false}] doesn&#39;t match the JSON path [$[?(@.[&#39;valid&#39;] == true)]] </span></span>
<span class="line"><span style="color:#E1E4E8;">	at io.vividcode.contract.trip.TripTest.validate_tripValidationPassed(TripTest.java:56)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.767 s </span><span style="color:#B31D28;font-style:italic;">&lt;&lt;&lt;</span><span style="color:#24292E;"> FAILURE! - in io.vividcode.contract.trip.TripTest </span></span>
<span class="line"><span style="color:#24292E;">[ERROR] validate_tripValidationPassed  Time elapsed: 0.033 s  </span><span style="color:#B31D28;font-style:italic;">&lt;&lt;&lt;</span><span style="color:#24292E;"> ERROR! </span></span>
<span class="line"><span style="color:#24292E;">java.lang.IllegalStateException: Parsed JSON [{&quot;valid&quot;:false}] doesn&#39;t match the JSON path [$[?(@.[&#39;valid&#39;] == true)]] </span></span>
<span class="line"><span style="color:#24292E;">	at io.vividcode.contract.trip.TripTest.validate_tripValidationPassed(TripTest.java:56)</span></span></code></pre></div><p>契约被破坏的原因有很多，有可能是 API 提供者的业务逻辑产生了变化，也有可能是 API 提供者的实现产生了 bug。如果是前者，那么契约应该被更新，以反映业务逻辑的变化；如果是后者，则 API 提供者应该修改自身的实现。不管是哪种情况，契约的存在，以及确保契约被遵守的自动化测试，都可以保证 API 的稳定性。</p><h3 id="工作模式" tabindex="-1">工作模式 <a class="header-anchor" href="#工作模式" aria-label="Permalink to &quot;工作模式&quot;">​</a></h3><p>最后介绍一下使用消费者驱动的契约时的工作模式，契约虽然是保存在 API 提供者项目中，但是由 API 消费者来创建的。消费者团队的开发人员可以直接对提供者的项目进行修改，也可以通过 Pull Request 的方式来提交改动，这就明确了消费者对契约的所有权。</p><p>在实际的开发中，契约的存根 JAR 文件会被发布到远程的 Maven 仓库中，这样保证了团队的所有人员都可以使用存根代码来运行测试。每次对契约进行了修改之后，只需要重新运行 Maven 插件来生成存根代码即可。存根代码有自己的版本，可以追踪变化的历史记录。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>微服务架构的应用中的集成测试是一个很复杂的问题，使用消费者驱动的服务契约测试，可以很好地解决测试的运行速度和可靠性的问题。通过本课时的学习，你可以了解消费者驱动的契约测试的基本概念，以及如何用 Spring Cloud Contract 来实现。</p><p>最后呢，成老师邀请你为本专栏课程进行结课评价，因为你的每一个观点都是我们最关注的点。 <a href="https://wj.qq.com/s2/6902680/3fb2/" target="_blank" rel="noreferrer">点击链接，即可参与课程评价</a>。</p>`,45);function D(T,m,b,P,I,R){const a=o("Image");return e(),t("div",null,[E,y,i,u,F,d,p(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/43/E6/CgqCHl882IaAPsyEAABKuN5O6M4351.png"}),n(),C,A,g,q,v,h,p(a,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/43/E6/CgqCHl882I6APyOQAAAoyp7Lq34381.png"}),n(),B])}const S=l(r,[["render",D]]);export{k as __pageData,S as default};
