import{_ as l,j as t,o as e,g as a,k as i,h as p,Q as o,s as n}from"./chunks/framework.a0d18f64.js";const q=JSON.parse('{"title":"总结以终为始：微服务架构总结和展望","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4780) 总结  以终为始：微服务架构总结和展望.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4780) 总结  以终为始：微服务架构总结和展望.md","lastUpdated":1696682708000}'),g={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4780) 总结  以终为始：微服务架构总结和展望.md"},d=o("",4),S=n("p",null,"Spring 家族技术体系（来自 Spring 官网）",-1),s=n("p",null,"在上图中，这里罗列了 Spring 家族的七大核心技术体系，排在第一位的就是微服务架构，而在Spring 家族中提供微服务开发解决方案的就是 Spring Cloud。Spring Cloud 构建在 Spring Boot 基础之上，它的整体架构图如下所示：",-1),u=n("p",null,"Spring Cloud 与微服务整体架构图（来自 Spring 官网）",-1),_=n("p",null,"技术组件的完备性是 Spring Cloud 框架的主要优势，它集成了业界一大批知名的微服务开发组件。Spring Cloud 的核心组件如下图所示：",-1),C=o("",13),c=n("p",null,"响应式编程技术栈与 Servlet 技术栈之间的对比图（来自 Spring 官网）",-1),h=n("p",null,"可以看到，上图左侧为基于 Spring Webflux 的技术栈，右侧为基于 Spring MVC 的技术栈。我们知道传统的 Spring MVC 构建在 Java EE 的 Servlet 标准之上，该标准本身就是阻塞式和同步的。而 Spring WebFlux 基于响应式流，因此可以用来构建异步非阻塞的服务。",-1),m=n("p",null,"WebFlux 等响应式编程技术的兴起为微服务架构的发展提供了一个很好的场景。我们知道在一个微服务系统中，存在数十乃至数百个独立的微服务，它们相互通信以完成复杂的业务流程。这个过程势必涉及大量的 I/O 操作。I/O 操作，尤其是阻塞式 I/O 操作就会整体增加系统的延迟并降低吞吐量。如果能够在复杂的流程中集成非阻塞、异步通信机制，我们就可以高效处理跨服务之间的网络请求。针对这种场景，WebFlux 也是一种非常有效的解决方案。让我们期待响应式编程技术与微服务之间更加紧密的结合。",-1),A=n("p",null,"至此，整个《Spring Cloud 原理与实战》课程就全部介绍完毕了。最后，祝我们在各自的岗位上能够更上一层楼！",-1);function b(f,k,x,I,T,P){const r=t("Image");return e(),a("div",null,[d,i(r,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8F/0F/CgqCHmAGnIaAVoQUAACRuk5Qiko727.png"}),p(),S,s,i(r,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/8F/0F/CgqCHmAGnI6AYQo4AAA1B5IapO8788.png"}),p(),u,_,i(r,{alt:"Lark20210119-164634.png",src:"https://s0.lgstatic.com/i/image/M00/8F/04/Ciqc1GAGnJWATwDmAAL0w96R-zg577.png"}),p(),C,i(r,{alt:"Lark20210119-164629.png",src:"https://s0.lgstatic.com/i/image2/M01/06/F0/CgpVE2AGnKaAKU7_AAHMAtG9fS4245.png"}),p(),c,h,m,A])}const F=l(g,[["render",b]]);export{q as __pageData,F as default};
