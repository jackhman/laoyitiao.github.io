import{_ as p,j as o,o as e,g as t,k as a,h as n,Q as l,s as c}from"./chunks/framework.a0d18f64.js";const A=JSON.parse('{"title":"06Nginx在系统架构中的作用","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/047_说透性能测试/(6157) 06  Nginx 在系统架构中的作用.md","filePath":"posts/devops/047_说透性能测试/(6157) 06  Nginx 在系统架构中的作用.md","lastUpdated":1696682708000}'),r={name:"posts/devops/047_说透性能测试/(6157) 06  Nginx 在系统架构中的作用.md"},y=l('<h1 id="_06nginx在系统架构中的作用" tabindex="-1">06Nginx在系统架构中的作用 <a class="header-anchor" href="#_06nginx在系统架构中的作用" aria-label="Permalink to &quot;06Nginx在系统架构中的作用&quot;">​</a></h1><p>通过上一模块的学习，相信你已经掌握了 JMeter 工具的核心用法和技能，并且可以在 JMeter工具使用方面游刃有余。这些内容不仅仅可以帮助你提升工作效率，而且能够通过二次开发解决团队内部的定制化需求。</p><p>这一讲我将带你认识一个常用的高性能中间件 Nginx，在正式学习该讲之前，我先跟你聊聊为什么要学习 Nginx，有一位细心的读者给我留言：</p><blockquote><p>第二模块好像都是在围绕如何写一份优秀的性能方案展开，为什么有一篇关于 Nginx 的文章呢？</p></blockquote><p>首先不得不说这个同学的行为很值得我们学习，通过大纲尝试去理清学习的整体架构和逻辑。</p><p>很多同学向我反馈在写方案时有一个核心痛点，即不知道如何制定性能测试的目标。都说要参考真实数据，公司也没有提供相关的查询接口，所以不清楚去哪里获取用户的访问数据。而 <strong>Nginx 作为业内最常用的代理服务器</strong>，较为详细地记录了用户的访问数据，而且在分布式部署性能优化方面也发挥了积极的作用，所以说到性能测试，Nginx 是不得不提的一个中间件。</p><p>本讲就带你学习 Nginx 在应用架构中的作用，并从性能测试角度看如何利用 Nginx 数据统计用户访问量。</p><h3 id="nginx-重要的两个概念" tabindex="-1">Nginx 重要的两个概念 <a class="header-anchor" href="#nginx-重要的两个概念" aria-label="Permalink to &quot;Nginx 重要的两个概念&quot;">​</a></h3><h4 id="代理" tabindex="-1">代理 <a class="header-anchor" href="#代理" aria-label="Permalink to &quot;代理&quot;">​</a></h4><p>首先要来解释一下什么是代理，正向代理和反向代理是什么意思？各自作用是什么？不少同学经常听到这些名词，但往往分不清楚具体区别是什么。</p><p><strong>什么是代理？</strong></p><p>举个例子，比如你很想到某公司去做测试，对方公司的测试主管并不认识你，你也不知道这位测试主管的联系方式，但是你的朋友小王认识，他帮你推荐了简历，此时的小王就起到代理的作用，相当于一个渠道。</p><p><strong>正向代理</strong></p><p>正向代理的特点是你非常清楚地知道你要去哪儿，访问什么服务器，但服务器并不关心你的出发地是哪里，它只知道你从哪个代理服务器过来。</p><p>举个例子，北京去哈尔滨的高铁班次，对于目的地哈尔滨而言，它只知道这部分人是从北京过来的，但是并不清楚这些人之前是不是先从上海或者其他地方先到北京，再转车过来。</p><p><strong>反向代理</strong></p><p>刚刚说了正向代理，那反向代理又是什么呢？我先来说一下应用场景，比如我们的内部服务器集群，是不可能直接暴露出来让外网访问的，这样安全风险就非常大；再比如现在很多网站为了提高性能都采用了分布式部署，通过多台服务器来缓减服务端的压力，这些都可以通过 Nginx 来完成。</p><p>那我们的外网用户如何能够访问到内部的应用呢，Nginx 可以暴露端口给外网用户访问，当接收到请求之后分发给内部的服务器，此时的 Nginx 扮演的是<strong>反向代理的角色</strong>。这样一个过程，客户端是明确的，但对于访问到哪台具体的应用服务器是不明确的。就好像一个上海飞北京的班次，可能还有很多乘客到达北京之后会去沈阳、哈尔滨等，对于出发地上海而言，这个是不关心的。</p><h4 id="负载均衡" tabindex="-1">负载均衡 <a class="header-anchor" href="#负载均衡" aria-label="Permalink to &quot;负载均衡&quot;">​</a></h4><p>负载均衡是 Nginx 最重要也是最常见的功能，为什么需要负载均衡呢？你可以想一想，比如你线上只有一台应用服务器，如下图所示。</p>',20),E=c("p",null,"但是随着用户体量的上升，一台服务器并不能支撑现有用户的访问，那你就会考虑使用两台或者多台服务器，如下图所示：",-1),i=l(`<p>那用户如何能够相对均匀地访问到这些服务器呢，这就需要你去了解 Nginx 的负载均衡策略，简单来说，就是 Nginx 如何分发这些请求到后面的应用服务器集群，下面我介绍下 Nginx 的三种分配策略。</p><p><strong>（1）轮询</strong></p><p>也就是使用平均分配的方式，将每个请求依次分配到配置的后端服务器上。除非有服务宕机，才会停止分发。如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">upstream localhost {</span></span>
<span class="line"><span style="color:#6A737D;">//分发到各应用服务</span></span>
<span class="line"><span style="color:#E1E4E8;">      server  </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">7070</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      server  </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">7071</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    server{</span></span>
<span class="line"><span style="color:#6A737D;">//Nginx核心监听端口</span></span>
<span class="line"><span style="color:#E1E4E8;">        listen </span><span style="color:#79B8FF;">8012</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        server_name localhost;</span></span>
<span class="line"><span style="color:#E1E4E8;">        location </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                proxy_pass         http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost;</span></span>
<span class="line"><span style="color:#E1E4E8;">                proxy_set_header   Host             $host;</span></span>
<span class="line"><span style="color:#E1E4E8;">                proxy_set_header   X</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Real</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">IP        $remote_addr;</span></span>
<span class="line"><span style="color:#E1E4E8;">                proxy_set_header   X</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Forwarded</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">For  $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">upstream localhost {</span></span>
<span class="line"><span style="color:#6A737D;">//分发到各应用服务</span></span>
<span class="line"><span style="color:#24292E;">      server  </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">7070</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      server  </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">7071</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    server{</span></span>
<span class="line"><span style="color:#6A737D;">//Nginx核心监听端口</span></span>
<span class="line"><span style="color:#24292E;">        listen </span><span style="color:#005CC5;">8012</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        server_name localhost;</span></span>
<span class="line"><span style="color:#24292E;">        location </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                proxy_pass         http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost;</span></span>
<span class="line"><span style="color:#24292E;">                proxy_set_header   Host             $host;</span></span>
<span class="line"><span style="color:#24292E;">                proxy_set_header   X</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Real</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">IP        $remote_addr;</span></span>
<span class="line"><span style="color:#24292E;">                proxy_set_header   X</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Forwarded</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">For  $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>（2）权重</strong></p><p>权重即配置轮询的比重，为什么需要这么配置呢？在真实的互联网场景下，很多服务器上都会配置多个应用，这样会导致每台服务器的资源占用不一致，所以在分布式部署配置下也需要注意这一点：</p><ul><li><p>相对空闲的机器可以多配置访问比例；</p></li><li><p>比较繁忙的机器可以少配置一些。</p></li></ul><p>如下代码所示，其中 ip1、ip2 以及 port 需要配置你实际的部署 ip 和 port。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">     upstream test {</span></span>
<span class="line"><span style="color:#E1E4E8;">         server ip1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;"> weight</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">         server ip2</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8081</span><span style="color:#E1E4E8;"> weight</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">     upstream test {</span></span>
<span class="line"><span style="color:#24292E;">         server ip1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8080</span><span style="color:#24292E;"> weight</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         server ip2</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8081</span><span style="color:#24292E;"> weight</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>（3）ip_hash</strong></p><p>但上面两种配置方式在电商场景下有个很常见的问题，比如你登录了一个网站，登录信息已经保存到 a 机器，但当你做后续操作时的请求会到 b 机器，那么就获取不到你原来登录的信息，此时你就需要重新登录了。这样的情况是用户肯定不能接受的，ip_hash 模式就可以很好地解决这个问题，让每次访问能基于同一用户访问固定的服务器。</p><p>ip_hash 模式配置示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    upstream test {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ip_hash;</span></span>
<span class="line"><span style="color:#E1E4E8;">    server localhost</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    server localhost</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8081</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    upstream test {</span></span>
<span class="line"><span style="color:#24292E;">    ip_hash;</span></span>
<span class="line"><span style="color:#24292E;">    server localhost</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    server localhost</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8081</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接着我们来看下如何基于 Nginx 记录的数据去分析用户访问请求分布，在讲下文之前，按照我的习惯，我想先说一说为什么我要通过 shell 命令去分析 Nginx 日志。</p><p>首先对于测试同学而言，比较熟练地掌握了 Python 或者 Java 的用法，但对于 Linux 中的 shell 命令不是很熟悉，也有同学说 shell 能做的我觉得 Python 也可以实现。我想对于性能测试而言，处理效率是一个我们都比较关心的问题。在 Linux 服务器上，你可以处理数据的级别达到百万条以上，对于 Linux 上的文本操作而言，相对于 Python 或者 Java，shell 在处理效率方面有着得天独厚的优势，所以掌握基础的 shell 命令还是必要的。</p><p>再说我为什么会选择 Nginx 日志去分析，这也得从互联网行业的现状说起：</p><ul><li><p>对于大型互联网公司，关于获取分析日志我想早已有平台化支持，一键就可以导出你需要的用户数据访问报表；</p></li><li><p>而对于中小公司的测试来说，去哪里获取可能都不是很清楚。</p></li></ul><p>所以我选择了使用 Nginx 这种比较原生的方式去讲解，这样对于使用过平台化操作的同学也可以了解一些底层的逻辑操作，也让没有接触过这方面数据统计的同学掌握其中一种实现方法。</p><h3 id="linux-的-shell-命令" tabindex="-1">Linux 的 shell 命令 <a class="header-anchor" href="#linux-的-shell-命令" aria-label="Permalink to &quot;Linux 的 shell 命令&quot;">​</a></h3><p>Linux 的 shell 命令常见的文本操作命令有 awk、sed、sort、wc 等，通过这些命令的熟练掌握和搭配使用，相信你可以对 Linux 服务器上的文本处理如鱼得水。</p><h4 id="awk" tabindex="-1">awk <a class="header-anchor" href="#awk" aria-label="Permalink to &quot;awk&quot;">​</a></h4><p>awk 可以将文本中的内容<strong>按行去读取</strong>，然后将读取出来的行按照规定的分隔符去提取你所需要的内容。</p><p>awk 常用参数是 -F 指定分隔符。</p><p>比如以下代码就是以 : 为分隔符，寻找以 root 开头的行数据，打印第 7 列。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># awk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">F </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/^root/{print $7}&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># awk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">F </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/^root/{print $7}&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">bin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bash</span></span></code></pre></div><p>以下代码表示以 begin 开头、end 结尾，打印第 1 列数据。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">代码块示例</span></span>
<span class="line"><span style="color:#E1E4E8;"># awk </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">F </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;BEGIN{print &quot;begin&quot;}{print $1} END{print &quot;end&quot;}&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">passwd</span></span>
<span class="line"><span style="color:#E1E4E8;">begin</span></span>
<span class="line"><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">..</span></span>
<span class="line"><span style="color:#E1E4E8;">end</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">代码块示例</span></span>
<span class="line"><span style="color:#24292E;"># awk </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">F </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;BEGIN{print &quot;begin&quot;}{print $1} END{print &quot;end&quot;}&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">passwd</span></span>
<span class="line"><span style="color:#24292E;">begin</span></span>
<span class="line"><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">..</span></span>
<span class="line"><span style="color:#24292E;">end</span></span></code></pre></div><h4 id="sed" tabindex="-1">Sed <a class="header-anchor" href="#sed" aria-label="Permalink to &quot;Sed&quot;">​</a></h4><p>Sed 是一个<strong>流编辑器</strong> ，一次只能处理一行内容，需要注意的是 sed 并不改变文本本身的内容，它只是把结果存放在<strong>临时缓冲区</strong>中。</p><p>sed 常用的参数有：</p><ul><li><p>a 表示新增；</p></li><li><p>i 表示插入；</p></li><li><p>c 表示取代；</p></li><li><p>d 表示删除。</p></li></ul><p>举个例子，我们设置一个文本文件，每行只有一个数字，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> data]# cat sed.txt </span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> data]# cat sed.txt </span></span>
<span class="line"><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#005CC5;">3</span></span></code></pre></div><p>在第一行下新增 4：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> data]# sed </span><span style="color:#9ECBFF;">&#39;1a 4&#39;</span><span style="color:#E1E4E8;"> sed.txt </span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> data]# sed </span><span style="color:#032F62;">&#39;1a 4&#39;</span><span style="color:#24292E;"> sed.txt </span></span>
<span class="line"><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#005CC5;">3</span></span></code></pre></div><p>看下原来的文本，你会发现没有任何改动，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> data]# cat sed.txt </span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> data]# cat sed.txt </span></span>
<span class="line"><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#005CC5;">3</span></span></code></pre></div><h4 id="sort" tabindex="-1">Sort <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;Sort&quot;">​</a></h4><p>Sort 的默认方式就是把第一列根据 ASCII 值排序输出。常用参数有：</p><ul><li><p>-n，依照数值的大小排序；</p></li><li><p>-r，以相反的顺序来排序；</p></li><li><p>-k，选择以某个区间进行排序。</p></li></ul><p>举个简单的示例，将上述的 sed.txt 倒序输出，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> data]# sort </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r sed.txt </span></span>
<span class="line"><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> data]# sort </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r sed.txt </span></span>
<span class="line"><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#005CC5;">1</span></span></code></pre></div><h4 id="uniq" tabindex="-1">uniq <a class="header-anchor" href="#uniq" aria-label="Permalink to &quot;uniq&quot;">​</a></h4><p>uniq 用于检查或者统计文本出现的重复行，常用参数是 -c，它用于<strong>连续重复行次数的统计</strong>。</p><p>我们构造一个 uniq.txt，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> data]# cat uniq.txt </span></span>
<span class="line"><span style="color:#E1E4E8;">hello</span></span>
<span class="line"><span style="color:#E1E4E8;">hello</span></span>
<span class="line"><span style="color:#E1E4E8;">cctester</span></span>
<span class="line"><span style="color:#E1E4E8;">cctester</span></span>
<span class="line"><span style="color:#E1E4E8;">cctester</span></span>
<span class="line"><span style="color:#E1E4E8;">com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> data]# cat uniq.txt </span></span>
<span class="line"><span style="color:#24292E;">hello</span></span>
<span class="line"><span style="color:#24292E;">hello</span></span>
<span class="line"><span style="color:#24292E;">cctester</span></span>
<span class="line"><span style="color:#24292E;">cctester</span></span>
<span class="line"><span style="color:#24292E;">cctester</span></span>
<span class="line"><span style="color:#24292E;">com</span></span></code></pre></div><p>然后对 uniq.txt 进行重复数据统计，并根据重复次数由大到小排序，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> data]# uniq </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c uniq.txt </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">sort </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> cctester</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> hello</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> data]# uniq </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c uniq.txt </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">sort </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> cctester</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> hello</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> com</span></span></code></pre></div><p>学完了这些基础命令，我带你来看 Nginx 日志分析，如果你不清楚你的 Nginx 日志地址，查看nginx.conf 文件的配置即可，指定日志路径如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    access_log  </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">logs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">access.log  main;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    access_log  </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">logs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">access.log  main;</span></span></code></pre></div><p>其中部分的日志显示，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">120.204</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">101</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">238</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">29</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Nov</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">0800] </span><span style="color:#9ECBFF;">&quot;GET /hello/map HTTP/1.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">202</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">47.92</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">11</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">105</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">29</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Nov</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">0800] </span><span style="color:#9ECBFF;">&quot;GET /hello/map HTTP/1.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">202</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">185.39</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">101</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">238</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">29</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Nov</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">0800] </span><span style="color:#9ECBFF;">&quot;GET /hello/list HTTP/1.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-</span></span>
<span class="line"><span style="color:#9ECBFF;">101.132.114.23 - - [29/Nov/2020:14:19:39 +0800] &quot;</span><span style="color:#E1E4E8;">GET </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">hello</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">list HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#9ECBFF;">&quot; 200 150 &quot;</span><span style="color:#F97583;">-</span></span>
<span class="line"><span style="color:#79B8FF;">120.204</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">101</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">238</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">29</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Nov</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">19</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">0800] </span><span style="color:#9ECBFF;">&quot;POST /v1/login HTTP/1.1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">36</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;-</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">120.204</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">101</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">238</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">29</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Nov</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">39</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">0800] </span><span style="color:#032F62;">&quot;GET /hello/map HTTP/1.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">202</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">47.92</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">11</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">105</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">29</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Nov</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">39</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">0800] </span><span style="color:#032F62;">&quot;GET /hello/map HTTP/1.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">202</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">185.39</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">101</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">238</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">29</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Nov</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">39</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">0800] </span><span style="color:#032F62;">&quot;GET /hello/list HTTP/1.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">150</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-</span></span>
<span class="line"><span style="color:#032F62;">101.132.114.23 - - [29/Nov/2020:14:19:39 +0800] &quot;</span><span style="color:#24292E;">GET </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">hello</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">list HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#032F62;">&quot; 200 150 &quot;</span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#005CC5;">120.204</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">101</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">238</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">29</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Nov</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">19</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">39</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">0800] </span><span style="color:#032F62;">&quot;POST /v1/login HTTP/1.1&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">36</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-</span></span></code></pre></div><p>观察上述的日志，是以空格为分隔符号，第一行第一列是 120.204.101.238，第一行第二列是 -，以此类推，打印第 7 列，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> awk </span><span style="color:#9ECBFF;">&#39;{print $7}&#39;</span><span style="color:#E1E4E8;">  access.log </span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">hello</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">list</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">login</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">hello</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">list</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">hello</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">map</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> awk </span><span style="color:#032F62;">&#39;{print $7}&#39;</span><span style="color:#24292E;">  access.log </span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">hello</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">list</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">login</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">hello</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">list</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">hello</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">map</span></span></code></pre></div><p>你也可以自行验证下输出是否符合预期。</p><p>接着我基于这份日志统计访问接口的比例分布，使用如下命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cat access.log </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">awk </span><span style="color:#9ECBFF;">&#39;{print $7}&#39;</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">sort</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">uniq </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">sort </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cat access.log </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">awk </span><span style="color:#032F62;">&#39;{print $7}&#39;</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">sort</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">uniq </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">sort </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span></span></code></pre></div><p>这个命令，是提取 acccess.log 的第 7 列，也就是接口路径：</p><ul><li><p>先 sort 排序，这样可以将相同的接口访问路径合并一起；</p></li><li><p>再使用 uniq -c 统计连续访问的次数；</p></li><li><p>最后根据访问次数排序，便可以得到如下结果。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> logs]# cat access.log </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">awk </span><span style="color:#9ECBFF;">&#39;{print $7}&#39;</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">sort</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">uniq </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">c</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">sort </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">k </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">r</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">87280</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">hello</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">list</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">18892</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">hello</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">map</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">12846</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">login</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> logs]# cat access.log </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">awk </span><span style="color:#032F62;">&#39;{print $7}&#39;</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">sort</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">uniq </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">c</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">sort </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">k </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">r</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">87280</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">hello</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">list</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">18892</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">hello</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">map</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">12846</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">login</span></span></code></pre></div><p>通过输出结果可以看出第一列就是给定日志内的接口访问次数统计，比如 87280 就是 /hello/list 的访问次数。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过本讲的学习，你已经相对全面地了解了 Nginx 在系统架构中的作用，通过对访问日志的分析，你也能够获取用户的基本访问情况。在实际工作过程中，面对没有原始访问数据的情况下，你就多了一条思路、一种解决方案。</p><p>在你参与的项目中，可以根据本讲的内容进行实践，有任何问题和心得，欢迎在留言区交流。</p><p>下一讲我将带你学习性能测试中有哪些常见的目标，以及如何制定这些目标。</p>`,65);function d(F,h,g,u,C,v){const s=o("Image");return e(),t("div",null,[y,a(s,{alt:"-1.png",src:"https://s0.lgstatic.com/i/image/M00/91/80/Ciqc1GAOtASAFkMnAAB8g0S7vEo985.png"}),n(),E,a(s,{alt:"-2.png",src:"https://s0.lgstatic.com/i/image/M00/91/8B/CgqCHmAOtBuAdrykAADniCVZ-pg926.png"}),n(),i])}const B=p(r,[["render",d]]);export{A as __pageData,B as default};
