import{_ as p,j as o,o as e,g as t,k as n,h as a,Q as l,s as c}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"19基于etcd实现微服务的注册与发现","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6413) 19  基于 etcd 实现微服务的注册与发现.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6413) 19  基于 etcd 实现微服务的注册与发现.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/etcd 原理与实践_文档/(6413) 19  基于 etcd 实现微服务的注册与发现.md"},E=l('<h1 id="_19基于etcd实现微服务的注册与发现" tabindex="-1">19基于etcd实现微服务的注册与发现 <a class="header-anchor" href="#_19基于etcd实现微服务的注册与发现" aria-label="Permalink to &quot;19基于etcd实现微服务的注册与发现&quot;">​</a></h1><p>在单体应用向微服务架构演进的过程中，原本的巨石型应用会按照业务需求被拆分成多个微服务，每个服务提供特定的功能，也可能依赖于其他的微服务。此时，每个微服务实例都可以动态部署，服务实例之间的调用通过<strong>轻量级的远程调用方式</strong>（HTTP、消息队列等）实现，它们之间通过预先定义好的接口进行访问，因此需要一个中心化的组件对各个服务实例的信息进行管理。</p><p>这一讲我们就来介绍微服务架构中的服务注册与发现概念，在此基础上探究如何基于 etcd 原生实现服务注册与发现。</p><h3 id="微服务架构中的服务注册与发现" tabindex="-1">微服务架构中的服务注册与发现 <a class="header-anchor" href="#微服务架构中的服务注册与发现" aria-label="Permalink to &quot;微服务架构中的服务注册与发现&quot;">​</a></h3><p>在微服务架构中，多个微服务间的通信需要依赖服务注册与发现组件获取指定服务实例的地址信息，才能正确地发起 RPC 调用，保证分布式系统的高可用、高并发。服务注册与发现主要包含两部分：服务注册的功能与服务发现的功能。服务注册是指服务实例启动时将自身信息注册到服务注册与发现中心，并在运行时通过心跳等方式向其汇报自身服务状态；服务发现是指服务实例向服务注册与发现中心获取其他服务实例信息，用于远程调用。</p><p>下面我们来看服务注册与发现中心的职责和服务实例进行服务注册的基本流程，以及分布式系统中数据同步的基本原理 CAP。</p><h4 id="服务注册与发现中心有什么功能" tabindex="-1">服务注册与发现中心有什么功能？ <a class="header-anchor" href="#服务注册与发现中心有什么功能" aria-label="Permalink to &quot;服务注册与发现中心有什么功能？&quot;">​</a></h4><p>在传统单体应用中，应用部署在固定的物理机器或云平台上，一般通过固定在代码内部或者配置文件的服务地址和端口直接发起调用。由于应用数量较少，系统结构复杂度不高，开发人员和运维人员可以较为轻松地进行管理和配置。</p><p>随着应用架构向微服务架构迁移，服务数量的增加和动态部署、动态扩展的特性，使得服务地址和端口在运行时随时可变。对此，我们需要一个额外的中心化组件统一管理动态部署的微服务应用的服务实例元数据，一般称它为服务注册与发现中心。服务注册与发现中心主要有以下职责：</p><ul><li><p>管理当前注册到服务注册与发现中心的微服务实例元数据信息，包括服务实例的服务名、IP 地址、端口号、服务描述和服务状态等；</p></li><li><p>与注册到服务发现与注册中心的微服务实例维持心跳，定期检查注册表中的服务实例是否在线，并剔除无效服务实例信息；</p></li><li><p>提供服务发现能力，为服务调用方提供服务提供方的服务实例元数据。</p></li></ul><p>通过服务发现与注册中心，我们可以很方便地管理系统中动态变化的服务实例信息。但是与此同时，它也可能成为系统的瓶颈和故障点。因为服务之间的调用信息来自服务注册与发现中心，当它不可用时，服务之间的调用也就无法正常进行。因此服务发现与注册中心一般会<strong>集群化部署</strong>，提供高可用性和高稳定性。</p><p>除了具体的功能，那么有没有理论指导如何实现微服务架构中的服务注册与发现呢？这就要提到分布式中著名的 CAP 理论了。</p><h4 id="分布式中的-cap-理论" tabindex="-1">分布式中的 CAP 理论 <a class="header-anchor" href="#分布式中的-cap-理论" aria-label="Permalink to &quot;分布式中的 CAP 理论&quot;">​</a></h4><p>在本质上来讲，微服务应用属于分布式系统的一种落地实践，而分布式系统最大的难点是<strong>处理各个节点之间数据状态的一致性</strong>。即使是无状态的 HTTP RESTful API 请求，在处理多服务实例场景下修改数据状态的请求，也需要通过数据库或者分布式缓存等外部系统维护数据的一致性。我们要讲到的 CAP 原理就是描述分布式系统下节点数据同步的基本定理。</p><p>CAP 原理由加州大学的 Eric Brewer 教授提出，分别指<strong>Consistency（一致性）、Availablity （可用性）、Partition tolerance（分区容忍性）</strong>。Eric Brewer 认为，以上三个指标最多只能同时满足两个。</p><ul><li><p>Consistency，指数据一致性，表示一个系统的数据信息（包括备份数据）在同一时刻都是一致的。在分布式系统下，同一份数据可能存在于多个不同的实例中，在数据强一致性的要求下，修改其中一份数据后必须同步到它的所有备份中。在数据同步的任何时候，都需要保证所有对该份数据的请求将返回同样的状态。</p></li><li><p>Availablity，指服务可用性，要求服务在接收到客户端请求后，都能够给出响应。服务可用性考量的是系统的可用性，要求系统在高并发情况和部分节点宕机的情况下，系统整体依然能够响应客户端的请求。</p></li><li><p>Partition tolerance，指分区容忍性。在分布式系统中，不同节点之间通过网络进行通信。由于网络的不可靠性，位于不同网络分区的服务节点可能会通信失败，如果系统能够容忍这种情况，说明它是满足分区容忍性的。如果系统不能满足，将会限制分布式系统的扩展性，即服务节点的部署数量和地区都会受限，也就违背了分布式系统设计的初衷，所以一般来说分布式系统都会满足分区容忍性。</p></li></ul><p>但是在满足了分区容忍性的前提下，分布式系统并不能同时满足数据一致性和服务可用性。假设服务 A 现在有两个实例 A1 和 A2，它们之间的网络通信出现了异常，基于分区容忍性，这并不会影响 A1 和 A2 独立的正常运行。假如此时客户端请求 A1，请求将数据 B 从 B1 状态修改为 B2，由于网络的不可用，数据 B 的修改并不能通知到实例 A2。</p><p>如果此时另一个客户端向 A2 请求数据 B，如果 A2 返回数据 B1，将满足服务可用性，但并不能满足数据一致性；如果 A2 等待 A1 的通知后才返回数据 B 的正确状态，虽然满足了数据一致性，但并不能响应客户端请求，违背了服务可用性的指标。</p><p>基于分布式系统的基本特质，必须要满足 P，接下来我们需要考虑满足 C 还是 A。根据 CAP 理论，etcd 在满足网络分区可用性的基础上，优先满足了一致性 C。但是当 etcd 出现异常时，无法向其写入新数据。</p><h3 id="原生实现服务注册与发现" tabindex="-1">原生实现服务注册与发现 <a class="header-anchor" href="#原生实现服务注册与发现" aria-label="Permalink to &quot;原生实现服务注册与发现&quot;">​</a></h3><p>了解了服务注册与发现的相关概念，下面我们基于 etcd 原生的 clientv3 API 实现服务的注册，对外提供服务。其他服务调用该服务时，则通过服务名发现对应的服务实例，随后发起调用。简单示例的服务架构图如下所示：</p>',21),y=l(`<p>etcd 服务架构图</p><p>Gateway 作为调用服务，user-service 作为被调用服务，所有的服务都注册到 etcd。Gateway 发起调用时，首先请求 etcd 获取其对应的服务器地址和端口，各个服务通过 lease 租约机制与 etcd 保持心跳，通过 watch 机制监测注册到 etcd 上的服务实例变化。</p><h4 id="user-service-的实现" tabindex="-1">user-service 的实现 <a class="header-anchor" href="#user-service-的实现" aria-label="Permalink to &quot;user-service 的实现&quot;">​</a></h4><p>首先实现的是 user-service，user-service 将实例信息注册到 etcd，包括 host、port 等信息。我们暂且注册 host 地址与 port，注册到 etcd 之后，user-service 定期续租服务实例信息，相当于保持心跳。续租的频率可以控制，因为频繁的续租请求会造成通信资源的占用。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ( </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">go.etcd.io/etcd/clientv3</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">time</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 创建租约注册服务</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ServiceReg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	client        </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">clientv3.Client</span></span>
<span class="line"><span style="color:#E1E4E8;">	lease         clientv3.Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseResp     </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">clientv3.LeaseGrantResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">	canclefunc    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	keepAliveChan </span><span style="color:#F97583;">&lt;-chan</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">clientv3.LeaseKeepAliveResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">	key           </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewServiceReg</span><span style="color:#E1E4E8;">(addr []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, timeNum </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ServiceReg, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	conf </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> clientv3.Config{</span></span>
<span class="line"><span style="color:#E1E4E8;">		Endpoints:   addr,</span></span>
<span class="line"><span style="color:#E1E4E8;">		DialTimeout: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">		client </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">clientv3.Client</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> clientTem, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> clientv3.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(conf); err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientTem</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	ser </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ServiceReg{</span></span>
<span class="line"><span style="color:#E1E4E8;">		client: client,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ser.</span><span style="color:#79B8FF;">setLease</span><span style="color:#E1E4E8;">(timeNum); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> ser.</span><span style="color:#79B8FF;">ListenLeaseRespChan</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ser, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ser, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NewServiceReg</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;localhost:2379&quot;</span><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> ser.</span><span style="color:#79B8FF;">RevokeLease</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> ser.</span><span style="color:#79B8FF;">PutService</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;http://localhost:8080&quot;</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Panic</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 阻塞，持续运行</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ( </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">go.etcd.io/etcd/clientv3</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">time</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 创建租约注册服务</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceReg</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	client        </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">clientv3.Client</span></span>
<span class="line"><span style="color:#24292E;">	lease         clientv3.Lease</span></span>
<span class="line"><span style="color:#24292E;">	leaseResp     </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">clientv3.LeaseGrantResponse</span></span>
<span class="line"><span style="color:#24292E;">	canclefunc    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	keepAliveChan </span><span style="color:#D73A49;">&lt;-chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">clientv3.LeaseKeepAliveResponse</span></span>
<span class="line"><span style="color:#24292E;">	key           </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewServiceReg</span><span style="color:#24292E;">(addr []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, timeNum </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ServiceReg, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	conf </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> clientv3.Config{</span></span>
<span class="line"><span style="color:#24292E;">		Endpoints:   addr,</span></span>
<span class="line"><span style="color:#24292E;">		DialTimeout: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">		client </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">clientv3.Client</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> clientTem, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> clientv3.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(conf); err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientTem</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	ser </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ServiceReg{</span></span>
<span class="line"><span style="color:#24292E;">		client: client,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ser.</span><span style="color:#005CC5;">setLease</span><span style="color:#24292E;">(timeNum); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> ser.</span><span style="color:#005CC5;">ListenLeaseRespChan</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ser, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	ser, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NewServiceReg</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;localhost:2379&quot;</span><span style="color:#24292E;">}, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> ser.</span><span style="color:#005CC5;">RevokeLease</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> ser.</span><span style="color:#005CC5;">PutService</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;http://localhost:8080&quot;</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Panic</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 阻塞，持续运行</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码首先初始化 etcd 连接，通过 ServiceReg 创建租约注册服务。随后设置 Lease、续租，将服务的注册绑定到创建好的 Lease 上面。主函数入口中增加了 select 阻塞，模拟服务的持续运行。</p><p>下面我们具体来看创建租约和设置续租的实现，代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 设置租约</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ServiceReg) </span><span style="color:#B392F0;">setLease</span><span style="color:#E1E4E8;">(timeNum </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	lease </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> clientv3.</span><span style="color:#79B8FF;">NewLease</span><span style="color:#E1E4E8;">(this.client)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 设置租约时间</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseResp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> lease.</span><span style="color:#79B8FF;">Grant</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), timeNum)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 设置续租</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx, cancelFunc </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithCancel</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseRespChan, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> lease.</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">(ctx, leaseResp.ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	this.lease </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lease</span></span>
<span class="line"><span style="color:#E1E4E8;">	this.leaseResp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> leaseResp</span></span>
<span class="line"><span style="color:#E1E4E8;">	this.canclefunc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cancelFunc</span></span>
<span class="line"><span style="color:#E1E4E8;">	this.keepAliveChan </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> leaseRespChan</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 监听续租情况</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ServiceReg) </span><span style="color:#B392F0;">ListenLeaseRespChan</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> leaseKeepResp </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">this.keepAliveChan:</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> leaseKeepResp </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;已经关闭续租功能</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">			} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;续租成功</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 通过租约注册服务</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ServiceReg) </span><span style="color:#B392F0;">PutService</span><span style="color:#E1E4E8;">(key, val </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	kv </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> clientv3.</span><span style="color:#79B8FF;">NewKV</span><span style="color:#E1E4E8;">(this.client)</span></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;register user server for </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, val)</span></span>
<span class="line"><span style="color:#E1E4E8;">	_, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> kv.</span><span style="color:#79B8FF;">Put</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), key, val, clientv3.</span><span style="color:#79B8FF;">WithLease</span><span style="color:#E1E4E8;">(this.leaseResp.ID))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 撤销租约</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ServiceReg) </span><span style="color:#B392F0;">RevokeLease</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	this.</span><span style="color:#79B8FF;">canclefunc</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second)</span></span>
<span class="line"><span style="color:#E1E4E8;">	_, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> this.lease.</span><span style="color:#79B8FF;">Revoke</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), this.leaseResp.ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 设置租约</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ServiceReg) </span><span style="color:#6F42C1;">setLease</span><span style="color:#24292E;">(timeNum </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	lease </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> clientv3.</span><span style="color:#005CC5;">NewLease</span><span style="color:#24292E;">(this.client)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 设置租约时间</span></span>
<span class="line"><span style="color:#24292E;">	leaseResp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> lease.</span><span style="color:#005CC5;">Grant</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), timeNum)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 设置续租</span></span>
<span class="line"><span style="color:#24292E;">	ctx, cancelFunc </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithCancel</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	leaseRespChan, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> lease.</span><span style="color:#005CC5;">KeepAlive</span><span style="color:#24292E;">(ctx, leaseResp.ID)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	this.lease </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lease</span></span>
<span class="line"><span style="color:#24292E;">	this.leaseResp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> leaseResp</span></span>
<span class="line"><span style="color:#24292E;">	this.canclefunc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cancelFunc</span></span>
<span class="line"><span style="color:#24292E;">	this.keepAliveChan </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> leaseRespChan</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 监听续租情况</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ServiceReg) </span><span style="color:#6F42C1;">ListenLeaseRespChan</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> leaseKeepResp </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">this.keepAliveChan:</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> leaseKeepResp </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;已经关闭续租功能</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">			} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;续租成功</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 通过租约注册服务</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ServiceReg) </span><span style="color:#6F42C1;">PutService</span><span style="color:#24292E;">(key, val </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	kv </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> clientv3.</span><span style="color:#005CC5;">NewKV</span><span style="color:#24292E;">(this.client)</span></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;register user server for </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, val)</span></span>
<span class="line"><span style="color:#24292E;">	_, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> kv.</span><span style="color:#005CC5;">Put</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), key, val, clientv3.</span><span style="color:#005CC5;">WithLease</span><span style="color:#24292E;">(this.leaseResp.ID))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 撤销租约</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ServiceReg) </span><span style="color:#6F42C1;">RevokeLease</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	this.</span><span style="color:#005CC5;">canclefunc</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second)</span></span>
<span class="line"><span style="color:#24292E;">	_, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> this.lease.</span><span style="color:#005CC5;">Revoke</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), this.leaseResp.ID)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的实现中，设置键值对的租期是 5 秒，即服务心跳的 TTL。为了过期之后 user-service 依然能够被其他服务正确调用，我们需要定期续租。其实这也是一种保持心跳的形式，通过单独开启协程进行续租，keepAliveChan 用于接收续租的结果。当服务关闭，调用<code>RevokeLease</code>，释放租约。</p><h4 id="客户端调用" tabindex="-1">客户端调用 <a class="header-anchor" href="#客户端调用" aria-label="Permalink to &quot;客户端调用&quot;">​</a></h4><p>我们接着调用 user-service 的客户端，客户端将从 etcd 获取 user 服务的实例信息，并监听 etcd 中 user 服务实例的变更。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/coreos/etcd/mvcc/mvccpb</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">go.etcd.io/etcd/clientv3</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">sync</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">time</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 客户端连接的结构体</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClientInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	client     </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">clientv3.Client</span></span>
<span class="line"><span style="color:#E1E4E8;">	serverList </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	lock       sync.Mutex</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 初始化 etcd 客户端连接</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewClientInfo</span><span style="color:#E1E4E8;">(addr []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ClientInfo, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	conf </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> clientv3.Config{</span></span>
<span class="line"><span style="color:#E1E4E8;">		Endpoints:   addr,</span></span>
<span class="line"><span style="color:#E1E4E8;">		DialTimeout: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> clientv3.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(conf); err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">ClientInfo{</span></span>
<span class="line"><span style="color:#E1E4E8;">			client:     client,</span></span>
<span class="line"><span style="color:#E1E4E8;">			serverList: </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">		}, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取服务实例信息</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ClientInfo) </span><span style="color:#B392F0;">GetService</span><span style="color:#E1E4E8;">(prefix </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) ([]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> addrs, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> this.</span><span style="color:#79B8FF;">getServiceByName</span><span style="color:#E1E4E8;">(prefix); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;get service &quot;</span><span style="color:#E1E4E8;">, prefix, </span><span style="color:#9ECBFF;">&quot; for instance list: &quot;</span><span style="color:#E1E4E8;">, addrs)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> this.</span><span style="color:#79B8FF;">watcher</span><span style="color:#E1E4E8;">(prefix)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> addrs, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 监控指定键值对的变更</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ClientInfo) </span><span style="color:#B392F0;">watcher</span><span style="color:#E1E4E8;">(prefix </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	rch </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> this.client.</span><span style="color:#79B8FF;">Watch</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(), prefix, clientv3.</span><span style="color:#79B8FF;">WithPrefix</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> wresp </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> rch {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, ev </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> wresp.Events {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> ev.Type {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> mvccpb.PUT: </span><span style="color:#6A737D;">// 写入的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">				this.</span><span style="color:#79B8FF;">SetServiceList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(ev.Kv.Key), </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(ev.Kv.Value))</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> mvccpb.DELETE: </span><span style="color:#6A737D;">// 删除的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">				this.</span><span style="color:#79B8FF;">DelServiceList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(ev.Kv.Key))</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	cli, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NewClientInfo</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;localhost:2379&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">	cli.</span><span style="color:#79B8FF;">GetService</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// select 阻塞，持续运行</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/coreos/etcd/mvcc/mvccpb</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">go.etcd.io/etcd/clientv3</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">sync</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">time</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 客户端连接的结构体</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClientInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	client     </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">clientv3.Client</span></span>
<span class="line"><span style="color:#24292E;">	serverList </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	lock       sync.Mutex</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 初始化 etcd 客户端连接</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewClientInfo</span><span style="color:#24292E;">(addr []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ClientInfo, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	conf </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> clientv3.Config{</span></span>
<span class="line"><span style="color:#24292E;">		Endpoints:   addr,</span></span>
<span class="line"><span style="color:#24292E;">		DialTimeout: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> clientv3.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(conf); err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">ClientInfo{</span></span>
<span class="line"><span style="color:#24292E;">			client:     client,</span></span>
<span class="line"><span style="color:#24292E;">			serverList: </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">		}, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取服务实例信息</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ClientInfo) </span><span style="color:#6F42C1;">GetService</span><span style="color:#24292E;">(prefix </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) ([]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> addrs, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> this.</span><span style="color:#005CC5;">getServiceByName</span><span style="color:#24292E;">(prefix); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get service &quot;</span><span style="color:#24292E;">, prefix, </span><span style="color:#032F62;">&quot; for instance list: &quot;</span><span style="color:#24292E;">, addrs)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> this.</span><span style="color:#005CC5;">watcher</span><span style="color:#24292E;">(prefix)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> addrs, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 监控指定键值对的变更</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ClientInfo) </span><span style="color:#6F42C1;">watcher</span><span style="color:#24292E;">(prefix </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	rch </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> this.client.</span><span style="color:#005CC5;">Watch</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(), prefix, clientv3.</span><span style="color:#005CC5;">WithPrefix</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> wresp </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> rch {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, ev </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> wresp.Events {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> ev.Type {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> mvccpb.PUT: </span><span style="color:#6A737D;">// 写入的事件</span></span>
<span class="line"><span style="color:#24292E;">				this.</span><span style="color:#005CC5;">SetServiceList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(ev.Kv.Key), </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(ev.Kv.Value))</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> mvccpb.DELETE: </span><span style="color:#6A737D;">// 删除的事件</span></span>
<span class="line"><span style="color:#24292E;">				this.</span><span style="color:#005CC5;">DelServiceList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(ev.Kv.Key))</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	cli, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NewClientInfo</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;localhost:2379&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">	cli.</span><span style="color:#005CC5;">GetService</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// select 阻塞，持续运行</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述实现主要包括以下几个步骤：</p><ul><li><p>创建一个 client，与 etcd 建立连接；</p></li><li><p>匹配到所有相同前缀的 key，把值存到 serverList 的 map 结构中；</p></li><li><p>watch 该 key 对应的前缀，当有增加或删除的时候修改 map 中的数据，该 map 实际维护了实时的服务列表。</p></li></ul><p>总的来说，先创建 etcd 连接，构建 ClientInfo 对象，随后获取指定的服务<code>user</code>实例信息；最后监测 user 服务实例的变更事件，根据不同的事件产生不同的行为。</p><p>如下代码是客户端实现涉及的主要函数：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 根据服务名，获取服务实例信息</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ClientInfo) </span><span style="color:#B392F0;">getServiceByName</span><span style="color:#E1E4E8;">(prefix </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) ([]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> this.client.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(), prefix, clientv3.</span><span style="color:#79B8FF;">WithPrefix</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	addrs </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> this.</span><span style="color:#79B8FF;">extractAddrs</span><span style="color:#E1E4E8;">(resp)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> addrs, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 根据 etcd 的响应，提取服务实例的数组</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ClientInfo) </span><span style="color:#B392F0;">extractAddrs</span><span style="color:#E1E4E8;">(resp </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">clientv3.GetResponse) []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	addrs </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> resp </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> resp.Kvs </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> addrs</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> resp.Kvs {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> resp.Kvs[i].Value; v </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			this.</span><span style="color:#79B8FF;">SetServiceList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(resp.Kvs[i].Key), </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(resp.Kvs[i].Value))</span></span>
<span class="line"><span style="color:#E1E4E8;">			addrs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(addrs, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(v))</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> addrs</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 设置 serverList</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ClientInfo) </span><span style="color:#B392F0;">SetServiceList</span><span style="color:#E1E4E8;">(key, val </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	this.lock.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> this.lock.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	this.serverList[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(val)</span></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;set data key :&quot;</span><span style="color:#E1E4E8;">, key, </span><span style="color:#9ECBFF;">&quot;val:&quot;</span><span style="color:#E1E4E8;">, val)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 删除本地缓存的服务实例信息</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ClientInfo) </span><span style="color:#B392F0;">DelServiceList</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	this.lock.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> this.lock.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">delete</span><span style="color:#E1E4E8;">(this.serverList, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;del data key:&quot;</span><span style="color:#E1E4E8;">, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> newRes, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> this.</span><span style="color:#79B8FF;">getServiceByName</span><span style="color:#E1E4E8;">(key); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Panic</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;get  key &quot;</span><span style="color:#E1E4E8;">, key, </span><span style="color:#9ECBFF;">&quot; current val is: &quot;</span><span style="color:#E1E4E8;">,newRes)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 工具方法，转换数组</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (this </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ClientInfo) </span><span style="color:#B392F0;">SerList2Array</span><span style="color:#E1E4E8;">() []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	this.lock.</span><span style="color:#79B8FF;">Lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> this.lock.</span><span style="color:#79B8FF;">Unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	addrs </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, v </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> this.serverList {</span></span>
<span class="line"><span style="color:#E1E4E8;">		addrs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(addrs, v)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> addrs</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 根据服务名，获取服务实例信息</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ClientInfo) </span><span style="color:#6F42C1;">getServiceByName</span><span style="color:#24292E;">(prefix </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) ([]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> this.client.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(), prefix, clientv3.</span><span style="color:#005CC5;">WithPrefix</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	addrs </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> this.</span><span style="color:#005CC5;">extractAddrs</span><span style="color:#24292E;">(resp)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> addrs, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 根据 etcd 的响应，提取服务实例的数组</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ClientInfo) </span><span style="color:#6F42C1;">extractAddrs</span><span style="color:#24292E;">(resp </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">clientv3.GetResponse) []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	addrs </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> resp </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> resp.Kvs </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> addrs</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> resp.Kvs {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> resp.Kvs[i].Value; v </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			this.</span><span style="color:#005CC5;">SetServiceList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(resp.Kvs[i].Key), </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(resp.Kvs[i].Value))</span></span>
<span class="line"><span style="color:#24292E;">			addrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(addrs, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(v))</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> addrs</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 设置 serverList</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ClientInfo) </span><span style="color:#6F42C1;">SetServiceList</span><span style="color:#24292E;">(key, val </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	this.lock.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> this.lock.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	this.serverList[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(val)</span></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;set data key :&quot;</span><span style="color:#24292E;">, key, </span><span style="color:#032F62;">&quot;val:&quot;</span><span style="color:#24292E;">, val)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 删除本地缓存的服务实例信息</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ClientInfo) </span><span style="color:#6F42C1;">DelServiceList</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	this.lock.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> this.lock.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">delete</span><span style="color:#24292E;">(this.serverList, key)</span></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;del data key:&quot;</span><span style="color:#24292E;">, key)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> newRes, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> this.</span><span style="color:#005CC5;">getServiceByName</span><span style="color:#24292E;">(key); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Panic</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get  key &quot;</span><span style="color:#24292E;">, key, </span><span style="color:#032F62;">&quot; current val is: &quot;</span><span style="color:#24292E;">,newRes)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 工具方法，转换数组</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (this </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ClientInfo) </span><span style="color:#6F42C1;">SerList2Array</span><span style="color:#24292E;">() []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	this.lock.</span><span style="color:#005CC5;">Lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> this.lock.</span><span style="color:#005CC5;">Unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	addrs </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, v </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> this.serverList {</span></span>
<span class="line"><span style="color:#24292E;">		addrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(addrs, v)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> addrs</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>客户端本地有保存服务实例的数组：serverList，获取到 user 的服务实例信息后，将数据保存到 serverList 中，客户端会监控 user 的服务实例变更事件，并相应调整自身保存的 serverList。</p><h4 id="运行结果" tabindex="-1">运行结果 <a class="header-anchor" href="#运行结果" aria-label="Permalink to &quot;运行结果&quot;">​</a></h4><p>我们依次运行 user 服务和调用的客户端，结果如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 服务端控制台输出</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">13.913059</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> register user server </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:8080</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">13.932964</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 续租成功</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#6A737D;">// client 控制台输出</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">37.462231</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> set data key </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user val</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:8080</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">37.462266</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> get service  </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> instance list</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  [http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:8080]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 服务端控制台输出</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">13.913059</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> register user server </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:8080</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">13.932964</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> 续租成功</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#6A737D;">// client 控制台输出</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">25</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">37.462231</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> set data key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user val</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:8080</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">25</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">37.462266</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> get service  </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> instance list</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  [http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:8080]</span></span></code></pre></div><p>可以看到，服务端控制台在持续输出续租的内容，客户端启动后监测到服务端的 put 事件，并成功获取到<code>/user</code>的服务实例信息：<code>http://localhost:8080</code>。user 服务关闭，控制台有如下的输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// user 服务关闭之后，client 控制台输出</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">47.509583</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> del data key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span></span>
<span class="line"><span style="color:#79B8FF;">2021</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">03</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">47.522095</span><span style="color:#E1E4E8;"> I </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> get  key  </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user  current val is</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  []</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// user 服务关闭之后，client 控制台输出</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">25</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">47.509583</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> del data key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span></span>
<span class="line"><span style="color:#005CC5;">2021</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">03</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">25</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">47.522095</span><span style="color:#24292E;"> I </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> get  key  </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user  current val is</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  []</span></span></code></pre></div><p>user 服务关闭后，服务实例信息从 etcd 删除。再次获取指定的服务名，返回空的信息，符合预期。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们主要介绍了基于 etcd 实现微服务的注册与发现，首先介绍了服务注册与发现的相关概念以及服务注册与发现的指导理论 CAP。etcd 满足 CAP 理论中的 CP，即在网络分区出现问题的情况下，优先满足一致性，对外停止写入新数据。</p><p>接着，我们分析了基于 etcd 原生实现服务注册与发现的实践案例。调用服务和被调用服务都注册到 etcd 上，并维持心跳。调用方自己维护了一个类似本地缓存表，通过 etcd 的 watch 机制及时更新 etcd 上注册的服务实例信息。发起调用的服务，每次只需要查询本地维护的服务实例表即可，这其实也是很多微服务框架实现服务注册客户端的思路。下一讲，我们就来具体介绍常见的微服务框架如何集成 etcd。</p>`,27),i=c("p",null,"学习完今天的内容，你觉得实现服务注册与发现还有哪些需要注意的问题呢？欢迎你在留言区和我分享。",-1);function F(C,A,u,D,d,v){const s=o("Image");return e(),t("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/29/9B/Cgp9HWBhfSqAQMS2AABK8MyCUz8663.png"}),a(),y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/29/9B/Cgp9HWBhfT-AbwMCAAEz6DdtjiI172.png"}),a(),i])}const g=p(r,[["render",F]]);export{B as __pageData,g as default};
