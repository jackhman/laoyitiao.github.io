import{_ as p,j as e,o as t,g as c,k as a,s,Q as l,h as o}from"./chunks/framework.e0c66c3f.js";const m=JSON.parse('{"title":"功能开关的好处 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6662) 09  开关组件：如何使用功能开关，支持产品快速迭代.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6662) 09  开关组件：如何使用功能开关，支持产品快速迭代.md","lastUpdated":1696338709000}'),r={name:"posts/frontEnd/048_iOS开发进阶/(6662) 09  开关组件：如何使用功能开关，支持产品快速迭代.md"},E=s("p",null,"代码管理规范一讲我提到过，开发功能的时候要新建功能分支。在实际工作当中，有一种功能分支我把它叫作长命功能分支（Long lived feature branch），因为有些大功能需要我们花几周甚至几个月来开发，相对应地它的功能分支也会非常庞大。",-1),y=s("p",null,"当整个功能开发完毕后，我们需要把它合并到主分支里面，因为里面代码实在太多了，不可避免地就会出现许多合并冲突。哪怕勉强修正并编译通过，App 里面也很可能隐藏一些不容易发现的 Bug。",-1),i=s("p",null,"怎样解决这种难题呢？",-1),g=s("p",null,"通常的办法是我们会把一个庞大的功能分拆成多个小任务，每个任务都建一个独立的功能分支，当一个任务完成后马上合并到主分支里面。",-1),d=l('<p>如上图所示，为了完成一个庞大的功能，如实时通讯功能，我们分拆成多个小的功能分支，比如显示对话的子功能分支<code>branch-1</code>，显示表情符号的子功能分支<code>branch-2</code>等等。注意，我在图里面使用数字作为分支名字只是为了演示同一个大功能使用多个子分支，在现实情况下要根据每个小任务的内容进行命名。</p><p>但这样拆分成多个小的功能分支会导致什么问题呢？会出现我们每次把小任务合并到主分支的时候，不小心把未完成的功能发布给用户。例如我们在发布<code>V1.2</code>版本的 App 时就包含了<code>branch-1</code>分支上的代码，可是整个功能还没有开发完毕，我们并不愿意把这部分代码发布给 App Store 的用户。</p><p>那有没有什么办法既能及时合并代码，又能保证主分支可以随时发布呢？有，答案就是使用功能开关组件。</p><h3 id="功能开关的好处" tabindex="-1">功能开关的好处 <a class="header-anchor" href="#功能开关的好处" aria-label="Permalink to &quot;功能开关的好处&quot;">​</a></h3><p><strong>功能开关</strong>是软件开发中一种十分实用且功能强大的技术，它允许我们在不改变代码的情况下调整软件的行为。有了它，我们在快速开发的同时，也能放心定期发布新版本。</p><p>具体来说，当我们开发每一个大功能时，如果先定义一个功能开关，然后在整个功能开发完毕后再移除它，那么在移除之前，我们提交的任何版本就能避免因为疏忽大意而把未完成的功能发布到终端用户手上。</p>',6),u=l('<p>如上图所示，当我们开发一个大功能时，先从主分支签出一个功能分支<code>add-toggle</code>来添加一个功能开关。 然后我们就可以把该功能拆分成多个子功能分支来进行开发，并不断地合并到主分支里面。在整个功能开发完毕以后，我们可以从主分支签出一个分支<code>remove-toggle</code>来把功能开关删除掉。这个功能只会在 <code>V1.4</code> 版本里面才会发布给终端用户。在此之前用户完全不知道这个功能的存在。</p><p>使用功能开关是保证主分支可以随时进行发布的有效手段。可以说，<strong>一个能随时发布的主分支是衡量一个开发环境成熟与否的标准</strong>，为什么这样说呢？有两大原因：</p><ol><li><p>它是多团队平行开发的基础，当其中一个团队完成了一个功能以后，就可以在不与任何其他团队沟通的情况下马上进行发布；</p></li><li><p>它是自动化发布的基础，有了随时可以发布的主分支，我们只需要更新版本号就可以让 CI 在任何时候打包并发布到 App Store，无须任何人为参与。</p></li></ol><p>既然功能开关那么强大，那怎么实现呢？接下来我们就结合 Moments App 一起来看看。</p><h3 id="功能开关组件的实现" tabindex="-1">功能开关组件的实现 <a class="header-anchor" href="#功能开关组件的实现" aria-label="Permalink to &quot;功能开关组件的实现&quot;">​</a></h3><p>根据不同的使用场景，我们为Moments App 开发了三类功能开关组件：<strong>编译时开关、本地开关和远程开关。</strong></p><ul><li><p>编译时开关：让编译器通过检查编译条件来启动或者关闭一些功能。</p></li><li><p>本地开关：让用户在 App 里面手动启动或者关闭一些功能。</p></li><li><p>远程开关：让产品经理远程遥控 App 来启动或者关闭一些功能。</p></li></ul><p>下面我们一起来看看怎样实现这些功能开关组件吧。首先我们定义了一个名字叫作 <code>ToggleType</code> 的协议（Protocol），然后分别定义了三个枚举类型（Enum）来代表三类开关。</p>',8),F=s("p",null,[o("有了这些功能开关的定义以后，接着我们定义这些开关的 DataStore。首先建立了一个名叫 "),s("code",null,"TogglesDataStoreType"),o("的协议，它只定义了两个方法，其中"),s("code",null,"isToggleOn(_ toggle: ToggleType) -> Bool"),o(" 用于读取某个开关的值，而 "),s("code",null,"update(toggle: ToggleType, value: Bool)"),o(" 用于更新某个开关的值。")],-1),T=l(`<p>然后我们为每一类开关定义一个实现的结构体（Struct）。因为远程开关我会在后面的 29 讲详细介绍，所以在这一讲我主要为你介绍下编译时开关和本地开发怎样实现的。</p><p><strong>编译时开关组件</strong></p><p>下面是编译时开关 <code>BuildTargetTogglesDataStore</code>的实现代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BuildTargetTogglesDataStore</span><span style="color:#E1E4E8;">: TogglesDataStoreType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> shared: BuildTargetTogglesDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> buildTarget: BuildTargetToggle</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        #</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> DEBUG</span></span>
<span class="line"><span style="color:#E1E4E8;">        buildTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .debug</span></span>
<span class="line"><span style="color:#E1E4E8;">        #</span><span style="color:#F97583;">endif</span></span>
<span class="line"><span style="color:#E1E4E8;">        #</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> INTERNAL</span></span>
<span class="line"><span style="color:#E1E4E8;">        buildTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .internal</span></span>
<span class="line"><span style="color:#E1E4E8;">        #</span><span style="color:#F97583;">endif</span></span>
<span class="line"><span style="color:#E1E4E8;">        #</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> PRODUCTION</span></span>
<span class="line"><span style="color:#E1E4E8;">        buildTarget </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .production</span></span>
<span class="line"><span style="color:#E1E4E8;">        #</span><span style="color:#F97583;">endif</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isToggleOn</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> toggle: ToggleType) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> toggle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toggle </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> BuildTargetToggle </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> toggle </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> buildTarget</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toggle</span><span style="color:#E1E4E8;">: ToggleType, </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">) { }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BuildTargetTogglesDataStore</span><span style="color:#24292E;">: TogglesDataStoreType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> shared: BuildTargetTogglesDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> buildTarget: BuildTargetToggle</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        #</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> DEBUG</span></span>
<span class="line"><span style="color:#24292E;">        buildTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .debug</span></span>
<span class="line"><span style="color:#24292E;">        #</span><span style="color:#D73A49;">endif</span></span>
<span class="line"><span style="color:#24292E;">        #</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> INTERNAL</span></span>
<span class="line"><span style="color:#24292E;">        buildTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .internal</span></span>
<span class="line"><span style="color:#24292E;">        #</span><span style="color:#D73A49;">endif</span></span>
<span class="line"><span style="color:#24292E;">        #</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> PRODUCTION</span></span>
<span class="line"><span style="color:#24292E;">        buildTarget </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .production</span></span>
<span class="line"><span style="color:#24292E;">        #</span><span style="color:#D73A49;">endif</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isToggleOn</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> toggle: ToggleType) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> toggle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toggle </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> BuildTargetToggle </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> toggle </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> buildTarget</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">toggle</span><span style="color:#24292E;">: ToggleType, </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">) { }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为 <code>BuildTargetTogglesDataStore</code> 遵循了 <code>TogglesDataStoreType</code>，我在这里实现了 <code>isToggleOn</code> 和 <code>update</code> 两个方法。由于我们不可能在运行时更新编译时的编译条件，因此 <code>update</code> 方法的实现体为空。</p><p>而在 <code>isToggleOn</code> 方法里面，我们会检查传递进来的 <code>ToggleType</code> 的值是否和属性 <code>buildTarget</code> 的值相等，如果相等就返回 <code>true</code>，如果不相等就返回 <code>false</code>。</p><p>那 <code>buildTarget</code> 的值是怎样来的呢？我们可以看看 <code>init</code> 方法。</p>`,7),C=l(`<p>在 init 方法里面，我们有三条判断编译条件的语句，当编译条件包含了 <code>INTERNAL</code> 时，就会把 <code>buildTarget</code> 赋值为 <code>.internal</code> 。那 <code>INTERNAL</code> 从哪里来的呢？</p><p>我在如何搭建多环境支持那一讲提到过怎样通过 <code>xcconfig</code> 文件来配置多个 <code>Build Configuration</code>。该编译条件 <code>INTERNAL</code> 来自 <code>InternalProject.xcconfig</code> 文件。如下所示，我们把 <code>INTERNAL</code> 赋值给 <code>SWIFT_ACTIVE_COMPILATION_CONDITIONS</code> 。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">SWIFT_ACTIVE_COMPILATION_CONDITIONS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(inherited) INTERNAL</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SWIFT_ACTIVE_COMPILATION_CONDITIONS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(inherited) INTERNAL</span></span></code></pre></div><p>在编译的时候，编译器会从<code>SWIFT_ACTIVE_COMPILATION_CONDITIONS</code>读取编译条件的值，当发现该编译条件已经定义了，就会编译 <code>#if #endif</code> 代码块内的代码。</p><p>回到上图 init 方法的例子，当我们选择了 <strong>Moments-Internal</strong> Scheme 时，编译器就会选择名字叫作 <strong>Internal</strong> 的 Build Configuration。这个 Configuration 读取 InternalProject.xcconfig 后把<code>SWIFT_ACTIVE_COMPILATION_CONDITIONS</code>赋值为<code>INTERNAL</code>。因此，在编译的时候，上面的代码只有第 25 行会编译，第 21 行和第 29 行都会被忽略掉。</p><p>通过编译时开关，我们就能让不同环境版本的 App 激活或者隐藏不同的功能。下面是如何导航到隐藏功能菜单页面的代码。它的大致逻辑是，我们通过重写 UIWindow 的 motionEnded 方法来捕捉手机震动的事件。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UIWindow</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">open</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">motionEnded</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> motion: UIEvent.EventSubtype, </span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> event: UIEvent</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> BuildTargetTogglesDataStore.shared.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(BuildTargetToggle.debug)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> BuildTargetTogglesDataStore.shared.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(BuildTargetToggle.internal) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> router: AppRouting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AppRouter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> motion </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> .motionShake {</span></span>
<span class="line"><span style="color:#E1E4E8;">                router.</span><span style="color:#79B8FF;">route</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#9ECBFF;">\\(UniversalLinks.</span><span style="color:#E1E4E8;">baseURL</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">InternalMenu&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: rootViewController, </span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: .present)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">extension</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UIWindow</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">open</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">motionEnded</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> motion: UIEvent.EventSubtype, </span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> event: UIEvent</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> BuildTargetTogglesDataStore.shared.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(BuildTargetToggle.debug)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> BuildTargetTogglesDataStore.shared.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(BuildTargetToggle.internal) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> router: AppRouting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AppRouter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> motion </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> .motionShake {</span></span>
<span class="line"><span style="color:#24292E;">                router.</span><span style="color:#005CC5;">route</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#032F62;">\\(UniversalLinks.</span><span style="color:#24292E;">baseURL</span><span style="color:#032F62;">)</span><span style="color:#032F62;">InternalMenu&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: rootViewController, </span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: .present)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>具体来说，当用户在摇动手机的时候，代码会通过<code>BuildTargetTogglesDataStore</code>的<code>isToggleOn</code>方法来检查当前的 App 是否为开发环境或者测试环境版本，如果&quot;是&quot;就会使用<code>AppRouter</code>到导航到隐藏功能菜单页面。如果&quot;不是&quot;（如生产环境 App Store版本），就不进行导航。这样能保证从 App Store 上下载 App 的用户，没办法使用隐藏菜单的功能。<br><strong>本地开关组件</strong></p><p>如果说编译时开关能够方便你为不同环境的 App 激活或者隐藏不同的功能，那么本地开关则可以让内部测试人员和产品经理随时测试和验证功能，从而保证产品快速的迭代。</p><p>下面一起看看本地开关的实现代码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalToggle</span><span style="color:#E1E4E8;">: String, ToggleType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> isLikeButtonForMomentEnabled</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> isSwiftUIEnabled</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalTogglesDataStore</span><span style="color:#E1E4E8;">: TogglesDataStoreType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> userDefaults: UserDefaults</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userDefaults</span><span style="color:#E1E4E8;">: UserDefaults) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.userDefaults </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userDefaults</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.userDefaults.</span><span style="color:#79B8FF;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">defaults</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            InternalToggle.isLikeButtonForMomentEnabled.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            InternalToggle.isSwiftUIEnabled.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">            ])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> shared: InternalTogglesDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userDefaults</span><span style="color:#E1E4E8;">: .standard)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isToggleOn</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> toggle: ToggleType) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> toggle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toggle </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> InternalToggle </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userDefaults.</span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">forKey</span><span style="color:#E1E4E8;">: toggle.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">toggle</span><span style="color:#E1E4E8;">: ToggleType, </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> toggle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> toggle </span><span style="color:#F97583;">as?</span><span style="color:#E1E4E8;"> InternalToggle </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        userDefaults.</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(value, </span><span style="color:#79B8FF;">forKey</span><span style="color:#E1E4E8;">: toggle.</span><span style="color:#79B8FF;">rawValue</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalToggle</span><span style="color:#24292E;">: String, ToggleType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> isLikeButtonForMomentEnabled</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> isSwiftUIEnabled</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalTogglesDataStore</span><span style="color:#24292E;">: TogglesDataStoreType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> userDefaults: UserDefaults</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userDefaults</span><span style="color:#24292E;">: UserDefaults) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.userDefaults </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userDefaults</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.userDefaults.</span><span style="color:#005CC5;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">defaults</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">            InternalToggle.isLikeButtonForMomentEnabled.</span><span style="color:#005CC5;">rawValue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            InternalToggle.isSwiftUIEnabled.</span><span style="color:#005CC5;">rawValue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">            ])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> shared: InternalTogglesDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userDefaults</span><span style="color:#24292E;">: .standard)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isToggleOn</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> toggle: ToggleType) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> toggle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toggle </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> InternalToggle </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userDefaults.</span><span style="color:#005CC5;">bool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">forKey</span><span style="color:#24292E;">: toggle.</span><span style="color:#005CC5;">rawValue</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">toggle</span><span style="color:#24292E;">: ToggleType, </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> toggle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> toggle </span><span style="color:#D73A49;">as?</span><span style="color:#24292E;"> InternalToggle </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        userDefaults.</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">forKey</span><span style="color:#24292E;">: toggle.</span><span style="color:#005CC5;">rawValue</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当每次新增一个本地开关的时候，我们都在<code>InternalToggle</code>枚举里面添加一个<code>case</code>。当前的 Moments App 有两个本地开关，分别用于&quot;点赞功能&quot;和&quot;使用 SwiftUI&quot;。</p><p>因为<code>InternalTogglesDataStore</code>也遵循了<code>TogglesDataStoreType</code>协议，所以也需要实现<code>isToggleOn</code>和<code>update</code>两个方法。它们都使用了<code>UserDefaults</code>来读写配置信息，这样能保证用户重启 App 以后也能获取之前所选择的开关配置。</p><p>这里我给你分享一个管理本地开关的技巧。</p><p>在<code>init</code>方法里面，我通过<code>UserDefaults</code>的<code>register</code>方法为每个开关赋予默认值。绝大多数情况下，这个默认值都为<code>false</code>，表示该功能还没有发布。</p><p>那什么时候这个值会成为 <code>true</code> 呢？假如我们完成了一个功能，而且产品经理验证过可以发布上线，那么我就可以把该开关的默认值设为<code>true</code>。但上线以后发现该功能引起严重的崩溃，我们可以马上把该值修改为<code>false</code>并立刻发布新版本。</p><p>还有一点需要注意的是，当功能上线并运行正常的情况下，要及时清理相关的功能开关，因为开关太多会增加代码逻辑的复杂度。</p><p>下面一起看看代码中使用本地开关的例子吧。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> InternalTogglesDataStore.shared.</span><span style="color:#79B8FF;">isToggleOn</span><span style="color:#E1E4E8;">(InternalToggle.isSwiftUIEnabled) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    window</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.rootViewController </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UIHostingController</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">rootView</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">SwiftUIMomentsListView</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">environmentObject</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">UserDataStoreObservableObject</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    window</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.rootViewController </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MomentsListViewController</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> InternalTogglesDataStore.shared.</span><span style="color:#005CC5;">isToggleOn</span><span style="color:#24292E;">(InternalToggle.isSwiftUIEnabled) {</span></span>
<span class="line"><span style="color:#24292E;">    window</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.rootViewController </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UIHostingController</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">rootView</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">SwiftUIMomentsListView</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">environmentObject</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">UserDataStoreObservableObject</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    window</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.rootViewController </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MomentsListViewController</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过<code>InternalTogglesDataStore</code>来检查<code>.isSwiftUIEnabled</code>开关是否启动，如果&quot;是&quot;就启动 SwiftUI 的界面，否则就启动 UIKit 的界面。下面是演示的效果。</p>`,20),A=l('<p>我们可以在内部隐藏菜单里面启动或者关闭 <strong>SwiftUIEnable</strong>开关。App 在启动的时候会根据该开关来选择启动 SwiftUI 或者 UIKit 的界面。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我主要介绍了如何使用功能开关来解决长命功能分支的问题，并详细介绍了如何开发编译时开关组件和本地开发组件。有了这些功能开关组件以后，既保证我们能快速开发功能，又能保证发布的版本不会出错，让整个团队在安全的环境下快速迭代。</p><p>思考题：</p><blockquote><p>请问你的团队是怎样让测试人员检查未上线功能的？有什么好的经验或者教训给大家分享一下？</p></blockquote><p>可以把回答写到下面的留言区哦，我们下一讲将介绍如何开发内部隐藏菜单，通过隐藏功能来分离生产和研发环境。</p><p><strong>源码地址：</strong></p><blockquote><p>功能开关文件地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/Toggles?fileGuid=EubJYGqYgOIGJ2XM" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/Toggles</a></p></blockquote>',8);function D(_,f,B,I,h,S){const n=e("Image");return t(),c("div",null,[E,y,i,g,a(n,{alt:"图片8.png",src:"https://s0.lgstatic.com/i/image6/M01/24/4D/CioPOWBYUUeARJ5qAAjTjIXDSJA208.png"}),d,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/1F/4A/CioPOWBRvmeAGcsiAAHzX6EpRRU507.png"}),u,a(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/25/6C/CioPOWBZrCOACNxtAAKd2755Bx0933.png"}),F,a(n,{alt:"图片6.png",src:"https://s0.lgstatic.com/i/image6/M00/24/4D/CioPOWBYURiAff7BAALmppeDy9I518.png"}),T,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M01/1F/53/CioPOWBRxW6AV4TlAAI7l4yPlhE343.png"}),C,a(n,{alt:"2021322-144332.gif",src:"https://s0.lgstatic.com/i/image6/M00/24/37/Cgp9HWBYPLeAW1FfAKgkEsZ8QtE822.gif"}),A])}const v=p(r,[["render",D]]);export{m as __pageData,v as default};
