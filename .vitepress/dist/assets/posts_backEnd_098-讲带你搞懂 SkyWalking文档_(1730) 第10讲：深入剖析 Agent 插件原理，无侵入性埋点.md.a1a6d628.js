import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.f949202b.js";const u=JSON.parse('{"title":"AbstractClassEnhancePluginDefine 核心实现 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1730) 第10讲：深入剖析 Agent 插件原理，无侵入性埋点.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1730) 第10讲：深入剖析 Agent 插件原理，无侵入性埋点.md","lastUpdated":null}'),p={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1730) 第10讲：深入剖析 Agent 插件原理，无侵入性埋点.md"},e=l(`<p>在前面介绍 SkyWalking Agent 启动流程时，同时介绍了插件中 skywalking-agent.def 文件的查找、解析流程，AbstractClassEnhancePluginDefine 抽象类的核心定义，以及插件类与 AgentBuilder 配合为目标类动态添加埋点功能的核心流程。本课时将深入介绍 AbstractClassEnhancePluginDefine 抽象类以及其子类的运行原理。</p><h3 id="abstractclassenhanceplugindefine-核心实现" tabindex="-1">AbstractClassEnhancePluginDefine 核心实现 <a class="header-anchor" href="#abstractclassenhanceplugindefine-核心实现" aria-label="Permalink to &quot;AbstractClassEnhancePluginDefine 核心实现&quot;">​</a></h3><p>在开始之前，先简单回顾上一课时中关于 AbstractClassEnhancePluginDefine 的一个核心知识点：AbstractClassEnhancePluginDefine 是所有插件的父类，SkywalkingAgent.Transformer 会通过其 enhanceClass() 方法返回的 ClassMatch 对象，匹配到要增强的目标类。在不同的插件实现类中，enhanceClass() 方法返回的 ClassMatch 对象不同，例如：</p><ul><li>Dubbo 插件拦截的是 com.alibaba.dubbo.monitor.support.MonitorFilter 这个类；</li><li>Tomcat 插件拦截的是 org.apache.catalina.core.StandardHostValve 这个类。</li></ul><p>后面会详细介绍上述两个插件的具体实现。</p><p>完成目标类和插件类的匹配之后，会进入 define() 方法，其核心逻辑如下：</p><ol><li>通过 witnessClass() 方法确定当前插件与当前拦截到的目标类的版本是否匹配。若版本不匹配，则 define() 方法直接结束，当前插件类不会增强该类；若版本匹配，则继续后续逻辑。</li><li>进入 enhance() 方法执行增强逻辑。</li><li>设置插件增强标识。</li></ol><h3 id="witnessclass-方法" tabindex="-1">witnessClass() 方法 <a class="header-anchor" href="#witnessclass-方法" aria-label="Permalink to &quot;witnessClass() 方法&quot;">​</a></h3><p>很多开源组件和工具类库的功能会不断增加，架构也会随之重构，导致不同版本的兼容性得不到很好的保证。例如，MySQL 常用的版本有 5.6、5.7、8.0 多个版本，在使用 JDBC 连接 MySQL 时使用的 mysql-connector-java.jar 包也分为 5.x、6.x、8.x 等版本，对应的 JDBC 协议的版本也各不相同。</p><p>SkyWalking Agent 提供的 MySQL 插件本质上是增强 mysql-connector-java.jar 中的关键方法，例如 ConnectionImpl.getInstance() 方法，但在 mysql-connector-java.jar 的 5.x 版本和 8.x 版本中，ConnectionImpl 的包名不同，如下所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/84/1A/Cgq2xl6MPj2AU2eYAAApRprNPxs507.png" alt=""></p><p>这仅仅是一个简单的示例，在有的开源组件或类库中，不同版本中同名类的功能和结构已经发生了翻天覆地的变化。要通过一个 SkyWalking Agent 插件完成对一个开源组件所有版本的增强，是非常难实现的，即使勉强能够实现，该插件的实现也会变的非常臃肿，扩展性也会成问题。</p><p>SkyWalking 怎么解决这个问题呢？回到 MySQL 示例，SkyWalking 为每个版本的 mysql-connector-java.jar 提供了不同版本的插件，这些插件的 witnessClass() 方法返回值不同，具体返回的是对应版本 mysql-connector-java.jar 所特有的一个类，如下表所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/0B/04/Ciqah16MPj2AVwefAABSICn8OOA333.png" alt=""></p><p>若当前类加载器无法扫描到插件 witnessClass() 方法指定的类，表示当前插件版本不合适，即使拦截到了目标类，也不能进行增强。AbstractClassEnhancePluginDefine.define() 方法中的相关片段如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] witnessClasses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">witnessClasses</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (witnessClasses </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String witnessClass </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> witnessClasses) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 判断指定类加载器中是否存在witnessClasses()指定的类</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">WitnessClassFinder.INSTANCE.</span><span style="color:#B392F0;">exist</span><span style="color:#E1E4E8;">(witnessClass,</span></span>
<span class="line"><span style="color:#E1E4E8;">               classLoader)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 若不存在则表示版本不匹配，直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] witnessClasses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">witnessClasses</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (witnessClasses </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String witnessClass </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> witnessClasses) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 判断指定类加载器中是否存在witnessClasses()指定的类</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">WitnessClassFinder.INSTANCE.</span><span style="color:#6F42C1;">exist</span><span style="color:#24292E;">(witnessClass,</span></span>
<span class="line"><span style="color:#24292E;">               classLoader)) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 若不存在则表示版本不匹配，直接返回</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="增强-static-静态方法" tabindex="-1">增强 static 静态方法 <a class="header-anchor" href="#增强-static-静态方法" aria-label="Permalink to &quot;增强 static 静态方法&quot;">​</a></h3><p>完成上述插件版本的匹配之后，开始进入 enhance() 方法对目标类进行增强。如下图所示， ClassEnhancePluginDefine 继承了 AbstractClassEnhancePluginDefine 抽象类：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/84/1A/Cgq2xl6MPj2AJ6ODAADEpCb6bgs755.png" alt=""></p><p>在 ClassEnhancePluginDefine 实现的 enhance() 方法中，会分别完成对 static 静态方法以及实例方法的增强：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> DynamicType.Builder</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enhance</span><span style="color:#E1E4E8;">(...) throws PluginException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 增强static方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    newClassBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">enhanceClass</span><span style="color:#E1E4E8;">(typeDescription, </span></span>
<span class="line"><span style="color:#E1E4E8;">            newClassBuilder, classLoader); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 增强构造方法和实例方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    newClassBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">enhanceInstance</span><span style="color:#E1E4E8;">(typeDescription, </span></span>
<span class="line"><span style="color:#E1E4E8;">            newClassBuilder, classLoader, context); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> newClassBuilder;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> DynamicType.Builder</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enhance</span><span style="color:#24292E;">(...) throws PluginException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 增强static方法</span></span>
<span class="line"><span style="color:#24292E;">    newClassBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">enhanceClass</span><span style="color:#24292E;">(typeDescription, </span></span>
<span class="line"><span style="color:#24292E;">            newClassBuilder, classLoader); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 增强构造方法和实例方法</span></span>
<span class="line"><span style="color:#24292E;">    newClassBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">enhanceInstance</span><span style="color:#24292E;">(typeDescription, </span></span>
<span class="line"><span style="color:#24292E;">            newClassBuilder, classLoader, context); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> newClassBuilder;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在增强静态方法时会使用到 StaticMethodsInterceptPoint 这个接口，它描述了当前插件要拦截目标类的哪些 static 静态方法，以及委托给哪个类去增强，其定义如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StaticMethodsInterceptPoint</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用于匹配目标静态方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    ElementMatcher&lt;</span><span style="color:#F97583;">MethodDescription</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getMethodsMatcher</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 拦截到的静态方法交给哪个Interceptor来增强</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">getMethodsInterceptor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 增强过程中是否需要修改参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isOverrideArgs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticMethodsInterceptPoint</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用于匹配目标静态方法</span></span>
<span class="line"><span style="color:#24292E;">    ElementMatcher&lt;</span><span style="color:#D73A49;">MethodDescription</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getMethodsMatcher</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 拦截到的静态方法交给哪个Interceptor来增强</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">getMethodsInterceptor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 增强过程中是否需要修改参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isOverrideArgs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这里以 mysql-8.x-plugin 插件中的实现为例进行说明，其中ConnectionImplCreateInstrumentation 这个插件类的 enhanceClass() 方法如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> ClassMatch </span><span style="color:#B392F0;">enhanceClass</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">// 拦截目标类为ConnectionImpl</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">byName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.mysql.cj.jdbc.ConnectionImpl&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> ClassMatch </span><span style="color:#6F42C1;">enhanceClass</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// 拦截目标类为ConnectionImpl</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">byName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.mysql.cj.jdbc.ConnectionImpl&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其 getStaticMethodsInterceptPoints() 方法返回的下面这个 StaticMethodsInterceptPoint 实现（StaticMethodsInterceptPoint 接口的实现基本都是这种匿名内部类）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">StaticMethodsInterceptPoint</span><span style="color:#E1E4E8;">[] {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StaticMethodsInterceptPoint</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ElementMatcher&lt;</span><span style="color:#F97583;">MethodDescription</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getMethodsMatcher</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">named</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getInstance&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 增强 getInstance()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getMethodsInterceptor</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 委托给 ConnectionCreateInterceptor进行增强</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;org.apache.skywalking.apm.plugin.jdbc</span></span>
<span class="line"><span style="color:#9ECBFF;">                       .mysql.v8.ConnectionCreateInterceptor&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isOverrideArgs</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 增强过程中无需修改方法参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">StaticMethodsInterceptPoint</span><span style="color:#24292E;">[] {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticMethodsInterceptPoint</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ElementMatcher&lt;</span><span style="color:#D73A49;">MethodDescription</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getMethodsMatcher</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">named</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getInstance&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 增强 getInstance()方法</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getMethodsInterceptor</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 委托给 ConnectionCreateInterceptor进行增强</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;org.apache.skywalking.apm.plugin.jdbc</span></span>
<span class="line"><span style="color:#032F62;">                       .mysql.v8.ConnectionCreateInterceptor&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isOverrideArgs</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 增强过程中无需修改方法参数</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>也就是说，ConnectionImplCreateInstrumentation 这个插件拦截的是 com.mysql.jdbc.ConnectionImpl.getInstance() 这个静态方法。</p><p>接下来回到 ClassEnhancePluginDefine.enhanceClass() 方法的具体实现：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DynamicType.Builder</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enhanceClass</span><span style="color:#E1E4E8;">(TypeDescription typeDescription,</span></span>
<span class="line"><span style="color:#E1E4E8;">    DynamicType.Builder</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> newClassBuilder, ClassLoader classLoader) throws PluginException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前插件的静态方法拦截点，如果该插件不增强静态方法，则该数组为空</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">StaticMethodsInterceptPoint</span><span style="color:#E1E4E8;">[] staticMethodsInterceptPoints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">getStaticMethodsInterceptPoints</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String enhanceOriginClassName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> typeDescription.</span><span style="color:#B392F0;">getTypeName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (StaticMethodsInterceptPoint staticMethodsInterceptPoint </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              staticMethodsInterceptPoints) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 进行具体增强的Interceptor名称</span></span>
<span class="line"><span style="color:#E1E4E8;">        String interceptor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> staticMethodsInterceptPoint</span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">getMethodsInterceptor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在增强过程中，是否要修改参数。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (staticMethodsInterceptPoint.</span><span style="color:#B392F0;">isOverrideArgs</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 前面介绍了 Byte Buddy 用法，这里也是一样的，通过method()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 指定拦截方法的条件</span></span>
<span class="line"><span style="color:#E1E4E8;">            newClassBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newClassBuilder.</span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isStatic</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(staticMethodsInterceptPoint.</span><span style="color:#B392F0;">getMethodsMatcher</span><span style="color:#E1E4E8;">())) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">                    MethodDelegation.</span><span style="color:#B392F0;">withDefaultConfiguration</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">withBinders</span><span style="color:#E1E4E8;">( </span><span style="color:#6A737D;">// 要用Morph注解，需要先绑定</span></span>
<span class="line"><span style="color:#E1E4E8;">Morph.Binder.</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(OverrideCallable.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// StaticMethodsInterWithOverrideArgs后面展开说</span></span>
<span class="line"><span style="color:#E1E4E8;">                        ).</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StaticMethodsInterWithOverrideArgs</span><span style="color:#E1E4E8;">(interceptor))</span></span>
<span class="line"><span style="color:#E1E4E8;">                );</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 下面是不需要修改参数的增强</span></span>
<span class="line"><span style="color:#E1E4E8;">            newClassBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newClassBuilder.</span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isStatic</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">             .</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(staticMethodsInterceptPoint.</span><span style="color:#B392F0;">getMethodsMatcher</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(MethodDelegation.</span><span style="color:#B392F0;">withDefaultConfiguration</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StaticMethodsInter</span><span style="color:#E1E4E8;">(interceptor))</span></span>
<span class="line"><span style="color:#E1E4E8;">            );</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> newClassBuilder;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DynamicType.Builder</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enhanceClass</span><span style="color:#24292E;">(TypeDescription typeDescription,</span></span>
<span class="line"><span style="color:#24292E;">    DynamicType.Builder</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> newClassBuilder, ClassLoader classLoader) throws PluginException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前插件的静态方法拦截点，如果该插件不增强静态方法，则该数组为空</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">StaticMethodsInterceptPoint</span><span style="color:#24292E;">[] staticMethodsInterceptPoints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">getStaticMethodsInterceptPoints</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String enhanceOriginClassName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> typeDescription.</span><span style="color:#6F42C1;">getTypeName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (StaticMethodsInterceptPoint staticMethodsInterceptPoint </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">              staticMethodsInterceptPoints) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 进行具体增强的Interceptor名称</span></span>
<span class="line"><span style="color:#24292E;">        String interceptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> staticMethodsInterceptPoint</span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">getMethodsInterceptor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在增强过程中，是否要修改参数。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (staticMethodsInterceptPoint.</span><span style="color:#6F42C1;">isOverrideArgs</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 前面介绍了 Byte Buddy 用法，这里也是一样的，通过method()方法</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 指定拦截方法的条件</span></span>
<span class="line"><span style="color:#24292E;">            newClassBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newClassBuilder.</span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isStatic</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(staticMethodsInterceptPoint.</span><span style="color:#6F42C1;">getMethodsMatcher</span><span style="color:#24292E;">())) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">                    MethodDelegation.</span><span style="color:#6F42C1;">withDefaultConfiguration</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">withBinders</span><span style="color:#24292E;">( </span><span style="color:#6A737D;">// 要用Morph注解，需要先绑定</span></span>
<span class="line"><span style="color:#24292E;">Morph.Binder.</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">(OverrideCallable.class)</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// StaticMethodsInterWithOverrideArgs后面展开说</span></span>
<span class="line"><span style="color:#24292E;">                        ).</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticMethodsInterWithOverrideArgs</span><span style="color:#24292E;">(interceptor))</span></span>
<span class="line"><span style="color:#24292E;">                );</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 下面是不需要修改参数的增强</span></span>
<span class="line"><span style="color:#24292E;">            newClassBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newClassBuilder.</span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isStatic</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(staticMethodsInterceptPoint.</span><span style="color:#6F42C1;">getMethodsMatcher</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(MethodDelegation.</span><span style="color:#6F42C1;">withDefaultConfiguration</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StaticMethodsInter</span><span style="color:#24292E;">(interceptor))</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> newClassBuilder;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>根据前文对 Byte Buddy API 的介绍，通过 method() 方法拦截到静态方法之后，如果需要修改方法参数，则会通过 StaticMethodsInterWithOverrideArgs 对象进行增强，其中的 intercept() 方法是其核心实现：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RuntimeType</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Origin</span><span style="color:#E1E4E8;"> Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> clazz, </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">AllArguments</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments, @</span><span style="color:#F97583;">Origin</span><span style="color:#E1E4E8;"> Method method,</span></span>
<span class="line"><span style="color:#E1E4E8;">           @</span><span style="color:#F97583;">Morph</span><span style="color:#E1E4E8;"> OverrideCallable zuper) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 加载插件指定的StaticMethodsAroundInterceptor</span></span>
<span class="line"><span style="color:#E1E4E8;">    StaticMethodsAroundInterceptor interceptor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">       InterceptorInstanceLoader</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(staticMethodsAroundInterceptorClassName,</span></span>
<span class="line"><span style="color:#E1E4E8;">              clazz.</span><span style="color:#B392F0;">getClassLoader</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    MethodInterceptResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodInterceptResult</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 interceptor.before()做前置处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    interceptor.</span><span style="color:#B392F0;">beforeMethod</span><span style="color:#E1E4E8;">(clazz, method, allArguments, </span></span>
<span class="line"><span style="color:#E1E4E8;">        method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">(), result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 根据before()的处理结果判定是否调用目标方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">isContinue</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">_ret</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 注意：这里是需要传参的，这些参数我们是可以在before()方法中改动</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 的，这就是OverrideArgs的意义</span></span>
<span class="line"><span style="color:#E1E4E8;">            ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zuper.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(allArguments); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果出现异常，会先通知interceptor中的</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// handleMethodException()方法进行处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        interceptor.</span><span style="color:#B392F0;">handleMethodException</span><span style="color:#E1E4E8;">(clazz, method, allArguments, </span></span>
<span class="line"><span style="color:#E1E4E8;">            method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">(), t);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 通过after()方法进行后置处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> interceptor.</span><span style="color:#B392F0;">afterMethod</span><span style="color:#E1E4E8;">(clazz, method, allArguments,</span></span>
<span class="line"><span style="color:#E1E4E8;">              method.</span><span style="color:#B392F0;">getParameterTypes</span><span style="color:#E1E4E8;">(), ret);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RuntimeType</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Origin</span><span style="color:#24292E;"> Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> clazz, </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">AllArguments</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments, @</span><span style="color:#D73A49;">Origin</span><span style="color:#24292E;"> Method method,</span></span>
<span class="line"><span style="color:#24292E;">           @</span><span style="color:#D73A49;">Morph</span><span style="color:#24292E;"> OverrideCallable zuper) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载插件指定的StaticMethodsAroundInterceptor</span></span>
<span class="line"><span style="color:#24292E;">    StaticMethodsAroundInterceptor interceptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">       InterceptorInstanceLoader</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(staticMethodsAroundInterceptorClassName,</span></span>
<span class="line"><span style="color:#24292E;">              clazz.</span><span style="color:#6F42C1;">getClassLoader</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    MethodInterceptResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodInterceptResult</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 interceptor.before()做前置处理</span></span>
<span class="line"><span style="color:#24292E;">    interceptor.</span><span style="color:#6F42C1;">beforeMethod</span><span style="color:#24292E;">(clazz, method, allArguments, </span></span>
<span class="line"><span style="color:#24292E;">        method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">(), result);</span></span>
<span class="line"><span style="color:#24292E;">    Object ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 根据before()的处理结果判定是否调用目标方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">isContinue</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">            ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">_ret</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 注意：这里是需要传参的，这些参数我们是可以在before()方法中改动</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 的，这就是OverrideArgs的意义</span></span>
<span class="line"><span style="color:#24292E;">            ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zuper.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(allArguments); </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果出现异常，会先通知interceptor中的</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// handleMethodException()方法进行处理</span></span>
<span class="line"><span style="color:#24292E;">        interceptor.</span><span style="color:#6F42C1;">handleMethodException</span><span style="color:#24292E;">(clazz, method, allArguments, </span></span>
<span class="line"><span style="color:#24292E;">            method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">(), t);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 通过after()方法进行后置处理</span></span>
<span class="line"><span style="color:#24292E;">        ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> interceptor.</span><span style="color:#6F42C1;">afterMethod</span><span style="color:#24292E;">(clazz, method, allArguments,</span></span>
<span class="line"><span style="color:#24292E;">              method.</span><span style="color:#6F42C1;">getParameterTypes</span><span style="color:#24292E;">(), ret);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>如果不需要修改方法参数，则会通过 StaticMethodsInter 对象进行增强，其实现与 StaticMethodsInterWithOverrideArgs 类似，唯一区别在于调用目标方法时无法修改参数。</p><p>上面使用的 StaticMethodsAroundInterceptor 是个接口，其中定义了如下三个方法：</p><ul><li>before()：在目标方法之前调用。</li><li>after()：在目标方法之后调用。</li><li>handleMethodException()：在目标方法抛出异常时调用。</li></ul><p>通过实现 StaticMethodsAroundInterceptor 接口，各个 Agent 插件就可以在静态方法前后添加自定义的逻辑了。</p><p>前面提到的 mysql-8.x-plugin 中的 ConnectionImplCreateInstrumentation 自然也实现了该接口。通过对 StaticMethodsInterWithOverrideArgs 以及 StaticMethodsAroundInterceptor 接口的介绍，我们会发现 Agent 插件对静态方法的增强逻辑与 Spring AOP 中环绕通知的逻辑非常类似。</p><blockquote><p>设计模式 TIP</p><p>ClassEnhancePluginDefine 是个典型的模板方法模式的使用场景，其 enhanceClass() 方法只实现了增强静态方法的基本流程，真正的增强逻辑全部通过 getStaticMethodsInterceptPoints() 抽象方法推迟到子类实现。在后面增强对象的构造方法和实例方法时，同样会看到类似的实现。</p></blockquote><h3 id="增强实例对象" tabindex="-1">增强实例对象 <a class="header-anchor" href="#增强实例对象" aria-label="Permalink to &quot;增强实例对象&quot;">​</a></h3><p>分析完增强 static 静态方法的相关逻辑之后，我们继续分析增强一个 Java 实例对象的相关逻辑 ------ 入口是 enhanceInstance() 方法。enhanceInstance() 方法将分成三个部分来分析其实现：</p><ul><li><strong>实现 EnhancedInstance 接口</strong></li><li><strong>增强构造方法</strong></li><li><strong>增强实例方法</strong></li></ul><h4 id="实现-enhancedinstance-接口" tabindex="-1">实现 EnhancedInstance 接口 <a class="header-anchor" href="#实现-enhancedinstance-接口" aria-label="Permalink to &quot;实现 EnhancedInstance 接口&quot;">​</a></h4><p>enhanceInstance() 方法首先会为目标类添加了一个字段，同时会让目标类实现 EnhancedInstance 接口，具体实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// EnhanceContext记录了整个增强过程中的上下文信息，里面就两个boolean值</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">context.</span><span style="color:#B392F0;">isObjectExtended</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    newClassBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newClassBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 定义一个字段private volatile的字段，该字段为Object类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">defineField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;_$EnhancedClassField_ws&quot;</span><span style="color:#E1E4E8;">, Object.class, </span></span>
<span class="line"><span style="color:#E1E4E8;">              ACC_PRIVATE </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ACC_VOLATILE)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 实现EnhancedInstance接口的方式是读写新</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 增的&quot;_$EnhancedClassField_ws&quot;字段</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">implement</span><span style="color:#E1E4E8;">(EnhancedInstance.class) </span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(FieldAccessor.</span><span style="color:#B392F0;">ofField</span><span style="color:#E1E4E8;">(CONTEXT_ATTR_NAME));</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.</span><span style="color:#B392F0;">extendObjectCompleted</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 标记一下上线文信息</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// EnhanceContext记录了整个增强过程中的上下文信息，里面就两个boolean值</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">context.</span><span style="color:#6F42C1;">isObjectExtended</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">    newClassBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newClassBuilder</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 定义一个字段private volatile的字段，该字段为Object类型</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">defineField</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;_$EnhancedClassField_ws&quot;</span><span style="color:#24292E;">, Object.class, </span></span>
<span class="line"><span style="color:#24292E;">              ACC_PRIVATE </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ACC_VOLATILE)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 实现EnhancedInstance接口的方式是读写新</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 增的&quot;_$EnhancedClassField_ws&quot;字段</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">implement</span><span style="color:#24292E;">(EnhancedInstance.class) </span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(FieldAccessor.</span><span style="color:#6F42C1;">ofField</span><span style="color:#24292E;">(CONTEXT_ATTR_NAME));</span></span>
<span class="line"><span style="color:#24292E;">    context.</span><span style="color:#6F42C1;">extendObjectCompleted</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 标记一下上线文信息</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>EnhancedInstance 接口中定义了 getSkyWalkingDynamicField() 和setSkyWalkingDynamicField() 两个方法，分别读写新增的 _$EnhancedClassField_ws 字段。以前文 demo-webapp 示例中的 HelloWorldController 这个类为例，在 skywalking-agent/debugging/ 目录下可以看到增强后的类如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 实现了EnhancedInstance接口</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloWorldController</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EnhancedInstance</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">volatile</span><span style="color:#E1E4E8;"> Object _$EnhancedClassField_ws; </span><span style="color:#6A737D;">// 新增字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对EnhancedInstance的实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">getSkyWalkingDynamicField</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._$EnhancedClassField_ws;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setSkyWalkingDynamicField</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">var1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._$EnhancedClassField_ws </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> var1;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ... </span><span style="color:#6A737D;">// 省略其他业务逻辑相关的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 实现了EnhancedInstance接口</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloWorldController</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EnhancedInstance</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> Object _$EnhancedClassField_ws; </span><span style="color:#6A737D;">// 新增字段</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对EnhancedInstance的实现</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">getSkyWalkingDynamicField</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._$EnhancedClassField_ws;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setSkyWalkingDynamicField</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">var1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._$EnhancedClassField_ws </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> var1;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    ... ... </span><span style="color:#6A737D;">// 省略其他业务逻辑相关的方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="增强构造方法" tabindex="-1">增强构造方法 <a class="header-anchor" href="#增强构造方法" aria-label="Permalink to &quot;增强构造方法&quot;">​</a></h4><p>接下来，ehanceInstance() 方法会增强实例对象的构造方法，具体流程与增强 static 静态方法的流程类似，唯一区别是这里使用的是 ConstructorInterceptPoint，相关代码片段如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">ConstructorInterceptPoint</span><span style="color:#E1E4E8;">[] constructorInterceptPoints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">getConstructorsInterceptPoints</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ConstructorInterceptPoint constructorInterceptPoint </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">       constructorInterceptPoints) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    newClassBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newClassBuilder.</span><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      constructorInterceptPoint.</span><span style="color:#B392F0;">getConstructorMatcher</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 这里对 SuperMethodCall的使用方式和介绍 Byte Buddy基础时说的一毛一样</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(SuperMethodCall.INSTANCE</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">andThen</span><span style="color:#E1E4E8;">(MethodDelegation.</span><span style="color:#B392F0;">withDefaultConfiguration</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">             .</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConstructorInter</span><span style="color:#E1E4E8;">(constructorInterceptPoint</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">getConstructorInterceptor</span><span style="color:#E1E4E8;">(), classLoader))</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">ConstructorInterceptPoint</span><span style="color:#24292E;">[] constructorInterceptPoints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">getConstructorsInterceptPoints</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ConstructorInterceptPoint constructorInterceptPoint </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">       constructorInterceptPoints) { </span></span>
<span class="line"><span style="color:#24292E;">    newClassBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newClassBuilder.</span><span style="color:#6F42C1;">constructor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      constructorInterceptPoint.</span><span style="color:#6F42C1;">getConstructorMatcher</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 这里对 SuperMethodCall的使用方式和介绍 Byte Buddy基础时说的一毛一样</span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(SuperMethodCall.INSTANCE</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">andThen</span><span style="color:#24292E;">(MethodDelegation.</span><span style="color:#6F42C1;">withDefaultConfiguration</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConstructorInter</span><span style="color:#24292E;">(constructorInterceptPoint</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">getConstructorInterceptor</span><span style="color:#24292E;">(), classLoader))</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>ConstructorInterceptPoint 中描述了插件要增强的构造方法以及增强的 Interceptor 类，与StaticMethodsInterceptPoint 类似，不再展开介绍。</p><p>ConstructorInter 与 StaticMethodsInter 类似（这里没有修改构造方法参数的 OverriderArgs 版本，因为此时的构造方法已经调用完成了），ConstructorInter.intercept() 方法的实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RuntimeType</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">This</span><span style="color:#E1E4E8;"> Object obj, </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">AllArguments</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 前面已经让该对象实现了EnhancedInstance接口，所以这里的类型转换是安全的</span></span>
<span class="line"><span style="color:#E1E4E8;">    EnhancedInstance targetObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (EnhancedInstance)obj;</span></span>
<span class="line"><span style="color:#E1E4E8;">    interceptor.</span><span style="color:#B392F0;">onConstruct</span><span style="color:#E1E4E8;">(targetObject, allArguments);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RuntimeType</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">This</span><span style="color:#24292E;"> Object obj, </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">AllArguments</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 前面已经让该对象实现了EnhancedInstance接口，所以这里的类型转换是安全的</span></span>
<span class="line"><span style="color:#24292E;">    EnhancedInstance targetObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (EnhancedInstance)obj;</span></span>
<span class="line"><span style="color:#24292E;">    interceptor.</span><span style="color:#6F42C1;">onConstruct</span><span style="color:#24292E;">(targetObject, allArguments);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这里使用的 InstanceConstructorInterceptor 接口与前文介绍的 StaticMethodsAroundInterceptor 接口作用相同，都是留给各个插件去实现增强逻辑的。InstanceConstructorInterceptor 接口的定义如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InstanceConstructorInterceptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onConstruct</span><span style="color:#E1E4E8;">(EnhancedInstance </span><span style="color:#FFAB70;">objInst</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">allArguments</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstanceConstructorInterceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onConstruct</span><span style="color:#24292E;">(EnhancedInstance </span><span style="color:#E36209;">objInst</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">allArguments</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="mysql-8-x-plugin-插件对-connectionimpl-的增强" tabindex="-1">mysql-8.x-plugin 插件对 ConnectionImpl 的增强 <a class="header-anchor" href="#mysql-8-x-plugin-插件对-connectionimpl-的增强" aria-label="Permalink to &quot;mysql-8.x-plugin 插件对 ConnectionImpl 的增强&quot;">​</a></h4><p>到这里你可能感觉实现逻辑有点乱，这里我将以 mysql-8.x-plugin 插件为例，把静态方法增强、构造方法增强等逻辑串起来。</p><p>首先来看 mysql-connector-java-8.x.jar 中 com.mysql.cj.jdbc.ConnectionImpl.getInstance() 方法，这是我们创建数据连接的最常用方法，具体实现：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> JdbcConnection </span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">(HostInfo hostInfo)</span></span>
<span class="line"><span style="color:#E1E4E8;">       throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConnectionImpl</span><span style="color:#E1E4E8;">(hostInfo);  </span><span style="color:#6A737D;">// 创建 ConnectionImpl实例</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> JdbcConnection </span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">(HostInfo hostInfo)</span></span>
<span class="line"><span style="color:#24292E;">       throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConnectionImpl</span><span style="color:#24292E;">(hostInfo);  </span><span style="color:#6A737D;">// 创建 ConnectionImpl实例</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>先来看 mysql-8.x-plugin 模块的 skywalking-plugin.def 文件，其中定义了ConnectionInstrumentation 这个插件类，它会被 AgentClassLoader 加载，其 enhanceClass() 方法返回的 Matcher 拦截的目标类是 com.mysql.cj.jdbc.ConnectionImpl。</p><p>虽然 ConnectionInstrumentation 并不拦截构造方法（因为它的 getConstructorsInterceptPoints() 方法返回的是空数组），但是依然会修改 ConnectionImpl，为其添加 _$EnhancedClassField_ws 字段并实现 EnhanceInstance接口。</p><p>在 skywalking-plugin.def 文件中还定义了 ConnectionImplCreateInstrumentation 这个插件类，正如前面介绍的那样，它会拦截 com.mysql.cj.jdbc.ConnectionImpl 的 getInstance() 方法，并委托给 ConnectionCreateInterceptor 进行增强。ConnectionCreateInterceptor 中的 before() 和 handleMethodException() 方法都是空实现，其 after() 方法会记录新建 Connection 的一些信息，具体实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">afterMethod</span><span style="color:#E1E4E8;">(Class clazz, Method method, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] parameterTypes, Object ret) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ret </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> EnhancedInstance) { </span><span style="color:#6A737D;">// ConnectionImpl已经被增强了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ConnectionInfo中记录了DB名称、DB类型以及地址等等信息，具体构造过程省</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 略，它会被记录到前面新增的 _$EnhancedClassField_ws 那个字段中</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConnectionInfo connectionInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ...</span></span>
<span class="line"><span style="color:#E1E4E8;">        ((EnhancedInstance) ret).</span><span style="color:#B392F0;">setSkyWalkingDynamicField</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            connectionInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">afterMethod</span><span style="color:#24292E;">(Class clazz, Method method, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] parameterTypes, Object ret) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ret </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> EnhancedInstance) { </span><span style="color:#6A737D;">// ConnectionImpl已经被增强了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ConnectionInfo中记录了DB名称、DB类型以及地址等等信息，具体构造过程省</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 略，它会被记录到前面新增的 _$EnhancedClassField_ws 那个字段中</span></span>
<span class="line"><span style="color:#24292E;">        ConnectionInfo connectionInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...</span></span>
<span class="line"><span style="color:#24292E;">        ((EnhancedInstance) ret).</span><span style="color:#6F42C1;">setSkyWalkingDynamicField</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            connectionInfo);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>另外，这里还会看到一个 AbstractMysqlInstrumentation 抽象类，继承关系如下图所示：<br><img src="https://s0.lgstatic.com/i/image3/M01/0B/04/Ciqah16MPj6AWNsiAABSl6fhydc390.png" alt=""></p><p>AbstractMysqlInstrumentation 实现了 witnessClasses() 方法以及 ClassEnhancePluginDefine 中的三个 get*InterceptPoints() 抽象方法（这三个方法都返回 null），其中 witnessClasses() 方法返回&quot;com.mysql.cj.interceptors.QueryInterceptor&quot;字符串，witnessClasses() 方法作用不再重复。</p><p>AbstractMysqlInstrumentation 的子类只需根据需求实现相应的 get*InterceptPoints() 方法即可，无需再提供其他剩余 get*InterceptPoints() 方法的空实现。在其他版本的 MySQL 插件中也有 AbstractMysqlInstrumentation 这个抽象类，功能相同，不再重复。</p><h4 id="增强实例方法" tabindex="-1">增强实例方法 <a class="header-anchor" href="#增强实例方法" aria-label="Permalink to &quot;增强实例方法&quot;">​</a></h4><p>最后，我们来看 enhanceInstance() 方法对实例方法的增强，其实和增强静态方法的套路一样，我们直接看代码吧：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">InstanceMethodsInterceptPoint</span><span style="color:#E1E4E8;">[] instanceMethodsInterceptPoints </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getInstanceMethodsInterceptPoints</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (InstanceMethodsInterceptPoint instanceMethodsInterceptPoint </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">           instanceMethodsInterceptPoints) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String interceptor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instanceMethodsInterceptPoint</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">getMethodsInterceptor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 目标方法的匹配条件</span></span>
<span class="line"><span style="color:#E1E4E8;">    ElementMatcher.Junction&lt;</span><span style="color:#F97583;">MethodDescription</span><span style="color:#E1E4E8;">&gt; junction </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">not</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">isStatic</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(instanceMethodsInterceptPoint</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">getMethodsMatcher</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instanceMethodsInterceptPoint </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            DeclaredInstanceMethodsInterceptPoint) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 目标方法必须定义在目标类中</span></span>
<span class="line"><span style="color:#E1E4E8;">        junction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> junction.</span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;">(ElementMatchers.</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">MethodDescription</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">isDeclaredBy</span><span style="color:#E1E4E8;">(typeDescription)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instanceMethodsInterceptPoint.</span><span style="color:#B392F0;">isOverrideArgs</span><span style="color:#E1E4E8;">()){ </span><span style="color:#6A737D;">//修改方法参数</span></span>
<span class="line"><span style="color:#E1E4E8;">        newClassBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newClassBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">(junction) </span><span style="color:#6A737D;">// 匹配目标方法</span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(MethodDelegation.</span><span style="color:#B392F0;">withDefaultConfiguration</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 使用@Morph注解之前，需要通过Morph.Binder绑定一下</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">withBinders</span><span style="color:#E1E4E8;">(Morph.Binder.</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(OverrideCallable.class))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InstMethodsInterWithOverrideArgs</span><span style="color:#E1E4E8;">(interceptor, </span></span>
<span class="line"><span style="color:#E1E4E8;">                classLoader)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...省略不需要重载参数的部分...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">InstanceMethodsInterceptPoint</span><span style="color:#24292E;">[] instanceMethodsInterceptPoints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getInstanceMethodsInterceptPoints</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (InstanceMethodsInterceptPoint instanceMethodsInterceptPoint </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           instanceMethodsInterceptPoints) {</span></span>
<span class="line"><span style="color:#24292E;">    String interceptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instanceMethodsInterceptPoint</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">getMethodsInterceptor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 目标方法的匹配条件</span></span>
<span class="line"><span style="color:#24292E;">    ElementMatcher.Junction&lt;</span><span style="color:#D73A49;">MethodDescription</span><span style="color:#24292E;">&gt; junction </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">not</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">isStatic</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(instanceMethodsInterceptPoint</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">getMethodsMatcher</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instanceMethodsInterceptPoint </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            DeclaredInstanceMethodsInterceptPoint) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 目标方法必须定义在目标类中</span></span>
<span class="line"><span style="color:#24292E;">        junction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> junction.</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(ElementMatchers.</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">MethodDescription</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">isDeclaredBy</span><span style="color:#24292E;">(typeDescription)); </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instanceMethodsInterceptPoint.</span><span style="color:#6F42C1;">isOverrideArgs</span><span style="color:#24292E;">()){ </span><span style="color:#6A737D;">//修改方法参数</span></span>
<span class="line"><span style="color:#24292E;">        newClassBuilder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newClassBuilder</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(junction) </span><span style="color:#6A737D;">// 匹配目标方法</span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(MethodDelegation.</span><span style="color:#6F42C1;">withDefaultConfiguration</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 使用@Morph注解之前，需要通过Morph.Binder绑定一下</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">withBinders</span><span style="color:#24292E;">(Morph.Binder.</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;">(OverrideCallable.class))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstMethodsInterWithOverrideArgs</span><span style="color:#24292E;">(interceptor, </span></span>
<span class="line"><span style="color:#24292E;">                classLoader)));</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...省略不需要重载参数的部分...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>增强实例方法过程中使用到的类，在增强静态方法中都有对应的类，如下表所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/84/1A/Cgq2xl6MPj6AdwW_AABSs_M53Tk880.png" alt=""></p><p>这些类的具体功能不再展开介绍了。</p><p>最后依然以 mysql-8.x-plugin 插件为例介绍一下它对实例方法的增强过程，其中 ConnectionInstrumentation.getInstanceMethodsInterceptPoints() 方法返回了 5 个 InstanceMethodsInterceptPoint 对象，这里只看其中的第一个对象：它负责拦截 ConnectionImpl 的 prepareStatement() 方法，并委托给 CreatePreparedStatementInterceptor（不修改方法参数），具体实现代码就不展示了。</p><p>在 CreatePreparedStatementInterceptor 中，before() 和 handleMethodException() 方法都是空实现，其 after() 方法实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">afterMethod</span><span style="color:#E1E4E8;">(EnhancedInstance objInst, Method method, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] argumentsTypes,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object ret) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ret </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> EnhancedInstance) { </span><span style="color:#6A737D;">// ConnectionImpl已被增强过</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 更新_$EnhancedClassField_ws字段，StatementEnhanceInfos中不仅封</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 装了原有的ConnectionInfo，还包含了具体执行的SQL语句和SQL参数等信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        ((EnhancedInstance)ret).</span><span style="color:#B392F0;">setSkyWalkingDynamicField</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatementEnhanceInfos</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">             (ConnectionInfo)objInst.</span><span style="color:#B392F0;">getSkyWalkingDynamicField</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                 (String)allArguments[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], </span><span style="color:#9ECBFF;">&quot;PreparedStatement&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">afterMethod</span><span style="color:#24292E;">(EnhancedInstance objInst, Method method, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] argumentsTypes,</span></span>
<span class="line"><span style="color:#24292E;">    Object ret) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ret </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> EnhancedInstance) { </span><span style="color:#6A737D;">// ConnectionImpl已被增强过</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 更新_$EnhancedClassField_ws字段，StatementEnhanceInfos中不仅封</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 装了原有的ConnectionInfo，还包含了具体执行的SQL语句和SQL参数等信息</span></span>
<span class="line"><span style="color:#24292E;">        ((EnhancedInstance)ret).</span><span style="color:#6F42C1;">setSkyWalkingDynamicField</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatementEnhanceInfos</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">             (ConnectionInfo)objInst.</span><span style="color:#6F42C1;">getSkyWalkingDynamicField</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                 (String)allArguments[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&quot;PreparedStatement&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="interceptorinstanceloader" tabindex="-1">InterceptorInstanceLoader <a class="header-anchor" href="#interceptorinstanceloader" aria-label="Permalink to &quot;InterceptorInstanceLoader&quot;">​</a></h3><p>前面加载 Interceptpr 的 ClassLoader 并没有使用 AgentClassLoader 的默认实例或是Application ClassLoader，而是通过 InterceptorInstanceLoader 完成加载的。 在 InterceptorInstanceLoader 里面会维护一个 ClassLoader Cache，以及一个 Instance Cache，如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 记录了 instanceKey与实例之间的映射关系，保证单例</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; INSTANCE_CACHE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ConcurrentHashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 记录了 targetClassLoader以及其子 AgentClassLoader的对应关系</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">ClassLoader</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ClassLoader</span><span style="color:#E1E4E8;">&gt; EXTEND_PLUGIN_CLASSLOADERS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">ClassLoader</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">ClassLoader</span><span style="color:#E1E4E8;">&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 记录了 instanceKey与实例之间的映射关系，保证单例</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ConcurrentHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; INSTANCE_CACHE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 记录了 targetClassLoader以及其子 AgentClassLoader的对应关系</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">ClassLoader</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ClassLoader</span><span style="color:#24292E;">&gt; EXTEND_PLUGIN_CLASSLOADERS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">ClassLoader</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ClassLoader</span><span style="color:#24292E;">&gt;();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在通过 InterceptorInstanceLoader.load() 这个静态方法加载 Interceptor 类时的核心逻辑如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(String className, </span></span>
<span class="line"><span style="color:#E1E4E8;">         ClassLoader targetClassLoader){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (targetClassLoader </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          targetClassLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">               InterceptorInstanceLoader.class.</span><span style="color:#B392F0;">getClassLoader</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过该 instanceKey保证该 Interceptor在一个 ClassLoader中只创建一次</span></span>
<span class="line"><span style="color:#E1E4E8;">    String instanceKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> className </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_OF_&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        targetClassLoader.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">           Integer.</span><span style="color:#B392F0;">toHexString</span><span style="color:#E1E4E8;">(targetClassLoader.</span><span style="color:#B392F0;">hashCode</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object inst </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> INSTANCE_CACHE.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(instanceKey);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (inst </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 查找targetClassLoader对应的子AgentClassLoader</span></span>
<span class="line"><span style="color:#E1E4E8;">        ClassLoader pluginLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                EXTEND_PLUGIN_CLASSLOADERS.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(targetClassLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pluginLoader </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 为 targetClassLoader创建子AgentClassLoader</span></span>
<span class="line"><span style="color:#E1E4E8;">            pluginLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AgentClassLoader</span><span style="color:#E1E4E8;">(targetClassLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">            EXTEND_PLUGIN_CLASSLOADERS.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(targetClassLoader, </span></span>
<span class="line"><span style="color:#E1E4E8;">              pluginLoader);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 通过子AgentClassLoader加载Interceptor类</span></span>
<span class="line"><span style="color:#E1E4E8;">        inst </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(className, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">               pluginLoader).</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (inst </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 记录Interceptor对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            INSTANCE_CACHE.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(instanceKey, inst);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (T) inst;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(String className, </span></span>
<span class="line"><span style="color:#24292E;">         ClassLoader targetClassLoader){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (targetClassLoader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          targetClassLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">               InterceptorInstanceLoader.class.</span><span style="color:#6F42C1;">getClassLoader</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过该 instanceKey保证该 Interceptor在一个 ClassLoader中只创建一次</span></span>
<span class="line"><span style="color:#24292E;">    String instanceKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> className </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_OF_&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        targetClassLoader.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           Integer.</span><span style="color:#6F42C1;">toHexString</span><span style="color:#24292E;">(targetClassLoader.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    Object inst </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> INSTANCE_CACHE.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(instanceKey);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inst </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 查找targetClassLoader对应的子AgentClassLoader</span></span>
<span class="line"><span style="color:#24292E;">        ClassLoader pluginLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                EXTEND_PLUGIN_CLASSLOADERS.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(targetClassLoader);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pluginLoader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 为 targetClassLoader创建子AgentClassLoader</span></span>
<span class="line"><span style="color:#24292E;">            pluginLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AgentClassLoader</span><span style="color:#24292E;">(targetClassLoader);</span></span>
<span class="line"><span style="color:#24292E;">            EXTEND_PLUGIN_CLASSLOADERS.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(targetClassLoader, </span></span>
<span class="line"><span style="color:#24292E;">              pluginLoader);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过子AgentClassLoader加载Interceptor类</span></span>
<span class="line"><span style="color:#24292E;">        inst </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(className, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">               pluginLoader).</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inst </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 记录Interceptor对象</span></span>
<span class="line"><span style="color:#24292E;">            INSTANCE_CACHE.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(instanceKey, inst);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (T) inst;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>以 demo-webapp 为例，其类加载器的结构如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/0B/04/Ciqah16MPj6ACCrQAAETGCYTq30304.png" alt=""></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时深入介绍了 Agent 插件增强目标类的实现，这是 Agent 最核心功能，其中深入分析了增强静态方法、构造方法、实例方法的原理，以及插件如何让目标实例对象实现 EnhanceInstance 接口，如何为目标实例对象添加新字段等。为了帮助你更好的理解，在分析的过程中还以 mysql-8.x-plugin 插件为例将上述核心逻辑串连起来。</p>`,83),o=[e];function t(c,r,E,i,y,d){return n(),a("div",null,o)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
