import{_ as o,j as n,o as r,g as s,k as l,h as t,s as e,Q as i}from"./chunks/framework.cfb14fe0.js";const z=JSON.parse('{"title":"第07讲（下）：必会框架-RPC与ORM","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/036_32个Java面试必考点/(10) 第07讲（下）：必会框架 - RPC与ORM.md","filePath":"posts/backEnd/036_32个Java面试必考点/(10) 第07讲（下）：必会框架 - RPC与ORM.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/036_32个Java面试必考点/(10) 第07讲（下）：必会框架 - RPC与ORM.md"},h=e("h1",{id:"第07讲-下-必会框架-rpc与orm",tabindex:"-1"},[t("第07讲（下）：必会框架-RPC与ORM "),e("a",{class:"header-anchor",href:"#第07讲-下-必会框架-rpc与orm","aria-label":'Permalink to "第07讲（下）：必会框架-RPC与ORM"'},"​")],-1),c=e("h6",{id:"详解-netty",tabindex:"-1"},[t("详解 Netty "),e("a",{class:"header-anchor",href:"#详解-netty","aria-label":'Permalink to "详解 Netty"'},"​")],-1),d=e("p",null,"下面我们来看 Netty 相关的知识点，如下图所示。",-1),_=e("br",null,null,-1),u=i("",14),S=e("p",null,"Worker 线程组负责 IO 处理。线程组由 EventLoopGroup 实现，其中包含了多个 EventLoop 事件处理器，每个 EventLoop 包含一个处理线程。通常情况下在 NIO 非阻塞模式下，Netty 为每个 Channel 分配一个 EventLoop，并且它的整个生命周期中的事件都由这个 EventLoop 来处理。一个 EventLoop 可以绑定多个 Channel。",-1),C=e("p",null,"如上图右侧所示，EventLoop 的处理模型，Netty4 中 Channel 的读写事件都是由 Worker 线程来处理。请求处理中最主要的就是 ChannelPipeline，其中包含了一组 ChannelHandler。这些 Handler 组成了责任链模式，依次对 Channel 中的消息进行处理。一般接收消息时，Pipeline 处理完成会把消息提交到业务线程池进行处理，当业务线程处理完成时，会封装成 Task，提交回 Channel 对应的 EventLoop 来写回返回值。",-1),P=e("h6",{id:"详解-rpc",tabindex:"-1"},[t("详解 RPC "),e("a",{class:"header-anchor",href:"#详解-rpc","aria-label":'Permalink to "详解 RPC"'},"​")],-1),b=e("p",null,"RPC 是远程过程调用的简写，RPC 与 HTTP 一样都可以实现远程服务的调用，但是使用方式上有很大的区别。它能够像使用本地方法一样调用远程的方法。",-1),m=e("h6",{id:"交互流程",tabindex:"-1"},[t("交互流程 "),e("a",{class:"header-anchor",href:"#交互流程","aria-label":'Permalink to "交互流程"'},"​")],-1),y=e("p",null,"如下图所示，来看 RPC 的交互流程。图中绿色的模块是 RPC 中最主要的三个角色。左边的是 Client 端，就是请求的发起方，也可以叫作 Consumer 或者 Referer。右边的模块是 Server 端，就是提供服务实现的一方，也叫作 Provider。",-1),g=e("br",null,null,-1),R=e("p",null,"为了保持较高的性能，Client 端一般都是直接请求远端的 Server 节点。因此，RPC 框架需要自动的服务注册与发现的能力，上方的绿色的注册中心就是用来动态维护可用服务节点信息的模块。",-1),M=e("p",null,"图中的箭头代表交互流程。当 Server 提供服务时，向注册中心注册服务信息，告诉注册中心可以提供哪些服务。同时与注册中心保持心跳或者维持长链接，来维持 Server 可用状态，具体方式与注册中心的实现有关，例如 ZK 使用长链接推送方式而 Consul 使用心跳方式。",-1),q=e("p",null,"如上图所示，当 Client 需要使用服务时，会先向注册中心订阅服务，获得可用的 Server 节点，并保存在 Client 本地。当 Server 节点发生变更时会通知 Client 更新本地 Server 节点信息。Client 按某种负载均衡策略直接请求 Server 使用服务。注意：注册中心只参与服务节点的注册与变更通知，并不会参与具体请求的处理。",-1),A=e("p",null,"另外一般的 RPC 框架都提供了完整的服务治理能力，因此会有额外的管理模块和信息采集模块来监控、管理服务。如图中灰色的模块所示。",-1),B=e("h6",{id:"开源框架",tabindex:"-1"},[t("开源框架 "),e("a",{class:"header-anchor",href:"#开源框架","aria-label":'Permalink to "开源框架"'},"​")],-1),T=e("p",null,"来看三款比较有特色的主流 RPC 框架，如下图所示。",-1),f=e("br",null,null,-1),H=e("p",null,"Dubbo 是阿里开源的 RPC 框架，提供完善的服务治理能力，可以快速为 Java 服务提供 RPC 能力。Dubbo 提供了随机、轮询、最少调用优先等多种负载均衡策略，提供对 ZK 等多种注册中心等支持，能够自动完成服务的注册与发现。Dubbo 提供可视化的管理后台，方便对服务状态进行监控和管理。Dubbo 的数据通信默认使用我 Netty 来实现，拥有非常不错的性能。",-1),N=e("p",null,"微博开源的轻量级服务治理框架 Motan。Motan 的特点是轻量级，提供强大灵活的扩展能力，Motan 提供了多语言支持，目前支持 Java、PHP、Lua、Golang 等多语言交互，目前 Python 和 C++ 的客户端也在研发中。Motan 通过 Agent 代理方式，实现了的跨语言 ServiceMesh 的支持。ServiceMesh 被誉为下一代微服务，在课时 10 还会重点介绍。Motan Java 版本的通信层也是通过 Netty 来实现的，基于 TCP 的私有协议进行通信。",-1),k=e("p",null,"Google 开源的 gRPC。gRPC 默认使用 Protobuf 进行消息序列化，非常适合多语言服务之间进行交互。虽然 gRPC 本身支持的服务治理能力并不强，但拥有非常灵活的插件扩展能力，可以方便的实现自定义的服务治理能力。gRPC 基于 HTTP2 协议，能够支持链接复用，并且提供了流式调用能力，也支持从服务端进行推送消息的能力。",-1),v=e("h6",{id:"详解-mybatis",tabindex:"-1"},[t("详解 MyBatis "),e("a",{class:"header-anchor",href:"#详解-mybatis","aria-label":'Permalink to "详解 MyBatis"'},"​")],-1),x=e("h6",{id:"特点-1",tabindex:"-1"},[t("特点 "),e("a",{class:"header-anchor",href:"#特点-1","aria-label":'Permalink to "特点"'},"​")],-1),E=e("p",null,"下面我们来看 ORM 框架 MyBatis，它的知识结构图如下所示。首先要了解它的特点，可以和 Hibernate 来对比进行理解。",-1),L=e("br",null,null,-1),O=i("",18),D=i("",15),I=e("p",null,"第 1 题，除了说出 SSH 框架是 Struct+Spring+Hibernate，SSM 是指的 Spring MVC+Spring+MyBatis，另外要重点说一下 SpringMVC 和 Struts 的区别，以及 MyBatis 和 Hibernate 的区别。",-1),V=e("p",null,"第 4 题，要答出是通过 BeanFactoryPostProcessor 后置处理器进行的占位符替换，如果自定义处理，可以扩展 PropertyPlaceholderConfigurer 或 PropertySourcesPlaceholderConfigurer 来实现。",-1),Q=e("p",null,"第 5 题，大致可以分为：从 HandlerMapping 中查找 Handler、执行 Handler、执行完成给适配器返回 ModelAndView、视图解析、返回视图，这些步骤。建议通过调试来阅读源码，补充细节、增加理解。",-1),F=e("p",null,"第 6 题，可以从构造器循环依赖和 setter 循环依赖两部分来回答，构造器循环通过使用创建中 Bean 标示池，来判断是否产生了循环创建；setter 循环依赖通过引入 ObjectFactory 来解决。",-1),J=e("br",null,null,-1),G=i("",7);function K(w,W,$,U,X,Z){const a=n("Image");return r(),s("div",null,[h,c,d,_,l(a,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAXHEcAAF5eJmBAIE201.png"}),t(),u,l(a,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRCAOMXfAACEn9bOiF8679.png"}),t(),S,C,P,b,m,y,g,l(a,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRCAD22_AAAwyeZIb9A096.png"}),t(),R,M,q,A,B,T,f,l(a,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRGALP4IAACKCkAICAg250.png"}),t(),H,N,k,v,x,E,L,l(a,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRGATSOHAAF3bP90vkw672.png"}),t(),O,l(a,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRGANGszAABEHrKX1zU413.png"}),t(),D,l(a,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/8A/C8/CgoB5l14qRGAfS0KAABYryfVTDc376.png"}),t(),I,V,Q,F,J,l(a,{alt:"",src:"http://s0.lgstatic.com/i/image2/M01/8A/E8/CgotOV14qRGAavpoAABhTu0HeK8332.png"}),t(),G])}const Y=o(p,[["render",K]]);export{z as __pageData,Y as default};
