import{_ as l,j as o,o as e,g as c,k as n,Q as p,s,h as r}from"./chunks/framework.b3d8e22e.js";const q=JSON.parse('{"title":"二级缓存的概念 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4728) 29  二级缓存的思考：Redi 与 JPA 如何结合？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4728) 29  二级缓存的思考：Redi 与 JPA 如何结合？.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4728) 29  二级缓存的思考：Redi 与 JPA 如何结合？.md"},E=p(`<p>今天我们来聊聊二级缓存相关的话题。</p><p>我们在使用 Mybatis 的时候，基本不用关心什么是二级缓存。而如果你是 Hibernate 的使用者，一定经常听说和使用过 Hibernate 的二级缓存，那么我们应该怎么看待它呢？这一讲一起来揭晓 Cache 的相关概念以及在生产环境中的最佳实践。</p><h3 id="二级缓存的概念" tabindex="-1">二级缓存的概念 <a class="header-anchor" href="#二级缓存的概念" aria-label="Permalink to &quot;二级缓存的概念&quot;">​</a></h3><p>上一讲我们介绍了一级缓存相关的内容，一级缓存的实体的生命周期和 PersistenceContext 是相同的，即载体为同一个 Session 才有效；而 Hibernate 提出了二级缓存的概念，也就是可以在不同的 Session 之间共享实体实例，说白了就是在单个应用内的整个 application 生命周期之内共享实体，减少数据库查询。</p><p>由于 JPA 协议本身并没有规定二级缓存的概念，所以这是 Hiberante 独有的特性。所以在 Hibernate 中，从数据库里面查询实体的过程就变成了：第一步先看看一级缓存里面有没有实体，如果没有再看看二级缓存里面有没有，如果还是没有再从数据库里面查询。那么在 Hibernate 的环境下如何开启二级缓存呢？</p><h4 id="hibernate-中二级缓存的配置方法" tabindex="-1">Hibernate 中二级缓存的配置方法 <a class="header-anchor" href="#hibernate-中二级缓存的配置方法" aria-label="Permalink to &quot;Hibernate 中二级缓存的配置方法&quot;">​</a></h4><p>Hibernate 中，默认情况下二级缓存是关闭的，如果想开启二级缓存需要通过如下三个步骤。</p><p><strong>第一步：引入第三方二级缓存的实现的 jar</strong>。</p><p>因为 Hibernate 本身并没有实现缓存的功能，而是主要依赖第三方，如 Ehcache、jcache、redis 等第三方库。下面我们以 EhCache 为例，利用 gradle 引入 hibernate-ehcace 的依赖。代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;org.hibernate:hibernate-ehcache:5.2.2.Final&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;org.hibernate:hibernate-ehcache:5.2.2.Final&#39;</span></span></code></pre></div><p>如果我们想用 jcache，可以通过如下方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compile </span><span style="color:#9ECBFF;">&#39;org.hibernate:hibernate-jcache:5.2.2.Final&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compile </span><span style="color:#032F62;">&#39;org.hibernate:hibernate-jcache:5.2.2.Final&#39;</span></span></code></pre></div><p><strong>第二步：在配置文件里面开启二级缓存</strong>。</p><p>二级缓存默认是关闭的，所以需要我们用如下方式开启二级缓存，并且配置 cache.region.factory_class 为不同的缓存实现类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">hibernate.cache.use_second_level_cache</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">hibernate.cache.region.factory_class</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">org.hibernate.cache.ehcache.EhCacheRegionFactory</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">hibernate.cache.use_second_level_cache</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">hibernate.cache.region.factory_class</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">org.hibernate.cache.ehcache.EhCacheRegionFactory</span></span></code></pre></div><p><strong>第三步：在用到二级缓存的地方配置 @Cacheable 和 @Cache 的策略</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.Cacheable;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> javax.persistence.Entity;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Cacheable</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">org.hibernate.annotations.Cache</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">usage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CacheConcurrencyStrategy.READ_WRITE)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {......}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.Cacheable;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> javax.persistence.Entity;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Cacheable</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">org.hibernate.annotations.Cache</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">usage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheConcurrencyStrategy.READ_WRITE)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {......}</span></span></code></pre></div><p>通过以上三步就可以轻松实现二级缓存了，但是这时请你思考一下，这真的能应用到我们实际生产环境中吗？会不会有副作用？</p><h4 id="二级缓存的思考" tabindex="-1">二级缓存的思考 <a class="header-anchor" href="#二级缓存的思考" aria-label="Permalink to &quot;二级缓存的思考&quot;">​</a></h4><p>二级缓存主要解决的是单应用场景下跨 Session 生命周期的实体共享问题，可是我们一定要通过 Hibernate 来做吗？答案并不是，其实我们可以通过各种 Cache 的手段来做，因为 Hibernate 里面一级缓存的复杂度相对较高，并且使用的话实体的生命周期会有变化，查询问题的过程较为麻烦。</p><p>同时，随着现在逐渐微服务化、分布式化，如今的应用都不是单机应用，那么缓存之间如何共享呢？分布式缓存又该如何解决？比如一个机器变了，另一个机器没变，应该如何处理？似乎 Hiberante 并没有考虑到这些问题。</p><p>此外，还有什么时间数据会变更、变化了之后如何清除缓存，等等，这些都是我们要思考的，所以 Hibernate 的二级缓存听起来&quot;高大上&quot;，但是使用起来绝对没有那么简单。</p><p>那么经过这一连串的疑问，如果我们不用 Hibernate 的二级缓存，还有没有更好的解决方案呢？</p><h3 id="利用-redis-进行缓存" tabindex="-1">利用 Redis 进行缓存 <a class="header-anchor" href="#利用-redis-进行缓存" aria-label="Permalink to &quot;利用 Redis 进行缓存&quot;">​</a></h3><p>在我们实际工作中经常需要 cache 的就是 Redis，那么我们通过一个例子，来看下 Spring Cache 结合 Redis 是怎么使用的。</p><h4 id="spring-cache-和-redis-结合" tabindex="-1">Spring Cache 和 Redis 结合 <a class="header-anchor" href="#spring-cache-和-redis-结合" aria-label="Permalink to &quot;Spring Cache 和 Redis 结合&quot;">​</a></h4><p>第一步：在 gradle 中引入 cache 和 redis 的依赖，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//原来我们只用到了JPA</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-data-jpa&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//为了引入cache和redis机制需要引入如下两个jar包</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-data-redis&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//redis的依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-cache&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//cache 的依赖</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//原来我们只用到了JPA</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-data-jpa&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//为了引入cache和redis机制需要引入如下两个jar包</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-data-redis&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//redis的依赖</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-cache&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//cache 的依赖</span></span></code></pre></div><p>第二步：在 application.properties 里面增加 redis 的相关配置，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.redis.host</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.redis.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">6379</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.redis.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sySj6vmYke</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.redis.timeout</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">6000</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.redis.pool.max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">active</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.redis.pool.max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">idle</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.redis.pool.max</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">wait</span><span style="color:#F97583;">=-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.redis.pool.min</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">idle</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.redis.host</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span></span>
<span class="line"><span style="color:#24292E;">spring.redis.port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">6379</span></span>
<span class="line"><span style="color:#24292E;">spring.redis.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sySj6vmYke</span></span>
<span class="line"><span style="color:#24292E;">spring.redis.timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">6000</span></span>
<span class="line"><span style="color:#24292E;">spring.redis.pool.max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">active</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">spring.redis.pool.max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">idle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">spring.redis.pool.max</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">wait</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">spring.redis.pool.min</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">idle</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span></code></pre></div><p>第三步：通过 @EnableCaching 开启缓存，增加 configuration 配置类，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableCaching</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableCaching</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第四步：在我们需要缓存的地方添加 @Cacheable 注解即可。为了方便演示，我把 @Cacheable 注解配置在了 controller 方法上，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/info/{id}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Cacheable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{#root.methodName, #id}&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">unless</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;#result == null&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//利用默认key值生成规则value加key生成一个redis的key值，result==null的时候不进行缓存</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">getUserInfo</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">) Long id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//第二次就不会再执行这里了</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(id).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/info/{id}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Cacheable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{#root.methodName, #id}&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">unless</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#result == null&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//利用默认key值生成规则value加key生成一个redis的key值，result==null的时候不进行缓存</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">getUserInfo</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">) Long id) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//第二次就不会再执行这里了</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(id).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第五步：启动项目，请求一下这个 API 会发现，第一次请求过后，redis 里面就有一条记录了，如下图所示。</p>`,35),y=s("p",null,"可以看到，第二次请求之后，取数据就不会再请求数据库了。那么 redis 我们已经熟悉了，那么来看一下 Spring Cache 都做了哪些事情。",-1),i=s("h4",{id:"spring-cache-介绍",tabindex:"-1"},[r("Spring Cache 介绍 "),s("a",{class:"header-anchor",href:"#spring-cache-介绍","aria-label":'Permalink to "Spring Cache 介绍"'},"​")],-1),C=s("p",null,"Spring 3.1 之后引入了基于注释（annotation）的缓存（cache）技术，它本质上不是一个具体的缓存实现方案（例如 EHCache 或者 Redis），而是一个对缓存使用的抽象概念，通过在既有代码中添加少量它定义的各种 annotation，就能够达到缓存方法的返回对象的效果。",-1),u=s("p",null,"Spring 的缓存技术还具备相当的灵活性，不仅能够使用 SpEL（Spring Expression Language）来定义缓存的 key 和各种 condition，还提供开箱即用的缓存临时存储方案，也支持主流的专业缓存，例如 Redis，EHCache 集成。而 Spring Cache 属于 Spring framework 的一部分，在下面图片所示的这个包里面。",-1),F=p(`<p><strong>Spring cache 里面的主要的注解</strong></p><p><strong>@Cacheable</strong></p><p>应用到读取数据的方法上，就是可以缓存的方法，如查找方法：先从缓存中读取，如果没有再调用方法获取数据，然后把数据添加到缓存中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Cacheable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">AliasFor</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cacheNames&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">//cache的名字。可以根据名字设置不同cache处理类。redis里面可以根据cache名字设置不同的失效时间。</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">AliasFor</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">cacheNames</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">//缓存的key的名字，支持spel</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//key的生成策略，不指定可以用全局的默认的。</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">keyGenerator</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//客户选择不同的CacheManager</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">cacheManager</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//配置不同的cache resolver</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">cacheResolver</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//满足什么样的条件才能被缓存，支持SpEL，可以去掉方法名、参数</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">condition</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//排除哪些返回结果不加入缓存里面去，支持SpEL，实际工作中常见的是result ==null等</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">unless</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//是否同步读取缓存、更新缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Cacheable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">AliasFor</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cacheNames&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">//cache的名字。可以根据名字设置不同cache处理类。redis里面可以根据cache名字设置不同的失效时间。</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">AliasFor</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">cacheNames</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#6A737D;">//缓存的key的名字，支持spel</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//key的生成策略，不指定可以用全局的默认的。</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">keyGenerator</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//客户选择不同的CacheManager</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">cacheManager</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//配置不同的cache resolver</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">cacheResolver</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//满足什么样的条件才能被缓存，支持SpEL，可以去掉方法名、参数</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">condition</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//排除哪些返回结果不加入缓存里面去，支持SpEL，实际工作中常见的是result ==null等</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">unless</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//是否同步读取缓存、更新缓存</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面是@Cacheable 相关的例子。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Cacheable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cacheNames</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;book&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">condition</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;#name.length() &lt; 32&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">unless</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;#result.notNeedCache&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">//利用SPEL表达式只有当name参数长度小于32的时候再进行缓存，排除notNeedCache的对象</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Book </span><span style="color:#B392F0;">findBook</span><span style="color:#E1E4E8;">(String name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Cacheable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cacheNames</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;book&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">condition</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;#name.length() &lt; 32&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">unless</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;#result.notNeedCache&quot;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//利用SPEL表达式只有当name参数长度小于32的时候再进行缓存，排除notNeedCache的对象</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Book </span><span style="color:#6F42C1;">findBook</span><span style="color:#24292E;">(String name)</span></span></code></pre></div><p><strong>@CachePut</strong></p><p>调用方法时会自动把相应的数据放入缓存，它与 @Cacheable 不同的是所有注解的方法每次都会执行，一般配置在 Update 和 insert 方法上。其源码里面的字段和用法基本与 @Cacheable 相同，只是使用场景不一样，我就不详细介绍了。</p><p><strong>@CacheEvict</strong></p><p>删除缓存，一般配置在删除方法上面。代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">CacheEvict</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//与@Cacheable相同的部分咱我就不重复叙述了。</span></span>
<span class="line"><span style="color:#E1E4E8;">......</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//是否删除所有的实体对象</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">allEntries</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//是否方法执行之前执行。默认在方法调用成功之后删除</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeInvocation</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	@</span><span style="color:#F97583;">Caching</span><span style="color:#E1E4E8;"> 所有Cache注解的组合配置方法，源码如下：</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Caching</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">Cacheable</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">cacheable</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">CachePut</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">CacheEvict</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">evict</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">CacheEvict</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//与@Cacheable相同的部分咱我就不重复叙述了。</span></span>
<span class="line"><span style="color:#24292E;">......</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//是否删除所有的实体对象</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">allEntries</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//是否方法执行之前执行。默认在方法调用成功之后删除</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeInvocation</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	@</span><span style="color:#D73A49;">Caching</span><span style="color:#24292E;"> 所有Cache注解的组合配置方法，源码如下：</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Caching</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">Cacheable</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">cacheable</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">CachePut</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">CacheEvict</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">evict</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此外，还有 @CacheConfig 表示全局 Cache 配置；@EnableCaching，表示是否开启 SpringCache 的配置。</p><p>以上是 SpringCache 中常见的注解，下面我们再来看 Spring Cache Redis 里面主要的类都有哪些。</p><p><strong>Spring Cache Redis 里面主要的类</strong></p><p><strong>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration</strong></p><p>cache 的自动装配类，此类被加载的方式是在 spring boot的spring.factories 文件里面，其关键源码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">proxyBeanMethods</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">(CacheManager.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnBean</span><span style="color:#E1E4E8;">(CacheAspectSupport.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CacheManager.class, </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;cacheResolver&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(CacheProperties.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureAfter</span><span style="color:#E1E4E8;">({ CouchbaseDataAutoConfiguration.class, HazelcastAutoConfiguration.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">      HibernateJpaAutoConfiguration.class, RedisAutoConfiguration.class })</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Import</span><span style="color:#E1E4E8;">({ CacheConfigurationImportSelector.class, CacheManagerEntityManagerFactoryDependsOnPostProcessor.class })</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheAutoConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * {@link ImportSelector} to add {@link CacheType} configuration classes.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheConfigurationImportSelector</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ImportSelector</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">selectImports</span><span style="color:#E1E4E8;">(AnnotationMetadata </span><span style="color:#FFAB70;">importingClassMetadata</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">CacheType</span><span style="color:#E1E4E8;">[] types </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CacheType.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] imports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[types.length];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> types.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">           imports[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CacheConfigurations.</span><span style="color:#B392F0;">getConfigurationClass</span><span style="color:#E1E4E8;">(types[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> imports;</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyBeanMethods</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">(CacheManager.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnBean</span><span style="color:#24292E;">(CacheAspectSupport.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheManager.class, </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;cacheResolver&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(CacheProperties.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigureAfter</span><span style="color:#24292E;">({ CouchbaseDataAutoConfiguration.class, HazelcastAutoConfiguration.class,</span></span>
<span class="line"><span style="color:#24292E;">      HibernateJpaAutoConfiguration.class, RedisAutoConfiguration.class })</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Import</span><span style="color:#24292E;">({ CacheConfigurationImportSelector.class, CacheManagerEntityManagerFactoryDependsOnPostProcessor.class })</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheAutoConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * {@link ImportSelector} to add {@link CacheType} configuration classes.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheConfigurationImportSelector</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ImportSelector</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">selectImports</span><span style="color:#24292E;">(AnnotationMetadata </span><span style="color:#E36209;">importingClassMetadata</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">CacheType</span><span style="color:#24292E;">[] types </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheType.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] imports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[types.length];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> types.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           imports[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheConfigurations.</span><span style="color:#6F42C1;">getConfigurationClass</span><span style="color:#24292E;">(types[i]);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> imports;</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过源码可以看到，此类的关键作用是加载 Cache 的依赖配置，以及加载所有 CacheType 的配置文件，而 CacheConfigurations 里面定义了不同的 Cache 实现方式的配置，里面包含了 Ehcache、Redis、Jcache 的各种实现方式，如下图所示。</p>`,18),h=p(`<p><strong>org.springframework.cache.annotation.CachingConfigurerSupport</strong></p><p>通过此类可以自定义 Cache 里面的 CacheManager、CacheResolver、KeyGenerator、CacheErrorHandler，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CachingConfigurerSupport</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CachingConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// cache的manager，主要是管理不同的cache的实现方式，如redis还是ehcache等</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CacheManager </span><span style="color:#B392F0;">cacheManager</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// cache的不同实现者的操作方法，CacheResolver解析器，用于根据实际情况来动态解析使用哪个Cache</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CacheResolver </span><span style="color:#B392F0;">cacheResolver</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//cache的key的生成规则</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> KeyGenerator </span><span style="color:#B392F0;">keyGenerator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//cache发生异常的回调处理，一般情况下我会打印个warn日志，方便知道发生了什么事情</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Nullable</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CacheErrorHandler </span><span style="color:#B392F0;">errorHandler</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CachingConfigurerSupport</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CachingConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// cache的manager，主要是管理不同的cache的实现方式，如redis还是ehcache等</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CacheManager </span><span style="color:#6F42C1;">cacheManager</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// cache的不同实现者的操作方法，CacheResolver解析器，用于根据实际情况来动态解析使用哪个Cache</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CacheResolver </span><span style="color:#6F42C1;">cacheResolver</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//cache的key的生成规则</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> KeyGenerator </span><span style="color:#6F42C1;">keyGenerator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//cache发生异常的回调处理，一般情况下我会打印个warn日志，方便知道发生了什么事情</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Nullable</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CacheErrorHandler </span><span style="color:#6F42C1;">errorHandler</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，所有 CacheManager 是 Spring 提供的各种缓存技术抽象接口，通过它来管理，Spring framework 里面默认实现的 CacheManager 有不同的实现类，redis 默认加载的是 RedisCacheManager，如下图所示。</p>`,4),d=s("p",null,[s("strong",null,"org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration")],-1),g=s("p",null,"它是加载 Cache 的实现者，也是 redis 的实现类，关键源码如下图所示。",-1),A=s("p",null,"我们可以看得出来，它依赖本身的 Redis 的连接，并且加载了 RedisCacheManager；同时可以看到关于 Cache 和 Redis 的配置有哪些。",-1),D=s("p",null,'通过 CacheProperties 里面 redis 的配置，我们可以设置"key 的统一前缀、默认过期时间、是否缓存 null 值、是否使用前缀"这四个配置。',-1),b=p(`<p>通过这几个主要的类，相信你已经对 Spring Cache 有了简单的了解，下面我们看一下在实际工作中有哪些最佳实践可以提供参考。</p><h3 id="spring-cache-结合-redis-使用的最佳实践" tabindex="-1">Spring Cache 结合 Redis 使用的最佳实践 <a class="header-anchor" href="#spring-cache-结合-redis-使用的最佳实践" aria-label="Permalink to &quot;Spring Cache 结合 Redis 使用的最佳实践&quot;">​</a></h3><p><strong>不同 cache 的 name 在 redis 里面配置不同的过期时间</strong></p><p>默认情况下所有 redis 的 cache 过期时间是一样的，实际工作中一般需要自定义不同 cache 的 name 的过期时间，我们这里 cache 的 name 就是指 @Cacheable 里面 value 属性对应的值。主要步骤如下。</p><p>第一步：自定义一个配置文件，用来指定不同的 cacheName 对应的过期时间不一样。代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Getter</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Setter</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.cache.redis&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 改善一下cacheName的最佳实践方法，目前主要用不同的cache name不同的过期时间，可以扩展</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyCacheProperties</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Duration</span><span style="color:#E1E4E8;">&gt; cacheNameConfig;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Getter</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Setter</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.cache.redis&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 改善一下cacheName的最佳实践方法，目前主要用不同的cache name不同的过期时间，可以扩展</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyCacheProperties</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Duration</span><span style="color:#24292E;">&gt; cacheNameConfig;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步：通过自定义类 MyRedisCacheManagerBuilderCustomizer 实现 RedisCacheManagerBuilderCustomizer 里面的 customize 方法，用来指定不同的 name 采用不同的 RedisCacheConfiguration，从而达到设置不同的过期时间的效果。代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 这个依赖spring boot 2.2 以上版本才有效</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyRedisCacheManagerBuilderCustomizer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RedisCacheManagerBuilderCustomizer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> MyCacheProperties myCacheProperties;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> RedisCacheConfiguration redisCacheConfiguration;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyRedisCacheManagerBuilderCustomizer</span><span style="color:#E1E4E8;">(MyCacheProperties </span><span style="color:#FFAB70;">myCacheProperties</span><span style="color:#E1E4E8;">, RedisCacheConfiguration </span><span style="color:#FFAB70;">redisCacheConfiguration</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.myCacheProperties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myCacheProperties;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.redisCacheConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> redisCacheConfiguration;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 利用默认配置的只需要在这里加就可以了</span></span>
<span class="line"><span style="color:#6A737D;">     * spring.cache.cache-names=abc,def,userlist2,user3</span></span>
<span class="line"><span style="color:#6A737D;">     * 下面是不同的cache-name可以配置不同的过期时间，yaml也支持，如果以后还有其他属性扩展可以改这里</span></span>
<span class="line"><span style="color:#6A737D;">     * spring.cache.redis.cache-name-config.user2=2h</span></span>
<span class="line"><span style="color:#6A737D;">     * spring.cache.redis.cache-name-config.def=2m</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">builder</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customize</span><span style="color:#E1E4E8;">(RedisCacheManager.RedisCacheManagerBuilder </span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ObjectUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(myCacheProperties.</span><span style="color:#B392F0;">getCacheNameConfig</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">RedisCacheConfiguration</span><span style="color:#E1E4E8;">&gt; cacheConfigurations </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> myCacheProperties.</span><span style="color:#B392F0;">getCacheNameConfig</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors</span></span>
<span class="line"><span style="color:#E1E4E8;">                        .</span><span style="color:#B392F0;">toMap</span><span style="color:#E1E4E8;">(e</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">e.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(),v</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">builder</span></span>
<span class="line"><span style="color:#E1E4E8;">                                .</span><span style="color:#B392F0;">getCacheConfigurationFor</span><span style="color:#E1E4E8;">(v.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                                .</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(RedisCacheConfiguration.</span><span style="color:#B392F0;">defaultCacheConfig</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">serializeValuesWith</span><span style="color:#E1E4E8;">(redisCacheConfiguration.</span><span style="color:#B392F0;">getValueSerializationPair</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">                                .</span><span style="color:#B392F0;">entryTtl</span><span style="color:#E1E4E8;">(v.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">())));</span></span>
<span class="line"><span style="color:#E1E4E8;">        builder.</span><span style="color:#B392F0;">withInitialCacheConfigurations</span><span style="color:#E1E4E8;">(cacheConfigurations);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 这个依赖spring boot 2.2 以上版本才有效</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRedisCacheManagerBuilderCustomizer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RedisCacheManagerBuilderCustomizer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> MyCacheProperties myCacheProperties;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RedisCacheConfiguration redisCacheConfiguration;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRedisCacheManagerBuilderCustomizer</span><span style="color:#24292E;">(MyCacheProperties </span><span style="color:#E36209;">myCacheProperties</span><span style="color:#24292E;">, RedisCacheConfiguration </span><span style="color:#E36209;">redisCacheConfiguration</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.myCacheProperties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myCacheProperties;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.redisCacheConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisCacheConfiguration;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 利用默认配置的只需要在这里加就可以了</span></span>
<span class="line"><span style="color:#6A737D;">     * spring.cache.cache-names=abc,def,userlist2,user3</span></span>
<span class="line"><span style="color:#6A737D;">     * 下面是不同的cache-name可以配置不同的过期时间，yaml也支持，如果以后还有其他属性扩展可以改这里</span></span>
<span class="line"><span style="color:#6A737D;">     * spring.cache.redis.cache-name-config.user2=2h</span></span>
<span class="line"><span style="color:#6A737D;">     * spring.cache.redis.cache-name-config.def=2m</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">builder</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customize</span><span style="color:#24292E;">(RedisCacheManager.RedisCacheManagerBuilder </span><span style="color:#E36209;">builder</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ObjectUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(myCacheProperties.</span><span style="color:#6F42C1;">getCacheNameConfig</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">RedisCacheConfiguration</span><span style="color:#24292E;">&gt; cacheConfigurations </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myCacheProperties.</span><span style="color:#6F42C1;">getCacheNameConfig</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">toMap</span><span style="color:#24292E;">(e</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">e.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(),v</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">builder</span></span>
<span class="line"><span style="color:#24292E;">                                .</span><span style="color:#6F42C1;">getCacheConfigurationFor</span><span style="color:#24292E;">(v.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                                .</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(RedisCacheConfiguration.</span><span style="color:#6F42C1;">defaultCacheConfig</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">serializeValuesWith</span><span style="color:#24292E;">(redisCacheConfiguration.</span><span style="color:#6F42C1;">getValueSerializationPair</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">                                .</span><span style="color:#6F42C1;">entryTtl</span><span style="color:#24292E;">(v.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">())));</span></span>
<span class="line"><span style="color:#24292E;">        builder.</span><span style="color:#6F42C1;">withInitialCacheConfigurations</span><span style="color:#24292E;">(cacheConfigurations);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步：在 CacheConfiguation 里面把我们自定义的 CacheManagerCustomize 加载进去即可，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableCaching</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {MyCacheProperties.class,CacheProperties.class})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureAfter</span><span style="color:#E1E4E8;">({CacheAutoConfiguration.class})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 支持不同的cache name有不同的缓存时间的配置</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">myCacheProperties</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">redisCacheConfiguration</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myRedisCacheManagerBuilderCustomizer&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">(RedisCacheManagerBuilderCustomizer.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MyRedisCacheManagerBuilderCustomizer </span><span style="color:#B392F0;">myRedisCacheManagerBuilderCustomizer</span><span style="color:#E1E4E8;">(MyCacheProperties </span><span style="color:#FFAB70;">myCacheProperties</span><span style="color:#E1E4E8;">, RedisCacheConfiguration </span><span style="color:#FFAB70;">redisCacheConfiguration</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyRedisCacheManagerBuilderCustomizer</span><span style="color:#E1E4E8;">(myCacheProperties,redisCacheConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableCaching</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {MyCacheProperties.class,CacheProperties.class})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigureAfter</span><span style="color:#24292E;">({CacheAutoConfiguration.class})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 支持不同的cache name有不同的缓存时间的配置</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">myCacheProperties</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">redisCacheConfiguration</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myRedisCacheManagerBuilderCustomizer&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">(RedisCacheManagerBuilderCustomizer.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MyRedisCacheManagerBuilderCustomizer </span><span style="color:#6F42C1;">myRedisCacheManagerBuilderCustomizer</span><span style="color:#24292E;">(MyCacheProperties </span><span style="color:#E36209;">myCacheProperties</span><span style="color:#24292E;">, RedisCacheConfiguration </span><span style="color:#E36209;">redisCacheConfiguration</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRedisCacheManagerBuilderCustomizer</span><span style="color:#24292E;">(myCacheProperties,redisCacheConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第四步：使用的时候非常简单，只需要在 application.properties 里面做如下配置即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 设置默认的过期时间是20分钟</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.cache.redis.time</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">to</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">live</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">20m</span></span>
<span class="line"><span style="color:#E1E4E8;"># 设置我们刚才的例子 @</span><span style="color:#F97583;">Cacheable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">)5分钟过期</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.cache.redis.cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">config.userInfo</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">5m</span></span>
<span class="line"><span style="color:#E1E4E8;"># 设置 room的cache1小时过期</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.cache.redis.cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">config.room</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">1h</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 设置默认的过期时间是20分钟</span></span>
<span class="line"><span style="color:#24292E;">spring.cache.redis.time</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">to</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">live</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">20m</span></span>
<span class="line"><span style="color:#24292E;"># 设置我们刚才的例子 @</span><span style="color:#D73A49;">Cacheable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">)5分钟过期</span></span>
<span class="line"><span style="color:#24292E;">spring.cache.redis.cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">config.userInfo</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">5m</span></span>
<span class="line"><span style="color:#24292E;"># 设置 room的cache1小时过期</span></span>
<span class="line"><span style="color:#24292E;">spring.cache.redis.cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">config.room</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">1h</span></span></code></pre></div><p><strong>自定义 KeyGenerator 实现，redis 的 key 自定义拼接规则</strong></p><p>假如我们不喜欢默认的 cache 生成的 key 的 string 规则，那么可以自定义。我们创建 MyRedisCachingConfigurerSupport 集成 CachingConfigurerSupport 即可，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Log4j2</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyRedisCachingConfigurerSupport</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CachingConfigurerSupport</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> KeyGenerator </span><span style="color:#B392F0;">keyGenerator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getKeyGenerator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 覆盖默认的redis key的生成规则，变成&quot;方法名:参数:参数&quot;</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> KeyGenerator </span><span style="color:#B392F0;">getKeyGenerator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (target, method, params) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            StringBuilder key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            key.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(ClassUtils.</span><span style="color:#B392F0;">getQualifiedMethodName</span><span style="color:#E1E4E8;">(method));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Object obc </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> params) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                key.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(obc);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Log4j2</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRedisCachingConfigurerSupport</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CachingConfigurerSupport</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> KeyGenerator </span><span style="color:#6F42C1;">keyGenerator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getKeyGenerator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 覆盖默认的redis key的生成规则，变成&quot;方法名:参数:参数&quot;</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> KeyGenerator </span><span style="color:#6F42C1;">getKeyGenerator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (target, method, params) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            StringBuilder key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            key.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(ClassUtils.</span><span style="color:#6F42C1;">getQualifiedMethodName</span><span style="color:#24292E;">(method));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Object obc </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> params) {</span></span>
<span class="line"><span style="color:#24292E;">                key.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(obc);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>当发生 cache 和 redis 的操作异常时，我们不希望阻碍主流程，打印一个关键日志即可</strong></p><p>只需要在 MyRedisCachingConfigurerSupport 里面再实现父类的 errorHandler 即可，代码变成了如下模样。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Log4j2</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyRedisCachingConfigurerSupport</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CachingConfigurerSupport</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> KeyGenerator </span><span style="color:#B392F0;">keyGenerator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getKeyGenerator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 覆盖默认的redis key的生成规则，变成&quot;方法名:参数:参数&quot;</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> KeyGenerator </span><span style="color:#B392F0;">getKeyGenerator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (target, method, params) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            StringBuilder key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            key.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(ClassUtils.</span><span style="color:#B392F0;">getQualifiedMethodName</span><span style="color:#E1E4E8;">(method));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Object obc </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> params) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                key.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(obc);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 覆盖默认异常处理方法，不抛异常，改打印error日志</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CacheErrorHandler </span><span style="color:#B392F0;">errorHandler</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheErrorHandler</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleCacheGetError</span><span style="color:#E1E4E8;">(RuntimeException </span><span style="color:#FFAB70;">exception</span><span style="color:#E1E4E8;">, Cache </span><span style="color:#FFAB70;">cache</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Spring cache GET error:cache=%s,key=%s&quot;</span><span style="color:#E1E4E8;">, cache, key), exception);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleCachePutError</span><span style="color:#E1E4E8;">(RuntimeException </span><span style="color:#FFAB70;">exception</span><span style="color:#E1E4E8;">, Cache </span><span style="color:#FFAB70;">cache</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Spring cache PUT error:cache=%s,key=%s&quot;</span><span style="color:#E1E4E8;">, cache, key), exception);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleCacheEvictError</span><span style="color:#E1E4E8;">(RuntimeException </span><span style="color:#FFAB70;">exception</span><span style="color:#E1E4E8;">, Cache </span><span style="color:#FFAB70;">cache</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Spring cache EVICT error:cache=%s,key=%s&quot;</span><span style="color:#E1E4E8;">, cache, key), exception);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleCacheClearError</span><span style="color:#E1E4E8;">(RuntimeException </span><span style="color:#FFAB70;">exception</span><span style="color:#E1E4E8;">, Cache </span><span style="color:#FFAB70;">cache</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Spring cache CLEAR error:cache=%s&quot;</span><span style="color:#E1E4E8;">, cache), exception);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Log4j2</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRedisCachingConfigurerSupport</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CachingConfigurerSupport</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> KeyGenerator </span><span style="color:#6F42C1;">keyGenerator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getKeyGenerator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 覆盖默认的redis key的生成规则，变成&quot;方法名:参数:参数&quot;</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> KeyGenerator </span><span style="color:#6F42C1;">getKeyGenerator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (target, method, params) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            StringBuilder key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            key.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(ClassUtils.</span><span style="color:#6F42C1;">getQualifiedMethodName</span><span style="color:#24292E;">(method));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Object obc </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> params) {</span></span>
<span class="line"><span style="color:#24292E;">                key.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(obc);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 覆盖默认异常处理方法，不抛异常，改打印error日志</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CacheErrorHandler </span><span style="color:#6F42C1;">errorHandler</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheErrorHandler</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleCacheGetError</span><span style="color:#24292E;">(RuntimeException </span><span style="color:#E36209;">exception</span><span style="color:#24292E;">, Cache </span><span style="color:#E36209;">cache</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Spring cache GET error:cache=%s,key=%s&quot;</span><span style="color:#24292E;">, cache, key), exception);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleCachePutError</span><span style="color:#24292E;">(RuntimeException </span><span style="color:#E36209;">exception</span><span style="color:#24292E;">, Cache </span><span style="color:#E36209;">cache</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Spring cache PUT error:cache=%s,key=%s&quot;</span><span style="color:#24292E;">, cache, key), exception);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleCacheEvictError</span><span style="color:#24292E;">(RuntimeException </span><span style="color:#E36209;">exception</span><span style="color:#24292E;">, Cache </span><span style="color:#E36209;">cache</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Spring cache EVICT error:cache=%s,key=%s&quot;</span><span style="color:#24292E;">, cache, key), exception);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleCacheClearError</span><span style="color:#24292E;">(RuntimeException </span><span style="color:#E36209;">exception</span><span style="color:#24292E;">, Cache </span><span style="color:#E36209;">cache</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Spring cache CLEAR error:cache=%s&quot;</span><span style="color:#24292E;">, cache), exception);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>改变默认的 cache 里面 redis 的 value 序列化方式</strong></p><p>默认有可能是 JDK 序列化方式，所以一般我们看不懂 redis 里面的值，那么就可以把序列化方式改成 JSON 格式，只需要在 CacheConfiguration 里面增加默认的 RedisCacheConfiguration 配置即可，完整的 CacheConfiguration 变成如下代码所示的样子。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableCaching</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {MyCacheProperties.class,CacheProperties.class})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureAfter</span><span style="color:#E1E4E8;">({CacheAutoConfiguration.class})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CacheConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 支持不同的cache name有不同的缓存时间的配置</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">myCacheProperties</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">redisCacheConfiguration</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myRedisCacheManagerBuilderCustomizer&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConditionalOnClass</span><span style="color:#E1E4E8;">(RedisCacheManagerBuilderCustomizer.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MyRedisCacheManagerBuilderCustomizer </span><span style="color:#B392F0;">myRedisCacheManagerBuilderCustomizer</span><span style="color:#E1E4E8;">(MyCacheProperties </span><span style="color:#FFAB70;">myCacheProperties</span><span style="color:#E1E4E8;">, RedisCacheConfiguration </span><span style="color:#FFAB70;">redisCacheConfiguration</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyRedisCacheManagerBuilderCustomizer</span><span style="color:#E1E4E8;">(myCacheProperties,redisCacheConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * cache异常不抛异常，只打印error日志</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myRedisCachingConfigurerSupport&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> MyRedisCachingConfigurerSupport </span><span style="color:#B392F0;">myRedisCachingConfigurerSupport</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyRedisCachingConfigurerSupport</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 依赖默认的ObjectMapper，实现普通的json序列化</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">defaultObjectMapper</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;genericJackson2JsonRedisSerializer&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;genericJackson2JsonRedisSerializer&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> GenericJackson2JsonRedisSerializer </span><span style="color:#B392F0;">genericJackson2JsonRedisSerializer</span><span style="color:#E1E4E8;">(ObjectMapper </span><span style="color:#FFAB70;">defaultObjectMapper</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ObjectMapper objectMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultObjectMapper.</span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        objectMapper.</span><span style="color:#B392F0;">registerModule</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Hibernate5Module</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">enable</span><span style="color:#E1E4E8;">(REPLACE_PERSISTENT_COLLECTIONS)); </span><span style="color:#6A737D;">//支持JPA的实体的json的序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">        objectMapper.</span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//培训</span></span>
<span class="line"><span style="color:#E1E4E8;">        objectMapper.</span><span style="color:#B392F0;">deactivateDefaultTyping</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//关闭 defaultType，不需要关心reids里面是否为对象的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GenericJackson2JsonRedisSerializer</span><span style="color:#E1E4E8;">(objectMapper);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 覆盖 RedisCacheConfiguration，只是修改serializeValues with jackson</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">cacheProperties</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConditionalOnMissingBean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jacksonRedisCacheConfiguration&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RedisCacheConfiguration </span><span style="color:#B392F0;">jacksonRedisCacheConfiguration</span><span style="color:#E1E4E8;">(CacheProperties </span><span style="color:#FFAB70;">cacheProperties</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                                  GenericJackson2JsonRedisSerializer </span><span style="color:#FFAB70;">genericJackson2JsonRedisSerializer</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CacheProperties.Redis redisProperties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cacheProperties.</span><span style="color:#B392F0;">getRedis</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        RedisCacheConfiguration config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RedisCacheConfiguration</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">defaultCacheConfig</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">serializeValuesWith</span><span style="color:#E1E4E8;">(RedisSerializationContext.SerializationPair.</span><span style="color:#B392F0;">fromSerializer</span><span style="color:#E1E4E8;">(genericJackson2JsonRedisSerializer));</span><span style="color:#6A737D;">//修改的关键所在，指定Jackson2JsonRedisSerializer的方式</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (redisProperties.</span><span style="color:#B392F0;">getTimeToLive</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">entryTtl</span><span style="color:#E1E4E8;">(redisProperties.</span><span style="color:#B392F0;">getTimeToLive</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (redisProperties.</span><span style="color:#B392F0;">getKeyPrefix</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">prefixCacheNameWith</span><span style="color:#E1E4E8;">(redisProperties.</span><span style="color:#B392F0;">getKeyPrefix</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">redisProperties.</span><span style="color:#B392F0;">isCacheNullValues</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">disableCachingNullValues</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">redisProperties.</span><span style="color:#B392F0;">isUseKeyPrefix</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">disableKeyPrefix</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> config;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableCaching</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {MyCacheProperties.class,CacheProperties.class})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AutoConfigureAfter</span><span style="color:#24292E;">({CacheAutoConfiguration.class})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CacheConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 支持不同的cache name有不同的缓存时间的配置</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">myCacheProperties</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">redisCacheConfiguration</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myRedisCacheManagerBuilderCustomizer&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConditionalOnClass</span><span style="color:#24292E;">(RedisCacheManagerBuilderCustomizer.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MyRedisCacheManagerBuilderCustomizer </span><span style="color:#6F42C1;">myRedisCacheManagerBuilderCustomizer</span><span style="color:#24292E;">(MyCacheProperties </span><span style="color:#E36209;">myCacheProperties</span><span style="color:#24292E;">, RedisCacheConfiguration </span><span style="color:#E36209;">redisCacheConfiguration</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRedisCacheManagerBuilderCustomizer</span><span style="color:#24292E;">(myCacheProperties,redisCacheConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * cache异常不抛异常，只打印error日志</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myRedisCachingConfigurerSupport&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MyRedisCachingConfigurerSupport </span><span style="color:#6F42C1;">myRedisCachingConfigurerSupport</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRedisCachingConfigurerSupport</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 依赖默认的ObjectMapper，实现普通的json序列化</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">defaultObjectMapper</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;genericJackson2JsonRedisSerializer&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;genericJackson2JsonRedisSerializer&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> GenericJackson2JsonRedisSerializer </span><span style="color:#6F42C1;">genericJackson2JsonRedisSerializer</span><span style="color:#24292E;">(ObjectMapper </span><span style="color:#E36209;">defaultObjectMapper</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ObjectMapper objectMapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultObjectMapper.</span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        objectMapper.</span><span style="color:#6F42C1;">registerModule</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hibernate5Module</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">enable</span><span style="color:#24292E;">(REPLACE_PERSISTENT_COLLECTIONS)); </span><span style="color:#6A737D;">//支持JPA的实体的json的序列化</span></span>
<span class="line"><span style="color:#24292E;">        objectMapper.</span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//培训</span></span>
<span class="line"><span style="color:#24292E;">        objectMapper.</span><span style="color:#6F42C1;">deactivateDefaultTyping</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//关闭 defaultType，不需要关心reids里面是否为对象的类型</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GenericJackson2JsonRedisSerializer</span><span style="color:#24292E;">(objectMapper);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 覆盖 RedisCacheConfiguration，只是修改serializeValues with jackson</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">cacheProperties</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConditionalOnMissingBean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jacksonRedisCacheConfiguration&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RedisCacheConfiguration </span><span style="color:#6F42C1;">jacksonRedisCacheConfiguration</span><span style="color:#24292E;">(CacheProperties </span><span style="color:#E36209;">cacheProperties</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                                  GenericJackson2JsonRedisSerializer </span><span style="color:#E36209;">genericJackson2JsonRedisSerializer</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        CacheProperties.Redis redisProperties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cacheProperties.</span><span style="color:#6F42C1;">getRedis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        RedisCacheConfiguration config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RedisCacheConfiguration</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">defaultCacheConfig</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">serializeValuesWith</span><span style="color:#24292E;">(RedisSerializationContext.SerializationPair.</span><span style="color:#6F42C1;">fromSerializer</span><span style="color:#24292E;">(genericJackson2JsonRedisSerializer));</span><span style="color:#6A737D;">//修改的关键所在，指定Jackson2JsonRedisSerializer的方式</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (redisProperties.</span><span style="color:#6F42C1;">getTimeToLive</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">entryTtl</span><span style="color:#24292E;">(redisProperties.</span><span style="color:#6F42C1;">getTimeToLive</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (redisProperties.</span><span style="color:#6F42C1;">getKeyPrefix</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">prefixCacheNameWith</span><span style="color:#24292E;">(redisProperties.</span><span style="color:#6F42C1;">getKeyPrefix</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">redisProperties.</span><span style="color:#6F42C1;">isCacheNullValues</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">disableCachingNullValues</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">redisProperties.</span><span style="color:#6F42C1;">isUseKeyPrefix</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">disableKeyPrefix</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> config;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>以上就是本讲的内容了，这一讲的目的是帮助你打开思路，了解 Spring Data 的生态体系。那么由于篇幅有限，我介绍的 Cache、Redis、JPA 只是这三个项目里的冰山一角，你在实际工作中可以根据实际的应用场景，想想它们各自的职责是什么，让它们发挥各自的特长，而不是依赖于 Hibernate 功能的强大，为了用而去用，这样会让代码的可读性和复杂度提高很多，就会遇到各种各样的问题，导致觉得 Hibernate 太难，或者不可控。</p><p>其实大多数时候是我们的思路不对，其实万事万物皆有优势和劣势，我们要抛弃其劣势，充分利用各个框架的优势，发挥各自的特长。如果你觉得本专栏对你有帮助，就动动手指分享吧，下一讲我们来聊聊 Spring Data Rest 的相关话题，到时见。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,25);function f(m,B,v,k,S,R){const a=o("Image");return e(),c("div",null,[E,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/03/A1/CgpVE1_gGfGAAYRDAAGxaGz4d8A668.png"}),y,i,C,u,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/03/9F/Cip5yF_gGfmAfvKbAAGFdPiyN9k521.png"}),F,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/03/9F/Cip5yF_gGgWAPkIYAAD6KrApZRs929.png"}),h,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/03/9F/Cip5yF_gGgyAJ21FAADMLk_C6ag487.png"}),d,g,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/8B/BE/Ciqc1F_gGhKAQGL2AAIaDnIIDQQ607.png"}),A,D,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/8B/C9/CgqCHl_gGhqAf6niAACSWTdYSNc168.png"}),b])}const P=l(t,[["render",f]]);export{q as __pageData,P as default};
