import{_ as n,j as a,o as i,g as _,k as e,h as o,Q as t,s as l}from"./chunks/framework.cfb14fe0.js";const cl=JSON.parse('{"title":"第11课：基于Python+Anible+Django搭建自动化任务平台","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/111-运维高手的36项修炼文档/(1556) 第11课：基于 Python+Anible+Django 搭建自动化任务平台.md","filePath":"posts/devops/111-运维高手的36项修炼文档/(1556) 第11课：基于 Python+Anible+Django 搭建自动化任务平台.md","lastUpdated":1696682708000}'),r={name:"posts/devops/111-运维高手的36项修炼文档/(1556) 第11课：基于 Python+Anible+Django 搭建自动化任务平台.md"},p=t("",17),h=l("br",null,null,-1),c=l("p",null,"playbook 是 Ansibe的一种模式，需要根据 yml 及 palybook 语法要求写一个剧本文件，这个剧本文件以 yml 作为格式，我们可以看这样的一张图，在执行同样一个我刚讲的任务，它的剧本展示如上：在这里定义主机、执行的对象，执行的用户、定义一个变量。",-1),b=l("br",null,null,-1),d=l("p",null,"tasks 是 playbook 具体执行的任务，这里任务是执行 shell:touch /tmp/{ {touch_file}} 文件。我们会看到用 touch 命令添加的文件是可以用变量 (touch_file) 的方式来引用。在做一个更大规模的自动化任务时，用 playbook 整体做会更好，因为它可以把很多东西抽象用剧本方式管理。",-1),u=l("br",null,null,-1),A=l("p",null,"这就是 playbook 的执行方式：ansible-playbook+ 写好的 playbook 的配置文件（也就是刚刚这张图里面的内容）+选项。",-1),g=l("h3",{id:"roles",tabindex:"-1"},[o("roles "),l("a",{class:"header-anchor",href:"#roles","aria-label":'Permalink to "roles"'},"​")],-1),m=l("p",null,"刚讲到了 adhoc 和playbook 它们的执行用例，我们再来讲一讲 roles。 roles是在一个大型的任务场景里，执行一个整体、工程化任务。",-1),y=l("br",null,null,-1),k=t("",29),P=t("",13),C=l("br",null,null,-1),M=l("p",null,"下面我们来看下自动化部分的代码内容，在整体的任务调用到服务端以后，在 urls.py 文件里定义了一个对外的 API 接口路径，即 /adhocdo 接口。",-1),T=l("h3",{id:"核心类功能",tabindex:"-1"},[o("核心类功能 "),l("a",{class:"header-anchor",href:"#核心类功能","aria-label":'Permalink to "核心类功能"'},"​")],-1),S=l("p",null,"views.py 视图里面定义了一个 adhoc_task() 函数，它会来负责接收请求，并且执行对应的逻辑。同时，在这套工程里面把前端发过来的任务请求、资产信息关联起来，当它在调用底层的 Ansible 接口时，也需要进行一次封装，这个会在 ansible_api.py 文件里把 Ansible 模块的默认内核方法重做封装提供外部调用。",-1),q=l("br",null,null,-1),w=t("",13),D=l("br",null,null,-1),B=l("p",null,"刚讲到了对外暴露的是 /adhocdo 的接口地址，现在我们来请求这个地址，并且按照它的参数要求来进行请求。这里用 POST 方法，提交的是 taskid 这个参数，主要是任务的 ID。mod_type 主要是模块的类型，因为 adhoc 这个任务是需要以模块的方式来进行任务执行的。执行的参数就代表具体的任务命令了。sn_key 对主机起到唯一标识的作用，我们需要对哪一台主机就用 sn_key 来对应的执行。",-1),f=l("br",null,null,-1),x=l("br",null,null,-1),I=l("p",null,"这里有具体的参数，我用 JSON 的格式提交的任务， JSON 的格式是这样的，举个例子，我们会看到这里有执行的任务 ID，然后类型是 shell，执行的命令是 touch 一个文件，group 它执行的是主机组（可选择不加）。最后 加入机器的sn_key。",-1),j=l("br",null,null,-1),v=l("br",null,null,-1),H=l("p",null,"接下来我来演示一下 IMOOCC自动化任务执行的过程。在上一个课时里面我们讲到了 IMOOCC 工程对自动化资产的收集。有了上一课时的基础，我在本地的这套工程已经收集到了对应的资产信息，如本地的这台输入主机的信息就已经在我的这套资产管理系统里面直接提取。",-1),R=l("br",null,null,-1),N=l("br",null,null,-1),O=l("p",null,"提交的Json格式如图所示，exec_args中执行命令的方式是 touch 一个文件，我这里执行命令是在/tmp目录下touch 一个 test22 的文件。sn_key 是唯一主机的标识，我们可以在资产管理系统里面点击详细这一部分来提取出 sn 号，这个就是它的唯一标识。",-1),V=l("br",null,null,-1),J=l("br",null,null,-1),L=l("p",null,"mod_type 是直接执行 adhoc 的模块方式，这里我执行的是 Shell 的命令。",-1),E=l("br",null,null,-1),Q=l("p",null,"接下来，我在 Chrome 下使用模拟 post 请求客户端插件 PostMan，来模拟提交这个任务到工程的自动化任务 API 接口，并开始执行。",-1),G=l("br",null,null,-1),K=l("br",null,null,-1),X=l("p",null,"大家按照 JSON 的格式配置好后，可以参考设置的方式，然后点击 send按钮，这样的话就会把我的数据进行 POST 提交，我们会看到它这里已经在 loading 中，需要等待服务端返回的结果。",-1),$=l("br",null,null,-1),F=l("br",null,null,-1),U=l("p",null,'当服务端返回了内容，看到 http reponse 的状态是成功的，并看到信息"sucess"（成功的），并看到执行此任务具体日志（它是ansible的接口所返回的）。',-1),Y=l("br",null,null,-1),W=l("br",null,null,-1),z=l("p",null,"然后通过另外一种方式我们再来验证是不是成功，可以直接 ssh 登录服务器主机上，然后进入 tmp 目录，输入 ls，会发现 test22 这个文件在我录制视频的时间点有对应生成这样的一个文件，说明自动化任务是已经执行成功了。",-1),Z=l("br",null,null,-1),ll=l("p",null,"通过这个课时我们能够理解 Ansible 如何融合到 Devops 里面，以及在这个过程中对应需要做的一些开发工作。",-1),ol=l("br",null,null,-1),sl=l("p",null,[o("本专栏课中的所有案例配置及源代码，你可以课后通过这个地址 "),l("a",{href:"http://www.jesonc.com/jeson/2020/02/07/ywgs36/",target:"_blank",rel:"noreferrer"},"http://www.jesonc.com/jeson/2020/02/07/ywgs36/"),o(" 自己下载，密码为：mukelaoshi。")],-1),el=l("br",null,null,-1);function tl(nl,al,il,_l,rl,pl){const s=a("Image");return i(),_("div",null,[p,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHCARXKPAAEGxYJzasw197.png"}),o(),h,c,b,d,u,A,g,m,y,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHCAXLU8AAFRHO4gLxc907.png"}),o(),k,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHCARtpTAAHVwx-gTak127.png"}),o(),P,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHGAdMFQAADEpb7Dwsw655.png"}),o(),C,M,T,S,q,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHGAJLotAAFmNJ-edRA051.png"}),o(),w,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHGAVPdAAADGi3JVaHk602.png"}),o(),D,B,f,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHKAPwtfAACH5Q2NW3o196.png"}),o(),x,I,j,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHKAO35aAAGx4BbLhL0386.png"}),o(),v,H,R,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHOATKf0AATlRJB7cOI285.png"}),o(),N,O,V,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/7A/CA/Cgq2xl55wHOAH6vtAAMlclXaedE645.png"}),o(),J,L,E,Q,G,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/7A/CA/Cgq2xl55wHOACyO2AAXukl_6PSE019.png"}),o(),K,X,$,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHSAPhPbAANojZQK3YM533.png"}),o(),F,U,Y,e(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/01/B4/Ciqah155wHSAYKeEAAJCjs_ILvU244.png"}),o(),W,z,Z,ll,ol,sl,el])}const bl=n(r,[["render",tl]]);export{cl as __pageData,bl as default};
