import{_ as o,j as e,o as t,g as c,k as l,h as s,s as n,Q as p}from"./chunks/framework.4e7d56ce.js";const k=JSON.parse('{"title":"12如何使用PageObject设计模型？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4672) 12  如何使用 Page Object 设计模型？.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4672) 12  如何使用 Page Object 设计模型？.md","lastUpdated":1696682708000}'),r={name:"posts/devops/114-测试开发入门与实战文档/(4672) 12  如何使用 Page Object 设计模型？.md"},E=n("h1",{id:"_12如何使用pageobject设计模型",tabindex:"-1"},[s("12如何使用PageObject设计模型？ "),n("a",{class:"header-anchor",href:"#_12如何使用pageobject设计模型","aria-label":'Permalink to "12如何使用PageObject设计模型？"'},"​")],-1),y=n("p",null,"到上节课为止，你不仅已经具备了测试开发的初级能力，而且能够搭建起融合 API 自动化测试和 UI 自动化测试的框架。",-1),i=n("p",null,"今天我将带你一起，使用 PageObject 模型，优化我们的框架代码，使我们的框架结构更加清晰，代码更加模块化，以便在迁移项目重用框架时成本更低。",-1),F=n("p",null,"下方是课程内容结构图，可供你学习参考：",-1),u=p('<h3 id="什么是-pageobject-设计模型" tabindex="-1">什么是 PageObject 设计模型？ <a class="header-anchor" href="#什么是-pageobject-设计模型" aria-label="Permalink to &quot;什么是 PageObject 设计模型？&quot;">​</a></h3><p>PageObject 设计模型是在自动化测试过程中普遍采用的一种设计模式。它通过对页面对象（实际的 UI 页面，或者是逻辑上的页面）进行抽象，使得你的代码能在页面元素发生改变时，<strong>尽量少地更改，以最大程度地支持代码重用和避免代码冗余</strong>。</p><h3 id="pageobject-设计模型的特征" tabindex="-1">PageObject 设计模型的特征 <a class="header-anchor" href="#pageobject-设计模型的特征" aria-label="Permalink to &quot;PageObject 设计模型的特征&quot;">​</a></h3><p>目前，并没有一种统一的格式（format）来告诉你如何设计 PageObject，只要你设计的代码将页面元素和测试代码分离，你都可以说你使用了 PageObject。</p><p>一般情况下，实现了 PageObject 的代码往往具备如下特征：</p><p><strong>1.页面封装成 Page 类，页面元素为 Page 类的成员元素，页面功能放在 Page 类方法里。</strong></p><p>将一个页面（或者待测试对象）封装成一个类（Class），把它称作 Page 类。Page 类里包括了这个页面（或者待测试对象）上的所有的元素，以及针对页面元素的操作方法（单步操作或者多步操作，一般会定义类方法）。注意：这个Page 类里仅仅包括当前页面，一般不包括针对其他页面的操作。</p><p><strong>2.针对这个 Page 类定义一个测试类，在测试类调用 Page 类的各个类方法完成测试。</strong></p><p>也就是测试代码和被测试页面的页面代码解耦，当页面本身发生变化，例如元素定位发生改变、页面布局改变后，仅需要更改相对应的 Page 类的代码，而无须更改测试类的代码。</p><p>PageObject 模式减少了代码冗余，可以使业务流程变得清晰易读，降低了测试代码维护成本。</p><h3 id="pageobject-的实现" tabindex="-1">PageObject 的实现 <a class="header-anchor" href="#pageobject-的实现" aria-label="Permalink to &quot;PageObject 的实现&quot;">​</a></h3><p>根据上述特点，我们来看下一个 PageObject 的经典设计：</p>',12),_=p(`<p>可以看到，在<strong>测试类</strong> 里，我们会定义许多<strong>测试方法</strong> ，这些测试方法里，会含有对<strong>页面对象实例</strong> 的调用；而<strong>页面对象实例</strong> ，是通过<strong>页面对象类</strong> 进行初始化操作生成的；对于许多<strong>页面对象类</strong> 都存在的通用操作，我们会提取到<strong>页面对象基类</strong>里。</p><p>通过这种方法，我们就实现了：</p><ul><li><p>一个页面元素在整个项目中，仅存在一处定义，其他都是调用；</p></li><li><p>Page 类通用的操作进一步提取到 BasePage 类，减少了代码冗余。</p></li></ul><h3 id="pageobject-的-python-库" tabindex="-1">PageObject 的 Python 库 <a class="header-anchor" href="#pageobject-的-python-库" aria-label="Permalink to &quot;PageObject 的 Python 库&quot;">​</a></h3><p>在 Python 里，有专门针对 PageObject 的 Python 库 Page Objects。使用 Page Objects 可以迅速实现 PageObject 模式，下面来看下 Page Objects 库的使用。</p><ul><li><strong>安装：</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install page_objects</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install page_objects</span></span></code></pre></div><ul><li><strong>应用：</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 以下为官方示例</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> page_objects </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> PageObject, PageElement</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoginPage</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">PageObject</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PageElement(</span><span style="color:#FFAB70;">id_</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PageElement(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        login </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PageElement(</span><span style="color:#FFAB70;">css</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;input[type=&quot;submit&quot;]&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.PhantomJS()</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> driver.get(</span><span style="color:#9ECBFF;">&quot;http://example.com&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoginPage(driver)</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> page.username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;secret&#39;</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> page.password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;squirrel&#39;</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> page.username.text </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;secret&#39;</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> page.login.click()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 以下为官方示例</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> page_objects </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> PageObject, PageElement</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoginPage</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">PageObject</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PageElement(</span><span style="color:#E36209;">id_</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PageElement(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        login </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PageElement(</span><span style="color:#E36209;">css</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;input[type=&quot;submit&quot;]&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.PhantomJS()</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> driver.get(</span><span style="color:#032F62;">&quot;http://example.com&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoginPage(driver)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> page.username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;secret&#39;</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> page.password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;squirrel&#39;</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> page.username.text </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;secret&#39;</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> page.login.click()</span></span></code></pre></div><h3 id="项目实战-pageobject-应用" tabindex="-1">项目实战 ------ PageObject 应用 <a class="header-anchor" href="#项目实战-pageobject-应用" aria-label="Permalink to &quot;项目实战 ------ PageObject 应用&quot;">​</a></h3><p>好，我们不仅了解了 PageObject 的理论，也了解了 page_objects 这个 Python 库的使用。</p><p>现在，我们给我们的项目应用 pageObject 模型。</p><h4 id="第一步-改造项目结构" tabindex="-1">第一步：改造项目结构 <a class="header-anchor" href="#第一步-改造项目结构" aria-label="Permalink to &quot;第一步：改造项目结构&quot;">​</a></h4><p>我们来按照 PageObject 的实现来改造我们的项目结构。改造前，我们的目录结构：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span></code></pre></div><p>其中，test_ones.py 是我们上一节课**《11| 如虎添翼，API 和 UI 自动化测试融合》**新建的文件，其余目录及 <strong>init</strong> .py 都是空目录、空文件。</p><p>使用 PageObject 改造后，我们期望的目录结构：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">pages</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">base_page.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">pages</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">base_page.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span></code></pre></div><p>改造后，我们把原本的 tests 目录下的 test_ones.py 里关于页面元素的操作全部剥离到 pages 文件夹下的 ones.py 里，然后针对可能的公用的操作，我们进一步抽象到 base_page.py 里去。</p><p>下面先看下原来 tests 文件夹下 test_ones.py 的内容：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium.webdriver.common.by </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> By</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium.webdriver.support.ui </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> WebDriverWait</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium.webdriver.support </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> expected_conditions </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cookie_to_selenium_format</span><span style="color:#E1E4E8;">(cookie):</span></span>
<span class="line"><span style="color:#E1E4E8;">    cookie_selenium_mapping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;secure&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;expires&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    cookie_dict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain_initial_dot&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict[</span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict[</span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(cookie_selenium_mapping.keys()):</span></span>
<span class="line"><span style="color:#E1E4E8;">        key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#E1E4E8;">        value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, k)</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cookie_dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestOneAI</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 在pytest里，针对一个类方法的setup为setup_method,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># setup_method作用同unittest里的setUp()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup_method</span><span style="color:#E1E4E8;">(self, method):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.login_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://ones.ai/project/api/project/auth/login&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.home_page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://ones.ai/project/#/home/project&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.header </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;user-agent&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;content-type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;login_data, project_name&#39;</span><span style="color:#E1E4E8;">, [({</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTestingIsGood&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;pleasefollowiTesting@outlook.com&quot;</span><span style="color:#E1E4E8;">}, {</span><span style="color:#9ECBFF;">&quot;project_name&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;VIPTEST&quot;</span><span style="color:#E1E4E8;">})])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_merge_api_ui</span><span style="color:#E1E4E8;">(self, login_data, project_name):</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.post(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.login_url, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">json.dumps(login_data), </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.header)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> result.status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> json.loads(result.text)[</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">].lower() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> login_data[</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        all_cookies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.cookies._cookies[</span><span style="color:#9ECBFF;">&quot;.ones.ai&quot;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.home_page)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.delete_all_cookies()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> all_cookies.items():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(v)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">(v))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.add_cookie(cookie_to_selenium_format(v))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.home_page)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebDriverWait(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">).until(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">EC</span><span style="color:#E1E4E8;">.presence_of_element_located((By.</span><span style="color:#79B8FF;">CSS_SELECTOR</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;[class=&quot;company-title-text&quot;]&#39;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> element.get_attribute(</span><span style="color:#9ECBFF;">&quot;innerHTML&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> project_name[</span><span style="color:#9ECBFF;">&quot;project_name&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TimeoutError</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TimeoutError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Run time out&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 在pytest里，针对一个类方法的teardown为teardown_method,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># teardown_method作用同unittest里的dearDown()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">teardown_method</span><span style="color:#E1E4E8;">(self, method):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.close()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.quit()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium.webdriver.common.by </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> By</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium.webdriver.support.ui </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> WebDriverWait</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium.webdriver.support </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> expected_conditions </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cookie_to_selenium_format</span><span style="color:#24292E;">(cookie):</span></span>
<span class="line"><span style="color:#24292E;">    cookie_selenium_mapping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;secure&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;expires&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    cookie_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain_initial_dot&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict[</span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict[</span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(cookie_selenium_mapping.keys()):</span></span>
<span class="line"><span style="color:#24292E;">        key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k</span></span>
<span class="line"><span style="color:#24292E;">        value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, k)</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cookie_dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestOneAI</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 在pytest里，针对一个类方法的setup为setup_method,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># setup_method作用同unittest里的setUp()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup_method</span><span style="color:#24292E;">(self, method):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.login_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://ones.ai/project/api/project/auth/login&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.home_page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://ones.ai/project/#/home/project&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.header </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;user-agent&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;content-type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;login_data, project_name&#39;</span><span style="color:#24292E;">, [({</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTestingIsGood&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;pleasefollowiTesting@outlook.com&quot;</span><span style="color:#24292E;">}, {</span><span style="color:#032F62;">&quot;project_name&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;VIPTEST&quot;</span><span style="color:#24292E;">})])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_merge_api_ui</span><span style="color:#24292E;">(self, login_data, project_name):</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.post(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.login_url, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">json.dumps(login_data), </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.header)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> result.status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> json.loads(result.text)[</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">].lower() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> login_data[</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        all_cookies </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.cookies._cookies[</span><span style="color:#032F62;">&quot;.ones.ai&quot;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.home_page)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.delete_all_cookies()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> all_cookies.items():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(v)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;">(v))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.add_cookie(cookie_to_selenium_format(v))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.home_page)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebDriverWait(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">).until(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">EC</span><span style="color:#24292E;">.presence_of_element_located((By.</span><span style="color:#005CC5;">CSS_SELECTOR</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;[class=&quot;company-title-text&quot;]&#39;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> element.get_attribute(</span><span style="color:#032F62;">&quot;innerHTML&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> project_name[</span><span style="color:#032F62;">&quot;project_name&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TimeoutError</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TimeoutError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Run time out&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 在pytest里，针对一个类方法的teardown为teardown_method,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># teardown_method作用同unittest里的dearDown()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">teardown_method</span><span style="color:#24292E;">(self, method):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.close()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.quit()</span></span></code></pre></div><h4 id="第二步-创建-page-类" tabindex="-1">第二步，创建 Page 类 <a class="header-anchor" href="#第二步-创建-page-类" aria-label="Permalink to &quot;第二步，创建 Page 类&quot;">​</a></h4><p>首先把跟页面有关的全部操作都放到 Page 类里，pages/ones.py 的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium.webdriver.common.by </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> By</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium.webdriver.support.ui </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> WebDriverWait</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium.webdriver.support </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> expected_conditions </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EC</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> page_objects </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> PageObject, PageElement</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cookie_to_selenium_format</span><span style="color:#E1E4E8;">(cookie):</span></span>
<span class="line"><span style="color:#E1E4E8;">    cookie_selenium_mapping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;secure&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;expires&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    cookie_dict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain_initial_dot&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict[</span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict[</span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(cookie_selenium_mapping.keys()):</span></span>
<span class="line"><span style="color:#E1E4E8;">        key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#E1E4E8;">        value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, k)</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cookie_dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OneAI</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">PageObject</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 使用page_objects库把元素locator， 元素定位，元素操作分离</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 元素定位的字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PROJECT_NAME_LOCATOR</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[class=&quot;company-title-text&quot;]&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NEW_PROJECT_LOCATOR</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.ones-btn.ones-btn-primary&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 元素定位</span></span>
<span class="line"><span style="color:#E1E4E8;">    new_project </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PageElement(</span><span style="color:#FFAB70;">css</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">NEW_PROJECT_LOCATOR</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 通过构造函数初始化浏览器driver，requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 通过api_login方法直接带登录态到达待测试页面开始测试</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.login_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://ones.ai/project/api/project/auth/login&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.header </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;user-agent&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;content-type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.api_login(login_credential, target_page)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 融合API测试和UI测试，并传递登录态到浏览器Driver供使用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">api_login</span><span style="color:#E1E4E8;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#E1E4E8;">        target_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.loads(json.dumps(target_page))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.post(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.login_url, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">json.dumps(login_credential), </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.header)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> result.status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> json.loads(result.text)[</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">].lower() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> login_credential[</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Login Failed, please check!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        all_cookies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.cookies._cookies[</span><span style="color:#9ECBFF;">&quot;.ones.ai&quot;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.get(target_url[</span><span style="color:#9ECBFF;">&quot;target_page&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.delete_all_cookies()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> all_cookies.items():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.add_cookie(cookie_to_selenium_format(v))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.get(target_url[</span><span style="color:#9ECBFF;">&quot;target_page&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 功能函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_project_name</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            project_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebDriverWait(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">).until(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">EC</span><span style="color:#E1E4E8;">.presence_of_element_located((By.</span><span style="color:#79B8FF;">CSS_SELECTOR</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">PROJECT_NAME_LOCATOR</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> project_name.get_attribute(</span><span style="color:#9ECBFF;">&quot;innerHTML&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TimeoutError</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TimeoutError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Run time out&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium.webdriver.common.by </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> By</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium.webdriver.support.ui </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> WebDriverWait</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium.webdriver.support </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> expected_conditions </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EC</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> page_objects </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> PageObject, PageElement</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cookie_to_selenium_format</span><span style="color:#24292E;">(cookie):</span></span>
<span class="line"><span style="color:#24292E;">    cookie_selenium_mapping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;secure&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;expires&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    cookie_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain_initial_dot&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict[</span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict[</span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(cookie_selenium_mapping.keys()):</span></span>
<span class="line"><span style="color:#24292E;">        key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k</span></span>
<span class="line"><span style="color:#24292E;">        value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, k)</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cookie_dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OneAI</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">PageObject</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 使用page_objects库把元素locator， 元素定位，元素操作分离</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 元素定位的字符串</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PROJECT_NAME_LOCATOR</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;[class=&quot;company-title-text&quot;]&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NEW_PROJECT_LOCATOR</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.ones-btn.ones-btn-primary&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 元素定位</span></span>
<span class="line"><span style="color:#24292E;">    new_project </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PageElement(</span><span style="color:#E36209;">css</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">NEW_PROJECT_LOCATOR</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 通过构造函数初始化浏览器driver，requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 通过api_login方法直接带登录态到达待测试页面开始测试</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.login_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://ones.ai/project/api/project/auth/login&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.header </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;user-agent&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;content-type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.api_login(login_credential, target_page)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 融合API测试和UI测试，并传递登录态到浏览器Driver供使用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">api_login</span><span style="color:#24292E;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#24292E;">        target_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.loads(json.dumps(target_page))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.post(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.login_url, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">json.dumps(login_credential), </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.header)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> result.status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> json.loads(result.text)[</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">].lower() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> login_credential[</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Login Failed, please check!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        all_cookies </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.cookies._cookies[</span><span style="color:#032F62;">&quot;.ones.ai&quot;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.get(target_url[</span><span style="color:#032F62;">&quot;target_page&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.delete_all_cookies()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> all_cookies.items():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.add_cookie(cookie_to_selenium_format(v))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.get(target_url[</span><span style="color:#032F62;">&quot;target_page&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 功能函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_project_name</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            project_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebDriverWait(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">).until(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">EC</span><span style="color:#24292E;">.presence_of_element_located((By.</span><span style="color:#005CC5;">CSS_SELECTOR</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">PROJECT_NAME_LOCATOR</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> project_name.get_attribute(</span><span style="color:#032F62;">&quot;innerHTML&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TimeoutError</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TimeoutError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Run time out&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>我们来看下这个 ones.py 文件：</p><ul><li><p>首先，我在其中定义了一个方法 cookie_to_selenium_format，这个方法是把通过 requests.Session() 拿到的 cookies 转换成 Selenium/WebDrvier 认可的格式，这个函数跟我们的 Page 类无关，所以我把它放在 Page 类外；</p></li><li><p>接着，我定义了 OneAI 这个 Page 类，并且按照 page_objects 这个库的推荐写法写了元素的定位。注意，我把元素的 Locator 本身，以及元素、元素操作都分离开了。这样当有任意一个修改时，都不影响另外两个；</p></li><li><p>然后我又写了类方法，一个是用于拿登录态直接通过浏览器访问页面的函数 api_login，还有一个就是获取 project_name 的文本的函数 get_project_name。</p></li></ul><p>至此，我的第一版 Page 类就创建完毕，<strong>但注意我这个 Page 类里是不包括测试的方法的。</strong></p><h4 id="第三步-更新-testpage-类" tabindex="-1">第三步， 更新 TestPage 类 <a class="header-anchor" href="#第三步-更新-testpage-类" aria-label="Permalink to &quot;第三步， 更新 TestPage 类&quot;">​</a></h4><p>Page 类创建好，我们就要创建 Page 类对应的测试类。更改 tests 文件夹下的 test_ones.py 文件，更改后的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pages.ones </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> OneAI</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestOneAI</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 注意，需要email和密码需要更改成你自己的账户密码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;login_data, project_name, target_page&#39;</span><span style="color:#E1E4E8;">, [({</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTestingIsGood&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;pleasefollowiTesting@outlook.com&quot;</span><span style="color:#E1E4E8;">}, {</span><span style="color:#9ECBFF;">&quot;project_name&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;VIPTEST&quot;</span><span style="color:#E1E4E8;">}, {</span><span style="color:#9ECBFF;">&quot;target_page&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;https://ones.ai/project/#/home/project&quot;</span><span style="color:#E1E4E8;">})])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_project_name_txt</span><span style="color:#E1E4E8;">(self, login_data, project_name, target_page):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(login_data)</span></span>
<span class="line"><span style="color:#E1E4E8;">        one_page </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> OneAI(login_data, target_page)</span></span>
<span class="line"><span style="color:#E1E4E8;">        actual_project_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> one_page.get_project_name()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> actual_project_name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> project_name[</span><span style="color:#9ECBFF;">&quot;project_name&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pages.ones </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> OneAI</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestOneAI</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 注意，需要email和密码需要更改成你自己的账户密码</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;login_data, project_name, target_page&#39;</span><span style="color:#24292E;">, [({</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTestingIsGood&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;pleasefollowiTesting@outlook.com&quot;</span><span style="color:#24292E;">}, {</span><span style="color:#032F62;">&quot;project_name&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;VIPTEST&quot;</span><span style="color:#24292E;">}, {</span><span style="color:#032F62;">&quot;target_page&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;https://ones.ai/project/#/home/project&quot;</span><span style="color:#24292E;">})])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_project_name_txt</span><span style="color:#24292E;">(self, login_data, project_name, target_page):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(login_data)</span></span>
<span class="line"><span style="color:#24292E;">        one_page </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> OneAI(login_data, target_page)</span></span>
<span class="line"><span style="color:#24292E;">        actual_project_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> one_page.get_project_name()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> actual_project_name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> project_name[</span><span style="color:#032F62;">&quot;project_name&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>你可以看到，这个测试类就变得非常简洁。它只包括一个测试方法，即 test_project_name_txt。这个函数用来测试我们拿到的 project name 是不是等于我们提供的那个值，即 VIPTEST。</p><p><strong>你需要注意，在测试类中，应该仅仅包括对 Page 类的各种方法的调用，而不能在测试类中直接去操作测试类对象生成新的功能。</strong></p><p>我们在命令行运行下，输入以下命令：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests/test_ones.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests/test_ones.py</span></span></code></pre></div><p>测试运行结束后，查看运行结果如下：</p>`,35),g=p(`<p>至此，Page 类和 TestPage 类的解耦已经完成。</p><h4 id="第四步-提炼-basepage-类" tabindex="-1">第四步， 提炼 BasePage 类 <a class="header-anchor" href="#第四步-提炼-basepage-类" aria-label="Permalink to &quot;第四步， 提炼 BasePage 类&quot;">​</a></h4><p>至此，PageObject 模式我们已经应用到我们的项目中了，不过你发现没有，我们的 Page 类里还有很多可以优化的地方，比如 cookie_to_selenium_format 这个方法，它不属于某一个具体的 Page 类，但又可以被多个 Page 类调用。</p><p>再比如，初始化浏览器 Driver 的代码，和初始化 requests.Session() 的代码也不属于某一个具体的 Page，但是我们把它放入了 Page 里，所以，我们继续优化，在 pages 文件夹下创建 base_page 类，把跟 page 无关的操作都提炼出来。</p><p>pages/base_page.py 文件的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> page_objects </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> PageObject, PageElement</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cookie_to_selenium_format</span><span style="color:#E1E4E8;">(cookie):</span></span>
<span class="line"><span style="color:#E1E4E8;">    cookie_selenium_mapping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;secure&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;expires&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    cookie_dict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain_initial_dot&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict[</span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict[</span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(cookie_selenium_mapping.keys()):</span></span>
<span class="line"><span style="color:#E1E4E8;">        key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#E1E4E8;">        value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, k)</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cookie_dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BasePage</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">PageObject</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.login_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://ones.ai/project/api/project/auth/login&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.header </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;user-agent&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;content-type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">._api_login(login_credential, target_page)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_api_login</span><span style="color:#E1E4E8;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#E1E4E8;">        target_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.loads(json.dumps(target_page))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.post(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.login_url, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">json.dumps(login_credential), </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.header)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> result.status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> json.loads(result.text)[</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">].lower() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> login_credential[</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Login Failed, please check!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        all_cookies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.cookies._cookies[</span><span style="color:#9ECBFF;">&quot;.ones.ai&quot;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.get(target_url[</span><span style="color:#9ECBFF;">&quot;target_page&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.delete_all_cookies()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> all_cookies.items():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.add_cookie(cookie_to_selenium_format(v))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.get(target_url[</span><span style="color:#9ECBFF;">&quot;target_page&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> page_objects </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> PageObject, PageElement</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cookie_to_selenium_format</span><span style="color:#24292E;">(cookie):</span></span>
<span class="line"><span style="color:#24292E;">    cookie_selenium_mapping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;secure&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;expires&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    cookie_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain_initial_dot&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict[</span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict[</span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(cookie_selenium_mapping.keys()):</span></span>
<span class="line"><span style="color:#24292E;">        key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k</span></span>
<span class="line"><span style="color:#24292E;">        value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, k)</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cookie_dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BasePage</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">PageObject</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.login_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://ones.ai/project/api/project/auth/login&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.header </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;user-agent&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;content-type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._api_login(login_credential, target_page)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_api_login</span><span style="color:#24292E;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#24292E;">        target_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.loads(json.dumps(target_page))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.post(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.login_url, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">json.dumps(login_credential), </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.header)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> result.status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> json.loads(result.text)[</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">].lower() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> login_credential[</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Login Failed, please check!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        all_cookies </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.cookies._cookies[</span><span style="color:#032F62;">&quot;.ones.ai&quot;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.get(target_url[</span><span style="color:#032F62;">&quot;target_page&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.delete_all_cookies()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> all_cookies.items():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.add_cookie(cookie_to_selenium_format(v))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.get(target_url[</span><span style="color:#032F62;">&quot;target_page&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span></code></pre></div><p>在 BasePage 这个类里，我把跟具体的某一个 page 的操作都剔除掉，仅仅留下共用的部分，比如初始化浏览器 driver、初始化 requests.Session()，然后我把用于登录后传递登录态的方法 api_login 改成一个类保护方法_api_login（即只允许 BasePage 的类实例和它的子类实例能访问_api_login 方法）。</p><p>这个时候，我们的 pages 文件夹下的 ones.py 也要做相应更改，更新后的 pages/ones.py 的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium.webdriver.common.by </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> By</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium.webdriver.support.ui </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> WebDriverWait</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium.webdriver.support </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> expected_conditions </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">EC</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> page_objects </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> PageObject, PageElement</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> pages.base_page </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BasePage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OneAI</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">BasePage</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PROJECT_NAME_LOCATOR</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[class=&quot;company-title-text&quot;]&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">NEW_PROJECT_LOCATOR</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.ones-btn.ones-btn-primary&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    new_project </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PageElement(</span><span style="color:#FFAB70;">css</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">NEW_PROJECT_LOCATOR</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(login_credential, target_page)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_project_name</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            project_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> WebDriverWait(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">).until(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">EC</span><span style="color:#E1E4E8;">.presence_of_element_located((By.</span><span style="color:#79B8FF;">CSS_SELECTOR</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">PROJECT_NAME_LOCATOR</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> project_name.get_attribute(</span><span style="color:#9ECBFF;">&quot;innerHTML&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TimeoutError</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TimeoutError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Run time out&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium.webdriver.common.by </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> By</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium.webdriver.support.ui </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> WebDriverWait</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium.webdriver.support </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> expected_conditions </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">EC</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> page_objects </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> PageObject, PageElement</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pages.base_page </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BasePage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OneAI</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BasePage</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PROJECT_NAME_LOCATOR</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;[class=&quot;company-title-text&quot;]&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">NEW_PROJECT_LOCATOR</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.ones-btn.ones-btn-primary&#39;</span></span>
<span class="line"><span style="color:#24292E;">    new_project </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PageElement(</span><span style="color:#E36209;">css</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">NEW_PROJECT_LOCATOR</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(login_credential, target_page)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_project_name</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            project_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WebDriverWait(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">).until(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">EC</span><span style="color:#24292E;">.presence_of_element_located((By.</span><span style="color:#005CC5;">CSS_SELECTOR</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">PROJECT_NAME_LOCATOR</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> project_name.get_attribute(</span><span style="color:#032F62;">&quot;innerHTML&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TimeoutError</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TimeoutError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Run time out&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>可以看到。我们的 Page 类进一步简化，只包括 Page 本身的元素、对象和操作，而不包括其他的部分，比如对浏览器 Driver 的初始化、对 requests.Session() 的初始化、登录等操作了。</p><p>这个时候再回到《02 | 反复践行的 13 条自动化测试框架设计原则》里最初提问的那个问题，当你有了新的项目，你老板会说：&quot;你不是有框架吗？快上个自动化&quot;，这个时候你要怎么回答？</p><p>学习了 Page Object 模型后的你这时候是不是可以一边心里窃喜，一边脸上还要装作工作量很大很为难的样子，说&quot;好的老板我尽量这周给到&quot;。</p><p>实际上，你只要把 Pages 和 Tests 这两个文件夹下的文件删除，换成你新项目的文件就好了。所以，你说 Page Object 模型好不好啊？根据《02 | 反复践行的 13 条自动化测试框架设计原则》的指导来设计测试框架，是不是事半功倍啊！</p><h4 id="第五步-打造通用性测试框架" tabindex="-1">第五步， 打造通用性测试框架 <a class="header-anchor" href="#第五步-打造通用性测试框架" aria-label="Permalink to &quot;第五步， 打造通用性测试框架&quot;">​</a></h4><p>好了，本节课到现在，我们已经把 PageObject 模式的应用全部掌握了。现在来看看我们的框架，你觉得还有改进的空间吗？</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">pages</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">base_page.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">pages</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">base_page.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span></code></pre></div><p>当然有改进空间了， 再看看 base_page.py 这个文件。既然是 base_page，那么只应该跟 page 有关系，可是我们把初始化浏览器 driver、初始化 requests.Session() 这样的操作也放进去了，是不是不太合理？还有万一以后的浏览器测试不用 Selenium/WebDriver 了呢？</p><blockquote><p>我个人估计这个进程会很快，现在前端自动化这边 Cypress 发展迅猛，而且上手非常简单。一个人通过简单学习很快就能通过 Cypress 来搭建基于持续集成的自动化测试框架。关于 Cypress，你可以参考我的新书《前端自动化测试框架 Cypress 从入门到精通》。</p></blockquote><p>那么假设以后我们的浏览器测试不用Selenium/webDriver了，还有，万一有比 requests 更好用的HTTP库了呢？所以，有必要进一步拆分。</p><p>于是，我们的框架结构就变成如下的样子：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">pages</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">base_page.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">selenium_helper.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">requests_helper.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">pages</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">base_page.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">selenium_helper.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">requests_helper.py</span></span></code></pre></div><p>把 BasePage 这个类里的关于 Selenium/WebDriver 和 Requests 的操作分别拆分到 selenium_helper.py 里和 requests_helper.py 里去。</p><p>selenium_helper.py 的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__author__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;kevin&#39;</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SeleniumHelper</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@</span><span style="color:#79B8FF;">staticmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initial_driver</span><span style="color:#E1E4E8;">(browser_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;chrome&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        browser_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> browser_name.lower()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> browser_name </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;chrome&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;firefox&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ff&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ie&#39;</span><span style="color:#E1E4E8;">}:</span></span>
<span class="line"><span style="color:#E1E4E8;">            browser_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;chrome&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> browser_name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;chrome&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            browser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> browser_name </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;firefox&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ff&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            browser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webdriver.Firefox()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> browser_name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ie&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            webdriver.Ie()</span></span>
<span class="line"><span style="color:#E1E4E8;">        browser.maximize_window()</span></span>
<span class="line"><span style="color:#E1E4E8;">        browser.implicitly_wait(</span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> browser</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@</span><span style="color:#79B8FF;">staticmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cookie_to_selenium_format</span><span style="color:#E1E4E8;">(cookie):</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_selenium_mapping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;secure&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;expires&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie_dict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain_initial_dot&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            cookie_dict[</span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            cookie_dict[</span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, </span><span style="color:#9ECBFF;">&#39;domain&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(cookie_selenium_mapping.keys()):</span></span>
<span class="line"><span style="color:#E1E4E8;">            key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> k</span></span>
<span class="line"><span style="color:#E1E4E8;">            value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getattr</span><span style="color:#E1E4E8;">(cookie, k)</span></span>
<span class="line"><span style="color:#E1E4E8;">            cookie_dict[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cookie_dict</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__author__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;kevin&#39;</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SeleniumHelper</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">staticmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initial_driver</span><span style="color:#24292E;">(browser_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;chrome&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        browser_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> browser_name.lower()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> browser_name </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;chrome&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;firefox&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ff&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ie&#39;</span><span style="color:#24292E;">}:</span></span>
<span class="line"><span style="color:#24292E;">            browser_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;chrome&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> browser_name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;chrome&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            browser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Chrome()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> browser_name </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;firefox&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ff&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            browser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webdriver.Firefox()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> browser_name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ie&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            webdriver.Ie()</span></span>
<span class="line"><span style="color:#24292E;">        browser.maximize_window()</span></span>
<span class="line"><span style="color:#24292E;">        browser.implicitly_wait(</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> browser</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">staticmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cookie_to_selenium_format</span><span style="color:#24292E;">(cookie):</span></span>
<span class="line"><span style="color:#24292E;">        cookie_selenium_mapping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;secure&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;expires&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        cookie_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain_initial_dot&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            cookie_dict[</span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            cookie_dict[</span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, </span><span style="color:#032F62;">&#39;domain&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(cookie_selenium_mapping.keys()):</span></span>
<span class="line"><span style="color:#24292E;">            key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k</span></span>
<span class="line"><span style="color:#24292E;">            value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getattr</span><span style="color:#24292E;">(cookie, k)</span></span>
<span class="line"><span style="color:#24292E;">            cookie_dict[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cookie_dict</span></span></code></pre></div><p>selenium_helper.py 里包括了所有针对 Selenium 的操作，以后针对浏览器的各种操作全部都放在这个文件。</p><p>requests_helper.py 里的代码，更新后如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> traceback</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> requests.packages.urllib3.exceptions </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> InsecureRequestWarning</span></span>
<span class="line"><span style="color:#6A737D;"># Disable https security warning</span></span>
<span class="line"><span style="color:#E1E4E8;">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SharedAPI</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.session()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.login_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://ones.ai/project/api/project/auth/login&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.header </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;user-agent&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;content-type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(self, login_credential):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.post(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.login_url, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">json.dumps(login_credential), </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.header, </span><span style="color:#FFAB70;">verify</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">(result.status_code) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">pass</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;login failed&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RuntimeError</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            traceback.print_exc()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">post_api</span><span style="color:#E1E4E8;">(self, url, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.post(url, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_api</span><span style="color:#E1E4E8;">(self, url, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.get(url, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> traceback</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> requests.packages.urllib3.exceptions </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> InsecureRequestWarning</span></span>
<span class="line"><span style="color:#6A737D;"># Disable https security warning</span></span>
<span class="line"><span style="color:#24292E;">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SharedAPI</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.session()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.login_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://ones.ai/project/api/project/auth/login&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.header </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;user-agent&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;content-type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(self, login_credential):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.post(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.login_url, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">json.dumps(login_credential), </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.header, </span><span style="color:#E36209;">verify</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(result.status_code) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;login failed&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RuntimeError</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            traceback.print_exc()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">post_api</span><span style="color:#24292E;">(self, url, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.post(url, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_api</span><span style="color:#24292E;">(self, url, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.get(url, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span></code></pre></div><p>requests_helper.py 里包括所有对 requests 这个库的操作。</p><p>最后，我们还需要更新下 base_page.py，base_page.py 更新后，内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> traceback</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> selenium </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> webdriver</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> page_objects </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> PageObject, PageElement</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> common.requests_helper </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> SharedAPI</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> common.selenium_helper </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> SeleniumHelper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BasePage</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">PageObject</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.api_driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SharedAPI()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.loginResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.api_driver.login(login_credential)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SeleniumHelper.initial_driver()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">._api_login(login_credential, target_page)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_api_login</span><span style="color:#E1E4E8;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#E1E4E8;">        target_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.loads(json.dumps(target_page))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> json.loads(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.loginResult.text)[</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">].lower() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> login_credential[</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        all_cookies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.loginResult.cookies._cookies[</span><span style="color:#9ECBFF;">&quot;.ones.ai&quot;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.get(target_url[</span><span style="color:#9ECBFF;">&quot;target_page&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.delete_all_cookies()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> all_cookies.items():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.add_cookie(SeleniumHelper.cookie_to_selenium_format(v))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver.get(target_url[</span><span style="color:#9ECBFF;">&quot;target_page&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.driver</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> traceback</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> selenium </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> webdriver</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> page_objects </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> PageObject, PageElement</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> common.requests_helper </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> SharedAPI</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> common.selenium_helper </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> SeleniumHelper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BasePage</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">PageObject</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.api_driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SharedAPI()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.loginResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.api_driver.login(login_credential)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SeleniumHelper.initial_driver()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._api_login(login_credential, target_page)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_api_login</span><span style="color:#24292E;">(self, login_credential, target_page):</span></span>
<span class="line"><span style="color:#24292E;">        target_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.loads(json.dumps(target_page))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> json.loads(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.loginResult.text)[</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">].lower() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> login_credential[</span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        all_cookies </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.loginResult.cookies._cookies[</span><span style="color:#032F62;">&quot;.ones.ai&quot;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.get(target_url[</span><span style="color:#032F62;">&quot;target_page&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.delete_all_cookies()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> all_cookies.items():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.add_cookie(SeleniumHelper.cookie_to_selenium_format(v))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver.get(target_url[</span><span style="color:#032F62;">&quot;target_page&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.driver</span></span></code></pre></div><p>可以看到，在更新后的 base_page.py 里，我们初始化 requests.Session() 和浏览器的 Driver 的方式是通过调用 SharedAPI 和 SeleniumHelper 这两个类。然后 BasePage 这个类里现在只包括各个 Page 类可以共用的函数，而不再包括无关的操作。</p><p>其他文件无须更改。</p><p>通过如下命令运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest&gt;pytest --alluredir=./allure_reports</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest&gt;pytest --alluredir=./allure_reports</span></span></code></pre></div><p>然后使用命令行进入到你的项目根目录下，执行如下语句：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest&gt;allure serve allure_reports</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest&gt;allure serve allure_reports</span></span></code></pre></div><p>接着你的默认浏览器会自动打开测试报告，看下运行结果：</p>`,37),d=p(`<p>好的，大功告成。</p><p>你发现没有，通过这个方式，我们就把自动化测试框架进行了框架代码和业务代码的剥离。此后我们的框架不仅看起来结构清晰，而且也变得跟业务松耦合。当你需要在新项目应用自动化的时候，仅仅把 pages 和 tests 这两个文件夹更换，便能够一&quot;秒&quot;搭建新的测试框架。</p><p>我们的《测试开发入门与实战》课程，直到这里才有了一点点测试开发的味道。迄今为止， 我们通过学习，已经能够搭建一套融合 API 测试和 UI 测试，并且具备现代测试框架雏形的框架。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本节课我主要讲解了 PageObject 模式，PageObject 模式是自动化测试里的一个经典设计模式。通过 PageObject 我们可以实现元素定位、元素、元素操作的分离，从而让自己的自动化测试框架更加具备可重用性。</p><p>在实现 PageObject 的同时，我主要通过展现思维的方式，向你一步步讲解如何把一个什么都耦合在一起的测试框架，一点点地剥离开。</p><p>在练习本节课的过程中，我希望你不仅仅是 copy 下代码执行，我希望你能多关注我在这一课时&quot;<strong>项目实战------PageObject 应用&quot;这一小节</strong>中展示出来的思维过程，并在以后的学习中，刻意锻炼自己这种发现问题---解决问题的能力。</p><p>唯有此，你才能在测试开发的道路上越走越远。</p><p><strong>好了，本节课最后给大家布置一个课后作业：按照本节课所讲，把我们第 7、8 课时&quot;你的第一个 Web 测试框架&quot;学习的两个测试文件 test_baidu.py 和 test_lagou.py 应用至 PageObject 模型中。</strong></p><p>最后，你会发现我们的项目就会从下面这个样子：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">pages</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">base_page.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">selenium_helper.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">requests_helper.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">pages</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">base_page.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">selenium_helper.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">requests_helper.py</span></span></code></pre></div><p>变成：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">pages</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">lagou.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">base_page.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_ones.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">test_lagou.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">selenium_helper.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|</span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">requests_helper.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">pages</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lagou.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">base_page.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_ones.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">test_lagou.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">selenium_helper.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|</span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">requests_helper.py</span></span></code></pre></div><p>好的，本节课就到这里，也别忘完成课后作业哦～</p><p>我是蔡超，我们下节课再见，下节课我将带你走入数据驱动的世界。</p><p>更多关于测试框架的知识，请关注测试公众号 iTesting， 并回复 &quot;测试框架&quot;查看。</p><hr><p><a href="https://wj.qq.com/s2/7506053/9b01" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品～</a></p>`,18);function m(C,A,D,B,f,h){const a=e("Image");return t(),c("div",null,[E,y,i,F,l(a,{alt:"Lark20201019-184959.png",src:"https://s0.lgstatic.com/i/image/M00/60/81/Ciqc1F-NcGWAZc7WAAUL4728Z-8331.png"}),s(),u,l(a,{alt:"Lark20201019-185002.png",src:"https://s0.lgstatic.com/i/image/M00/60/8D/CgqCHl-NcHKALdY4AAFp3jzWIEU818.png"}),s(),_,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/60/82/Ciqc1F-NcJuAfRgwAAC13CMIBCs725.png"}),s(),g,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/60/82/Ciqc1F-NcfmAFQfWAABpixBpo-E991.png"}),s(),d])}const b=o(r,[["render",m]]);export{k as __pageData,b as default};
