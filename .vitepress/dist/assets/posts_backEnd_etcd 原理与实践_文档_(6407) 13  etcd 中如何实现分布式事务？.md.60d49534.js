import{_ as o,j as e,o as t,g as c,k as p,h as s,Q as l,s as n}from"./chunks/framework.4e7d56ce.js";const h=JSON.parse('{"title":"13etcd中如何实现分布式事务？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6407) 13  etcd 中如何实现分布式事务？.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6407) 13  etcd 中如何实现分布式事务？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/etcd 原理与实践_文档/(6407) 13  etcd 中如何实现分布式事务？.md"},E=l('<h1 id="_13etcd中如何实现分布式事务" tabindex="-1">13etcd中如何实现分布式事务？ <a class="header-anchor" href="#_13etcd中如何实现分布式事务" aria-label="Permalink to &quot;13etcd中如何实现分布式事务？&quot;">​</a></h1><p>我们在前面几讲介绍了 etcd 存储、etcd-raft 模块以及 MVCC 多版本控制实现的原理。今天我们继续介绍 etcd 中事务的实现。</p><p>在业务场景中，一般我们希望无论在什么样的故障场景下，一组操作要么同时完成，要么都失败。etcd 就实现了<strong>在一个事务中，原子地执行冲突检查、更新多个 keys 的值</strong>。除此之外，etcd 将底层 MVCC 机制的版本信息暴露出来，根据版本信息封装出了一套基于乐观锁的事务框架 STM，并实现了不同的隔离级别。</p><p>这一讲我们就来详细了解 etcd 事务的概念、基本使用和 STM 事务的隔离级别。</p><h3 id="什么是事务" tabindex="-1">什么是事务？ <a class="header-anchor" href="#什么是事务" aria-label="Permalink to &quot;什么是事务？&quot;">​</a></h3><p>事务通常是指数据库事务。事务具有 ACID 特性，即<strong>原子性、一致性、隔离性和持久性</strong>。</p><ul><li><p>原子性（Atomicity）：事务作为一个整体被执行，其包含的对数据库的操作要么全部被执行，要么都不执行。</p></li><li><p>一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。</p></li><li><p>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</p></li><li><p>持久性（Durability）：一个事务一旦提交，它对数据库的修改应该永久保存在数据库中。</p></li></ul><p>常见的关系型数据库如 MySQL ，其 InnoDB 事务的实现基于锁实现数据库事务。事务操作执行时，需要获取对应数据库记录的锁，才能进行操作；如果发生冲突，事务会阻塞，甚至会出现死锁。在整个事务执行的过程中，客户端与 MySQL 多次交互，MySQL 为客户端维护事务所需的资源，直至事务提交。而 etcd 中的事务实现则是基于<strong>CAS</strong>（Compare and Swap，即比较并交换） 方式。</p><p>etcd 使用了不到四百行的代码实现了迷你事务，其对应的语法为<code>If-Then-Else</code>。<strong>etcd 允许用户在一次修改中批量执行多个操作</strong>，即这一组操作被绑定成一个原子操作，并共享同一个修订号。其写法类似 CAS，如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Txn</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">If</span><span style="color:#E1E4E8;">(cond1, cond2, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">Then</span><span style="color:#E1E4E8;">(op1, op2, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,).</span><span style="color:#79B8FF;">Else</span><span style="color:#E1E4E8;">(op1, op2)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Txn</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">If</span><span style="color:#24292E;">(cond1, cond2, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">Then</span><span style="color:#24292E;">(op1, op2, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">,).</span><span style="color:#005CC5;">Else</span><span style="color:#24292E;">(op1, op2)</span></span></code></pre></div><p>根据上面的实现，其实很好理解事务实现的逻辑。如果 If 冲突判断语句为真，对应返回值为 true，Then 中的语句将会被执行，否则执行 Else 中的逻辑。</p><p>在 etcd 事务执行过程中，客户端与 etcd 服务端之间没有维护事务会话。冲突判断及其执行过程作为一个原子过程来执行，因此 <strong>etcd 事务不会发生阻塞</strong>，无论事务执行成功还是失败都会返回。当发生冲突导致执行失败时，需要应用进行重试，业务代码需要考虑这部分的重试逻辑。</p><h3 id="etcd-事务的使用示例" tabindex="-1">etcd 事务的使用示例 <a class="header-anchor" href="#etcd-事务的使用示例" aria-label="Permalink to &quot;etcd 事务的使用示例&quot;">​</a></h3><p>我们来演示一个转账的过程，发送者向接收者发起转账事务。etcd 的事务基于乐观锁检测冲突并重试，检测冲突时使用了<strong>ModRevision</strong>进行校验，该字段表示某个 key 上一次被更改时，全局的版本是多少。因此，我们实现转账业务的流程如下所示：</p>',14),y=l(`<p>在 etcd 中的实现代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">txnTransfer</span><span style="color:#E1E4E8;">(etcd </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.Client, sender, receiver </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, amount </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 失败重试</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ok, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">doTxn</span><span style="color:#E1E4E8;">(etcd, sender, receiver, amount); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doTxn</span><span style="color:#E1E4E8;">(etcd </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.Client, sender, receiver </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, amount </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 第一个事务，利用事务的原子性，同时获取发送和接收者的余额以及 ModRevision</span></span>
<span class="line"><span style="color:#E1E4E8;">	getresp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcd.</span><span style="color:#79B8FF;">Txn</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">()).</span><span style="color:#79B8FF;">Then</span><span style="color:#E1E4E8;">(v3.</span><span style="color:#79B8FF;">OpGet</span><span style="color:#E1E4E8;">(sender), v3.</span><span style="color:#79B8FF;">OpGet</span><span style="color:#E1E4E8;">(receiver)).</span><span style="color:#79B8FF;">Commit</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	senderKV </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> getresp.Responses[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">GetResponseRange</span><span style="color:#E1E4E8;">().Kvs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	receiverKV </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> getresp.Responses[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">GetResponseRange</span><span style="color:#E1E4E8;">().Kvs[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	senderNum, receiverNum </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">toUInt64</span><span style="color:#E1E4E8;">(senderKV.Value), </span><span style="color:#79B8FF;">toUInt64</span><span style="color:#E1E4E8;">(receiverKV.Value)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 验证账户余额是否充足</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> senderNum </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> amount {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;资金不足&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 发起转账事务，冲突判断 ModRevision 是否发生变化</span></span>
<span class="line"><span style="color:#E1E4E8;">	txn </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> etcd.</span><span style="color:#79B8FF;">Txn</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">()).</span><span style="color:#79B8FF;">If</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		v3.</span><span style="color:#79B8FF;">Compare</span><span style="color:#E1E4E8;">(v3.</span><span style="color:#79B8FF;">ModRevision</span><span style="color:#E1E4E8;">(sender), </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, senderKV.ModRevision),</span></span>
<span class="line"><span style="color:#E1E4E8;">		v3.</span><span style="color:#79B8FF;">Compare</span><span style="color:#E1E4E8;">(v3.</span><span style="color:#79B8FF;">ModRevision</span><span style="color:#E1E4E8;">(receiver), </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, receiverKV.ModRevision))</span></span>
<span class="line"><span style="color:#E1E4E8;">	txn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> txn.</span><span style="color:#79B8FF;">Then</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		v3.</span><span style="color:#79B8FF;">OpPut</span><span style="color:#E1E4E8;">(sender, </span><span style="color:#79B8FF;">fromUint64</span><span style="color:#E1E4E8;">(senderNum</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">amount)), </span><span style="color:#6A737D;">// 更新发送者账户余额</span></span>
<span class="line"><span style="color:#E1E4E8;">		v3.</span><span style="color:#79B8FF;">OpPut</span><span style="color:#E1E4E8;">(receiver, </span><span style="color:#79B8FF;">fromUint64</span><span style="color:#E1E4E8;">(receiverNum</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">amount))) </span><span style="color:#6A737D;">// 更新接收者账户余额</span></span>
<span class="line"><span style="color:#E1E4E8;">    resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> txn.</span><span style="color:#79B8FF;">Commit</span><span style="color:#E1E4E8;">()         </span><span style="color:#6A737D;">// 提交事务</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resp.Succeeded, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">txnTransfer</span><span style="color:#24292E;">(etcd </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.Client, sender, receiver </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, amount </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 失败重试</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ok, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">doTxn</span><span style="color:#24292E;">(etcd, sender, receiver, amount); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ok {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doTxn</span><span style="color:#24292E;">(etcd </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.Client, sender, receiver </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, amount </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 第一个事务，利用事务的原子性，同时获取发送和接收者的余额以及 ModRevision</span></span>
<span class="line"><span style="color:#24292E;">	getresp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcd.</span><span style="color:#005CC5;">Txn</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">()).</span><span style="color:#005CC5;">Then</span><span style="color:#24292E;">(v3.</span><span style="color:#005CC5;">OpGet</span><span style="color:#24292E;">(sender), v3.</span><span style="color:#005CC5;">OpGet</span><span style="color:#24292E;">(receiver)).</span><span style="color:#005CC5;">Commit</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	senderKV </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> getresp.Responses[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">GetResponseRange</span><span style="color:#24292E;">().Kvs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">	receiverKV </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> getresp.Responses[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">GetResponseRange</span><span style="color:#24292E;">().Kvs[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">	senderNum, receiverNum </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">toUInt64</span><span style="color:#24292E;">(senderKV.Value), </span><span style="color:#005CC5;">toUInt64</span><span style="color:#24292E;">(receiverKV.Value)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 验证账户余额是否充足</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> senderNum </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> amount {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;资金不足&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 发起转账事务，冲突判断 ModRevision 是否发生变化</span></span>
<span class="line"><span style="color:#24292E;">	txn </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> etcd.</span><span style="color:#005CC5;">Txn</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">()).</span><span style="color:#005CC5;">If</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">		v3.</span><span style="color:#005CC5;">Compare</span><span style="color:#24292E;">(v3.</span><span style="color:#005CC5;">ModRevision</span><span style="color:#24292E;">(sender), </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, senderKV.ModRevision),</span></span>
<span class="line"><span style="color:#24292E;">		v3.</span><span style="color:#005CC5;">Compare</span><span style="color:#24292E;">(v3.</span><span style="color:#005CC5;">ModRevision</span><span style="color:#24292E;">(receiver), </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, receiverKV.ModRevision))</span></span>
<span class="line"><span style="color:#24292E;">	txn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> txn.</span><span style="color:#005CC5;">Then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">		v3.</span><span style="color:#005CC5;">OpPut</span><span style="color:#24292E;">(sender, </span><span style="color:#005CC5;">fromUint64</span><span style="color:#24292E;">(senderNum</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">amount)), </span><span style="color:#6A737D;">// 更新发送者账户余额</span></span>
<span class="line"><span style="color:#24292E;">		v3.</span><span style="color:#005CC5;">OpPut</span><span style="color:#24292E;">(receiver, </span><span style="color:#005CC5;">fromUint64</span><span style="color:#24292E;">(receiverNum</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">amount))) </span><span style="color:#6A737D;">// 更新接收者账户余额</span></span>
<span class="line"><span style="color:#24292E;">    resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> txn.</span><span style="color:#005CC5;">Commit</span><span style="color:#24292E;">()         </span><span style="color:#6A737D;">// 提交事务</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resp.Succeeded, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>etcd 事务的实现基于乐观锁，涉及两次事务操作，第一次事务利用<strong>原子性</strong> 同时获取发送方和接收方的当前账户金额。第二次事务发起转账操作，<strong>冲突检测 ModRevision 是否发生变化</strong>，如果没有变化则正常提交事务；若发生了冲突，则需要进行重试。</p><p>上述过程的实现较为烦琐，除了业务逻辑，还有大量的代码用来判断冲突以及重试。因此，etcd 社区基于事务特性，<strong>实现了一个简单的事务框架 STM，</strong> 构建了多种事务隔离级别，下面我们看看如何基于 STM 框架实现 etcd 事务。</p><h3 id="使用-stm-实现转账" tabindex="-1">使用 STM 实现转账 <a class="header-anchor" href="#使用-stm-实现转账" aria-label="Permalink to &quot;使用 STM 实现转账&quot;">​</a></h3><p>为了简化 etcd 事务实现的过程，etcd clientv3 提供了 STM（Software Transactional Memory，软件事务内存），帮助我们自动处理这些烦琐的过程。使用 STM 优化之后的转账业务代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">txnStmTransfer</span><span style="color:#E1E4E8;">(cli </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.Client, from, to </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, amount </span><span style="color:#F97583;">uint</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// NewSTM 创建了一个原子事务的上下文，业务代码作为一个函数传进去</span></span>
<span class="line"><span style="color:#E1E4E8;">	_, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> concurrency.</span><span style="color:#79B8FF;">NewSTM</span><span style="color:#E1E4E8;">(cli, </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(stm concurrency.STM) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// stm.Get 封装了事务的读操作</span></span>
<span class="line"><span style="color:#E1E4E8;">		senderNum </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">toUint64</span><span style="color:#E1E4E8;">(stm.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(from))</span></span>
<span class="line"><span style="color:#E1E4E8;">		receiverNum </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">toUint64</span><span style="color:#E1E4E8;">(stm.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(to))</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> senderNum </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> amount {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;余额不足&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 事务的写操作</span></span>
<span class="line"><span style="color:#E1E4E8;">		stm.</span><span style="color:#79B8FF;">Put</span><span style="color:#E1E4E8;">(to, </span><span style="color:#79B8FF;">fromUint64</span><span style="color:#E1E4E8;">(receiverNum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> amount))</span></span>
<span class="line"><span style="color:#E1E4E8;">		stm.</span><span style="color:#79B8FF;">Put</span><span style="color:#E1E4E8;">(from, </span><span style="color:#79B8FF;">fromUint64</span><span style="color:#E1E4E8;">(senderNum </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> amount))</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">txnStmTransfer</span><span style="color:#24292E;">(cli </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.Client, from, to </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, amount </span><span style="color:#D73A49;">uint</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// NewSTM 创建了一个原子事务的上下文，业务代码作为一个函数传进去</span></span>
<span class="line"><span style="color:#24292E;">	_, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> concurrency.</span><span style="color:#005CC5;">NewSTM</span><span style="color:#24292E;">(cli, </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(stm concurrency.STM) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// stm.Get 封装了事务的读操作</span></span>
<span class="line"><span style="color:#24292E;">		senderNum </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">toUint64</span><span style="color:#24292E;">(stm.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(from))</span></span>
<span class="line"><span style="color:#24292E;">		receiverNum </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">toUint64</span><span style="color:#24292E;">(stm.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(to))</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> senderNum </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> amount {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;余额不足&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 事务的写操作</span></span>
<span class="line"><span style="color:#24292E;">		stm.</span><span style="color:#005CC5;">Put</span><span style="color:#24292E;">(to, </span><span style="color:#005CC5;">fromUint64</span><span style="color:#24292E;">(receiverNum </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> amount))</span></span>
<span class="line"><span style="color:#24292E;">		stm.</span><span style="color:#005CC5;">Put</span><span style="color:#24292E;">(from, </span><span style="color:#005CC5;">fromUint64</span><span style="color:#24292E;">(senderNum </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> amount))</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述操作基于 STM 实现了转账业务流程，我们只需要关注转账逻辑的实现即可，事务相关的其他操作由 STM 完成。</p><h3 id="stm-实现细节" tabindex="-1">STM 实现细节 <a class="header-anchor" href="#stm-实现细节" aria-label="Permalink to &quot;STM 实现细节&quot;">​</a></h3><p>下面我们来看 STM 的实现原理。通过上面转账的例子，我们可以看到 STM 的使用特别简单，只需<strong>把业务相关的代码封装成可重入的函数传给 stm，而 STM 可自行处理事务相关的细节</strong>。</p><p>concurrency.STM 是一个接口，提供了对某个 key 的 CURD 操作：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 clientv3/concurrency/stm.go:25</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">STM</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Get 返回键的值，并将该键插入 txn 的 read set 中。如果 Get 失败，它将以错误中止事务，没有返回</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">...</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Put 在 write set 中增加键值对</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Put</span><span style="color:#E1E4E8;">(key, val </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, opts </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">v3.OpOption)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Rev 返回 read set 中某个键指定的版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Rev</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int64</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Del 删除某个键</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">Del</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// commit 尝试提交事务到 etcd server</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">commit</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.TxnResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">reset</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 clientv3/concurrency/stm.go:25</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">STM</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Get 返回键的值，并将该键插入 txn 的 read set 中。如果 Get 失败，它将以错误中止事务，没有返回</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">...</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Put 在 write set 中增加键值对</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Put</span><span style="color:#24292E;">(key, val </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, opts </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">v3.OpOption)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Rev 返回 read set 中某个键指定的版本号</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Rev</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int64</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Del 删除某个键</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">Del</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// commit 尝试提交事务到 etcd server</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">commit</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.TxnResponse</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">reset</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>STM 是软件事务存储的接口。其中定义了 Get、Put、Rev、Del、commit、reset 等接口方法。STM 的接口有两个实现类：stm 和 stmSerializable。具体选择哪一个，由我们指定的隔离级别决定。</p><p>STM 对象在内部构造 txn 事务，业务函数转换成<code>If-Then</code>，自动提交事务以及处理失败重试等工作，直到事务执行成功。核心的<code>NewSTM</code>函数的实现如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 clientv3/concurrency/stm.go:89</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewSTM</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.Client, apply </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(STM) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">, so </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">stmOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.TxnResponse, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   opts </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">stmOptions{ctx: c.</span><span style="color:#79B8FF;">Ctx</span><span style="color:#E1E4E8;">()}</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, f </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> so {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">f</span><span style="color:#E1E4E8;">(opts)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(opts.prefetch) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      f </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> apply</span></span>
<span class="line"><span style="color:#E1E4E8;">      apply </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(s STM) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         s.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(opts.prefetch</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">f</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">runSTM</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mkSTM</span><span style="color:#E1E4E8;">(c, opts), apply)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 clientv3/concurrency/stm.go:89</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewSTM</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.Client, apply </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(STM) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">, so </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">stmOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.TxnResponse, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   opts </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">stmOptions{ctx: c.</span><span style="color:#005CC5;">Ctx</span><span style="color:#24292E;">()}</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, f </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> so {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">f</span><span style="color:#24292E;">(opts)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(opts.prefetch) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      f </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> apply</span></span>
<span class="line"><span style="color:#24292E;">      apply </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(s STM) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         s.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(opts.prefetch</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">f</span><span style="color:#24292E;">(s)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">runSTM</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mkSTM</span><span style="color:#24292E;">(c, opts), apply)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>根据源码可以知道，<code>NewSTM</code>首先判断该事务是否存在预取的键值对，如果存在，会无条件地直接 apply 函数；否则会创建一个 stm，并运行 stm 事务。runSTM 代码如下所示：</p><pre><code>// 位于 clientv3/concurrency/stm.go:140
func runSTM(s STM, apply func(STM) error) (*v3.TxnResponse, error) {
	outc := make(chan stmResponse, 1)
	go func() {
		defer func() {
			if r := recover(); r != nil {
				e, ok := r.(stmError)
				if !ok {
					// 执行异常
					panic(r)
				}
				outc &lt;- stmResponse{nil, e.err}
			}
		}()
		var out stmResponse
		for {
            // 重置 stm
			s.reset()
            // 执行事务操作，apply 函数
			if out.err = apply(s); out.err != nil {
				break
			}
            // 提交事务
			if out.resp = s.commit(); out.resp != nil {
				break
			}
		}
		outc &lt;- out
	}()
	r := &lt;-outc
	return r.resp, r.err
}
</code></pre><p>runSTM 函数首先重置了 stm，清空 STM 的读写缓存；接着执行事务操作，apply 应用函数；最后将事务提交。提交事务的实现如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 位于 clientv3/concurrency/stm.go:265</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">stm) </span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.TxnResponse {</span></span>
<span class="line"><span style="color:#E1E4E8;">   txnresp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.client.</span><span style="color:#79B8FF;">Txn</span><span style="color:#E1E4E8;">(s.ctx).</span><span style="color:#79B8FF;">If</span><span style="color:#E1E4E8;">(s.</span><span style="color:#79B8FF;">conflicts</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">Then</span><span style="color:#E1E4E8;">(s.wset.</span><span style="color:#79B8FF;">puts</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">Commit</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(stmError{err})</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> txnresp.Succeeded {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> txnresp</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 位于 clientv3/concurrency/stm.go:265</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">stm) </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.TxnResponse {</span></span>
<span class="line"><span style="color:#24292E;">   txnresp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.client.</span><span style="color:#005CC5;">Txn</span><span style="color:#24292E;">(s.ctx).</span><span style="color:#005CC5;">If</span><span style="color:#24292E;">(s.</span><span style="color:#005CC5;">conflicts</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">Then</span><span style="color:#24292E;">(s.wset.</span><span style="color:#005CC5;">puts</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">Commit</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(stmError{err})</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> txnresp.Succeeded {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> txnresp</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述 commit 的实现包含了我们前面所介绍的 etcd 事务语法。If 中封装了冲突检测条件，提交事务则是 etcd 的 Txn 将 wset 中的数据写入并提交的过程。</p><p>下面我们来看看 etcd 隔离级别以及在 STM 封装基础上如何实现事务。</p><h3 id="etcd-事务隔离级别" tabindex="-1">etcd 事务隔离级别 <a class="header-anchor" href="#etcd-事务隔离级别" aria-label="Permalink to &quot;etcd 事务隔离级别&quot;">​</a></h3><p>数据库一般有以下几种事务隔离级别。</p><ul><li><p><strong>未提交读</strong> （Read Uncommitted）：能够读取到其他事务中还未提交的数据，这可能会导致<strong>脏读</strong>的问题。</p></li><li><p><strong>读已提交</strong> （Read Committed）：只能读取到已经提交的数据，即别的事务一提交，当前事务就能读取到被修改的数据，这可能导致<strong>不可重复读</strong>的问题。</p></li><li><p><strong>可重复读</strong>（Repeated Read）：一个事务中，同一个读操作在事务的任意时刻都能得到同样的结果，其他事务的提交操作对本事务不会产生影响。</p></li><li><p><strong>串行化</strong> （Serializable）：串行化执行事务，即一个事务的执行会阻塞其他事务。该隔离级别通过牺牲并发能力换取数据的安全，属于<strong>最高的隔离级别</strong>。</p></li></ul><p>etcd 的事务可以看作是一种&quot;微事务&quot;，在它之上，可以构建出各种隔离级别的事务。STM 的事务级别通过 stmOption 指定，位于 clientv3/concurrency/stm.go 中，分别为 SerializableSnapshot、Serializable、RepeatableReads 和 ReadCommitted。</p><p>构造 STM 的实现如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mkSTM</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.Client, opts </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">stmOptions) STM {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> opts.iso {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 串行化快照</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SerializableSnapshot:</span></span>
<span class="line"><span style="color:#E1E4E8;">      s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">stmSerializable{</span></span>
<span class="line"><span style="color:#E1E4E8;">         stm:      stm{client: c, ctx: opts.ctx},</span></span>
<span class="line"><span style="color:#E1E4E8;">         prefetch: </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.GetResponse),</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      s.conflicts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() []v3.Cmp {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(s.rset.</span><span style="color:#79B8FF;">cmps</span><span style="color:#E1E4E8;">(), s.wset.</span><span style="color:#79B8FF;">cmps</span><span style="color:#E1E4E8;">(s.rset.</span><span style="color:#79B8FF;">first</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 串行化</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> Serializable:</span></span>
<span class="line"><span style="color:#E1E4E8;">      s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">stmSerializable{</span></span>
<span class="line"><span style="color:#E1E4E8;">         stm:      stm{client: c, ctx: opts.ctx},</span></span>
<span class="line"><span style="color:#E1E4E8;">         prefetch: </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">v3.GetResponse),</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      s.conflicts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() []v3.Cmp { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.rset.</span><span style="color:#79B8FF;">cmps</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 可重复读   </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> RepeatableReads:</span></span>
<span class="line"><span style="color:#E1E4E8;">      s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">stm{client: c, ctx: opts.ctx, getOpts: []v3.OpOption{v3.</span><span style="color:#79B8FF;">WithSerializable</span><span style="color:#E1E4E8;">()}}</span></span>
<span class="line"><span style="color:#E1E4E8;">      s.conflicts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() []v3.Cmp { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.rset.</span><span style="color:#79B8FF;">cmps</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 已提交读</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> ReadCommitted:</span></span>
<span class="line"><span style="color:#E1E4E8;">      s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">stm{client: c, ctx: opts.ctx, getOpts: []v3.OpOption{v3.</span><span style="color:#79B8FF;">WithSerializable</span><span style="color:#E1E4E8;">()}}</span></span>
<span class="line"><span style="color:#E1E4E8;">      s.conflicts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() []v3.Cmp { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unsupported stm&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mkSTM</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.Client, opts </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">stmOptions) STM {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> opts.iso {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 串行化快照</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SerializableSnapshot:</span></span>
<span class="line"><span style="color:#24292E;">      s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">stmSerializable{</span></span>
<span class="line"><span style="color:#24292E;">         stm:      stm{client: c, ctx: opts.ctx},</span></span>
<span class="line"><span style="color:#24292E;">         prefetch: </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.GetResponse),</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      s.conflicts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() []v3.Cmp {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(s.rset.</span><span style="color:#005CC5;">cmps</span><span style="color:#24292E;">(), s.wset.</span><span style="color:#005CC5;">cmps</span><span style="color:#24292E;">(s.rset.</span><span style="color:#005CC5;">first</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 串行化</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> Serializable:</span></span>
<span class="line"><span style="color:#24292E;">      s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">stmSerializable{</span></span>
<span class="line"><span style="color:#24292E;">         stm:      stm{client: c, ctx: opts.ctx},</span></span>
<span class="line"><span style="color:#24292E;">         prefetch: </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">v3.GetResponse),</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      s.conflicts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() []v3.Cmp { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.rset.</span><span style="color:#005CC5;">cmps</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 可重复读   </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> RepeatableReads:</span></span>
<span class="line"><span style="color:#24292E;">      s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">stm{client: c, ctx: opts.ctx, getOpts: []v3.OpOption{v3.</span><span style="color:#005CC5;">WithSerializable</span><span style="color:#24292E;">()}}</span></span>
<span class="line"><span style="color:#24292E;">      s.conflicts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() []v3.Cmp { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.rset.</span><span style="color:#005CC5;">cmps</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 已提交读</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> ReadCommitted:</span></span>
<span class="line"><span style="color:#24292E;">      s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">stm{client: c, ctx: opts.ctx, getOpts: []v3.OpOption{v3.</span><span style="color:#005CC5;">WithSerializable</span><span style="color:#24292E;">()}}</span></span>
<span class="line"><span style="color:#24292E;">      s.conflicts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() []v3.Cmp { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unsupported stm&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该函数是根据隔离级别定义的。每一类隔离级别对应不同的<strong>冲突检测条件</strong> ，存在<strong>读操作差异</strong>，因此我们需要搞清楚每一类隔离级别在这两方面的实现。</p><p>从构建 SMT 的实现代码可以知道，etcd 隔离级别与一般的数据库隔离级别的差异是<strong>没有未提交读的隔离级别</strong>，这是因为 etcd 通过 MVCC 机制实现读写不阻塞，并解决脏读的问题。下面我们将从低到高分别介绍 etcd 事务隔离级别。</p><h4 id="readcommitted-已提交读" tabindex="-1">ReadCommitted 已提交读 <a class="header-anchor" href="#readcommitted-已提交读" aria-label="Permalink to &quot;ReadCommitted 已提交读&quot;">​</a></h4><p>ReadCommitted 是 etcd 中的<strong>最低事务级别</strong>。ReadCommitted 是指一个事务提交之后，它做的变更才会被其他事务看到，只允许客户端获取已经提交的数据。</p><p>由构造 STM 的源码可知，ReadCommitted 调用的是 stm 的实现。对于不一样的隔离级别，我们主要关注的就是读操作和提交时的冲突检测条件。而对于写操作，会先写进本地缓存，直到事务提交时才真正写到 etcd 里。</p><ul><li>读操作</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">stm) </span><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">(keys ...string) string {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> wv </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.wset.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(keys...); wv </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wv.val</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">respToValue</span><span style="color:#E1E4E8;">(s.</span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(keys...))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">stm) </span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">(keys ...string) string {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> wv </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.wset.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(keys...); wv </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wv.val</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">respToValue</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(keys...))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 etcd 读取 keys，就像普通的 kv 操作一样。第一次 Get 后，在事务中缓存，后续不再从 etcd 读取。</p><ul><li>冲突检测条件</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">s.conflicts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() []v3.Cmp { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">s.conflicts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() []v3.Cmp { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> }</span></span></code></pre></div><p>ReadCommitted 只需要确保自己读到的是别人已经提交的数据，由于 etcd 的 kv 操作都是原子操作，所以不可能读到未提交的修改。</p><h4 id="repeatablereads-可重复读" tabindex="-1">RepeatableReads 可重复读 <a class="header-anchor" href="#repeatablereads-可重复读" aria-label="Permalink to &quot;RepeatableReads 可重复读&quot;">​</a></h4><p>RepeatableReads 与 ReadCommitted 类似，调用的也是 stm 的实现。可重复读是指多次读取同一个数据时，其值都和事务开始时刻是一致的，因此可以实现可重复读。</p><ul><li>读操作</li></ul><p>与 ReadCommitted 类似，用 readSet 缓存已经读过的数据，这样下次再读取相同数据的时候才能得到同样的结果，确保了可重复读。</p><ul><li>冲突检测条件</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">s.conflicts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() []v3.Cmp { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.rset.</span><span style="color:#79B8FF;">cmps</span><span style="color:#E1E4E8;">() }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">s.conflicts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() []v3.Cmp { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.rset.</span><span style="color:#005CC5;">cmps</span><span style="color:#24292E;">() }</span></span></code></pre></div><p>在事务提交时，确保事务中 Get 的 keys 没有被改动过。因此使用 readSet 数据的 ModRevision 做冲突检测，<strong>确保本事务读到的数据都是最新的</strong>。</p><p>可重复读隔离级别的场景中，每个 key 的 Get 是独立的。在事务提交时，如果这些 keys 没有变动过，那么事务就可以提交。</p><h4 id="serializable-串行读" tabindex="-1">Serializable 串行读 <a class="header-anchor" href="#serializable-串行读" aria-label="Permalink to &quot;Serializable 串行读&quot;">​</a></h4><p>串行化调用的实现类为 stmSerializable，当出现读写锁冲突的时候，后续事务必须等前一个事务执行完成，才能继续执行。这就相当于在事务开始时，对 etcd 做了一个快照，这样它读取到的数据就不会受到其他事务的影响，从而达到事务串行化（Serializable）执行的效果。</p><ul><li>读操作</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">stmSerializable) </span><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">(keys ...string) string {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> wv </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.wset.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(keys...); wv </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> wv.val</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 判断是否第一次读</span></span>
<span class="line"><span style="color:#E1E4E8;">   firstRead </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(s.rset) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, key </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> range keys {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> resp, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.prefetch[key]; ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(s.prefetch, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">         s.rset[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resp</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   resp </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> s.stm.</span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(keys...)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> firstRead {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 记录下第一次读的版本作为基准</span></span>
<span class="line"><span style="color:#E1E4E8;">      s.getOpts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []v3.OpOption{</span></span>
<span class="line"><span style="color:#E1E4E8;">         v3.</span><span style="color:#B392F0;">WithRev</span><span style="color:#E1E4E8;">(resp.Header.Revision),</span></span>
<span class="line"><span style="color:#E1E4E8;">         v3.</span><span style="color:#B392F0;">WithSerializable</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">respToValue</span><span style="color:#E1E4E8;">(resp)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">stmSerializable) </span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">(keys ...string) string {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> wv </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.wset.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(keys...); wv </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> wv.val</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 判断是否第一次读</span></span>
<span class="line"><span style="color:#24292E;">   firstRead </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(s.rset) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, key </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> range keys {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> resp, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.prefetch[key]; ok {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(s.prefetch, key)</span></span>
<span class="line"><span style="color:#24292E;">         s.rset[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resp</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   resp </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> s.stm.</span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(keys...)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> firstRead {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 记录下第一次读的版本作为基准</span></span>
<span class="line"><span style="color:#24292E;">      s.getOpts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []v3.OpOption{</span></span>
<span class="line"><span style="color:#24292E;">         v3.</span><span style="color:#6F42C1;">WithRev</span><span style="color:#24292E;">(resp.Header.Revision),</span></span>
<span class="line"><span style="color:#24292E;">         v3.</span><span style="color:#6F42C1;">WithSerializable</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">respToValue</span><span style="color:#24292E;">(resp)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>事务中第一次读操作完成时，保存当前版本号 Revision；后续其他读请求会带上这个版本号，获取指定 Revision 版本的数据。这确保了该事务所有的读操作读到的都是同一时刻的内容。</p><ul><li>冲突检测条件</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> s.conflicts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">() []v3.Cmp { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s.rset.</span><span style="color:#B392F0;">cmps</span><span style="color:#E1E4E8;">() }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> s.conflicts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">() []v3.Cmp { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s.rset.</span><span style="color:#6F42C1;">cmps</span><span style="color:#24292E;">() }</span></span></code></pre></div><p>在事务提交时，需要检查事务中 Get 的 keys 是否被改动过，而 etcd 串行化的约束还不够，它缺少了验证事务要修改的 keys 这一步。下面的 SerializableSnapshot 事务增加了这个约束。</p><h4 id="serializablesnapshot串行化快照读" tabindex="-1">SerializableSnapshot串行化快照读 <a class="header-anchor" href="#serializablesnapshot串行化快照读" aria-label="Permalink to &quot;SerializableSnapshot串行化快照读&quot;">​</a></h4><p>SerializableSnapshot串行化快照隔离，提供可序列化的隔离，并检查写冲突。<strong>etcd 默认采用这种隔离级别</strong>，串行化快照隔离是最严格的隔离级别，可以避免幻影读。其读操作与冲突检测的过程如下。</p><ul><li>读操作</li></ul><p>与 Serializable 串行化读类似。事务中的第一个 Get 操作发生时，保存服务器返回的当前 Revision；后续对其他 keys 的 Get 操作，指定获取 Revision 版本的 value。</p><ul><li>冲突检测条件</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">s.conflicts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() []v3.Cmp {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(s.rset.</span><span style="color:#79B8FF;">cmps</span><span style="color:#E1E4E8;">(), s.wset.</span><span style="color:#79B8FF;">cmps</span><span style="color:#E1E4E8;">(s.rset.</span><span style="color:#79B8FF;">first</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">s.conflicts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() []v3.Cmp {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(s.rset.</span><span style="color:#005CC5;">cmps</span><span style="color:#24292E;">(), s.wset.</span><span style="color:#005CC5;">cmps</span><span style="color:#24292E;">(s.rset.</span><span style="color:#005CC5;">first</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在事务提交时，检查事务中 Get 的 keys 以及要修改的 keys 是否被改动过。</p><p>SerializableSnapshot 不仅确保了读取过的数据是最新的，同时也确保了要写入的数据同样没有被其他事务更改过，是隔离的最高级别。</p><p>如果这些语义不能满足你的业务需求，通过扩展 etcd 的官方 Client SDK，写一个新 STM 事务类型即可。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们先介绍了数据库中的事务定义，以及 etcd 中的事务实现，事务降低了客户端应用编码的复杂度；接着通过一个转账的案例来演示 etcd 基于乐观锁如何实现事务，以及 STM 改进的转账案例。最后我们介绍了 etcd STM 微事务及其几种隔离机制。</p><p>本讲内容总结如下：</p>`,66),i=n("p",null,[s("通过上面的分析，我们清楚了如何使用 etcd 的 txn 事务构建符合 ACID 语义的事务框架。需要强调的是， etcd 的 STM 事务是 CAS 重试模式，在发生冲突时会多次重试，这就要"),n("strong",null,"保证业务代码是可重试的"),s("，因此不同于数据库事务的加锁模式。")],-1),F=n("p",null,"学习完这一讲，我要给大家留一个问题，你知道乐观锁适用于哪些场景吗？欢迎在留言区写下你的答案。下一讲，我们将继续介绍 etcd watch 机制的实现原理。",-1);function d(u,C,m,v,D,A){const a=e("Image");return t(),c("div",null,[E,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/16/07/CioPOWBF7_KAN6nXAAArzi47oUU475.png"}),s(),y,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/16/0B/Cgp9HWBF8RqAEKc1AAIFtf2bepo790.png"}),s(),i,F])}const f=o(r,[["render",d]]);export{h as __pageData,f as default};
