import{_ as p,j as o,o as e,g as r,k as n,h as l,Q as s}from"./chunks/framework.a0d18f64.js";const v=JSON.parse('{"title":"06core-j及垫片理念：设计一个“最完美”的Polyfill方案","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/105-前端基础建设与架构文档/(5911) 06  core-j 及垫片理念：设计一个“最完美”的 Polyfill 方案.md","filePath":"posts/frontEnd/105-前端基础建设与架构文档/(5911) 06  core-j 及垫片理念：设计一个“最完美”的 Polyfill 方案.md","lastUpdated":1696682708000}'),t={name:"posts/frontEnd/105-前端基础建设与架构文档/(5911) 06  core-j 及垫片理念：设计一个“最完美”的 Polyfill 方案.md"},c=s(`<h1 id="_06core-j及垫片理念-设计一个-最完美-的polyfill方案" tabindex="-1">06core-j及垫片理念：设计一个“最完美”的Polyfill方案 <a class="header-anchor" href="#_06core-j及垫片理念-设计一个-最完美-的polyfill方案" aria-label="Permalink to &quot;06core-j及垫片理念：设计一个“最完美”的Polyfill方案&quot;">​</a></h1><p>即便你不知道 <a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer">core-js</a>，也一定在项目中直接或间接地使用过它。core-js 是一个 JavaScript 标准库，它包含了 ECMAScript 2020 在内的多项特性的 polyfills，以及 ECMAScript 在 proposals 阶段的特性、WHATWG/W3C 新特性等。因此它是一个现代化前端项目的&quot;标准套件&quot;。</p><p>除了 core-js 本身的重要性，它的实现理念、设计方式都值得我们学习。事实上，core-js 是一扇大门：</p><ul><li><p>通过 core-js，我们可以窥见<strong>前端工程化</strong>的方方面面；</p></li><li><p>core-js 又和 Babel 深度绑定，因此学习 core-js，也能帮助开发者<strong>更好地理解 babel 生态</strong>，进而加深对前端生态的理解；</p></li><li><p>通过对 core-js 的解析，我们正好可以梳理前端一个极具特色的概念------<strong>polyfill（垫片/补丁）</strong>。</p></li></ul><p>这一讲，就让我们深入谈谈以上内容。</p><h3 id="core-js-工程一览" tabindex="-1">core-js 工程一览 <a class="header-anchor" href="#core-js-工程一览" aria-label="Permalink to &quot;core-js 工程一览&quot;">​</a></h3><p>core-js 是一个由 <a href="https://github.com/lerna/lerna" target="_blank" rel="noreferrer">Lerna</a> 搭建的 Monorepo 风格的项目，在它的 <a href="https://github.com/zloirock/core-js/tree/master/packages" target="_blank" rel="noreferrer">packages</a> 中，我们能看到五个相关包：</p><ul><li><p>core-js</p></li><li><p>core-js-pure</p></li><li><p>core-js-compact</p></li><li><p>core-js-builder</p></li><li><p>core-js-bundle</p></li></ul><p>我们先从 core-js 入手。<strong>core-js 实现的基础垫片能力，是整个 core-js 的逻辑核心</strong>。</p><p>比如我们可以按照如下代码引入全局 polyfills：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> &#39;core</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">js&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> &#39;core</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">js&#39;;</span></span></code></pre></div><p>或者按照：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> &#39;core</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">js/features/array/from&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> &#39;core</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">js/features/array/from&#39;;</span></span></code></pre></div><p>的方式，按需在业务项目的入口引入某些 polyfills。</p><p>core-js 为什么有这么多的 packages 呢？实际上，它们各司其职，又紧密配合，接下来我们来具体分析。</p><p><strong>core-js-pure 提供了不污染全局变量的垫片能力</strong>，比如我们可以按照：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> _from from &#39;core</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">js</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">pure/features/array/from&#39;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> _flat from &#39;core</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">js</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">pure/features/array/flat&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> _from from &#39;core</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">js</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">pure/features/array/from&#39;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> _flat from &#39;core</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">js</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">pure/features/array/flat&#39;;</span></span></code></pre></div><p>的方式，来实现独立的导出命名空间，进而避免全局变量的污染。</p><p><strong>core-js-compact 维护了按照</strong> <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noreferrer">browserslist</a><strong>规范的垫片需求数据</strong>，来帮助我们找到&quot;符合目标环境&quot;的 polyfills 需求集合，比如以下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  list, </span><span style="color:#6A737D;">// array of required modules</span></span>
<span class="line"><span style="color:#E1E4E8;">  targets, </span><span style="color:#6A737D;">// object with targets for each module</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;core-js-compat&#39;</span><span style="color:#E1E4E8;">)({</span></span>
<span class="line"><span style="color:#E1E4E8;">  targets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&gt; 2.5%&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  list, </span><span style="color:#6A737D;">// array of required modules</span></span>
<span class="line"><span style="color:#24292E;">  targets, </span><span style="color:#6A737D;">// object with targets for each module</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;core-js-compat&#39;</span><span style="color:#24292E;">)({</span></span>
<span class="line"><span style="color:#24292E;">  targets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&gt; 2.5%&#39;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>就可以筛选出全球使用份额大于 2.5% 的浏览器范围，并提供在这个范围下需要支持的垫片能力。</p><p><strong>core-js-builder 可以结合 core-js-compact 以及 core-js，并利用 webpack 能力，根据需求打包出 core-js 代码</strong>。比如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;core-js-builder&#39;</span><span style="color:#E1E4E8;">)({</span></span>
<span class="line"><span style="color:#E1E4E8;">  targets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&gt; 0.5%&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./my-core-js-bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(code </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}).</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(error </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;core-js-builder&#39;</span><span style="color:#24292E;">)({</span></span>
<span class="line"><span style="color:#24292E;">  targets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&gt; 0.5%&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./my-core-js-bundle.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(code </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(error </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {});</span></span></code></pre></div><p>将会把符合需求的 core-js 垫片打包到<code>my-core-js-bundle.js</code>文件当中。整个流程可以用代码演示为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./packages/core-js-builder&#39;</span><span style="color:#E1E4E8;">)({ filename</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./packages/core-js-bundle/index.js&#39;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(done).</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(error </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// eslint-disable-next-line no-console</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">  process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./packages/core-js-builder&#39;</span><span style="color:#24292E;">)({ filename</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./packages/core-js-bundle/index.js&#39;</span><span style="color:#24292E;"> }).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(done).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(error </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// eslint-disable-next-line no-console</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">  process.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>总之，根据分包的设计，我们能发现，<strong>core-js 将自身能力充分解耦，提供出的多个包都可以被其他项目所依赖</strong>。比如：</p><ul><li><p>core-js-compact 可以被 Babel 生态使用，由 Babel 分析出根据环境需要按需加载的垫片；</p></li><li><p>core-js-builder 可以被 Node.js 服务使用，构建出不同场景的垫片包。</p></li></ul><p>宏观上的设计，体现了工程复用能力。下面我们通过一个微观 polyfill 案例，从一个具体的垫片实现，进一步加深理解。</p><h3 id="如何复用一个-polyfill-实现" tabindex="-1">如何复用一个 Polyfill 实现 <a class="header-anchor" href="#如何复用一个-polyfill-实现" aria-label="Permalink to &quot;如何复用一个 Polyfill 实现&quot;">​</a></h3><p><a href="https://tc39.es/ecma262/#sec-array.prototype.every" target="_blank" rel="noreferrer">Array.prototype.every</a> 是一个常见且常用的数组原型上的方法。该方法用于测试一个数组内所有元素是否都能通过某个指定函数的测试，并最终返回一个布尔值来表示测试是否通过。它的浏览器兼容性<a href="https://www.caniuse.com/?search=array.prototype.every" target="_blank" rel="noreferrer">如下图</a>所示：</p>`,30),E=s(`<p>Array.prototype.every 的函数签名如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">every</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(element[, index[, array]])[, thisArg])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">every</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(element[, index[, array]])[, thisArg])</span></span></code></pre></div><p>对于一个有经验的前端程序员来说，如果浏览器不支持 Array.prototype.every，手写实现一个 Array.prototype.every 的 polyfill 并不困难，下面是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noreferrer">MDN</a> 的一个实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Array.prototype.every) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Array.prototype.every </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">(callbackfn, thisArg) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    var T, k;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;this is null or not defined&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> O </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> O.length </span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof callbackfn </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (arguments.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      T </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> thisArg;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> len) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> kValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (k in O) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        kValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">O</span><span style="color:#E1E4E8;">[k];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> testResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callbackfn.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(T, kValue, k, O);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">testResult) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Array.prototype.every) {</span></span>
<span class="line"><span style="color:#24292E;">  Array.prototype.every </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">(callbackfn, thisArg) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;use strict&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    var T, k;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;this is null or not defined&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> O </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> O.length </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof callbackfn </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arguments.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      T </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thisArg;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> kValue;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k in O) {</span></span>
<span class="line"><span style="color:#24292E;">        kValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">O</span><span style="color:#24292E;">[k];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> testResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> callbackfn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(T, kValue, k, O);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">testResult) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>核心思路很好理解：我们通过遍历数组，对数组的每一项调用 CALLBACK 求值进行返回是否通过测试。但是站在工程化的角度，从 core-js 这样一个大型项目的视角出发，就不是这么简单了。比如，我们知道 core-js-pure 不同于 core-js，它提供了<strong>不污染命名空间</strong> 的引用方式，因此上述 Array.prototype.every 的 polyfill 核心逻辑实现，就需要被 core-js-pure 和 core-js 同时引用，只要<strong>区分最后导出的方式</strong>即可，那么按照这个思路，我们如何实现最大限度的复用呢？</p><p>实际上，Array.prototype.every 的 polyfill 核心逻辑实现在<code>./packages/core-js/modules/es.array.every.js</code>中，<a href="https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.array.every.js" target="_blank" rel="noreferrer">源码</a>如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> $ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../internals/export&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> $every </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../internals/array-iteration&#39;</span><span style="color:#E1E4E8;">).every;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> arrayMethodIsStrict </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../internals/array-method-is-strict&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> arrayMethodUsesToLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../internals/array-method-uses-to-length&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> STRICT_METHOD </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arrayMethodIsStrict</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;every&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> USES_TO_LENGTH </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">arrayMethodUsesToLength</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;every&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">({ target</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Array&#39;</span><span style="color:#E1E4E8;">, proto</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, forced</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">STRICT_METHOD </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">USES_TO_LENGTH }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  every</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> function </span><span style="color:#B392F0;">every</span><span style="color:#E1E4E8;">(callbackfn </span><span style="color:#6A737D;">/* , thisArg */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 $every 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$every</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, callbackfn, arguments.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> arguments[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;use strict&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> $ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../internals/export&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> $every </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../internals/array-iteration&#39;</span><span style="color:#24292E;">).every;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arrayMethodIsStrict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../internals/array-method-is-strict&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arrayMethodUsesToLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../internals/array-method-uses-to-length&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> STRICT_METHOD </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arrayMethodIsStrict</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;every&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> USES_TO_LENGTH </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">arrayMethodUsesToLength</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;every&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">({ target</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Array&#39;</span><span style="color:#24292E;">, proto</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, forced</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">STRICT_METHOD </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">USES_TO_LENGTH }, {</span></span>
<span class="line"><span style="color:#24292E;">  every</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> function </span><span style="color:#6F42C1;">every</span><span style="color:#24292E;">(callbackfn </span><span style="color:#6A737D;">/* , thisArg */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 $every 方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$every</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, callbackfn, arguments.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> arguments[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>对应<code>$every</code><a href="https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/array-iteration.js#L58" target="_blank" rel="noreferrer">源码</a>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bind </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../internals/function-bind-context&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> IndexedObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../internals/indexed-object&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> toObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../internals/to-object&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> toLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../internals/to-length&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> arraySpeciesCreate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../internals/array-species-create&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> push </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [].push;</span></span>
<span class="line"><span style="color:#6A737D;">// 对 \`Array.prototype.{ forEach, map, filter, some, every, find, findIndex }\` 等方法进行接模拟和接入</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> createMethod </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (TYPE) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 通过魔法数字来表示具体需要对哪种方法进行模拟</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> IS_MAP </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TYPE </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> IS_FILTER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TYPE </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> IS_SOME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TYPE </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> IS_EVERY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TYPE </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> IS_FIND_INDEX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TYPE </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> NO_HOLES </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TYPE </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> IS_FIND_INDEX;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> ($</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, callbackfn, that, specificCreate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> O </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toObject</span><span style="color:#E1E4E8;">($</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> self </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IndexedObject</span><span style="color:#E1E4E8;">(O);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过 bind 方法创建一个 boundFunction，保留 this 指向</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> boundFunction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(callbackfn, that, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toLength</span><span style="color:#E1E4E8;">(self.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> create </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> specificCreate </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> arraySpeciesCreate;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IS_MAP </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">($</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, length) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> IS_FILTER </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">($</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined;</span></span>
<span class="line"><span style="color:#E1E4E8;">    var value, result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历循环并执行回调方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (;length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> index; index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (NO_HOLES </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> index in self) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> self[index];</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">boundFunction</span><span style="color:#E1E4E8;">(value, index, O);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (TYPE) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (IS_MAP) target[index] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result; </span><span style="color:#6A737D;">// map</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result) </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (TYPE) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;              </span><span style="color:#6A737D;">// some</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;             </span><span style="color:#6A737D;">// find</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> index;             </span><span style="color:#6A737D;">// findIndex</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> push.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(target, value); </span><span style="color:#6A737D;">// filter</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (IS_EVERY) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// every</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> IS_FIND_INDEX </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> IS_SOME </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> IS_EVERY </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> IS_EVERY </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> target;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  forEach</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  map</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  filter</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  some</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  every</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  find</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  findIndex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bind </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../internals/function-bind-context&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> IndexedObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../internals/indexed-object&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> toObject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../internals/to-object&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> toLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../internals/to-length&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arraySpeciesCreate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../internals/array-species-create&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> push </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [].push;</span></span>
<span class="line"><span style="color:#6A737D;">// 对 \`Array.prototype.{ forEach, map, filter, some, every, find, findIndex }\` 等方法进行接模拟和接入</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> createMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (TYPE) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 通过魔法数字来表示具体需要对哪种方法进行模拟</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> IS_MAP </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TYPE </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> IS_FILTER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TYPE </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> IS_SOME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TYPE </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> IS_EVERY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TYPE </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> IS_FIND_INDEX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TYPE </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> NO_HOLES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TYPE </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> IS_FIND_INDEX;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> ($</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, callbackfn, that, specificCreate) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> O </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toObject</span><span style="color:#24292E;">($</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> self </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IndexedObject</span><span style="color:#24292E;">(O);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过 bind 方法创建一个 boundFunction，保留 this 指向</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> boundFunction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(callbackfn, that, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toLength</span><span style="color:#24292E;">(self.length);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> create </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> specificCreate </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> arraySpeciesCreate;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IS_MAP </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">($</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, length) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> IS_FILTER </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">($</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined;</span></span>
<span class="line"><span style="color:#24292E;">    var value, result;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历循环并执行回调方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> index; index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (NO_HOLES </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> index in self) {</span></span>
<span class="line"><span style="color:#24292E;">      value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> self[index];</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">boundFunction</span><span style="color:#24292E;">(value, index, O);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (TYPE) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (IS_MAP) target[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result; </span><span style="color:#6A737D;">// map</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result) </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (TYPE) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;              </span><span style="color:#6A737D;">// some</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;             </span><span style="color:#6A737D;">// find</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> index;             </span><span style="color:#6A737D;">// findIndex</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> push.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(target, value); </span><span style="color:#6A737D;">// filter</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (IS_EVERY) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// every</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> IS_FIND_INDEX </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> IS_SOME </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> IS_EVERY </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> IS_EVERY </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> target;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  forEach</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  map</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  filter</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  some</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  every</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  find</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  findIndex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>同样是使用了遍历的方式，并由<code>../internals/function-bind-context</code>提供 this 绑定能力，用魔法常量处理<code>forEach、map、filter、some、every、find、findIndex</code>这些数组原型方法的不同方法。</p><p>重点来了，在 core-js 中，作者通过<code>../internals/export</code>方法导出实现原型，<a href="https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/export.js" target="_blank" rel="noreferrer">源码</a>如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">module.exports </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> (options, source) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> TARGET </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.target;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> GLOBAL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.global;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> STATIC </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.stat;</span></span>
<span class="line"><span style="color:#E1E4E8;">  var FORCED, target, key, targetProperty, sourceProperty, descriptor;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (GLOBAL) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> global;</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (STATIC) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> global[TARGET] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setGlobal</span><span style="color:#E1E4E8;">(TARGET, {});</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (global[TARGET] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}).prototype;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (target) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (key in source) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sourceProperty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> source[key];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.noTargetGet) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      descriptor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOwnPropertyDescriptor</span><span style="color:#E1E4E8;">(target, key);</span></span>
<span class="line"><span style="color:#E1E4E8;">      targetProperty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> descriptor </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> descriptor.value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> targetProperty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target[key];</span></span>
<span class="line"><span style="color:#E1E4E8;">    FORCED </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isForced</span><span style="color:#E1E4E8;">(GLOBAL </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> TARGET </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (STATIC </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> key, options.forced);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">FORCED </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> targetProperty </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> undefined) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (typeof sourceProperty </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> typeof targetProperty) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">copyConstructorProperties</span><span style="color:#E1E4E8;">(sourceProperty, targetProperty);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.sham </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (targetProperty </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> targetProperty.sham)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">createNonEnumerableProperty</span><span style="color:#E1E4E8;">(sourceProperty, </span><span style="color:#9ECBFF;">&#39;sham&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">redefine</span><span style="color:#E1E4E8;">(target, key, sourceProperty, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">module.exports </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> (options, source) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> TARGET </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.target;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> GLOBAL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.global;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> STATIC </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.stat;</span></span>
<span class="line"><span style="color:#24292E;">  var FORCED, target, key, targetProperty, sourceProperty, descriptor;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (GLOBAL) {</span></span>
<span class="line"><span style="color:#24292E;">    target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> global;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (STATIC) {</span></span>
<span class="line"><span style="color:#24292E;">    target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> global[TARGET] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setGlobal</span><span style="color:#24292E;">(TARGET, {});</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (global[TARGET] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}).prototype;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (target) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (key in source) {</span></span>
<span class="line"><span style="color:#24292E;">    sourceProperty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> source[key];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.noTargetGet) {</span></span>
<span class="line"><span style="color:#24292E;">      descriptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOwnPropertyDescriptor</span><span style="color:#24292E;">(target, key);</span></span>
<span class="line"><span style="color:#24292E;">      targetProperty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> descriptor </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> descriptor.value;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> targetProperty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target[key];</span></span>
<span class="line"><span style="color:#24292E;">    FORCED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isForced</span><span style="color:#24292E;">(GLOBAL </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> TARGET </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (STATIC </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> key, options.forced);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">FORCED </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> targetProperty </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> undefined) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (typeof sourceProperty </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> typeof targetProperty) </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">copyConstructorProperties</span><span style="color:#24292E;">(sourceProperty, targetProperty);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.sham </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (targetProperty </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> targetProperty.sham)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">createNonEnumerableProperty</span><span style="color:#24292E;">(sourceProperty, </span><span style="color:#032F62;">&#39;sham&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">redefine</span><span style="color:#24292E;">(target, key, sourceProperty, options);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>对应我们的 Array.prototype.every<a href="https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.array.every.js" target="_blank" rel="noreferrer">源码</a>，参数为：<code>target: &#39;Array&#39;, proto: true</code>，表明 coe-js 需要在数组 Array 的原型上，以&quot;污染数组原型&quot;的方式来扩展方法。</p><p>而 core-js-pure 则单独维护了一份 export 镜像<code>../internals/export</code>，其<a href="https://github.com/zloirock/core-js/blob/master/packages/core-js-pure/override/internals/export.js" target="_blank" rel="noreferrer">源码</a>我在这里不做过多讲解，你可以在本节内容学习后进一步查看。</p><p>同时，core-js-pure 包中的 Override 文件，实际上是在构建阶段，复制了 packages/core-js/ 内的核心逻辑（<a href="https://github.com/zloirock/core-js/blob/master/Gruntfile.js#L73" target="_blank" rel="noreferrer">源码在这里</a>），同时提供了复写这些核心 polyfills 逻辑的能力，也是通过构建流程，进行 core-js-pure/override 替换覆盖：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	expand</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	cwd</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./packages/core-js-pure/override/&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	src</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;**&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	dest</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./packages/core-js-pure&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	expand</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	cwd</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./packages/core-js-pure/override/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	src</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;**&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	dest</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./packages/core-js-pure&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是一种非常巧妙的&quot;利用构建能力，实现复用&quot;的方案。但我认为，既然是 Monorepo 风格的仓库，也许一种更好的设计是将<strong>core-js 核心 polyfills 再单独拆到一个包中，core-js 和 core-js-pure 分别进行引用</strong>------这种方式更能利用 Monorepo 能力，且减少了构建过程中的魔法处理。</p><h3 id="寻找最佳-polyfill-方案" tabindex="-1">寻找最佳 Polyfill 方案 <a class="header-anchor" href="#寻找最佳-polyfill-方案" aria-label="Permalink to &quot;寻找最佳 Polyfill 方案&quot;">​</a></h3><p>前文多次提到了 polyfill/垫片/补丁（下文混用这三种说法），这里我们正式对 polyfill 进行一个定义：</p><blockquote><p>A polyfill, or polyfiller, is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. Flattening the API landscape if you will.</p></blockquote><p>简单来说，<strong>polyfill 就是用社区上提供的一段代码，让我们在不兼容某些新特性的浏览器上，使用该新特性</strong>。</p><p>随着前端的发展，尤其是 ECMAScript 的迅速成长以及浏览器的频繁更新换代，前端使用 polyfills 技术的情况屡见不鲜。<strong>那么如何能在工程中，寻找并设计一个&quot;最完美&quot;的 polyfill 方案呢？<strong>注意，这里的完美指的是</strong>侵入性最小，工程化、自动化程度最高，业务影响最低</strong>。</p><p>第一种方案：<strong>手动打补丁</strong>。这种方式最为简单直接，也能天然做到&quot;按需打补丁&quot;，但是这不是一种工程化的解决方式，方案原始而难以维护，同时对于 polyfill 的实现要求较高。</p><p>于是，es5-shim 和 es6-shim 等&quot;轮子&quot;出现了，它们伴随着前端开发走过了一段艰辛岁月。但 es5-shim 和 es6-shim 这种笨重的方案很快被 babel-polyfill 取代，babel-polyfill 融合了 core-js 和 regenerator-runtime。</p><p>但如果粗暴地使用 babel-polyfill 一次性全量导入到项目中，不和 @babel/preset-env 等方案结合，babel-polyfill 会将其所包含的所有补丁都应用在项目当中，这样直接造成了项目 size 过大的问题，且存在污染全局变量的潜在问题。</p><p>于是，<strong>babel-polyfill 结合 @babel/preset-env + useBuiltins（entry） + preset-env targets 的方案</strong>如今更为流行，@babel/preset-env 定义了 Babel 所需插件预设，同时由 Babel 根据 preset-env targets 配置的支持环境，自动按需加载 polyfills，使用方式如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;presets&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&quot;@babel/env&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">      useBuiltIns</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;entry&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      targets</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { chrome</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }]</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;presets&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&quot;@babel/env&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">      useBuiltIns</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;entry&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      targets</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { chrome</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">44</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    }]</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样我们在工程代码入口处的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> &#39;@babel/polyfill&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> &#39;@babel/polyfill&#39;;</span></span></code></pre></div><p>会被编译为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> &quot;core</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">js/XXXX/XXXX&quot;;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> &quot;core</span><span style="color:#FDAEB7;font-style:italic;">-</span><span style="color:#E1E4E8;">js/XXXX/XXXXX&quot;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> &quot;core</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">js/XXXX/XXXX&quot;;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> &quot;core</span><span style="color:#B31D28;font-style:italic;">-</span><span style="color:#24292E;">js/XXXX/XXXXX&quot;;</span></span></code></pre></div><p>这样的方式省力省心。也是 core-js 和 Babel 深度绑定并结合的典型案例。</p><p>上文提到了 babel-polyfill 融合了 core-js 和 regenerator-runtime，既然如此，我们也可以不使用 babel-polyfill，而直接使用 core-js。这里我根据 <a href="https://www.npmtrends.com/babel-polyfill-vs-core-js-vs-es5-shim-vs-es6-shim" target="_blank" rel="noreferrer">babel-polyfill vs core-js vs es5-shim vs es6-shim</a> 的使用频率情况，进行比对，如下图所示：</p>`,33),y=s('<p>babel-polyfill vs core-js vs es5-shim vs es6-shim 使用频率对比图</p><p>我们看到，<strong>core-js 使用最多</strong>，这是因为它既可以在项目中单独使用，也可以和 Babel 绑定，作为更低层的依赖出现。</p><p>我们再思考一个问题：如果某个业务代码中，并没有用到配置环境填充的 polyfills，那么这些 polyfills 的引入依然出现了引用浪费的情况。实际上环境需要是一回事儿，代码是否需要却是另一回事儿。比如，我的 MPA（多页面应用）项目需要提供 Promise Polyfill，但是某个业务页面中，并没有使用 Promise 特性，理想情况并不需要在当前页面中引入 Promise Polyfill bundle。</p><p>针对这个问题，@babel/preset-env + useBuiltins（usage） + preset-env targets 方案就出现了，<strong>注意这里的 useBuiltins 配置为 usage，它可以真正根据代码情况，分析 AST（抽象语法树）进行更细粒度的按需引用</strong> 。但是这种基于静态编译的按需加载补丁也是相对的，因为 JavaScript 是一种弱规则的动态语言，比如这样的代码：<code>foo.includes(() =&gt; {//...})</code>，我们无法判断出这里的 <code>includes</code> 是数组原型方法还是字符串原型方法，因此一般做法只能将数组原型方法和字符串原型方法同时打包为 polyfill bundle。</p><p>除了在打包构建阶段植入 polyfill 以外，另外一个思路是&quot;在线动态打补丁&quot;，这种方案以 <a href="https://polyfill.io/v3/" target="_blank" rel="noreferrer">Polyfill.io</a> 为代表，它提供了 CDN 服务，使用者可以按照所需环境，<a href="https://polyfill.io/v3/url-builder/" target="_blank" rel="noreferrer">生成打包链接</a>：</p>',5),i=s('<p>如<code>https://polyfill.io/v3/polyfill.min.js?features=es2015</code>，在业务中我们可以直接引入 polyfills bundle：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;https://polyfill.io/v3/polyfill.min.js?features=es2015&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">script</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;https://polyfill.io/v3/polyfill.min.js?features=es2015&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">script</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p><strong>在高版本浏览器上，可能会返回空内容，因为该浏览器已经支持了 ES2015 特性。如果在低版本浏览器上，将会得到真实的 polyfills bundle</strong>。</p><p>从工程化的角度来说，<strong>一个趋于完美的 polyfill 设计应该满足的核心原则是按需加载补丁</strong>，这个按需加载主要包括两方面：</p><ul><li><p>按照用户终端环境</p></li><li><p>按照业务代码使用情况</p></li></ul><p>因为按需加载补丁，意味着更小的 bundle size，直接决定了应用的性能。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>从对前端项目的影响来讲，core-js 不只是一个 polyfill 仓库；从前端技术设计的角度来看，core-js 也能让我们获得更多启发和灵感。这一讲我们分析了 core-js 的设计实现，并由此延展出了工程中 polyfill 设计的方方面面。但依然留下了几个问题：</p><ul><li><p>core-js 和 Babel 生态绑定在一起，它们到底有什么联系，如何实现密切配合？</p></li><li><p>core-js 如何和 @babel/preset-env + useBuiltins（usage）配合，并利用 AST 技术，实现代码级别的按需引入？</p></li></ul><p>前端基础建设和工程化，每一个环节都相互关联，我们将会在&quot;梳理混乱的 Babel，不再被编译报错困扰&quot;一讲中，继续进行更多探索。</p>',10);function F(d,u,g,A,h,f){const a=o("Image");return e(),r("div",null,[c,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/8C/4F/Ciqc1F_q7bKAcYXcAALU37lw2JY310.png"}),l(),E,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/8C/4F/Ciqc1F_q7dKAanOXAAHwZCycIb4392.png"}),l(),y,n(a,{alt:"Lark20201230-104425.png",src:"https://s0.lgstatic.com/i/image/M00/8C/5A/Ciqc1F_r6aWAUh6OAAGLnnSGGnY780.png"}),l(),i])}const C=p(t,[["render",F]]);export{v as __pageData,C as default};
