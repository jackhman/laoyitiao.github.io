import{_ as o,j as e,o as t,g as c,k as l,h as a,s,Q as p}from"./chunks/framework.4e7d56ce.js";const f=JSON.parse('{"title":"14如何从CPU飙升定位到热点方法？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/047_说透性能测试/(6165) 14  如何从 CPU 飙升定位到热点方法？.md","filePath":"posts/devops/047_说透性能测试/(6165) 14  如何从 CPU 飙升定位到热点方法？.md","lastUpdated":1696417798000}'),r={name:"posts/devops/047_说透性能测试/(6165) 14  如何从 CPU 飙升定位到热点方法？.md"},y=s("h1",{id:"_14如何从cpu飙升定位到热点方法",tabindex:"-1"},[a("14如何从CPU飙升定位到热点方法？ "),s("a",{class:"header-anchor",href:"#_14如何从cpu飙升定位到热点方法","aria-label":'Permalink to "14如何从CPU飙升定位到热点方法？"'},"​")],-1),E=s("p",null,'上一模块我带你学习了如何进行系统监控，相信你已经掌握了监控部署的常见手段，通过监控这双"眼睛"，会帮助你及时发现系统资源异常，那当你发现资源异常时候，是不是觉得已经找到问题了呢？事实上并非如此，绝大多数资源异常只是你看到的表象问题，就好比你发现一个地方着火了，你可以先灭火，但是着火的原因是必须找到的，并制定相关的措施，这样才能有效避免下一次的火情。',-1),i=s("p",null,"对于系统也是这样的，当你发现了资源异常，你需要继续寻找发生问题的根因，所以作为一名专业的性能测试工程师，你也应当具备顺着表象去找问题根因的能力。这一讲我就以最流行的 Java 语言为例，带你学习如何透过现象看本质。",-1),C=s("p",null,[a("对于排查问题，不要只满足于掌握一些排查工具或者命令，你应当对"),s("strong",null,"被测语言以及运行原理"),a("有所了解，这样得出来的结论才可能更全面。")],-1),F=s("p",null,"这一讲我先带你理解 Java 运行过程中的核心概念。首先要明白 Java 代码在哪里运行，一些初学者说是在 idea 或者 eclipse 里面，因为它们是写代码的软件，不过细心的同学会发现，所有的 idea 或者 eclipse 要运行 Java 代码都需要配置 Java 环境，其实 idea 是我们开发的编辑器，而真正运行代码的是 JVM。",-1),d=s("p",null,"什么是 JVM 呢？JVM 是 Java Virtual Machine 的缩写，它是一个独立出来的运行环境，通过这样的环境去进行 Java 代码中各种逻辑运行。",-1),u=s("p",null,'读到这里可能同学有疑问了："我现在接触了很多环境，比如 JVM 运行环境、Docker 运行环境，还有云服务器之类，它们到底是什么关系？"这对于不少人来说，确实是有一定疑惑的，我先用一张图来示意下：',-1),B=p(`<p>从图中你可以看到，一般在底层物理机上会部署多个云服务器，而云服务器上又可以部署多个基于 Docker 的 JVM 节点，这样的部署结构也是比较常用的，既能做到<strong>环境的隔离</strong> 也能<strong>节约机器成本</strong>。</p><p>JVM 本身是一个较为庞大的知识体系，对于测试来说，不一定要理解 JVM 特别晦涩的概念，但至少需要了解 JVM 的结构以及运行的机制，你可以认为 JVM 是运行在 Win 或者 Linux 系统上专门运行 Java 的虚拟机，Java 虚拟机直接和操作系统交互。</p><h3 id="java-文件是如何被运行的" tabindex="-1">Java 文件是如何被运行的 <a class="header-anchor" href="#java-文件是如何被运行的" aria-label="Permalink to &quot;Java 文件是如何被运行的&quot;">​</a></h3><p>比如我们现在写了一个 HelloTester.java，这个 HelloTester.java 就类似一个文本文件，不过这个文件里面包含了符合 Java 语法规范的文本。比如我在 idea 里写一个简单的方法，如下代码所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloTester</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sayName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my name is &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">name);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        HelloTester helloTester</span><span style="color:#F97583;">=new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloTester</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        helloTester.</span><span style="color:#B392F0;">sayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;cctester&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloTester</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sayName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my name is &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        HelloTester helloTester</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloTester</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        helloTester.</span><span style="color:#6F42C1;">sayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cctester&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那我们的<strong>JVM 是不认识文本文件的</strong> ，<strong>所以它需要编译</strong>，让其成为一个会读二进制文件的 HelloTester.class，一般这个文件会产生在工程文件夹下的 Target 当中。</p><p>如果 <strong>JVM</strong> 想要执行这个 .class 文件，我们需要将其装进一个<strong>类加载器</strong>中，它就像一个搬运工一样，会把所有的 .class 文件全部搬进 JVM 里面来。如下图所示：</p>`,7),h=p('<p>对于如上的过程我们再总结概括一下：</p><ol><li><p>Java 文件经过编译后变成 .class 字节码文件；</p></li><li><p>字节码文件通过类加载器被搬运到 JVM 中，生成的对象一般会在 JVM 中堆空间运行。</p></li></ol><h3 id="java-对象又是如何在堆空间运行的" tabindex="-1">Java 对象又是如何在堆空间运行的？ <a class="header-anchor" href="#java-对象又是如何在堆空间运行的" aria-label="Permalink to &quot;Java 对象又是如何在堆空间运行的？&quot;">​</a></h3><p>同样还是根据以上代码示意，我带你看下 Java 对象如何进入堆空间以及在堆空间中运行的。</p><p>通过上文可知，编译 HelloTester.java 便会得到 HelloTester.class，执行 class 文件后系统会启动一个 JVM 进程，找到 HelloTester.class 后将类信息加载到 JVM 中。</p><p>JVM 找到 mian 方法后就可以执行 main 中的 HelloTester helloTester=new HelloTester()，也就是在 JVM 里创建一个 helloTester 对象，不过此时方法区里面还没有 HelloTester 类的信息，所以 JVM 就会去加载该类：</p><ul><li><p>加载 HelloTester 类后，JVM 在堆内就会为新的 HelloTester 实例进行内存的分配使用；</p></li><li><p>然后执行 helloTester.sayName()，JVM 根据 HelloTester 对象引用定位到方法区中 HelloTester 类的类型信息的方法表，获得 sayName() 的字节码地址；</p></li><li><p>最后执行 sayName(&quot;cctester&quot;)。</p></li></ul><p>以上便是 Java 对象在 JVM 中运行的大体过程，了解了这些基本信息之后，再来了解下堆空间中 Java 运行的线程状态，当程序开始创建线程时，便开始有了生命周期，其实就和人一样，会有&quot;生老病死&quot;几个状态，而对于线程来说会经历六个状态，如下表所示：</p>',8),_=s("p",null,"我们用一张图来直观地概括下这几个状态的演变：",-1),A=p(`<p>从字面上来看，NEW、RUNNABLE、TERMINATED 这几个状态比较好理解，但对于 BLOCKED、WAITING、TIMED_WAITING 很多人却分不清楚，我想通过一些实际生活中的例子来帮助你理解。</p><h4 id="blocked" tabindex="-1">BLOCKED <a class="header-anchor" href="#blocked" aria-label="Permalink to &quot;BLOCKED&quot;">​</a></h4><p>先来说下 BLOCKED，比如你去参加面试，可是接待室里面已经有张三正在面试，此时你是线程 T1，张三是线程 T2，而会议室是锁。这时 T1 就被 blocked，而 T2 获取了会议室的锁。</p><h4 id="waiting" tabindex="-1">WAITING <a class="header-anchor" href="#waiting" aria-label="Permalink to &quot;WAITING&quot;">​</a></h4><p>接着我们来说 WAITING，你已经进入面试环节，面试官对你的第一轮面试比较满意，让你在会议室等第二轮面试，此时就进入了 WAITING 状态，直到第二轮面试开始你才能结束 WAITING 状态。</p><h4 id="timed-waiting" tabindex="-1">TIMED_WAITING <a class="header-anchor" href="#timed-waiting" aria-label="Permalink to &quot;TIMED_WAITING&quot;">​</a></h4><p>当你结束了所有面试环节，HR 对你说我们一般会在三天内给回复，如果三天内没有回复就不要再等了，此时你就进入 TIMED_WAITING 状态，如果三天内没答复，你可能会看其他机会或者直接入职备选公司了。</p><p>这几个例子我想可以帮助你理解 TIMED_WAITING、WATING、BLOCKED 状态。</p><h3 id="一般哪些线程状态占用-cpu-呢" tabindex="-1">一般哪些线程状态占用 CPU 呢？ <a class="header-anchor" href="#一般哪些线程状态占用-cpu-呢" aria-label="Permalink to &quot;一般哪些线程状态占用 CPU 呢？&quot;">​</a></h3><p>处于 TIMED_WAITING、WATING、BLOCKED 状态的线程是不消耗 CPU 的，而处于RUNNABLE 状态的线程要结合当前线程代码的性质判断是否消耗 CPU：</p><ul><li><p>纯 Java 运算代码，并且未被挂起，是消耗 CPU 的；</p></li><li><p>网络 IO 操作，在等待数据时是不消耗 CPU 的。</p></li></ul><p>通过如上的学习，你了解了线程的状态，可以知道这个线程是在&quot;休息&quot;还是在&quot;奔跑&quot;。如果很多线程处于&quot;奔跑&quot;状态，必定会消耗相关的硬件资源，反过来理解，如果在性能测试过程中发现资源消耗是不是也能定位到相关的线程，从而发现代码问题呢？当你定位到具体的代码行，是不是可以和研发人员讨论下有没有优化的空间，而不是简单地将机器升级配置去解决问题，所以我将继续沿着如何定位代码问题这条思路为你讲解。</p><p>举一个实际例子，我以一个问题为切入点，首先看下面示意代码，可以看出 CPU 占用比较高的线程。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">top </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">41</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;"> up </span><span style="color:#79B8FF;">168</span><span style="color:#E1E4E8;"> days,  </span><span style="color:#79B8FF;">8</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> users,  load average</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.71</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.81</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.57</span></span>
<span class="line"><span style="color:#E1E4E8;">Tasks</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">155</span><span style="color:#E1E4E8;"> total,   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> running, </span><span style="color:#79B8FF;">153</span><span style="color:#E1E4E8;"> sleeping,   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> stopped,   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> zombie</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#B392F0;">Cpu</span><span style="color:#E1E4E8;">(s)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">68.4</span><span style="color:#E1E4E8;"> us,  </span><span style="color:#79B8FF;">6.4</span><span style="color:#E1E4E8;"> sy,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> ni, </span><span style="color:#79B8FF;">23.5</span><span style="color:#E1E4E8;"> id,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> wa,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> hi,  </span><span style="color:#79B8FF;">1.7</span><span style="color:#E1E4E8;"> si,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> st</span></span>
<span class="line"><span style="color:#E1E4E8;">KiB Mem </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">8010676</span><span style="color:#E1E4E8;"> total,   </span><span style="color:#79B8FF;">326472</span><span style="color:#E1E4E8;"> free,  </span><span style="color:#79B8FF;">6196656</span><span style="color:#E1E4E8;"> used,  </span><span style="color:#79B8FF;">1487548</span><span style="color:#E1E4E8;"> buff</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">KiB Swap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> total,        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> free,        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> used.  </span><span style="color:#FDAEB7;font-style:italic;">1120940</span><span style="color:#E1E4E8;"> avail Mem </span></span>
<span class="line"><span style="color:#E1E4E8;">PID USER      PR  NI    VIRT    RES    SHR S  </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">CPU </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">MEM     TIME</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> COMMAND</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6937</span><span style="color:#E1E4E8;"> root      </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4778684</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">518804</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">6</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">140</span><span style="color:#E1E4E8;"> S </span><span style="color:#79B8FF;">141.9</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">6.5</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">17</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">46.36</span><span style="color:#E1E4E8;"> java</span></span>
<span class="line"><span style="color:#79B8FF;">14643</span><span style="color:#E1E4E8;"> root      </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4639440</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">821244</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">2472</span><span style="color:#E1E4E8;"> S  </span><span style="color:#79B8FF;">11.6</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.3</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">1789</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;"> java</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">top </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">41</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">39</span><span style="color:#24292E;"> up </span><span style="color:#005CC5;">168</span><span style="color:#24292E;"> days,  </span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> users,  load average</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.71</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.81</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.57</span></span>
<span class="line"><span style="color:#24292E;">Tasks</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">155</span><span style="color:#24292E;"> total,   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> running, </span><span style="color:#005CC5;">153</span><span style="color:#24292E;"> sleeping,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> stopped,   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> zombie</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#6F42C1;">Cpu</span><span style="color:#24292E;">(s)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">68.4</span><span style="color:#24292E;"> us,  </span><span style="color:#005CC5;">6.4</span><span style="color:#24292E;"> sy,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> ni, </span><span style="color:#005CC5;">23.5</span><span style="color:#24292E;"> id,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> wa,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> hi,  </span><span style="color:#005CC5;">1.7</span><span style="color:#24292E;"> si,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> st</span></span>
<span class="line"><span style="color:#24292E;">KiB Mem </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">8010676</span><span style="color:#24292E;"> total,   </span><span style="color:#005CC5;">326472</span><span style="color:#24292E;"> free,  </span><span style="color:#005CC5;">6196656</span><span style="color:#24292E;"> used,  </span><span style="color:#005CC5;">1487548</span><span style="color:#24292E;"> buff</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">KiB Swap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> total,        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> free,        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> used.  </span><span style="color:#B31D28;font-style:italic;">1120940</span><span style="color:#24292E;"> avail Mem </span></span>
<span class="line"><span style="color:#24292E;">PID USER      PR  NI    VIRT    RES    SHR S  </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">CPU </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">MEM     TIME</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> COMMAND</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">6937</span><span style="color:#24292E;"> root      </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4778684</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">518804</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">140</span><span style="color:#24292E;"> S </span><span style="color:#005CC5;">141.9</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">6.5</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">17</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">46.36</span><span style="color:#24292E;"> java</span></span>
<span class="line"><span style="color:#005CC5;">14643</span><span style="color:#24292E;"> root      </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4639440</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">821244</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">2472</span><span style="color:#24292E;"> S  </span><span style="color:#005CC5;">11.6</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.3</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1789</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">33</span><span style="color:#24292E;"> java</span></span></code></pre></div><p>通过如上示例的第 3 行你可以发现服务器上 CPU 占用蛮高的，空闲值为 23.5%，也就是说占用了 76.5%；再看第 8 行，你可以看到 PID 为 6937 的进程消耗 CPU 为 141.9%。可能你有疑问了，为什么使用率可以超过 100%。这和你的服务器核数有关系，因为这个数值是每个核上该进程消耗的 CPU 之和，会有叠加关系。那你已经知道了消耗 CPU 最高的进程，然后执行如下命令：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@</span><span style="color:#F97583;">JD</span><span style="color:#E1E4E8;"> jmeter_test]# top </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Hp </span><span style="color:#79B8FF;">6937</span></span>
<span class="line"><span style="color:#E1E4E8;">top </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;"> up </span><span style="color:#79B8FF;">168</span><span style="color:#E1E4E8;"> days, </span><span style="color:#79B8FF;">14</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">35</span><span style="color:#E1E4E8;">,  </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> users,  load average</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.33</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.71</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.88</span></span>
<span class="line"><span style="color:#E1E4E8;">Threads</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">788</span><span style="color:#E1E4E8;"> total,   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> running, </span><span style="color:#79B8FF;">787</span><span style="color:#E1E4E8;"> sleeping,   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> stopped,   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> zombie</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#B392F0;">Cpu</span><span style="color:#E1E4E8;">(s)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">75.0</span><span style="color:#E1E4E8;"> us,  </span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;"> sy,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> ni, </span><span style="color:#79B8FF;">18.8</span><span style="color:#E1E4E8;"> id,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> wa,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> hi,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> si,  </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;"> st</span></span>
<span class="line"><span style="color:#E1E4E8;">KiB Mem </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">8010676</span><span style="color:#E1E4E8;"> total,   </span><span style="color:#79B8FF;">576860</span><span style="color:#E1E4E8;"> free,  </span><span style="color:#79B8FF;">5697612</span><span style="color:#E1E4E8;"> used,  </span><span style="color:#79B8FF;">1736204</span><span style="color:#E1E4E8;"> buff</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">KiB Swap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> total,        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> free,        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> used.  </span><span style="color:#FDAEB7;font-style:italic;">1616168</span><span style="color:#E1E4E8;"> avail Mem </span></span>
<span class="line"><span style="color:#E1E4E8;">PID USER      PR  NI    VIRT    RES    SHR S </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">CPU </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">MEM     TIME</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> COMMAND</span></span>
<span class="line"><span style="color:#79B8FF;">25695</span><span style="color:#E1E4E8;"> root      </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5409224</span><span style="color:#E1E4E8;">   1.</span><span style="color:#FDAEB7;font-style:italic;">0g</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">4892</span><span style="color:#E1E4E8;"> S  </span><span style="color:#79B8FF;">6.2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13.2</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">09</span><span style="color:#E1E4E8;"> java</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@</span><span style="color:#D73A49;">JD</span><span style="color:#24292E;"> jmeter_test]# top </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Hp </span><span style="color:#005CC5;">6937</span></span>
<span class="line"><span style="color:#24292E;">top </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">20</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">53</span><span style="color:#24292E;"> up </span><span style="color:#005CC5;">168</span><span style="color:#24292E;"> days, </span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">35</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> users,  load average</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.33</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.71</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.88</span></span>
<span class="line"><span style="color:#24292E;">Threads</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">788</span><span style="color:#24292E;"> total,   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> running, </span><span style="color:#005CC5;">787</span><span style="color:#24292E;"> sleeping,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> stopped,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> zombie</span></span>
<span class="line"><span style="color:#D73A49;">%</span><span style="color:#6F42C1;">Cpu</span><span style="color:#24292E;">(s)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">75.0</span><span style="color:#24292E;"> us,  </span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;"> sy,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> ni, </span><span style="color:#005CC5;">18.8</span><span style="color:#24292E;"> id,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> wa,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> hi,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> si,  </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> st</span></span>
<span class="line"><span style="color:#24292E;">KiB Mem </span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">8010676</span><span style="color:#24292E;"> total,   </span><span style="color:#005CC5;">576860</span><span style="color:#24292E;"> free,  </span><span style="color:#005CC5;">5697612</span><span style="color:#24292E;"> used,  </span><span style="color:#005CC5;">1736204</span><span style="color:#24292E;"> buff</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">KiB Swap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> total,        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> free,        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> used.  </span><span style="color:#B31D28;font-style:italic;">1616168</span><span style="color:#24292E;"> avail Mem </span></span>
<span class="line"><span style="color:#24292E;">PID USER      PR  NI    VIRT    RES    SHR S </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">CPU </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">MEM     TIME</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> COMMAND</span></span>
<span class="line"><span style="color:#005CC5;">25695</span><span style="color:#24292E;"> root      </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5409224</span><span style="color:#24292E;">   1.</span><span style="color:#B31D28;font-style:italic;">0g</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">4892</span><span style="color:#24292E;"> S  </span><span style="color:#005CC5;">6.2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13.2</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">00</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">09</span><span style="color:#24292E;"> java</span></span></code></pre></div><p>我们可以看到每个线程的使用状态，你可以选择 25695 这个线程号，将 25695 转化为 16 进制，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">printf </span><span style="color:#9ECBFF;">&quot;%x</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">25695</span></span>
<span class="line"><span style="color:#79B8FF;">645f</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">printf </span><span style="color:#032F62;">&quot;%x</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">25695</span></span>
<span class="line"><span style="color:#005CC5;">645f</span></span></code></pre></div><p>然后通过 jstack 命令定位可能存在问题的方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">jstack </span><span style="color:#79B8FF;">6937</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">grep </span><span style="color:#79B8FF;">645f</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">A </span><span style="color:#79B8FF;">30</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">jstack </span><span style="color:#005CC5;">6937</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">grep </span><span style="color:#005CC5;">645f</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">A </span><span style="color:#005CC5;">30</span></span></code></pre></div><p>通过运行上面的命令可以查看到的内容如下图所示：</p>`,21),g=p('<p>标红部分就是定位的业务代码，能够比较清晰地知道哪个方法在消耗 CPU 资源。</p><p>总结下来，要确定哪些线程状态占用 CPU 至少需要如下步骤：</p><ul><li><p>使用 top 命令找出有问题 Java 进程的 ID；</p></li><li><p>开启线程显示模式（top -Hp）；</p></li><li><p>按照 CPU 使用率将线程排序（打开 top 后按 P 可以按 CPU 使用降序展示）；</p></li><li><p>记下 Java 进程 ID 及其 CPU 高的线程 ID；</p></li><li><p>用进程 ID 作为参数，手动转换线程 ID 成十六进制，通过 jstack 去剖析对应的线程栈，以分析问题。</p></li></ul><p>你可以看到，实际过程略显烦琐，而有能力的同学可以做成 shell 脚本，这样会比较方便，当然社区也已经有这样的开源脚本供大家使用，<a href="https://github.com/oldratlee/useful-scripts/blob/master/docs/install.md" target="_blank" rel="noreferrer">点击访问地址</a>。</p><p>下载完成之后进入 useful-scripts，执行 ./show-busy-java-threads.sh，执行完成后的示意图如下所示：</p>',5),v=p('<p>这样的方式是可以看到这台服务上所有导致 CPU 飙升的 Java 方法的，当然直接一键也可以查看指定进程里的 java 方法，非常简单方便，方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> show</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">busy</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">java</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">threads </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">指定的Java进程Id</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> show</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">busy</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">java</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">threads </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">指定的Java进程Id</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>根据本讲的学习，相信你已经能够掌握 Java 在 JVM 中的运行过程，以及 Java 线程在 JVM 中的运行状态，并且能够从 CPU 飙升定位到代码问题。</p><p>那对于你来说，当你发现 CPU 占用过高怎么去处理呢？我相信不同的公司、不同的开发语言有不同的方案，欢迎在评论区给出你的实践。</p><p>下一讲我将带你学习基于 JVM 层的内存使用分析，到时见。</p>',6);function T(D,m,I,M,b,P){const n=e("Image");return t(),c("div",null,[y,E,i,C,F,d,u,l(n,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/08/11/CioPOWA0ZKaAbIh2AAB-PIUIVKM063.png"}),a(),B,l(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/08/14/Cgp9HWA0ZLeAEBTuAAB3MRGS9mk331.png"}),a(),h,l(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/08/11/CioPOWA0ZMuAGHBZAAD2QjCFz1A629.png"}),a(),_,l(n,{alt:"image (8).png",src:"https://s0.lgstatic.com/i/image6/M01/08/14/Cgp9HWA0ZSCAUrpaAAEB4nKOw-Q013.png"}),a(),A,l(n,{alt:"截图 (1).png",src:"https://s0.lgstatic.com/i/image6/M01/08/11/CioPOWA0ZTWAVtq1AAGYPQOM3Jg518.png"}),a(),g,l(n,{alt:"截图 (2) (1).png",src:"https://s0.lgstatic.com/i/image6/M01/08/15/Cgp9HWA0ZeuAUcH3AAVfZsuCukQ819.png"}),a(),v])}const S=o(r,[["render",T]]);export{f as __pageData,S as default};
