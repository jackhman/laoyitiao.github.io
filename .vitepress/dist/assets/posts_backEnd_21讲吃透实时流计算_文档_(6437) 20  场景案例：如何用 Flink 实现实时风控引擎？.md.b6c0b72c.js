import{_ as l,j as p,o,g as e,k as n,Q as a}from"./chunks/framework.4e7d56ce.js";const S=JSON.parse('{"title":"业务场景 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/21讲吃透实时流计算_文档/(6437) 20  场景案例：如何用 Flink 实现实时风控引擎？.md","filePath":"posts/backEnd/21讲吃透实时流计算_文档/(6437) 20  场景案例：如何用 Flink 实现实时风控引擎？.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/21讲吃透实时流计算_文档/(6437) 20  场景案例：如何用 Flink 实现实时风控引擎？.md"},c=a('<p>在前面的课时中，我们讨论了实时流计算系统的核心概念和四种流计算框架。从今天起，我们将把其中部分知识点整合起来，以展示两个完整的实时流计算应用案例。从而帮助你更好地理解这些概念以及如何将流计算框架运用到具体业务中。</p><p>今天我们先来看第一个案例，也就是使用 Flink 实现一个包括<strong>特征提取</strong> 和<strong>风险评分</strong>功能的风控引擎。</p><h3 id="业务场景" tabindex="-1">业务场景 <a class="header-anchor" href="#业务场景" aria-label="Permalink to &quot;业务场景&quot;">​</a></h3><p>考虑这么一种场景。有一天 Bob 窃取了 Alice 的手机银行账号和密码等信息，并准备将 Alice 手机银行上的钱，全部转移到他提前准备好的&quot;骡子账户&quot;（mule account，帮助转移资产的中转账户）上去。但是手机银行出于安全的原因，每次只允许最多转账 1000 元。于是 Bob 就准备每次转账 1000 元，分多次将 Alice 的钱转完。</p><p>那作为风控系统，该怎样及时检测并阻止这种异常交易呢？我们需要针对这种异常交易行为构建一个用于风险评分的规则或模型。不管是规则还是模型，它们的输入都是一些<strong>特征</strong>，所以我们必须先设定要提取的特征。</p><p>经过初步思考，我们想到了<strong>如下 3 个有利于异常交易行为检测的特征</strong>。</p><ul><li><p>一是，过去一小时支付账户交易次数。</p></li><li><p>二是，过去一小时接收账户接收的总金额。</p></li><li><p>三是，过去一小时交易的不同接收账户数。</p></li></ul><p>现在，我们已经确定了需要提取的特征，那接下来就是设定用于风险评分的规则或模型，用于判定交易行为是否异常。假设我们决定使用规则系统来判定交易是否异常，当输入的特征满足以下条件时，即判定交易是异常的。</p><ul><li><p>一是，在过去一小时支付账户交易次数超过 5 次。</p></li><li><p>二是，在过去一小时接收账户接收的总金额超过 5000。</p></li><li><p>三是，在过去一小时交易的不同接收账户数不超过 2。</p></li></ul><p>至此，风控系统要提取的特征，以及用于判定交易行为异常的规则都已经确定了。接下来，就是具体实现这个风控系统了。</p><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p>我们使用 Flink 来实现风控引擎。为了集中讨论流计算处理部分，我们这里假定从客户端上报的交易事件，已经被数据采集服务器接收后写入 Kafka 了。我们接下来只需要用 Flink 从 Kafka 读取交易事件作为输入流即可。</p><p>整体而言，我们要实现的风控引擎分成了两部分，即<strong>特征提取部分</strong> 和<strong>风险评分部分</strong>。</p><p>在<strong>特征提取部分</strong>，我们在前面确定要提取的特征有 3 个，不过这只是为了简化讲解，在实际业务场景下可以是更多的特征，比如数十个特征。如果每计算一个特征要 50ms，那么串行执行的话，计算 3 个特征就是 150ms，计算 30 个特征就是 1500ms，这样就不太好了。因为计算时延明显增加，业务变得不那么实时，用户体验就变差了。</p><p>所以，为了减少特征计算的整体耗时，我们必须<strong>并行计算各个特征</strong>。</p><p>那具体怎样并行计算呢？这个时候就需要用到 Flink 中的 KeyedStream 了。Flink 中的 KeyedStream 非常贴心地提供了<strong>将流进行逻辑分区</strong> 的功能。使用 KeyedStream，我们能够<strong>将事件流分成多个独立的流从而实现并行计算，这正好满足了我们对特征进行并行计算的需求</strong>。</p><p>但问题随之而来，我们应该怎样选择对流进行分区的主键呢？或许你会觉得随机分配就好了，但这是不行的！<strong>因为特征计算的过程中，会涉及流信息状态的读写，如果特征被不受控制地随机分配到 Flink 的各个节点上去，那么就不能保证读取到与该特征相关的完整流信息状态，也就是特征计算所需使用字段的历史业务数据</strong> 。所以，必须是<strong>按照特征使用到的字段</strong>对流进行分区。</p><p>我们用下面图 1 展示的 Flink 实现风控系统的原理图进行详细讲解。</p>',18),r=a('<p>在上面的图 1 中，当接收到交易事件时，我们给该交易事件分配一个随机生成的事件 ID，也就是图中的 event_id。这个事件 ID 在之后会帮我们将分散的并行计算特征结果合并起来。</p><p>当分配好事件 ID 后，我们立刻通过 flatMap 操作（<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=614&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6426&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 09 课时</a>已经讲解过 flatMap），将事件分解（split）成多个&quot;事件分身&quot;，每个&quot;事件分身&quot;都包含了事件的<strong>全部或部分字段</strong>。并且，每个&quot;事件分身&quot;还需要包含**分区键（key）**信息相关字段，用于指示该&quot;事件分身&quot;应该划分到哪个分区流 KeyedStream 中。</p><p>比如，图 1 中我们用&quot;count(pay_account.history,1h)&quot;这种<strong>自定义的 DSL</strong> （Domain Specific Language，领域专用语言）来表示&quot;过去一小时支付账户交易次数&quot;这个特征，那么这个特征计算时需要用到的&quot;事件分身&quot;就是由 event_id、pay_account、timestamp(事件发生时间) 和<strong>分区键名</strong> 、<strong>分区键值</strong> 这五个字段组成的 JSON 对象，其中<strong>分区键名</strong> 是 &quot;pay_account.history&quot;，<strong>分区键值</strong>是 &quot;pay_account字段名#pay_account字段值.history&quot;，代表了支付账户的历史事件。</p><p>再比如，图 1 中我们用&quot;sum(amount#rcv_account.history,1h)&quot;来表示&quot;过去一小时接收账户接收的总金额&quot;这个特征，那么这个特征计算时需要用到的&quot;事件分身&quot;就是由 event_id、rcv_account、amount、timestamp(事件发生时间) 和<strong>分区键名</strong> 、<strong>分区键值</strong> 这六个字段组成的 JSON 对象，其中<strong>分区键名</strong> 是&quot;amount#rcv_account.history&quot;，<strong>分区键值</strong>是&quot;amount字段名#rcv_account字段值.history&quot;，代表了接收账户的历史交易金额。</p><p>这样，具有相同<strong>分区键值</strong> 的&quot;事件分身&quot;会被划分到相同的分区流，继而路由到相同的<strong>状态存储</strong> 节点上。在状态存储节点上，我们根据新到的&quot;事件分身&quot;，对 Keyed State 中保存的<strong>历史业务数据</strong>进行读取和更新。</p><p>比如，对于&quot;count(pay_account.history,1h)&quot;这个特征，我们在 Keyed State 里保存了 pay_account.history 流信息状态，也就是 pay_account 的历史交易事件数据（为了简化问题，只记录最近 100 条历史记录）。再比如，对于&quot;sum(amount#rcv_account.history,1h)&quot;这个特征，由于需要计算的是交易金额，所以我们在 Keyed State 里保存了 amount#rcv_account.history 流信息状态，也就是 rcv_account 的历史交易金额数据。</p><p>这里补充说明下我们的特征描述 DSL 是怎样定义的，下面的图 2 进行了说明。</p>',7),E=a(`<p>在上面的图 2 中，我们使用了&quot;#&quot;符号来分割&quot;目标字段&quot;和&quot;条件字段&quot;。其中，&quot;目标字段&quot;是计算所针对的字段，&quot;条件字段&quot;则表明目标字段是对于哪个字段而言。如果没有&quot;条件字段&quot;，也就是没有&quot;#&quot;符号的话，那就将&quot;目标字段&quot;同时也作为&quot;条件字段&quot;使用。</p><p>比如，在&quot;sum(amount#rcv_account.history,1h)&quot;中，目标字段是 amount，意味着 sum 计算是针对 amount 字段进行的，也就是说，我们是针对 amount 字段的值进行 sum 求和计算。条件字段是 rcv_account， 则意味着前面的 amount 是对于接收账户 rcv_account 而言的。而后缀&quot;.history&quot;则表明在 Keyed State 中保存的是<strong>历史数据类型</strong> 的<strong>流信息状态</strong>，也就是接收账户 rcv_account 的交易金额 amount 的&quot;所有历史数据&quot;。</p><p>我们也可以自行增加其他有意义的后缀，比如用&quot;.window&quot;后缀表明保存的是&quot;窗口聚合数据&quot;等，这样就可以支持保存其他类型的<strong>流信息状态</strong>。最后的计算窗口&quot;1h&quot;，则表明了计算的时间窗口，也就是我们需要 sum 求和的是过去 1 小时的数据。</p><p>定义好各个字段后，我们再将&quot;amount字段名#rcv_account字段值.history&quot;作为划分 KeyedStream 的<strong>分区键值</strong>，这样相同接收账户 rcv_account 的交易金额 amount 数据才会路由到相同的 KeyedStream 上，进而保存到相同的 Keyed State 中。</p><p>之后，我们将从 Keyed State 中读取出的历史业务数据，附加到&quot;事件分身&quot;上。接下来就可以<strong>根据这些历史业务数据计算特征</strong> 了，比如 count、sum 和 count_distinct 等。当特征计算完成后，此时<strong>计算结果是分散在各个节点</strong> 上的，我们还需要将这些包含特征计算结果的&quot;事件分身&quot;合并起来，所以这一次是根据原始事件的事件 ID（也就是 event_id）对&quot;事件分身&quot;进行路由。由于使用的是事件 ID，所以先前被分解为多个部分的&quot;事件分身&quot;会被路由到相同的节点上。这样，就能<strong>将分开的特征计算结果重新合并起来，从而得到完整的特征集合了</strong>。</p><p>最后，将特征集合输入基于规则的<strong>风险评分部分</strong>，就可以判定本次转账事件是否异常了。在图 1 中，最右边的矩形就是风险评分部分。这个相对简单，只需要使用 map 操作（第 09 课时已经讲解过 map）就可以完成风险评分计算了。</p><p>至此，我们就整理清楚风控引擎的整体实现思路了。接下来，我们根据这个思路来实现具体的风控引擎。</p><h3 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-label="Permalink to &quot;具体实现&quot;">​</a></h3><p>我们按照图 1 所示的原理，来实现基于 Flink 的风控引擎。</p><h4 id="整体流程实现" tabindex="-1">整体流程实现 <a class="header-anchor" href="#整体流程实现" aria-label="Permalink to &quot;整体流程实现&quot;">​</a></h4><p>下面的代码就是 Flink 风控引擎的整体流程。注意由于代码有点长，所以我对代码做了详细注释，你在阅读代码时可以重点关注下用&quot;//&quot;注释的部分（<a href="https://github.com/alain898/realtime_stream_computing_course/blob/main/course20/src/main/java/com/alain898/course/realtimestreaming/course20/riskengine/FlinkRiskEngine.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">完整代码参考这里</a>）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FlinkRiskEngine</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 定义风控模型需要使用的特征，这里是用一种自定义 DSL 来定义特征的，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// DSL 的定义规则描述见&quot;实现原理&quot;部分的讲解。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]&gt; features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">parseDSL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;count(pay_account.history,1h)&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">parseDSL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sum(amount#rcv_account.history,1h)&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">parseDSL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;count_distinct(rcv_account#pay_account.history,1h)&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将特征 DSL 分割成字符串数组。分割所得结果中：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第 0 号元素是计算方法，比如 count、sum、count_distinct</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第 1 号元素是特征相关字段，同时也是分区键名，比如 amount#rcv_account.history。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第 2 号元素是计算窗口，比如 1h</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">parseDSL</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">dsl</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">(dsl.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[(,)]&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">trim)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取所有特征使用到的分区键名，也就是 parseDSL 解析结果的第 1 号元素 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> features.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toSet</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Flink 风控引擎的完整流程</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> StreamExecutionEnvironment env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StreamExecutionEnvironment.</span><span style="color:#B392F0;">getExecutionEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">setStreamTimeCharacteristic</span><span style="color:#E1E4E8;">(TimeCharacteristic.EventTime);</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">enableCheckpointing</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建从 Kafka 读取消息的流</span></span>
<span class="line"><span style="color:#E1E4E8;">        FlinkKafkaConsumer010&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; myConsumer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createKafkaConsumer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        DataStream&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; stream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> env.</span><span style="color:#B392F0;">addSource</span><span style="color:#E1E4E8;">(myConsumer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        DataStream counts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stream</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 从 Kafka 中读取的消息是 JSON 字符串，将其解码为 JSON 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> MapFunction&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> JSONObject </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(s)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// JSON 字符串解析为 JSON 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> JSONObject.</span><span style="color:#B392F0;">parseObject</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                })</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将事件根据&quot;特征计算所需要的字段&quot;分解为多个&quot;事件分身&quot;，每个&quot;事件分身&quot;包含一个分区键，用于指示该&quot;事件分身&quot;应该划分到哪个分区流 KeyedStream 中</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 这里实现了 Map/Reduce 计算模式中的 Map 部分</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventSplitFunction</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 根据&quot;分区键值&quot;划分为 KeyedStream</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">keyBy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> KeySelector&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(JSONObject </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 获取&quot;分区键值&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;KEY_VALUE&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                })</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将历史业务数据(也就是&quot;流信息状态&quot;)添加到事件上</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KeyEnrichFunction</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 根据历史业务数据计算出特征，将特征计算结果添加到事件上</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FeatureEnrichFunction</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 根据事件ID将原本属于同一个事件的不同特征部分路由到相同的分区流 KeyedStream 中</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">keyBy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> KeySelector&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(JSONObject </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 这次是用事件 ID 作为分区键值</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;EVENT_ID&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                })</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将原本属于同一个事件的特征合并起来，形成包含原始内容和特征计算结果的事件。这里实现了 Map/Reduce 计算模式中的 Reduce 部分</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FeatureReduceFunction</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 已经有了所有特征的计算结果，于是就可以根据基于规则的模型进行判定了</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuleBasedModeling</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        counts.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">setParallelism</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;FlinkRiskEngine&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FlinkRiskEngine</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 定义风控模型需要使用的特征，这里是用一种自定义 DSL 来定义特征的，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// DSL 的定义规则描述见&quot;实现原理&quot;部分的讲解。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]&gt; features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">parseDSL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;count(pay_account.history,1h)&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">parseDSL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sum(amount#rcv_account.history,1h)&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">parseDSL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;count_distinct(rcv_account#pay_account.history,1h)&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将特征 DSL 分割成字符串数组。分割所得结果中：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第 0 号元素是计算方法，比如 count、sum、count_distinct</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第 1 号元素是特征相关字段，同时也是分区键名，比如 amount#rcv_account.history。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第 2 号元素是计算窗口，比如 1h</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">parseDSL</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">dsl</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(dsl.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[(,)]&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">trim)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取所有特征使用到的分区键名，也就是 parseDSL 解析结果的第 1 号元素 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> features.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> x[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toSet</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Flink 风控引擎的完整流程</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> StreamExecutionEnvironment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StreamExecutionEnvironment.</span><span style="color:#6F42C1;">getExecutionEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        env.</span><span style="color:#6F42C1;">setStreamTimeCharacteristic</span><span style="color:#24292E;">(TimeCharacteristic.EventTime);</span></span>
<span class="line"><span style="color:#24292E;">        env.</span><span style="color:#6F42C1;">enableCheckpointing</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建从 Kafka 读取消息的流</span></span>
<span class="line"><span style="color:#24292E;">        FlinkKafkaConsumer010&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; myConsumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createKafkaConsumer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        DataStream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; stream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> env.</span><span style="color:#6F42C1;">addSource</span><span style="color:#24292E;">(myConsumer);</span></span>
<span class="line"><span style="color:#24292E;">        DataStream counts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stream</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 从 Kafka 中读取的消息是 JSON 字符串，将其解码为 JSON 对象</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MapFunction&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> JSONObject </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(s)) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// JSON 字符串解析为 JSON 对象</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> JSONObject.</span><span style="color:#6F42C1;">parseObject</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                })</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将事件根据&quot;特征计算所需要的字段&quot;分解为多个&quot;事件分身&quot;，每个&quot;事件分身&quot;包含一个分区键，用于指示该&quot;事件分身&quot;应该划分到哪个分区流 KeyedStream 中</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 这里实现了 Map/Reduce 计算模式中的 Map 部分</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventSplitFunction</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 根据&quot;分区键值&quot;划分为 KeyedStream</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">keyBy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> KeySelector&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(JSONObject </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 获取&quot;分区键值&quot;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;KEY_VALUE&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                })</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将历史业务数据(也就是&quot;流信息状态&quot;)添加到事件上</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KeyEnrichFunction</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 根据历史业务数据计算出特征，将特征计算结果添加到事件上</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FeatureEnrichFunction</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 根据事件ID将原本属于同一个事件的不同特征部分路由到相同的分区流 KeyedStream 中</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">keyBy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> KeySelector&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(JSONObject </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 这次是用事件 ID 作为分区键值</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;EVENT_ID&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                })</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将原本属于同一个事件的特征合并起来，形成包含原始内容和特征计算结果的事件。这里实现了 Map/Reduce 计算模式中的 Reduce 部分</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FeatureReduceFunction</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 已经有了所有特征的计算结果，于是就可以根据基于规则的模型进行判定了</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuleBasedModeling</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        counts.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setParallelism</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        env.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;FlinkRiskEngine&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>在上面的代码中，我们先从 Kafka 读取出代表交易事件的 JSON 字符串，这个步骤是通过 createKafkaConsumer 方法完成。</p><p>然后，我们将输入的字符串，解析为 JSON 对象。这一步是通过 map 函数和 JSONObject.parseObject 函数完成。</p><p>再然后，由于需要并行计算所有特征，所以我们将事件根据计算特征所需要的字段，分解为多个&quot;事件分身&quot;。这一步是通过 flatMap 函数和 EventSplitFunction 类完成。注意，这里就是我们在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=614&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6426&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 09 课时</a>讲到过的，用 flatMap 函数实现流式处理 Map/Reduce 计算模式中的 Map 部分。</p><p>接着，我们让具有相同&quot;分区键值&quot;的&quot;事件分身&quot;，划分到相同的分区流 KeyedStream 里，进而路由到相同的状态存储节点上，存储到相同的 Keyed State 里。这一步是通过 keyBy 函数和 KeySelector 类完成的。</p><p>再接着，我们在状态节点上，完成对 Keyed State 里<strong>流信息状态</strong> 的读取和更新，并将读取出的流信息状态，也就是<strong>历史业务数据</strong>附加到&quot;事件分身&quot;上。这一步是通过 map 函数和 KeyEnrichFunction 类实现的。</p><p>之后，我们基于<strong>历史业务数据</strong>计算出特征，并将计算结果添加到&quot;事件分身&quot;上。这一步是通过 map 函数和 FeatureEnrichFunction 类完成的。</p><p>再之后，由于前面计算出特征的&quot;事件分身&quot;还散布在不同节点上，所以需要根据事件 ID，也就 event_id 字段，将原本属于同一事件的&quot;事件分身&quot;重新路由到相同的 KeyedStream 里。这一步是通过 keyBy 函数和 KeySelector 类完成的。</p><p>接着，由于属于同一事件的&quot;事件分身&quot;只是路由到了相同的 KeyedStream 里，要想得到完整的特征集合，还需要将这些&quot;事件分身&quot;合并起来。这一步是通过 flatMap 函数和 FeatureReduceFunction 类完成的。可以看到，这里就是在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=614&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6426&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 09 课时</a>讲到过的，用 flatMap 函数实现流式处理 Map/Reduce 计算模式中的 Reduce 部分。</p><p>最后，当我们得到包含完整特征集合的事件后，就可以根据基于规则的模型，对这次交易事件进行风险判定了。这一步是通过 map 函数和 RuleBasedModeling 类实现的。</p><p>至此，我们就实现了一个完整的风控引擎执行流程。这个风控引擎的代码是严格按照前面所描述的实现原理所开发的，在代码的注释部分也对各个步骤做了详细说明。</p><p>不过，上面的代码描述的是一个整体流程，其中的几个关键类实现还需要进一步详细说明。</p><h4 id="关键类实现" tabindex="-1">关键类实现 <a class="header-anchor" href="#关键类实现" aria-label="Permalink to &quot;关键类实现&quot;">​</a></h4><p><strong>首先是 EventSplitFunction 类</strong>。下面是它的具体实现代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EventSplitFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FlatMapFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// keys 就是所有特征 DSL 经过解析后，得到的特征相关字段，也就是&quot;分区键名&quot;，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 比如 pay_account.history 和 amount#rcv_account.history</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FlinkRiskEngine.keys;</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(JSONObject </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, Collector&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">out</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 分解之前生成一个事件ID，用于标记分解后的事件原本属于同一次事件</span></span>
<span class="line"><span style="color:#E1E4E8;">        String eventId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">getLongValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 原始事件本身不需要计算特征，特故而殊处理，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将其分区键名设置为&quot;event&quot;，分区键值设置为 eventId</span></span>
<span class="line"><span style="color:#E1E4E8;">        JSONObject event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        event.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;KEY_NAME&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;event&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        event.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;KEY_VALUE&quot;</span><span style="color:#E1E4E8;">, eventId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        event.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;EVENT_ID&quot;</span><span style="color:#E1E4E8;">, eventId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将原始事件的所有字段添加到代表原始事件的分身上来</span></span>
<span class="line"><span style="color:#E1E4E8;">        event.</span><span style="color:#B392F0;">putAll</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将代表原始事件的&quot;事件分身&quot;输出到&quot;事件分身&quot;流中</span></span>
<span class="line"><span style="color:#E1E4E8;">        out.</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 下面是根据特征计算时所需的字段，同时也是&quot;分区键名&quot;，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将事件划分为多个&quot;事件分身&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        keys.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            JSONObject json </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 事件发生时间戳</span></span>
<span class="line"><span style="color:#E1E4E8;">            json.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;timestamp&quot;</span><span style="color:#E1E4E8;">, timestamp);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 分区键名，可以解析出特征所需字段</span></span>
<span class="line"><span style="color:#E1E4E8;">            json.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;KEY_NAME&quot;</span><span style="color:#E1E4E8;">, key);  </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 分区键值，按照实现原理部分的图 2 所示原理生成</span></span>
<span class="line"><span style="color:#E1E4E8;">            json.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;KEY_VALUE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">genKeyValue</span><span style="color:#E1E4E8;">(value, key));</span></span>
<span class="line"><span style="color:#E1E4E8;">            json.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;EVENT_ID&quot;</span><span style="color:#E1E4E8;">, eventId);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将分区键名中包含的字段，也就是特征计算所需字段，添加到&quot;事件分身&quot;中</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">genKeyFields</span><span style="color:#E1E4E8;">(key).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(f </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> json.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(f, value.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(f)));</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将&quot;事件分身&quot;输出到&quot;事件分身&quot;流中</span></span>
<span class="line"><span style="color:#E1E4E8;">            out.</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(json);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据&quot;分区键名&quot;，也就是&quot;特征计算所需字段&quot;，计算出&quot;分区键值&quot;。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &quot;分区键值&quot;的计算方法，参见实现原理部分的图 2 所示原理。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">genKeyValue</span><span style="color:#E1E4E8;">(JSONObject </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 只支持&quot;.history&quot;这种类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 你也可以根据实际需要在此增加新的&quot;流信息状态类型&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">key.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.history&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unsupported key type&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从&quot;分区键名&quot;中解析出&quot;目标字段&quot;和&quot;条件字段&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// splits 的第 0 号元素是&quot;目标字段&quot;，第 1 号元素是&quot;条件字段&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] splits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.history&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String keyValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (splits.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// splits 第 0 号元素是&quot;目标字段&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果没有&quot;条件字段&quot;，就将&quot;目标字段&quot;当作&quot;条件字段&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            String target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> splits[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// &quot;分区键值&quot;的生成方式是：</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// &quot;目标字段名&quot; + &quot;#&quot; + &quot;条件字段值&quot; + &quot;流信息状态类</span></span>
<span class="line"><span style="color:#E1E4E8;">            keyValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s#%s.history&quot;</span><span style="color:#E1E4E8;">, target, String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(target)));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (splits.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// splits 第 0 号元素是&quot;目标字段&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            String target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> splits[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// splits 第 1 号元素是&quot;条件字段&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            String on </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> splits[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// &quot;分区键值&quot;的生成方式是：</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// &quot;目标字段名&quot; + &quot;#&quot; + &quot;条件字段值&quot; + &quot;流信息状态类型&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            keyValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s#%s.history&quot;</span><span style="color:#E1E4E8;">, target, String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(on)));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unsupported key type&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 返回&quot;分区键值&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> keyValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据&quot;分区键名&quot;解析出&quot;特征计算所需字段&quot;。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 比如，分区键名&quot;pay_account.history&quot;表示特征计算需要使用 pay_account 字段。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 再比如，分区键名&quot;amount#rcv_account.history&quot;表示特征计算需要使用 amount 和 rcv_account 字段。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">genKeyFields</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">key.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.history&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unsupported key type&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 解析&quot;分区键名&quot;，得到特征计算所需字段。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 后续会将这些字段以及它们的值添加到&quot;事件分身&quot;中。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] splits </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.history&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashSet&lt;&gt;(Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(splits));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EventSplitFunction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FlatMapFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// keys 就是所有特征 DSL 经过解析后，得到的特征相关字段，也就是&quot;分区键名&quot;，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 比如 pay_account.history 和 amount#rcv_account.history</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FlinkRiskEngine.keys;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(JSONObject </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, Collector&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">out</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 分解之前生成一个事件ID，用于标记分解后的事件原本属于同一次事件</span></span>
<span class="line"><span style="color:#24292E;">        String eventId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">getLongValue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 原始事件本身不需要计算特征，特故而殊处理，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将其分区键名设置为&quot;event&quot;，分区键值设置为 eventId</span></span>
<span class="line"><span style="color:#24292E;">        JSONObject event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        event.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;KEY_NAME&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;event&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        event.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;KEY_VALUE&quot;</span><span style="color:#24292E;">, eventId);</span></span>
<span class="line"><span style="color:#24292E;">        event.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;EVENT_ID&quot;</span><span style="color:#24292E;">, eventId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将原始事件的所有字段添加到代表原始事件的分身上来</span></span>
<span class="line"><span style="color:#24292E;">        event.</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将代表原始事件的&quot;事件分身&quot;输出到&quot;事件分身&quot;流中</span></span>
<span class="line"><span style="color:#24292E;">        out.</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 下面是根据特征计算时所需的字段，同时也是&quot;分区键名&quot;，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将事件划分为多个&quot;事件分身&quot;</span></span>
<span class="line"><span style="color:#24292E;">        keys.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            JSONObject json </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 事件发生时间戳</span></span>
<span class="line"><span style="color:#24292E;">            json.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;timestamp&quot;</span><span style="color:#24292E;">, timestamp);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 分区键名，可以解析出特征所需字段</span></span>
<span class="line"><span style="color:#24292E;">            json.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;KEY_NAME&quot;</span><span style="color:#24292E;">, key);  </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 分区键值，按照实现原理部分的图 2 所示原理生成</span></span>
<span class="line"><span style="color:#24292E;">            json.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;KEY_VALUE&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">genKeyValue</span><span style="color:#24292E;">(value, key));</span></span>
<span class="line"><span style="color:#24292E;">            json.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;EVENT_ID&quot;</span><span style="color:#24292E;">, eventId);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将分区键名中包含的字段，也就是特征计算所需字段，添加到&quot;事件分身&quot;中</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">genKeyFields</span><span style="color:#24292E;">(key).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(f </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> json.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(f, value.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(f)));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将&quot;事件分身&quot;输出到&quot;事件分身&quot;流中</span></span>
<span class="line"><span style="color:#24292E;">            out.</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(json);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据&quot;分区键名&quot;，也就是&quot;特征计算所需字段&quot;，计算出&quot;分区键值&quot;。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// &quot;分区键值&quot;的计算方法，参见实现原理部分的图 2 所示原理。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">genKeyValue</span><span style="color:#24292E;">(JSONObject </span><span style="color:#E36209;">event</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 只支持&quot;.history&quot;这种类型</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 你也可以根据实际需要在此增加新的&quot;流信息状态类型&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">key.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.history&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unsupported key type&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从&quot;分区键名&quot;中解析出&quot;目标字段&quot;和&quot;条件字段&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// splits 的第 0 号元素是&quot;目标字段&quot;，第 1 号元素是&quot;条件字段&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] splits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.history&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        String keyValue;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (splits.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// splits 第 0 号元素是&quot;目标字段&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果没有&quot;条件字段&quot;，就将&quot;目标字段&quot;当作&quot;条件字段&quot;</span></span>
<span class="line"><span style="color:#24292E;">            String target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> splits[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// &quot;分区键值&quot;的生成方式是：</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// &quot;目标字段名&quot; + &quot;#&quot; + &quot;条件字段值&quot; + &quot;流信息状态类</span></span>
<span class="line"><span style="color:#24292E;">            keyValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s#%s.history&quot;</span><span style="color:#24292E;">, target, String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(target)));</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (splits.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// splits 第 0 号元素是&quot;目标字段&quot;</span></span>
<span class="line"><span style="color:#24292E;">            String target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> splits[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// splits 第 1 号元素是&quot;条件字段&quot;</span></span>
<span class="line"><span style="color:#24292E;">            String on </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> splits[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// &quot;分区键值&quot;的生成方式是：</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// &quot;目标字段名&quot; + &quot;#&quot; + &quot;条件字段值&quot; + &quot;流信息状态类型&quot;</span></span>
<span class="line"><span style="color:#24292E;">            keyValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s#%s.history&quot;</span><span style="color:#24292E;">, target, String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(on)));</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unsupported key type&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 返回&quot;分区键值&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> keyValue;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据&quot;分区键名&quot;解析出&quot;特征计算所需字段&quot;。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 比如，分区键名&quot;pay_account.history&quot;表示特征计算需要使用 pay_account 字段。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 再比如，分区键名&quot;amount#rcv_account.history&quot;表示特征计算需要使用 amount 和 rcv_account 字段。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">genKeyFields</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">key.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.history&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unsupported key type&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 解析&quot;分区键名&quot;，得到特征计算所需字段。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 后续会将这些字段以及它们的值添加到&quot;事件分身&quot;中。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] splits </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.history&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;(Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(splits));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面的代码中，我们在 flatMap 函数里将代表原始事件的 value 对象，按照特征计算时所需要使用的字段进行分解，从而原本的一个事件被分解为多个&quot;事件分身&quot;。其中，除了一个&quot;事件分身&quot;代表原始事件本身以外，其他的&quot;事件分身&quot;则各自包含了原始事件的部分字段，之后在特征计算时需要使用到这些字段。</p><p>可以看到，这里我们用 flatMap 函数将一条数据转化成了多条数据，这正是我们在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=614&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6426&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 09 课时</a>讲到过的，用 flatMap 函数实现流式处理 Map/Reduce 计算模式中的 Map 部分。</p><p><strong>然后是 KeyEnrichFunction 类</strong>。下面是它的具体实现代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KeyEnrichFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RichMapFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ValueState 属于 Keyed State 的一种，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 我们用这种 ValueState 保存流信息状态，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在本课时的例子中，流信息状态就是历史业务数据。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ValueState&lt;</span><span style="color:#F97583;">Serializable</span><span style="color:#E1E4E8;">&gt; keyState;</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(Configuration </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 创建 ValueState</span></span>
<span class="line"><span style="color:#E1E4E8;">            keyState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ValueStateDescriptor&lt;&gt;(</span><span style="color:#9ECBFF;">&quot;saved keyState&quot;</span><span style="color:#E1E4E8;">, Serializable.class));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从 ValueState 中读取出流信息状态，也就是历史业务数据，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 并转化为指定类型后再返回。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">(Class&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">tClass</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tClass.</span><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;">(keyState.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将流信息状态，也就是历史业务数据，保存到 ValueState 中</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(Serializable </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">            keyState.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(v);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> JSONObject </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(JSONObject </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 从&quot;事件分身&quot;中，取出&quot;分区键名&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            String keyName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;KEY_NAME&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果&quot;分区键名&quot;是event，表明这是代表原始事件的&quot;事件分身&quot;，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 所以不做处理，直接返回。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (keyName.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> event;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果&quot;分区键名&quot;的后缀是&quot;.history&quot;，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 表明存储的是&quot;历史业务数据&quot;这种类型的流信息状态。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 其他类型的流信息状态暂不支持，你可以自行补充，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 比如用&quot;.window&quot;表明保存的是&quot;窗口聚合数据&quot;类型的流信息状态。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (keyName.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.history&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// &quot;.history&quot;类型的流信息状态是&quot;历史业务数据&quot;，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 所以从 ValueState 中读取出来的是history</span></span>
<span class="line"><span style="color:#E1E4E8;">                JSONArray history </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">(JSONArray.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果 history 为 null，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 说明这是该 KeyedStream 分区流上到达的第一个事件，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 所以需要创建一个空的JSON数组，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 后续就是用这个 JSON 数组来存储&quot;历史业务数据&quot;，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 并且保存到 ValueState 里的也就是这个 JSON 数组。</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (history </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    history </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONArray</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将最新到达的事件，添加到历史业务数据数组中</span></span>
<span class="line"><span style="color:#E1E4E8;">                history.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 我们在每个 KeyedStream 的 ValueState 中，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 只保存最近 100 个历史记录。</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 这个是人为定义的，你需要根据自己的业务设置合适的值。</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (history.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    history.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将&quot;历史业务数据&quot;数组保存到ValueState</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(history);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span></span>
<span class="line"><span style="color:#E1E4E8;">                JSONObject newEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// event 代表着&quot;事件分身&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                newEvent.</span><span style="color:#B392F0;">putAll</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将读取出的&quot;历史业务数据&quot;添加&quot;事件分身&quot;上</span></span>
<span class="line"><span style="color:#E1E4E8;">                newEvent.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;HISTORY&quot;</span><span style="color:#E1E4E8;">, history);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> newEvent;</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unsupported key type&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KeyEnrichFunction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RichMapFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ValueState 属于 Keyed State 的一种，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 我们用这种 ValueState 保存流信息状态，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在本课时的例子中，流信息状态就是历史业务数据。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ValueState&lt;</span><span style="color:#D73A49;">Serializable</span><span style="color:#24292E;">&gt; keyState;</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Configuration </span><span style="color:#E36209;">config</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建 ValueState</span></span>
<span class="line"><span style="color:#24292E;">            keyState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ValueStateDescriptor&lt;&gt;(</span><span style="color:#032F62;">&quot;saved keyState&quot;</span><span style="color:#24292E;">, Serializable.class));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从 ValueState 中读取出流信息状态，也就是历史业务数据，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 并转化为指定类型后再返回。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">tClass</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tClass.</span><span style="color:#6F42C1;">cast</span><span style="color:#24292E;">(keyState.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将流信息状态，也就是历史业务数据，保存到 ValueState 中</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(Serializable </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">            keyState.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> JSONObject </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(JSONObject </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 从&quot;事件分身&quot;中，取出&quot;分区键名&quot;</span></span>
<span class="line"><span style="color:#24292E;">            String keyName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;KEY_NAME&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果&quot;分区键名&quot;是event，表明这是代表原始事件的&quot;事件分身&quot;，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 所以不做处理，直接返回。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (keyName.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> event;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果&quot;分区键名&quot;的后缀是&quot;.history&quot;，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 表明存储的是&quot;历史业务数据&quot;这种类型的流信息状态。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 其他类型的流信息状态暂不支持，你可以自行补充，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 比如用&quot;.window&quot;表明保存的是&quot;窗口聚合数据&quot;类型的流信息状态。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (keyName.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.history&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// &quot;.history&quot;类型的流信息状态是&quot;历史业务数据&quot;，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 所以从 ValueState 中读取出来的是history</span></span>
<span class="line"><span style="color:#24292E;">                JSONArray history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">(JSONArray.class);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果 history 为 null，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 说明这是该 KeyedStream 分区流上到达的第一个事件，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 所以需要创建一个空的JSON数组，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 后续就是用这个 JSON 数组来存储&quot;历史业务数据&quot;，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 并且保存到 ValueState 里的也就是这个 JSON 数组。</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (history </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONArray</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将最新到达的事件，添加到历史业务数据数组中</span></span>
<span class="line"><span style="color:#24292E;">                history.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 我们在每个 KeyedStream 的 ValueState 中，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 只保存最近 100 个历史记录。</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 这个是人为定义的，你需要根据自己的业务设置合适的值。</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (history.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    history.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将&quot;历史业务数据&quot;数组保存到ValueState</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(history);</span></span>
<span class="line"><span style="color:#24292E;">                </span></span>
<span class="line"><span style="color:#24292E;">                JSONObject newEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// event 代表着&quot;事件分身&quot;</span></span>
<span class="line"><span style="color:#24292E;">                newEvent.</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将读取出的&quot;历史业务数据&quot;添加&quot;事件分身&quot;上</span></span>
<span class="line"><span style="color:#24292E;">                newEvent.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HISTORY&quot;</span><span style="color:#24292E;">, history);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> newEvent;</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unsupported key type&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>在上面的代码中，使用 ValueState 这一 Keyed State 实现了<strong>流信息状态</strong> 的<strong>分布式存储</strong>。我们将每个 KeyedStream 上最近 100 个历史记录保存在了 ValueState 中，并将历史记录附加到&quot;事件分身&quot;上，之后的特征计算就是基于这些历史记录。</p><p><strong>再然后是 FeatureEnrichFunction 类。</strong> 下面是它的具体实现代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FeatureEnrichFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RichMapFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 风控模型需要使用的特征，参见 FlinkRiskEngine 类里的注释</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]&gt; features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FlinkRiskEngine.features;</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> JSONObject </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(JSONObject </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 从&quot;事件分身&quot;中，取出&quot;分区键名&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            String keyName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;KEY_NAME&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果&quot;分区键名&quot;是event，表明这是代表原始事件的&quot;事件分身&quot;，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 所以不做处理，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (keyName.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 这里通过遍历的方式，找到 keyName 所能计算的所有特征，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 然后进行特征计算。这种方式讲解起来方便点，但是执行效率更低。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 设计更精良并且执行更高效的方式是直接通过映射表 map 的 get 方法，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 获取每个 keyName 能够计算的所有特征。你可以自行改造，并不难。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] feature </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> features) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 第 1 号元素是特征相关字段，同时也是分区键名，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 比如 amount#rcv_account.history。</span></span>
<span class="line"><span style="color:#E1E4E8;">                String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> feature[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">StringUtils.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(key, keyName)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 第 0 号元素是计算方法，比如 count、sum、count_distinct</span></span>
<span class="line"><span style="color:#E1E4E8;">                String function </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> feature[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 第 2 号元素是计算窗口，比如 1h</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> window </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseTimestamp</span><span style="color:#E1E4E8;">(feature[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 取出在 KeyEnrichFunction 中附加的&quot;历史业务数据&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                JSONArray history </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">getJSONArray</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;HISTORY&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// target 是&quot;目标字段&quot;，也就是计算针对的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">                String target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.history&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;#&quot;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">                Object featureResult;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 下面是根据特征计算方法选择具体实现函数，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 同样这里为了方便讲解，直接使用的if-else写法，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 更好的方法是通过映射表 map 来选择实现函数。</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;sum&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(function)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 如果计算方法是sum，就调用 sum 的实现函数 doSum，</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 第一个参数 history 是&quot;历史业务数据&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 第二个参数 target 是&quot;目标字段&quot;，也就计算针对的字段</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 第三个参数 window 是&quot;计算窗口&quot;，比如 1h</span></span>
<span class="line"><span style="color:#E1E4E8;">                    featureResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSum</span><span style="color:#E1E4E8;">(history, target, window);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;count&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(function)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 如果计算方法是count，就调用 count 的实现函数 doCount</span></span>
<span class="line"><span style="color:#E1E4E8;">                    featureResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doCount</span><span style="color:#E1E4E8;">(history, target, window);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;count_distinct&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equalsIgnoreCase</span><span style="color:#E1E4E8;">(function)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 如果计算方法是 count_distinct，</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 就调用 count_distinct 的实现函数 doCountDistinct</span></span>
<span class="line"><span style="color:#E1E4E8;">                    featureResult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doCountDistinct</span><span style="color:#E1E4E8;">(history, target, window);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnsupportedOperationException</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unsupported function[%s]&quot;</span><span style="color:#E1E4E8;">, function));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                value.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONObject</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                String featureName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;%s(%s,%s)&quot;</span><span style="color:#E1E4E8;">, feature[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], feature[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], feature[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将特征计算结果 featureResult 添加到&quot;事件分身&quot;的 features 字段。</span></span>
<span class="line"><span style="color:#E1E4E8;">                value.</span><span style="color:#B392F0;">getJSONObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(featureName, featureResult);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FeatureEnrichFunction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RichMapFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 风控模型需要使用的特征，参见 FlinkRiskEngine 类里的注释</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]&gt; features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FlinkRiskEngine.features;</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> JSONObject </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(JSONObject </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 从&quot;事件分身&quot;中，取出&quot;分区键名&quot;</span></span>
<span class="line"><span style="color:#24292E;">            String keyName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;KEY_NAME&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果&quot;分区键名&quot;是event，表明这是代表原始事件的&quot;事件分身&quot;，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 所以不做处理，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (keyName.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 这里通过遍历的方式，找到 keyName 所能计算的所有特征，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 然后进行特征计算。这种方式讲解起来方便点，但是执行效率更低。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 设计更精良并且执行更高效的方式是直接通过映射表 map 的 get 方法，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 获取每个 keyName 能够计算的所有特征。你可以自行改造，并不难。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] feature </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> features) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 第 1 号元素是特征相关字段，同时也是分区键名，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 比如 amount#rcv_account.history。</span></span>
<span class="line"><span style="color:#24292E;">                String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> feature[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">StringUtils.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(key, keyName)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 第 0 号元素是计算方法，比如 count、sum、count_distinct</span></span>
<span class="line"><span style="color:#24292E;">                String function </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> feature[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 第 2 号元素是计算窗口，比如 1h</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> window </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseTimestamp</span><span style="color:#24292E;">(feature[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 取出在 KeyEnrichFunction 中附加的&quot;历史业务数据&quot;</span></span>
<span class="line"><span style="color:#24292E;">                JSONArray history </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">getJSONArray</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HISTORY&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// target 是&quot;目标字段&quot;，也就是计算针对的字段</span></span>
<span class="line"><span style="color:#24292E;">                String target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.history&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;#&quot;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                Object featureResult;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 下面是根据特征计算方法选择具体实现函数，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 同样这里为了方便讲解，直接使用的if-else写法，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 更好的方法是通过映射表 map 来选择实现函数。</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;sum&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(function)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 如果计算方法是sum，就调用 sum 的实现函数 doSum，</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 第一个参数 history 是&quot;历史业务数据&quot;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 第二个参数 target 是&quot;目标字段&quot;，也就计算针对的字段</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 第三个参数 window 是&quot;计算窗口&quot;，比如 1h</span></span>
<span class="line"><span style="color:#24292E;">                    featureResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSum</span><span style="color:#24292E;">(history, target, window);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;count&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(function)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 如果计算方法是count，就调用 count 的实现函数 doCount</span></span>
<span class="line"><span style="color:#24292E;">                    featureResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doCount</span><span style="color:#24292E;">(history, target, window);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;count_distinct&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equalsIgnoreCase</span><span style="color:#24292E;">(function)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 如果计算方法是 count_distinct，</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 就调用 count_distinct 的实现函数 doCountDistinct</span></span>
<span class="line"><span style="color:#24292E;">                    featureResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doCountDistinct</span><span style="color:#24292E;">(history, target, window);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unsupported function[%s]&quot;</span><span style="color:#24292E;">, function));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                value.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                String featureName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s(%s,%s)&quot;</span><span style="color:#24292E;">, feature[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], feature[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], feature[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将特征计算结果 featureResult 添加到&quot;事件分身&quot;的 features 字段。</span></span>
<span class="line"><span style="color:#24292E;">                value.</span><span style="color:#6F42C1;">getJSONObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(featureName, featureResult);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>在上面的代码中，在获得每个特征计算所需字段的流信息状态（在本例中也就是&quot;历史业务数据&quot;）后，我们根据最初特征 DSL 的定义，选择对应的计算方法和窗口，然后完成特征的计算。比如，对于&quot;sum(amount#rcv_account.history,1h)&quot;，计算方法 sum 对应的实现是 doSum 函数，history 参数就是接收账户 rcv_account 交易金额 amount 的历史交易数据，而 1h 就是计算窗口。</p><p><strong>接下来是 FeatureReduceFunction 类</strong>。下面是它的具体实现代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FeatureReduceFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RichFlatMapFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ValueState 属于 Keyed State 的一种，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在这里我们使用 ValueState 来记录&quot;事件分身&quot;的合并结果。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 由于所有事件分身通过事件ID event_id 路由到同一 KeyedStream 后，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 是依次被顺序处理，所有&quot;事件分身&quot;是依次逐一被合并起来的。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 所以，我们需要用到 ValueState 保存合并的当前状态，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这就是 merged 的含义。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ValueState&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">&gt; merged;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 风控模型需要使用的特征，参见 FlinkRiskEngine 类里的注释</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[]&gt; features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FlinkRiskEngine.features;</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(Configuration </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 创建 ValueState</span></span>
<span class="line"><span style="color:#E1E4E8;">            merged </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ValueStateDescriptor&lt;&gt;(</span><span style="color:#9ECBFF;">&quot;saved reduceJson&quot;</span><span style="color:#E1E4E8;">, JSONObject.class));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(JSONObject </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, Collector&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">out</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 从 ValueState 中读取出当前&quot;事件分身&quot;合并的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">            JSONObject mergedValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> merged.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果 mergedValue 为 null，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 说明这是到达的第一个&quot;事件分身&quot;，</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 所以创建一个空 JSON 对象，用于之后合并所有&quot;事件分身&quot;。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mergedValue </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                mergedValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 从&quot;事件分身&quot;中，取出&quot;分区键名&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            String keyName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;KEY_NAME&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (keyName.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将代表原始事件的&quot;事件分身&quot;添加到当前合并结果中</span></span>
<span class="line"><span style="color:#E1E4E8;">                mergedValue.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event&quot;</span><span style="color:#E1E4E8;">, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将包含了各个特征计算结果的&quot;事件分身&quot;添加到当前合并结果中</span></span>
<span class="line"><span style="color:#E1E4E8;">                mergedValue.</span><span style="color:#B392F0;">putIfAbsent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSONObject</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">mergedValue.</span><span style="color:#B392F0;">getJSONObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">putAll</span><span style="color:#E1E4E8;">(value.</span><span style="color:#B392F0;">getJSONObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mergedValue.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mergedValue.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> mergedValue.</span><span style="color:#B392F0;">getJSONObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> features.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果属于同一个事件的所有特征结果都已经收集齐全了，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 就可以将该合并结果输出了</span></span>
<span class="line"><span style="color:#E1E4E8;">                out.</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(mergedValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 由于特征已经合并完成了，状态就没有用了，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 将状态清掉，以免资源泄漏。</span></span>
<span class="line"><span style="color:#E1E4E8;">                merged.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果属于同一事件ID的各个&quot;事件分身&quot;尚未收集齐全，</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 就更新下合并状态，不做任何输出</span></span>
<span class="line"><span style="color:#E1E4E8;">                merged.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(mergedValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FeatureReduceFunction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RichFlatMapFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ValueState 属于 Keyed State 的一种，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在这里我们使用 ValueState 来记录&quot;事件分身&quot;的合并结果。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 由于所有事件分身通过事件ID event_id 路由到同一 KeyedStream 后，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 是依次被顺序处理，所有&quot;事件分身&quot;是依次逐一被合并起来的。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 所以，我们需要用到 ValueState 保存合并的当前状态，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这就是 merged 的含义。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ValueState&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">&gt; merged;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 风控模型需要使用的特征，参见 FlinkRiskEngine 类里的注释</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[]&gt; features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FlinkRiskEngine.features;</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Configuration </span><span style="color:#E36209;">config</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建 ValueState</span></span>
<span class="line"><span style="color:#24292E;">            merged </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ValueStateDescriptor&lt;&gt;(</span><span style="color:#032F62;">&quot;saved reduceJson&quot;</span><span style="color:#24292E;">, JSONObject.class));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(JSONObject </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, Collector&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">out</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 从 ValueState 中读取出当前&quot;事件分身&quot;合并的结果</span></span>
<span class="line"><span style="color:#24292E;">            JSONObject mergedValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> merged.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果 mergedValue 为 null，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 说明这是到达的第一个&quot;事件分身&quot;，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 所以创建一个空 JSON 对象，用于之后合并所有&quot;事件分身&quot;。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mergedValue </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                mergedValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 从&quot;事件分身&quot;中，取出&quot;分区键名&quot;</span></span>
<span class="line"><span style="color:#24292E;">            String keyName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;KEY_NAME&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (keyName.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将代表原始事件的&quot;事件分身&quot;添加到当前合并结果中</span></span>
<span class="line"><span style="color:#24292E;">                mergedValue.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event&quot;</span><span style="color:#24292E;">, value);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将包含了各个特征计算结果的&quot;事件分身&quot;添加到当前合并结果中</span></span>
<span class="line"><span style="color:#24292E;">                mergedValue.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">mergedValue.</span><span style="color:#6F42C1;">getJSONObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(value.</span><span style="color:#6F42C1;">getJSONObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mergedValue.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mergedValue.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> mergedValue.</span><span style="color:#6F42C1;">getJSONObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> features.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果属于同一个事件的所有特征结果都已经收集齐全了，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 就可以将该合并结果输出了</span></span>
<span class="line"><span style="color:#24292E;">                out.</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(mergedValue);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 由于特征已经合并完成了，状态就没有用了，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将状态清掉，以免资源泄漏。</span></span>
<span class="line"><span style="color:#24292E;">                merged.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果属于同一事件ID的各个&quot;事件分身&quot;尚未收集齐全，</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 就更新下合并状态，不做任何输出</span></span>
<span class="line"><span style="color:#24292E;">                merged.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(mergedValue);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>在上面的代码中，我们将分布在各个计算节点上的特征计算结果，按照事件 ID 路由到相同的 KeyedStream 上，然后用 ValueState 保存合并结果。当最终所有特征计算结果都收集齐全后，就可以将这个最终合并结果输出了。</p><p>同时为了防止资源泄漏，还清除掉不再需要的 ValueState 状态。你可以特别注意下，这里我们就是用 flatMap 函数配合 KeyedStream 和 ValueState，实现了流计算 Map/Reduce 模式中的 Reduce 部分。它与前面 EventSplitFunction 类的功能是相对应的，在 EventSplitFunction 类中，我们用 flatMap 函数配合 KeyedStream，实现了流计算 Map/Reduce 模式中的 Map 部分。</p><p><strong>最后是 RuleBasedModeling 类</strong>。下面是它的具体实现代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuleBasedModeling</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MapFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">JSONObject</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> JSONObject </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(JSONObject </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 按照前面我们设定的交易异常规则，判定交易是否异常</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> isAnomaly </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">value.</span><span style="color:#B392F0;">getJSONObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getDouble</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;count(pay_account.history,1h)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">getJSONObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getDouble</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sum(amount#rcv_account.history,1h)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">getJSONObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;features&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getDouble</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;count_distinct(rcv_account#pay_account.history,1h)&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">// 将风险判定结果添加到事件上</span></span>
<span class="line"><span style="color:#E1E4E8;">            value.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;isAnomaly&quot;</span><span style="color:#E1E4E8;">, isAnomaly);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuleBasedModeling</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">JSONObject</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> JSONObject </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(JSONObject </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 按照前面我们设定的交易异常规则，判定交易是否异常</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> isAnomaly </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">value.</span><span style="color:#6F42C1;">getJSONObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getDouble</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;count(pay_account.history,1h)&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">getJSONObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getDouble</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sum(amount#rcv_account.history,1h)&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">getJSONObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;features&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getDouble</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;count_distinct(rcv_account#pay_account.history,1h)&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> );</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">// 将风险判定结果添加到事件上</span></span>
<span class="line"><span style="color:#24292E;">            value.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;isAnomaly&quot;</span><span style="color:#24292E;">, isAnomaly);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>在上面的代码中，我们通过基于规则的模型，来判定本次交易事件是否异常。我们将判定的结果附加在了事件的 isAnomaly 字段。这个附加了判定结果的事件，就是风控引擎的最终风险评分输出。</p><p>至此，一个基于 Flink 的风控引擎就实现了。本小节的完整代码可以<a href="https://github.com/alain898/realtime_stream_computing_course/blob/main/course20/src/main/java/com/alain898/course/realtimestreaming/course20/riskengine/FlinkRiskEngine.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">参见这里的代码</a>。</p><p>可以看到，我们在整个实现过程中，为了实现特征计算的并行化，充分运用了 flatMap、KeyedStream、Keyed State 的作用，实现了流计算的 Map/Reduce 或者说 Fork/Join 计算模式。</p><p>另外，我们在计算过程中，为了记录历史业务信息，还使用了 Keyed State 来保存流信息状态，这正是 Keyed State 最大的价值所在！如果没有 Flink 提供的 Keyed State，可能我们又会采用类似于 Redis 这样的外部数据库了，这会使系统复杂很多，并且一定程度会降低处理的性能以及系统的水平扩展能力。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>今天，我们使用 Flink 实现了一个包含特征提取和风险评分功能的风控引擎。</p><p>在实现过程中，我们充分运用了 Flink 对流的逻辑划分功能以及状态管理功能，它们分别对应着 KeyedStream 和 Keyed State。其中，KeyedStream 实现了计算能力的水平扩展，而 Keyed State 实现了状态存储的水平扩展。</p><p>如果从资源的角度看，KeyedStream 的扩展相当于是对 CPU 的水平扩展，而 Keyed State 的扩展则相当于是对&quot;内存&quot;的扩展。是的，你没有看错，我的意思就是&quot;内存&quot;，而不是&quot;磁盘&quot;。对于这点，你可以先仔细体会下。我在课程后续的彩蛋 1 中，对于这点还会专门详细讲解。</p><p>另外，用 flatMap、KeyedStream、Keyed State 来实现流计算的 Map/Reduce 或者说 Fork/Join 计算模式，以及用 Keyed State 来保存各种流信息状态，这两点是我希望你能够重点且熟练掌握的内容，所以你一定要好好理解下。</p><p>最后，我们今天的例子在描述特征时运用了 DSL，也就是领域定义语言。你在工作中用到过 DSL 吗？使用 DSL 有什么好处呢？可以将你的想法或问题写在留言区。</p><p>下面是本课时的知识脑图，以帮助你理解。</p>`,51);function y(i,u,F,q,A,D){const s=p("Image");return o(),e("div",null,[c,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/27/AD/Cgp9HWBdg3KAe4vDAAMMdbPVA5A512.png"}),r,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/27/AD/Cgp9HWBdg5OAEkfmAAW3vi5u3Gs974.png"}),E,n(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M01/27/AA/CioPOWBdg8WAcuRmAALNmz21mcs289.png"})])}const d=l(t,[["render",y]]);export{S as __pageData,d as default};
