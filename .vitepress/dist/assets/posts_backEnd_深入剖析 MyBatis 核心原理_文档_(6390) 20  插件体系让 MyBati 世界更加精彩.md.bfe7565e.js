import{_ as o,D as e,o as t,g as r,J as p,h as n,Q as l,m as s}from"./chunks/framework.f67d7268.js";const _=JSON.parse('{"title":"20插件体系让MyBati世界更加精彩","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6390) 20  插件体系让 MyBati 世界更加精彩.md","filePath":"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6390) 20  插件体系让 MyBati 世界更加精彩.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/深入剖析 MyBatis 核心原理_文档/(6390) 20  插件体系让 MyBati 世界更加精彩.md"},E=l('<h1 id="_20插件体系让mybati世界更加精彩" tabindex="-1">20插件体系让MyBati世界更加精彩 <a class="header-anchor" href="#_20插件体系让mybati世界更加精彩" aria-label="Permalink to &quot;20插件体系让MyBati世界更加精彩&quot;">​</a></h1><p>插件是应用程序中最常见的一种扩展方式，比如，在Chrome 浏览器上我们可以安装各种插件来增强浏览器自身的功能。在 Java 世界中，很多开源框架也使用了插件扩展方式，例如，Dubbo 通过 SPI 方式实现了插件化的效果，SkyWalking 依赖&quot;微内核+插件&quot;的架构轻松加载插件，实现扩展效果。</p><p>MyBatis 作为持久层框架中的佼佼者，也提供了类似的插件扩展机制。MyBatis 将插件单独分离出一个模块，位于 org.apache.ibatis.plugin 包中，在该模块中主要使用了两种设计模式：<strong>代理模式</strong> 和<strong>责任链模式</strong>。</p><p>插件模块使用的代理模式是通过 JDK 动态代理实现的，代理模式的基础知识以及 JDK 动态代理的核心原理我们已经在前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6377&amp;fileGuid=yRRkd8P3qkVGvWVJ" target="_blank" rel="noreferrer">《06 | 日志框架千千万，MyBatis 都能兼容的秘密是什么？》</a>中介绍过了。下面我们就重点来看一下责任链模式的基础知识。</p><h3 id="责任链模式" tabindex="-1">责任链模式 <a class="header-anchor" href="#责任链模式" aria-label="Permalink to &quot;责任链模式&quot;">​</a></h3><p>我们在写业务系统的时候，最常用的协议就是 HTTP 协议，最常用的 HTTP Server 是 Tomcat，所以这里我们就结合 Tomcat 处理 HTTP 请求的场景来说明责任链模式的核心思想。</p><p>HTTP 协议可简单分为请求头和请求体两部分，Tomcat 在收到一条完整的 HTTP 请求时，也会将其分为请求头和请求体两部分进行处理的。不过在真正的 Tomcat 实现中，会将 HTTP 请求细分为更多部分，然后逐步进行处理，整个 Tomcat 代码处理 HTTP 请求的实现也更为复杂。</p><p>试想一下，Tomcat 将处理请求的各个细节的实现代码都堆到一个类中，那这个类的代码会非常长，维护起来也非常痛苦，可以说是&quot;牵一发而动全身&quot;。如果 HTTP 请求升级，那就需要修改这个臃肿的类，显然是不符合&quot;开放-封闭&quot;原则的。</p><p>为了实现像 HTTP 这种多部分构成的协议的处理逻辑，我们可以使用责任链模式来划分协议中各个部分的处理逻辑，将那些臃肿实现类<strong>拆分成多个 Handler（或 Interceptor）处理器，在每个 Handler（或 Interceptor）处理器中只专注于 HTTP 协议中一部分数据的处理</strong>。我们可以开发多个 Handler 处理器，然后按照业务需求将多个 Handler 对象组合成一个链条，从而实现整个 HTTP 请求的处理。</p><p>这样做既可以将复杂、臃肿的逻辑拆分，便于维护，又能将不同的 Handler 处理器分配给不同的程序员开发，提高开发效率。</p><p><strong>在责任链模式中，Handler 处理器会持有对下一个 Handler 处理器的引用</strong>，也就是说当一个 Handler 处理器完成对关注部分的处理之后，会将请求通过这个引用传递给下一个 Handler 处理器，如此往复，直到整个责任链中全部的 Handler 处理器完成处理。责任链模式的核心类图如下所示：</p>',11),y=s("p",null,"责任链模式核心类图",-1),i=s("p",null,"下面我们再从复用的角度看一下责任链模式带来的好处。",-1),g=s("p",null,"假设我们自定义了一套协议，其请求中包含 A、B、C 三个核心部分，业务系统使用 Handler A、Handler B、Handler C 三个处理器来处理这三部分的数据。如果业务变化导致我们的自定义协议也发生了变化，协议中的数据变成了 A、C、D 这三部分，那么我们只需要动态调整构成责任链的 Handler 处理器即可，最新的责任链变为 Handler A、Handler C、Handler D。如下图所示：",-1),u=l(`<p>责任链示意图</p><p>由此可见，<strong>责任链模式可以帮助我们复用 Handler 处理器的实现逻辑，提高系统的可维护性和灵活性</strong>，很好地符合了&quot;开放-封闭&quot;原则。</p><h3 id="interceptor" tabindex="-1">Interceptor <a class="header-anchor" href="#interceptor" aria-label="Permalink to &quot;Interceptor&quot;">​</a></h3><p>介绍完责任链模式的基础知识之后，我们接着就来讲解MyBatis 中插件的相关内容。</p><p><strong>MyBatis 插件模块中最核心的接口就是 Interceptor 接口，它是所有 MyBatis 插件必须要实现的接口</strong>，其核心定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Interceptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 插件实现类中需要实现的拦截逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object </span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(Invocation </span><span style="color:#FFAB70;">invocation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在该方法中会决定是否触发intercept()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Plugin.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(target, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setProperties</span><span style="color:#E1E4E8;">(Properties </span><span style="color:#FFAB70;">properties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在整个MyBatis初始化过程中用来初始化该插件的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Interceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 插件实现类中需要实现的拦截逻辑</span></span>
<span class="line"><span style="color:#24292E;">  Object </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(Invocation </span><span style="color:#E36209;">invocation</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在该方法中会决定是否触发intercept()方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">target</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Plugin.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(target, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setProperties</span><span style="color:#24292E;">(Properties </span><span style="color:#E36209;">properties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在整个MyBatis初始化过程中用来初始化该插件的方法</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MyBatis允许我们自定义 Interceptor 拦截 SQL 语句执行过程中的某些关键逻辑，允许拦截的方法有：Executor 类中的 update()、query()、flushStatements()、commit()、rollback()、getTransaction()、close()、isClosed()方法，ParameterHandler 中的 setParameters()、getParameterObject() 方法，ResultSetHandler中的 handleOutputParameters()、handleResultSets()方法，以及StatementHandler 中的parameterize()、prepare()、batch()、update()、query()方法。</p><p>通过本课程模块三的介绍我们知道，上述方法都是 MyBatis 执行 SQL 语句的核心组件，所以在使用自定义 Interceptor 拦截这些方法之前，我们需要非常了解 MyBatis 的核心原理以及 Interceptor 的拦截行为。</p><p>下面我们就结合一个 MyBatis 插件示例，介绍一下 MyBatis 中 Interceptor 接口的具体使用方式。这里我们首先定义一个DemoPlugin 类，定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Intercepts</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Signature</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executor.class, </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;query&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                MappedStatement.class, Object.class, RowBounds.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">                ResultHandler.class}),</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Signature</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executor.class, </span><span style="color:#79B8FF;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {boolean.class})</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Interceptor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> logLevel; </span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略其他方法的实现</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Intercepts</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Signature</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executor.class, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;query&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                MappedStatement.class, Object.class, RowBounds.class,</span></span>
<span class="line"><span style="color:#24292E;">                ResultHandler.class}),</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Signature</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executor.class, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {boolean.class})</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Interceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> logLevel; </span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略其他方法的实现</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们看到 DemoPlugin 这个示例类除了实现 Interceptor 接口外，还被标注了 @Intercepts 和 @Signature 两个注解。@Intercepts 注解中可以配置多个 @Signature 注解，<strong>@Signature 注解用来指定 DemoPlugin 插件实现类要拦截的目标方法信息</strong>，其中的 type 属性指定了要拦截的类，method 属性指定了要拦截的目标方法名称，args 属性指定了要拦截的目标方法的参数列表。通过 @Signature 注解中的这三个配置，DemoPlugin 就可以确定要拦截的目标方法的方法签名。在上面的示例中，DemoPlugin 会拦截 Executor 接口中的 query(MappedStatement, Object, RowBounds, ResultHandler) 方法和 close(boolean) 方法。</p><p>完成 DemoPlugin 实现类的编写之后，为了让 MyBatis 知道这个类的存在，我们要在 mybatis-config.xml 全局配置文件中对 DemoPlugin 进行配置，相关配置片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">plugins</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">plugin interceptor</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;design.Interceptor.DemoPlugin&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 对拦截器中的属性进行初始化 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;logLevel&quot;</span><span style="color:#E1E4E8;"> value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">plugins</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">plugin interceptor</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;design.Interceptor.DemoPlugin&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 对拦截器中的属性进行初始化 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;logLevel&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>通过前面<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=612&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6381&amp;fileGuid=yRRkd8P3qkVGvWVJ" target="_blank" rel="noreferrer">《10 | 鸟瞰 MyBatis 初始化，把握 MyBatis 启动流程脉络（上）》</a>对初始化流程的介绍我们知道，MyBatis 会在初始化流程中解析 mybatis-config.xml 全局配置文件，其中的 <code>&lt;plugin&gt;</code> 节点就会被处理成相应的 Interceptor 对象，同时调用 setProperties() 方法完成配置的初始化，最后MyBatis 会将 Interceptor 对象添加到Configuration.interceptorChain 这个全局的 Interceptor 列表中保存。</p><p>介绍完 Interceptor 的加载和初始化原理之后，我们再来看 Interceptor 是如何拦截目标类中的目标方法的。通过本课程模块三的介绍，我们知道 MyBatis 中 Executor、ParameterHandler、ResultSetHandler、StatementHandler 等与 SQL 执行相关的核心组件都是通过 Configuration.new*() 方法生成的。以 newExecutor() 方法为例，我们会看到下面这行代码，InterceptorChain.pluginAll() 方法会为目标对象（也就是这里的 Executor 对象）创建代理对象并返回。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Executor) interceptorChain.</span><span style="color:#B392F0;">pluginAll</span><span style="color:#E1E4E8;">(executor);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Executor) interceptorChain.</span><span style="color:#6F42C1;">pluginAll</span><span style="color:#24292E;">(executor);</span></span></code></pre></div><p>从名字就可以看出，<strong>InterceptorChain 是 Interceptor 构成的责任链</strong> ，在其 interceptors 字段（ArrayList<code>&lt;Interceptor&gt;</code>类型）中维护了 MyBatis 初始化过程中加载到的全部 Interceptor 对象，在其 pluginAll() 方法中，会调用每个 Interceptor 的 plugin() 方法创建目标类的代理对象，核心实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">pluginAll</span><span style="color:#E1E4E8;">(Object target) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Interceptor interceptor </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> interceptors) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历interceptors集合，调用每个Interceptor对象的plugin()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    target </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> interceptor.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(target);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> target;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">pluginAll</span><span style="color:#24292E;">(Object target) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Interceptor interceptor </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> interceptors) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历interceptors集合，调用每个Interceptor对象的plugin()方法</span></span>
<span class="line"><span style="color:#24292E;">    target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> interceptor.</span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(target);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> target;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="plugin" tabindex="-1">Plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;Plugin&quot;">​</a></h3><p>了解了 Interceptor 的加载流程和基本工作原理之后，我们再来介绍一下自定义 Interceptor 的实现。我们首先回到 DemoPlugin 这个示例，关注其中 plugin() 方法的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(Object target) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 依赖Plugin工具类创建代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Plugin.</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(target, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">plugin</span><span style="color:#24292E;">(Object target) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 依赖Plugin工具类创建代理对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Plugin.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(target, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 DemoPlugin 示例中，我们<strong>可以看到 plugin() 方法依赖 MyBatis 提供的 Plugin.wrap() 工具方法创建代理对象，这也是我们推荐的实现方式</strong>。</p><p>MyBatis 提供的 Plugin 工具类实现了 JDK 动态代理中的 InvocationHandler 接口，同时维护了下面三个关键字段。</p><ul><li><p>target（Object 类型）：要拦截的目标对象。</p></li><li><p>signatureMap（Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; 类型）：记录了 @Signature 注解中配置的方法信息，也就是代理要拦截的目标方法信息。</p></li><li><p>interceptor（Interceptor 类型）：目标方法被拦截后，要执行的逻辑就写在了该 Interceptor 对象的 intercept() 方法中。</p></li></ul><p>既然 Plugin 实现了 InvocationHandler 接口，我们自然需要关注其 invoke() 方法实现。在 invoke() 方法中，Plugin 会检查当前要执行的方法是否在 signatureMap 集合中，如果在其中的话，表示当前待执行的方法是我们要拦截的目标方法之一，也就会调用 intercept() 方法执行代理逻辑；如果未在其中的话，则表示当前方法不应被代理，直接执行当前的方法即可。下面就是 Plugin.invoke() 方法的核心实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(Object proxy, Method method, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取当前待执行方法所属的类</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">&gt; methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> signatureMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(method.</span><span style="color:#B392F0;">getDeclaringClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果当前方法需要被代理，则执行intercept()方法进行拦截处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (methods </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> methods.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(method)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> interceptor.</span><span style="color:#B392F0;">intercept</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Invocation</span><span style="color:#E1E4E8;">(target, method, args));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果当前方法不需要被代理，则调用target对象的相应方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(target, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> ExceptionUtil.</span><span style="color:#B392F0;">unwrapThrowable</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object proxy, Method method, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取当前待执行方法所属的类</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">&gt; methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> signatureMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果当前方法需要被代理，则执行intercept()方法进行拦截处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (methods </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> methods.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(method)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> interceptor.</span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Invocation</span><span style="color:#24292E;">(target, method, args));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果当前方法不需要被代理，则调用target对象的相应方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(target, args);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionUtil.</span><span style="color:#6F42C1;">unwrapThrowable</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里传入 Interceptor.intercept() 方法的是一个 Invocation 对象，其中封装了目标对象、目标方法以及目标方法的相关参数，在 DemoInterceptor.intercept() 方法实现中，就是通过调用 Invocation.proceed() 方法完成目标方法的执行。当然，我们自定义的 Interceptor 实现并不一定必须调用目标方法。这样，经过DemoInterceptor 的拦截之后，也就改变了 MyBatis 核心组件的行为。</p><p>最后，我们来看一下 Plugin 工具类对外提供的 wrap() 方法是如何创建 JDK 动态代理的。在 wrap() 方法中，Plugin 工具类会解析传入的 Interceptor 实现的 @Signature 注解信息，并与当前传入的目标对象类型进行匹配，<strong>只有在匹配的情况下，才会生成代理对象，否则直接返回目标对象</strong>。具体的代码实现以及注释说明如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(Object target, Interceptor interceptor) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取自定义Interceptor实现类上的@Signature注解信息，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里的getSignatureMap()方法会解析@Signature注解，得到要拦截的类以及要拦截的方法集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;, Set&lt;</span><span style="color:#F97583;">Method</span><span style="color:#E1E4E8;">&gt;&gt; signatureMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSignatureMap</span><span style="color:#E1E4E8;">(interceptor);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查当前传入的target对象是否为@Signature注解要拦截的类型，如果是的话，就</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用JDK动态代理的方式创建代理对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;[] interfaces </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAllInterfaces</span><span style="color:#E1E4E8;">(type, signatureMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (interfaces.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建JDK动态代理</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Proxy.</span><span style="color:#B392F0;">newProxyInstance</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                type.</span><span style="color:#B392F0;">getClassLoader</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                interfaces,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 这里使用的InvocationHandler就是Plugin本身</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Plugin</span><span style="color:#E1E4E8;">(target, interceptor, signatureMap));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> target;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(Object target, Interceptor interceptor) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取自定义Interceptor实现类上的@Signature注解信息，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里的getSignatureMap()方法会解析@Signature注解，得到要拦截的类以及要拦截的方法集合</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, Set&lt;</span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">&gt;&gt; signatureMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSignatureMap</span><span style="color:#24292E;">(interceptor);</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查当前传入的target对象是否为@Signature注解要拦截的类型，如果是的话，就</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用JDK动态代理的方式创建代理对象</span></span>
<span class="line"><span style="color:#24292E;">    Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] interfaces </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAllInterfaces</span><span style="color:#24292E;">(type, signatureMap);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (interfaces.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建JDK动态代理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Proxy.</span><span style="color:#6F42C1;">newProxyInstance</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                type.</span><span style="color:#6F42C1;">getClassLoader</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                interfaces,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 这里使用的InvocationHandler就是Plugin本身</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Plugin</span><span style="color:#24292E;">(target, interceptor, signatureMap));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> target;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我们重点介绍了 MyBatis 中插件模块的内容。</p><ul><li><p>首先，讲解了责任链模式的核心内容，它是 MyBatis 插件底层设计的核心思想。</p></li><li><p>然后，介绍了 Interceptor 接口，通过实现 Interceptor 接口，我们可以自定义插件的具体逻辑。</p></li><li><p>最后，分析了 Plugin 这个辅助类的核心功能，它是实现自定义 Interceptor 必不可少的辅助工具。Plugin 工具类通过 JDK 动态代理的方式，帮助我们完成了对 @Signature 等注解的解析，也帮助我们真正拦截了 MyBatis 中的核心方法，改变了MyBatis 内核的行为。</p></li></ul><p>在实际应用中，MyBatis 一般会与 Spring 框架集成使用，所以下一讲，我们就来看看 MyBatis 与 Spring 集成的核心原理，记得按时来听课。</p><hr><p>[</p>`,35),d=s("p",null,[n("]("),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/Mka"),n(")")],-1),h=s("p",null,[s("strong",null,"《Java 工程师高薪训练营》")],-1),F=s("p",null,[n("实战训练+面试模拟+大厂内推，想要提升技术能力，进大厂拿高薪，"),s("a",{href:"https://shenceyun.lagou.com/t/Mka",target:"_blank",rel:"noreferrer"},"点击链接，提升自己"),n("！")],-1);function D(A,m,b,C,v,B){const a=e("Image");return t(),r("div",null,[E,p(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/2B/9B/Cgp9HWBkGWmAWIlRAAELQ6DrFHI270.png"}),n(),y,i,g,p(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/2B/A3/CioPOWBkGV-APGMKAAD2cU0i0WI541.png"}),n(),u,p(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/3E/CgqCHl-s60-AC0B_AAhXSgFweBY762.png"}),n(),d,h,F])}const P=o(c,[["render",D]]);export{_ as __pageData,P as default};
