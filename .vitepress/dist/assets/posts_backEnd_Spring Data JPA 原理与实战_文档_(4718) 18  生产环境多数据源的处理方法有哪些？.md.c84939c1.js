import{_ as o,j as e,o as t,g as r,k as n,h as s,Q as l,s as p}from"./chunks/framework.cfb14fe0.js";const k=JSON.parse('{"title":"18生产环境多数据源的处理方法有哪些？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4718) 18  生产环境多数据源的处理方法有哪些？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4718) 18  生产环境多数据源的处理方法有哪些？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4718) 18  生产环境多数据源的处理方法有哪些？.md"},y=l('<h1 id="_18生产环境多数据源的处理方法有哪些" tabindex="-1">18生产环境多数据源的处理方法有哪些？ <a class="header-anchor" href="#_18生产环境多数据源的处理方法有哪些" aria-label="Permalink to &quot;18生产环境多数据源的处理方法有哪些？&quot;">​</a></h1><p>上一讲我们介绍了 DataSource 的相关内容，今天我们来介绍一下多数据源的处理方法有哪些。</p><p>工作中我们时常会遇到跨数据库操作的情况，这时候就需要配置多数据源，那么如何配置呢？常用的方式及其背后的原理支撑是什么呢？我们下面来了解一下。</p><p>首先看看两种常见的配置方式，分别为通过多个 @Configuration 文件、利用 AbstractRoutingDataSource 配置多数据源。</p><h3 id="第一种方式-多个数据源的-configuration-的配置方法" tabindex="-1">第一种方式：多个数据源的 @Configuration 的配置方法 <a class="header-anchor" href="#第一种方式-多个数据源的-configuration-的配置方法" aria-label="Permalink to &quot;第一种方式：多个数据源的 @Configuration 的配置方法&quot;">​</a></h3><p>这种方式的主要思路是，不同 Package 下面的实体和 Repository 采用不同的 Datasource。所以我们改造一下我们的 example 目录结构，来看看不同 Repositories 的数据源是怎么处理的。</p><p><strong>第一步：规划 Entity 和 Repository 的目录结构，为了方便配置多数据源。</strong></p><p>将 User 和 UserAddress、UserRepository 和 UserAddressRepository 移动到 db1 里面；将 UserInfo 和 UserInfoRepository 移动到 db2 里面。如下图所示：</p>',8),E=l(`<p>我们把实体和 Repository 分别放到了 db1 和 db2 两个目录里面，这时我们假设数据源 1 是 MySQL，User 表和 UserAddress 在数据源 1 里面，那么我们需要配置一个 DataSource1 的 Configuration 类，并且在里面配置 DataSource、TransactionManager 和 EntityManager。</p><p><strong>第二步：配置 DataSource1Config 类。</strong></p><p>目录结构调整完之后，接下来我们开始配置数据源，完整代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableTransactionManagement</span><span style="color:#6A737D;">//开启事务</span></span>
<span class="line"><span style="color:#6A737D;">//利用EnableJpaRepositories配置哪些包下面的Repositories，采用哪个EntityManagerFactory和哪个trannsactionManager</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;com.example.jpa.example1.db1&quot;</span><span style="color:#E1E4E8;">},</span><span style="color:#6A737D;">//数据源1的repository的包路径</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">entityManagerFactoryRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db1EntityManagerFactory&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//改变数据源1的EntityManagerFactory的默认值，改为db1EntityManagerFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">transactionManagerRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db1TransactionManager&quot;</span><span style="color:#6A737D;">//改变数据源1的transactionManager的默认值，改为db1TransactionManager</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSource1Config</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 指定数据源1的dataSource配置</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Primary</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db1DataSourceProperties&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;spring.datasource1&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//数据源1的db配置前缀采用spring.datasource1</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataSourceProperties </span><span style="color:#B392F0;">dataSourceProperties</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 可以选择不同的数据源，这里我用HikariDataSource举例，创建数据源1</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">db1DataSourceProperties</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Primary</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db1DataSource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.datasource.hikari.db1&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//配置数据源1所用的hikari配置key的前缀</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> HikariDataSource </span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db1DataSourceProperties&quot;</span><span style="color:#E1E4E8;">) DataSourceProperties </span><span style="color:#FFAB70;">db1DataSourceProperties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      HikariDataSource dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db1DataSourceProperties.</span><span style="color:#B392F0;">initializeDataSourceBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(HikariDataSource.class).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(db1DataSourceProperties.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         dataSource.</span><span style="color:#B392F0;">setPoolName</span><span style="color:#E1E4E8;">(db1DataSourceProperties.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 配置数据源1的entityManagerFactory命名为db1EntityManagerFactory，用来对实体进行一些操作</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">builder</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">db1DataSource</span><span style="color:#6A737D;"> entityManager依赖db1DataSource</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Primary</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db1EntityManagerFactory&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> LocalContainerEntityManagerFactoryBean </span><span style="color:#B392F0;">entityManagerFactory</span><span style="color:#E1E4E8;">(EntityManagerFactoryBuilder </span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db1DataSource&quot;</span><span style="color:#E1E4E8;">) DataSource </span><span style="color:#FFAB70;">db1DataSource</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">(db2DataSource)</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">packages</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.example.jpa.example1.db1&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//数据1的实体所在的路径</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">persistenceUnit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db1&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">// persistenceUnit的名字采用db1</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 配置数据源1的事务管理者，命名为db1TransactionManager依赖db1EntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">db1EntityManagerFactory</span><span style="color:#6A737D;"> </span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Primary</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db1TransactionManager&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> PlatformTransactionManager </span><span style="color:#B392F0;">transactionManager</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db1EntityManagerFactory&quot;</span><span style="color:#E1E4E8;">) EntityManagerFactory </span><span style="color:#FFAB70;">db1EntityManagerFactory</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaTransactionManager</span><span style="color:#E1E4E8;">(db1EntityManagerFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableTransactionManagement</span><span style="color:#6A737D;">//开启事务</span></span>
<span class="line"><span style="color:#6A737D;">//利用EnableJpaRepositories配置哪些包下面的Repositories，采用哪个EntityManagerFactory和哪个trannsactionManager</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;com.example.jpa.example1.db1&quot;</span><span style="color:#24292E;">},</span><span style="color:#6A737D;">//数据源1的repository的包路径</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">entityManagerFactoryRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db1EntityManagerFactory&quot;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//改变数据源1的EntityManagerFactory的默认值，改为db1EntityManagerFactory</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">transactionManagerRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db1TransactionManager&quot;</span><span style="color:#6A737D;">//改变数据源1的transactionManager的默认值，改为db1TransactionManager</span></span>
<span class="line"><span style="color:#24292E;">      )</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSource1Config</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 指定数据源1的dataSource配置</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Primary</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db1DataSourceProperties&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;spring.datasource1&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//数据源1的db配置前缀采用spring.datasource1</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataSourceProperties </span><span style="color:#6F42C1;">dataSourceProperties</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 可以选择不同的数据源，这里我用HikariDataSource举例，创建数据源1</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">db1DataSourceProperties</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Primary</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db1DataSource&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource.hikari.db1&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//配置数据源1所用的hikari配置key的前缀</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> HikariDataSource </span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db1DataSourceProperties&quot;</span><span style="color:#24292E;">) DataSourceProperties </span><span style="color:#E36209;">db1DataSourceProperties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      HikariDataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db1DataSourceProperties.</span><span style="color:#6F42C1;">initializeDataSourceBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(HikariDataSource.class).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(db1DataSourceProperties.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">         dataSource.</span><span style="color:#6F42C1;">setPoolName</span><span style="color:#24292E;">(db1DataSourceProperties.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataSource;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 配置数据源1的entityManagerFactory命名为db1EntityManagerFactory，用来对实体进行一些操作</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">builder</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">db1DataSource</span><span style="color:#6A737D;"> entityManager依赖db1DataSource</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Primary</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db1EntityManagerFactory&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> LocalContainerEntityManagerFactoryBean </span><span style="color:#6F42C1;">entityManagerFactory</span><span style="color:#24292E;">(EntityManagerFactoryBuilder </span><span style="color:#E36209;">builder</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db1DataSource&quot;</span><span style="color:#24292E;">) DataSource </span><span style="color:#E36209;">db1DataSource</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">(db2DataSource)</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">packages</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.example.jpa.example1.db1&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//数据1的实体所在的路径</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">persistenceUnit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db1&quot;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">// persistenceUnit的名字采用db1</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 配置数据源1的事务管理者，命名为db1TransactionManager依赖db1EntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">db1EntityManagerFactory</span><span style="color:#6A737D;"> </span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Primary</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db1TransactionManager&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PlatformTransactionManager </span><span style="color:#6F42C1;">transactionManager</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db1EntityManagerFactory&quot;</span><span style="color:#24292E;">) EntityManagerFactory </span><span style="color:#E36209;">db1EntityManagerFactory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaTransactionManager</span><span style="color:#24292E;">(db1EntityManagerFactory);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里，数据源 1 我们就配置完了，下面再配置数据源 2。</p><p><strong>第三步：配置 DataSource2Config类，加载数据源 2。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableTransactionManagement</span><span style="color:#6A737D;">//开启事务</span></span>
<span class="line"><span style="color:#6A737D;">//利用EnableJpaRepositories，配置哪些包下面的Repositories，采用哪个EntityManagerFactory和哪个trannsactionManager</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;com.example.jpa.example1.db2&quot;</span><span style="color:#E1E4E8;">},</span><span style="color:#6A737D;">//数据源2的repository的包路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">entityManagerFactoryRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db2EntityManagerFactory&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//改变数据源2的EntityManagerFactory的默认值，改为db2EntityManagerFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">transactionManagerRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db2TransactionManager&quot;</span><span style="color:#6A737D;">//改变数据源2的transactionManager的默认值，改为db2TransactionManager</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSource2Config</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 指定数据源2的dataSource配置</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db2DataSourceProperties&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;spring.datasource2&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//数据源2的db配置前缀采用spring.datasource2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataSourceProperties </span><span style="color:#B392F0;">dataSourceProperties</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceProperties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 可以选择不同的数据源，这里我用HikariDataSource举例，创建数据源2</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">db2DataSourceProperties</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db2DataSource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;spring.datasource.hikari.db2&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//配置数据源2的hikari配置key的前缀</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> HikariDataSource </span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db2DataSourceProperties&quot;</span><span style="color:#E1E4E8;">) DataSourceProperties </span><span style="color:#FFAB70;">db2DataSourceProperties</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        HikariDataSource dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db2DataSourceProperties.</span><span style="color:#B392F0;">initializeDataSourceBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">(HikariDataSource.class).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(db2DataSourceProperties.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            dataSource.</span><span style="color:#B392F0;">setPoolName</span><span style="color:#E1E4E8;">(db2DataSourceProperties.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 配置数据源2的entityManagerFactory命名为db2EntityManagerFactory，用来对实体进行一些操作</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">builder</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">db2DataSource</span><span style="color:#6A737D;"> entityManager依赖db2DataSource</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db2EntityManagerFactory&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> LocalContainerEntityManagerFactoryBean </span><span style="color:#B392F0;">entityManagerFactory</span><span style="color:#E1E4E8;">(EntityManagerFactoryBuilder </span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db2DataSource&quot;</span><span style="color:#E1E4E8;">) DataSource </span><span style="color:#FFAB70;">db2DataSource</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">(db2DataSource)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">packages</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.example.jpa.example1.db2&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//数据2的实体所在的路径</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">persistenceUnit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db2&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">// persistenceUnit的名字采用db2</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 配置数据源2的事务管理者，命名为db2TransactionManager依赖db2EntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">db2EntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db2TransactionManager&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> PlatformTransactionManager </span><span style="color:#B392F0;">transactionManager</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db2EntityManagerFactory&quot;</span><span style="color:#E1E4E8;">) EntityManagerFactory </span><span style="color:#FFAB70;">db2EntityManagerFactory</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaTransactionManager</span><span style="color:#E1E4E8;">(db2EntityManagerFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableTransactionManagement</span><span style="color:#6A737D;">//开启事务</span></span>
<span class="line"><span style="color:#6A737D;">//利用EnableJpaRepositories，配置哪些包下面的Repositories，采用哪个EntityManagerFactory和哪个trannsactionManager</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;com.example.jpa.example1.db2&quot;</span><span style="color:#24292E;">},</span><span style="color:#6A737D;">//数据源2的repository的包路径</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">entityManagerFactoryRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db2EntityManagerFactory&quot;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//改变数据源2的EntityManagerFactory的默认值，改为db2EntityManagerFactory</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">transactionManagerRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db2TransactionManager&quot;</span><span style="color:#6A737D;">//改变数据源2的transactionManager的默认值，改为db2TransactionManager</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSource2Config</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 指定数据源2的dataSource配置</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db2DataSourceProperties&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;spring.datasource2&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//数据源2的db配置前缀采用spring.datasource2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataSourceProperties </span><span style="color:#6F42C1;">dataSourceProperties</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceProperties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 可以选择不同的数据源，这里我用HikariDataSource举例，创建数据源2</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">db2DataSourceProperties</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db2DataSource&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ConfigurationProperties</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;spring.datasource.hikari.db2&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//配置数据源2的hikari配置key的前缀</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> HikariDataSource </span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db2DataSourceProperties&quot;</span><span style="color:#24292E;">) DataSourceProperties </span><span style="color:#E36209;">db2DataSourceProperties</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        HikariDataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db2DataSourceProperties.</span><span style="color:#6F42C1;">initializeDataSourceBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">(HikariDataSource.class).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(db2DataSourceProperties.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            dataSource.</span><span style="color:#6F42C1;">setPoolName</span><span style="color:#24292E;">(db2DataSourceProperties.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataSource;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 配置数据源2的entityManagerFactory命名为db2EntityManagerFactory，用来对实体进行一些操作</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">builder</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">db2DataSource</span><span style="color:#6A737D;"> entityManager依赖db2DataSource</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db2EntityManagerFactory&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> LocalContainerEntityManagerFactoryBean </span><span style="color:#6F42C1;">entityManagerFactory</span><span style="color:#24292E;">(EntityManagerFactoryBuilder </span><span style="color:#E36209;">builder</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db2DataSource&quot;</span><span style="color:#24292E;">) DataSource </span><span style="color:#E36209;">db2DataSource</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">(db2DataSource)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">packages</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.example.jpa.example1.db2&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//数据2的实体所在的路径</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">persistenceUnit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db2&quot;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">// persistenceUnit的名字采用db2</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 配置数据源2的事务管理者，命名为db2TransactionManager依赖db2EntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">db2EntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db2TransactionManager&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PlatformTransactionManager </span><span style="color:#6F42C1;">transactionManager</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db2EntityManagerFactory&quot;</span><span style="color:#24292E;">) EntityManagerFactory </span><span style="color:#E36209;">db2EntityManagerFactory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaTransactionManager</span><span style="color:#24292E;">(db2EntityManagerFactory);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这一步你需要注意，DataSource1Config 和 DataSource2Config 不同的是，1 里面每个 @Bean 都 @Primary，而 2 里面不是的。</p><p><strong>第四步：通过 application.properties 配置两个数据源的值，代码如下：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">###########datasource1 采用Mysql数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource1.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/test2?logger=Slf4JLogger&amp;profileSQL=true</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource1.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource1.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">##数据源1的连接池的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.db1.pool</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jpa</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hikari</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">pool</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">db1</span></span>
<span class="line"><span style="color:#E1E4E8;">##最长生命周期15分钟够了</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.db1.maxLifetime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">900000</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.db1.maximumPoolSize</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">###########datasource2 采用h2内存数据库</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource2.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">h2</span><span style="color:#F97583;">:~/</span><span style="color:#E1E4E8;">test</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource2.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sa</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource2.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sa</span></span>
<span class="line"><span style="color:#E1E4E8;">##数据源2的连接池的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.db2.pool</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jpa</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hikari</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">pool</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">db2</span></span>
<span class="line"><span style="color:#E1E4E8;">##最长生命周期15分钟够了</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.db2.maxLifetime</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">500000</span></span>
<span class="line"><span style="color:#E1E4E8;">##最大连接池大小和数据源1区分开，我们配置成6个</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.hikari.db2.maximumPoolSize</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">###########datasource1 采用Mysql数据库</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource1.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/test2?logger=Slf4JLogger&amp;profileSQL=true</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource1.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource1.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">##数据源1的连接池的名字</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.db1.pool</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jpa</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hikari</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">pool</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">db1</span></span>
<span class="line"><span style="color:#24292E;">##最长生命周期15分钟够了</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.db1.maxLifetime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">900000</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.db1.maximumPoolSize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">###########datasource2 采用h2内存数据库</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource2.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">h2</span><span style="color:#D73A49;">:~/</span><span style="color:#24292E;">test</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource2.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sa</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource2.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sa</span></span>
<span class="line"><span style="color:#24292E;">##数据源2的连接池的名字</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.db2.pool</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jpa</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hikari</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">pool</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">db2</span></span>
<span class="line"><span style="color:#24292E;">##最长生命周期15分钟够了</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.db2.maxLifetime</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">500000</span></span>
<span class="line"><span style="color:#24292E;">##最大连接池大小和数据源1区分开，我们配置成6个</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.hikari.db2.maximumPoolSize</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">6</span></span></code></pre></div><p><strong>第五步：我们写个 Controller 测试一下。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//操作user的Repository</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> User </span><span style="color:#B392F0;">saveUser</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//操作userInfo的Repository</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/info&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#B392F0;">saveUserInfo</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> UserInfo </span><span style="color:#FFAB70;">userInfo</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(userInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfoRepository userInfoRepository;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//操作user的Repository</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">saveUser</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//操作userInfo的Repository</span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserInfo </span><span style="color:#6F42C1;">saveUserInfo</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> UserInfo </span><span style="color:#E36209;">userInfo</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(userInfo);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第六步：直接启动我们的项目，测试一下。</strong></p><p>请看这一步的启动日志：</p>`,14),i=p("p",null,"可以看到启动的是两个数据源，其对应的连接池的监控也是不一样的：数据源 1 有 8 个，数据源 2 有 6 个。",-1),u=p("p",null,"如果我们分别请求 Controller 写的两个方法的时候，也会分别插入到不同的数据源里面去。",-1),F=p("p",null,"通过上面的六个步骤你应该知道了如何配置多数据源，那么它的原理基础是什么呢？我们看一下",-1),D=p("p",null,"Datasource 与 TransactionManager、EntityManagerFactory 的关系和职责分别是怎么样的。",-1),d=p("h4",{id:"datasource-与-transactionmanager、entitymanagerfactory-的关系分析",tabindex:"-1"},[s("Datasource 与 TransactionManager、EntityManagerFactory 的关系分析 "),p("a",{class:"header-anchor",href:"#datasource-与-transactionmanager、entitymanagerfactory-的关系分析","aria-label":'Permalink to "Datasource 与 TransactionManager、EntityManagerFactory 的关系分析"'},"​")],-1),g=p("p",null,"我们通过一个类的关系图来分析一下：",-1),A=l('<p>其中，</p><ol><li><p>HikariDataSource 负责实现 DataSource，交给 EntityManager 和 TransactionManager 使用；</p></li><li><p>EntityManager 是利用 Datasouce 来操作数据库，而其实现类是 SessionImpl；</p></li><li><p>EntityManagerFactory 是用来管理和生成 EntityManager 的，而 EntityManagerFactory 的实现类是 LocalContainerEntityManagerFactoryBean，通过实现 FactoryBean 接口实现，利用了 FactoryBean 的 Spring 中的 bean 管理机制，所以需要我们在 Datasource1Config 里面配置 LocalContainerEntityManagerFactoryBean 的 bean 的注入方式；</p></li><li><p>JpaTransactionManager 是用来管理事务的，实现了 TransactionManager 并且通过 EntityFactory 和 Datasource 进行 db 操作，所以我们要在 DataSourceConfig 里面告诉 JpaTransactionManager 用的 TransactionManager 是 db1EntityManagerFactory。</p></li></ol><p>上一讲我们介绍了 Datasource 的默认加载和配置方式，那么默认情况下 Datasource 的 EntityManagerFactory 和 TransactionManager 是怎么加载和配置的呢？</p><h4 id="默认的-jpabaseconfiguration-的加载方式分析" tabindex="-1">默认的 JpaBaseConfiguration 的加载方式分析 <a class="header-anchor" href="#默认的-jpabaseconfiguration-的加载方式分析" aria-label="Permalink to &quot;默认的 JpaBaseConfiguration 的加载方式分析&quot;">​</a></h4><p>上一讲我只简单说明了 DataSource 的配置，其实我们还可以通过 HibernateJpaConfiguration，找到父类 JpaBaseConfiguration 类，如图所示：</p>',5),b=p("p",null,"接着打开 JpaBaseConfiguration 就可以看到多数据源的参考原型，如下图所示：",-1),C=l(`<p>通过上面的代码，可以看到在单个数据源情况下的 EntityManagerFactory 和 TransactionManager 的加载方法，并且我们在多数据源的配置里面还加载了一个类：EntityManagerFactoryBuilder entityManagerFactoryBuilder，也正是从上面的方法加载进去的，看第 120 行代码就知道了。</p><p>那么除了上述的配置多数据源的方式，还有没有其他方法了呢？我们接着看一下。</p><h3 id="第二种方式-利用-abstractroutingdatasource-配置多数据源" tabindex="-1">第二种方式：利用 AbstractRoutingDataSource 配置多数据源 <a class="header-anchor" href="#第二种方式-利用-abstractroutingdatasource-配置多数据源" aria-label="Permalink to &quot;第二种方式：利用 AbstractRoutingDataSource 配置多数据源&quot;">​</a></h3><p>我们都知道 DataSource 的本质是获得数据库连接，而 AbstractRoutingDataSource 帮我们实现了动态获得数据源的可能性。下面还是通过一个例子看一下它是怎么使用的。</p><p><strong>第一步：定一个数据源的枚举类，用来标示数据源有哪些。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 定义一个数据源的枚举类</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingDataSourceEnum</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">DB1</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//实际工作中枚举的语义可以更加明确一点；</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">DB2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> RoutingDataSourceEnum </span><span style="color:#B392F0;">findbyCode</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">dbRouting</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (RoutingDataSourceEnum e </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(dbRouting)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e;</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> db1;</span><span style="color:#6A737D;">//没找到的情况下，默认返回数据源1</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 定义一个数据源的枚举类</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingDataSourceEnum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">DB1</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//实际工作中枚举的语义可以更加明确一点；</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">DB2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> RoutingDataSourceEnum </span><span style="color:#6F42C1;">findbyCode</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">dbRouting</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (RoutingDataSourceEnum e </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(dbRouting)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> db1;</span><span style="color:#6A737D;">//没找到的情况下，默认返回数据源1</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第二步：新增 DataSourceRoutingHolder，用来存储当前线程需要采用的数据源。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 利用ThreadLocal来存储，当前的线程使用的数据</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceRoutingHolder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ThreadLocal&lt;</span><span style="color:#F97583;">RoutingDataSourceEnum</span><span style="color:#E1E4E8;">&gt; threadLocal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ThreadLocal&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setBranchContext</span><span style="color:#E1E4E8;">(RoutingDataSourceEnum </span><span style="color:#FFAB70;">dataSourceEnum</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      threadLocal.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(dataSourceEnum);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> RoutingDataSourceEnum </span><span style="color:#B392F0;">getBranchContext</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> threadLocal.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clearBranchContext</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      threadLocal.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 利用ThreadLocal来存储，当前的线程使用的数据</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceRoutingHolder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ThreadLocal&lt;</span><span style="color:#D73A49;">RoutingDataSourceEnum</span><span style="color:#24292E;">&gt; threadLocal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ThreadLocal&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setBranchContext</span><span style="color:#24292E;">(RoutingDataSourceEnum </span><span style="color:#E36209;">dataSourceEnum</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      threadLocal.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(dataSourceEnum);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> RoutingDataSourceEnum </span><span style="color:#6F42C1;">getBranchContext</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> threadLocal.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clearBranchContext</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      threadLocal.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>第三步：配置 RoutingDataSourceConfig，用来指定哪些 Entity 和 Repository 采用动态数据源。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableTransactionManagement</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableJpaRepositories</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//数据源的repository的包路径，这里我们覆盖db1和db2的包路径</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;com.example.jpa.example1&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">entityManagerFactoryRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;routingEntityManagerFactory&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">transactionManagerRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;routingTransactionManager&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingDataSourceConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db1DataSource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DataSource db1DataSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db2DataSource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DataSource db2DataSource;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 创建RoutingDataSource，引用我们之前配置的db1DataSource和db2DataSource</span></span>
<span class="line"><span style="color:#6A737D;">    *</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;routingDataSource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Map&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; dataSourceMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Maps.</span><span style="color:#B392F0;">newHashMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      dataSourceMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(RoutingDataSourceEnum.DB1, db1DataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">      dataSourceMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(RoutingDataSourceEnum.DB2, db2DataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">      RoutingDataSource routingDataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RoutingDataSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//设置RoutingDataSource的默认数据源</span></span>
<span class="line"><span style="color:#E1E4E8;">      routingDataSource.</span><span style="color:#B392F0;">setDefaultTargetDataSource</span><span style="color:#E1E4E8;">(db1DataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//设置RoutingDataSource的数据源列表</span></span>
<span class="line"><span style="color:#E1E4E8;">      routingDataSource.</span><span style="color:#B392F0;">setTargetDataSources</span><span style="color:#E1E4E8;">(dataSourceMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> routingDataSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 类似db1和db2的配置，唯一不同的是，这里采用routingDataSource</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">builder</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">routingDataSource</span><span style="color:#6A737D;"> entityManager依赖routingDataSource</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;routingEntityManagerFactory&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> LocalContainerEntityManagerFactoryBean </span><span style="color:#B392F0;">entityManagerFactory</span><span style="color:#E1E4E8;">(EntityManagerFactoryBuilder </span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;routingDataSource&quot;</span><span style="color:#E1E4E8;">) DataSource </span><span style="color:#FFAB70;">routingDataSource</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">(routingDataSource).</span><span style="color:#B392F0;">packages</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.example.jpa.example1&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//数据routing的实体所在的路径，这里我们覆盖db1和db2的路径</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">persistenceUnit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db-routing&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">// persistenceUnit的名字采用db-routing</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 配置数据的事务管理者，命名为routingTransactionManager依赖routtingEntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">    *</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">routingEntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;routingTransactionManager&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> PlatformTransactionManager </span><span style="color:#B392F0;">transactionManager</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;routingEntityManagerFactory&quot;</span><span style="color:#E1E4E8;">) EntityManagerFactory </span><span style="color:#FFAB70;">routingEntityManagerFactory</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaTransactionManager</span><span style="color:#E1E4E8;">(routingEntityManagerFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableTransactionManagement</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableJpaRepositories</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//数据源的repository的包路径，这里我们覆盖db1和db2的包路径</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;com.example.jpa.example1&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">entityManagerFactoryRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;routingEntityManagerFactory&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">transactionManagerRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;routingTransactionManager&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingDataSourceConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db1DataSource&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DataSource db1DataSource;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db2DataSource&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DataSource db2DataSource;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 创建RoutingDataSource，引用我们之前配置的db1DataSource和db2DataSource</span></span>
<span class="line"><span style="color:#6A737D;">    *</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;routingDataSource&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      Map&lt;</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; dataSourceMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Maps.</span><span style="color:#6F42C1;">newHashMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      dataSourceMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(RoutingDataSourceEnum.DB1, db1DataSource);</span></span>
<span class="line"><span style="color:#24292E;">      dataSourceMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(RoutingDataSourceEnum.DB2, db2DataSource);</span></span>
<span class="line"><span style="color:#24292E;">      RoutingDataSource routingDataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RoutingDataSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//设置RoutingDataSource的默认数据源</span></span>
<span class="line"><span style="color:#24292E;">      routingDataSource.</span><span style="color:#6F42C1;">setDefaultTargetDataSource</span><span style="color:#24292E;">(db1DataSource);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//设置RoutingDataSource的数据源列表</span></span>
<span class="line"><span style="color:#24292E;">      routingDataSource.</span><span style="color:#6F42C1;">setTargetDataSources</span><span style="color:#24292E;">(dataSourceMap);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> routingDataSource;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 类似db1和db2的配置，唯一不同的是，这里采用routingDataSource</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">builder</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">routingDataSource</span><span style="color:#6A737D;"> entityManager依赖routingDataSource</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;routingEntityManagerFactory&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> LocalContainerEntityManagerFactoryBean </span><span style="color:#6F42C1;">entityManagerFactory</span><span style="color:#24292E;">(EntityManagerFactoryBuilder </span><span style="color:#E36209;">builder</span><span style="color:#24292E;">, @</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;routingDataSource&quot;</span><span style="color:#24292E;">) DataSource </span><span style="color:#E36209;">routingDataSource</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> builder.</span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">(routingDataSource).</span><span style="color:#6F42C1;">packages</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.example.jpa.example1&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//数据routing的实体所在的路径，这里我们覆盖db1和db2的路径</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">persistenceUnit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db-routing&quot;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">// persistenceUnit的名字采用db-routing</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 配置数据的事务管理者，命名为routingTransactionManager依赖routtingEntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">    *</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">routingEntityManagerFactory</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;routingTransactionManager&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PlatformTransactionManager </span><span style="color:#6F42C1;">transactionManager</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;routingEntityManagerFactory&quot;</span><span style="color:#24292E;">) EntityManagerFactory </span><span style="color:#E36209;">routingEntityManagerFactory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaTransactionManager</span><span style="color:#24292E;">(routingEntityManagerFactory);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>路由数据源配置与 DataSource1Config 和 DataSource2Config 有相互覆盖关系，这里我们直接覆盖 db1 和 db2 的包路径，以便于我们的动态数据源生效。</p><p><strong>第四步：写一个 MVC 拦截器，用来指定请求分别采用什么数据源。</strong></p><p>新建一个类 DataSourceInterceptor，用来在请求前后指定数据源，请看代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 动态路由的实现逻辑，我们通过请求里面的db-routing，来指定此请求采用什么数据源</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceInterceptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HandlerInterceptorAdapter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 请求处理之前更改线程里面的数据源</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">preHandle</span><span style="color:#E1E4E8;">(HttpServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                      HttpServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">handler</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">      String dbRouting </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db-routing&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      DataSourceRoutingHolder.</span><span style="color:#B392F0;">setBranchContext</span><span style="color:#E1E4E8;">(RoutingDataSourceEnum.</span><span style="color:#B392F0;">findByCode</span><span style="color:#E1E4E8;">(dbRouting));</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">preHandle</span><span style="color:#E1E4E8;">(request, response, handler);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 请求结束之后清理线程里面的数据源</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterCompletion</span><span style="color:#E1E4E8;">(HttpServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, HttpServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, Object </span><span style="color:#FFAB70;">handler</span><span style="color:#E1E4E8;">, Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">afterCompletion</span><span style="color:#E1E4E8;">(request, response, handler, ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">      DataSourceRoutingHolder.</span><span style="color:#B392F0;">clearBranchContext</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 动态路由的实现逻辑，我们通过请求里面的db-routing，来指定此请求采用什么数据源</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerInterceptorAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 请求处理之前更改线程里面的数据源</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preHandle</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                      HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">      String dbRouting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db-routing&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      DataSourceRoutingHolder.</span><span style="color:#6F42C1;">setBranchContext</span><span style="color:#24292E;">(RoutingDataSourceEnum.</span><span style="color:#6F42C1;">findByCode</span><span style="color:#24292E;">(dbRouting));</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">preHandle</span><span style="color:#24292E;">(request, response, handler);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 请求结束之后清理线程里面的数据源</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterCompletion</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">, Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">afterCompletion</span><span style="color:#24292E;">(request, response, handler, ex);</span></span>
<span class="line"><span style="color:#24292E;">      DataSourceRoutingHolder.</span><span style="color:#6F42C1;">clearBranchContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同时我们需要在实现 WebMvcConfigurer 的配置里面，把我们自定义拦截器 dataSourceInterceptor 加载进去，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 实现WebMvcConfigurer</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyWebMvcConfigurer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebMvcConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DataSourceInterceptor dataSourceInterceptor;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//添加自定义拦截器</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addInterceptors</span><span style="color:#E1E4E8;">(InterceptorRegistry </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      registry.</span><span style="color:#B392F0;">addInterceptor</span><span style="color:#E1E4E8;">(dataSourceInterceptor).</span><span style="color:#B392F0;">addPathPatterns</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/**&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      WebMvcConfigurer.super.</span><span style="color:#B392F0;">addInterceptors</span><span style="color:#E1E4E8;">(registry);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span><span style="color:#6A737D;">//其他不变的代码省略}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 实现WebMvcConfigurer</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyWebMvcConfigurer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DataSourceInterceptor dataSourceInterceptor;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//添加自定义拦截器</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addInterceptors</span><span style="color:#24292E;">(InterceptorRegistry </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      registry.</span><span style="color:#6F42C1;">addInterceptor</span><span style="color:#24292E;">(dataSourceInterceptor).</span><span style="color:#6F42C1;">addPathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      WebMvcConfigurer.super.</span><span style="color:#6F42C1;">addInterceptors</span><span style="color:#24292E;">(registry);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">...</span><span style="color:#6A737D;">//其他不变的代码省略}</span></span></code></pre></div><p>此处我们采用的是 MVC 的拦截器机制动态改变的数据配置，你也可以使用自己的 AOP 任意的拦截器，如事务拦截器、Service 的拦截器等，都可以实现。需要注意的是，要在开启事务之前配置完毕。</p><p><strong>第五步：启动测试。</strong></p><p>我们在 Http 请求头里面加上 db-routing：DB2，那么本次请求就会采用数据源 2 进行处理，请求代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">POST </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">info HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8089</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">db</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">routing</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> DB2</span></span>
<span class="line"><span style="color:#E1E4E8;">Cache</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> no</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cache</span></span>
<span class="line"><span style="color:#E1E4E8;">Postman</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Token</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 56d8dc02</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7f3e</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7b95</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">7ff1</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">572a4bb7d102</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;ages&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">POST </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">info HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8089</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">db</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">routing</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> DB2</span></span>
<span class="line"><span style="color:#24292E;">Cache</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> no</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cache</span></span>
<span class="line"><span style="color:#24292E;">Postman</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Token</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 56d8dc02</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7f3e</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7b95</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">7ff1</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">572a4bb7d102</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;ages&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">}</span></span></code></pre></div><p>通过上面五个步骤，我们可以利用 AbstractRoutingDataSource 实现动态数据源，实际工作中可能会比我讲述的要复杂，有的需要考虑多线程、线程安全等问题，你要多加注意。</p><p>在实际应用场景中，对于多数据源的问题，我还有一些思考，下面分享给你。</p><h3 id="微服务下多数据源的思考-还需要这样用吗" tabindex="-1">微服务下多数据源的思考：还需要这样用吗？ <a class="header-anchor" href="#微服务下多数据源的思考-还需要这样用吗" aria-label="Permalink to &quot;微服务下多数据源的思考：还需要这样用吗？&quot;">​</a></h3><p>通过上面的两种方式，我们分别可以实现同一个 application 应用的多数据源配置，那么有什么注意事项呢？我简单总结如下几点建议。</p><h4 id="多数据源实战注意事项" tabindex="-1">多数据源实战注意事项 <a class="header-anchor" href="#多数据源实战注意事项" aria-label="Permalink to &quot;多数据源实战注意事项&quot;">​</a></h4><ol><li><p>此种方式利用了当前线程事务不变的原理，所以要注意异步线程的处理方式；</p></li><li><p>此种方式利用了 DataSource 的原理，动态地返回不同的 db 连接，一般需要在开启事务之前使用，需要注意事务的生命周期；</p></li><li><p>比较适合读写操作分开的业务场景；</p></li><li><p>多数据的情况下，避免一个事务里面采用不同的数据源，这样会有意想不到的情况发生，比如死锁现象；</p></li><li><p>学会通过日志检查我们开启请求的方法和开启的数据源是否正确，可以通过 Debug 断点来观察数据源是否选择的正确，如下图所示：</p></li></ol>`,26),S=l('<h4 id="微服务下的实战建议" tabindex="-1">微服务下的实战建议 <a class="header-anchor" href="#微服务下的实战建议" aria-label="Permalink to &quot;微服务下的实战建议&quot;">​</a></h4><p>在实际工作中，为了便捷省事，更多开发者喜欢配置多个数据源，但是我强烈建议不要在对用户直接提供的 API 服务上面配置多数据源，否则将出现令人措手不及的 Bug。</p><p>如果你是做后台管理界面，供公司内部员工使用的，那么这种 API 可以为了方便而使用多数据源。</p><p>微服务的大环境下，服务越小，内聚越高，低耦合服务越健壮，所以一般跨库之间一定是是通过 REST 的 API 协议，进行内部服务之间的调用，这是最稳妥的方式，原因有如下几点：</p><ol><li><p>REST 的 API 协议更容易监控，更容易实现事务的原子性；</p></li><li><p>db 之间解耦，使业务领域代码职责更清晰，更容易各自处理各种问题；</p></li><li><p>只读和读写的 API 更容易分离和管理。</p></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>到这里，这一讲的内容就结束了。多数据的配置是一个比较复杂的事情，在本讲中我通过两种方式，带领你自定义 entityManager 和 transactionManager，实现了多数据源的配置。如果对此你有不懂的地方，欢迎你在下方留言，我会尽快给你回复。</p><p>此外，你需要掌握的一个简单的基础知识，就是线程、事务和数据源之间的关系。下一讲我们再详细分析一下事务中需要我们关心的内容有哪些。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>',9);function B(m,q,M,h,f,v){const a=e("Image");return t(),r("div",null,[y,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/6C/C0/Ciqc1F-rk6mAO4voAAEl2cIHNqg269.png"}),s(),E,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/6C/CC/CgqCHl-rk8WAV0LYAAIUPl37DVs337.png"}),s(),n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/6C/CC/CgqCHl-rk8qAZkCgAAHBFDKIWG0269.png"}),s(),i,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/6C/CC/CgqCHl-rk8-AK9nMAABPduIgKR4098.png"}),s(),u,F,D,d,g,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/6C/CC/CgqCHl-rk9aAfRipAAB6oNvBMnM239.png"}),s(),A,n(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/6C/C1/Ciqc1F-rk-GAXBLMAABJWH1P9Qs574.png"}),s(),b,n(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/6C/C1/Ciqc1F-rk-iAMO5TAAIqJTa-4bI250.png"}),s(),C,n(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/6C/CC/CgqCHl-rlAGARlxqAAVdbojSwxw751.png"}),s(),S])}const R=o(c,[["render",B]]);export{k as __pageData,R as default};
