import{_ as o,j as e,o as t,g as r,k as a,h as p,Q as l,s}from"./chunks/framework.4e7d56ce.js";const b=JSON.parse('{"title":"35案例：如何在微服务中集成Zipkin组件？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3830) 35  案例：如何在微服务中集成 Zipkin 组件？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3830) 35  案例：如何在微服务中集成 Zipkin 组件？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3830) 35  案例：如何在微服务中集成 Zipkin 组件？.md"},E=l('<h1 id="_35案例-如何在微服务中集成zipkin组件" tabindex="-1">35案例：如何在微服务中集成Zipkin组件？ <a class="header-anchor" href="#_35案例-如何在微服务中集成zipkin组件" aria-label="Permalink to &quot;35案例：如何在微服务中集成Zipkin组件？&quot;">​</a></h1><p>这一课时我们就来进行案例实战，选择当前流行的链路追踪组件 Zipkin 作为示例，演示如何在 Go 微服务中集成 Zipkin。对于很多使用了 Go 微服务框架的用户来说，其框架本身就拥有 Trace 模块，如 Go-kit。所以本课时我们就在 Go-kit 微服务的案例中集成 Zipkin。</p><p>Zipkin 社区提供了诸如 zipkin-go、zipkin-go-opentracing、go-zipkin 等 Go 客户端库，后面我们会介绍如何将其中的 zipkin-go-opentracing（组件地址参见 <a href="https://github.com/openzipkin-contrib/zipkin-go-opentracing%EF%BC%89%E9%9B%86%E6%88%90%E5%88%B0%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%B9%B6%E5%8A%A0%E4%BB%A5%E5%BA%94%E7%94%A8%E3%80%82" target="_blank" rel="noreferrer">https://github.com/openzipkin-contrib/zipkin-go-opentracing）集成到微服务中并加以应用。</a></p><p>Go-kit 微服务框架的 tracing 包为服务提供了 Dapper 样式的请求追踪。Go-kit 支持 OpenTracing API，并使用 opentracing-go 包为其服务器和客户端提供追踪中间件。Zipkin、LightStep 和 AppDash 是已支持的追踪组件，通过 OpenTracing API 与 Go-kit 一起使用。</p><h3 id="应用架构图" tabindex="-1">应用架构图 <a class="header-anchor" href="#应用架构图" aria-label="Permalink to &quot;应用架构图&quot;">​</a></h3><p>本课时将会介绍如何在 Go-kit 中集成 Zipkin 进行链路调用的追踪，包括<strong>HTTP 和 gRPC 两种调用方式</strong>。在具体介绍这两种调用方式之前，我们先来看一下 Go-kit 集成 Zipkin 的应用架构，如下图所示：</p>',6),i=l(`<p>Go-kit 集成 Zipkin 的应用架构图</p><p>从架构图中可以看到：我们构建了一个服务网关，通过 API 网关调用具体的微服务，所有的服务都注册到 Consul 上；当客户端的请求到来之时，网关作为服务端的门户，会根据配置的规则，从 Consul 中获取对应服务的信息，并将请求反向代理到指定的服务实例。</p><p>涉及的业务服务与组件包含以下 4 个：</p><ul><li><p>Consul，本地安装并启动；</p></li><li><p>Zipkin，本地安装并启动；</p></li><li><p>API Gateway，微服务网关；</p></li><li><p>String Service，字符串服务，是基于 Kit 构建的，提供基本的字符串操作。</p></li></ul><h3 id="http-调用方式的链路追踪" tabindex="-1">HTTP 调用方式的链路追踪 <a class="header-anchor" href="#http-调用方式的链路追踪" aria-label="Permalink to &quot;HTTP 调用方式的链路追踪&quot;">​</a></h3><p>关于 HTTP 调用方式的链路追踪，下面我们将依次构建微服务网关、业务服务，并进行结果验证。</p><h4 id="_1-api-网关构建" tabindex="-1">1. API 网关构建 <a class="header-anchor" href="#_1-api-网关构建" aria-label="Permalink to &quot;1. API 网关构建&quot;">​</a></h4><p>在网关（gateway）中增加链路追踪的采集逻辑，同时在反向代理中增加追踪（tracer）设置。</p><p>Go-kit 在 tracing 包中默认添加了 Zipkin 的支持，所以集成工作会比较轻松。在开始之前，需要下载以下依赖：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># zipkin 官方库</span></span>
<span class="line"><span style="color:#E1E4E8;">go get github.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">openzipkin</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">zipkin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 下面三个包都是依赖，按需下载</span></span>
<span class="line"><span style="color:#E1E4E8;">git clone </span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//github.com/googleapis/googleapis.git [your GOPATH]/ src/google.golang.org/genproto</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">git clone </span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//github.com/grpc/grpc-go.git [your GOPATH]/src/google. golang.org/grpc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">git clone </span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//github.com/golang/text.git [your GOPATH]/src/golang. org/text</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># zipkin 官方库</span></span>
<span class="line"><span style="color:#24292E;">go get github.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">openzipkin</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">zipkin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 下面三个包都是依赖，按需下载</span></span>
<span class="line"><span style="color:#24292E;">git clone </span><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//github.com/googleapis/googleapis.git [your GOPATH]/ src/google.golang.org/genproto</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">git clone </span><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//github.com/grpc/grpc-go.git [your GOPATH]/src/google. golang.org/grpc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">git clone </span><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//github.com/golang/text.git [your GOPATH]/src/golang. org/text</span></span></code></pre></div><p>作为链路追踪的&quot;第一站&quot;和&quot;最后一站&quot;，网关会将客户端的请求转发给对应的业务服务，并将响应的结果返回给客户端。我们需要截获到达网关的所有请求，记录追踪信息。在下面这个示例中，网关是作为外部请求的服务端，同时作为字符串服务的客户端（反向代理内部实现），其代码实现如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建环境变量</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// consul 环境变量省略</span></span>
<span class="line"><span style="color:#E1E4E8;">    zipkinURL  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> flag.</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;zipkin.url&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;HTTP://localhost:9411/api/ v2/spans&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Zipkin server url&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">flag.</span><span style="color:#B392F0;">Parse</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> zipkinTracer *zipkin.Tracer</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        err           error</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostPort      </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;localhost:9090&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceName   </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;gateway-service&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        useNoopTracer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">zipkinURL </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        reporter      </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zipkinHTTP.</span><span style="color:#B392F0;">NewReporter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">zipkinURL)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) </span><span style="color:#6A737D;">// zipkin 相关的配置变量</span></span>
<span class="line"><span style="color:#E1E4E8;">    defer reporter.</span><span style="color:#B392F0;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    zEP, </span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zipkin.</span><span style="color:#B392F0;">NewEndpoint</span><span style="color:#E1E4E8;">(serviceName, hostPort)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 构建 zipkinTracer</span></span>
<span class="line"><span style="color:#E1E4E8;">    zipkinTracer, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zipkin.</span><span style="color:#B392F0;">NewTracer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        reporter, zipkin.</span><span style="color:#B392F0;">WithLocalEndpoint</span><span style="color:#E1E4E8;">(zEP), zipkin.</span><span style="color:#B392F0;">WithNoopTracer</span><span style="color:#E1E4E8;"> (useNoopTracer),</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;err&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        os.</span><span style="color:#B392F0;">Exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">useNoopTracer {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tracer&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Zipkin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Native&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;URL&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">zipkinURL)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建环境变量</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// consul 环境变量省略</span></span>
<span class="line"><span style="color:#24292E;">    zipkinURL  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> flag.</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;zipkin.url&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;HTTP://localhost:9411/api/ v2/spans&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Zipkin server url&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">flag.</span><span style="color:#6F42C1;">Parse</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> zipkinTracer *zipkin.Tracer</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        err           error</span></span>
<span class="line"><span style="color:#24292E;">        hostPort      </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;localhost:9090&quot;</span></span>
<span class="line"><span style="color:#24292E;">        serviceName   </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;gateway-service&quot;</span></span>
<span class="line"><span style="color:#24292E;">        useNoopTracer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">zipkinURL </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        reporter      </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zipkinHTTP.</span><span style="color:#6F42C1;">NewReporter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">zipkinURL)</span></span>
<span class="line"><span style="color:#24292E;">    ) </span><span style="color:#6A737D;">// zipkin 相关的配置变量</span></span>
<span class="line"><span style="color:#24292E;">    defer reporter.</span><span style="color:#6F42C1;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    zEP, </span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zipkin.</span><span style="color:#6F42C1;">NewEndpoint</span><span style="color:#24292E;">(serviceName, hostPort)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构建 zipkinTracer</span></span>
<span class="line"><span style="color:#24292E;">    zipkinTracer, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zipkin.</span><span style="color:#6F42C1;">NewTracer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        reporter, zipkin.</span><span style="color:#6F42C1;">WithLocalEndpoint</span><span style="color:#24292E;">(zEP), zipkin.</span><span style="color:#6F42C1;">WithNoopTracer</span><span style="color:#24292E;"> (useNoopTracer),</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;err&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">        os.</span><span style="color:#6F42C1;">Exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">useNoopTracer {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tracer&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Zipkin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Native&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;URL&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">zipkinURL)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们使用的传输方式为 HTTP，可以使用 zipkin-go 提供的 middleware/HTTP 包，它采用装饰者模式把我们的 HTTP.Handler 进行封装，然后启动 HTTP 监听，代码如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//创建反向代理</span></span>
<span class="line"><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewReverseProxy</span><span style="color:#E1E4E8;">(consulClient, zipkinTracer, logger)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">tags</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> map[string]string{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;component&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;gateway_server&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zipkinHTTPsvr.</span><span style="color:#B392F0;">NewServerMiddleware</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    zipkinTracer,</span></span>
<span class="line"><span style="color:#E1E4E8;">    zipkinHTTPsvr.</span><span style="color:#B392F0;">SpanName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;gateway&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    zipkinHTTPsvr.</span><span style="color:#B392F0;">TagResponseSize</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    zipkinHTTPsvr.</span><span style="color:#B392F0;">ServerTags</span><span style="color:#E1E4E8;">(tags),</span></span>
<span class="line"><span style="color:#E1E4E8;">)(proxy)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//创建反向代理</span></span>
<span class="line"><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewReverseProxy</span><span style="color:#24292E;">(consulClient, zipkinTracer, logger)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">tags</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map[string]string{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;component&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;gateway_server&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zipkinHTTPsvr.</span><span style="color:#6F42C1;">NewServerMiddleware</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    zipkinTracer,</span></span>
<span class="line"><span style="color:#24292E;">    zipkinHTTPsvr.</span><span style="color:#6F42C1;">SpanName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;gateway&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    zipkinHTTPsvr.</span><span style="color:#6F42C1;">TagResponseSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    zipkinHTTPsvr.</span><span style="color:#6F42C1;">ServerTags</span><span style="color:#24292E;">(tags),</span></span>
<span class="line"><span style="color:#24292E;">)(proxy)</span></span></code></pre></div><p>网关接收请求后，会创建一个 Span，其中的 traceId 将作为本次请求的唯一编号，网关必须把这个 traceID 传递给字符串服务，字符串服务才能为该请求持续记录追踪信息。在 ReverseProxy 中能够完成这一任务的就是 Transport，我们可以使用 zipkin-go 的 middleware/HTTP 包提供的 NewTransport 替换系统默认的 HTTP.DefaultTransport。代码如下所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// NewReverseProxy 创建反向代理处理方法</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">NewReverseProxy</span><span style="color:#E1E4E8;">(client </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">api.Client, zikkinTracer </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">zipkin.Tracer, logger log.Logger) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">HTTPutil.ReverseProxy {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建 Director</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">director</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(req </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">HTTP</span><span style="color:#E1E4E8;">.Request) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//省略</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 为反向代理增加追踪逻辑，使用如下 RoundTrip 代替默认 Transport</span></span>
<span class="line"><span style="color:#E1E4E8;">    roundTrip, </span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zipkinHTTPsvr.</span><span style="color:#B392F0;">NewTransport</span><span style="color:#E1E4E8;">(zikkinTracer, zipkinHTTPsvr.</span><span style="color:#B392F0;">TransportTrace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">HTTPutil.ReverseProxy{</span></span>
<span class="line"><span style="color:#E1E4E8;">        Director:  director,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Transport: roundTrip,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// NewReverseProxy 创建反向代理处理方法</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">NewReverseProxy</span><span style="color:#24292E;">(client </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">api.Client, zikkinTracer </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">zipkin.Tracer, logger log.Logger) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">HTTPutil.ReverseProxy {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//创建 Director</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">director</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(req </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">HTTP</span><span style="color:#24292E;">.Request) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//省略</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 为反向代理增加追踪逻辑，使用如下 RoundTrip 代替默认 Transport</span></span>
<span class="line"><span style="color:#24292E;">    roundTrip, </span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zipkinHTTPsvr.</span><span style="color:#6F42C1;">NewTransport</span><span style="color:#24292E;">(zikkinTracer, zipkinHTTPsvr.</span><span style="color:#6F42C1;">TransportTrace</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">HTTPutil.ReverseProxy{</span></span>
<span class="line"><span style="color:#24292E;">        Director:  director,</span></span>
<span class="line"><span style="color:#24292E;">        Transport: roundTrip,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，API 网关服务的搭建就完成了。</p><h4 id="_2-业务服务构建" tabindex="-1">2. 业务服务构建 <a class="header-anchor" href="#_2-业务服务构建" aria-label="Permalink to &quot;2. 业务服务构建&quot;">​</a></h4><p>创建追踪器与网关的处理方式一样，我们就不再描述。字符串服务对外提供了两个接口：字符串操作（/op/{type}/{a}/{b}）和健康检查（/health）。定义如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">endpoint</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeStringEndpoint</span><span style="color:#E1E4E8;">(svc)</span></span>
<span class="line"><span style="color:#6A737D;">//添加追踪，设置 span 的名称为 string-endpoint</span></span>
<span class="line"><span style="color:#E1E4E8;">endpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Kitzipkin.</span><span style="color:#B392F0;">TraceEndpoint</span><span style="color:#E1E4E8;">(zipkinTracer, </span><span style="color:#9ECBFF;">&quot;string-endpoint&quot;</span><span style="color:#E1E4E8;">) (endpoint)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建健康检查的 Endpoint</span></span>
<span class="line"><span style="color:#B392F0;">healthEndpoint</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MakeHealthCheckEndpoint</span><span style="color:#E1E4E8;">(svc)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//添加追踪，设置 span 的名称为 health-endpoint</span></span>
<span class="line"><span style="color:#E1E4E8;">healthEndpoint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Kitzipkin.</span><span style="color:#B392F0;">TraceEndpoint</span><span style="color:#E1E4E8;">(zipkinTracer, </span><span style="color:#9ECBFF;">&quot;health-endpoint&quot;</span><span style="color:#E1E4E8;">) (healthEndpoint)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">endpoint</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeStringEndpoint</span><span style="color:#24292E;">(svc)</span></span>
<span class="line"><span style="color:#6A737D;">//添加追踪，设置 span 的名称为 string-endpoint</span></span>
<span class="line"><span style="color:#24292E;">endpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Kitzipkin.</span><span style="color:#6F42C1;">TraceEndpoint</span><span style="color:#24292E;">(zipkinTracer, </span><span style="color:#032F62;">&quot;string-endpoint&quot;</span><span style="color:#24292E;">) (endpoint)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建健康检查的 Endpoint</span></span>
<span class="line"><span style="color:#6F42C1;">healthEndpoint</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MakeHealthCheckEndpoint</span><span style="color:#24292E;">(svc)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//添加追踪，设置 span 的名称为 health-endpoint</span></span>
<span class="line"><span style="color:#24292E;">healthEndpoint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Kitzipkin.</span><span style="color:#6F42C1;">TraceEndpoint</span><span style="color:#24292E;">(zipkinTracer, </span><span style="color:#032F62;">&quot;health-endpoint&quot;</span><span style="color:#24292E;">) (healthEndpoint)</span></span></code></pre></div><p>Go-kit 提供了对 zipkin-go 的封装，上面的实现中，直接调用中间件 TraceEndpoint 对字符串服务的两个 Endpoint 进行设置。</p><p>除了 Endpoint，还需要追踪 Transport。可以修改 transports.go 的 MakeHTTPHandler 方法，增加参数 zipkinTracer，然后在 ServerOption 中设置追踪参数。代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// MakeHTTPHandler make HTTP handler use mux</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">MakeHTTPHandler</span><span style="color:#E1E4E8;">(ctx context.Context, endpoints ArithmeticEndpoints, zipkinTracer </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">gozipkin.Tracer, logger log.Logger) </span><span style="color:#79B8FF;">HTTP</span><span style="color:#E1E4E8;">.Handler {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mux.</span><span style="color:#B392F0;">NewRouter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">zipkinServer</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zipkin.</span><span style="color:#B392F0;">HTTPServerTrace</span><span style="color:#E1E4E8;">(zipkinTracer, zipkin.</span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;HTTP-transport&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">options</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []KitHTTP.ServerOption{</span></span>
<span class="line"><span style="color:#E1E4E8;">        KitHTTP.</span><span style="color:#B392F0;">ServerErrorLogger</span><span style="color:#E1E4E8;">(logger),</span></span>
<span class="line"><span style="color:#E1E4E8;">        KitHTTP.</span><span style="color:#B392F0;">ServerErrorEncoder</span><span style="color:#E1E4E8;">(KitHTTP.DefaultErrorEncoder),</span></span>
<span class="line"><span style="color:#E1E4E8;">        zipkinServer,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> r</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// MakeHTTPHandler make HTTP handler use mux</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">MakeHTTPHandler</span><span style="color:#24292E;">(ctx context.Context, endpoints ArithmeticEndpoints, zipkinTracer </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">gozipkin.Tracer, logger log.Logger) </span><span style="color:#005CC5;">HTTP</span><span style="color:#24292E;">.Handler {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">r</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mux.</span><span style="color:#6F42C1;">NewRouter</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">zipkinServer</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zipkin.</span><span style="color:#6F42C1;">HTTPServerTrace</span><span style="color:#24292E;">(zipkinTracer, zipkin.</span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;HTTP-transport&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">options</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []KitHTTP.ServerOption{</span></span>
<span class="line"><span style="color:#24292E;">        KitHTTP.</span><span style="color:#6F42C1;">ServerErrorLogger</span><span style="color:#24292E;">(logger),</span></span>
<span class="line"><span style="color:#24292E;">        KitHTTP.</span><span style="color:#6F42C1;">ServerErrorEncoder</span><span style="color:#24292E;">(KitHTTP.DefaultErrorEncoder),</span></span>
<span class="line"><span style="color:#24292E;">        zipkinServer,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> r</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，所有的代码修改工作已经完成，下一步就是启动测试、对结果验证了。</p><h4 id="_3-结果验证" tabindex="-1">3. 结果验证 <a class="header-anchor" href="#_3-结果验证" aria-label="Permalink to &quot;3. 结果验证&quot;">​</a></h4><p>我们可以访问 <a href="http://localhost:9090/string-service/op/Diff/abc/bcd%EF%BC%8C%E6%9F%A5%E7%9C%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A" target="_blank" rel="noreferrer">http://localhost:9090/string-service/op/Diff/abc/bcd，查看字符串服务的请求结果，如下图所示：</a></p>`,26),y=s("p",null,"结果验证截图",-1),g=s("p",null,"可以看到，通过网关，我们可以正常访问字符串服务提供的接口。下面我们通过 Zipkin UI 来查看本次链路调用的信息，如下图所示：",-1),F=s("p",null,"Zipkin UI 查看链路调用的信息截图",-1),u=s("p",null,'在浏览器请求之后，可以在 Zipkin UI 中看到发送的请求记录（单击上方"Try Lens UI"切换成了 Lens UI，效果还不错），点击查看详细的链路调用情况，如下图所示：',-1),d=s("p",null,"Lens UI 截图",-1),C=s("p",null,"从调用链中可以看到，本次请求涉及两个服务：gateway-service 和 string-service。",-1),h=s("p",null,"整个链路有 3 个 Span：gateway、HTTP-transport 和 string-endpoint，确实如我们所定义的一样。这里我们主要看一下网关中的 Gateway Span 详情，如下图所示：",-1),k=l(`<p>Gateway Span 详情截图</p><p>Gateway 访问字符串服务的时候，其实是作为一个客户端建立连接并发起调用，然后等待 Server 写回响应结果，最后结束客户端的调用。通过上图的展开，我们清楚地了解这次调用（Span）打的标签（tag），包括 method、path 等。</p><h3 id="grpc-调用方式的链路追踪" tabindex="-1">gRPC 调用方式的链路追踪 <a class="header-anchor" href="#grpc-调用方式的链路追踪" aria-label="Permalink to &quot;gRPC 调用方式的链路追踪&quot;">​</a></h3><p>上面我们分析了微服务中 HTTP 调用方式的链路追踪，Go-kit 中的 transport 层可以方便地切换 RPC 调用方式，所以下面我们就来介绍下基于 gRPC 调用方式的链路追踪。本案例的实现是在前面HTTP 调用的代码基础上进行修改，并增加测试的调用客户端。</p><h4 id="_1-定义-protobuf-文件" tabindex="-1">1. 定义 protobuf 文件 <a class="header-anchor" href="#_1-定义-protobuf-文件" aria-label="Permalink to &quot;1. 定义 protobuf 文件&quot;">​</a></h4><p>我们首先来定义 protobuf 文件及生成对应的 Go 文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;proto3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> pb;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">service StringService{</span></span>
<span class="line"><span style="color:#E1E4E8;">    rpc </span><span style="color:#B392F0;">Diff</span><span style="color:#E1E4E8;">(StringRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (StringResponse){}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">message StringRequest {</span></span>
<span class="line"><span style="color:#E1E4E8;">    string request_type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    string a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    string b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">message StringResponse {</span></span>
<span class="line"><span style="color:#E1E4E8;">    string result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    string err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">syntax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;proto3&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> pb;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">service StringService{</span></span>
<span class="line"><span style="color:#24292E;">    rpc </span><span style="color:#6F42C1;">Diff</span><span style="color:#24292E;">(StringRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (StringResponse){}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">message StringRequest {</span></span>
<span class="line"><span style="color:#24292E;">    string request_type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    string a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    string b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">message StringResponse {</span></span>
<span class="line"><span style="color:#24292E;">    string result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    string err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里提供了字符串服务中的 Diff 方法，客户端通过 gRPC 调用字符串服务。使用 proto 工具生成对应的 Go 语言文件：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">protoc string.proto </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">go_out</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">plugins</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">grpc</span><span style="color:#E1E4E8;">:.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">protoc string.proto </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">go_out</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">grpc</span><span style="color:#24292E;">:.</span></span></code></pre></div><p>生成的 string.pb.go 可以参见<a href="https://github.com/longjoy/micro-go-course/blob/dev/section35/zipkin-kit/pb/string.pb.go" target="_blank" rel="noreferrer">源码</a>，此处不再展开。</p><h4 id="_2-定义-grpc-server" tabindex="-1">2. 定义 gRPC Server <a class="header-anchor" href="#_2-定义-grpc-server" aria-label="Permalink to &quot;2. 定义 gRPC Server&quot;">​</a></h4><p>在字符串服务中增加 gRPC server 的实现，并织入 gRPC 链路追踪的相关代码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//grpc server</span></span>
<span class="line"><span style="color:#E1E4E8;">	go </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;grpc Server start at port&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">grpcAddr)</span></span>
<span class="line"><span style="color:#E1E4E8;">		listener, </span><span style="color:#B392F0;">err</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#B392F0;">Listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">grpcAddr)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">			errChan </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">serverTracer</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kitzipkin.</span><span style="color:#B392F0;">GRPCServerTrace</span><span style="color:#E1E4E8;">(zipkinTracer, kitzipkin.</span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;string-grpc-transport&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewGRPCServer</span><span style="color:#E1E4E8;">(ctx, endpts, serverTracer)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">gRPCServer</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#B392F0;">NewServer</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		pb.</span><span style="color:#B392F0;">RegisterStringServiceServer</span><span style="color:#E1E4E8;">(gRPCServer, handler)</span></span>
<span class="line"><span style="color:#E1E4E8;">		errChan </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;"> gRPCServer.</span><span style="color:#B392F0;">Serve</span><span style="color:#E1E4E8;">(listener)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//grpc server</span></span>
<span class="line"><span style="color:#24292E;">	go </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;grpc Server start at port&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">grpcAddr)</span></span>
<span class="line"><span style="color:#24292E;">		listener, </span><span style="color:#6F42C1;">err</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> net.</span><span style="color:#6F42C1;">Listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">grpcAddr)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">			errChan </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">serverTracer</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kitzipkin.</span><span style="color:#6F42C1;">GRPCServerTrace</span><span style="color:#24292E;">(zipkinTracer, kitzipkin.</span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;string-grpc-transport&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewGRPCServer</span><span style="color:#24292E;">(ctx, endpts, serverTracer)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">gRPCServer</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> grpc.</span><span style="color:#6F42C1;">NewServer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		pb.</span><span style="color:#6F42C1;">RegisterStringServiceServer</span><span style="color:#24292E;">(gRPCServer, handler)</span></span>
<span class="line"><span style="color:#24292E;">		errChan </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> gRPCServer.</span><span style="color:#6F42C1;">Serve</span><span style="color:#24292E;">(listener)</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span></code></pre></div><p>要增加 Trace 的中间件，其实就是在 gRPC 的 ServerOption 中追加 GRPCServerTrace。我们增加的通用 Span 名为：string-grpc-transport。接下来就是在 endpoint 中，增加暴露接口的 gRPC 实现，代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (se StringEndpoints) </span><span style="color:#B392F0;">Diff</span><span style="color:#E1E4E8;">(ctx context.Context, a, b string) (string, error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	resp, </span><span style="color:#B392F0;">err</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> se.</span><span style="color:#B392F0;">StringEndpoint</span><span style="color:#E1E4E8;">(ctx, StringRequest{</span></span>
<span class="line"><span style="color:#E1E4E8;">		RequestType: </span><span style="color:#9ECBFF;">&quot;Diff&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		A:           a,</span></span>
<span class="line"><span style="color:#E1E4E8;">		B:           b,</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">response</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resp.(StringResponse)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response.Result, err</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (se StringEndpoints) </span><span style="color:#6F42C1;">Diff</span><span style="color:#24292E;">(ctx context.Context, a, b string) (string, error) {</span></span>
<span class="line"><span style="color:#24292E;">	resp, </span><span style="color:#6F42C1;">err</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> se.</span><span style="color:#6F42C1;">StringEndpoint</span><span style="color:#24292E;">(ctx, StringRequest{</span></span>
<span class="line"><span style="color:#24292E;">		RequestType: </span><span style="color:#032F62;">&quot;Diff&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		A:           a,</span></span>
<span class="line"><span style="color:#24292E;">		B:           b,</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">response</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resp.(StringResponse)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response.Result, err</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在构造 StringRequest 时，我们根据调用的 Diff 方法，指定了请求参数为&quot;Diff&quot;，下面即可定义 RPC 调用的客户端。</p><h4 id="_3-定义服务-grpc-调用的客户端" tabindex="-1">3. 定义服务 gRPC 调用的客户端 <a class="header-anchor" href="#_3-定义服务-grpc-调用的客户端" aria-label="Permalink to &quot;3. 定义服务 gRPC 调用的客户端&quot;">​</a></h4><p>字符串服务提供对外的客户端调用，定义方法名为 StringDiff，返回 StringEndpoint，代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	grpctransport </span><span style="color:#9ECBFF;">&quot;github.com/go-kit/kit/transport/grpc&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	kitgrpc </span><span style="color:#9ECBFF;">&quot;github.com/go-kit/kit/transport/grpc&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;github.com/longjoy/micro-go-course/section35/zipkin-kit/pb&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	endpts </span><span style="color:#9ECBFF;">&quot;github.com/longjoy/micro-go-course/section35/zipkin-kit/string-service/endpoint&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;github.com/longjoy/micro-go-course/section35/zipkin-kit/string-service/service&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;google.golang.org/grpc&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">StringDiff</span><span style="color:#E1E4E8;">(conn </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">grpc.ClientConn, clientTracer kitgrpc.ClientOption) service.Service {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ep </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> grpctransport.</span><span style="color:#B392F0;">NewClient</span><span style="color:#E1E4E8;">(conn,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;pb.StringService&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;Diff&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		EncodeGRPCStringRequest, </span><span style="color:#6A737D;">// 请求的编码</span></span>
<span class="line"><span style="color:#E1E4E8;">		DecodeGRPCStringResponse, </span><span style="color:#6A737D;">// 响应的解码</span></span>
<span class="line"><span style="color:#E1E4E8;">		pb.StringResponse{}, </span><span style="color:#6A737D;">//定义返回的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">		clientTracer, </span><span style="color:#6A737D;">//客户端的 GRPCClientTrace</span></span>
<span class="line"><span style="color:#E1E4E8;">	).</span><span style="color:#B392F0;">Endpoint</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">StringEp</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> endpts.StringEndpoints{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">StringEndpoint</span><span style="color:#E1E4E8;">: ep,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> StringEp</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	grpctransport </span><span style="color:#032F62;">&quot;github.com/go-kit/kit/transport/grpc&quot;</span></span>
<span class="line"><span style="color:#24292E;">	kitgrpc </span><span style="color:#032F62;">&quot;github.com/go-kit/kit/transport/grpc&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;github.com/longjoy/micro-go-course/section35/zipkin-kit/pb&quot;</span></span>
<span class="line"><span style="color:#24292E;">	endpts </span><span style="color:#032F62;">&quot;github.com/longjoy/micro-go-course/section35/zipkin-kit/string-service/endpoint&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;github.com/longjoy/micro-go-course/section35/zipkin-kit/string-service/service&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;google.golang.org/grpc&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">StringDiff</span><span style="color:#24292E;">(conn </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">grpc.ClientConn, clientTracer kitgrpc.ClientOption) service.Service {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ep </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> grpctransport.</span><span style="color:#6F42C1;">NewClient</span><span style="color:#24292E;">(conn,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;pb.StringService&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;Diff&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		EncodeGRPCStringRequest, </span><span style="color:#6A737D;">// 请求的编码</span></span>
<span class="line"><span style="color:#24292E;">		DecodeGRPCStringResponse, </span><span style="color:#6A737D;">// 响应的解码</span></span>
<span class="line"><span style="color:#24292E;">		pb.StringResponse{}, </span><span style="color:#6A737D;">//定义返回的对象</span></span>
<span class="line"><span style="color:#24292E;">		clientTracer, </span><span style="color:#6A737D;">//客户端的 GRPCClientTrace</span></span>
<span class="line"><span style="color:#24292E;">	).</span><span style="color:#6F42C1;">Endpoint</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">StringEp</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> endpts.StringEndpoints{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">StringEndpoint</span><span style="color:#24292E;">: ep,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> StringEp</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从客户端调用的定义可以看到，传入的是 grpc 连接和客户端的 trace 上下文。这里需要注意的是 GRPCClientTrace 的初始化，测试 gRPC 调用的客户端时将会传入该参数。</p><h4 id="_4-测试-grpc-调用的客户端" tabindex="-1">4. 测试 gRPC 调用的客户端 <a class="header-anchor" href="#_4-测试-grpc-调用的客户端" aria-label="Permalink to &quot;4. 测试 gRPC 调用的客户端&quot;">​</a></h4><p>编写 client_test.go，调用我们在前面已经定义的 client.StringDiff 方法，代码如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//... zipkinTracer 的构造省略</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">tr</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zipkinTracer</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 设定根 Span 的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">parentSpan</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tr.</span><span style="color:#B392F0;">StartSpan</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	defer parentSpan.</span><span style="color:#B392F0;">Flush</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 写入上下文</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">ctx</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zipkin.</span><span style="color:#B392F0;">NewContext</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">Background</span><span style="color:#E1E4E8;">(), parentSpan)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//初始化 GRPCClientTrace</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">clientTracer</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kitzipkin.</span><span style="color:#B392F0;">GRPCClientTrace</span><span style="color:#E1E4E8;">(tr) </span></span>
<span class="line"><span style="color:#E1E4E8;">	conn, </span><span style="color:#B392F0;">err</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#B392F0;">Dial</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">grpcAddr, grpc.</span><span style="color:#B392F0;">WithInsecure</span><span style="color:#E1E4E8;">(), grpc.</span><span style="color:#B392F0;">WithTimeout</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">time.Second))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;gRPC dial err:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	defer conn.</span><span style="color:#B392F0;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 获取 rpc 调用的 endpoint，发起调用</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">svr</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">StringDiff</span><span style="color:#E1E4E8;">(conn, clientTracer)</span></span>
<span class="line"><span style="color:#E1E4E8;">	result, </span><span style="color:#B392F0;">err</span><span style="color:#E1E4E8;"> :</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> svr.</span><span style="color:#B392F0;">Diff</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#9ECBFF;">&quot;Add&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ppsdd&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Diff error&quot;</span><span style="color:#E1E4E8;">, err.</span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;result =&quot;</span><span style="color:#E1E4E8;">, result)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//... zipkinTracer 的构造省略</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">tr</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zipkinTracer</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 设定根 Span 的名称</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">parentSpan</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tr.</span><span style="color:#6F42C1;">StartSpan</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	defer parentSpan.</span><span style="color:#6F42C1;">Flush</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 写入上下文</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">ctx</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zipkin.</span><span style="color:#6F42C1;">NewContext</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">Background</span><span style="color:#24292E;">(), parentSpan)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//初始化 GRPCClientTrace</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">clientTracer</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kitzipkin.</span><span style="color:#6F42C1;">GRPCClientTrace</span><span style="color:#24292E;">(tr) </span></span>
<span class="line"><span style="color:#24292E;">	conn, </span><span style="color:#6F42C1;">err</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> grpc.</span><span style="color:#6F42C1;">Dial</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">grpcAddr, grpc.</span><span style="color:#6F42C1;">WithInsecure</span><span style="color:#24292E;">(), grpc.</span><span style="color:#6F42C1;">WithTimeout</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">time.Second))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;gRPC dial err:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	defer conn.</span><span style="color:#6F42C1;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 获取 rpc 调用的 endpoint，发起调用</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">svr</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">StringDiff</span><span style="color:#24292E;">(conn, clientTracer)</span></span>
<span class="line"><span style="color:#24292E;">	result, </span><span style="color:#6F42C1;">err</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> svr.</span><span style="color:#6F42C1;">Diff</span><span style="color:#24292E;">(ctx, </span><span style="color:#032F62;">&quot;Add&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ppsdd&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Diff error&quot;</span><span style="color:#24292E;">, err.</span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;result =&quot;</span><span style="color:#24292E;">, result)</span></span></code></pre></div><p>客户端在调用之前，我们构建了要传入的 GRPCClientTrace，作为获取 rpc 调用的 endpoint 的参数，设定调用的父 Span 名称，这个上下文信息会传入 Zipkin 服务端。调用输出的结果如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ts</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">24</span><span style="color:#B392F0;">T15</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">06</span><span style="color:#E1E4E8;">.817056</span><span style="color:#79B8FF;">Z</span><span style="color:#E1E4E8;"> caller</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">client_test.go:</span><span style="color:#79B8FF;">51</span><span style="color:#E1E4E8;"> tracer</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Zipkin type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Native </span><span style="color:#79B8FF;">URL</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:9411/api/v2/spans</span></span>
<span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ts</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">24</span><span style="color:#6F42C1;">T15</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">27</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">06</span><span style="color:#24292E;">.817056</span><span style="color:#005CC5;">Z</span><span style="color:#24292E;"> caller</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">client_test.go:</span><span style="color:#005CC5;">51</span><span style="color:#24292E;"> tracer</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Zipkin type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Native </span><span style="color:#005CC5;">URL</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:9411/api/v2/spans</span></span>
<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dd</span></span></code></pre></div><p>测试用例的调用结果正确，我们来看一下 Zipkin 中记录的调用链信息。点击查看详情，可以看到本次请求涉及两个服务：test-service 和 string-service。如图所示：</p>`,26);function T(A,v,D,q,B,P){const n=e("Image");return t(),r("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/5E/75/Ciqc1F-GvryAbSsGAABD2LP4yN8428.png"}),p(),i,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/5E/75/Ciqc1F-GvvSAdvD2AAJxdVYATAU644.png"}),p(),y,g,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/5E/80/CgqCHl-GvvqAccZPAAPASa8eLYA067.png"}),p(),F,u,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/5E/75/Ciqc1F-GvwOAO5wJAANEaW1O3C4296.png"}),p(),d,C,h,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/5E/80/CgqCHl-GvwuASVfGAAcZvmOB0Kc881.png"}),p(),k,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/5E/81/CgqCHl-GvzeAWzGRAASmhMb8V3c466.png"})])}const _=o(c,[["render",T]]);export{b as __pageData,_ as default};
