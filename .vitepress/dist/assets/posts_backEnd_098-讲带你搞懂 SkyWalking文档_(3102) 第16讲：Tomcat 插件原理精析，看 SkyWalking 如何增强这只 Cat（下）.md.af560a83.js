import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.f949202b.js";const b=JSON.parse('{"title":"TomcatInstrumentation ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(3102) 第16讲：Tomcat 插件原理精析，看 SkyWalking 如何增强这只 Cat（下）.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(3102) 第16讲：Tomcat 插件原理精析，看 SkyWalking 如何增强这只 Cat（下）.md","lastUpdated":null}'),l={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(3102) 第16讲：Tomcat 插件原理精析，看 SkyWalking 如何增强这只 Cat（下）.md"},e=p(`<h4 id="tomcatinstrumentation" tabindex="-1">TomcatInstrumentation <a class="header-anchor" href="#tomcatinstrumentation" aria-label="Permalink to &quot;TomcatInstrumentation&quot;">​</a></h4><p>回顾完 ClassEnhancePluginDefine 抽象类的相关设计，我们回到 tomcat-7.x-8.x-plugin 插件中继续分析 TomcatInstrumentation 这个插件类，重点关注四个问题：拦截哪个类、拦截哪个方法、由谁进行增强、具体增强逻辑。</p><p>先来看 enhanceClass()方法，它返回的 ClassMatch 匹配了拦截的类名：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> ClassMatch </span><span style="color:#B392F0;">enhanceClass</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">// 拦截Tomcat的StandardHostValve类</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">byName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.apache.catalina.core.StandardHostValve&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> ClassMatch </span><span style="color:#6F42C1;">enhanceClass</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">// 拦截Tomcat的StandardHostValve类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">byName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.apache.catalina.core.StandardHostValve&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>TomcatInstrumentation.getConstructorsInterceptPoints() 方法返回为 null，</p><p>不会拦截 StandardHostValve 的构造方法。getInstanceMethodsInterceptPoints() 返回了两个实例方法增强点（InstanceMethodsInterceptPoint 对象），其中一个是拦截 invoke() 方法，相关实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InstanceMethodsInterceptPoint</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ElementMatcher&lt;</span><span style="color:#F97583;">MethodDescription</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getMethodsMatcher</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">named</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;invoke&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 拦截名为invoke的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getMethodsInterceptor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;org.apache.skywalking.apm.plugin.tomcat78x</span></span>
<span class="line"><span style="color:#9ECBFF;">             .TomcatInvokeInterceptor&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 拦截后的增强逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isOverrideArgs</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 不修改invoke()方法的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstanceMethodsInterceptPoint</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ElementMatcher&lt;</span><span style="color:#D73A49;">MethodDescription</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getMethodsMatcher</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">named</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;invoke&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 拦截名为invoke的方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getMethodsInterceptor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;org.apache.skywalking.apm.plugin.tomcat78x</span></span>
<span class="line"><span style="color:#032F62;">             .TomcatInvokeInterceptor&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 拦截后的增强逻辑</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isOverrideArgs</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 不修改invoke()方法的参数</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>TomcatInvokeInterceptor 实现了 InstanceMethodsAroundInterceptor 接口，定义了具体的增强逻辑，你可以回顾一下 InstMethodsInter 实现类，它会在目标方法前后调用 InstanceMethodsAroundInterceptor 实现的 beforeMethod() 方法、handleMethodException</p><p>() 方法以及 afterMethod() 方法。</p><p>下面是关于 TomcatInvokeInterceptor.beforeMethod() 方法三种场景的考虑：</p><ol><li>当 Tomcat 作为用户请求接入层的场景时，如下图所示：</li></ol><p><img src="https://s0.lgstatic.com/i/image/M00/00/AF/CgqCHl6qTfmAEU6RAAC170V3ef8022.png" alt="1.png"></p><p>此时请求没有与任何 Trace 关联，也就不会携带 ContextCarrier 请求头，beforeMethod() 方法中会创建全新的 TracingContext 以及 EntrySpan。</p><ol start="2"><li>tomcat-7.x-8.x-plugin 插件被嵌套在其他插件之后的场景，如下图所示：</li></ol><p><img src="https://s0.lgstatic.com/i/image/M00/00/AF/CgqCHl6qTheAD0FbAADiLfWhOis706.png" alt="2.png"></p><p>此时请求在经过其他插件的时候，已经创建了关联的 TracingContext 以及 EntrySpan，beforeMethod() 方法无需创建 TracingContext，只需重新调用 EntrySpan 的 start() 方法即可。</p><ol start="3"><li>Tomcat 作为下游系统被其他系统调用的场景，如下图所示：</li></ol><p><img src="https://s0.lgstatic.com/i/image/M00/00/AF/CgqCHl6qTi-AFnZOAADQxYkP_ok501.png" alt="3.png"></p><p>此时请求已经在上游系统中关联了 Trace，在跨进程 HTTP 调用时就会携带 ContextCarrier 请求头，在 TomcatInstrumentation 的 beforeMethod() 方法中进行反序列化，并填充到全新的 TracingContext 中，还会新建 EntrySpan 并调用其 start() 方法。</p><p>TomcatInvokeInterceptor.beforeMethod() 方法同时支持了上述三种场景，它首先会尝试从 HttpServletRequest 请求头中查找 ContextCarrier 请求头，如果存在则进行反序列化操作。然后，查找（或创建）请求关联的 TracingContext 以及 EntrySpan。最后会记录 Tags 信息以及Component 信息。具体代码实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeMethod</span><span style="color:#E1E4E8;">(EnhancedInstance objInst, Method method, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] argumentsTypes, </span></span>
<span class="line"><span style="color:#E1E4E8;">           MethodInterceptResult result) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// invoke()方法的第一个参数就是HttpServletRequest对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    HttpServletRequest request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (HttpServletRequest)allArguments[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建一个空的ContextCarrier对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    ContextCarrier contextCarrier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContextCarrier</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从Http请求头中反序列化ContextCarrier</span></span>
<span class="line"><span style="color:#E1E4E8;">    CarrierItem next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contextCarrier.</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (next.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        next.</span><span style="color:#B392F0;">setHeadValue</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(next.</span><span style="color:#B392F0;">getHeadKey</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取当前线程绑定的TracingContext，如果未绑定则会创建新TracingContext并</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 绑定，同时还会创建EntrySpan，如果已存在EntrySpan，则再次调用其start()方</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 法 。这里的第一个参数是operationName(即EndpointName)，Tomcat的场景下</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 就是请求的 URI。</span></span>
<span class="line"><span style="color:#E1E4E8;">    AbstractSpan span </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ContextManager.</span><span style="color:#B392F0;">createEntrySpan</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        request.</span><span style="color:#B392F0;">getRequestURI</span><span style="color:#E1E4E8;">(), contextCarrier);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 为EntrySpan添加Tags，记录请求的URL以及Method信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    Tags.URL.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(span, request.</span><span style="color:#B392F0;">getRequestURL</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    Tags.HTTP.METHOD.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(span, request.</span><span style="color:#B392F0;">getMethod</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    span.</span><span style="color:#B392F0;">setComponent</span><span style="color:#E1E4E8;">(ComponentsDefine.TOMCAT); </span><span style="color:#6A737D;">// 设置component字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    SpanLayer.</span><span style="color:#B392F0;">asHttp</span><span style="color:#E1E4E8;">(span); </span><span style="color:#6A737D;">// 设置layer字段</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeMethod</span><span style="color:#24292E;">(EnhancedInstance objInst, Method method, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] argumentsTypes, </span></span>
<span class="line"><span style="color:#24292E;">           MethodInterceptResult result) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// invoke()方法的第一个参数就是HttpServletRequest对象</span></span>
<span class="line"><span style="color:#24292E;">    HttpServletRequest request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (HttpServletRequest)allArguments[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建一个空的ContextCarrier对象</span></span>
<span class="line"><span style="color:#24292E;">    ContextCarrier contextCarrier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContextCarrier</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从Http请求头中反序列化ContextCarrier</span></span>
<span class="line"><span style="color:#24292E;">    CarrierItem next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contextCarrier.</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (next.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        next.</span><span style="color:#6F42C1;">setHeadValue</span><span style="color:#24292E;">(request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(next.</span><span style="color:#6F42C1;">getHeadKey</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取当前线程绑定的TracingContext，如果未绑定则会创建新TracingContext并</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 绑定，同时还会创建EntrySpan，如果已存在EntrySpan，则再次调用其start()方</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 法 。这里的第一个参数是operationName(即EndpointName)，Tomcat的场景下</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 就是请求的 URI。</span></span>
<span class="line"><span style="color:#24292E;">    AbstractSpan span </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ContextManager.</span><span style="color:#6F42C1;">createEntrySpan</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">getRequestURI</span><span style="color:#24292E;">(), contextCarrier);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 为EntrySpan添加Tags，记录请求的URL以及Method信息</span></span>
<span class="line"><span style="color:#24292E;">    Tags.URL.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(span, request.</span><span style="color:#6F42C1;">getRequestURL</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    Tags.HTTP.METHOD.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(span, request.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    span.</span><span style="color:#6F42C1;">setComponent</span><span style="color:#24292E;">(ComponentsDefine.TOMCAT); </span><span style="color:#6A737D;">// 设置component字段</span></span>
<span class="line"><span style="color:#24292E;">    SpanLayer.</span><span style="color:#6F42C1;">asHttp</span><span style="color:#24292E;">(span); </span><span style="color:#6A737D;">// 设置layer字段</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>在前面的课时中我们已经详细介绍了 ContextManager、TracingContext 以及 EntrySpan 的实现原理，这里不再展开，你可以回顾第 11 课时和第 13 课时中的相关内容。</p><h4 id="再探-contextcarrier" tabindex="-1">再探 ContextCarrier <a class="header-anchor" href="#再探-contextcarrier" aria-label="Permalink to &quot;再探 ContextCarrier&quot;">​</a></h4><p>在 TomcatInvokeInterceptor 反序列化 ContextCarrier 的逻辑中，没有看到 deserialize() 方法的调用，而是看到 CarrierItem 这个类。在 SkyWalking 的 3.x 版本和 6.x 版本中，CarrierContext 的序列化格式略有区别（V1 版本和 V2 版本），我们可以通过 CarrierItem 同时兼容两个版本的格式。CarrierItem 的继承关系如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/BB/CgqCHl6qZFmASH0MAABQy3R7qxw376.png" alt="4.png"></p><p>先来看序列化过程，ContextCarrier.items() 方法会根据 ACTIVE_V2_HEADER 配置以及 ACTIVE_V1_HEADER 配置决定当前 Agent 支持哪个版本的格式（也可以同时支持），下图展示了在同时支持 V1、V2 两个版本序列化格式时，ContextCarrier.items() 方法创建的 CarrierItem 链表：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/BB/Ciqc1F6qZHCAW4yoAAFesp2L980140.png" alt="image (3).png"></p><p>在 CarrierItem 中有 headKey 和 headValue 两个核心字段，其中 headKey 由 agent.namespace 和版本标记两部分构成，headValue 则是 ContextCarrier 按照相应版本格式序列化后得到的字符串。下面是 SW6CarrierItem 的构造方法：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SW6CarrierItem</span><span style="color:#E1E4E8;">(ContextCarrier carrier, CarrierItem next) {</span></span>
<span class="line"><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(HEADER\\_NAME, </span><span style="color:#6A737D;">// headKey</span></span>
<span class="line"><span style="color:#6A737D;">// 按照V2版本序列化得到headValue</span></span>
<span class="line"><span style="color:#E1E4E8;">carrier.</span><span style="color:#B392F0;">serialize</span><span style="color:#E1E4E8;">(ContextCarrier.HeaderVersion.v2),</span></span>
<span class="line"><span style="color:#E1E4E8;">next); </span><span style="color:#6A737D;">// 下一个CarrierItem节点</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.carrier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> carrier; </span><span style="color:#6A737D;">// 记录关联的ContextCarrier对象</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SW6CarrierItem</span><span style="color:#24292E;">(ContextCarrier carrier, CarrierItem next) {</span></span>
<span class="line"><span style="color:#005CC5;">super</span><span style="color:#24292E;">(HEADER\\_NAME, </span><span style="color:#6A737D;">// headKey</span></span>
<span class="line"><span style="color:#6A737D;">// 按照V2版本序列化得到headValue</span></span>
<span class="line"><span style="color:#24292E;">carrier.</span><span style="color:#6F42C1;">serialize</span><span style="color:#24292E;">(ContextCarrier.HeaderVersion.v2),</span></span>
<span class="line"><span style="color:#24292E;">next); </span><span style="color:#6A737D;">// 下一个CarrierItem节点</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.carrier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> carrier; </span><span style="color:#6A737D;">// 记录关联的ContextCarrier对象</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上图中的 CarrierItemHead 只是链表的头节点，不携带任何有效信息。</p><p>通过 CarrierContext.item() 方法拿到 CarrierItem 链表之后，CarrierItemHead 就可以将其中每个 CarrierItem 作为附件信息添加到跨进程调用的请求中，例如，添加到 HTTP 请求头中，其中 headKey 作为 HttpHeader 的 Key，headValue 作为 HttpHeader 的 Value。</p><p>在处理 HTTP 请求的服务端，例如本课时分析的 tomcat-7.x-8.x-plugin 插件中，会根据当前 Agent 支持的版本，从相应 HttpHeader 中，按照拿到的 ContextCarrier 字符串，反序列化填充 ContextCarrier 对象，所以才会有 TomcatInvokeInterceptor.beforeMethod() 方法中的这段代码片段：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建空的ContextCarrier对象</span></span>
<span class="line"><span style="color:#E1E4E8;">ContextCarrier contextCarrier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContextCarrier</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建CarrierItem链表，因为ContextCarrier对象是空的，所以链表也是空的</span></span>
<span class="line"><span style="color:#E1E4E8;">CarrierItem next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contextCarrier.</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (next.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 拿到HttpHeader的Value，即对应版本的ContextCarrier序列化字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">next.</span><span style="color:#B392F0;">setHeadValue</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">getHeader</span><span style="color:#E1E4E8;">(next.</span><span style="color:#B392F0;">getHeadKey</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建空的ContextCarrier对象</span></span>
<span class="line"><span style="color:#24292E;">ContextCarrier contextCarrier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContextCarrier</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建CarrierItem链表，因为ContextCarrier对象是空的，所以链表也是空的</span></span>
<span class="line"><span style="color:#24292E;">CarrierItem next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contextCarrier.</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (next.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 拿到HttpHeader的Value，即对应版本的ContextCarrier序列化字符串</span></span>
<span class="line"><span style="color:#24292E;">next.</span><span style="color:#6F42C1;">setHeadValue</span><span style="color:#24292E;">(request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(next.</span><span style="color:#6F42C1;">getHeadKey</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在 SW6CarrierItem.setHeaderValue() 方法中会调用 ContextCarrier.deserialize() 方法，并按照 V2 版本的格式对 ContextCarrier 字符串进行解析，同时填充 ContextCarrier 对象的相应字段。SW3CarrierItem.setHeaderValue() 方法的实现与上述过程类似。</p><p>到此，TracingContext 的跨进程传播流程已经梳理完成了，相信你对此处的逻辑也已经有了清晰的认知。</p><p>请求经过 beforeMethod() 方法处理之后，会继续调用 StandardHostValve.invoke() 这个目标方法。 在 invoke() 方法返回之后，继续执行 TomcatInvokeInterceptor.afterMethod() 的后置处理，请求会调用当前 stopSpan() 关闭当前 Span（即前面创建的 EntrySpan），同时会根据 HTTP 响应码在 Span 中标记该请求是否发生异常，记录相关 Tags 信息等，具体实现如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">afterMethod</span><span style="color:#E1E4E8;">(EnhancedInstance objInst, Method method,</span></span>
<span class="line"><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] argumentsTypes,</span></span>
<span class="line"><span style="color:#E1E4E8;">Object ret) throws Throwable {</span></span>
<span class="line"><span style="color:#6A737D;">// invoke()方法的第二个参数是 HttpServletResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">HttpServletResponse response </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">(HttpServletResponse)allArguments[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 获取当前Span，因为TracingContext是栈的形式管理Span，当前Span即为</span></span>
<span class="line"><span style="color:#6A737D;">// beforeMethod()方法中创建的EntrySpan</span></span>
<span class="line"><span style="color:#E1E4E8;">AbstractSpan span </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ContextManager.</span><span style="color:#B392F0;">activeSpan</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">// 如果响应码是4xx或是5xx，则表示Http响应异常，标记当前Span的</span></span>
<span class="line"><span style="color:#6A737D;">// errorOccurred字段，并记录一个Key为status\\_code的Tag</span></span>
<span class="line"><span style="color:#E1E4E8;">span.</span><span style="color:#B392F0;">errorOccurred</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Tags.STATUS\\_CODE.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(span,</span></span>
<span class="line"><span style="color:#E1E4E8;">Integer.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(response.</span><span style="color:#B392F0;">getStatus</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 关闭当前EntrySpan，如果EntrySpan完全关闭，则整个Span栈为空，</span></span>
<span class="line"><span style="color:#6A737D;">// 所在的TraceSegment也将随之关闭，这些逻辑在前面已经详细介绍过了</span></span>
<span class="line"><span style="color:#E1E4E8;">ContextManager.</span><span style="color:#B392F0;">stopSpan</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 从RuntimeContext中清理FORWARD\\_REQUEST\\_FLAG信息，其含义后面再说</span></span>
<span class="line"><span style="color:#E1E4E8;">ContextManager.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">Constants.FORWARD\\_REQUEST\\_FLAG);</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">afterMethod</span><span style="color:#24292E;">(EnhancedInstance objInst, Method method,</span></span>
<span class="line"><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] argumentsTypes,</span></span>
<span class="line"><span style="color:#24292E;">Object ret) throws Throwable {</span></span>
<span class="line"><span style="color:#6A737D;">// invoke()方法的第二个参数是 HttpServletResponse</span></span>
<span class="line"><span style="color:#24292E;">HttpServletResponse response </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">(HttpServletResponse)allArguments[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 获取当前Span，因为TracingContext是栈的形式管理Span，当前Span即为</span></span>
<span class="line"><span style="color:#6A737D;">// beforeMethod()方法中创建的EntrySpan</span></span>
<span class="line"><span style="color:#24292E;">AbstractSpan span </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ContextManager.</span><span style="color:#6F42C1;">activeSpan</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">400</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">// 如果响应码是4xx或是5xx，则表示Http响应异常，标记当前Span的</span></span>
<span class="line"><span style="color:#6A737D;">// errorOccurred字段，并记录一个Key为status\\_code的Tag</span></span>
<span class="line"><span style="color:#24292E;">span.</span><span style="color:#6F42C1;">errorOccurred</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Tags.STATUS\\_CODE.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(span,</span></span>
<span class="line"><span style="color:#24292E;">Integer.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(response.</span><span style="color:#6F42C1;">getStatus</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 关闭当前EntrySpan，如果EntrySpan完全关闭，则整个Span栈为空，</span></span>
<span class="line"><span style="color:#6A737D;">// 所在的TraceSegment也将随之关闭，这些逻辑在前面已经详细介绍过了</span></span>
<span class="line"><span style="color:#24292E;">ContextManager.</span><span style="color:#6F42C1;">stopSpan</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 从RuntimeContext中清理FORWARD\\_REQUEST\\_FLAG信息，其含义后面再说</span></span>
<span class="line"><span style="color:#24292E;">ContextManager.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">Constants.FORWARD\\_REQUEST\\_FLAG);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>最后，在 StandardHostValve.invoke() 方法处理请求抛出异常时，TomcatInvokeInterceptor.handleMethodException() 方法会在当前 Span 中记录 Log 信息，并通过 Span 的 errorOccurred 字段标记该请求处理异常。</p><h4 id="applicationdispatcherinstrumentation" tabindex="-1">ApplicationDispatcherInstrumentation <a class="header-anchor" href="#applicationdispatcherinstrumentation" aria-label="Permalink to &quot;ApplicationDispatcherInstrumentation&quot;">​</a></h4><p>如果你了解 Java Web 编程，就会知道 Servlet 中有 forward（直接请求转发） 和 redirect（间接请求转发） 两种跳转方式。</p><p>redirect 跳转，也叫重定向，它一般用于避免用户的非正常访问，例如，在用户没有登录的情况下访问后台资源，Servlet 可以将该 HTTP 请求重定向到登录页面，让用户进行登录操作。在Servlet 中，redirect 会通过调用 response 对象的 sendRedirect() 方法，告诉浏览器重定向，访问指定的 URL，示例代码如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doGet</span><span style="color:#E1E4E8;">(HttpServletRequest request,</span></span>
<span class="line"><span style="color:#E1E4E8;">HttpServletResponse response){</span></span>
<span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">sendRedirect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;跳转到的目标URL&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doGet</span><span style="color:#24292E;">(HttpServletRequest request,</span></span>
<span class="line"><span style="color:#24292E;">HttpServletResponse response){</span></span>
<span class="line"><span style="color:#24292E;">response.</span><span style="color:#6F42C1;">sendRedirect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;跳转到的目标URL&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>下图展示了 redirect 跳转的流程：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/BB/CgqCHl6qZNuANBrFAAHuLLyTujQ360.png" alt="image (4).png"></p><p>注意，redirect 跳转可以跳转到任意 URL，Servlet 1 和 Servlet 2 不一定要在一个 Webapp 中。</p><p>在 Tomcat 的代码实现中，我们可以看到 org.apache.catalina.connector.Response 这个类对 sendRedirect() 方法的实现，它会将响应状态码设置成 302（或307） ，并设置 Location 这个 Header 指明跳转的目标地址，相关实现片段如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendRedirect</span><span style="color:#E1E4E8;">(String location, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> status) {</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">String locationUri </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ...; </span><span style="color:#6A737D;">// 获取 redirectUrl</span></span>
<span class="line"><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(status); </span><span style="color:#6A737D;">// 状态码设置为302或是307</span></span>
<span class="line"><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Location&quot;</span><span style="color:#E1E4E8;">, locationUri);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSendRedirectBody</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 返回ResponseBody</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IllegalArgumentException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">setStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;404&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">setSuspended</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Cause the response to be finished</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendRedirect</span><span style="color:#24292E;">(String location, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> status) {</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">String locationUri </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...; </span><span style="color:#6A737D;">// 获取 redirectUrl</span></span>
<span class="line"><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(status); </span><span style="color:#6A737D;">// 状态码设置为302或是307</span></span>
<span class="line"><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Location&quot;</span><span style="color:#24292E;">, locationUri);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSendRedirectBody</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 返回ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IllegalArgumentException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">setStatus</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;404&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">setSuspended</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Cause the response to be finished</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>forward 跳转是 Webapp 内部的跳转，对用户来说是无感知的，跳转期间不会返回响应，用户浏览器的 URL 地址栏也不会发生变化。注意，forward 跳转无法跨越多个 Webapp。forward 跳转的具体流程如下所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/BC/CgqCHl6qZcmAJZYZAAGM2VAIvQ8947.png" alt="image (5).png"></p><p>实际的 forward 跳转代码如下所示：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doGet</span><span style="color:#E1E4E8;">(HttpServletRequest request ,</span></span>
<span class="line"><span style="color:#E1E4E8;">HttpServletResponse response){</span></span>
<span class="line"><span style="color:#6A737D;">// 获取请求转发器对象，该转发器的指向通过getRequestDisPatcher()的参数设置</span></span>
<span class="line"><span style="color:#E1E4E8;">RequestDispatcher requestDispatcher </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">getRequestDispatcher</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Servler2的地址&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 调用forward()方法，转发请求</span></span>
<span class="line"><span style="color:#E1E4E8;">requestDispatcher.</span><span style="color:#B392F0;">forward</span><span style="color:#E1E4E8;">(request,response);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doGet</span><span style="color:#24292E;">(HttpServletRequest request ,</span></span>
<span class="line"><span style="color:#24292E;">HttpServletResponse response){</span></span>
<span class="line"><span style="color:#6A737D;">// 获取请求转发器对象，该转发器的指向通过getRequestDisPatcher()的参数设置</span></span>
<span class="line"><span style="color:#24292E;">RequestDispatcher requestDispatcher </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">getRequestDispatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Servler2的地址&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 调用forward()方法，转发请求</span></span>
<span class="line"><span style="color:#24292E;">requestDispatcher.</span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(request,response);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>RequestDispatcher 是 Java Servlet 规范中规定的一个接口，在 Tomcat 的代码中，ApplicationDispatcher 实现了 RequestDispatcher 接口。在 forward() 方法实现中，会根据指定的目标创建一个新的 Request 请求并交给 Context 进行处理，具体实现逻辑较长，如果你感兴趣的话可以去翻看一下具体的实现逻辑。</p><p>在 tomcat-7.x-8.x-plugin 插件的 skywalking-plugin.def 配置文件中定义的 ApplicationDispatcherInstrumentation 类，负责拦截 Tomcat 中 ApplicationDispatcher 的全部构造方法以及其 forward()方法，具体的增强逻辑位于 ForwardInterceptor 中。 首先来看 ForwardInterceptor 对构造方法的增强，onConstruct() 方法会将跳转的目标地址记录到增强字段（_$EnhancedClassField_ws）中：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onConstruct</span><span style="color:#E1E4E8;">(EnhancedInstance objInst,</span></span>
<span class="line"><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments) {</span></span>
<span class="line"><span style="color:#6A737D;">// ApplicationDispatcher构造方法的第二个参数为跳转的目标地址，下图所示</span></span>
<span class="line"><span style="color:#E1E4E8;">objInst.</span><span style="color:#B392F0;">setSkyWalkingDynamicField</span><span style="color:#E1E4E8;">(allArguments[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onConstruct</span><span style="color:#24292E;">(EnhancedInstance objInst,</span></span>
<span class="line"><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments) {</span></span>
<span class="line"><span style="color:#6A737D;">// ApplicationDispatcher构造方法的第二个参数为跳转的目标地址，下图所示</span></span>
<span class="line"><span style="color:#24292E;">objInst.</span><span style="color:#6F42C1;">setSkyWalkingDynamicField</span><span style="color:#24292E;">(allArguments[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="https://s0.lgstatic.com/i/image/M00/00/BC/CgqCHl6qZkKAB_A5AABVHOMz99A638.png" alt="image (6).png"></p><p>ForwardInterceptor 对 forward() 方法的增强比较简单，会在 beforeMethod() 方法中将跳转 URL 地址作为 Log 记录到当前 Span 中，同时会在 RuntimeContext 中记录 forward 跳转标记：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeMethod</span><span style="color:#E1E4E8;">(EnhancedInstance objInst, Method method,</span></span>
<span class="line"><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] argumentsTypes,</span></span>
<span class="line"><span style="color:#E1E4E8;">MethodInterceptResult result) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">AbstractSpan abstractTracingSpan </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">ContextManager.</span><span style="color:#B392F0;">activeSpan</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Map\\</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> eventMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap\\&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">eventMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;forward-url&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">objInst.</span><span style="color:#B392F0;">getSkyWalkingDynamicField</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(objInst.</span><span style="color:#B392F0;">getSkyWalkingDynamicField</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#6A737D;">// 通过Log的方式记录将跳转URL</span></span>
<span class="line"><span style="color:#E1E4E8;">abstractTracingSpan.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">(), eventMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">ContextManager.</span><span style="color:#B392F0;">getRuntimeContext</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 记录forward标记哦</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(Constants.FORWARD\\_REQUEST\\_FLAG, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeMethod</span><span style="color:#24292E;">(EnhancedInstance objInst, Method method,</span></span>
<span class="line"><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] argumentsTypes,</span></span>
<span class="line"><span style="color:#24292E;">MethodInterceptResult result) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">AbstractSpan abstractTracingSpan </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">ContextManager.</span><span style="color:#6F42C1;">activeSpan</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Map\\</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> eventMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap\\&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">eventMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;forward-url&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">objInst.</span><span style="color:#6F42C1;">getSkyWalkingDynamicField</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(objInst.</span><span style="color:#6F42C1;">getSkyWalkingDynamicField</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#6A737D;">// 通过Log的方式记录将跳转URL</span></span>
<span class="line"><span style="color:#24292E;">abstractTracingSpan.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">(), eventMap);</span></span>
<span class="line"><span style="color:#24292E;">ContextManager.</span><span style="color:#6F42C1;">getRuntimeContext</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 记录forward标记哦</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(Constants.FORWARD\\_REQUEST\\_FLAG, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时第 1 部分介绍了 Tomcat 的整体架构，帮助你梳理了 Tomcat 处理请求的逻辑。Tomcat 在接收到用户请求时，首先由 Connector 将请求转换成 Request 对象，然后调用容器的 Pipeline 来处理该 Request 对象。Pipeline 由多个自定义 Valve 与标准 Valve 构成，Pipeline 首先会调用自定义 Valve 处理请求，最后标准 Valve 调用子容器，这是典型的责任链模式。整个调用流程如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image/M00/00/BC/CgqCHl6qZmuASJgqAAHvghToaYo778.png" alt="image (7).png"></p><p>当请求经过所有的 Pipeline-Valve 的处理之后，Tomcat 会将返回的结果交给 Connector，Connector 会通过底层的 Socket 连接将响应结果返回给用户。</p><p>理清 Tomcat 架构之后，本课时的第 2 部分深入介绍了 tomcat-7.x-8.x-plugin 插件对 StandardHostValve 中 invoke() 方法的增强，同时还深入讲解了 ContextCarrier 同时支持多个序列化版本的实现原理。最后介绍了 forward 跳转、redirect 跳转的原理，以及 tomcat-7.x-8.x-plugin 插件对 forward 跳转的处理。</p>`,62),o=[e];function t(r,c,i,E,y,u){return n(),a("div",null,o)}const m=s(l,[["render",t]]);export{b as __pageData,m as default};
