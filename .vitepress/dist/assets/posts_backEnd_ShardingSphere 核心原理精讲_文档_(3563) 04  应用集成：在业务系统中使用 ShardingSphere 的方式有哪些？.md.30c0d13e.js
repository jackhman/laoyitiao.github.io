import{_ as o,j as e,o as t,g as r,k as p,s,h as a,Q as l}from"./chunks/framework.e0c66c3f.js";const A=JSON.parse('{"title":"如何抽象开源框架的应用方式？ ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3563) 04  应用集成：在业务系统中使用 ShardingSphere 的方式有哪些？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3563) 04  应用集成：在业务系统中使用 ShardingSphere 的方式有哪些？.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3563) 04  应用集成：在业务系统中使用 ShardingSphere 的方式有哪些？.md"},E=s("p",null,"在上一课时中，我详细介绍了 ShardingSphere 与 JDBC 规范之间的兼容性关系，我们知道 ShardingSphere 对 JDBC 规范进行了重写，并嵌入了分片机制。基于这种兼容性，开发人员使用 ShardingSphere 时就像在使用 JDBC 规范所暴露的各个接口一样。这一课时，我们将讨论如何在业务系统中使用 ShardingSphere 的具体方式。",-1),y=s("h3",{id:"如何抽象开源框架的应用方式",tabindex:"-1"},[a("如何抽象开源框架的应用方式？ "),s("a",{class:"header-anchor",href:"#如何抽象开源框架的应用方式","aria-label":'Permalink to "如何抽象开源框架的应用方式？"'},"​")],-1),i=s("p",null,[a("当我们自己在设计和实现一款开源框架时，如何规划它的应用方式呢？作为一款与数据库访问相关的开源框架，ShardingSphere 提供了多个维度的应用方式，我们可以对这些应用方式进行抽象，从而提炼出一种模版。这个模版由四个维度组成，分别是"),s("strong",null,"底层工具、基础规范、开发框架和领域框架"),a("，如下图所示：")],-1),d=l(`<h4 id="底层工具" tabindex="-1">底层工具 <a class="header-anchor" href="#底层工具" aria-label="Permalink to &quot;底层工具&quot;">​</a></h4><p>底层工具指的是这个开源框架所面向的目标工具或所依赖的第三方工具。这种底层工具往往不是框架本身可以控制和管理的，框架的作用只是在它上面添加一个应用层，用于封装对这些底层工具的使用方式。</p><p>对于 ShardingSphere 而言，<strong>这里所说的底层工具实际上指的是关系型数据库</strong>。目前，ShardingSphere 支持包括 MySQL、Oracle、SQLServer、PostgreSQL 以及任何遵循 SQL92 标准的数据库。</p><h4 id="基础规范" tabindex="-1">基础规范 <a class="header-anchor" href="#基础规范" aria-label="Permalink to &quot;基础规范&quot;">​</a></h4><p>作为一个开源框架，很多时候需要兼容业界已经形成标准的基础性规范。换句话说，想要框架被其他开发人员所认可，就得要考虑开发人员目前在使用的基础规范。例如，如果设计一个与链路跟踪相关的开源框架，一般都需要兼容 OpenTracing 这一开放式分布式追踪规范。</p><p>对于 ShardingSphere 而言，所涉及的基础规范很明确，就是我们在上一课时中所详细阐述的 JDBC 规范。</p><h4 id="开发框架" tabindex="-1">开发框架 <a class="header-anchor" href="#开发框架" aria-label="Permalink to &quot;开发框架&quot;">​</a></h4><p>开源框架本身也是一个开发框架，但我们通常不会自己设计和实现一个全新的开发框架，而是更倾向于与现有的主流开发框架进行集成。目前，Java 世界中最主流的开发框架就是 Spring 家族系列框架。</p><p>ShardingSphere 同时集成了 Spring 和 Spring Boot 这两款 Spring 家族的主流开发框架。<strong>熟悉这两款框架的开发人员在应用 ShardingSphere 进行开发时将不需要任何学习成本</strong>。</p><h4 id="领域框架" tabindex="-1">领域框架 <a class="header-anchor" href="#领域框架" aria-label="Permalink to &quot;领域框架&quot;">​</a></h4><p>对于某些开源框架而言，也需要考虑和领域框架进行集成，以便提供更好的用户体验和使用友好性，区别于前面提到的适用于任何场景的开发框架。<strong>所谓领域框架，是指与所设计的开源框架属于同一专业领域的开发框架。</strong> 业务开发人员已经习惯在日常开发过程中使用这些特定于某一领域的开发框架，所以在设计自己的开源框架时，也需要充分考虑与这些框架的整合和集成。</p><p>对于 ShardingSphere 而言，领域框架指的是 MyBatis、Hibernate 等常见的 ORM 框架。ShardingSphere 对这领域框架提供了无缝集成的实现方案，熟悉 ORM 框架的开发人员在应用 ShardingSphere 进行开发时同样不需要任何学习成本。</p><p>接下来，我们就结合前面抽象的开源框架应用方式来具体分析 ShardingSphere 框架为开发人员提供了哪些开发上的支持。</p><h3 id="数据库和-jdbc-集成" tabindex="-1">数据库和 JDBC 集成 <a class="header-anchor" href="#数据库和-jdbc-集成" aria-label="Permalink to &quot;数据库和 JDBC 集成&quot;">​</a></h3><p>由于 ShardingSphere 最终操作的还是关系型数据库，并基于 JDBC 规范做了重写。所以<strong>在具体应用上相对比较简单，我们只要把握 JDBC 驱动和数据库连接池的使用方式即可。</strong></p><h4 id="jdbc-驱动" tabindex="-1">JDBC 驱动 <a class="header-anchor" href="#jdbc-驱动" aria-label="Permalink to &quot;JDBC 驱动&quot;">​</a></h4><p>ShardingSphere 支持 MySQL、Oracle 等实现 JDBC 规范的主流关系型数据库。我们在使用这些数据库时，常见的做法就是指定具体数据库对应的 JDBC 驱动类、URL 以及用户名和密码。</p><p>这里以 MySQL 为例，展示了在 Spring Boot 应用程序中通过 .yaml 配置文件指定 JDBC 驱动的一般做法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">driverClassName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">url</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/test_database</span></span>
<span class="line"><span style="color:#E1E4E8;">username</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">password</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">driverClassName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/test_database</span></span>
<span class="line"><span style="color:#24292E;">username</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">password</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> root</span></span></code></pre></div><h4 id="数据库连接池" tabindex="-1">数据库连接池 <a class="header-anchor" href="#数据库连接池" aria-label="Permalink to &quot;数据库连接池&quot;">​</a></h4><p>配置 JDBC 驱动的目的是获取访问数据库所需的 Connection。为了提高性能，主流做法是采用数据库连接池方案，数据库连接池将创建的 Connection 对象存放到连接池中，然后从池中提供 Connection。</p><p>ShardingSphere 支持一批主流的第三方数据库连接池，包括 DBCP、C3P0、BoneCP、Druid 和 HikariCP 等。在应用 ShardingSphere 时，我们可以通过创建 DataSource 来使用数据库连接池。例如，在 Spring Boot 中，可以在 .properties 配置文件中使用阿里巴巴提供的 DruidDataSource 类，初始化基于 Druid 数据库连接池的 DataSource：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> test_datasource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.test_datasource.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.test_datasource.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.test_datasource.jdbc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">url</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">jdbc</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">mysql</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:3306/test_database</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.test_datasource.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.test_datasource.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> test_datasource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.test_datasource.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.test_datasource.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.test_datasource.jdbc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">url</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">jdbc</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">mysql</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:3306/test_database</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.test_datasource.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.test_datasource.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span></code></pre></div><p>而对于使用 Spring 框架的开发人员而言，可以直接在 Spring 容器中注入一个 DruidDataSource 的 JavaBean：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;test_datasource&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">destroy-method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;driverClassName&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;jdbc:mysql://localhost:3306/ test_database&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test_datasource&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy-method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;close&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;driverClassName&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;jdbc:mysql://localhost:3306/ test_database&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">bean</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="开发框架集成" tabindex="-1">开发框架集成 <a class="header-anchor" href="#开发框架集成" aria-label="Permalink to &quot;开发框架集成&quot;">​</a></h3><p>从上面所介绍的配置信息中，你实际上已经看到了 ShardingSphere 中集成的两款主流开发框架，即 Spring 和 Spring Boot，它们都对 JDBC 规范做了封装。当然，对于没有使用或无法使用 Spring 家族框架的场景，我们也可以直接在原生 Java 应用程序中使用 ShardingSphere。</p><p>在介绍开发框架的具体集成方式之前，我们来设计一个简单的应用场景。假设系统中存在一个用户表 User，这张表的数据量比较大，所以我们将它进行分库分表处理，计划分成两个数据库 ds0 和 ds1，然后每个库中再分成两张表 user0 和 user1：</p>`,28),u=l(`<p>接下来，让我们来看一下如何基于 Java 原生、Spring 及 Spring Boot 开发框架针对这一场景实现分库分表。</p><h4 id="java-原生" tabindex="-1">Java 原生 <a class="header-anchor" href="#java-原生" aria-label="Permalink to &quot;Java 原生&quot;">​</a></h4><p>如果使用 Java 原生的开发方式，相当于我们需要全部通过 Java 代码来创建和管理 ShardingSphere 中与分库分表相关的所有类。如果不做特殊说明，本课程将默认使用 Maven 实现包依赖关系的管理。所以，首先需要引入对 sharding-jdbc-core 组件的 Maven 引用：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;sharding-jdbc-core&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;sharding-jdbc-core&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后，按照 JDBC 的使用方法，需要创建 DataSource、Connection、Statement 等一系列接口的实现类，并通过这些类来完成具体的数据库访问操作。</p><p>我们先来看看创建 DataSource 的 Java 代码，这里构建了一个工具类 DataSourceHelper，基于 Druid 来获取一个 DruidDataSource：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceHelper</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String HOST </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> PORT </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3306</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String USER_NAME </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String PASSWORD </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">dataSourceName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        DruidDataSource result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DruidDataSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">setDriverClassName</span><span style="color:#E1E4E8;">(com.mysql.jdbc.Driver.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">setUrl</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jdbc:mysql://%s:%s/%s, HOST, PORT, dataSourceName));</span></span>
<span class="line"><span style="color:#9ECBFF;">        result.setUsername(USER_NAME);</span></span>
<span class="line"><span style="color:#9ECBFF;">        result.setPassword(PASSWORD);</span></span>
<span class="line"><span style="color:#9ECBFF;">        return result;</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceHelper</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String HOST </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> PORT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3306</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String USER_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String PASSWORD </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">dataSourceName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        DruidDataSource result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DruidDataSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">setDriverClassName</span><span style="color:#24292E;">(com.mysql.jdbc.Driver.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">setUrl</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jdbc:mysql://%s:%s/%s, HOST, PORT, dataSourceName));</span></span>
<span class="line"><span style="color:#032F62;">        result.setUsername(USER_NAME);</span></span>
<span class="line"><span style="color:#032F62;">        result.setPassword(PASSWORD);</span></span>
<span class="line"><span style="color:#032F62;">        return result;</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre></div><p>由于在示例中，我们需要创建两个用户库，所以使用一个 Map 来保存两个数据源对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, DataSource</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createDataSourceMap</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">DataSource</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds0&quot;</span><span style="color:#E1E4E8;">, DataSourceHelper.</span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds0&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds1&quot;</span><span style="color:#E1E4E8;">, DataSourceHelper.</span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds1&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, DataSource</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createDataSourceMap</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">DataSource</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ds0&quot;</span><span style="color:#24292E;">, DataSourceHelper.</span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ds0&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        result.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ds1&quot;</span><span style="color:#24292E;">, DataSourceHelper.</span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ds1&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>有了包含初始化 DataSource 对象的数据源集合之后，接下来就可以通过设计分库分表规则来获取目标 DataSource：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">dataSource</span><span style="color:#E1E4E8;">() throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//创建分片规则配置类</span></span>
<span class="line"><span style="color:#E1E4E8;">        ShardingRuleConfiguration shardingRuleConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ShardingRuleConfiguration</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//创建分表规则配置类</span></span>
<span class="line"><span style="color:#E1E4E8;">        TableRuleConfiguration tableRuleConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TableRuleConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ds\${0..1}.user\${0..1}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//创建分布式主键生成配置类</span></span>
<span class="line"><span style="color:#E1E4E8;">        Properties properties </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        properties.</span><span style="color:#B392F0;">setProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;worker.id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;33&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        KeyGeneratorConfiguration keyGeneratorConfig </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KeyGeneratorConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SNOWFLAKE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">, properties);              </span></span>
<span class="line"><span style="color:#E1E4E8;">        tableRuleConfig.</span><span style="color:#B392F0;">setKeyGeneratorConfig</span><span style="color:#E1E4E8;">(keyGeneratorConfig);      </span></span>
<span class="line"><span style="color:#E1E4E8;">        shardingRuleConfig.</span><span style="color:#B392F0;">getTableRuleConfigs</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(tableRuleConfig);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据性别分库，一共分为 2 个库</span></span>
<span class="line"><span style="color:#E1E4E8;">        shardingRuleConfig.</span><span style="color:#B392F0;">setDefaultDatabaseShardingStrategyConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InlineShardingStrategyConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ds\${sex % 2}&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//根据用户 ID 分表，一共分为 2 张表</span></span>
<span class="line"><span style="color:#E1E4E8;">        shardingRuleConfig.</span><span style="color:#B392F0;">setDefaultTableShardingStrategyConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StandardShardingStrategyConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;user\${id % 2}&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过工厂类创建具体的 DataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ShardingDataSourceFactory.</span><span style="color:#B392F0;">createDataSource</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createDataSourceMap</span><span style="color:#E1E4E8;">(), shardingRuleConfig, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Properties</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataSource </span><span style="color:#6F42C1;">dataSource</span><span style="color:#24292E;">() throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//创建分片规则配置类</span></span>
<span class="line"><span style="color:#24292E;">        ShardingRuleConfiguration shardingRuleConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ShardingRuleConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建分表规则配置类</span></span>
<span class="line"><span style="color:#24292E;">        TableRuleConfiguration tableRuleConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TableRuleConfiguration</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ds\${0..1}.user\${0..1}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建分布式主键生成配置类</span></span>
<span class="line"><span style="color:#24292E;">        Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;worker.id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;33&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        KeyGeneratorConfiguration keyGeneratorConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KeyGeneratorConfiguration</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SNOWFLAKE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">, properties);              </span></span>
<span class="line"><span style="color:#24292E;">        tableRuleConfig.</span><span style="color:#6F42C1;">setKeyGeneratorConfig</span><span style="color:#24292E;">(keyGeneratorConfig);      </span></span>
<span class="line"><span style="color:#24292E;">        shardingRuleConfig.</span><span style="color:#6F42C1;">getTableRuleConfigs</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(tableRuleConfig);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据性别分库，一共分为 2 个库</span></span>
<span class="line"><span style="color:#24292E;">        shardingRuleConfig.</span><span style="color:#6F42C1;">setDefaultDatabaseShardingStrategyConfig</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InlineShardingStrategyConfiguration</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ds\${sex % 2}&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据用户 ID 分表，一共分为 2 张表</span></span>
<span class="line"><span style="color:#24292E;">        shardingRuleConfig.</span><span style="color:#6F42C1;">setDefaultTableShardingStrategyConfig</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StandardShardingStrategyConfiguration</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;user\${id % 2}&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过工厂类创建具体的 DataSource</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ShardingDataSourceFactory.</span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createDataSourceMap</span><span style="color:#24292E;">(), shardingRuleConfig, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>这里使用到了大量 ShardingSphere 中的规则配置类，包含分片规则配置、分表规则配置、分布式主键生成配置等。同时，我们在分片规则配置中使用行表达式来设置具体的分片规则。关于行表达式的具体使用方法将在下一课时中进行介绍，这里只简单地根据用户的年龄和 ID 分别来进行分库和分表。同时，我们在方法的最后部分传入前面已经初始化的 DataSource 集合并通过工厂类来创建具体的某一个目标 DataSource。</p><p>一旦获取了目标 DataSource 之后，我们就可以使用 JDBC 中的核心接口来执行传入的 SQL 语句：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUsers</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">User</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> (Connection connection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataSource.</span><span style="color:#B392F0;">getConnection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">             PreparedStatement preparedStatement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> connection.</span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(sql);</span></span>
<span class="line"><span style="color:#E1E4E8;">             ResultSet resultSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preparedStatement.</span><span style="color:#B392F0;">executeQuery</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (resultSet.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                User user</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//省略设置User对象的赋值语句</span></span>
<span class="line"><span style="color:#E1E4E8;">                result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">User</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUsers</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String sql) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">User</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataSource.</span><span style="color:#6F42C1;">getConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">             PreparedStatement preparedStatement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(sql);</span></span>
<span class="line"><span style="color:#24292E;">             ResultSet resultSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preparedStatement.</span><span style="color:#6F42C1;">executeQuery</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (resultSet.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                User user</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//省略设置User对象的赋值语句</span></span>
<span class="line"><span style="color:#24292E;">                result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>可以看到，这里用到了熟悉的 Connection、PreparedStatement 和 ResultSet 等 JDBC 接口来执行查询并获取结果，整个过程就像是在使用普通的 JDBC 一样。但这个时候，这些 JDBC 接口背后的实现类都已经嵌入了分片功能。</p><h4 id="spring" tabindex="-1">Spring <a class="header-anchor" href="#spring" aria-label="Permalink to &quot;Spring&quot;">​</a></h4><p>如果使用 Spring 作为我们的开发框架，那么 JDBC 中各个核心对象的创建过程都会交给 Spring 容器进行完成。<strong>ShardingSphere 中基于命名空间（NameSpace）机制完成了与 Spring 框架的无缝集成。要想使用这种机制，需要先引入对应的 Maven 依赖</strong>：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;sharding-jdbc-spring-namespace&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.shardingsphere&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;sharding-jdbc-spring-namespace&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>Spring 中的命名空间机制本质上就是基于 Spring 配置文件的 XML Scheme 添加定制化的配置项并进行解析，所以我们会在 XML 配置文件中看到一系列与分片相关的自定义配置项。例如，DataSource 的初始化过程相当于创建一个 Java Bean 的过程：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ds0&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;driverClassName&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;jdbc:mysql://localhost:3306/ds0&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ds0&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;driverClassName&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;url&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;jdbc:mysql://localhost:3306/ds0&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">bean</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>接下来，我们同样可以通过一系列的配置项来初始化相应的分库规则，并最终完成目标 DataSource 的创建过程：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 创建分库配置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">sharding:inline-strategy</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;databaseStrategy&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sharding-column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">algorithm-expression</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ds\${sex % 2}&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 创建分表配置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">sharding:inline-strategy</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;tableStrategy&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sharding-column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">algorithm-expression</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;user\${id % 2}&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 创建分布式主键生成配置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean:properties</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">prop</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;worker.id&quot;</span><span style="color:#E1E4E8;">&gt;33&lt;/</span><span style="color:#85E89D;">prop</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean:properties</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">sharding:key-generator</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;keyGenerator&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;SNOWFLAKE&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">props-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 创建分片规则配置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">sharding:data-source</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;shardingDataSource&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">sharding:sharding-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-source-names</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ds0, ds1&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">sharding:table-rules</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">sharding:table-rule</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">logic-table</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">actual-data-nodes</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ds\${0..1}.user\${0..1}&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">database-strategy-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;databaseStrategy&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">table-strategy-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;tableStrategy&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key-generator-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;keyGenerator&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">sharding:table-rules</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">sharding:sharding-rule</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">sharding:data-source</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 创建分库配置 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">sharding:inline-strategy</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;databaseStrategy&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sharding-column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">algorithm-expression</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ds\${sex % 2}&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 创建分表配置 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">sharding:inline-strategy</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;tableStrategy&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sharding-column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">algorithm-expression</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;user\${id % 2}&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 创建分布式主键生成配置 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">bean:properties</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">prop</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;worker.id&quot;</span><span style="color:#24292E;">&gt;33&lt;/</span><span style="color:#22863A;">prop</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">bean:properties</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">sharding:key-generator</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;keyGenerator&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;SNOWFLAKE&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">column</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">props-ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 创建分片规则配置 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">sharding:data-source</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;shardingDataSource&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">sharding:sharding-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-source-names</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ds0, ds1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">sharding:table-rules</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">sharding:table-rule</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">logic-table</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">actual-data-nodes</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ds\${0..1}.user\${0..1}&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">database-strategy-ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;databaseStrategy&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">table-strategy-ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;tableStrategy&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key-generator-ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;keyGenerator&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">sharding:table-rules</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">sharding:sharding-rule</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">sharding:data-source</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>关于这些配置项的内容我们同样放在下一课时中进行详细讨论。</p><h4 id="spring-boot" tabindex="-1">Spring Boot <a class="header-anchor" href="#spring-boot" aria-label="Permalink to &quot;Spring Boot&quot;">​</a></h4><p>如果你使用的开发框架是 Spring Boot，那么所需要做的也是编写一些配置项。在 Spring Boot 中，配置项的组织形式有两种，一种是 .yaml 文件，一种是 .properties 文件，这里以 .properties 为例给出 DataSource 的配置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.names</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds0,ds1</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.jdbc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">url</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">jdbc</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">mysql</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:3306/ds0</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds0.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.driver</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">class</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.jdbc</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">url</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">jdbc</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">mysql</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:3306/ds1</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.datasource.ds1.password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.names</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds0,ds1</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.jdbc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">url</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">jdbc</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">mysql</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:3306/ds0</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds0.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.driver</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">class</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.jdbc</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">url</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">jdbc</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">mysql</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:3306/ds1</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.datasource.ds1.password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root</span></span></code></pre></div><p>有了 DataSource 之后，我们同样可以设置对应的分库策略、分表策略及分布式主键生成策略：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">sex</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.default</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{sex % </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.user.actual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodes</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ds$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">0..1</span><span style="color:#E1E4E8;">}.user$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">0..1</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.user.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.sharding</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.user.table</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">strategy.inline.algorithm</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">expression</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user$</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{id % </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.user.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">id</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.user.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.type</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.shardingsphere.sharding.tables.user.key</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generator.props.worker.id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">33</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sex</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.default</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{sex % </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.user.actual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ds$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">0..1</span><span style="color:#24292E;">}.user$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">0..1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.user.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.sharding</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.user.table</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">strategy.inline.algorithm</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">expression</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user$</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{id % </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.user.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.column</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">id</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.user.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.type</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">SNOWFLAKE</span></span>
<span class="line"><span style="color:#24292E;">spring.shardingsphere.sharding.tables.user.key</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generator.props.worker.id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">33</span></span></code></pre></div><p>可以看到，相比 Spring 提供的命名空间机制，基于 Spring Boot 的配置风格相对简洁明了，容易理解。</p><p>一旦我们提供了这些配置项，就可以直接在应用程序中注入一个 DataSource 来获取 Connection 等 JDBC 对象。但在日常开发过程中，如果我们使用了 Spring 和 Spring Boot 开发框架，一般都不会直接使用原生的 JDBC 接口来操作数据库，而是通过集成常见的 ORM 框架来实现这一点。让我们来看一下。</p><h3 id="orm-框架集成" tabindex="-1">ORM 框架集成 <a class="header-anchor" href="#orm-框架集成" aria-label="Permalink to &quot;ORM 框架集成&quot;">​</a></h3><p>在 Java 领域，主流的 ORM 框架可以分成两大类，一类遵循 JPA（Java Persistence API，Java 持久层 API）规范，代表性的框架有 Hibernate、TopLink 等；而另一类则完全采用自定义的方式来实现对象和关系之间的映射，代表性的框架就是 MyBatis。</p><p>这里以 Spring Boot 开发框架为例，简要介绍这两种 ORM 框架的集成方式。基于 Spring Boot 提供的强大自动配置机制，我们发现集成这些 ORM 框架的方式非常简单。</p><h4 id="jpa" tabindex="-1">JPA <a class="header-anchor" href="#jpa" aria-label="Permalink to &quot;JPA&quot;">​</a></h4><p>想要在 Spring Boot 中使用 JPA，我们需要在 pom 文件中添加对 spring-boot-starter-data-jpa 的 Maven 依赖：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-data-jpa&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-data-jpa&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>一旦添加了 Maven 依赖，Spring Boot 就会自动导入 spring-orm、hibernate-entity-manager、spring-data-jpa 等一系列工具包。然后，在 application.properties 配置文件中添加与 JPA 相关的配置项就可以了：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">spring</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">jpa</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">properties</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hibernate</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hbm2ddl</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">auto</span><span style="color:#F97583;">=create-drop</span></span>
<span class="line"><span style="color:#79B8FF;">spring</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">jpa</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">properties</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hibernate</span><span style="color:#E1E4E8;">.dialect</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">org</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hibernate</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">dialect</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">MySQL5Dialect</span></span>
<span class="line"><span style="color:#79B8FF;">spring</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">jpa</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">properties</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hibernate</span><span style="color:#E1E4E8;">.show_sql</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">spring</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">jpa</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">properties</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hibernate</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hbm2ddl</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">auto</span><span style="color:#D73A49;">=create-drop</span></span>
<span class="line"><span style="color:#005CC5;">spring</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">jpa</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">properties</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hibernate</span><span style="color:#24292E;">.dialect</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">org</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hibernate</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">dialect</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">MySQL5Dialect</span></span>
<span class="line"><span style="color:#005CC5;">spring</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">jpa</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">properties</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hibernate</span><span style="color:#24292E;">.show_sql</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">false</span></span></code></pre></div><p>当然，我们需要在业务代码中完成 JPA 的 Entity 实体类、Repository 仓库类的定义，并在 Spring Boot 的启动类中完成对包含对应包结构的扫描：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ComponentScan</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.user.jpa&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EntityScan</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;com.user.jpa.entity&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserApplication</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ComponentScan</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.user.jpa&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EntityScan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;com.user.jpa.entity&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserApplication</span></span></code></pre></div><h4 id="mybatis" tabindex="-1">MyBatis <a class="header-anchor" href="#mybatis" aria-label="Permalink to &quot;MyBatis&quot;">​</a></h4><p>对于 MyBatis 而言，集成的步骤也类似。首先，我们需要添加 Maven 依赖：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.mybatis.spring.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;mybatis-spring-boot-starter&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.mybatis.spring.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;mybatis-spring-boot-starter&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后，由于 MyBatis 的启动依赖于框架提供的专用配置项，一般我们会把这些配置项组织在一个独立的配置文件中，并在 Spring Boot 的 application.properties 中引用这个配置文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mybatis.config</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">location</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">classpath</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">META</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">INF</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">mybatis</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">config.xml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mybatis.config</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">location</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">classpath</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">META</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">INF</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">mybatis</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">config.xml</span></span></code></pre></div><p>在 mybatis-config.xml 配置文件中，至少会包含各种 Mybatis Mapper 文件的定义：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#B392F0;"> encoding</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;"> ?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#F97583;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">mappers</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mappers/UserMapper.xml&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">mappers</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;"> ?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#D73A49;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configuration</span></span>
<span class="line"><span style="color:#24292E;">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#24292E;">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">mappers</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resource</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;mappers/UserMapper.xml&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">mappers</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>而在 Mapper 文件中，就包含了运行 MyBatis 所需的实体与数据库模式之间的映射关系，以及各种数据库操作的 SQL 语句定义。</p><p>最后，我们同样需要在 Spring Boot 的启动类中添加对包含各种 Entity 和 Repository 定义的包结构的扫描机制：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ComponentScan</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.user.mybatis&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">MapperScan</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackages</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;com.user.mybatis.repository&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserApplication</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ComponentScan</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.user.mybatis&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MapperScan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;com.user.mybatis.repository&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserApplication</span></span></code></pre></div><p>这样，我们在业务系统中使用 ShardingSphere 的各种方式就介绍完毕了。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>作为一个优秀的开源框架，ShardingSphere 提供了多方面的集成方式供广大开发人员在业务系统中使用它来完成分库分表操作。在这一课时中，我们先梳理了作为一个开源框架所应该具备的应用方式，并分析了这些应用方式在 ShardingSphere 中的具体实现机制。可以看到，<strong>从 JDBC 规范，到 Spring、Spring Boot 开发框架，再到 JPA、MyBatis 等主流 ORM 框架，ShardingSphere 都提供了完善的集成方案。</strong></p><p>这里给你留一道思考题：为了实现框架的易用性，ShardingSphere 为开发人员提供了哪些工具和规范的集成？</p><p>另一方面，在今天的课程中，我们也看到，使用 ShardingSphere 的主要方式事实上就是基于它所提供的配置体系，来完成各种配置项的创建和设置。可以说，配置工作是使用 ShardingSphere 进行开发的主要工作。</p>`,55);function g(F,h,D,C,q,b){const n=e("Image");return t(),r("div",null,[E,y,i,p(n,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/28/F7/CgqCHl75qv-AFbZvAACz7F_yXRM280.png"}),d,p(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/28/EB/Ciqc1F75qxSADY5yAADgZQ5r488284.png"}),u])}const m=o(c,[["render",g]]);export{A as __pageData,m as default};
