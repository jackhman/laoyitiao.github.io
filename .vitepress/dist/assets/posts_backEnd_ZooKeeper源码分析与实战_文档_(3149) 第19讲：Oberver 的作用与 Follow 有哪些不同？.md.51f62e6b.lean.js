import{_ as p,j as o,o as l,g as r,k as n,s,h as a,Q as c}from"./chunks/framework.4e7d56ce.js";const R=JSON.parse('{"title":"Observer 介绍 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3149) 第19讲：Oberver 的作用与 Follow 有哪些不同？.md","filePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3149) 第19讲：Oberver 的作用与 Follow 有哪些不同？.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/ZooKeeper源码分析与实战_文档/(3149) 第19讲：Oberver 的作用与 Follow 有哪些不同？.md"},E=s("p",null,"在上个课时中，我们学习了 ZooKeeper 集群中 Follow 服务器的作用。在 ZooKeeper 集群服务运行的过程中，Follow 服务器主要负责处理来自客户端的非事务性请求，其中大部分是处理客户端发起的查询会话等请求。而在 ZooKeeper 集群中，Leader 服务器失效时，会在 Follow 集群服务器之间发起投票，最终选举出一个 Follow 服务器作为新的 Leader 服务器。",-1),y=s("p",null,"除了 Leader 和 Follow 服务器，ZooKeeper 集群中还有一个 Observer 服务器。在 ZooKeeper 集群中，Observer 服务器对于提升整个 ZooKeeper 集群运行的性能具有至关重要的作用。而本课时，我们就开始学习什么是 Observer 服务器，以及它在 ZooKeeper 集群中都做了哪些工作。",-1),i=s("h3",{id:"observer-介绍",tabindex:"-1"},[a("Observer 介绍 "),s("a",{class:"header-anchor",href:"#observer-介绍","aria-label":'Permalink to "Observer 介绍"'},"​")],-1),d=s("p",null,[a("在 ZooKeeper 集群服务运行的过程中，Observer 服务器与 Follow 服务器具有一个相同的功能，那就是负责处理来自客户端的诸如查询数据节点等非事务性的会话请求操作。但与 Follow 服务器不同的是，"),s("strong",null,"Observer 不参与 Leader 服务器的选举工作，也不会被选举为 Leader 服务器"),a("。")],-1),u=s("p",null,"在前面的课程中，我们或多或少有涉及 Observer 服务器，当时我们把 Follow 服务器和 Observer 服务器统称为 Learner 服务器。你可能会觉得疑惑，Observer 服务器做的事情几乎和 Follow 服务器一样，那么为什么 ZooKeeper 还要创建一个 Observer 角色服务器呢？",-1),F=s("p",null,"要想解释这个问题，就要从 ZooKeeper 技术的发展过程说起，最早的 ZooKeeper 框架如下图所示，可以看到，其中是不存在 Observer 服务器的。",-1),b=s("p",null,"在早期的 ZooKeeper 集群服务运行过程中，只有 Leader 服务器和 Follow 服务器。不过随着 ZooKeeper 在分布式环境下的广泛应用，早期模式的设计缺点也随之产生，主要带来的问题有如下几点：",-1),v=s("ol",null,[s("li",null,[s("p",null,"随着集群规模的变大，集群处理写入的性能反而下降。")]),s("li",null,[s("p",null,"ZooKeeper 集群无法做到跨域部署")])],-1),h=s("p",null,"其中最主要的问题在于，当 ZooKeeper 集群的规模变大，集群中 Follow 服务器数量逐渐增多的时候，ZooKeeper 处理创建数据节点等事务性请求操作的性能就会逐渐下降。这是因为 ZooKeeper 集群在处理事务性请求操作时，要在 ZooKeeper 集群中对该事务性的请求发起投票，只有超过半数的 Follow 服务器投票一致，才会执行该条写入操作。",-1),O=s("p",null,"正因如此，随着集群中 Follow 服务器的数量越来越多，一次写入等相关操作的投票也就变得越来越复杂，并且 Follow 服务器之间彼此的网络通信也变得越来越耗时，导致随着 Follow 服务器数量的逐步增加，事务性的处理性能反而变得越来越低。",-1),q=s("p",null,"为了解决这一问题，在 ZooKeeper 3.6 版本后，ZooKeeper 集群中创建了一种新的服务器角色，即 Observer------观察者角色服务器。Observer 可以处理 ZooKeeper 集群中的非事务性请求，并且不参与 Leader 节点等投票相关的操作。这样既保证了 ZooKeeper 集群性能的扩展性，又避免了因为过多的服务器参与投票相关的操作而影响 ZooKeeper 集群处理事务性会话请求的能力。",-1),g=s("p",null,"在引入 Observer 角色服务器后，一个 ZooKeeper 集群服务在部署的拓扑结构，如下图所示：",-1),_=c("",23);function C(m,D,A,k,K,Z){const e=o("Image");return l(),r("div",null,[E,y,i,d,u,F,n(e,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image/M00/2E/C9/Ciqc1F8FnKWAQEJJAADU9xFvIIU685.png"}),b,v,h,O,q,g,n(e,{alt:"image (4).png",src:"https://s0.lgstatic.com/i/image/M00/2E/C9/Ciqc1F8FnLGAKhD0AAE5oGBLTTQ439.png"}),_])}const P=p(t,[["render",C]]);export{R as __pageData,P as default};
