import{_ as o,j as e,o as t,g as r,k as l,h as s,Q as p,s as n}from"./chunks/framework.4e7d56ce.js";const _=JSON.parse('{"title":"23如何在CompletableFuture异步线程中正确使用JPA？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4723) 23  如何在 CompletableFuture 异步线程中正确使用 JPA？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4723) 23  如何在 CompletableFuture 异步线程中正确使用 JPA？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4723) 23  如何在 CompletableFuture 异步线程中正确使用 JPA？.md"},E=p(`<h1 id="_23如何在completablefuture异步线程中正确使用jpa" tabindex="-1">23如何在CompletableFuture异步线程中正确使用JPA？ <a class="header-anchor" href="#_23如何在completablefuture异步线程中正确使用jpa" aria-label="Permalink to &quot;23如何在CompletableFuture异步线程中正确使用JPA？&quot;">​</a></h1><p>你好，欢迎学习第 23 讲。通过前几讲对 Session 核心原理的学习，相信你已经可以解决实际工作中的一些疑难杂症了。这一讲我再给你举一个复杂点的例子，继续深度剖析如何利用 Session 原理解决复杂问题。那么，都有哪些问题呢？我们看一个例子。</p><h3 id="completablefuture-的使用实际案例" tabindex="-1">CompletableFuture 的使用实际案例 <a class="header-anchor" href="#completablefuture-的使用实际案例" aria-label="Permalink to &quot;CompletableFuture 的使用实际案例&quot;">​</a></h3><p>在我们的实际开发过程中，难免会用到异步方法，我在这里列举一个异步方法的例子，经典地还原一些在异步方法里面经常会犯的错误。</p><p>我们模拟一个 Service 方法，通过异步操作，更新 UserInfo 信息，并且可能一个方法里面有不同的业务逻辑，会多次更新 UserInfo 信息，模拟的代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//异步操作必须要建立线程池，这个不多说了，因为不是本讲的重点，有兴趣的话你可以了解一下线程池的原理，我的Demo采用的是Spring异步框架字段的异步线程池</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;">  Executor executor;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 模拟一个业务service方法，里面有一些异步操作，一些业务方法里面可能修改了两次用户信息</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">name</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test/async/user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 模拟一个service方法，期待是一个事务</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">testSaveUser</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; cf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      UserInfo user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第一次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200L</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时200毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(RandomUtils.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_first&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第二次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">300L</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时300毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(RandomUtils.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_second&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">name);</span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }, executor).</span><span style="color:#B392F0;">exceptionally</span><span style="color:#E1E4E8;">(throwable </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      throwable.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   });</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//... 实际业务中，可能还有会其他异步方法，我们举这一个例子已经可以说明问题了</span></span>
<span class="line"><span style="color:#E1E4E8;">   cf.</span><span style="color:#B392F0;">isDone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Success&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//异步操作必须要建立线程池，这个不多说了，因为不是本讲的重点，有兴趣的话你可以了解一下线程池的原理，我的Demo采用的是Spring异步框架字段的异步线程池</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;">  Executor executor;</span></span>
<span class="line"><span style="color:#6A737D;">   /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 模拟一个业务service方法，里面有一些异步操作，一些业务方法里面可能修改了两次用户信息</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">name</span></span>
<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test/async/user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 模拟一个service方法，期待是一个事务</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">testSaveUser</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; cf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      UserInfo user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第一次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200L</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时200毫秒</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(RandomUtils.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_first&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#24292E;">      userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第二次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">300L</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时300毫秒</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(RandomUtils.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_second&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name);</span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#24292E;">      userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">   }, executor).</span><span style="color:#6F42C1;">exceptionally</span><span style="color:#24292E;">(throwable </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      throwable.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   });</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//... 实际业务中，可能还有会其他异步方法，我们举这一个例子已经可以说明问题了</span></span>
<span class="line"><span style="color:#24292E;">   cf.</span><span style="color:#6F42C1;">isDone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Success&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为了便于测试，我们在 UserInfoController 里面模拟了一个复杂点的 Service 方法，上面的代码很多是为了方便给你演示和做测试，实际工作中可能代码会不一样、会演变，但是你通过实质分析，就会发现解决思路是一样的。</p><p>我们在 testSaveUser 方法里面开了一个异步线程，异步线程采用 CompletableFuture 方法，在里面执行了两次 UserInfo 的 Save 操作，实际工作中可能不会有像我的 Demo 那么简单的 Save，因为我把中间的业务计算省去了，这不影响我们分析问题。</p><p>那么上面的代码问题的表象是什么呢？</p><h4 id="表现出来的问题现状是什么样的" tabindex="-1">表现出来的问题现状是什么样的？ <a class="header-anchor" href="#表现出来的问题现状是什么样的" aria-label="Permalink to &quot;表现出来的问题现状是什么样的？&quot;">​</a></h4><p>那么实际工作中，我们如果写出来类似的代码，会发生什么样的问题呢？</p><ol><li><p>整个请求非常正常，永远都是 200；也没有任何报错信息，但是发现数据库里面第二次的 save(user) 永远不生效，永远不会出现 name 包含 &quot;_second&quot; 的记录，这个是必现的；</p></li><li><p>整个请求非常正常，永远都是 200；也没有任何报错信息，有的时候会发现数据库里面没有任何变化，甚至第一次 save(user) 都没有生效，但是这个是偶发的。</p></li></ol><p>实际工作中我们肯定会通过 QA 或者自己多次测试，发现以上现象就会感觉非常奇怪，那么我们来分步拆解一下，看看怎么解决？</p><h3 id="步骤拆解" tabindex="-1">步骤拆解 <a class="header-anchor" href="#步骤拆解" aria-label="Permalink to &quot;步骤拆解&quot;">​</a></h3><p>有一定经验的开发者，遇到类似问题，第一步应该想到是不是发生什么异常了？日志信息去哪里了？那么我们需要先看一下 CompletableFuture 的用法，是不是发生异常的时候我们漏掉了什么环节？</p><h4 id="completablefuture-使用最佳实践" tabindex="-1">CompletableFuture 使用最佳实践 <a class="header-anchor" href="#completablefuture-使用最佳实践" aria-label="Permalink to &quot;CompletableFuture 使用最佳实践&quot;">​</a></h4><p>CompletableFuture 主要的功能是实现了 Future 和 CompletionStage 的接口，主要的方法如下述代码所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//通过给定的线程池，异步执行 Runnable方法，不带返回结果</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> 	</span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(Runnable runnable, Executor executor)</span></span>
<span class="line"><span style="color:#6A737D;">//通过给定的线程池，异步执行Runnable方法，带返回结果</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> 	</span><span style="color:#B392F0;">supplyAsync</span><span style="color:#E1E4E8;">(Supplier</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">U</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> supplier, Executor executor)</span></span>
<span class="line"><span style="color:#6A737D;">//当上面的异步方法执行完之后需要执行的回调方法</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletableFuture</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Void</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> 	</span><span style="color:#B392F0;">thenAccept</span><span style="color:#E1E4E8;">(Consumer</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;"> T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> action)</span></span>
<span class="line"><span style="color:#6A737D;">//阻塞等待 future执行完结果</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isDone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//阻塞获取结果</span></span>
<span class="line"><span style="color:#E1E4E8;">V </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//当异步操作发生异常的时候执行的方法</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> CompletionStage</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exceptionally</span><span style="color:#E1E4E8;">(Function</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Throwable, </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> extends T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> fn);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//通过给定的线程池，异步执行 Runnable方法，不带返回结果</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 	</span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(Runnable runnable, Executor executor)</span></span>
<span class="line"><span style="color:#6A737D;">//通过给定的线程池，异步执行Runnable方法，带返回结果</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 	</span><span style="color:#6F42C1;">supplyAsync</span><span style="color:#24292E;">(Supplier</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">U</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> supplier, Executor executor)</span></span>
<span class="line"><span style="color:#6A737D;">//当上面的异步方法执行完之后需要执行的回调方法</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletableFuture</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Void</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 	</span><span style="color:#6F42C1;">thenAccept</span><span style="color:#24292E;">(Consumer</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;"> T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> action)</span></span>
<span class="line"><span style="color:#6A737D;">//阻塞等待 future执行完结果</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isDone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//阻塞获取结果</span></span>
<span class="line"><span style="color:#24292E;">V </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//当异步操作发生异常的时候执行的方法</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> CompletionStage</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exceptionally</span><span style="color:#24292E;">(Function</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Throwable, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> fn);</span></span></code></pre></div><p>以上我只是列举了一些和我们案例相关的关键方法，而 CompletableFuture 还有更多的方法，其功能也非常强大，所以一般开发过程中用此类的场景还非常多。</p><p>其实上面的 Demo 只是利用 runAsync 做了异步操作，并利用 isDone 做了阻塞等待的动作，而没有使用 Exceptionally 处理异常信息。</p><p>所以如果我们想打印异常信息，基本上可以利用 Exceptionally。我们改进一下 Demo 代码，把异常信息打印一下，看看是否发生了异常。变动的代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; cf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   ......这里的代码不变，我们不做copy了</span></span>
<span class="line"><span style="color:#E1E4E8;">}, executor).</span><span style="color:#B392F0;">exceptionally</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(e);</span><span style="color:#6A737D;">//把异常信息打印出来</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; cf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   ......这里的代码不变，我们不做copy了</span></span>
<span class="line"><span style="color:#24292E;">}, executor).</span><span style="color:#6F42C1;">exceptionally</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e);</span><span style="color:#6A737D;">//把异常信息打印出来</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>那么我们再请求上面的 Controller 方法的时候，发现控制台就会打印出如下所示的 Error 信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java.util.concurrent.CompletionException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> org.springframework.orm.ObjectOptimisticLockingFailureException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Object of class [com.example.jpa.demo.db.UserInfo] with identifier [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> optimistic locking failed; nested exception is org.hibernate.StaleObjectStateException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Row was updated or deleted by another </span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;"> (or unsaved</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">value mapping was incorrect) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [com.example.jpa.demo.db.UserInfo#</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.base</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">java.util.concurrent.CompletableFuture.</span><span style="color:#B392F0;">encodeThrowable</span><span style="color:#E1E4E8;">(CompletableFuture.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">314</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.base</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">java.util.concurrent.CompletableFuture.</span><span style="color:#B392F0;">completeThrowable</span><span style="color:#E1E4E8;">(CompletableFuture.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">319</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.base</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">java.util.concurrent.CompletableFuture$AsyncRun.</span><span style="color:#B392F0;">run$$$capture</span><span style="color:#E1E4E8;">(CompletableFuture.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1739</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.base</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">java.util.concurrent.CompletableFuture$AsyncRun.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(CompletableFuture.java)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.base</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">java.util.concurrent.ThreadPoolExecutor.</span><span style="color:#B392F0;">runWorker</span><span style="color:#E1E4E8;">(ThreadPoolExecutor.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1167</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.base</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">java.util.concurrent.ThreadPoolExecutor$Worker.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(ThreadPoolExecutor.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">641</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.base</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">java.lang.Thread.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Thread.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">844</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Caused by</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> org.springframework.orm.ObjectOptimisticLockingFailureException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Object of class [com.example.jpa.demo.db.UserInfo] with identifier [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> optimistic locking failed; nested exception is org.hibernate.StaleObjectStateException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Row was updated or deleted by another </span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;"> (or unsaved</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">value mapping was incorrect) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [com.example.jpa.demo.db.UserInfo#</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.</span><span style="color:#B392F0;">convertHibernateAccessException</span><span style="color:#E1E4E8;">(HibernateJpaDialect.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">337</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.</span><span style="color:#B392F0;">translateExceptionIfPossible</span><span style="color:#E1E4E8;">(HibernateJpaDialect.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at org.springframework.aop.framework.ReflectiveMethodInvocation.</span><span style="color:#B392F0;">proceed</span><span style="color:#E1E4E8;">(ReflectiveMethodInvocation.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">186</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at org.springframework.aop.framework.JdkDynamicAopProxy.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(JdkDynamicAopProxy.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">212</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at com.sun.proxy.$Proxy116.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(Unknown Source)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at com.example.jpa.demo.web.UserInfoController.</span><span style="color:#B392F0;">lambda$testSaveUser$0</span><span style="color:#E1E4E8;">(UserInfoController.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">57</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.base</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">java.util.concurrent.CompletableFuture$AsyncRun.</span><span style="color:#B392F0;">run$$$capture</span><span style="color:#E1E4E8;">(CompletableFuture.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1736</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	... </span><span style="color:#FDAEB7;font-style:italic;">4</span><span style="color:#E1E4E8;"> more</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java.util.concurrent.CompletionException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> org.springframework.orm.ObjectOptimisticLockingFailureException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Object of class [com.example.jpa.demo.db.UserInfo] with identifier [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> optimistic locking failed; nested exception is org.hibernate.StaleObjectStateException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Row was updated or deleted by another </span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;"> (or unsaved</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">value mapping was incorrect) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [com.example.jpa.demo.db.UserInfo#</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">	at java.base</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">java.util.concurrent.CompletableFuture.</span><span style="color:#6F42C1;">encodeThrowable</span><span style="color:#24292E;">(CompletableFuture.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">314</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.base</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">java.util.concurrent.CompletableFuture.</span><span style="color:#6F42C1;">completeThrowable</span><span style="color:#24292E;">(CompletableFuture.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">319</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.base</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">java.util.concurrent.CompletableFuture$AsyncRun.</span><span style="color:#6F42C1;">run$$$capture</span><span style="color:#24292E;">(CompletableFuture.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1739</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.base</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">java.util.concurrent.CompletableFuture$AsyncRun.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(CompletableFuture.java)</span></span>
<span class="line"><span style="color:#24292E;">	at java.base</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">java.util.concurrent.ThreadPoolExecutor.</span><span style="color:#6F42C1;">runWorker</span><span style="color:#24292E;">(ThreadPoolExecutor.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1167</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.base</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">java.util.concurrent.ThreadPoolExecutor$Worker.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(ThreadPoolExecutor.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">641</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.base</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">java.lang.Thread.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Thread.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">844</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Caused by</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> org.springframework.orm.ObjectOptimisticLockingFailureException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Object of class [com.example.jpa.demo.db.UserInfo] with identifier [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> optimistic locking failed; nested exception is org.hibernate.StaleObjectStateException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Row was updated or deleted by another </span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;"> (or unsaved</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">value mapping was incorrect) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [com.example.jpa.demo.db.UserInfo#</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.</span><span style="color:#6F42C1;">convertHibernateAccessException</span><span style="color:#24292E;">(HibernateJpaDialect.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">337</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.</span><span style="color:#6F42C1;">translateExceptionIfPossible</span><span style="color:#24292E;">(HibernateJpaDialect.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at org.springframework.aop.framework.ReflectiveMethodInvocation.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">(ReflectiveMethodInvocation.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">186</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at org.springframework.aop.framework.JdkDynamicAopProxy.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(JdkDynamicAopProxy.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">212</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at com.sun.proxy.$Proxy116.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(Unknown Source)</span></span>
<span class="line"><span style="color:#24292E;">	at com.example.jpa.demo.web.UserInfoController.</span><span style="color:#6F42C1;">lambda$testSaveUser$0</span><span style="color:#24292E;">(UserInfoController.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">57</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.base</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">java.util.concurrent.CompletableFuture$AsyncRun.</span><span style="color:#6F42C1;">run$$$capture</span><span style="color:#24292E;">(CompletableFuture.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1736</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	... </span><span style="color:#B31D28;font-style:italic;">4</span><span style="color:#24292E;"> more</span></span></code></pre></div><p>通过报错信息，可以发现其实就是发生了乐观锁异常，导致上面实例中的第二次 save(user) 必然失败；而第一次 save(user) 的失败，主要是因为在并发的情况下有其他请求线程改变了 UserInfo 的值，也就是改变了 Version。</p><p>我们来看一下完整的 UserInfo 对象实体。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SuperBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">callSuper</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EntityListeners</span><span style="color:#E1E4E8;">({AuditingEntityListener.class})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Id</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">GeneratedValue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">strategy</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Version</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer version;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">CreatedBy</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer createUserId;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">CreatedDate</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Instant createTime;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">LastModifiedBy</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer lastModifiedUserId;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">LastModifiedDate</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Instant lastModifiedTime;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer ages;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String lastName;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String emailAddress;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SuperBuilder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">callSuper</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EntityListeners</span><span style="color:#24292E;">({AuditingEntityListener.class})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">GeneratedValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">strategy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GenerationType.AUTO)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Version</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer version;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">CreatedBy</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer createUserId;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">CreatedDate</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Instant createTime;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">LastModifiedBy</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer lastModifiedUserId;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">LastModifiedDate</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Instant lastModifiedTime;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer ages;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String lastName;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String emailAddress;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>看过前面课时的同学应该知道，我们通过 @Version 乐关锁机制就是防止数据被覆盖；而实际生产过程中其实很难发现类似问题。</p><p>所以当我们使用任何的异步线程处理框架的时候，一定要想好异常情况下怎么打印日志，否则就像黑洞一样，完全不知道发生了什么。</p><p>那么既然知道发生了乐观锁异常，这里就有个疑问了：我们不是在 UserInfoController 的 testSaveUser 方法上面加了 @Transaction 的注解了吗？为什么事务没有回滚？</p><h4 id="通过日志查看事务的执行过程" tabindex="-1">通过日志查看事务的执行过程 <a class="header-anchor" href="#通过日志查看事务的执行过程" aria-label="Permalink to &quot;通过日志查看事务的执行过程&quot;">​</a></h4><p>我们看看异步请求的情况下，事务应该怎么做呢？先打开事务的日志，看看上面方法的事务执行过程是什么样的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">## 我们在db的连接中开启logger</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Slf4JLogger</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">profileSQL</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">true看一下每个事务里执行的sql有哪些</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.datasource.url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:3306/test?logger=Slf4JLogger&amp;profileSQL=true</span></span>
<span class="line"><span style="color:#E1E4E8;">## 打开下面这些类的日志级别，观察一下事务的开启和关闭时机</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.springframework.orm.jpa</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DEBUG</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.springframework.transaction</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DEBUG</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.springframework.orm.jpa.JpaTransactionManager</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">trace</span></span>
<span class="line"><span style="color:#E1E4E8;">logging.level.org.hibernate.engine.transaction.internal.TransactionImpl</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DEBUG</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">## 我们在db的连接中开启logger</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Slf4JLogger</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">profileSQL</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">true看一下每个事务里执行的sql有哪些</span></span>
<span class="line"><span style="color:#24292E;">spring.datasource.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/test?logger=Slf4JLogger&amp;profileSQL=true</span></span>
<span class="line"><span style="color:#24292E;">## 打开下面这些类的日志级别，观察一下事务的开启和关闭时机</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.springframework.orm.jpa</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DEBUG</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.springframework.transaction</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DEBUG</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.springframework.orm.jpa.JpaTransactionManager</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">trace</span></span>
<span class="line"><span style="color:#24292E;">logging.level.org.hibernate.engine.transaction.internal.TransactionImpl</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DEBUG</span></span></code></pre></div><p>再请求一下刚才的测试接口：POST<a href="http://127.0.0.1:8087/test/async/user?name=jack" target="_blank" rel="noreferrer">http://127.0.0.1:8087/test/async/user?name=jack</a>就会产生下图所示的日志。</p>`,34),y=n("p",null,"先看一下上半部分，通过日志我们可以看到，首先执行这个方法的时候开启了两个事务，分别做如下解释。",-1),i=n("p",null,[n("strong",null,"线程 1"),s("：[nio-8087-exec-1] 开启了 UserInfoController.testSaveUser 方法上面的事务，也就是 http 的请求线程，开启了一个 Controller 请求事务。这是因为我们在 testSaveUser 的方法上面加了 @Transaction 的注解，所以开启了一个事务。")],-1),u=n("p",null,"而通过日志我们也可以发现，事务 1 里面什么都没有做，随后就进行了 Commit 操作，所以我们可以看得出来，默认不做任何处理的情况下，事务是不能跨线程的。每个线程里面的事务相互隔离、互不影响。",-1),F=n("p",null,[n("strong",null,"线程 2"),s("：[ task-1]，通过异步线程池开启了 SimpleJpaRepository.findById 方法上面的只读事务。这是因为默认的 SimpleJpaRepository 类上面加了 @Transaction(readOnly=true) 产生的结果。而我们通过 MySQL 的日志也可以看得出来，此次事务里面只做了和我们代码相关的 select user_info 的操作。")],-1),d=n("p",null,"我们再看一下后半部分的日志，如图所示。",-1),A=p(`<p>通过后半部分日志，我们可以看到两次 save(user) 方法，也分别开启了各自的事务，这是因为 SimpleJpaRepository.save 方法上面有 @Transaction 注解起了作用，而第二次事务因为 JPA 的实现方法判断了数据库这条数据的 Version 和我们 UserInfo 的对象中的 Version 不一致，从而第二次进行了回滚操作。</p><p>两次 save(user) 的操作里面分别有一次 Select 和 Update 语义，正是我们之前所说的 Save 方法的原理。两次事务，分别开启了两个 Session，所以对象对于这两次 Session 来说分别是从游离态（Detached）转成持久态（Persistent）的过程，所以两个独立的事务里面，一次 Select，一次 Update。</p><p>通过日志可以看到，上面一个简单的方法中一共发生了四次事务，都是采用的默认隔离级别和传播机制。那么如果我们想让异步方法里面只有一个事务应该怎么办呢？</p><h4 id="异步事务的正确使用方法" tabindex="-1">异步事务的正确使用方法 <a class="header-anchor" href="#异步事务的正确使用方法" aria-label="Permalink to &quot;异步事务的正确使用方法&quot;">​</a></h4><p>既然我们知道异步方法里面的事务是独立的，那么直接把异步的代码块用独立的事务包装起来即可，做法有如下几种。</p><p>第一种处理方法：把其中的异步代码块，移到一个外部类里面。我们这里放到 UserInfoService 中，同时方法中加上 @Transaction 注解用来开启事务，加上 @Retryable 注解进行乐观锁重试，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//加上事务，这样可以做到原子性，解决事务加到异常方法之外没有任何作用的问题</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#6A737D;">//加上重试机制，这样当我们发生乐观锁异常的时候，重新尝试下面的逻辑，减少请求的失败次数</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retryable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ObjectOptimisticLockingFailureException.class,</span><span style="color:#79B8FF;">backoff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Backoff</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">multiplier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">random</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">businessUserMethod</span><span style="color:#E1E4E8;">(String name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   UserInfo user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第一次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200L</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时200毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(RandomUtils.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_first&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#E1E4E8;">   userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第二次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">300L</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时300毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(RandomUtils.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_second&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">name);</span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#E1E4E8;">   userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//加上事务，这样可以做到原子性，解决事务加到异常方法之外没有任何作用的问题</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#6A737D;">//加上重试机制，这样当我们发生乐观锁异常的时候，重新尝试下面的逻辑，减少请求的失败次数</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retryable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ObjectOptimisticLockingFailureException.class,</span><span style="color:#005CC5;">backoff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Backoff</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">multiplier</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">random</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">businessUserMethod</span><span style="color:#24292E;">(String name) {</span></span>
<span class="line"><span style="color:#24292E;">   UserInfo user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第一次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200L</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时200毫秒</span></span>
<span class="line"><span style="color:#24292E;">   } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(RandomUtils.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_first&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#24292E;">   userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第二次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">300L</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时300毫秒</span></span>
<span class="line"><span style="color:#24292E;">   } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(RandomUtils.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_second&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name);</span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#24292E;">   userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么 Controller 里面只需要变成如下写法即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 模拟一个业务service方法，里面有一些异步操作，一些业务方法里面可能修改了两次用户信息</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">name</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test/async/user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 模拟一个service方法，期待是一个事务</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">testSaveUser</span><span style="color:#E1E4E8;">(String name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; cf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      userInfoService.</span><span style="color:#B392F0;">businessUserMethod</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }, executor).</span><span style="color:#B392F0;">exceptionally</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(e);</span><span style="color:#6A737D;">//把异常信息打印出来</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   });</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//... 实际业务中，可能还有会其他异步方法，我们举这个例子已经可以说明问题了</span></span>
<span class="line"><span style="color:#E1E4E8;">   cf.</span><span style="color:#B392F0;">isDone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Success&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 模拟一个业务service方法，里面有一些异步操作，一些业务方法里面可能修改了两次用户信息</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">name</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test/async/user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 模拟一个service方法，期待是一个事务</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">testSaveUser</span><span style="color:#24292E;">(String name) {</span></span>
<span class="line"><span style="color:#24292E;">   CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; cf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      userInfoService.</span><span style="color:#6F42C1;">businessUserMethod</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">   }, executor).</span><span style="color:#6F42C1;">exceptionally</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e);</span><span style="color:#6A737D;">//把异常信息打印出来</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   });</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//... 实际业务中，可能还有会其他异步方法，我们举这个例子已经可以说明问题了</span></span>
<span class="line"><span style="color:#24292E;">   cf.</span><span style="color:#6F42C1;">isDone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Success&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们再次发起一下请求，看一下日志。</p>`,10),C=p(`<p>通过上图的日志，我们可以知道两个重要信息：</p><ol><li><p>这个时候只有 UserInfoServiceImpl.businessUserMethod 开启了一个事务，这是因为 findById 和 Save 方法中，事务的传播机制都是&quot;如果存在事务就利用当前事务&quot;的原理，所以就不会像我们上面一样创建四次事务了；</p></li><li><p>而此时两次 save(user) 只产生了一个 update 的 sql 语句，并且也很难出现乐观锁异常了，因为这是 Session 的机制，将两次对 UserInfo 实体的操作进行了合并；所以当我们使用 JPA 的时候某种程度上也会降低 db 的压力，增加代码的执行性能。</p></li></ol><p>而另外一个侧论，就是当事务的生命周期执行越快的时候，发生异常的概率就会越低，因为可以减少并发处理的机会。</p><p>第二种处理方法：可以利用&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=490#/detail/pc?id=4719" target="_blank" rel="noreferrer">19 | 如何搞清楚事务、连接池的关系？正确配置是怎样的？</a>&quot;讲过的 TransactionTemplate 方法开启事务，这里不再重复讲述了。</p><p>第三种处理方法：我们可以建一个自己的 TransanctionHelper，并带上重试机制，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 利用spring进行管理</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionHelper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 利用spring 机制和jdk8的Consumer机制实现只消费的事务</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">rollbackFor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Exception.class) </span><span style="color:#6A737D;">//可以根据实际业务情况，指定明确的回滚异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Retryable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ObjectOptimisticLockingFailureException.class,</span><span style="color:#79B8FF;">backoff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Backoff</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">multiplier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.5</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">random</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transactional</span><span style="color:#E1E4E8;">(Consumer </span><span style="color:#FFAB70;">consumer</span><span style="color:#E1E4E8;">,Object </span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        consumer.</span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(o);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 利用spring进行管理</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionHelper</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 利用spring 机制和jdk8的Consumer机制实现只消费的事务</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">rollbackFor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Exception.class) </span><span style="color:#6A737D;">//可以根据实际业务情况，指定明确的回滚异常</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Retryable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ObjectOptimisticLockingFailureException.class,</span><span style="color:#005CC5;">backoff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Backoff</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">multiplier</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">random</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transactional</span><span style="color:#24292E;">(Consumer </span><span style="color:#E36209;">consumer</span><span style="color:#24292E;">,Object </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(o);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么 Controller 里面的写法可以变成如下方式，也可以达到同样效果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test/async/user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">testSaveUser</span><span style="color:#E1E4E8;">(String name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   CompletableFuture&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; cf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CompletableFuture.</span><span style="color:#B392F0;">runAsync</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      transactionHelper.</span><span style="color:#B392F0;">transactional</span><span style="color:#E1E4E8;">((param)</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">{ </span><span style="color:#6A737D;">// 通过lambda实现事务管理</span></span>
<span class="line"><span style="color:#E1E4E8;">         UserInfo user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第一次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200L</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时200毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">         } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(RandomUtils.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_first&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#E1E4E8;">         userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第二次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">300L</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时300毫秒</span></span>
<span class="line"><span style="color:#E1E4E8;">         } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (InterruptedException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">         user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(RandomUtils.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_second&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">name);</span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#E1E4E8;">         userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">      },name);</span></span>
<span class="line"><span style="color:#E1E4E8;">   }, executor).</span><span style="color:#B392F0;">exceptionally</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(e);</span><span style="color:#6A737D;">//把异常信息打印出来</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   });</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//... 实际业务中，可能还有会其他异步方法，我们举一个例子已经可以说明问题了</span></span>
<span class="line"><span style="color:#E1E4E8;">   cf.</span><span style="color:#B392F0;">isDone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Success&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test/async/user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">testSaveUser</span><span style="color:#24292E;">(String name) {</span></span>
<span class="line"><span style="color:#24292E;">   CompletableFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; cf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CompletableFuture.</span><span style="color:#6F42C1;">runAsync</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      transactionHelper.</span><span style="color:#6F42C1;">transactional</span><span style="color:#24292E;">((param)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{ </span><span style="color:#6A737D;">// 通过lambda实现事务管理</span></span>
<span class="line"><span style="color:#24292E;">         UserInfo user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第一次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200L</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时200毫秒</span></span>
<span class="line"><span style="color:#24292E;">         } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(RandomUtils.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_first&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#24292E;">         userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">//..... 此处模拟一些业务操作，第二次改变UserInfo里面的值；</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">300L</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">// 加上复杂业务耗时300毫秒</span></span>
<span class="line"><span style="color:#24292E;">         } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(RandomUtils.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_second&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name);</span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#24292E;">         userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">      },name);</span></span>
<span class="line"><span style="color:#24292E;">   }, executor).</span><span style="color:#6F42C1;">exceptionally</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e);</span><span style="color:#6A737D;">//把异常信息打印出来</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   });</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//... 实际业务中，可能还有会其他异步方法，我们举一个例子已经可以说明问题了</span></span>
<span class="line"><span style="color:#24292E;">   cf.</span><span style="color:#6F42C1;">isDone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Success&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这种方式主要是通过 Lambda 表达式解决事务问题。</p><p>总之，不管是以上哪种方法，都可以解决我们所说的异步事务的问题。所以搞清楚事务的背后实现逻辑，就很容易解决类似问题了。</p><p>还有一个问题就是，为什么当异步方法中是同一个事务的时候，第二次 save(user) 就成功了？而异步代码块里面的两个 save(user) 分别在两个事务里面，第二次就不成功了呢？我们利用前两个课时讲过的 Persistence Context 和实体的状态来分析一下。</p><h4 id="session-的机制与-repository-save-entity-是什么关系" tabindex="-1">Session 的机制与 Repository.save(entity) 是什么关系？ <a class="header-anchor" href="#session-的机制与-repository-save-entity-是什么关系" aria-label="Permalink to &quot;Session 的机制与 Repository.save(entity) 是什么关系？&quot;">​</a></h4><p>我们在学习 Persistence Context 的时候，知道 Entity 有不同的状态。</p><p>在一个 Session 里面，如果我们通过 findById(id) 得到一个 Entity，它就会变成 Manager（persist） 持久态。那么同一个 Session 里面，同一个 Entity 多次操作 Hibernate 就会进行 Merge 操作。</p><p>所以上面的实例中，当我们在 businessUserMethod 方法上面加 @Transaction 的时候，会造成异步代码的整块逻辑处于同一个事务里面，而按照我们上一讲介绍的 Session 原理，同一个事务就会共享同一个 Session，所以同一个事务里面的 findById、save、save 的多次操作都是同一个实例。</p><p>什么意思呢？我们可以通过设置 Debug 断点，查看一下对象的内存对象地址是否一样，就可以看得出来。如下图所示，findById 之后和两次 save 之后都是同一个对象。</p>`,16),D=p(`<p>而如果我们跨 Session 传递实体对象，那么在一个 Session 里面持久态的对象，对于另外一个 Session 来说就是一个Detached（游离态）的对象。</p><p>而根据 Session 里面的 Persistenc Context 的原理，一旦这个游离态的对象进行 db 操作，Session 会 Copy 一个新的实体对象。也就是说，当我们不在异步代码中加事务的时候，即去掉异步代码块businessUserMethod 方法中的@Transaction 注解，findById 之后就会产生一个新的事务、新的 Session，那么返回的就是对象 1；第一次 Save 之后，由于又是一个新的事务、新的 Session，那么返回的实体 u2 就是对象 2。</p><p>我们知道这个原理之后，对代码做如下改动。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//  @Transactional 去掉事务</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">businessUserMethod</span><span style="color:#E1E4E8;">(String name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      UserInfo user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1L</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(RandomUtils.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_first&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#E1E4E8;">      UserInfo u2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">      user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(RandomUtils.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">100000</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_second&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#E1E4E8;">      UserInfo u3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(u2);</span><span style="color:#6A737D;">// 第二次save采用第一次save的返回结果，这样里面带有了最新的version的值，所以也就会保存成功</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//  @Transactional 去掉事务</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">businessUserMethod</span><span style="color:#24292E;">(String name) {</span></span>
<span class="line"><span style="color:#24292E;">      UserInfo user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(RandomUtils.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_first&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#24292E;">      UserInfo u2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">      user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(RandomUtils.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">100000</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_second&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name); </span><span style="color:#6A737D;">//模拟一些业务操作，改变了UserInfo里面的值</span></span>
<span class="line"><span style="color:#24292E;">      UserInfo u3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(u2);</span><span style="color:#6A737D;">// 第二次save采用第一次save的返回结果，这样里面带有了最新的version的值，所以也就会保存成功</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>异步里面调用这个方法也是成功的，因为乐观锁的原理是 Version 变了，我们用最新的对象，也就是最新的 Version 就可以了。</p><p>我们设置一个断点看一下 user、u2、u3 在不同的 Session 作用域之后，就变成不同的实例了，如下所示。</p>`,6),g=p('<p>问题分析完了，那么这些内容带给我们哪些思考呢？</p><h3 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h3><p><strong>在上面 Demo 中的异步场景下设置 open-in-view 等于 true / false，会对上面的测试结果有影响吗</strong>？</p><p>答案是肯定没有影响的，spring.jpa.open-in-view 的本质还是开启 Session，而保持住 Session 的本质还是利用 ThreadLocal，也就是必须为同一个线程的情况下才适用。所以异步场景不受 spring.jpa.open-in-view 控制。</p><p><strong>如果是大量的异步操作 db connection 的持有模式，应该配置成哪一种比较合适？</strong></p><p>答案是DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION，因为这样可以做到对 db 连接最大的利用率。用的时候就获取，事务提交完就释放，这样就不用关心业务逻辑执行多长时间了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>上面的例子折射出来的是一些 JPA 初学者最容易犯的错误，我们通过前几讲对原理知识的学习，解决了工作中最常见、最容易犯错的，如异步问题和事务问题。其中关键的几个问题你一定要好好思考，尤其是在开发业务代码的时候。</p><ol><li><p>我们的一个请求，开启了几次事务？在什么时机开始的？</p></li><li><p>我们的一个请求，开启了几次 Session？在什么时机开启的？</p></li><li><p>事务和 Session 分别会对实体的状态有什么影响？</p></li></ol><p>上面的几个问题是对一个高级 Java 工程师最基础的要求，如果你想晋级资深开发工程师，还需要知道：</p><ol><li><p>我们的一个请求，对 db 连接池里面的连接持有时间是多久？</p></li><li><p>我们的一个请求，性能指标都有哪些决定因素？</p></li></ol><p>针对以上问题，你可以回过头去文中找答案，并且希望你深入钻研，遇到问题做到心中有数。</p><p>本讲内容就到这里了，下一讲我们来聊聊 Lazy 的核心原理和问题。欢迎你对本讲内容提出问题和建议，如果本专栏对你有帮助，就动动手指分享吧。我们下一讲再见。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>',14);function m(v,b,h,f,B,I){const a=e("Image");return t(),r("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/72/11/Ciqc1F_As0GAa7gmAAQU-sy_Y6s946.png"}),s(),y,i,u,F,d,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/72/1C/CgqCHl_As2KAPPhLAAVgCANdWbo463.png"}),s(),A,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/72/1C/CgqCHl_As2uAXKFdAAOga2Jcfio735.png"}),s(),C,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/72/11/Ciqc1F_As3uAcvehAAG5ahJbL1Y740.png"}),s(),D,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/72/11/Ciqc1F_As4SATk88AAEnxfK1BOo296.png"}),s(),g])}const k=o(c,[["render",m]]);export{_ as __pageData,k as default};
