import{_ as n,j as l,o as e,g as p,k as o,s,h as t,Q as c}from"./chunks/framework.4e7d56ce.js";const b=JSON.parse('{"title":"客户端核心类 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3140) 第10讲：ClientCnxn：客户端核心工作类工作原理解析.md","filePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3140) 第10讲：ClientCnxn：客户端核心工作类工作原理解析.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/ZooKeeper源码分析与实战_文档/(3140) 第10讲：ClientCnxn：客户端核心工作类工作原理解析.md"},E=s("p",null,"今天我们开始学习客户端核心工作类的工作原理。",-1),y=s("p",null,"上个课时我们学习了会话的底层实现过程，我们知道会话是在 ZooKeeper 的客户端发起的，而在会话超异常等事件发生时，服务端也会通知给客户端。而我们之所以能够接收到服务端的通知，并向服务端发送请求等操作，是通过 ZooKeeper 客户端实现的。下面我们就深入学习一下客户端核心工作类的实现过程和底层原理。",-1),i=s("h3",{id:"客户端核心类",tabindex:"-1"},[t("客户端核心类 "),s("a",{class:"header-anchor",href:"#客户端核心类","aria-label":'Permalink to "客户端核心类"'},"​")],-1),d=s("p",null,"在 ZooKeeper 客户端的底层实现中，ClientCnxn 类是其核心类，所有的客户端操作都是围绕这个类进行的。ClientCnxn 类主要负责维护客户端与服务端的网络连接和信息交互。",-1),u=s("p",null,"在前面的课程中介绍过，向服务端发送创建数据节点或者添加 Watch 监控等操作时，都会先将请求信息封装成 Packet 对象。那么 Packet 是什么呢？其实** Packet 可以看作是一个 ZooKeeper 定义的，用来进行网络通信的数据结构**，其主要作用是封装了网络通信协议层的数据。而 Packet 内部的数据结构如下图所示：",-1),h=c("",22);function F(g,C,v,_,q,B){const a=l("Image");return e(),p("div",null,[E,y,i,d,u,o(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/19/3A/CgqCHl7aDQyAEkoJAAB9K_a8-pA768.png"}),h])}const A=n(r,[["render",F]]);export{b as __pageData,A as default};
