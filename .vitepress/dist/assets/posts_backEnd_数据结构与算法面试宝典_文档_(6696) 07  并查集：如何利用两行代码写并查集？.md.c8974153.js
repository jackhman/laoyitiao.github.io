import{_ as o,D as e,o as t,g as c,J as l,h as n,Q as p,m as s}from"./chunks/framework.f67d7268.js";const As=JSON.parse('{"title":"07并查集：如何利用两行代码写并查集？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6696) 07  并查集：如何利用两行代码写并查集？.md","filePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6696) 07  并查集：如何利用两行代码写并查集？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/数据结构与算法面试宝典_文档/(6696) 07  并查集：如何利用两行代码写并查集？.md"},E=p('<h1 id="_07并查集-如何利用两行代码写并查集" tabindex="-1">07并查集：如何利用两行代码写并查集？ <a class="header-anchor" href="#_07并查集-如何利用两行代码写并查集" aria-label="Permalink to &quot;07并查集：如何利用两行代码写并查集？&quot;">​</a></h1><p><strong>并查集</strong> 是一种树型的数据结构，用于处理一些<strong>不交集（Disjoint Sets）的合并及查询问题</strong>。通常会用到两种操作。</p><ul><li><p>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。</p></li><li><p>Union：将两个子集合并成同一个集合。</p></li></ul><p>因此，这种数据结构称为<strong>并查集</strong>。</p><p>在工程中，<strong>并查集往往较多用于数据清理分类等操作</strong>，并且能够以 O(N) 的时间复杂度处理较大的数据量，出现在大厂的面试题中也就不奇怪了。</p><p>学完这一讲，你将会收获：</p><ul><li><p>并查集的模板代码</p></li><li><p>如何利用并查集解决<strong>连通域</strong>问题</p></li><li><p>如何利用虚拟点与虚拟边</p></li><li><p>如何利用路径压缩的技巧</p></li></ul><h3 id="并查集基础" tabindex="-1">并查集基础 <a class="header-anchor" href="#并查集基础" aria-label="Permalink to &quot;并查集基础&quot;">​</a></h3><p>首先来看一下并查集要解决的问题，主要有两个。</p><ul><li><p>Find：查询 item 属于<strong>哪个集合</strong></p></li><li><p>Union：将两个集合<strong>进行合并</strong></p></li></ul><p>我们以一个有趣的问题展开。在《倚天屠龙记》这部武侠小说中，有很多帮派，比如：</p>',11),y=p(`<p>其中张无忌、谢逊、韦一笑属于明教，而张三丰、莫声谷、宋远桥属于武当派。</p><h4 id="方法-1" tabindex="-1">方法 1 <a class="header-anchor" href="#方法-1" aria-label="Permalink to &quot;方法 1&quot;">​</a></h4><p>我们首先设计这样一种方案：采用数组/哈希的方法，记录每个人所在的门派。伪代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 伪代码</span></span>
<span class="line"><span style="color:#E1E4E8;">Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#F97583;">H</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;谢逊&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;明教&quot;</span></span>
<span class="line"><span style="color:#F97583;">H</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;张无忌&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;明教&quot;</span></span>
<span class="line"><span style="color:#F97583;">H</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;韦一笑&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;明教&quot;</span></span>
<span class="line"><span style="color:#F97583;">H</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;莫声谷&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;武当&quot;</span></span>
<span class="line"><span style="color:#F97583;">H</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;张三丰&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;武当&quot;</span></span>
<span class="line"><span style="color:#F97583;">H</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;宋远桥&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;武当&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 伪代码</span></span>
<span class="line"><span style="color:#24292E;">Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#D73A49;">H</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;谢逊&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;明教&quot;</span></span>
<span class="line"><span style="color:#D73A49;">H</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;张无忌&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;明教&quot;</span></span>
<span class="line"><span style="color:#D73A49;">H</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;韦一笑&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;明教&quot;</span></span>
<span class="line"><span style="color:#D73A49;">H</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;莫声谷&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;武当&quot;</span></span>
<span class="line"><span style="color:#D73A49;">H</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;张三丰&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;武当&quot;</span></span>
<span class="line"><span style="color:#D73A49;">H</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;宋远桥&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;武当&quot;</span></span></code></pre></div><p>那么就可以这样查询：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(String person) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(person);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(String person) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(person);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，我们已经完成一个功能了。时间复杂度也很低，可以达到 O(1)。</p><p>那我们再看一下合并。假设某一天，张三丰要闭关修炼，决定将武当派暂时交给张无忌代管理，为了方便管理两个帮派，张无忌号令明教的人前往武当派。那么此时就需要进行一个合并 Union 操作，也就是将所有&quot;明教&quot;的人归入&quot;武当&quot;。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(String A, String B) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (item </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> H) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> item.value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;明教&quot;</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      item.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;武当&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(String A, String B) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (item </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> H) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item.value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;明教&quot;</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      item.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;武当&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>但是如此一来，整个时间复杂度就上去了，Union 的时候，时间复杂度变成 O(N)。如果 Union 操作很频繁，那么这种算法就变得不可接受。</p><h4 id="方法-2" tabindex="-1">方法 2 <a class="header-anchor" href="#方法-2" aria-label="Permalink to &quot;方法 2&quot;">​</a></h4><p>在这里我们换一种思路，看看能不能解决 Union 复杂度过高的问题。采用江湖中通常的做法，认帮主！当帮主一样的时候，就认为我们是一个帮派的。</p>`,12),i=p(`<p>每个人都指向自己的大哥，帮主最牛，指向帮主自己。那么要进行 Union 操作的时候。直接修改指针就可以了。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(String A, String B) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  String A帮主 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(A);</span></span>
<span class="line"><span style="color:#E1E4E8;">  String B帮主 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(B);</span></span>
<span class="line"><span style="color:#E1E4E8;">  H.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(A帮主, B帮主); </span><span style="color:#6A737D;">// 成功将A所在帮派归入B帮派</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(String A, String B) {</span></span>
<span class="line"><span style="color:#24292E;">  String A帮主 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(A);</span></span>
<span class="line"><span style="color:#24292E;">  String B帮主 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(B);</span></span>
<span class="line"><span style="color:#24292E;">  H.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(A帮主, B帮主); </span><span style="color:#6A737D;">// 成功将A所在帮派归入B帮派</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Union 的最后，我们只需要将 A 帮主指向 B 帮主就可以了。比如，将明教与武当合并，如下图所示：</p>`,3),F=p(`<p>我们再看一下 Find 函数，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 返回A的帮主</span></span>
<span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(String A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (A </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(A)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果我还有大哥，那么就顺着大哥一路往上找</span></span>
<span class="line"><span style="color:#E1E4E8;">    A </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(A);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最终找到了帮主</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> A;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 返回A的帮主</span></span>
<span class="line"><span style="color:#24292E;">String </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(String A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (A </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(A)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果我还有大哥，那么就顺着大哥一路往上找</span></span>
<span class="line"><span style="color:#24292E;">    A </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(A);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 最终找到了帮主</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> A;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>虽然这种办法在 Union 时比较方便，但是在 Find 时却容易引入较高的复杂度。下面我们一起来看一下为什么 Find 起来比较麻烦：</p>`,3),A=p(`<p>在这种情况下，Find 查询时，总是会查询很多次 O(N)。也就是说，Union 的时间复杂度较低的时候，Find 的时间复杂度又上升了。</p><p>那么，有没有更好一点的办法呢？能让 Union 和 Find 的时间复杂度都低一点。</p><h4 id="路径压缩" tabindex="-1">路径压缩 <a class="header-anchor" href="#路径压缩" aria-label="Permalink to &quot;路径压缩&quot;">​</a></h4><p>办法还是有的，就叫<strong>路径压缩</strong>，我们发现，在方法 2 中，如果能将层级结构&quot;拍扁&quot;，那么 Find 和 Union 的时间复杂度都会特别低。</p><p>因此，我们还需要在 Find 函数里面做一些手脚。当我们找到一帮主之后，就把这条路径上的所有人的大哥都改成帮主。代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(String A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// start记为出发点</span></span>
<span class="line"><span style="color:#E1E4E8;">  String start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (A </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(A)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    A </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(A);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 此时A是帮主</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 我们再从出发点开始，把每个人的大哥改成帮主</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 路径压缩的关键代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(start) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(start);</span></span>
<span class="line"><span style="color:#E1E4E8;">    H.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(start, A);</span></span>
<span class="line"><span style="color:#E1E4E8;">    start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> A;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(String A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// start记为出发点</span></span>
<span class="line"><span style="color:#24292E;">  String start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (A </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(A)) {</span></span>
<span class="line"><span style="color:#24292E;">    A </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(A);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 此时A是帮主</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 我们再从出发点开始，把每个人的大哥改成帮主</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 路径压缩的关键代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(start) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> A) {</span></span>
<span class="line"><span style="color:#24292E;">    String next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(start);</span></span>
<span class="line"><span style="color:#24292E;">    H.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(start, A);</span></span>
<span class="line"><span style="color:#24292E;">    start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> A;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再看这个例子：经过合并，成立糖葫芦帮之后。如下图所示：</p>`,7),D=s("p",null,'如果一旦执行 Find("韦一笑")，那么糖葫芦帮派就会变成大饼帮派。',-1),g=p(`<p>所有人的帮主都会指向张三丰。也就是说，除了第一次 Find 复杂度为 O(N)，后面的查询复杂度都是 O(1)。至此，我们已经讲清楚带路径压缩的并查集的原理。接下来我们看代码如何实现。</p><h3 id="并查集模板" tabindex="-1">并查集模板 <a class="header-anchor" href="#并查集模板" aria-label="Permalink to &quot;并查集模板&quot;">​</a></h3><p>前面使用的都是比较形式化的语言和伪代码。接下来我们看一下具体如何实现并查集。这里我<strong>以整数替换前面的人名</strong>，操作起来更加方便。</p><h4 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p>首先假设有 N 个整数，范围为 [0, N)。那么记录每个人的信息，就需要一个长度为 N 的数组。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[N]; </span><span style="color:#6A737D;">// 记录每个人的大哥是谁</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[N]; </span><span style="color:#6A737D;">// 记录每个人的大哥是谁</span></span></code></pre></div><p>在初始化的时候，每个人都是自成一派。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="查询" tabindex="-1">查询 <a class="header-anchor" href="#查询" aria-label="Permalink to &quot;查询&quot;">​</a></h4><p>根据前面所讲，可以得到查询操作的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 查找根结点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 路径压缩的实现</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将路径上的每个点指向根结点x</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[b] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[b];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[b] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">    b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 查找根结点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">    x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 路径压缩的实现</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将路径上的每个点指向根结点x</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[b] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[b];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[b] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">    b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="合并" tabindex="-1">合并 <a class="header-anchor" href="#合并" aria-label="Permalink to &quot;合并&quot;">​</a></h4><p>完成查询操作，我们就要把两个集合进行合并，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> y) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(x)] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(y);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> y) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(x)] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(y);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这两个函数的代码还是显得有点长，并且不太容易记。我在刷题和面试时，更喜欢，或者说常用一份精简过的代码。下面我将分享给你。</p><h4 id="两行代码" tabindex="-1">两行代码 <a class="header-anchor" href="#两行代码" aria-label="Permalink to &quot;两行代码&quot;">​</a></h4><p>这里我整理了：<strong>两行</strong> 并查集核心代码模板（用 C 语言实现，<strong>方便记忆）：</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> F[N];</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> F[x] </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> F[x] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(F[x]);</span><span style="color:#6A737D;"> // &lt;-- 1. 查找</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  F[</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(x)] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(y);</span><span style="color:#6A737D;"> // &lt;- 2. 合并</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> F[N];</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> F[x] </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> F[x] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(F[x]);</span><span style="color:#6A737D;"> // &lt;-- 1. 查找</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  F[</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(x)] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(y);</span><span style="color:#6A737D;"> // &lt;- 2. 合并</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注：根据不同的语言，你可能需要修改不同的 Find 函数。</p><h4 id="两个功能" tabindex="-1">两个功能 <a class="header-anchor" href="#两个功能" aria-label="Permalink to &quot;两个功能&quot;">​</a></h4><p>当真正使用并查集的时候，面试官可能会问你两个问题：</p><ul><li><p>有多少个集合？</p></li><li><p>每个集合里面有多少个元素？</p></li></ul><p>下面我们依次回答这两个问题。</p><p><strong>1</strong> . <strong>集合数目</strong>：在执行 Find 的时候，集合个数不可能有变化。如果发生变化，只可能发生在两个集合合并的时候。</p><p>再来具体看一下初始化和合并操作。</p><ul><li><p>初始化：在并查集开始初始化的时候，一共有 N 个元素，那么一开始集合个数为 N。</p></li><li><p>合并：合并的时候，需要查看合并的两个集合是不是同一个，如果不是，那么集合个数减 1。<br><strong>2</strong> . <strong>每个集合中元素的个数</strong>：在执行 Find 的时候，每个集合中元素的个数不可能发生变化。如果发生变化，只可能是两个集合合并的时候。</p></li></ul><p>下面我们具体看一下初始化和合并操作。</p><ul><li><p>初始化：在并查集开始初始化的时候，每个元素都属于独立的元素，那么一开始每个集合里面的个数都是 1。如果我们用 Count[] 数组记录每个元素的个数，那么一开始初始化 Count[] = 1。</p></li><li><p>合并：当 A 集合要合并到 B 集合里面的时候，可以认为 A 集合里面所有的元素都变成 B 集合里面的元素。当然是 B 集合里面的个数增加了，那么 Count[Find(B)] + = Count[Find(A)]。</p></li></ul><p><strong>注意</strong> ：在记录集合中元素个数的时候，<strong>只有根结点的信息是准确的</strong>。当查询结点i所属集合的信息时，只能使用 Count[Find(i)]，而不能使用 Count[i]。因为如果要保证每个点 Count[i] 的信息都是准确的，那么每次合并的时候，整个集合中的元素的信息都要更新，这样时间复杂度就很高了，Union 操作的时间复杂度就不再是O(lgN)，而变成O(N)。</p><p>为了方便你刷题和应对面试，这里我给出了并查集的完整代码，你可以作为参考。</p><h4 id="完整-java-代码" tabindex="-1">完整 Java 代码 <a class="header-anchor" href="#完整-java-代码" aria-label="Permalink to &quot;完整 Java 代码&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 并查集数组</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 记录并查集中集合的个数</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 记录集合中点的个数，比如要知道i所在集合的点有多少个: C[Find(i)]</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：这里不能直接使用C[i]</span></span>
<span class="line"><span style="color:#6A737D;">// 因为只有根结点的统计才是正确的</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] Cnt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 并查集的初始化</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[n];</span></span>
<span class="line"><span style="color:#E1E4E8;">  Cnt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[n];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Cnt</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> y) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> xpar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ypar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将x所在集合，合并到y所在集合</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (xpar </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> ypar) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[xpar] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ypar;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// y集合里面的个数要增加</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Cnt</span><span style="color:#E1E4E8;">[ypar] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Cnt</span><span style="color:#E1E4E8;">[xpar];</span></span>
<span class="line"><span style="color:#E1E4E8;">    count</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Size</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Cnt</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(i)];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 并查集数组</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 记录并查集中集合的个数</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 记录集合中点的个数，比如要知道i所在集合的点有多少个: C[Find(i)]</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：这里不能直接使用C[i]</span></span>
<span class="line"><span style="color:#6A737D;">// 因为只有根结点的统计才是正确的</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] Cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 并查集的初始化</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n) {</span></span>
<span class="line"><span style="color:#24292E;">  F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[n];</span></span>
<span class="line"><span style="color:#24292E;">  Cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[n];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Cnt</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> y) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> xpar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ypar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将x所在集合，合并到y所在集合</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (xpar </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> ypar) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[xpar] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ypar;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// y集合里面的个数要增加</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Cnt</span><span style="color:#24292E;">[ypar] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Cnt</span><span style="color:#24292E;">[xpar];</span></span>
<span class="line"><span style="color:#24292E;">    count</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Size</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Cnt</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(i)];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注：这里是以<strong>整数</strong> 和<strong>数组</strong>为例。如果关键字是 String，也可以使用哈希表将字符串映射到整数再进行并查集的操作。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%A8%A1%E6%9D%BF.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%A8%A1%E6%9D%BF.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%A8%A1%E6%9D%BF.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：并查集的初始化时间复杂度为 O(N)，而 Find 和 Union 的操作时间复杂度都是 O(lgN)，其中 N 为点的总数。这里只使用了长度为 N 的数组，所以空间复杂度为 O(2N)。</p><h4 id="例-1-最小生成树" tabindex="-1">例 1：最小生成树 <a class="header-anchor" href="#例-1-最小生成树" aria-label="Permalink to &quot;例 1：最小生成树&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个图的点集，边集和权重，返回构建最小生成树的代价。</p><p>输入：N = 2， conn = [[1, 2, 37], [2, 1, 17], [1, 2, 68]]</p><p>输出：17</p><p><strong>解释</strong>：图中只有两个点 [1, 2]，当然是选择最小连接 [2, 1, 17]</p><p>【<strong>分析</strong> 】利用并查集 + 贪心算法，可以生成一个图的<strong>最小生成树，<strong>这种方法也被称为</strong> Kruskal 算法</strong>。并查集可以用来将两个点进行 Union，不过在并查集的 Union 代码中，并没有权重这一项，那我们该怎么办呢？</p><p>在 Union 的时候，就直接根据边的权重来排序，然后再处理，这不就是经典的 <strong>Kruskal 算法</strong>。</p><p>这里我们可以讲一下最小生成树的思路：</p><ul><li><p>首先初始化并查集</p></li><li><p>将边集<strong>按照权重排序</strong></p></li><li><p>利用边集将不同的两点进行 Union</p></li><li><p>将不同的集合进行 Union 时需要加上新加入的边的代价（即边的权重）。</p></li></ul><p>【<strong>代码</strong>】这里我们可以写出经典的 Kruskal 算法，代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> cost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这里直接申请了足够多的内存</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 并查集初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 注意点的编号是从1~n</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[n</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    cost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在合并的时候，需要加上代价</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">pay</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y)) cost </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> pay;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x)] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 一共有n个点，编号从1~n</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// conn表示输入的边的集合</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 每一项是一个三元组[点a, 点b, 需要费用c]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Kruskal</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">m</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[][] </span><span style="color:#FFAB70;">conn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(n);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 边集的排序</span></span>
<span class="line"><span style="color:#E1E4E8;">    Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(conn, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, m, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Comparator&lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[]&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 顺次将边集添加到集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> m; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(conn[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], conn[i][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], conn[i][</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cost;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> cost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这里直接申请了足够多的内存</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 并查集初始化</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 注意点的编号是从1~n</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[n</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    cost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在合并的时候，需要加上代价</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">pay</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y)) cost </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> pay;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x)] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 一共有n个点，编号从1~n</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// conn表示输入的边的集合</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 每一项是一个三元组[点a, 点b, 需要费用c]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Kruskal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">m</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] </span><span style="color:#E36209;">conn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(n);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 边集的排序</span></span>
<span class="line"><span style="color:#24292E;">    Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(conn, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, m, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[]&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 顺次将边集添加到集合中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> m; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(conn[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], conn[i][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], conn[i][</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cost;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/P1287.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/P1287.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/P1287.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：程序主要分为两块，一部分为边集 E 的排序，复杂度为 O(ElgE)；另外一部分为每条边的 Union 操作，复杂度为 O(ElgN)。在大部分时候，边的数目往往比点的数目要多，因此时间复杂度为 O(ElgE)。</p><p>【<strong>小结</strong>】本质上 Kruskal 算法就是并查集算法 + 贪心算法。使用 Kruskal 算法有一个很重要的前提------题目是假设输入边能将所有的点加到一个连通域中，也就是保证最后必然能够生成一棵树。</p><p>这里给你留一道练习题，你可以利用它检验和巩固自己的学习成果。</p><p><strong>练习题 1</strong>：给定点集和边集，求最小生成树的代价，如果最后不能生成最小生成树，那么返回MAX_INT。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%BB%A3%E4%BB%B7.md?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%BB%A3%E4%BB%B7.md?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E4%BB%A3%E4%BB%B7.md?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>接下来我们一起看一下关于并查集的其他考察形式与考点。</p><h3 id="连通域的数目" tabindex="-1">连通域的数目 <a class="header-anchor" href="#连通域的数目" aria-label="Permalink to &quot;连通域的数目&quot;">​</a></h3><p>我们可以把最小生成树当成一个连通域，只不过需要用最小的代价来生成这么一个连通域。除了求解最小生成树，并查集的另外一个常见的用途是求解连通域的数目。在<strong>微软和 EMC</strong> 的面试中都出现过，但是可能会通过两种方式给出图的结构，比如：</p><ul><li><p>点集和边集，告诉你有哪些点，以及哪些边；</p></li><li><p>矩阵表示。</p></li></ul><p>不管是通过哪一种图表示，利用<strong>并查集解决连通域数目的步骤都是以下两步</strong>：</p><ol><li><p>用 F[] 数组和点集进行初始化</p></li><li><p>利用边集进行 Union</p></li></ol><p>最后的集合数目就是连通域的数目。</p><p>利用本讲前面学过的模板和思路，相信你已经可以解决面试中的高频出现的算法题了。</p><h4 id="例-2-帮派的数目" tabindex="-1">例 2：帮派的数目 <a class="header-anchor" href="#例-2-帮派的数目" aria-label="Permalink to &quot;例 2：帮派的数目&quot;">​</a></h4><p>【<strong>题目</strong>】江湖上有 N 个人，编号从 [1 ~ N]，现在只能告诉你，其中两人是一个帮派的，请你输出帮派的数目。</p><p>输入：N = 4, [[1, 2], [2,3]]</p><p>输出：2</p><p><strong>解释</strong>：一共有 4 个人，[1,2, 3] 成为一个帮派，[4] 独自成为一个帮派，那么一共有 2 个帮派。</p><p>【<strong>分析</strong>】在一开始，你可以认为他们都是独自成为一个帮派，当告诉你每两个人是一个帮派时，相当于要把这两个人合并到一个集合中。问题是一共有多少个帮派，显然这就是一个非常标准的并查集的问题了。我们可以直接套用前面所讲的并查集的模板进行求解。</p><p>【<strong>代码</strong>】直接利用并查集的代码模板，代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[n </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> y) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y))</span></span>
<span class="line"><span style="color:#E1E4E8;">    count</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x)] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findGangNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[][] conn) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(n);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> conn.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> m; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(conn[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], conn[i][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 帮派里面帮主的个数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> count;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n) {</span></span>
<span class="line"><span style="color:#24292E;">  F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> y) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y))</span></span>
<span class="line"><span style="color:#24292E;">    count</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x)] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findGangNumber</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] conn) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(n);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> conn.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> m; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(conn[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], conn[i][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 帮派里面帮主的个数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> count;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/T1260.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/T1260.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/T1260.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a><br><strong>复杂度分析</strong>：整个算法的时间复杂度为 O(mlogN) ，这里 n 表示人的数目，而 m 表示两两成对的输入数目。</p></blockquote><p>【<strong>小结</strong>】在这里我们直接利用并查集的模板搞定了一道题目。</p><p><strong>延伸</strong>：如果将这里的每个点都当成一个&quot;图&quot;结构中的一个点，将两两成对的输入当成&quot;图&quot;结构中的边。那么问题就变成了求解图的连通域个数。</p><p>下面我们一起来看一下这个曾经在<strong>微软</strong>的电面中出现的 2 道题目。</p><p><strong>练习题 2</strong>：给定一个黑白图像，其中白色像素用 &#39;1&#39; 表示，黑色像素用 &#39;0&#39; 表示。如果把上下左右相邻的白色像素看成一个连通域，给定一幅图（用矩阵表示），请问图中有几个连通域。</p><p>输入：A = [[&#39;1&#39;, &#39;1&#39;, &#39;0&#39;], [&#39;0&#39;, &#39;1&#39;, &#39;0&#39;]]</p><p>输出：1</p><p><strong>解释</strong>：图中所有的 &#39;1&#39; 都是连在一起的，所以只有一个连通域。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/200.%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/200.%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/200.%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 3</strong>：给定一个图（不是图像）的矩阵，A[i][j] = 1 表示点 i 与点 j 相连，求这个图里面连通域的数目。</p><p>输入：A = [[1,0,0],[0,1,0],[0,0,1]]</p><p>输出：3</p><p><strong>解释</strong>：[0, 1, 2] 三个点中，每个点都不与其他点相连，所以连通域有 3 个。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/547.%E7%9C%81%E4%BB%BD%E6%95%B0%E9%87%8F.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/547.%E7%9C%81%E4%BB%BD%E6%95%B0%E9%87%8F.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/547.%E7%9C%81%E4%BB%BD%E6%95%B0%E9%87%8F.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><h4 id="例-3-换工位" tabindex="-1">例 3: 换工位 <a class="header-anchor" href="#例-3-换工位" aria-label="Permalink to &quot;例 3: 换工位&quot;">​</a></h4><p>【<strong>题目</strong>】因为要实施结对编程，想让两个员工的工位挨在一起：要求 [0,1] 员工坐在一起，[2, 3] 员工坐在一起，以此类推。不过挨着具体坐的位置并不重要，只要能挨在一起就可以了。比如 [0, 1, 3, 2] 与 [2, 3, 1, 0] 都是满足要求的。现在给定一个数组 A[]，求换工位的最少次数，尽量让两个员工坐在一起。（给定 N 个员工，他们的编号总是 [0~N-1] ，并且 N 总是偶数）。</p><p>输入：A[] = [0, 3, 2, 1]</p><p>输出：1</p><p><strong>解释</strong>：只需要换 1 次就可以了，比如，将 0 号员工与 2 号员工交换。</p><p>【<strong>分析</strong>】初看这道题的时候，没有什么思路，那么我们进行一下模拟，看看能不能发现什么规律。</p><p><strong>1</strong> . <strong>模拟</strong></p><p>当 N = 2 时，无论是 [0, 1] 还是 [1, 0] 这两种排列都满足要求，因为我们总是想让 [0, 1] 这两个员工坐在一起，而只有两个员工时，他们总是挨在一起的。假设结对成功的两个人坐在一起的时候，就像做在链条上的环一样。</p><p>由于 N 必须为偶数，所以接下来我们看一下 N = 4 时的情况。比如 A = [0, 3, 2, 1]，此时 4 个人都没有结对成功，相当于两个环还扣一起。</p><p>这时我们只需要交换 0, 2 形成 [2,3,0,1]，如果按配对划分，那就是 [2, 3] 和 [0, 1]。结对成功之后，这两个环就可以拆开了。操作如下图所示：</p>`,92),d=s("p",null,"通过这个示例，还可以发现，如果不经过交换，虽然 [3, 2] 这两个员工已经坐在一起了，但是不操作，那么 0 号员工和 1 号员工是无法结对编程的。",-1),u=s("p",null,[n("因此，我们可以得到"),s("strong",null,"结论 1：结对的时候，数组中只能偶数下标与奇数下标配比"),n("。比如 A[0] 与 A[1] 结对。不能奇数下标与偶数下标结对，比如 A[1] 与 A[2] 结对。")],-1),C=s("p",null,"接下来我们再看一下 N = 6 的情况， 比如 A = [0, 2, 3, 5, 1, 4]：我们在执行交换的时候，可以这样操作：",-1),h=s("p",null,"所以成功切分出三个配对集合 [0, 1], [3, 2], [5, 4]，需要 2 步。",-1),B=s("p",null,[s("strong",null,"2"),n(" . "),s("strong",null,"规律")],-1),b=s("p",null,"通过前面的模拟，我们还需要进一步的总结规律。将里面没有成功结对的序列看成一条锁链。并且拆分出结对成功的两个元素，独立位于一个环中，并不与别人相扣在一起。",-1),_=s("p",null,"每 1 次操作，交换两个元素，就相当于从锁链中成功拆一个环下来。",-1),x=s("p",null,[n("那么，我们可以得到"),s("strong",null,"结论 2：有 2x 个元素，也就是 x 个环的锁链，就需要 x-1 次操作"),n("。")],-1),v=s("p",null,"至此，我们就将题目成功变成了：给定一个数组，需要找到里面有几条锁链。比如给定数组 A = [6, 4, 5, 2, 3, 7, 0, 1]。",-1),f=s("p",null,"此时应该可以分出两条锁链来，如下图所示：",-1),m=p("<p>我们再看每个锁链中的环的数目就可以得到最少操作次数。比如这里的 A[] 数组有 2 条锁链，需要的操作次数是 (3 - 1) + (1-1) = 2。也就是最少操作 2 次。</p><p>那么现在问题的关键就是，如何才能通过数组得到锁链呢？这里我们还发现一个有趣的<strong>结论 3：本就结对的两个员工必然在同一个链条中</strong>。比如 6 和 5 在没有结对的情况下，也必然在同一条锁链中。</p><p><strong>3</strong> . <strong>匹配</strong></p><p>如果将锁链当成集合，就可以对应到并查集了。这里再细化一下：</p><ul><li><p>通过结论 3，我们应该将一个偶数 x 以及和它配对的数 x+1 先放到同一个集合中；</p></li><li><p>偶数下标 A[i]，需要与 A[i+1] 进行 Union，完成放到同一个锁链的操作。</p></li></ul><p>虽然最后我们可以通过去数锁链中环的个数，再通过结论 2 得到答案。但是如果你能想到拆环的次数，实际上就是不同集合 Union 的次数。那么求解的时候，只需要在并查集模板的基础上对 Union 稍做更改就可以了。</p><p><strong>4</strong> . <strong>边界</strong></p><p>注意处理空数组，注意结对的时候，要满足结论 1。</p><p>【<strong>画图</strong>】接下来我们画图演示一下使用并查集的过程。这里我们以数组 A = [6, 4, 5, 2, 3, 7, 0, 1] 为例。</p>",9),q=p(`<p>我们发现，不同集合的合并次数一共为 2 次，所以只需要 2 次操作就可以完成结对编程的要求。</p><p>【<strong>代码</strong>】接下来我们可以写一下代码了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> unionCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[n];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意这里在初始化的时候</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// [0, 1]需要处在一个集合里面</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 无论他们在数组里面是不是相邻</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x01</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> y) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    unionCount</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x)] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">minSwapsCouples</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(N);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i], </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> unionCount;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> unionCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n) {</span></span>
<span class="line"><span style="color:#24292E;">  F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[n];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意这里在初始化的时候</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// [0, 1]需要处在一个集合里面</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 无论他们在数组里面是不是相邻</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x01</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> y) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y)) {</span></span>
<span class="line"><span style="color:#24292E;">    unionCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x)] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minSwapsCouples</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(N);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i], </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> unionCount;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/1168.%E5%A4%A7%E6%A5%BC%E9%80%9A%E7%BD%91.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/1168.%E5%A4%A7%E6%A5%BC%E9%80%9A%E7%BD%91.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/1168.%E5%A4%A7%E6%A5%BC%E9%80%9A%E7%BD%91.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：一共有 N/2 对元素要合并，每次合并的时间复杂度为 O(lgN)。所以时间复杂度为 O(NlgN)。</p><p>【<strong>小结</strong>】在这里，我们学习了将锁链处理成一个连通域，并且巧妙地通过求解合并次数解决了最小操作次数。</p><p>我认为这道题目最核心的考点是分析出<strong>结论 2</strong> ：<strong>有 2x 个元素，也就是 x 个环的锁链，就需要 x-1 次操作</strong>。</p><p>一旦得到了每条锁链中的操作次数，然后利用并查集的模板，这道题目就解决了。我再给你留道练习题，希望你可以尝试做一下。</p><p><strong>练习题 4</strong>：给定一个单词数组，如果两个单词相等，或者说其中一个单词 A 经过一次字符交换，可以得到单词 B，那么我们说单词 {A, B} 是同构的。请问单词数组中，一共有多少组这样的同构集合？</p><p>输入：{&quot;AB&quot;, &quot;BA&quot;, &quot;AB&quot;, &quot;BC&quot;, &quot;CD&quot;}</p><p>输出：3</p><p><strong>解释</strong>：一共有三组同构集合，{&quot;AB&quot;, &quot;BA&quot;, &quot;AB&quot;}, {&quot;BC&quot;}, {&quot;CD&quot;}</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/839.%E7%9B%B8%E4%BC%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%84.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/839.%E7%9B%B8%E4%BC%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%84.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/839.%E7%9B%B8%E4%BC%BC%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%84.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>接下来我们讲解并查集的进一步运用。</p><h3 id="虚拟点与虚拟边" tabindex="-1">虚拟点与虚拟边 <a class="header-anchor" href="#虚拟点与虚拟边" aria-label="Permalink to &quot;虚拟点与虚拟边&quot;">​</a></h3><p>在求解连通域的过程中，我们经常利用现有的点与现有的边进行并查集的初始化与合并。</p><p>但是在有些题目中，需要加入一些<strong>虚拟的边和虚拟的点</strong>到并查集的点集与边集中。通过这种方式可以极大地方便我们使用并查集。</p><h4 id="例-4-替换字母" tabindex="-1">例 4: 替换字母 <a class="header-anchor" href="#例-4-替换字母" aria-label="Permalink to &quot;例 4: 替换字母&quot;">​</a></h4><p>【<strong>题目</strong>】给你一个矩阵 A，里面只包含字母 &#39;O&#39; 和 &#39;X&#39;，如果一个 &#39;O&#39; 上下左右四周都被 &#39;X&#39; 包围，那么这个 &#39;O&#39; 会被替换成 &#39;X&#39;。请你写程序处理一下这个过程。</p>`,19),k=p(`<p><strong>解释</strong>：由于中心的 &#39;O&#39; 四周都被包围，所以需要被换成 &#39;X&#39;，而第 A[0][0] = &#39;O&#39; 靠着边，所以不能被替换。</p><p>【<strong>分析</strong> 】这道题目曾经在<strong>微软</strong>的面试中出现过。看起来就是一个连通域的问题，所以可以使用并查集来处理。思路如下：</p><ul><li><p>首先用并查集标记所有 &#39;O&#39; 的连通域；</p></li><li><p>将所有在边上的 &#39;O&#39; 的&quot;帮主&quot;放到 set 集合中；</p></li><li><p>遍历每个 &#39;O&#39; 的&quot;帮主&quot;，看看是不是在 set 集合中，如果在，那么这个 &#39;O&#39; 不能替换。</p></li></ul><p>可以发现，有一步操作可以优化：将所有在边上的 &#39;O&#39; 的&quot;帮主&quot;放到 set 集合中，有两种办法：</p><ul><li><p>随便选择边上的一个点，作为所有边上点的&quot;帮主&quot;；</p></li><li><p>选一个虚拟的点，作为所有边上的点的&quot;帮主&quot;。</p></li></ul><p>你可以根据自己的喜好任选其一，这里我用第 2 种&quot;虚拟点&quot;的办法。下面就可以直接套用模板了。</p><p>【<strong>代码</strong>】采用虚拟点的并查集的代码实现如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[][] dir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">}, {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">}};</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[n];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> y) { </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x)] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y); }</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">solve</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[][] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> R </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> C </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(R </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> C </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 我们将vNode设置为R * C</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这是一个在矩阵中不存在的点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> vNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> R </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> C;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; r </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> R; r</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; c </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> C; c</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[r][c] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;O&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果是边上的点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> R </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> C </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 那么将其与vNode进行Union</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> C </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> c, vNode);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将其与四面的点进行Union</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; d </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; d</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> nr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> dir[d][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> nc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> dir[d][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(nr </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> nr </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> R </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> nc </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> nc </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> C)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[nr][nc] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;O&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> C </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> c, nr </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> C </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> nc);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 查看是不是和vNode一个集合，如果不是就要修改成&#39;X&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; r </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> R; r</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; c </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> C; c</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[r][c] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;O&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> C </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> c) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(vNode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[r][c] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;X&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">}};</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n) {</span></span>
<span class="line"><span style="color:#24292E;">  F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[n];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> y) { </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x)] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y); }</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">solve</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[][] A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> R </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> C </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(R </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> C </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 我们将vNode设置为R * C</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这是一个在矩阵中不存在的点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> vNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> R </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> C;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; r </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> R; r</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; c </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> C; c</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[r][c] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;O&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果是边上的点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (r </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> R </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> C </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 那么将其与vNode进行Union</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> C </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c, vNode);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将其与四面的点进行Union</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; d </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; d</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> dir[d][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> dir[d][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(nr </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> nr </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> R </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> nc </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> nc </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> C)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[nr][nc] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;O&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> C </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c, nr </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> C </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> nc);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 查看是不是和vNode一个集合，如果不是就要修改成&#39;X&#39;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; r </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> R; r</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; c </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> C; c</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[r][c] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;O&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> C </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(vNode)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[r][c] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;X&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/130.%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/130.%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/130.%E8%A2%AB%E5%9B%B4%E7%BB%95%E7%9A%84%E5%8C%BA%E5%9F%9F.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong> ：由于每个点只遍历两遍。<strong>所有点的数目为 N</strong>，所以时间复杂度为 O(NlgN)，此外，每个点都记录了所在集合，所以空间复杂度为 O(N)。</p><p>【<strong>小结</strong>】在这里我们学习了一种新的处理技巧，那就是利用并查集 + 虚拟结点，将原本不在一起的结点，统一放到了一个虚拟集合中。</p><p>所以解决这道题目的考点我们可以总结如下：</p>`,12),T=s("p",null,"在面试中，如果你有了并查集的模板，再加上虚拟点的思路，那么快速解决这类问题就轻而易举了。",-1),U=s("h4",{id:"例-5-上网的最小费用",tabindex:"-1"},[n("例 5：上网的最小费用 "),s("a",{class:"header-anchor",href:"#例-5-上网的最小费用","aria-label":'Permalink to "例 5：上网的最小费用"'},"​")],-1),H=s("p",null,[n("【"),s("strong",null,"题目"),n("】园区里面有很多大楼，编号从 1~N。第 i 大楼可以自己花钱买路由器上网，费用为 cost[i-1]，也可以从别的大楼拉一根网线来上网，比如大楼 a 和大楼 b 之间拉网线的费用为 c，表示为一条边 [a, b, c]。输入为每个大楼自己买路由器和拉网线的费用，请问，让所有大楼都能够上网的最小费用是多少？上网具有联通性，只要与能够上网的大楼连通，即可上网。")],-1),N=s("p",null,"输入：cost = [1, 2, 3], edges = [[1,2,100], [2,3,3]]",-1),S=s("p",null,"输出：6",-1),j=s("p",null,[s("strong",null,"解释"),n("：最优方案是 1 号大楼买路由器 cost[0] = 1，2 号楼买路由器 cost[1] = 2，然后和 3 号楼之间可拉一根网线，费用为 3，所以一共花费 6 元。如图（红色部分标记为费用 ）：")],-1),P=s("p",null,[n("【"),s("strong",null,"分析"),n(" 】这是一道"),s("strong",null,"头条"),n("面试中出现过的题目。首先如果不考虑自己买路由器的情况，只依赖给定的边集构建这个图，且要求最小费用，这道题目就和最小生成树一模一样了。可是，这里与最小生成树不一样的地方在于：第 i 大楼可以自己花钱买路由器上网，费用为 cost[i-1]。")],-1),w=s("p",null,'在最小生成树里面，可是没有说"自己买路由"这个操作。那怎么办？我们有什么方法可以转化一下吗？',-1),O=s("p",null,"可以采用加入虚拟点的方法。首先假设有一个结点 0 已经自己买了路由器，花费为 0 元。而其他结点要自己买路由器，本质等价于与结点 0 进行联通。只不过这个网线的费用，就是你自己买路由器的费用。",-1),V=s("p",null,"比如，给定 3 个点，分别自己买路由器的费用为 [1, 2, 3]。那么我们可以把图变成下图这样子：",-1),I=p(`<p>也就是说，我们添加了一个虚拟结点 0，然后也添加了 3 条虚拟边。这里虚拟的元素我们都用绿色表示。</p><p>如果最后生成的连通图里面把 0~3 这四个点都包含进去，那么所有的大楼肯定都是可以上网的。此时最小代价问题就可以用最小生成树的方法来解决了。</p><p>【<strong>代码</strong>】到这里，相信你已经知道可以怎么写代码了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> totalCost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 注意，编号是从1 ~ n</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[n </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    totalCost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">pay</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      totalCost </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> pay;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(x)] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(y);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// N 表示结点数目</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// cost[i-1]表示结点i自己买路由器的代价</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// es[x] = [a, b, c]表示大楼a,b之间拉网线的费用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 输出所有大楼通网的最小费用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">minCostToSupplyWater</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">N</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">cost</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[][] </span><span style="color:#FFAB70;">es</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化并查集</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(N);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 每个结点都要自己买路由器，那么我们可以认为这样</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 0号楼已经有网络了，可以用0费用上网</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// i号楼与0号楼拉网线，需要的费用是cost[i-1]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 那么这里就多了N条边</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[][] conn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[es.length </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> N][</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> es.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      conn[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> es[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      conn[i][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> es[i][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      conn[i][</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> es[i][</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> to </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> es.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      conn[to][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      conn[to][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">      conn[to][</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cost[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      to</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 接下来采用Krukal最小生成树算法</span></span>
<span class="line"><span style="color:#E1E4E8;">    Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(conn, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Comparator&lt;</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[]&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> conn.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(conn[i][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], conn[i][</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], conn[i][</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> totalCost;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> totalCost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 注意，编号是从1 ~ n</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    totalCost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">pay</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y)) {</span></span>
<span class="line"><span style="color:#24292E;">      totalCost </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> pay;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(x)] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(y);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// N 表示结点数目</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// cost[i-1]表示结点i自己买路由器的代价</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// es[x] = [a, b, c]表示大楼a,b之间拉网线的费用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 输出所有大楼通网的最小费用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minCostToSupplyWater</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">N</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">cost</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] </span><span style="color:#E36209;">es</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化并查集</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(N);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 每个结点都要自己买路由器，那么我们可以认为这样</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 0号楼已经有网络了，可以用0费用上网</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// i号楼与0号楼拉网线，需要的费用是cost[i-1]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 那么这里就多了N条边</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] conn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[es.length </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> N][</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> es.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      conn[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> es[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      conn[i][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> es[i][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      conn[i][</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> es[i][</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> to </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> es.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      conn[to][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      conn[to][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">      conn[to][</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cost[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      to</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接下来采用Krukal最小生成树算法</span></span>
<span class="line"><span style="color:#24292E;">    Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(conn, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[]&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> conn.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(conn[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], conn[i][</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], conn[i][</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> totalCost;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/1168.%E5%A4%A7%E6%A5%BC%E9%80%9A%E7%BD%91.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/1168.%E5%A4%A7%E6%A5%BC%E9%80%9A%E7%BD%91.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/1168.%E5%A4%A7%E6%A5%BC%E9%80%9A%E7%BD%91.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>： 一共有 N 个点，M 条边，N 个点进行 Find/Union 的时间复杂度为 O(lgN)，所以总的时间复杂度为 M(lgN)。</p><p>【<strong>小结</strong>】接下来我们从面试官的角度看一下，这道题的考点是什么：</p><ul><li><p>将特殊条件转化为一般的条件，通过引入一些虚拟点，虚拟边来实现</p></li><li><p>并查集的模板代码</p></li><li><p>最小生成树的 Kruskal 算法</p></li></ul><p>如果在面试中抓住了这 3 个点，就很容易击破这道算法题。接下来我们看一下并查集的另外一个的考点。</p><h3 id="路径压缩-1" tabindex="-1">路径压缩 <a class="header-anchor" href="#路径压缩-1" aria-label="Permalink to &quot;路径压缩&quot;">​</a></h3><p>并查集除了前面提到了考点之外，还有一个比较不容易出现的考点。那就是关于路径压缩的考点。</p><p>处理这种题时，需要利用路径压缩同时将节点之间的信息进行层层压缩和汇总。求解过程还是很有趣的。下面让我们通过一个例题学习一下这个知识点。</p><h4 id="例-6-倍数关系" tabindex="-1">例 6: 倍数关系 <a class="header-anchor" href="#例-6-倍数关系" aria-label="Permalink to &quot;例 6: 倍数关系&quot;">​</a></h4>`,13),R=s("p",null,[n("【"),s("strong",null,"分析"),n("】那么首先我们进行一下模拟。")],-1),K=s("p",null,[s("strong",null,"1"),n(" . "),s("strong",null,"模拟")],-1),M=s("p",null,"变量之间的除法关系，我们需要记录一个链式信息。如果将除法当成一个有向边，然后变量与变量之间的除法就可以看成图结构。比如：",-1),X=s("p",null,"可以表示为下图：",-1),Q=s("p",null,"如果我们将上图进行压缩，那么可以得到下图：",-1),G=s("p",null,"经过压缩之后，可以发现这几个元素之间的关系就变成了下面这个样子：",-1),W=s("ul",null,[s("li",null,[s("p",null,"a = 8 * c")]),s("li",null,[s("p",null,"c = 1 * c")]),s("li",null,[s("p",null,"b = 4 * c")])],-1),Z=s("p",null,"此时，可以得到任意两个变量之间的比值。实际上，这几个数也可以以 a 元素为根，如下图所示：",-1),L=p("<p>几个元素之间的关系就是这样：</p><ul><li><p>b = 0.5 * a</p></li><li><p>a = 1 * a</p></li><li><p>c = 0.125 * a</p></li></ul><p>此时，我们可以得到任意两个变量之间的比值。</p><p><strong>2</strong> . <strong>规律</strong></p><p>在这里，可以通过模拟找到一个<strong>规律：只要是相连通的几个元素，可以选择任意一个结点做根结点。连通性好办，重点是：需要记录元素与根元素的比例</strong>。</p><p>并且我们发现其实哪个点做根结点都一样。但是比例关系怎么办？再回看一下模拟的过程，可以发现：<strong>比例关系就是顺着图中，有向边的方向乘过去即可</strong>。</p><p>这里我们画图表示如下：</p>",7),z=p(`<p>也就是说，在压缩的时候，需要把路径上边的权重依次乘起来。</p><p><strong>3</strong> . <strong>匹配</strong></p><p>通过前面的一番分析，可以发现题目具有两个特点：</p><ul><li><p>连通性</p></li><li><p>路径压缩性</p></li></ul><p>能匹配到这两个特点的算法刚好是今天所讲的并查集。</p><p><strong>4</strong> . <strong>边界</strong></p><p><strong>面试官提醒</strong> ：<strong>由于涉及除法，在面试中，你一定要主动提出是否可能存在除 0 的情况。如果给定的输入里面可能有，那么一定要记得处理</strong>。</p><p>【<strong>代码</strong>】我们已经有了并查集的代码，那么处理路径压缩，应该也不是什么问题，代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 小技巧：</span></span>
<span class="line"><span style="color:#6A737D;">// 记录字符串与整数的映射</span></span>
<span class="line"><span style="color:#6A737D;">// 将字符串映射成整数之后，在操作并查集的数组的时候</span></span>
<span class="line"><span style="color:#6A737D;">// 我们就可以使用整数组，速度也更快。</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addToMap</span><span style="color:#E1E4E8;">(String key, Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> H) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">H.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    H.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(key, id);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 并查集的数组 </span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 结点与其父结点的比例关系，我们总是用子结点除以父结点</span></span>
<span class="line"><span style="color:#6A737D;">// 当 a / c = 8时，并且当前 a的父结点就是c</span></span>
<span class="line"><span style="color:#6A737D;">// 那么 C[a] = 8</span></span>
<span class="line"><span style="color:#6A737D;">// 当并查集的结构调整之后，a的父结点变成了d</span></span>
<span class="line"><span style="color:#6A737D;">// 并且a/d=16，那么此时C[a] = 16</span></span>
<span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[] C </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  F </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[n];</span></span>
<span class="line"><span style="color:#E1E4E8;">  C </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[n];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// base用来保存从x -&gt; .... root</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这条路径上所有的乘积</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最后保证可以得到</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// x = base * root</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (x </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    base </span><span style="color:#F97583;">*=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">    x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这里x就是root</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// base x -&gt; root的映射值</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 把路径上的其他值一并压缩</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[b] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> root) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 修改值上的变化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> base </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">[b];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">[b] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> base;</span></span>
<span class="line"><span style="color:#E1E4E8;">    base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> par </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[b];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[b] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;">    b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> par;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> T, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> D, </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> v) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// T / D = v;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 给定的输入表示 T = v * D;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 那么找到T的root</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> tpar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(T);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// T = C[T] * par</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> dpar </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(D);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// D = C[D] * dpar;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// T = v * D = v * C[D] * dpar = C[T] * tpar;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果我们要让tpar 指向dpar</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// tpar = v * C[D] * dpar / C[T]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">F</span><span style="color:#E1E4E8;">[tpar] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dpar;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">[tpar] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">[D] </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">[T];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">calcEquation</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> equations,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[] values,</span></span>
<span class="line"><span style="color:#E1E4E8;">                       List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> queries) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 为了方便后面操作，我们把所有的字符串都映射成整数</span></span>
<span class="line"><span style="color:#E1E4E8;">  Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; H </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; l </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> equations) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">), d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addToMap</span><span style="color:#E1E4E8;">(t, H);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addToMap</span><span style="color:#E1E4E8;">(d, H);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 初始化并查集</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Init</span><span style="color:#E1E4E8;">(H.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 开始执行Union操作</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> equations.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> equations.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Union</span><span style="color:#E1E4E8;">(H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(l.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)), H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(l.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)), values[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在进行query之前，对所有的点执行Find操作。让后面的query</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 的Find操作时间复杂度为O(1)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[] ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;">[queries.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> queries.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queries.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> tidx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(l.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(l.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> didx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(l.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(l.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果变量不存在，那么比例关系照题意设置为-1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tidx </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> didx </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ans[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> troot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(tidx);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> droot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Find</span><span style="color:#E1E4E8;">(didx);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果两个变量从来没有过交集 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (troot </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> droot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ans[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ans[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">[tidx] </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">C</span><span style="color:#E1E4E8;">[didx];</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 小技巧：</span></span>
<span class="line"><span style="color:#6A737D;">// 记录字符串与整数的映射</span></span>
<span class="line"><span style="color:#6A737D;">// 将字符串映射成整数之后，在操作并查集的数组的时候</span></span>
<span class="line"><span style="color:#6A737D;">// 我们就可以使用整数组，速度也更快。</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addToMap</span><span style="color:#24292E;">(String key, Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> H) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">H.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(key)) {</span></span>
<span class="line"><span style="color:#24292E;">    H.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, id);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 并查集的数组 </span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 结点与其父结点的比例关系，我们总是用子结点除以父结点</span></span>
<span class="line"><span style="color:#6A737D;">// 当 a / c = 8时，并且当前 a的父结点就是c</span></span>
<span class="line"><span style="color:#6A737D;">// 那么 C[a] = 8</span></span>
<span class="line"><span style="color:#6A737D;">// 当并查集的结构调整之后，a的父结点变成了d</span></span>
<span class="line"><span style="color:#6A737D;">// 并且a/d=16，那么此时C[a] = 16</span></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] C </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n) {</span></span>
<span class="line"><span style="color:#24292E;">  F </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[n];</span></span>
<span class="line"><span style="color:#24292E;">  C </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[n];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">C</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// base用来保存从x -&gt; .... root</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这条路径上所有的乘积</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 最后保证可以得到</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// x = base * root</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x]) {</span></span>
<span class="line"><span style="color:#24292E;">    base </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">C</span><span style="color:#24292E;">[x];</span></span>
<span class="line"><span style="color:#24292E;">    x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[x];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这里x就是root</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// base x -&gt; root的映射值</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 把路径上的其他值一并压缩</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[b] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> root) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 修改值上的变化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> base </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">C</span><span style="color:#24292E;">[b];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">C</span><span style="color:#24292E;">[b] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> base;</span></span>
<span class="line"><span style="color:#24292E;">    base </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> par </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[b];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[b] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">    b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> par;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> T, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> D, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> v) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// T / D = v;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 给定的输入表示 T = v * D;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 那么找到T的root</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> tpar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(T);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// T = C[T] * par</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> dpar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(D);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// D = C[D] * dpar;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// T = v * D = v * C[D] * dpar = C[T] * tpar;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果我们要让tpar 指向dpar</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// tpar = v * C[D] * dpar / C[T]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">F</span><span style="color:#24292E;">[tpar] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dpar;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">C</span><span style="color:#24292E;">[tpar] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">C</span><span style="color:#24292E;">[D] </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">C</span><span style="color:#24292E;">[T];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">calcEquation</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> equations,</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] values,</span></span>
<span class="line"><span style="color:#24292E;">                       List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> queries) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 为了方便后面操作，我们把所有的字符串都映射成整数</span></span>
<span class="line"><span style="color:#24292E;">  Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; H </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; l </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> equations) {</span></span>
<span class="line"><span style="color:#24292E;">    String t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">), d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addToMap</span><span style="color:#24292E;">(t, H);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addToMap</span><span style="color:#24292E;">(d, H);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 初始化并查集</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Init</span><span style="color:#24292E;">(H.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 开始执行Union操作</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> equations.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> equations.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Union</span><span style="color:#24292E;">(H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(l.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)), H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(l.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)), values[i]);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在进行query之前，对所有的点执行Find操作。让后面的query</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 的Find操作时间复杂度为O(1)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[queries.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> queries.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queries.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> tidx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(l.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(l.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> didx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(l.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(l.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果变量不存在，那么比例关系照题意设置为-1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tidx </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> didx </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      ans[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> troot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(tidx);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> droot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Find</span><span style="color:#24292E;">(didx);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果两个变量从来没有过交集 </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (troot </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> droot) {</span></span>
<span class="line"><span style="color:#24292E;">        ans[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ans[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">C</span><span style="color:#24292E;">[tidx] </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">C</span><span style="color:#24292E;">[didx];</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/399.%E9%99%A4%E6%B3%95%E6%B1%82%E5%80%BC.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/399.%E9%99%A4%E6%B3%95%E6%B1%82%E5%80%BC.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/07.UF/399.%E9%99%A4%E6%B3%95%E6%B1%82%E5%80%BC.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：假设有 N 个变量，构建并查集的时间复杂度为 O (NlgN)，如果有 M 个 Query，每次在询问为 O(1)，所以总的时间复杂度为 max(O(NlgN),M)。</p><p>【<strong>小结</strong>】如果要解决这道题，那么需要注意掌握以下三点。</p><ul><li><p>连通域里面的所有变量都统一用一个变量表示倍数关系，那么任意的两个变量就可以直接询问倍数关系。</p></li><li><p>倍数关系具有传递性，即：</p></li></ul>`,13),J=s("p",null,"这是我们进行路径压缩的关键。",-1),Y=s("ul",null,[s("li",null,"Union 操作时，注意变量倍数关系的调整。")],-1),$=s("p",null,[n("如果想到了这些，再加上我介绍的并查集的代码模板，那么解决这道面试题也就没什么难度了。以后在面试中，你如果发现题目具有"),s("strong",null,"传递性"),n("的特点，就可以使用并查集进行求解。")],-1),ss=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),ns=s("p",null,"在本讲中，我介绍了并查集面试时常见的考察点，并且给出了并查集的代码模板。最后我还给你准备了并查集的知识树，面试中并查集相关的问题基本上逃不出这个圈。希望你可以尝试自己对本讲的内容进行梳理，然后再对照下图查缺补漏。",-1),as=s("h3",{id:"思考题",tabindex:"-1"},[n("思考题 "),s("a",{class:"header-anchor",href:"#思考题","aria-label":'Permalink to "思考题"'},"​")],-1),ls=s("p",null,"如果我们把例 5 的变量看成图上的点，变量与变量之间的关系看成是边。一旦构建好了并查集，在 Query 的时候，就可以 O(1) 的时间查询到两个变量之间的代价。那么为什么在图算法中，我们需要用 Floyd 算法求解图中两个点之间的最短路径？",-1),ps=s("p",null,"希望你可以把思考写在留言区，我们一起讨论，如果看到有趣的想法，我也会做成加餐和大家分享。：）",-1),os=s("p",null,"到这里，我们就要与并查集说再见了，接下来我们一起学习 08｜排序：如何利用合并与快排的小技巧，解决算法难题。记得按时来探险。",-1);function es(ts,cs,rs,Es,ys,is){const a=e("Image");return t(),c("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/21/80/Cgp9HWBUZN2AGezPAABjCi7FK4I525.png"}),n(),y,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/21/7D/CioPOWBUZOaADgCUAABGlTOU4Ak099.png"}),n(),i,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/21/80/Cgp9HWBUZO6APF37AABG3_a_Q6c057.png"}),n(),F,l(a,{alt:"1 (1).gif",src:"https://s0.lgstatic.com/i/image6/M01/21/7D/CioPOWBUZQSANG0HAAUZirp5p1k748.gif"}),n(),A,l(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image6/M00/23/F4/CioPOWBX_4mAPpHfAABECA7Vc3g627.png"}),n(),D,l(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M01/21/7E/CioPOWBUZgaAOFDCAABeZqcuW0s773.png"}),n(),g,l(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/21/7E/CioPOWBUZpeADOaKAADoS6Y44b0977.png"}),n(),d,l(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M01/21/81/Cgp9HWBUZqCAfrFNAACU4aaiqjc231.png"}),n(),u,C,l(a,{alt:"2 (1).gif",src:"https://s0.lgstatic.com/i/image6/M01/21/7E/CioPOWBUZqqADNgZAAU5MW4PWoI242.gif"}),n(),h,B,b,l(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M01/21/81/Cgp9HWBUZrSALzFBAADhm_fwnRk393.png"}),n(),_,l(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image6/M01/21/7E/CioPOWBUZryASSNEAAEb64nhdKE214.png"}),n(),x,v,f,l(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image6/M01/21/7E/CioPOWBUZsWAPW0xAADZQU20JEU856.png"}),n(),m,l(a,{alt:"3.gif",src:"https://s0.lgstatic.com/i/image6/M01/21/81/Cgp9HWBUZteAaZlrABz3L57gQK4855.gif"}),n(),q,l(a,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image6/M01/21/7E/CioPOWBUZumAF_CYAAA1NGN0dU0625.png"}),n(),k,l(a,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image6/M01/21/81/Cgp9HWBUZvmACQxmAAC2H_g_eZk099.png"}),n(),T,U,H,N,S,j,l(a,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image6/M01/21/81/Cgp9HWBUZwOAOXuWAABVP6uBCvA003.png"}),n(),P,w,O,V,l(a,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image6/M00/21/7E/CioPOWBUZwyAA5MpAABxWS4ICiA231.png"}),n(),I,l(a,{alt:"Drawing 26.png",src:"https://s0.lgstatic.com/i/image6/M00/21/7E/CioPOWBUZx2AJlAhAAB9L5EmBj8559.png"}),n(),R,K,M,l(a,{alt:"Drawing 30.png",src:"https://s0.lgstatic.com/i/image6/M00/21/82/Cgp9HWBUZziAOXBLAAAF8Wyu_as055.png"}),n(),X,l(a,{alt:"Drawing 31.png",src:"https://s0.lgstatic.com/i/image6/M00/21/7E/CioPOWBUZ0OAaHLpAABvAPNQMEI372.png"}),n(),Q,l(a,{alt:"Drawing 32.png",src:"https://s0.lgstatic.com/i/image6/M00/21/7E/CioPOWBUZ02AEcbFAABhq26WhTE347.png"}),n(),G,W,Z,l(a,{alt:"Drawing 33.png",src:"https://s0.lgstatic.com/i/image6/M00/21/82/Cgp9HWBUZ1qASIekAAC-iYLl5-E217.png"}),n(),L,l(a,{alt:"Drawing 34.png",src:"https://s0.lgstatic.com/i/image6/M00/21/82/Cgp9HWBUZ2WAYuNmAADbi_WkYTo775.png"}),n(),z,l(a,{alt:"图片",src:"https://uploader.shimo.im/f/LbdIya2siEFX52pW.png!thumbnail?fileGuid=xxQTRXtVcqtHK6j8"}),n(),J,Y,$,ss,ns,l(a,{alt:"Drawing 38.png",src:"https://s0.lgstatic.com/i/image6/M00/21/82/Cgp9HWBUZ5KACZb3AAEzzay3PAM503.png"}),n(),as,ls,ps,os])}const Ds=o(r,[["render",es]]);export{As as __pageData,Ds as default};
