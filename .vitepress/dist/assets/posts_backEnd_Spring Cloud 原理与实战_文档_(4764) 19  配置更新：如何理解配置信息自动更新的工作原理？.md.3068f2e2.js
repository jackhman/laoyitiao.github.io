import{_ as o,j as e,o as t,h as r,k as p,f as n,Q as l,s}from"./chunks/framework.d3daa342.js";const m=JSON.parse('{"title":"19配置更新：如何理解配置信息自动更新的工作原理？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4764) 19  配置更新：如何理解配置信息自动更新的工作原理？.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4764) 19  配置更新：如何理解配置信息自动更新的工作原理？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4764) 19  配置更新：如何理解配置信息自动更新的工作原理？.md"},E=l(`<h1 id="_19配置更新-如何理解配置信息自动更新的工作原理" tabindex="-1">19配置更新：如何理解配置信息自动更新的工作原理？ <a class="header-anchor" href="#_19配置更新-如何理解配置信息自动更新的工作原理" aria-label="Permalink to &quot;19配置更新：如何理解配置信息自动更新的工作原理？&quot;">​</a></h1><p>在理解了 Spring Cloud Config 客户端与服务器端的交互流程之后，我们还剩下一个核心问题：一旦服务器端的配置信息发生变化，客户端如何进行及时更新？</p><p>我们知道 Zookeeper 实现分布式配置中心的方法就是在客户端与 Zookeeper 之间建立长连接，然后合理利用 Zookeeper 的临时节点和监听器机制。而 Spring Cloud Config 客户端与服务器端采用的是基于 HTTP 协议的 RESTful API，本质上是一种短连接技术，也就无法通过类似监听器的方案实现配置信息的自动获取和更新。但是 Spring Cloud Config 也没有采用像 Eureka 中纯粹轮询的方式获取增量数据，而是提供了一套完全不同的解决方案。今天我们就来深入分析这套解决方案，Spring Cloud Config 在这点上的设计和实现方法同样值得我们学习并加以应用。</p><h3 id="spring-cloud-config-客户端更新策略" tabindex="-1">Spring Cloud Config 客户端更新策略 <a class="header-anchor" href="#spring-cloud-config-客户端更新策略" aria-label="Permalink to &quot;Spring Cloud Config 客户端更新策略&quot;">​</a></h3><p>通过上一课时内容的介绍，我们知道在 Spring Cloud Config 客户端启动时，会发送 HTTP 请求到服务器端获取配置信息。而在 Git 等配置仓库中更改了配置信息之后，客户端不会主动再次请求最新配置，而是使用缓存到本地的原有配置信息。那么问题就来了，如何能够实时获取更改后的配置呢？</p><p>针对这个问题，我们有如下三种处理方法：</p><ul><li><strong>重启客户端。</strong></li></ul><p>因为客户端在启动时会重新获取服务器端配置，所以重启客户端能实现配置信息的及时更新，但显然这不是一种合理的方法。</p><ul><li><strong>使用 Spring Boot Actuator。</strong></li></ul><p>Spring Boot 提供了一个专门的组件用来监测和管理系统运行时状态，这个组件就是 Spring Boot Actuator。Actuator 是一种集成化组件，可以获取应用系统的运行时数据和配置信息，并进行统计分析。</p><p>当在代码类路径中引入 spring-boot-starter-actuator 依赖并启动 Spring Boot 应用程序时，我们会在启动日志里发现自动添加了 autoconfig、dump、beans、actuator、health、refresh 等众多 HTTP 端点。通过调用 /actuator/refresh 端点就可以刷新客户端的配置信息，从而实现不重启 Spring Boot 应用的配置热更新。从实现原理上，这个操作实际上就是使用了一个 ContextRefresher 工具类完成了刷新操作，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Endpoint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;refresh&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RefreshEndpoint</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ContextRefresher contextRefresher;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RefreshEndpoint</span><span style="color:#E1E4E8;">(ContextRefresher </span><span style="color:#FFAB70;">contextRefresher</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contextRefresher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contextRefresher;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">WriteOperation</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contextRefresher.</span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> keys;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Endpoint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;refresh&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RefreshEndpoint</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ContextRefresher contextRefresher;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RefreshEndpoint</span><span style="color:#24292E;">(ContextRefresher </span><span style="color:#E36209;">contextRefresher</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.contextRefresher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contextRefresher;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">WriteOperation</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Collection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contextRefresher.</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> keys;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是一种简单有效的处理方式，但也不是最好的处理方式。因为针对每个微服务一般都会存在多个运行时实例，这样就需要把客户端的 /actuator/refresh 端点逐个进行调用，这点显然也不是很合理。而且，这种方案属于客户端自身行为，与配置服务端没有关系。</p><ul><li><strong>集成 Spring Cloud Bus。</strong></li></ul><p>Spring Cloud Config 提供的是第三种方法，即集成 Spring Cloud Bus 组件。Spring Cloud Bus 是 Spring Cloud 中用于实现消息总线的专用组件，集成了 RabbitMQ、Kafka 等主流消息中间件。Spring Cloud Bus 不是本课程的重点，而关于消息通信相关的内容我们会放在下一个主题中进行详细阐述，这里只需要知道 Spring Cloud Config 集成 Spring Cloud Bus 的目的就是想借助于它的消息通信能力。</p><p>当我们在 Spring Cloud Config 服务器端工程的类路径中添加 Spring Cloud Bus 的引用并启动应用程序之后，Spring Boot Actuator 就为我们提供了 /actuator/bus-refresh 端点，通过访问该端点就可以达到对客户端所有服务实例的配置进行自动更新的效果。在这种方案中，服务端会主动通知所有客户端进行配置信息的更新，这样我们就不需要关注各个客户端，而只对服务端进行操作即可。</p><p>是不是听起来有点神奇？整个过程我们至少要搞清楚以下三大问题：</p>`,17),y=s("p",null,"配置信息自动更新的三大问题",-1),i=s("p",null,"针对这三个问题，接下去我们将结合源码逐一展开讨论。",-1),F=s("h3",{id:"问题一-如何自动调用服务器端所暴露的-actuator-bus-refresh-端点",tabindex:"-1"},[n("问题一：如何自动调用服务器端所暴露的 /actuator/bus-refresh 端点？ "),s("a",{class:"header-anchor",href:"#问题一-如何自动调用服务器端所暴露的-actuator-bus-refresh-端点","aria-label":'Permalink to "问题一：如何自动调用服务器端所暴露的 /actuator/bus-refresh 端点？"'},"​")],-1),u=s("p",null,"在现代软件开发过程中，开放式平台是一种常见的软件服务形态。我们可以把 Spring Cloud Config Server 所提供的 HTTP 端点视为一种开放式的接口，以供 Git 等第三方工具进行访问和集成。",-1),g=s("p",null,"正如前面提到的，可以把服务器端 /actuator/bus-refresh 端点对外进行暴露。第三方工具可以通过这个暴露的端点进行集成。例如，在 Git 中设计了一种 Webhook 的机制，并提供了用户界面供我们配置所需要集成的端点以及对应的操作，操作方法如下图所示：",-1),d=s("p",null,"GitHub 的 Webhook 配置界面（来自 GitHub 官网）",-1),C=s("p",null,"我们可以在上图的 Payload URL 中设置 /actuator/bus-refresh 端点地址。所谓的 Webhook，实际上就是一种回调。通过 Webhook，当我们提交代码时，Git 就会自动调用所配置的 HTTP 端点。也就是说，可以根据配置项信息的更新情况自动实现对 /actuator/bus-refresh 端点的访问。基于 GitHub 的配置仓库实现方案，我们可以得到如下所示的系统结构图：",-1),h=l(`<p>GitHub Webhook 机制执行效果图</p><p>现在，配置信息一旦有更新，Spring Cloud Config Server 就能从 Github 中获取最新的配置信息了。接下来我们关注第二个问题，即客户端如何得知服务器端的配置信息已经更新？</p><h3 id="问题二-客户端如何得知服务器端的配置信息已经更新" tabindex="-1">问题二：客户端如何得知服务器端的配置信息已经更新？ <a class="header-anchor" href="#问题二-客户端如何得知服务器端的配置信息已经更新" aria-label="Permalink to &quot;问题二：客户端如何得知服务器端的配置信息已经更新？&quot;">​</a></h3><p>我们首先需要明确调用 /actuator/bus-refresh 端点之后，系统内部会发生什么事情。这里我们需要快速浏览 Spring Cloud Bus 中的代码工程，发现在 org.springframework.cloud.bus.endpoint 包下存在一个 RefreshBusEndpoint 端点类，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Endpoint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bus-refresh&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RefreshBusEndpoint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractBusEndpoint</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RefreshBusEndpoint</span><span style="color:#E1E4E8;">(ApplicationEventPublisher </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(context, id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">WriteOperation</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">busRefreshWithDestination</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Selector</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">destination</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">publish</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RefreshRemoteApplicationEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getInstanceId</span><span style="color:#E1E4E8;">(), destination));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">WriteOperation</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">busRefresh</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">publish</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RefreshRemoteApplicationEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getInstanceId</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Endpoint</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bus-refresh&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RefreshBusEndpoint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractBusEndpoint</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RefreshBusEndpoint</span><span style="color:#24292E;">(ApplicationEventPublisher </span><span style="color:#E36209;">context</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(context, id);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">WriteOperation</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">busRefreshWithDestination</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Selector</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">destination</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">publish</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RefreshRemoteApplicationEvent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">getInstanceId</span><span style="color:#24292E;">(), destination));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">WriteOperation</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">busRefresh</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">publish</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RefreshRemoteApplicationEvent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">getInstanceId</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>显然，RefreshBusEndpoint 类对应于我们前面访问的 /bus-refresh 端点。可以看到，Spring Cloud Bus 在这里做的事情仅仅只是发布了一个新的 RefreshRemoteApplicationEvent 事件。</p><p>既然发送了事件，我们就需要寻找该事件的监听者。我们在 Spring Cloud Bus 的 org.springframework.cloud.bus.event 包下找到了 RefreshRemoteApplicationEvent 事件的监听者 RefreshListener，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RefreshListener</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ApplicationListener</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">RefreshRemoteApplicationEvent</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Log log </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LogFactory.</span><span style="color:#B392F0;">getLog</span><span style="color:#E1E4E8;">(RefreshListener.class);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ContextRefresher contextRefresher;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RefreshListener</span><span style="color:#E1E4E8;">(ContextRefresher </span><span style="color:#FFAB70;">contextRefresher</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contextRefresher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contextRefresher;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onApplicationEvent</span><span style="color:#E1E4E8;">(RefreshRemoteApplicationEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> contextRefresher.</span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Received remote refresh request. Keys refreshed &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> keys);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RefreshListener</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApplicationListener</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">RefreshRemoteApplicationEvent</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Log log </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LogFactory.</span><span style="color:#6F42C1;">getLog</span><span style="color:#24292E;">(RefreshListener.class);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ContextRefresher contextRefresher;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RefreshListener</span><span style="color:#24292E;">(ContextRefresher </span><span style="color:#E36209;">contextRefresher</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.contextRefresher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contextRefresher;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onApplicationEvent</span><span style="color:#24292E;">(RefreshRemoteApplicationEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> contextRefresher.</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Received remote refresh request. Keys refreshed &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> keys);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从类的定义中，我们可以看到该监听器就是用来处理 RefreshRemoteApplicationEvent 事件，其中在 onApplicationEvent 函数中同样也是调用了前面介绍的 ContextRefresher 中的 refresh()方法进行配置属性的刷新。</p><p>请注意，RefreshRemoteApplicationEvent 是一个远程事件，将通过消息中间件进行发送，并被 Spring Cloud Config 客户端所监听，处理流程如下图所示：</p>`,10),f=l(`<p>基于 Spring Cloud Bus 的事件传播机制</p><p>最后需要明确的第三个问题是，客户端如何获取服务器端所更新的配置信息，这就需要梳理 Spring Cloud Config Server 与注册中心 Eureka 之间的关系。</p><h3 id="问题三-客户端如何实时获取服务器端所更新的配置信息" tabindex="-1">问题三：客户端如何实时获取服务器端所更新的配置信息？ <a class="header-anchor" href="#问题三-客户端如何实时获取服务器端所更新的配置信息" aria-label="Permalink to &quot;问题三：客户端如何实时获取服务器端所更新的配置信息？&quot;">​</a></h3><p>我们在分析配置中心的基本模型时提到，配置中心作为整个微服务架构运行所需的基础服务，需要确保其可用性。Spring Cloud Config 实现高可用的方式很简单，因为配置服务本身也是一个独立的微服务，与其他微服务一样，也可以注册到 Eureka 服务器上，让其他服务提供者或消费者通过注册中心进行服务发现和获取。</p><p>显然，在这种方式下，基于 Eureka 的服务治理机制同时提供了服务器端的负载均衡和客户端的配置功能，从而也就间接实现了高可用性。从另一个角度，我们也可以理解为可以通过 Eureka 获取所有 Spring Cloud Config 服务的实例，从而在分布式环境下为获取配置信息提供了一种简便的手段。</p><p>Spring Cloud Config 提供一个工具类 ConfigServerInstanceProvider 来完成与 Eureka 之间的交互，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigServerInstanceProvider</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Log logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LogFactory.</span><span style="color:#B392F0;">getLog</span><span style="color:#E1E4E8;">(ConfigServerInstanceProvider.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DiscoveryClient client;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigServerInstanceProvider</span><span style="color:#E1E4E8;">(DiscoveryClient </span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Retryable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">interceptor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;configServerRetryInterceptor&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getConfigServerInstances</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">serviceId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Locating configserver (&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> serviceId </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;) via discovery&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; instances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.client.</span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(serviceId);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (instances.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalStateException</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&quot;No instances found of configserver (&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> serviceId </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Located configserver (&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> serviceId</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;) via discovery. No of instances found: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> instances.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> instances;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigServerInstanceProvider</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Log logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LogFactory.</span><span style="color:#6F42C1;">getLog</span><span style="color:#24292E;">(ConfigServerInstanceProvider.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DiscoveryClient client;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigServerInstanceProvider</span><span style="color:#24292E;">(DiscoveryClient </span><span style="color:#E36209;">client</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Retryable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">interceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;configServerRetryInterceptor&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getConfigServerInstances</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">serviceId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Locating configserver (&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> serviceId </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;) via discovery&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; instances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.client.</span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(serviceId);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (instances.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;No instances found of configserver (&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> serviceId </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Located configserver (&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> serviceId</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;) via discovery. No of instances found: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> instances.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> instances;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这里，我们看到了熟悉的 DiscoveryClient，DiscoveryClient 通过同样熟悉的 getInstances() 方法从 Eureka 中获取 Spring Cloud Config 服务器实例，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; instances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.client.</span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(serviceId);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; instances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.client.</span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(serviceId);</span></span></code></pre></div><p>ConfigServerInstanceProvider 的调用者是 DiscoveryClientConfigServiceBootstrapConfiguration。如果系统中生成了 ContextRefreshedEvent 事件就会触发 startup() 方法，而该方法则直接调用了如下所示的 refresh() 方法（部分代码做了裁剪）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">refresh</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String serviceId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.config.</span><span style="color:#B392F0;">getDiscovery</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getServiceId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; listOfUrls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">ServiceInstance</span><span style="color:#E1E4E8;">&gt; serviceInstances </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.instanceProvider</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">getConfigServerInstances</span><span style="color:#E1E4E8;">(serviceId);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> serviceInstances.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                ServiceInstance server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstances.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">                String url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getHomePage</span><span style="color:#E1E4E8;">(server);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (server.</span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.config.</span><span style="color:#B392F0;">setUsername</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.config.</span><span style="color:#B392F0;">setPassword</span><span style="color:#E1E4E8;">(password);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (server.</span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;configPath&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">getMetadata</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;configPath&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (url.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, url.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                listOfUrls.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] uri </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[listOfUrls.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()];</span></span>
<span class="line"><span style="color:#E1E4E8;">            uri </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> listOfUrls.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(uri);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.config.</span><span style="color:#B392F0;">setUri</span><span style="color:#E1E4E8;">(uri);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            String serviceId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.config.</span><span style="color:#6F42C1;">getDiscovery</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getServiceId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; listOfUrls </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">ServiceInstance</span><span style="color:#24292E;">&gt; serviceInstances </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.instanceProvider</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">getConfigServerInstances</span><span style="color:#24292E;">(serviceId);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> serviceInstances.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                ServiceInstance server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstances.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">                String url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHomePage</span><span style="color:#24292E;">(server);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (server.</span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                    String user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.config.</span><span style="color:#6F42C1;">setUsername</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">                    String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.config.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(password);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (server.</span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;configPath&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                    String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">getMetadata</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;configPath&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (url.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                        url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, url.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                listOfUrls.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] uri </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[listOfUrls.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">            uri </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> listOfUrls.</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">(uri);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.config.</span><span style="color:#6F42C1;">setUri</span><span style="color:#24292E;">(uri);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述 refresh() 方法中可以看到，系统首先会获取配置文件中配置项 spring.cloud.config.discovery.serviceId 所指定的服务实例 Id，然后根据 serviceId 从 ConfigServerInstanceProvider 中获取注册服务的实例对象集合 serviceInstances，最后循环遍历 serviceInstances 来更新存储在内存中的配置属性值。</p><p>我们知道这些属性值都保存在 ConfigClientProperties 对象中，而在《配置服务：如何基于 Spring Cloud Config 构建配置中心服务器？》课时所介绍的 ConfigServicePropertySourceLocator 类中，通过分析 getRemoteEnvironment 方法，发现正是通过 ConfigClientProperties 对象中的这些属性值来对 Spring Cloud Config Server 进行远程调用。这样我们就可以把整个流程串联起来了。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本课程讲解的是基于 Spring Cloud Config 实现配置信息自动更新的工作原理。我们抛出了三个与这个主题相关的核心问题，然后基于源码对这些问问都做了一一解答。事实上，Spring Cloud Config 作为 Spring 自研的配置中心框架，其内部大量使用了 Spring 现有的功能特性，这点与我们学习 Netflix 旗下的 Eureka、Zuul 等框架不同。我们需要首先对 Spring 容器相关的知识体系有足够的了解，才能更好地理解 Spring Cloud Config 的设计和实现方式。</p>`,15),v=s("p",null,"这里给你留一道思考题：在 Spring Cloud Config 中，当位于配置服务器中的配置信息发生变更时，如何让各个客户端保持同步更新呢？",-1),A=s("p",null,'我们在讨论配置中心时提到了可以基于事件发送和消费机制来实现配置信息的动态更新。而事件的发送和消费往往需要依赖于消息通信机制以及主流的一些消息中间件，从下课时开始，我们将进入"消息通信"这个主题，来学习 Spring Cloud 中提供的 Spring Cloud Stream 组件。',-1);function B(S,D,b,_,R,q){const a=e("Image");return t(),r("div",null,[E,p(a,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/71/02/CgqCHl-8tdaARDnSAAILdvIy2rY358.png"}),n(),y,i,F,u,g,p(a,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/71/02/CgqCHl-8tgeAQinZAAIZRVRUJlg664.png"}),n(),d,C,p(a,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image/M00/70/F7/Ciqc1F-8thCAZH8zAAJ1ROnnAWA097.png"}),n(),h,p(a,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image/M00/70/F7/Ciqc1F-8th6AZ2x1AAHYWGinWKg842.png"}),n(),f,p(a,{alt:"Spring Cloud 19金句.png",src:"https://s0.lgstatic.com/i/image/M00/70/F6/Ciqc1F-8tfWAMyg1AAVRdOi-aI0550.png"}),n(),v,A])}const k=o(c,[["render",B]]);export{m as __pageData,k as default};
