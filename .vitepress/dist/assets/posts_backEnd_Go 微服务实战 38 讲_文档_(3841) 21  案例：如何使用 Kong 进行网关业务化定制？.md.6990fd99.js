import{_ as l,j as t,o as e,g as c,k as o,h as s,Q as p,s as n}from"./chunks/framework.e0c66c3f.js";const j=JSON.parse('{"title":"为什么使用 Kong ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3841) 21  案例：如何使用 Kong 进行网关业务化定制？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3841) 21  案例：如何使用 Kong 进行网关业务化定制？.md","lastUpdated":1696338709000}'),r={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3841) 21  案例：如何使用 Kong 进行网关业务化定制？.md"},y=p('<p>在上一课时中，我们对比了几款市面上流行的微服务网关，那么本课时我们就基于其中一款，也就是 Kong 来重点介绍微服务网关是如何搭建和实现的。</p><h3 id="为什么使用-kong" tabindex="-1">为什么使用 Kong <a class="header-anchor" href="#为什么使用-kong" aria-label="Permalink to &quot;为什么使用 Kong&quot;">​</a></h3><p>当我们对原有业务系统进行微服务改造时，客户端（包括移动端和 Web 端等）如何与各个微服务进行交互这个问题需要我们认真考虑，服务数量的增加会导致一些基础功能的实现变得困难，如认证授权、负载均衡和服务间通信管理。</p><p>但微服务网关所提供的访问限制、安全、流量控制、分析监控、日志、请求转发、合成和协议转换功能，可以使得开发者更加集中精力在各个业务服务的实现上，从而避免将大量时间花在考虑如何解决这些问题上。</p><p>在业内流行的微服务网关组件中，基于 Nginx 的<strong>Kong</strong> 表现突出。<strong>Kong 是 Mashape 开源的高性能、高可用 API 网关</strong>，也可以认为是 API 服务管理层。它可以通过插件扩展已有功能，这些插件（使用 Lua 编写）在 API 请求响应循环的生命周期中被执行。除此之外，Kong 本身还提供了包括 HTTP 基本认证、密钥认证、CORS、TCP、UDP、文件日志、API 请求限流、请求转发及 Nginx 监控等基本功能。</p><p>在用 Kong 进行实践之前，我们得先介绍一些 Kong 中常用的术语，因为这些术语在实践中会经常用得到。</p><ul><li><p><strong>Route</strong>：请求的转发规则，按照 Hostname 和 PATH，将请求转发给 Service。</p></li><li><p><strong>Services</strong>：多个 Upstream 的集合，是 Route 的转发目标。</p></li><li><p><strong>Consumer</strong>：API 的用户，记录用户信息。</p></li><li><p><strong>Plugin</strong>：插件，可以是全局的，也可以绑定到 Service、Router 或者 Consumer。</p></li><li><p><strong>Certificate</strong>：HTTPS 配置的证书。</p></li><li><p><strong>SNI</strong>：域名与 Certificate 的绑定，指定了一个域名对应的 HTTPS 证书。</p></li><li><p><strong>Upstream</strong>：上游对象用来表示虚拟主机名，拥有多个服务（目标）时，会对请求进行负载均衡。</p></li><li><p><strong>Target</strong>：最终处理请求的 Backend 服务。</p></li></ul><h3 id="安装实践" tabindex="-1">安装实践 <a class="header-anchor" href="#安装实践" aria-label="Permalink to &quot;安装实践&quot;">​</a></h3><p>Kong 支持多种安装方式，目前最新版本是 Kong 2.1，官方支持包括 Docker、K8s 等方式的安装：</p>',9),E=p(`<p>Kong 的多种安装方式</p><p>除了官方提供的安装方式，还有社区提供的安装方式：Microsoft Azure、Kongverge 等，详细情况你可参见该网址：<a href="https://konghq.com/install/" target="_blank" rel="noreferrer">https://konghq.com/install/</a> 。</p><p>为了方便，这里我们就选择基于 Docker 的方式安装，选择的 Kong 版本为 1.1.2。docker-compose.yml 中定义的镜像、依赖和参数如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;3.7&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">services</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  kong</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    image</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> kong</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">    environment</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;KONG_DATABASE=postgres&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;KONG_PG_HOST=kong-database&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ports</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8000</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8000</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8443</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8443</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8001</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8001</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8444</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8444</span></span>
<span class="line"><span style="color:#E1E4E8;">    networks</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> kong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">net</span></span>
<span class="line"><span style="color:#E1E4E8;">    depends_on</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> kong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span></span>
<span class="line"><span style="color:#E1E4E8;">  konga</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    image</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pantsel</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">konga</span></span>
<span class="line"><span style="color:#E1E4E8;">    environment</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;TOKEN_SECRET=blueskykong.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;NODE_ENV=production&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ports</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8080</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1337</span></span>
<span class="line"><span style="color:#E1E4E8;">    networks</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> kong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">net</span></span>
<span class="line"><span style="color:#E1E4E8;">    depends_on</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> kong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span></span>
<span class="line"><span style="color:#E1E4E8;">  kong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">database</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    image</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> postgres</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">9.6</span></span>
<span class="line"><span style="color:#E1E4E8;">    ports</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;5432:5432&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    environment</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> POSTGRES_USER</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">kong</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> POSTGRES_DB</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">kong</span></span>
<span class="line"><span style="color:#E1E4E8;">    networks</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> kong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">net</span></span>
<span class="line"><span style="color:#E1E4E8;">    volumes</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">localtime</span><span style="color:#F97583;">:/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">localtime</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">ro</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">data</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">postgresql</span><span style="color:#F97583;">:/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">postgresql</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">networks</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  kong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">net</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    external</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">version</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;3.7&quot;</span></span>
<span class="line"><span style="color:#24292E;">services</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  kong</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    image</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> kong</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span></span>
<span class="line"><span style="color:#24292E;">    environment</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;KONG_DATABASE=postgres&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;KONG_PG_HOST=kong-database&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ports</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8000</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8000</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8443</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8443</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8001</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8001</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8444</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8444</span></span>
<span class="line"><span style="color:#24292E;">    networks</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> kong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">net</span></span>
<span class="line"><span style="color:#24292E;">    depends_on</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> kong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span></span>
<span class="line"><span style="color:#24292E;">  konga</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    image</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pantsel</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">konga</span></span>
<span class="line"><span style="color:#24292E;">    environment</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;TOKEN_SECRET=blueskykong.com&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;NODE_ENV=production&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ports</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8080</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1337</span></span>
<span class="line"><span style="color:#24292E;">    networks</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> kong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">net</span></span>
<span class="line"><span style="color:#24292E;">    depends_on</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> kong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span></span>
<span class="line"><span style="color:#24292E;">  kong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">database</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    image</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> postgres</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">9.6</span></span>
<span class="line"><span style="color:#24292E;">    ports</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;5432:5432&quot;</span></span>
<span class="line"><span style="color:#24292E;">    environment</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> POSTGRES_USER</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">kong</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> POSTGRES_DB</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">kong</span></span>
<span class="line"><span style="color:#24292E;">    networks</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> kong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">net</span></span>
<span class="line"><span style="color:#24292E;">    volumes</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">localtime</span><span style="color:#D73A49;">:/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">localtime</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">ro</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">data</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">postgresql</span><span style="color:#D73A49;">:/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">postgresql</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">data</span></span>
<span class="line"><span style="color:#24292E;">networks</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  kong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">net</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    external</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span></code></pre></div><p>如上的 docker-compose.yml 会启动三个容器服务：Kong、Konga 和 Kong-database。这三个容器之间的通信需要增加 network 段，把容器放在同一个网段内，相关链接修改为容器名称来访问：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker network create kong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">net</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker network create kong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">net</span></span></code></pre></div><p>所启动的三个容器服务，除了 Kong 之外的另两个服务：<strong>Konga</strong> 是 Kong 的 Dashboard，它是基于 JavaScript 的<strong>客户端管理工具</strong> ，对外暴露的端口为 8080；<strong>Kong-database</strong> 是 Kong 的<strong>数据库服务</strong>，它用于存储配置信息，此处使用的是 Postgres。</p><p>这里要注意的是，在启动 Kong 容器之前，需要保持数据库的 Docker 容器在运行状态，并执行如下初始化数据库的操作：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker run </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">rm \\</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">network</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">kong</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">net \\</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e </span><span style="color:#9ECBFF;">&quot;KONG_DATABASE=postgres&quot;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">e </span><span style="color:#9ECBFF;">&quot;KONG_PG_HOST=kong-database&quot;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">kong</span><span style="color:#E1E4E8;">:latest kong migrations bootstrap</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker run </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rm \\</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">network</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">kong</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">net \\</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e </span><span style="color:#032F62;">&quot;KONG_DATABASE=postgres&quot;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">e </span><span style="color:#032F62;">&quot;KONG_PG_HOST=kong-database&quot;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">kong</span><span style="color:#24292E;">:latest kong migrations bootstrap</span></span></code></pre></div><p>数据库初始化成功后，再次启动 docker-compose.yml 服务就可以了。我们看到 Kong 映射出多个端口，默认情况下，Kong 监听的端口为：</p><ul><li><p><strong>8000</strong>。此端口是 Kong 用来监听来自客户端传入的 HTTP 请求，并将此请求转发到上游服务器；Kong 根据配置的路由规则转发到真实的后台服务地址。</p></li><li><p><strong>8443</strong>。此端口是 Kong 用来监听来自客户端传入的 HTTPS 请求，跟 8000 端口的功能类似，还会转发 HTTPS 请求。我们可以通过修改配置文件来禁用 HTTPS 的功能。</p></li><li><p><strong>8001</strong>。Kong 提供的管理 API 端口，通过此端口，管理者可以对 Kong 的监听服务进行配置，插件设置、API 的增删改查以及负载均衡等一系列的配置都是通过 8001 端口进行管理的。</p></li><li><p><strong>8444</strong>。通过此端口，管理者可以对 HTTPS 请求进行监控。</p></li></ul><p>容器都启动好之后，下面我们来验证一下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:8001/</span></span>
<span class="line"><span style="color:#79B8FF;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">OK</span></span>
<span class="line"><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">: Sat, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> Jul </span><span style="color:#79B8FF;">2019</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">08</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">08</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GMT</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;">: application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json; charset</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">utf</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#B392F0;">Connection</span><span style="color:#E1E4E8;">: keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span></span>
<span class="line"><span style="color:#E1E4E8;">Access</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Allow</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Origin</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#B392F0;">Server</span><span style="color:#E1E4E8;">: kong</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Length</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5785</span></span>
<span class="line"><span style="color:#F97583;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:8001/</span></span>
<span class="line"><span style="color:#005CC5;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">OK</span></span>
<span class="line"><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">: Sat, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> Jul </span><span style="color:#005CC5;">2019</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">08</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">39</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">08</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GMT</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">: application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json; charset</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">utf</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#6F42C1;">Connection</span><span style="color:#24292E;">: keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span></span>
<span class="line"><span style="color:#24292E;">Access</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Allow</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Origin</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#6F42C1;">Server</span><span style="color:#24292E;">: kong</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Length</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5785</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span></code></pre></div><p>本地访问 8001 端口，返回如上的结果，表示安装正确，可以正常使用 Kong。在浏览器中输入 <a href="http://localhost:8080" target="_blank" rel="noreferrer">http://localhost:8080</a> 即可访问 Konga 的管理界面（如下图），如果你第一次登录使用，则需要创建管理员账号和密码。</p>`,14),i=p(`<p>Konga 的管理界面</p><p>至此，Kong 以及管理工具都已安装完成。下面我们将会通过创建服务、创建路由、安装插件等过程的讲解，进入 API Gateway 的具体实践。</p><h4 id="_1-创建服务" tabindex="-1">1. 创建服务 <a class="header-anchor" href="#_1-创建服务" aria-label="Permalink to &quot;1. 创建服务&quot;">​</a></h4><p>正如我们在前面术语部分的介绍，服务 Services 是上游服务的抽象，可以是一个应用，或者具体某个接口。Kong 提供了管理接口，我们可以通过请求 8001 管理接口直接创建，也可以通过安装的管理界面，这二者的实现效果是一样的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">url </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:8001/services/ \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&#39;name=aoho-blog&#39;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&#39;url=http://blueskykong.com/&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">X</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">POST</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">url </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:8001/services/ \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&#39;name=aoho-blog&#39;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&#39;url=http://blueskykong.com/&#39;</span></span></code></pre></div><p>这里我们创建了一个服务名为 aoho-blog 的后端服务，指定转发的地址为 <a href="http://blueskykong.com" target="_blank" rel="noreferrer">http://blueskykong.com</a>。可以在管理界面中看到如下的记录：</p>`,6),F=p(`<p>Kong 服务列表</p><p>在创建服务的同时，我们还可以设置其中的一些参数，如 Retries（重试次数）、Connect timeout（连接的超时时间）、Write/Read timeout（写/读超时时间）等。</p><h4 id="_2-创建路由" tabindex="-1">2. 创建路由 <a class="header-anchor" href="#_2-创建路由" aria-label="Permalink to &quot;2. 创建路由&quot;">​</a></h4><p>创建好服务之后，我们需要创建具体的 API 路由。路由是请求的转发规则，根据 Hostname 和 PATH，将请求转发。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">url </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:8001/services/aoho-blog/routes \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&#39;hosts[]=blueskykong.com&#39;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&#39;paths[]=/api/blog&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">X</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">POST</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">url </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:8001/services/aoho-blog/routes \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&#39;hosts[]=blueskykong.com&#39;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&#39;paths[]=/api/blog&#39;</span></span></code></pre></div><p>如上所示，我们在 aoho-blog 中创建了一个访问 /api/blog 的路由，在管理界面可以看到相应的记录：</p>`,6),u=n("p",null,"Kong 路由记录",-1),g=n("p",null,"创建好路由之后，我们就可以访问 /api/blog，如下图：",-1),_=p(`<p>访问 /api/blog</p><p>Kong 默认通过 8000 端口处理代理的请求。成功的响应意味着 Kong 会将 <a href="http://localhost:8000" target="_blank" rel="noreferrer">http://localhost:8000</a> 的请求转发到配置的 URL，并将响应转发给我们。需要注意的是，如果 API 暴露的地址与前面 Host 定义的地址（blueskykong.com）不一致，就需要在请求的 Headers 里面加入 Header，Kong 根据上面请求中定义的<code>Header:Host</code>，执行此操作。</p><p>创建了服务和路由之后，我们已经能够将客户端的请求转发到对应的服务，但微服务网关还承担了很多基础的功能，如安全认证、限流、分析监控等功能，因此还需要应用 Kong 的插件来实现这些功能。</p><h3 id="安装-kong-插件" tabindex="-1">安装 Kong 插件 <a class="header-anchor" href="#安装-kong-插件" aria-label="Permalink to &quot;安装 Kong 插件&quot;">​</a></h3><p>请求到达 Kong 网关，我们可以在请求转发给服务端应用之前，应用 Kong 自带的插件对请求进行处理，如身份认证、API 限流、黑白名单校验和日志切面等。同时，我们也可以按照 Kong 的教程文档，定制属于自己的插件。这部分我们主要选择其中的三个插件示例应用，至于其余的插件应用，你可以参考这个网址：<a href="https://docs.konghq.com/hub/%E3%80%82" target="_blank" rel="noreferrer">https://docs.konghq.com/hub/。</a></p><h4 id="_1-jwt-认证插件" tabindex="-1">1. JWT 认证插件 <a class="header-anchor" href="#_1-jwt-认证插件" aria-label="Permalink to &quot;1. JWT 认证插件&quot;">​</a></h4><p><strong>JWT（JSON Web Token）是一种流行的跨域身份验证解决方案</strong>。作为一个开放的标准（RFC 7519），JWT 定义了一种简洁的、自包含的方法用于通信双方之间以 JSON 对象的形式安全地传递信息。因为数字签名的存在，这些信息是可信的。</p><p>JWT 最大的优点就是能让业务无状态化，让 Token 作为业务请求的必须信息随着请求一并传输过来，服务端不用再去存储 session 信息，尤其是在分布式系统中。Kong 提供了 JWT 认证插件，用以验证包含 HS256 或 RS256 签名的 JWT 请求。每个消费者都将拥有 JWT 凭证（公钥和密钥），这些凭证必须用于签署其 JWT。JWT 令牌可以通过请求字符串、Cookie 或者认证头部传递，Kong 将会验证令牌的签名，通过则转发，否则直接丢弃请求。</p><p>我们在前面配置的路由基础上，增加 JWT 认证插件：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:8001/routes/e33d6aeb-4f35-4219-86c2- a41e879eda36/plugins \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&quot;name=jwt&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">X</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">POST</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:8001/routes/e33d6aeb-4f35-4219-86c2- a41e879eda36/plugins \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&quot;name=jwt&quot;</span></span></code></pre></div><p>可以看到，在插件列表增加了相应的记录：</p>`,11),C=p(`<p>Kong 插件列表</p><p>在增加了 JWT 插件之后，就没法直接访问 /api/blog 接口了，接口返回 &quot;message&quot;: &quot;Unauthorized&quot;，提示客户端要访问的话则需要提供 JWT 的认证信息。因此，我们需要创建用户：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">url </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:8001/consumers/  \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&quot;username=aoho&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">X</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">POST</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">url </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:8001/consumers/  \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&quot;username=aoho&quot;</span></span></code></pre></div><p>如上我们就创建了一个名为 aoho 的用户。</p>`,4),d=p(`<p>Kong 创建用户</p><p>创建好用户之后，需要获取用户 JWT 凭证，执行如下的调用：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">url http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:8001/consumers/aoho/jwt \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">header </span><span style="color:#9ECBFF;">&quot;Content-Type: application/x-www-form-urlencoded&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"># 响应</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;rsa_public_key&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;created_at&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1563566125</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;consumer&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;8c0e1ab4-8411-42fc-ab80-5eccf472d2fd&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1d69281d-5083-4db0-b42f-37b74e6d20ad&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;algorithm&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;HS256&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;secret&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;olsIeVjfVSF4RuQuylTMX4x53NDAOQyO&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;TOjHFM4m1qQuPPReb8BTWAYCdM38xi3C&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">X</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">POST</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">url http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:8001/consumers/aoho/jwt \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">header </span><span style="color:#032F62;">&quot;Content-Type: application/x-www-form-urlencoded&quot;</span></span>
<span class="line"><span style="color:#24292E;"># 响应</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;rsa_public_key&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;created_at&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1563566125</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;consumer&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;8c0e1ab4-8411-42fc-ab80-5eccf472d2fd&quot;</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1d69281d-5083-4db0-b42f-37b74e6d20ad&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;algorithm&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;HS256&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;secret&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;olsIeVjfVSF4RuQuylTMX4x53NDAOQyO&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;TOjHFM4m1qQuPPReb8BTWAYCdM38xi3C&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>使用 key 和 secret 在 <a href="https://jwt.io" target="_blank" rel="noreferrer">https://jwt.io</a> 可以生成 JWT 凭证信息。在实际的使用过程中，我们通过编码实现，此处为了演示使用网页工具生成 Token。</p>`,4),h=n("p",null,"生成 JWT Token",-1),q=n("p",null,"上图中画线部分即为 JWT 凭证的 key 和 secret。然后我们将生成的 Token，配置到请求的认证头部，再次执行请求：",-1),A=p(`<p>带有 JWT 令牌的合法请求</p><p>可以看到，我们能够正常请求相应的 API 接口，JWT 认证插件应用成功。Kong 的 JWT 认证插件使用比较简单，但在实践过程中，我们还需要考虑如何跟自身的用户认证系统进行结合。</p><h4 id="_2-prometheus-可视化监控" tabindex="-1">2. Prometheus 可视化监控 <a class="header-anchor" href="#_2-prometheus-可视化监控" aria-label="Permalink to &quot;2. Prometheus 可视化监控&quot;">​</a></h4><p><strong>Prometheus 是一套开源的系统监控报警框架</strong>。它启发于 Google 的 BorgMon 监控系统，由工作在 SoundCloud 的员工在 2012 年作为社区开源项目进行开发，并于 2015 年正式发布。</p><p>作为新一代的监控框架，Prometheus 适用于记录时间序列数据，并且它还具有强大的多维度数据模型、灵活而强大的查询语句、易于管理和伸缩等特点。</p><p>Kong 官方提供的 Prometheus 插件，可用的 metric（指标）有如下：</p><ul><li><p><strong>状态码</strong>。上游服务返回的 HTTP 状态码。</p></li><li><p><strong>时延柱状图</strong>。Kong 中的时延都将被记录，包括请求（完整请求的时延）、Kong（Kong 用来路由、验证和运行其他插件所花费的时间）和上游（上游服务所花费时间来响应请求）。</p></li><li><p><strong>Bandwidth</strong>。流经 Kong 的总带宽（出口/入口）。</p></li><li><p><strong>DB 可达性</strong>。Kong 节点是否能访问其 DB。</p></li><li><p><strong>Connections</strong>。各种 Nginx 连接指标，如 Active、读取、写入和接收连接。</p></li></ul><p>我们在 Service 为 aoho-blog 安装 Prometheus 插件：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:8001/services/aoho-blog/plugins \\</span></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&quot;name=prometheus&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">X</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">POST</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:8001/services/aoho-blog/plugins \\</span></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&quot;name=prometheus&quot;</span></span></code></pre></div><p>从管理界面可以看到，我们已经成功将 Prometheus 插件绑定到 aoho-blog 服务上。</p>`,10),k=p(`<p>Prometheus 插件</p><p>通过访问<code>/metrics</code>接口返回收集度量数据：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">i </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//localhost:8001/metrics</span></span>
<span class="line"><span style="color:#79B8FF;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">OK</span></span>
<span class="line"><span style="color:#B392F0;">Server</span><span style="color:#E1E4E8;">: openresty</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.13</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">6.2</span></span>
<span class="line"><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">: Sun, </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> Jul </span><span style="color:#79B8FF;">2019</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">09</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GMT</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;">: text</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">plain; charset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">UTF</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span></span>
<span class="line"><span style="color:#E1E4E8;">Transfer</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Encoding</span><span style="color:#E1E4E8;">: chunked</span></span>
<span class="line"><span style="color:#B392F0;">Connection</span><span style="color:#E1E4E8;">: keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span></span>
<span class="line"><span style="color:#E1E4E8;">Access</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Control</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Allow</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Origin</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_bandwidth{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;egress&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">178718</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_bandwidth{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;ingress&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">1799</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_datastore_reachable </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_http_status{code</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;200&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_http_status{code</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;401&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_bucket{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;kong&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">,le</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;00005.0&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_bucket{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;kong&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">,le</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;00007.0&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_bucket{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;upstream&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">,le</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;00300.0&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_bucket{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;upstream&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">,le</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;00400.0&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_count{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;kong&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_count{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;request&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_count{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;upstream&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_sum{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;kong&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">409</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_sum{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;request&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">1497</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_latency_sum{type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;upstream&quot;</span><span style="color:#E1E4E8;">,service</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;aoho-blog&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">1047</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_nginx_http_current_connections{state</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;accepted&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">2691</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_nginx_http_current_connections{state</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;active&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_nginx_http_current_connections{state</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;handled&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">2691</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_nginx_http_current_connections{state</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;reading&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_nginx_http_current_connections{state</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;total&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">2637</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_nginx_http_current_connections{state</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;waiting&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_nginx_http_current_connections{state</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;writing&quot;</span><span style="color:#E1E4E8;">} </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">kong_nginx_metric_errors_total </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">i </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//localhost:8001/metrics</span></span>
<span class="line"><span style="color:#005CC5;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">OK</span></span>
<span class="line"><span style="color:#6F42C1;">Server</span><span style="color:#24292E;">: openresty</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.13</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">6.2</span></span>
<span class="line"><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">: Sun, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> Jul </span><span style="color:#005CC5;">2019</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">09</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">48</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GMT</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">: text</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">plain; charset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">UTF</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">Transfer</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Encoding</span><span style="color:#24292E;">: chunked</span></span>
<span class="line"><span style="color:#6F42C1;">Connection</span><span style="color:#24292E;">: keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span></span>
<span class="line"><span style="color:#24292E;">Access</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Control</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Allow</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Origin</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#24292E;">kong_bandwidth{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;egress&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">178718</span></span>
<span class="line"><span style="color:#24292E;">kong_bandwidth{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ingress&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">1799</span></span>
<span class="line"><span style="color:#24292E;">kong_datastore_reachable </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">kong_http_status{code</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;200&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">kong_http_status{code</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;401&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_bucket{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;kong&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">,le</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;00005.0&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_bucket{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;kong&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">,le</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;00007.0&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_bucket{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;upstream&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">,le</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;00300.0&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_bucket{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;upstream&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">,le</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;00400.0&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_count{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;kong&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_count{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;request&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_count{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;upstream&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_sum{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;kong&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">409</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_sum{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;request&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">1497</span></span>
<span class="line"><span style="color:#24292E;">kong_latency_sum{type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;upstream&quot;</span><span style="color:#24292E;">,service</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;aoho-blog&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">1047</span></span>
<span class="line"><span style="color:#24292E;">kong_nginx_http_current_connections{state</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;accepted&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">2691</span></span>
<span class="line"><span style="color:#24292E;">kong_nginx_http_current_connections{state</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;active&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">kong_nginx_http_current_connections{state</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;handled&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">2691</span></span>
<span class="line"><span style="color:#24292E;">kong_nginx_http_current_connections{state</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;reading&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">kong_nginx_http_current_connections{state</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;total&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">2637</span></span>
<span class="line"><span style="color:#24292E;">kong_nginx_http_current_connections{state</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;waiting&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">kong_nginx_http_current_connections{state</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;writing&quot;</span><span style="color:#24292E;">} </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">kong_nginx_metric_errors_total </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>返回的响应太长，有省略，从响应可以看到 Prometheus 插件提供的 metric 都有体现。Prometheus 插件导出的度量标准，可以在 Grafana（一个跨平台的开源的度量分析和可视化工具）中绘制，&quot;Prometheus + Grafana&quot; 的组合是目前较为流行的监控系统。</p><h4 id="_3-链路追踪-zipkin-插件" tabindex="-1">3. 链路追踪 Zipkin 插件 <a class="header-anchor" href="#_3-链路追踪-zipkin-插件" aria-label="Permalink to &quot;3. 链路追踪 Zipkin 插件&quot;">​</a></h4><p><strong>Zipkin 是由 Twitter 开源的分布式实时链路追踪组件。</strong> Zipkin 收集来自各个异构系统的实时监控数据，用来追踪与分析微服务架构下的请求，应用系统则需要向 Zipkin 报告链路信息。Kong 的 Zipkin 插件将 Kong 作为 zipkin-client，zipkin-client 组装好 Zipkin 需要的数据包发送到 zipkin-server。Zipkin 插件会将请求打上如下标签，并推送到 Zipkin 服务端：</p><ul><li><p>span.kind (sent to Zipkin as &quot;kind&quot;)</p></li><li><p>http.method</p></li><li><p>http.status_code</p></li><li><p>http.url</p></li><li><p>peer.ipv4</p></li><li><p>peer.ipv6</p></li><li><p>peer.port</p></li><li><p>peer.hostname</p></li><li><p>peer.service</p></li></ul><p>关于链路追踪和 Zipkin 的具体信息，到后面的链路追踪课时我们会详细讲解，本课时我们就旨在介绍如何在 Kong 中使用 Zipkin 插件追踪所有请求的链路。</p><p>首先开启 Zipkin 插件，将插件绑定到路由上（这里可以绑定为全局的插件）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">curl </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">X</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//kong:8001/routes/e33d6aeb-4f35-4219- 86c2-a41e879eda36/plugins \\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&quot;name=zipkin&quot;</span><span style="color:#E1E4E8;">  \\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&quot;config.http_endpoint=http://localhost:9411/api/v2/spans&quot;</span><span style="color:#E1E4E8;"> \\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">data </span><span style="color:#9ECBFF;">&quot;config.sample_ratio=1&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">curl </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">X</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">POST</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//kong:8001/routes/e33d6aeb-4f35-4219- 86c2-a41e879eda36/plugins \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&quot;name=zipkin&quot;</span><span style="color:#24292E;">  \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&quot;config.http_endpoint=http://localhost:9411/api/v2/spans&quot;</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">data </span><span style="color:#032F62;">&quot;config.sample_ratio=1&quot;</span></span></code></pre></div><p>如上配置了 Zipkin Collector 的地址和采样率，为了测试效果明显，设置采样率为 100%，但在实际生产环境中还是要谨慎使用 100% 的采样率配置，采样率对系统吞吐量会有影响。</p>`,11),D=n("p",null,"Zipkin 插件",-1),B=n("p",null,[s("可以看到，Zipkin 插件已经应用到指定的路由上。下面我们将会执行请求 /api/blog 接口，打开 "),n("a",{href:"http://localhost:9411",target:"_blank",rel:"noreferrer"},"http://localhost:9411"),s(" 界面如下：")],-1),b=n("p",null,"Zipkin 链路追踪",-1),m=n("p",null,"这时 Zipkin 已经将请求记录，我们可以点开查看其链路详情：",-1),T=n("p",null,"链路详情",-1),v=n("p",null,"从链路调用可以知道，请求到达 Kong 之后，都经历了哪些服务和 Span，以及每个 Span 所花费的时间等信息。",-1),S=n("h3",{id:"小结",tabindex:"-1"},[s("小结 "),n("a",{class:"header-anchor",href:"#小结","aria-label":'Permalink to "小结"'},"​")],-1),P=n("p",null,"本课时我们重点介绍了微服务网关 Kong 的相关概念和安装实践，并在此基础上安装实践了其中具有代表性的三个 Kong 插件：JWT 认证插件、Prometheus 可视化监控和链路追踪 Zipkin 插件。Kong 官方对自身的定位也是适用于混合云平台的下一代 API 管理平台，其在功能方面很强大。因此，基于 Kong 的丰富生态和配套的工具，我们可以快速构建一个微服务网关，作为服务端的统一入口。",-1),K=n("p",null,"学习完本课时，你觉得还需要自定义哪些 Kong 网关的插件，欢迎你在留言区和我分享。",-1);function O(f,N,w,G,R,I){const a=t("Image");return e(),c("div",null,[y,o(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/4C/BF/Ciqc1F9YkrGAY0bFAAIc9mSzUGU720.png"}),s(),E,o(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/4C/CA/CgqCHl9YktiAZMK3AANSs-0i4uA386.png"}),s(),i,o(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/4C/BF/Ciqc1F9YkvmAN0m3AAEzz-ZOr6U607.png"}),s(),F,o(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/4C/BF/Ciqc1F9YkwqAY1q1AAKbhE-tEOc498.png"}),s(),u,g,o(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/4C/CB/CgqCHl9YkxWATDtOAAXihFAhkAA332.png"}),s(),_,o(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/4C/BF/Ciqc1F9YkyiASlg2AAGmffFE8Pc088.png"}),s(),C,o(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/4C/CB/CgqCHl9YkzSAabYOAAE1TLmVwy0554.png"}),s(),d,o(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/4C/C0/Ciqc1F9Yk1aAeU1AAAMrh-FCi34569.png"}),s(),h,q,o(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/4C/C0/Ciqc1F9Yk16AciV4AAW93EOSJKU956.png"}),s(),A,o(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/4C/C0/Ciqc1F9Yk3uAWOwcAAGdkZ8tvKs339.png"}),s(),k,o(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/4C/C0/Ciqc1F9Yk5mAHGfXAAGx7YEHLuU160.png"}),s(),D,B,o(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/4C/C0/Ciqc1F9Yk6CAK4oOAAF5XrN-wD4791.png"}),s(),b,m,o(a,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image/M00/4C/C0/Ciqc1F9Yk7WAc_rEAAGV1LU8BgU968.png"}),s(),T,v,S,P,K])}const H=l(r,[["render",O]]);export{j as __pageData,H as default};
