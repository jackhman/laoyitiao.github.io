import{_ as s,o as n,g as a,Q as e}from"./chunks/framework.f949202b.js";const b=JSON.parse('{"title":"测试代码的步骤与结构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6678) 23  TDD 与单元测试：如何保证功能模块的高质量？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6678) 23  TDD 与单元测试：如何保证功能模块的高质量？.md","lastUpdated":null}'),l={name:"posts/frontEnd/048_iOS开发进阶/(6678) 23  TDD 与单元测试：如何保证功能模块的高质量？.md"},p=e(`<p>如果一个 App 有很多的 Bug 或者崩溃率非常高，我们往往就需要花大量的时间和精力去不断查错和&quot;救火&quot;。那怎样才能提高代码的质量，让我们可以把有效的时间专注于产品功能的迭代上呢？经过多年实践经验的总结，我们发现<strong>测试驱动开发</strong>，也叫作 TDD（Test-Driven Development），是一种行而有效的方法实践。</p><p><strong>TDD 的核心是编写单元测试</strong>。单元测试能方便我们模拟不同的测试场景，覆盖不同的边界条件，从而提高代码的质量并减少 Bug 的数量。同时，使用 TDD 所开发的代码能降低模块间的耦合度，提高模块的灵活性和可扩展性。</p><p>下面我们以 Moments App 作为例子来看看如何通过编写单元测试来进行 TDD。这里主要讲述测试代码的步骤与结构，以及如何为网络层、Repository 层和 ViewModel 层编写单元测试。</p><h3 id="测试代码的步骤与结构" tabindex="-1">测试代码的步骤与结构 <a class="header-anchor" href="#测试代码的步骤与结构" aria-label="Permalink to &quot;测试代码的步骤与结构&quot;">​</a></h3><p>在编写测试代码时候，我们一般遵守 AAA 步骤，所谓<strong>AAA 就是 Arrange、Act 和 Assert</strong>。</p><ul><li><p>Arrange：用于搭建测试案例，例如，初始化测试对象及其依赖。</p></li><li><p>Act：表示执行测试，例如，调用测试对象的方法。</p></li><li><p>Assert：用于检验测试的结果。</p></li></ul><p>那怎样才能按照 AAA 步骤来编写测试代码呢？为了简化编写测试的工作，并提高代码的结构性与可读性，我们在 Moments App 中使用了 Quick 和 Nimble 库。下面我以<code>MomentsTimelineViewModelTests</code>为例子给你讲述一种实用的测试代码结构：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MomentsTimelineViewModelTests</span><span style="color:#E1E4E8;">: QuickSpec {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">spec</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">describe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MomentsTimelineViewModel&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> testSubject: MomentsTimelineViewModel</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">            beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">                testSubject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MomentsTimelineViewModel</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// Arrange</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;loadItems()&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    testSubject.</span><span style="color:#79B8FF;">loadItems</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// Act</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;call \`momentsRepo.getMoments\` with the correct parameters&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(mockMomentsRepo.getMomentsHasBeenCalled).</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">beTrue</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// Assert</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;check another assertion&quot;</span><span style="color:#E1E4E8;">) { }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;anotherMethod()&quot;</span><span style="color:#E1E4E8;">) { }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MomentsTimelineViewModelTests</span><span style="color:#24292E;">: QuickSpec {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">spec</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">describe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MomentsTimelineViewModel&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> testSubject: MomentsTimelineViewModel</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">            beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">                testSubject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MomentsTimelineViewModel</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// Arrange</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;loadItems()&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">                    testSubject.</span><span style="color:#005CC5;">loadItems</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// Act</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;call \`momentsRepo.getMoments\` with the correct parameters&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(mockMomentsRepo.getMomentsHasBeenCalled).</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">beTrue</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// Assert</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;check another assertion&quot;</span><span style="color:#24292E;">) { }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;anotherMethod()&quot;</span><span style="color:#24292E;">) { }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>首先是测试类的定义</strong> 。我们定义了一个继承于<code>QuickSpec</code>的测试类，测试类通常以<code>&lt;需要测试的类型&gt;Tests</code>的规范来命名。在上面的例子中，我们需要测试<code>MomentsTimelineViewModel</code>，因此把测试类定义为<code>MomentsTimelineViewModelTests</code>。然后在类里面重写<code>spec()</code>方法来封装所有测试案例。接着在<code>spec()</code>方法里面通过<code>describe()</code>方法来进行分组，我的做法是一个测试类型只有一个<code>describe()</code>方法，并把要测试类型的名称传递给该方法，在例子中就写成<code>describe(&quot;MomentsTimelineViewModel&quot;)</code>，这样能保证在批量执行测试案例时可以快速定位出错的测试类。</p><p><strong>接下来是执行 AAA 中的 Arrange 步骤来搭建测试案例所需的对象</strong> 。在<code>describe()</code>方法里，我们先定义一个名叫<code>testSubject</code>的测试对象，它的类型为需要测试的类型，在我们的例子中，<code>testSubject</code>的类型是<code>MomentsTimelineViewModel!</code>。你可能注意到，我们定义<code>testSubject</code>时使用了<code>!</code>来表示该对象不会为<code>nil</code>。不过，这里需要提醒一下，在生产代码中，我们绝对不使用<code>!</code>来定义属性，因为一旦该属性为<code>nil</code>时，调用该属性的方法就会导致程序崩溃。那为什么在测试代码中反而使用<code>!</code>呢？因为我们希望在执行每一个测试案例之前都重新生成一个新的<code>testSubject</code>对象来保证每个案例都是无状态的，所以我们需要把初始化操作放到<code>beforeEach()</code>方法里面，如果<code>testSubject</code>不是定义为<code>!</code>，就会有编译错误。</p><p><strong>然后是执行 AAA 里面的 Act 步骤</strong> 。测试类型中的每一个公共的方法和属性都需要测试，因此，我们需要把它们的测试案例进行分组。为此，我会使用到<code>context()</code>方法。例如，当我们要测试<code>loadItems()</code>方法时，就把方法名字传递给<code>context()</code>方法，写成<code>context(&quot;loadItems()&quot;)</code>，并在该 context 下的<code>beforeEach()</code>方法里调用测试方法<code>loadItems()</code>，这样就执行 Act 步骤了。</p><p><strong>最后看一下如何执行 AAA 里面的 Assert 步骤</strong> 。我们可以通过<code>it()</code>方法来检验每个测试案例的执行结果。为了使得测试更加容易读，我通常把测试的预期行为都写在<code>it()</code>方法里面，示例中的<code>it(&quot;call momentsRepo.getMoments()with the correct parameters&quot;)</code>表示当我们调用<code>loadItems()</code>方法时就必须调用<code>momentsRepo</code>属性的<code>getMoments()</code>函数。</p><p>至此，编写单元测试代码的步骤与框架就讲完了。下面我们再结合真实的例子来看看如何为网络层、Repository 层和 ViewModel 层编写测试代码。</p><h3 id="网络层的测试" tabindex="-1">网络层的测试 <a class="header-anchor" href="#网络层的测试" aria-label="Permalink to &quot;网络层的测试&quot;">​</a></h3><p>我们以<code>GetMomentsByUserIDSessionTests</code>为例子看看如何为网络层编写单元测试的代码。因为我们使用了 RxSwift，在测试的时候可以引用<strong>RxTest 库</strong>来简化测试的流程。</p><p>首先，我们在<code>describe(&quot;GetMomentsByUserIDSession&quot;)</code>函数里定义需要初始化的变量，代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> testSubject: GetMomentsByUserIDSession</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> testScheduler: TestScheduler</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> testObserver: TestableObserver&lt;MomentsDetails&gt;</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mockResponseEvent: Recorded&lt;Event&lt;GetMomentsByUserIDSession.Response&gt;&gt;</span><span style="color:#F97583;">!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> testSubject: GetMomentsByUserIDSession</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> testScheduler: TestScheduler</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> testObserver: TestableObserver&lt;MomentsDetails&gt;</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> mockResponseEvent: Recorded&lt;Event&lt;GetMomentsByUserIDSession.Response&gt;&gt;</span><span style="color:#D73A49;">!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p><code>testSubject</code>是测试的对象，在这个例子中是我们需要测试的<code>GetMomentsByUserIDSession</code>。</p></li><li><p><code>testScheduler</code>的类型是来自 RxTest 的<code>TestScheduler</code>，是一个用于测试的排程器。</p></li><li><p><code>testObserver</code>的类型是 RxTest 的<code>TestableObserver</code>，用来订阅 Observable 序列里的事件，并通过接收到的事件来检查测试的结果。</p></li><li><p><code>mockResponseEvent</code>是<code>Recorded</code>类型，也是来自 RxTest，用于模拟事件的发送，例如模拟成功接收到网络数据事件或者错误事件。</p></li></ul><p>所需的变量定义完毕以后，可以在<code>beforeEach()</code>方法里面初始化<code>testScheduler</code>和<code>testObserver</code>，具体代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">    testScheduler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TestScheduler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">initialClock</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    testObserver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> testScheduler.</span><span style="color:#79B8FF;">createObserver</span><span style="color:#E1E4E8;">(MomentsDetails.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">    testScheduler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TestScheduler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">initialClock</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    testObserver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> testScheduler.</span><span style="color:#005CC5;">createObserver</span><span style="color:#24292E;">(MomentsDetails.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>因为初始化操作都在<code>beforeEach()</code>方法里面，所以每个测试案例执行前都会重新初始化这两个变量。</p><p>初始化完毕后，我们就可以测试<code>GetMomentsByUserIDSession</code>的<code>getMoments()</code>方法了，具体代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getMoments(userID:)&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;when response status code 200 with valid response&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">            mockResponseEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, TestData.successResponse)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mockEvent</span><span style="color:#E1E4E8;">: mockResponseEvent)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getMoments(userID:)&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;when response status code 200 with valid response&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">            mockResponseEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, TestData.successResponse)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mockEvent</span><span style="color:#24292E;">: mockResponseEvent)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们使用<code>context(&quot;getMoments(userID:)&quot;)</code>把<code>getMoments(userID:)</code>所有的测试案例都组织在一起。先看成功的测试案例，该案例封装在<code>context(&quot;when response status code 200 with valid response&quot;)</code>函数里面，表示网络成功返回有效数据时的情况。在<code>beforeEach()</code>方法里做了两件事情，第一件执行 Arrange 步骤，让<code>mockResponseEvent</code>发出一个<code>.next</code>事件，该事件里面包含了类型为<code>GetMomentsByUserIDSession.Response</code>的数据对象<code>successResponse</code>。下面是这个数据对象的定义：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestData</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> successResponse: GetMomentsByUserIDSession.Response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">try!</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSONDecoder</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">decode</span><span style="color:#E1E4E8;">(GetMomentsByUserIDSession.Response.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                               </span><span style="color:#79B8FF;">from</span><span style="color:#E1E4E8;">: TestData.successjson.</span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">using</span><span style="color:#E1E4E8;">: .</span><span style="color:#79B8FF;">utf8</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response</span></span>
<span class="line"><span style="color:#E1E4E8;">    }()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> successjson </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">    {</span></span>
<span class="line"><span style="color:#9ECBFF;">      &quot;data&quot;: { ... } // JSON 数据</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestData</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> successResponse: GetMomentsByUserIDSession.Response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">try!</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSONDecoder</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">decode</span><span style="color:#24292E;">(GetMomentsByUserIDSession.Response.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                               </span><span style="color:#005CC5;">from</span><span style="color:#24292E;">: TestData.successjson.</span><span style="color:#005CC5;">data</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">using</span><span style="color:#24292E;">: .</span><span style="color:#005CC5;">utf8</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response</span></span>
<span class="line"><span style="color:#24292E;">    }()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> successjson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    {</span></span>
<span class="line"><span style="color:#032F62;">      &quot;data&quot;: { ... } // JSON 数据</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>代码中的私有结构体<code>TestData</code>用于配置测试数据，它提供了一个名叫<code>successResponse</code>的静态属性来返回类型为<code>GetMomentsByUserIDSession.Response</code>的测试数据。在这个属性里，我们使用了<code>JSONDecoder().decode()</code>方法来解码 JSON 字符串。在开发的过程，我们可以从 BFF 的返回值中拷贝该 JSON 字符串。通过这个测试案例，我们可以快速地测试<code>GetMomentsByUserIDSession</code>结构体的映射是否正确。这种做法比通过修改后台来返回测试数据要方便很多。</p><p><code>beforeEach()</code>方法里第二件事情是执行 Act 步骤，可以通过调用<code>getMoments(mockEvent: mockResponseEvent)</code>方法来完成这一任务。该方法是一个私有方法，其定义如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">mockEvent</span><span style="color:#E1E4E8;">: Recorded&lt;Event&lt;GetMomentsByUserIDSession.Response&gt;&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> testableObservable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> testScheduler.</span><span style="color:#79B8FF;">createHotObservable</span><span style="color:#E1E4E8;">([mockEvent])</span></span>
<span class="line"><span style="color:#E1E4E8;">    testSubject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GetMomentsByUserIDSession { </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> testableObservable.</span><span style="color:#79B8FF;">asObservable</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">    testSubject.</span><span style="color:#79B8FF;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(testObserver).</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    testScheduler.</span><span style="color:#79B8FF;">start</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">mockEvent</span><span style="color:#24292E;">: Recorded&lt;Event&lt;GetMomentsByUserIDSession.Response&gt;&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> testableObservable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> testScheduler.</span><span style="color:#005CC5;">createHotObservable</span><span style="color:#24292E;">([mockEvent])</span></span>
<span class="line"><span style="color:#24292E;">    testSubject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GetMomentsByUserIDSession { </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> testableObservable.</span><span style="color:#005CC5;">asObservable</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">    testSubject.</span><span style="color:#005CC5;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(testObserver).</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">    testScheduler.</span><span style="color:#005CC5;">start</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>首先我们把模拟数据传递给<code>testScheduler.createHotObservable()</code>方法来生成一个新的<code>testableObservable</code>对象，然后把该对象注入<code>GetMomentsByUserIDSession</code>的初始化方法里并生成新的测试对象<code>testSubject</code>，接着调用测试对象的<code>getMoments(userID:)</code>方法，最后通过调用<code>testScheduler.start()</code>方法来启动排程器，模拟一个异步网络请求的过程。</p><p>执行完 Act 步骤以后，我们还需要执行 Assert 步骤来检验测试的结果，验证的代码都放在<code>it(&quot;should complete and map the response correctly&quot;)</code>方法里面，如下所示：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;should complete and map the response correctly&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> expectedMomentsDetails </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TestFixture.momentsDetails</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> actualMomentsDetails </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> testObserver.events.</span><span style="color:#79B8FF;">first</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">.element</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(actualMomentsDetails).</span><span style="color:#79B8FF;">toEventually</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equal</span><span style="color:#E1E4E8;">(expectedMomentsDetails))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;should complete and map the response correctly&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> expectedMomentsDetails </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TestFixture.momentsDetails</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> actualMomentsDetails </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> testObserver.events.</span><span style="color:#005CC5;">first</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">value</span><span style="color:#24292E;">.element</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(actualMomentsDetails).</span><span style="color:#005CC5;">toEventually</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equal</span><span style="color:#24292E;">(expectedMomentsDetails))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们从<code>testObserver</code>里取出它接收到的第一个事件，然后调用<code>expect()</code>方法来比较实际数据和预期数据。因为网络的数据是异步返回的，所以我们在比较过程时使用了<code>toEventually()</code>方法，该方法会等待结果返回以后才进行比较。</p><p>成功案例已经测试完毕，接下来我们看一个失败的案例。下面的代码模拟了网络访问失败的情况：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;when response status code non-200&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> networkError: APISessionError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">networkError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">error</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">MockError</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">statusCode</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">        mockResponseEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, networkError, GetMomentsByUserIDSession.Response.</span><span style="color:#F97583;">self</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mockEvent</span><span style="color:#E1E4E8;">: mockResponseEvent)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;should throw a network error&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> actualError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> testObserver.events.</span><span style="color:#79B8FF;">first</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as!</span><span style="color:#E1E4E8;"> APISessionError</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(actualError).</span><span style="color:#79B8FF;">toEventually</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equal</span><span style="color:#E1E4E8;">(networkError))</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;when response status code non-200&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> networkError: APISessionError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">networkError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">error</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">MockError</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">statusCode</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">        mockResponseEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">error</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, networkError, GetMomentsByUserIDSession.Response.</span><span style="color:#D73A49;">self</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mockEvent</span><span style="color:#24292E;">: mockResponseEvent)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;should throw a network error&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> actualError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> testObserver.events.</span><span style="color:#005CC5;">first</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">value</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as!</span><span style="color:#24292E;"> APISessionError</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(actualError).</span><span style="color:#005CC5;">toEventually</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equal</span><span style="color:#24292E;">(networkError))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>你可以看到，测试代码的结构和成功案例是一致的，不同的地方是我们让<code>mockResponseEvent</code>返回一个错误的事件，在检验的过程中，我们从<code>testObserver</code>取出<code>error</code>来进行对比，而不是<code>element</code>。</p><p>网络测试的代码就讲到这里，你可以打开拉勾教育网的代码仓库来查看更多网络层的测试案例。</p><h3 id="repository-层的测试" tabindex="-1">Repository 层的测试 <a class="header-anchor" href="#repository-层的测试" aria-label="Permalink to &quot;Repository 层的测试&quot;">​</a></h3><p>下面我们以<code>MomentsRepoTests</code>为例子看一下如何测试 Repository 层。</p><p><code>MomentsRepoTests</code>用于测试<code>MomentsRepo</code>。我们在《19 | 数据层架构：如何使用仓库模式设计数据存储层？》中描述过，<code>MomentsRepo</code>依赖了<code>PersistentDataStoreType</code>来读取本地数据，并且依赖了<code>GetMomentsByUserIDSessionType</code>从 BFF 读取朋友圈信息。那我们测试<code>MomentsRepo</code>的时候是不是也一同测试两个类型的实现呢？答案是否定的，因为<strong>所谓单元测试就是只单独测试某个类型的具体实现，而不测试它的依赖类型</strong> 。回到<code>MomentsRepoTests</code>的例子，它仅仅测试<code>MomentsRepo</code>的实现。也就是说，哪怕我们替换了<code>PersistentDataStoreType</code>和<code>GetMomentsByUserIDSessionType</code>的实现，在不修改<code>MomentsRepoTests</code>的情况下，所有测试案例都必须通过验证。</p><p>那怎样才能使得<code>MomentsRepoTests</code>只测试<code>MomentsRepo</code>的实现，而不测试其他任何的依赖类型呢？我们可以通过 Mock 类型来达到这一目的。下面是 Mock 类型的示例代码：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MockUserDefaultsPersistentDataStore</span><span style="color:#E1E4E8;">: PersistentDataStoreType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> momentsDetails: ReplaySubject&lt;MomentsDetails&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">bufferSize</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> savedMomentsDetails: MomentsDetails</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">momentsDetails</span><span style="color:#E1E4E8;">: MomentsDetails) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        savedMomentsDetails </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> momentsDetails</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MockGetMomentsByUserIDSession</span><span style="color:#E1E4E8;">: GetMomentsByUserIDSessionType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> getMomentsHasbeenCalled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> passedUserID: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;MomentsDetails&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        passedUserID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userID</span></span>
<span class="line"><span style="color:#E1E4E8;">        getMomentsHasbeenCalled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Observable.</span><span style="color:#79B8FF;">just</span><span style="color:#E1E4E8;">(TestFixture.momentsDetails)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MockUserDefaultsPersistentDataStore</span><span style="color:#24292E;">: PersistentDataStoreType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">set</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> momentsDetails: ReplaySubject&lt;MomentsDetails&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">create</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">bufferSize</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">set</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> savedMomentsDetails: MomentsDetails</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">momentsDetails</span><span style="color:#24292E;">: MomentsDetails) {</span></span>
<span class="line"><span style="color:#24292E;">        savedMomentsDetails </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> momentsDetails</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MockGetMomentsByUserIDSession</span><span style="color:#24292E;">: GetMomentsByUserIDSessionType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">set</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> getMomentsHasbeenCalled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">set</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> passedUserID: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;MomentsDetails&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        passedUserID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userID</span></span>
<span class="line"><span style="color:#24292E;">        getMomentsHasbeenCalled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Observable.</span><span style="color:#005CC5;">just</span><span style="color:#24292E;">(TestFixture.momentsDetails)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>我们分别定义了两个 Mock 类型来遵循<code>PersistentDataStoreType</code>和<code>GetMomentsByUserIDSessionType</code>协议，这些 Mock 类型只是把传递的参数保存在属性中，并不进行具体的操作，例如不会读写本地数据库和访问网络。</p><p>有了这些 Mock 类型以后，我们就可以把它们注入测试对象<code>testSubject</code>中，具体代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mockUserDefaultsPersistentDataStore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MockUserDefaultsPersistentDataStore</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    mockGetMomentsByUserIDSession </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MockGetMomentsByUserIDSession</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    testSubject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MomentsRepo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">persistentDataStore</span><span style="color:#E1E4E8;">: mockUserDefaultsPersistentDataStore, </span><span style="color:#79B8FF;">getMomentsByUserIDSession</span><span style="color:#E1E4E8;">: mockGetMomentsByUserIDSession)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">    mockUserDefaultsPersistentDataStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MockUserDefaultsPersistentDataStore</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    mockGetMomentsByUserIDSession </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MockGetMomentsByUserIDSession</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    testSubject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MomentsRepo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">persistentDataStore</span><span style="color:#24292E;">: mockUserDefaultsPersistentDataStore, </span><span style="color:#005CC5;">getMomentsByUserIDSession</span><span style="color:#24292E;">: mockGetMomentsByUserIDSession)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上一讲的思考题中我提问过：为什么保存依赖的属性都是通过<code>init()</code>方法来注入，而不是在内部进行初始化？<strong>一个重要的原因是我们可以在执行单元测试时把 Mock 类型注入进来</strong> 。例如在生产代码中，我们为<code>MomentsRepo</code>的<code>persistentDataStore</code>属性注入<code>UserDefaultsPersistentDataStore.shared</code>来访问 iOS 系统的 UserDefaults。UserDefaults 上的数据在程序退出以后还会保留，而单元测试的案例是无状态的，因此所有测试都不应该读写 UserDefaults 上的数据。我们可以在测试代码中，通过注入<code>MockUserDefaultsPersistentDataStore</code>的对象来避免访问 UserDefaults。</p><p>依赖注入是面向抽象编程中一种有效的实践方式，不但方便我们编写测试代码，使得测试不依赖于任何的具体环境，同时还能帮我们很容易地替换某个模块的具体实现，例如，当我们决定使用 CoreData 来替换 UserDefaults 作为本地数据存储时，只需在生产代码中注入<code>CoreDataPersistentDataStore.shared</code>即可。</p><p>有了 Mock 类型以后，我们看一下如何测试<code>MomentsRepo</code>的<code>momentsDetails</code>属性，其中 Arrange 和 Act 步骤的代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;momentsDetails&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> testObserver: TestObserver&lt;MomentsDetails&gt;</span><span style="color:#F97583;">!</span></span>
<span class="line"><span style="color:#E1E4E8;">    beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">        testObserver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TestObserver</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">MomentsDetails</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// Arrange</span></span>
<span class="line"><span style="color:#E1E4E8;">        testSubject.momentsDetails.</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(testObserver).</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag) </span><span style="color:#6A737D;">// Act</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;momentsDetails&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> testObserver: TestObserver&lt;MomentsDetails&gt;</span><span style="color:#D73A49;">!</span></span>
<span class="line"><span style="color:#24292E;">    beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">        testObserver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TestObserver</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">MomentsDetails</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// Arrange</span></span>
<span class="line"><span style="color:#24292E;">        testSubject.momentsDetails.</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(testObserver).</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag) </span><span style="color:#6A737D;">// Act</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>首先，初始化了一个<code>TestObserver</code>对象来帮助测试 RxSwift 的代码。<code>TestObserver</code>是我们自定义的一个类，定义如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestObserver</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">ElementType</span><span style="color:#E1E4E8;">&gt;: ObserverType {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> lastEvent: Event&lt;ElementType&gt;</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> lastElement: ElementType</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> lastEvent</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.element</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> lastError: </span><span style="color:#79B8FF;">Error</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> lastEvent</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isCompleted: </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> lastEvent</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.isCompleted </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> event: Event&lt;ElementType&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        lastEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestObserver</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">ElementType</span><span style="color:#24292E;">&gt;: ObserverType {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> lastEvent: Event&lt;ElementType&gt;</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> lastElement: ElementType</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lastEvent</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.element</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> lastError: </span><span style="color:#005CC5;">Error</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lastEvent</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">error</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isCompleted: </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lastEvent</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.isCompleted </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> event: Event&lt;ElementType&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">        lastEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>TestObserver</code>定义了<code>on(_ event: Event&lt;ElementType&gt;)</code>方法来接收事件，并提供了<code>lastElement</code>、<code>lastError</code>和<code>isCompleted</code>属性来检查最后一条事件的类型。有了<code>testObserver</code>对象，我们可以把它传递给<code>subscribe()</code>方法来订阅<code>momentsDetails</code>属性的事件，然后通过它来验证 RxSwift 代码的测试结果，下面是 Assert 步骤的代码：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;should be \`nil\` by default&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(testObserver.lastElement).</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">beNil</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// Assert</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;when persistentDataStore has new data&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">        mockUserDefaultsPersistentDataStore.momentsDetails.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(TestFixture.momentsDetails)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;should notify a next event with the new data&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(testObserver.lastElement).</span><span style="color:#79B8FF;">toEventually</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equal</span><span style="color:#E1E4E8;">(TestFixture.momentsDetails)) </span><span style="color:#6A737D;">// Assert</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;should be \`nil\` by default&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(testObserver.lastElement).</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">beNil</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// Assert</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;when persistentDataStore has new data&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">        mockUserDefaultsPersistentDataStore.momentsDetails.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(TestFixture.momentsDetails)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;should notify a next event with the new data&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(testObserver.lastElement).</span><span style="color:#005CC5;">toEventually</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equal</span><span style="color:#24292E;">(TestFixture.momentsDetails)) </span><span style="color:#6A737D;">// Assert</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在开始的时候，<code>testObserver</code>不应该接收到任何事件，所以它的<code>lastElement</code>属性返回<code>nil</code>。当我们往 Mock 类型<code>mockUserDefaultsPersistentDataStore</code>的<code>momentsDetails</code>属性发出一个<code>next</code>事件后，<code>testObserver</code>会接收到该事件，我们可以调用<code>toEventually()</code>方法来进行检查。</p><p>下面我们再看看<code>getMoments(userID:)</code>方法的测试。具体代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getMoments(userID:)&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">        testSubject.</span><span style="color:#79B8FF;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;should call \`GetMomentsByUserIDSessionType.getMoments\`&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(mockGetMomentsByUserIDSession.getMomentsHasbeenCalled).</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">beTrue</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(mockGetMomentsByUserIDSession.passedUserID).</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">be</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;should save a \`MomentsDetails\` object&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(mockUserDefaultsPersistentDataStore.savedMomentsDetails).</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equal</span><span style="color:#E1E4E8;">(TestFixture.momentsDetails))</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getMoments(userID:)&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">        testSubject.</span><span style="color:#005CC5;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;should call \`GetMomentsByUserIDSessionType.getMoments\`&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(mockGetMomentsByUserIDSession.getMomentsHasbeenCalled).</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">beTrue</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(mockGetMomentsByUserIDSession.passedUserID).</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">be</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;should save a \`MomentsDetails\` object&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(mockUserDefaultsPersistentDataStore.savedMomentsDetails).</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equal</span><span style="color:#24292E;">(TestFixture.momentsDetails))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>我们在<code>beforeEach()</code>方法中执行了 Act 步骤来调用<code>getMoments(userID:)</code>方法，这里首先复习一下《第 19 讲| 数据层架构：如何使用仓库模式设计数据存储层？》里讲过的<code>MomentsRepo</code>方法的实现。</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userID</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> getMomentsByUserIDSession</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: userID)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">do</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: { persistentDataStore.</span><span style="color:#79B8FF;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">momentsDetails</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) })</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> () }</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#79B8FF;">catchErrorJustReturn</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userID</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> getMomentsByUserIDSession</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: userID)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">do</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: { persistentDataStore.</span><span style="color:#005CC5;">save</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">momentsDetails</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) })</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> () }</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#005CC5;">catchErrorJustReturn</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在该方法实现中，我们会调用<code>getMomentsByUserIDSession</code>的<code>getMoments(userID:)</code>来读取网络数据，并调用<code>persistentDataStore</code>的<code>save(momentsDetails:)</code>方法把网络返回结果保存到本地数据库中。在测试过程中，我们已经为这两个依赖项分别注入了不同的 Mock 对象，因此在检验结果的时候，我们可以通过比较 Mock 对象的属性就能验证测试是否正确执行。例如，我们检查<code>mockGetMomentsByUserIDSession.passedUserID</code>来验证<code>getMomentsByUserIDSession</code>的执行结果，然后检查<code>mockUserDefaultsPersistentDataStore.savedMomentsDetails</code>来验证<code>persistentDataStore</code>的执行结果。</p><h3 id="viewmodel-层的测试" tabindex="-1">ViewModel 层的测试 <a class="header-anchor" href="#viewmodel-层的测试" aria-label="Permalink to &quot;ViewModel 层的测试&quot;">​</a></h3><p>完成 Repository 层的测试以后，我们再一起看看如何测试 ViewModel 层的代码。</p><p>朋友圈功能的 ViewModel 层由三个 ViewModel 类型所组成，其中<code>MomentsTimelineViewModel</code>类型的测试方式与<code>MomentsRepo</code>是一样的，<strong>都是通过注入 Mock 类型类来测试 RxSwift 返回的结果</strong>。你可以在拉勾教育网的代码仓库查看详细的代码实现。</p><p>因为<code>UserProfileListItemViewModel</code>的责任是把 Model 类型的数据转换成 UI 呈现所需的 ViewModel 类型，那么作为其测试类型，<code>UserProfileListItemViewModelTests</code>的工作就是验证这些数据转换的逻辑是否正确。我们一起看看<code>UserProfileListItemViewModelTests</code>的实现代码，首先是成功的测试案例，如下所示：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;init(userDetails:)&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;when all data provided&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">            testSubject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UserProfileListItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userDetails</span><span style="color:#E1E4E8;">: TestFixture.userDetails)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;should initialize the properties correctly&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(testSubject.name).</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Jake Lin&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(testSubject.avatarURL).</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equal</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;https://avatars-url.com&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(testSubject.backgroundImageURL).</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">equal</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;https://background-image-url.com&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;init(userDetails:)&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;when all data provided&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">            testSubject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UserProfileListItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userDetails</span><span style="color:#24292E;">: TestFixture.userDetails)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;should initialize the properties correctly&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(testSubject.name).</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Jake Lin&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(testSubject.avatarURL).</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;https://avatars-url.com&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(testSubject.backgroundImageURL).</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">equal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;https://background-image-url.com&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>因为所有的转换逻辑都封装在<code>UserProfileListItemViewModel</code>的<code>init(userDetails:)</code>方法里面，所以我们可以通过测试该<code>init()</code>方法来验证数据转换的逻辑。上面的例子中，我们把预先准备好的 Model 数据<code>TestFixture.userDetails</code>传递给<code>UserProfileListItemViewModel</code>来初始化<code>testSubject</code>，然后在<code>it(&quot;should initialize the properties correctly&quot;)</code>方法里检验各个属性的转换结果，例如<code>name</code>等于 &quot;Jake Lin&quot;，而<code>avatarURL</code>和<code>backgroundImageURL</code>都正确地从字符串转换成 URL 类型。</p><p>下面是转换错误时的情况，代码如下：</p><div class="language-swift vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;when \`userDetails.avatar\` is not a valid URL&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    beforeEach {</span></span>
<span class="line"><span style="color:#E1E4E8;">        testSubject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UserProfileListItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userDetails</span><span style="color:#E1E4E8;">: MomentsDetails.</span><span style="color:#79B8FF;">UserDetails</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">avatar</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;this is not a valid URL&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">backgroundImage</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;https://background-image-url.com&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\`avatarURL\` should be nil&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">expect</span><span style="color:#E1E4E8;">(testSubject.avatarURL).</span><span style="color:#79B8FF;">to</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">beNil</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">context</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;when \`userDetails.avatar\` is not a valid URL&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    beforeEach {</span></span>
<span class="line"><span style="color:#24292E;">        testSubject </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UserProfileListItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userDetails</span><span style="color:#24292E;">: MomentsDetails.</span><span style="color:#005CC5;">UserDetails</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">avatar</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;this is not a valid URL&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">backgroundImage</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;https://background-image-url.com&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">it</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\`avatarURL\` should be nil&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">expect</span><span style="color:#24292E;">(testSubject.avatarURL).</span><span style="color:#005CC5;">to</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">beNil</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>当我们把无效的 URL 字符串传递给<code>avatar</code>属性时，转换后的<code>testSubject.avatarURL</code>就会变成<code>nil</code>。</p><p>其他转换错误的案例与上面的例子类似，你可以在拉勾教育的代码仓库里进行查看。</p><p>到此为止，我们已经讲完如何为 MVVM 架构开发单元测试了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲，我们以朋友圈功能作为例子，讲述如何通过 AAA 方法一步步地为网络层、Repository 层和 ViewModel 层编写单元测试。<strong>通过 TDD 方式所开发的代码会迫使我们定义良好的接口，并使用依赖注入的方式来管理所有依赖项，因此，通过 TDD 方法所开发的模块都具备强内聚、弱耦合、可扩展等特性</strong>。同时，单元测试能帮助我们便捷地模拟不同的测试案例，从而提高代码的质量，减少 Bug 和 App 的崩溃率。希望你在工作中也可以推动 TDD，根据我的经验，编写单元测试所花费的时间远比以后修改 Bug 所需时间要少很多。</p><p>现在，&quot;架构与实现&quot;模块我们已经讲述完毕了。在这个模块中，我们讲述了如何使用 BFF 设计跨平台的系统架构，然后分析了如何使用 RxSwift 来设计一套根据数据流自动更新的 MVVM 框架，并详细介绍了 MVVM 每一层的具体实现。</p><p>在结束这一模块前，我还想再分享一下我个人对 App 架构与实现的理解，希望对你有所帮助。</p><p>苹果公司所提供的 MVC 模式并没有很好地解决 App 架构的问题，iOS 开发社区在探索的过程中形成了多种架构，例如，使用 MVC 加上 Coordinator 的 MVCC 模式，还有 MVP、VIPER 以及文章中讲述的 MVVM 架构等。尽管它们的架构与实现可能不一样，但是它们的目的都是解决臃肿的 MVC 问题。除此之外，它们在设计过程中都遵循一些通用的原则，例如单一责任原则（每一个组件只完成单独的一个功能）和开闭原则（通过抽象的协议来封闭具体的实现，但同时开放对类型的扩展），等等。</p><p>基于这些通用的设计原则，并结合多年的经验与教训，<strong>我为 Moments App 重新架构和实现了一套基于 RxSwift 的 MVVM 架构</strong> 。通过这一模块的学习，想必你已经见识到这套框架的威力了，但并不代表这就是默认的或者标准的 MVVM 实现方式，甚至可以说在软件架构领域根本就没有什么一成不变的标准方案，<strong>一套好的方案应该可以根据需求的变化而不断地迭代与改进</strong>。</p><p>当你想使用这套框架的时候，可以结合自己的项目，遵循通用的设计原则来慢慢改进，例如，把所有的网络层逻辑都封装到一个独立的模块中，其他模块必须通过网络层模块来访问网络，或者把所有数据访问都放到 Repository 模块中，UI 需要访问数据时都通过 Repository 来存取。又例如，当一个模块需要依赖于其他模块时，都在初始化方法中进行依赖注入，这样能方便我们以后替换具体实现，提高架构的可扩展性。</p><p>还有一点我想强调一下，写代码是一门手艺活。这个模块的代码实现比较多，我建议你从 GitHub 上把代码下载下来，并对照文章的内容一同学习，然后通过实现新功能来加深理解。<strong>任何架构能力都是建立在代码能力之上的，要提高架构能力首先需要不断提高编写高质量代码的能力。</strong> 编写高质量代码通常需要灵活运用各种软件设计的原则，当能熟练使用这些原则时，架构 App 也就变成水到渠成的事情了。</p><p><strong>思考题</strong></p><blockquote><p>这是架构与实现模块的最后一篇，我建议你在朋友圈时间轴页面里添加分享文章的功能，并编写相关的单元测试。通过这个功能的开发，能让你从头到尾理解整个 MVVM 框架的核心思想。</p></blockquote><p>如果你完成该功能，请提交一个 PR 哦。如果你有什么想法，也可以写到留言区。下一讲我们会讲述&quot;如何统一管理 Certificates 和 Profiles&quot;，这就进入下一个模块------上架与优化。</p><p><strong>源码地址</strong></p><blockquote><p>单元测试的源码地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/MomentsTests?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/MomentsTests</a></p></blockquote>`,82),o=[p];function t(c,r,E,y,i,d){return n(),a("div",null,o)}const m=s(l,[["render",t]]);export{b as __pageData,m as default};
