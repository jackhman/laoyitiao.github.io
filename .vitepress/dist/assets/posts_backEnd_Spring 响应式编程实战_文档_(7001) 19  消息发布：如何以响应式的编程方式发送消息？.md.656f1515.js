import{_ as o,j as e,o as t,h as c,k as l,f as n,s,Q as p}from"./chunks/framework.d3daa342.js";const j=JSON.parse('{"title":"19消息发布：如何以响应式的编程方式发送消息？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring 响应式编程实战_文档/(7001) 19  消息发布：如何以响应式的编程方式发送消息？.md","filePath":"posts/backEnd/Spring 响应式编程实战_文档/(7001) 19  消息发布：如何以响应式的编程方式发送消息？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/Spring 响应式编程实战_文档/(7001) 19  消息发布：如何以响应式的编程方式发送消息？.md"},E=s("h1",{id:"_19消息发布-如何以响应式的编程方式发送消息",tabindex:"-1"},[n("19消息发布：如何以响应式的编程方式发送消息？ "),s("a",{class:"header-anchor",href:"#_19消息发布-如何以响应式的编程方式发送消息","aria-label":'Permalink to "19消息发布：如何以响应式的编程方式发送消息？"'},"​")],-1),y=s("p",null,"通过上一讲的内容，相信你已经对 Reactive Spring Cloud Stream 的基本架构有了全面的了解。今天这一讲，我将基于 ReactiveSpringCSS 案例系统，带你看看如何使用 Reactive Spring Cloud Stream 来完成响应式消息发布者的构建。",-1),i=s("h3",{id:"案例集成-消息通信机制与-reactivespringcss-案例",tabindex:"-1"},[n("案例集成：消息通信机制与 ReactiveSpringCSS 案例 "),s("a",{class:"header-anchor",href:"#案例集成-消息通信机制与-reactivespringcss-案例","aria-label":'Permalink to "案例集成：消息通信机制与 ReactiveSpringCSS 案例"'},"​")],-1),u=s("p",null,"让我们回到 ReactiveSpringCSS 系统，在案例中分别提取 account-service、order-service 和 customer-service 这三个独立的 Web 服务。显然，它们之间需要进行服务之间的调用和协调，从而完成业务闭环。如果在不久的将来，案例系统中需要引入其他服务才能形成完整的业务流程，那么这个业务闭环背后的交互模式就需要进行相应的调整。",-1),g=s("p",null,'在 ReactiveSpringCSS 案例中，你可以想象一个用户的账户信息变动并不会太频繁。因为 account-service 和 customer-service 分别位于两个服务中，为了降低远程交互的成本，很多时候我们会想到把用户的账户信息集中放在缓存里，并在客户工单生成过程中直接从缓存中获取用户账户。在"16 | Redis 集成：如何实现对 Redis 的响应式数据访问"中，我们已经构建了缓存组件。那么，在这样的设计和实现方式下，试想一旦某个用户账户信息发生变化，我们应该如何正确和高效地应对这一场景呢？',-1),d=s("p",null,"一种思路是系统基于一定的时间间隔定时访问 account-service，来获取用户账户信息并存储到缓存中。但考虑到系统的扩展性，这种服务交互模式并不是一个好的选择，因为用户账户信息更新的时机无法事先预知，而事件驱动架构为我们提供了一种更好的实现方案。",-1),F=s("p",null,"当用户账户信息变更时，account-service 可以发送一个事件，该事件表明了某个用户账户信息已经发生了变化，并将这种变化传递到所有相关的服务，这些服务会根据自身的业务逻辑来消费这一事件。通过这种方式，某个特定服务就可以获取用户信息变更事件，从而正确且高效地更新缓存信息。基于这种设计思路，该场景下的交互示意图如下所示。",-1),A=s("p",null,"用户账户信息更新场景中的事件驱动架构",-1),v=s("p",null,[n("上图显示，customer-service 会从缓存中获取更新之后的账户信息以便进行后续的业务处理。而为了简单起见，customer-service 同时也扮演了事件消费者的角色，它将获取到的事件中的账户信息存储到缓存中。"),s("strong",null,"事件处理架构的优势就在于，当系统中需要添加新的用户账户变更事件处理逻辑来完成整个流程时，我们只需要对该事件添加一个新的消费者即可，而不需要调整 customer-service 中的任何逻辑，这在应对系统扩展性上有很大的优势"),n("。")],-1),h=s("h3",{id:"设计-reactivespringcss-中的消息发布场景",tabindex:"-1"},[n("设计 ReactiveSpringCSS 中的消息发布场景 "),s("a",{class:"header-anchor",href:"#设计-reactivespringcss-中的消息发布场景","aria-label":'Permalink to "设计 ReactiveSpringCSS 中的消息发布场景"'},"​")],-1),C=s("p",null,"一般而言，事件在命名上通常采用过去时态以表示该事件所代表的动作已经发生。所以，我们把这里的用户信息变更事件命名为 AccountChangedEvent。",-1),b=s("p",null,"接下来我们关注事件发布者 account-service。在 account-service 中需要设计并实现使用 Spring Cloud Stream 发布消息的各个组件，包括 Source、Channel 和 Binder。我们围绕 AccountChangedEvent 事件给出 account-service 内部的整个实现流程，如下图所示。",-1),D=p(`<p>account-service 消息发布实现流程</p><p>在 account-service 中，势必会存在一个对用户账户信息的修改操作，这个修改操作会触发上图中的 AccountChangedEvent 事件，之后该事件将被构建成一个消息并通过 ReactiveAccountChangedSource 进行发送。ReactiveAccountChangedSource 就是一种具体的响应式 Source 实现，然后 ReactiveAccountChangedSource 使用默认的名为&quot;output&quot;的 Channel 进行消息发布。在案例中，我将基于 RabbitMQ 为你演示消息通信过程，所以 Binder 组件封装了这个消息中间件。</p><h3 id="构建响应式-source-组件" tabindex="-1">构建响应式 Source 组件 <a class="header-anchor" href="#构建响应式-source-组件" aria-label="Permalink to &quot;构建响应式 Source 组件&quot;">​</a></h3><p>站在消息处理的角度讲，消息发布流程并不复杂，主要的实现过程是使用 Reactive Spring Cloud Stream 完成响应式 Source 组件的创建、Binder 组件的配置以及与 account-service 进行集成，让我们一起来看一下。</p><h4 id="初始化消息发布环境" tabindex="-1">初始化消息发布环境 <a class="header-anchor" href="#初始化消息发布环境" aria-label="Permalink to &quot;初始化消息发布环境&quot;">​</a></h4><p>无论是消息发布者还是消息消费者，首先都需要引入 spring-cloud-stream 和 spring-cloud-stream-reactive 依赖，如下所示。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-stream&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-stream-reactive&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-stream&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	 </span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-stream-reactive&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>而在案例中，我们将使用 RabbitMQ 作为消息中间件系统，所以也需要引入 spring-cloud-starter-stream-rabbit 依赖，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">org.springframework.cloud</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">groupId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">cloud</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">starter</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stream</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">rabbit</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">artifactId</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">dependency</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">org.springframework.cloud</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">groupId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">spring</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">cloud</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">starter</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stream</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">rabbit</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">artifactId</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">dependency</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>RabbitMQ 是 AMQP（Advanced Message Queuing Protocol，高级消息队列协议）的典型实现框架。在 RabbitMQ 中，核心概念是交换器（Exchange）。我们可以通过控制交换器与队列之间的路由规则来实现对消息的存储转发、点对点、发布-订阅等消息传递模型。在一个 RabbitMQ 中可能会存在多个队列，交换器如果想要把消息发送到具体某一个队列，就需要通过两者之间的绑定规则来设置路由信息。路由信息的设置是开发人员操控 RabbitMQ 的主要手段，而路由过程的执行依赖于消息头中的路由键（Routing Key）属性。交换器会检查路由键并结合路由算法来决定将消息路由到哪个队列中去。下图就是交换器与队列之间的路由关系图。</p>`,10),S=s("p",null,"RabbitMQ 中交换器与队列的路由关系图",-1),m=s("p",null,"我们通过查看 pom 文件发现，以下组件被添加到了依赖层级关系。显然，Project Reactor、Spring Messaging、AMQP 以及 RabbitMQ 都包含在这个依赖组件列表中。",-1),B=p(`<p>spring-cloud-stream-reactive 和 spring-cloud-starter-stream-rabbit 中的依赖组件</p><h4 id="使用-enablebinding-注解" tabindex="-1">使用 @EnableBinding 注解 <a class="header-anchor" href="#使用-enablebinding-注解" aria-label="Permalink to &quot;使用 @EnableBinding 注解&quot;">​</a></h4><p>对于消息发布者而言，它在 Spring Cloud Stream 体系中扮演着 Source 的角色，所以我们需要在 account-service 的 Bootstrap 类中标明这个 Spring Boot 应用程序是一个 Source 组件。调整之后的 AccountApplication 类如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringCloudApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableBinding</span><span style="color:#E1E4E8;">(Source.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountApplication</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(AccountApplication.class, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringCloudApplication</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableBinding</span><span style="color:#24292E;">(Source.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(AccountApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，我们在原有 AccountApplication 上添加了一个 @EnableBinding(Source.class) 注解，该注解的作用就是告诉 Spring Cloud Stream 这个 Spring Boot 应用程序是一个消息发布者，需要绑定消息中间件，以实现两者之间的连接。@EnableBinding 注解定义比较简单，如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">EnableBinding</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">EnableBinding</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以使用一个或者多个接口作为该注解的参数。在上面的代码中，我们使用了 Source 接口，表示与消息中间件绑定的是一个消息发布者。我在下一讲介绍 Sink 组件时，同样也会使用到这个 @EnableBinding 注解。</p><h4 id="定义-event" tabindex="-1">定义 Event <a class="header-anchor" href="#定义-event" aria-label="Permalink to &quot;定义 Event&quot;">​</a></h4><p>想要发送事件，首先需要定义事件 AccountChangedEvent，包括事件类型、事件所对应的操作以及事件中包含的业务领域对象。AccountChangedEvent 类的定义如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountChangedEvent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//事件类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String type;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//事件所对应的操作（新增、更新和删除）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String operation;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//事件对应的领域模型</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> AccountMessage accountMessage;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountChangedEvent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//事件类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String type;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//事件所对应的操作（新增、更新和删除）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String operation;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//事件对应的领域模型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountMessage accountMessage;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//省略 getter/setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>AccountChangedEvent 中的&quot;type&quot;字段代表事件类型，在一个系统中可能存在多种事件，我们通过该字段进行区分。而&quot;operation&quot;字段代表对 Account 的操作类型，当创建 Account 之后，一般的变更操作类型包括更新（Update）和删除（Delete），我们通过该字段区分具体的变更操作。最后&quot;accountMessage&quot;字段用来在不同服务之间传递整个 Account 消息对象。</p><h4 id="创建响应式-source" tabindex="-1">创建响应式 Source <a class="header-anchor" href="#创建响应式-source" aria-label="Permalink to &quot;创建响应式 Source&quot;">​</a></h4><p>定义完事件的数据结构之后，接下来我们就需要通过 Source 接口来具体实现消息的发布，我们把消息发布组件命名为 ReactiveAccountChangedSource。在构建这个组件的过程中，我们需要把相关知识点进行串联。在&quot;06 | 流式操作：如何使用 Flux 和 Mono 高效构建响应式数据流&quot;中我们介绍了通过 create() 方法和 FluxSink 对象来创建 Flux，FluxSink 对象能够通过 next() 方法持续产生多个元素，它的使用示例如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Flux&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; flux </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flux.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(fluxSink </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        fluxSink.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(ThreadLocalRandom.</span><span style="color:#B392F0;">current</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, FluxSink.OverflowStrategy.BUFFER);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Flux&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; flux </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flux.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(fluxSink </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        fluxSink.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(ThreadLocalRandom.</span><span style="color:#6F42C1;">current</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	}, FluxSink.OverflowStrategy.BUFFER);</span></span></code></pre></div><p>上述代码中指定了 FluxSink 的 OverflowStrategy 为 BUFFER，你可以参考&quot;05 | 顶级框架：Spring 为什么选择 Reactor 作为响应式编程框架&quot;的内容来回顾 Reactor 框架中的背压机制。</p><p>利用 FluxSink，我们就可以构建出一个用于持续生成 AccountChangedEvent 事件的 Flux 对象，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> FluxSink&lt;Message&lt;</span><span style="color:#F97583;">AccountChangedEvent</span><span style="color:#E1E4E8;">&gt;&gt; eventSink;</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Flux&lt;Message&lt;</span><span style="color:#F97583;">AccountChangedEvent</span><span style="color:#E1E4E8;">&gt;&gt; flux </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flux.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Message</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AccountChangedEvent</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(sink </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.eventSink </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sink).</span><span style="color:#B392F0;">publish</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">autoConnect</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> FluxSink&lt;Message&lt;</span><span style="color:#D73A49;">AccountChangedEvent</span><span style="color:#24292E;">&gt;&gt; eventSink;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Flux&lt;Message&lt;</span><span style="color:#D73A49;">AccountChangedEvent</span><span style="color:#24292E;">&gt;&gt; flux </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flux.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Message</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AccountChangedEvent</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(sink </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.eventSink </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sink).</span><span style="color:#6F42C1;">publish</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">autoConnect</span><span style="color:#24292E;">();</span></span></code></pre></div><p>上述代码中，我们首先基于 AccountChangedEvent 事件分别构建了 FluxSink 对象和 Flux 对象，并把两者关联起来；然后使用了 publish() 和 autoConnect() 方法确保一旦 FluxSink 产生数据，Flux 就准备随时发送。</p><p>接下来我们构建具体的 AccountChangedEvent 对象，然后通过 FluxSink 的 next() 方法进行消息的发送，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">AccountChangedEvent originalevent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountChangedEvent</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    AccountChangedEvent.class.</span><span style="color:#B392F0;">getTypeName</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    operation,</span></span>
<span class="line"><span style="color:#E1E4E8;">    accountMessage);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Mono&lt;</span><span style="color:#F97583;">AccountChangedEvent</span><span style="color:#E1E4E8;">&gt; monoEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(originalevent);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">monoEvent.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(event </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> eventSink.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(MessageBuilder.</span><span style="color:#B392F0;">withPayload</span><span style="color:#E1E4E8;">(event).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">())).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">AccountChangedEvent originalevent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountChangedEvent</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    AccountChangedEvent.class.</span><span style="color:#6F42C1;">getTypeName</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    operation,</span></span>
<span class="line"><span style="color:#24292E;">    accountMessage);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Mono&lt;</span><span style="color:#D73A49;">AccountChangedEvent</span><span style="color:#24292E;">&gt; monoEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(originalevent);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">monoEvent.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(event </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> eventSink.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(MessageBuilder.</span><span style="color:#6F42C1;">withPayload</span><span style="color:#24292E;">(event).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">())).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">();</span></span></code></pre></div><p>从上述代码中可以注意到，我们还是通过 Spring Messaging 模块所提供的 MessageBuilder 工具类将它转换为消息中间件所能发送的 Message 对象，这是因为整个消息通信机制需要一套统一而抽象的消息定义。在上一讲中，我已经提到在 Spring Cloud Stream 中，这套统一而抽象的消息定义来自 Spring Messaging。</p><p>一旦我们具备了一个能够持续生成消息的 Flux 对象，就可以通过上一讲所说的 @StreamEmitter 注解进行消息的发送，示例代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">StreamEmitter</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Output</span><span style="color:#E1E4E8;">(Source.OUTPUT) FluxSender output) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    output.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.flux);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">StreamEmitter</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Output</span><span style="color:#24292E;">(Source.OUTPUT) FluxSender output) {</span></span>
<span class="line"><span style="color:#24292E;">    output.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.flux);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里用到了 FluxSender 工具类完成了消息的发送，我们当然也可以使用上一讲介绍的直接返回 Flux 的方法来达到同样的效果。</p><p>ReactiveAccountChangedSource 类的完整代码如下所示，其中通过对消息发送过程进行提取，我们对外暴露了 publishReactiveAccountUpdatedEvent() 和 publishReactiveAccountDeletedEvent() 两个方法供业务系统进行使用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveAccountChangedSource</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(ReactiveAccountChangedSource.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> FluxSink&lt;Message&lt;</span><span style="color:#F97583;">AccountChangedEvent</span><span style="color:#E1E4E8;">&gt;&gt; eventSink;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Flux&lt;Message&lt;</span><span style="color:#F97583;">AccountChangedEvent</span><span style="color:#E1E4E8;">&gt;&gt; flux;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReactiveAccountChangedSource</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.flux </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flux.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Message</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">AccountChangedEvent</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(sink </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.eventSink </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sink).</span><span style="color:#B392F0;">publish</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">autoConnect</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">publishAccountChangedEvent</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">operation</span><span style="color:#E1E4E8;">, Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">     logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Sending message for Account Id: {}&quot;</span><span style="color:#E1E4E8;">, account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">());        </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">     AccountMessage accountMessage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountMessage</span><span style="color:#E1E4E8;">(account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), account.</span><span style="color:#B392F0;">getAccountCode</span><span style="color:#E1E4E8;">(), account.</span><span style="color:#B392F0;">getAccountName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">     AccountChangedEvent originalevent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountChangedEvent</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            AccountChangedEvent.class.</span><span style="color:#B392F0;">getTypeName</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">             operation,</span></span>
<span class="line"><span style="color:#E1E4E8;">             accountMessage);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        Mono&lt;</span><span style="color:#F97583;">AccountChangedEvent</span><span style="color:#E1E4E8;">&gt; monoEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Mono.</span><span style="color:#B392F0;">just</span><span style="color:#E1E4E8;">(originalevent);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> monoEvent.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(event </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> eventSink.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(MessageBuilder.</span><span style="color:#B392F0;">withPayload</span><span style="color:#E1E4E8;">(event).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">())).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">StreamEmitter</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Output</span><span style="color:#E1E4E8;">(Source.OUTPUT) FluxSender </span><span style="color:#FFAB70;">output</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        output.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.flux);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">publishAccountUpdatedEvent</span><span style="color:#E1E4E8;">(Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishAccountChangedEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;UPDATE&quot;</span><span style="color:#E1E4E8;">, account);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">publishAccountDeletedEvent</span><span style="color:#E1E4E8;">(Account </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">publishAccountChangedEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DELETE&quot;</span><span style="color:#E1E4E8;">, account);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveAccountChangedSource</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Logger logger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(ReactiveAccountChangedSource.class);</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> FluxSink&lt;Message&lt;</span><span style="color:#D73A49;">AccountChangedEvent</span><span style="color:#24292E;">&gt;&gt; eventSink;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Flux&lt;Message&lt;</span><span style="color:#D73A49;">AccountChangedEvent</span><span style="color:#24292E;">&gt;&gt; flux;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReactiveAccountChangedSource</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.flux </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flux.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Message</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">AccountChangedEvent</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(sink </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.eventSink </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sink).</span><span style="color:#6F42C1;">publish</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">autoConnect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">publishAccountChangedEvent</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">operation</span><span style="color:#24292E;">, Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">     logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Sending message for Account Id: {}&quot;</span><span style="color:#24292E;">, account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());        </span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">     AccountMessage accountMessage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountMessage</span><span style="color:#24292E;">(account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), account.</span><span style="color:#6F42C1;">getAccountCode</span><span style="color:#24292E;">(), account.</span><span style="color:#6F42C1;">getAccountName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">     AccountChangedEvent originalevent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountChangedEvent</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            AccountChangedEvent.class.</span><span style="color:#6F42C1;">getTypeName</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">             operation,</span></span>
<span class="line"><span style="color:#24292E;">             accountMessage);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        Mono&lt;</span><span style="color:#D73A49;">AccountChangedEvent</span><span style="color:#24292E;">&gt; monoEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Mono.</span><span style="color:#6F42C1;">just</span><span style="color:#24292E;">(originalevent);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> monoEvent.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(event </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> eventSink.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(MessageBuilder.</span><span style="color:#6F42C1;">withPayload</span><span style="color:#24292E;">(event).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">())).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">StreamEmitter</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Output</span><span style="color:#24292E;">(Source.OUTPUT) FluxSender </span><span style="color:#E36209;">output</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        output.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.flux);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">publishAccountUpdatedEvent</span><span style="color:#24292E;">(Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishAccountChangedEvent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UPDATE&quot;</span><span style="color:#24292E;">, account);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">publishAccountDeletedEvent</span><span style="color:#24292E;">(Account </span><span style="color:#E36209;">account</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">publishAccountChangedEvent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DELETE&quot;</span><span style="color:#24292E;">, account);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="配置-binder" tabindex="-1">配置 Binder <a class="header-anchor" href="#配置-binder" aria-label="Permalink to &quot;配置 Binder&quot;">​</a></h4><p>因为我们使用 RabbitMQ 来构建 Spring Cloud Stream 中的 Binder，所以需要在 application.yml 配置文件中添加如下配置项。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">spring</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  cloud</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    stream</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      bindings</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">          content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span></span>
<span class="line"><span style="color:#E1E4E8;">          binder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> rabbitmq</span></span>
<span class="line"><span style="color:#E1E4E8;">        output</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          destination</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> account</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">destination</span></span>
<span class="line"><span style="color:#E1E4E8;">      binders</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        rabbitmq</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> rabbit</span></span>
<span class="line"><span style="color:#E1E4E8;">          environment</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            spring</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              rabbitmq</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">                port</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5672</span></span>
<span class="line"><span style="color:#E1E4E8;">                username</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> guest</span></span>
<span class="line"><span style="color:#E1E4E8;">                password</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> guest</span></span>
<span class="line"><span style="color:#E1E4E8;">	            virtual</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">spring</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  cloud</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    stream</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      bindings</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">          content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span></span>
<span class="line"><span style="color:#24292E;">          binder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> rabbitmq</span></span>
<span class="line"><span style="color:#24292E;">        output</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">          destination</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> account</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">destination</span></span>
<span class="line"><span style="color:#24292E;">      binders</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        rabbitmq</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">          type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> rabbit</span></span>
<span class="line"><span style="color:#24292E;">          environment</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            spring</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">              rabbitmq</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span></span>
<span class="line"><span style="color:#24292E;">                port</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5672</span></span>
<span class="line"><span style="color:#24292E;">                username</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> guest</span></span>
<span class="line"><span style="color:#24292E;">                password</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> guest</span></span>
<span class="line"><span style="color:#24292E;">	            virtual</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span></span></code></pre></div><p>在以上配置项中，我们创建了一个名为&quot;rabbitmq&quot;的 Binder，并指定了 RabbitMQ 服务器的地址、端口、用户名和密码等信息。同时，我们在设置了 output 的 destination 为 account-destination 之后，会在 RabbitMQ 中创建一个名为&quot;account-destination&quot;的交换器，并把 Spring Cloud Stream 的消息输出通道绑定到该交换器上。</p><h4 id="集成服务" tabindex="-1">集成服务 <a class="header-anchor" href="#集成服务" aria-label="Permalink to &quot;集成服务&quot;">​</a></h4><p>最后，我们要做的事情就是在 account-service 中集成消息发布功能，AccountService 会在执行用户账户更新操作的同时，调用 ReactiveAccountChangeSource 完成事件的生成和发送。重构后的 AccountService 类代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ReactiveAccountRepository accountRepository;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ReactiveAccountChangedSource accountChangedSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountById</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(accountId).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getAccountById&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">getAccountByAccountName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">accountName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accountRepository.</span><span style="color:#B392F0;">findAccountByAccountName</span><span style="color:#E1E4E8;">(accountName).</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getAccountByAccountName&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">addAccount</span><span style="color:#E1E4E8;">(Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; saveAccount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> account.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(accountRepository</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">save);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> saveAccount.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(accountChangedSource</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">publishAccountUpdatedEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Mono&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">updateAccount</span><span style="color:#E1E4E8;">(Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">account</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">     Mono&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; saveAccount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> account.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(accountRepository</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">save);</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> saveAccount.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">(accountChangedSource</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">publishAccountUpdatedEvent);</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ReactiveAccountRepository accountRepository;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ReactiveAccountChangedSource accountChangedSource;</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountById</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(accountId).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getAccountById&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getAccountByAccountName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">accountName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accountRepository.</span><span style="color:#6F42C1;">findAccountByAccountName</span><span style="color:#24292E;">(accountName).</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getAccountByAccountName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">addAccount</span><span style="color:#24292E;">(Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">account</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; saveAccount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> account.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(accountRepository</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">save);</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> saveAccount.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(accountChangedSource</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">publishAccountUpdatedEvent);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Mono&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">updateAccount</span><span style="color:#24292E;">(Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">account</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">     Mono&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; saveAccount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> account.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(accountRepository</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">save);</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> saveAccount.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(accountChangedSource</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">publishAccountUpdatedEvent);</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你可以注意到上述代码中，我们再次使用了 flatMap 操作符完成了消息的发布。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>今天这一讲，我们基于用户账户信息更新这一特定的业务场景，介绍了使用 Reactive Spring Cloud Stream 来完成对 ReactiveSpringCSS 系统中消息发布的建模，并提供了针对响应式消息发布者的实现过程。整个消息发布流程还是比较复杂的，涉及多个步骤，你可以结合案例代码进行学习。</p><p>这里给你留一道思考题：在使用 Reactive Spring Cloud Stream 发布消息时，如何基于 @StreamEmitter 注解来生成消息流？</p><p>下一讲将继续探讨基于 Spring Cloud Stream 的开发过程，我们关注于消息消费者的实现，以及自定义消息通道、消费者分组和消息分区等高级主题的实现方式。</p><blockquote><p>点击链接，获取课程相关代码 ↓↓↓<br><a href="https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/ReactiveProgramming-jianxiang.git</a></p></blockquote>`,39);function k(_,M,f,x,R,q){const a=e("Image");return t(),c("div",null,[E,y,i,u,g,d,F,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/39/FE/CioPOWB9Vw6AUr-IAABo8xoqMhI205.png"}),n(),A,v,h,C,b,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/39/F6/Cgp9HWB9VxeAGIoXAAAzfyglUxc729.png"}),n(),D,l(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/39/F6/Cgp9HWB9VyCATO5lAABb6Ms8jdc001.png"}),n(),S,m,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/39/F6/Cgp9HWB9VyeAZ7HjAABmt5IMKLg048.png"}),n(),B])}const P=o(r,[["render",k]]);export{j as __pageData,P as default};
