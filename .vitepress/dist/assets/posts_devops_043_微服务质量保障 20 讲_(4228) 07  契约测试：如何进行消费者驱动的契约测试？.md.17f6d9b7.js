import{_ as o,j as l,o as e,g as t,k as p,h as n,s,Q as r}from"./chunks/framework.4e7d56ce.js";const w=JSON.parse('{"title":"契约测试产生的背景 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/043_微服务质量保障 20 讲/(4228) 07  契约测试：如何进行消费者驱动的契约测试？.md","filePath":"posts/devops/043_微服务质量保障 20 讲/(4228) 07  契约测试：如何进行消费者驱动的契约测试？.md","lastUpdated":1696417798000}'),c={name:"posts/devops/043_微服务质量保障 20 讲/(4228) 07  契约测试：如何进行消费者驱动的契约测试？.md"},E=s("p",null,"上一课时，我讲到了微服务架构下的组件测试，它是针对单个微服务的验收测试，虽然保障了单个微服务功能的正确性，但要想保障微服务间交互功能的正确性，就需要进行契约测试。",-1),y=s("h3",{id:"契约测试产生的背景",tabindex:"-1"},[n("契约测试产生的背景 "),s("a",{class:"header-anchor",href:"#契约测试产生的背景","aria-label":'Permalink to "契约测试产生的背景"'},"​")],-1),i=s("p",null,"在介绍契约测试之前，首先来看下什么是契约。现实世界中，契约是一种书面的约定，比如租房时需要跟房东签房屋租赁合同、买房时需要签署购房合同、换工作时你要跟公司签署劳动合同等。在信息世界中，契约也有很多使用场景，像 TCP/IP 协议簇、HTTP 协议等，只是这些协议已经成为一种技术标准，我们只需要按标准方式接入就可以实现特定的功能。",-1),u=s("p",null,[n("具体到业务场景中，契约是研发人员在技术设计时达成的约定，它规定了服务提供者和服务消费者的交互内容。可见，无论是物理世界还是信息世界，"),s("strong",null,"契约是双方或多方共识的一种约定，需要协同方共同遵守。")],-1),F=s("p",null,"在微服务架构中，服务与服务之间的交互内容更需要约定好。因为一个微服务可能与其他 N 个微服务进行交互，只有对交互内容达成共识并保持功能实现上的协同，才能实现业务功能。我们来看一个极简场景，比如我们要测试服务 A 的功能，然而需要服务 A 调用服务 B 才能完成，如图：",-1),q=s("p",null,[n("服务 A 所属的研发测试团队在测试时，太难保证服务 B 是足够稳定的，而服务 B 的不稳定会导致测试服务 A 时效率下降、测试稳定性降低。因为，当服务 B 有阻塞性的缺陷或者干脆宕机时，你需要判断是环境问题还是功能缺陷导致的，这些情况在微服务的测试过程中属于常见的痛点问题。因此，为了提升测试效率和测试稳定性，我们会通过"),s("strong",null,"服务虚拟化技术"),n("来模拟外部服务，如图：")],-1),d=s("p",null,[n("需要特别注意的是，如果此时你针对内部系统的测试用例都执行通过了，可以说明你针对服务 A的测试是通过的吗？答案是否定的。因为这里面有个"),s("strong",null,"特别重要的假设是"),n("，服务虚拟化出来的Mock B 服务与真实的 B 服务是相等的。而事实是，它们可能只在你最初进行服务虚拟化时是相等的，随着时间的推移，它们很难保持相等。")],-1),C=s("p",null,"可能你会说，保持相等不就是个信息同步的工作嘛，有那么难吗？事实上，说起来容易做起来真的挺难：在实际的研发场景下，一个研发团队需要维护若干（a）个服务，每个服务又有数十（b）个接口，每个接口又被多（c）个团队的服务所调用，可见信息同步的工作量是巨大的（a*b*c）。",-1),h=s("p",null,"所以在微服务团队中，如下情况极为常见，每一项都会导致信息不同步：服务 B 的开发团队认为某次修改对服务 A 无影响，所以没告诉服务 A 的开发团队，而实际上是有影响的；服务 B 的开发团队认为某次修改对服务 A 有影响，而服务 A 的开发团队认为无影响；服务 B 的开发团队忘记把某次修改同步到服务 A 的开发团队。",-1),g=s("p",null,[n("所以，比较好的方式就是"),s("strong",null,'通过"契约"来降低服务 A 和服务 B 的依赖'),n("。具体指导原则为：")],-1),B=s("ul",null,[s("li",null,[s("p",null,'根据服务 A 和服务 B 的交互生成一份"契约"，且契约内容的变化可以及时感知到，并生成模拟服务；')]),s("li",null,[s("p",null,"将服务之间的集成测试，变成两个测试，即真实的服务 A 和模拟服务 B 之间的测试和模拟的服务 A 和真实服务 B 之间的测试。")])],-1),v=r(`<p>契约测试示意图</p><p>理解了契约测试产生的背景，我们来讲解下微服务架构下契约测试的具体含义。</p><h3 id="契约测试介绍" tabindex="-1">契约测试介绍 <a class="header-anchor" href="#契约测试介绍" aria-label="Permalink to &quot;契约测试介绍&quot;">​</a></h3><p>在微服务架构下，契约（Contract）是指服务的消费者（Consumer）与服务的提供者（Provider）之间交互协作的约定。契约主要包括两部分。</p><ul><li><p><strong>请求（Request）</strong>：指消费者发出的请求，通常包括请求头（Header）、请求内容（URI、Path、HTTP Verb）、请求参数及取值类型和范围等。</p></li><li><p><strong>响应（Response）</strong>：指提供者返回的响应。可能包括响应的状态码（Status Word）、响应体的内容（XML/JSON） 或者错误的信息描述等。</p></li></ul><p>契约测试（Contract Test）是将契约作为中间标准，对消费者与提供者间的协作进行的验证。根据测试对象的不同，又分为两种类型：<strong>消费者驱动 和 提供者驱动。<strong>最常用的是</strong>消费者驱动的契约测试</strong>（Consumer-Driven Contract Test，简称 CDC）。核心思想是从消费者业务实现的角度出发，由消费者端定义需要的数据格式以及交互细节，生成一份契约文件。然后生产者根据契约文件来实现自己的逻辑，并在持续集成环境中持续验证该实现结果是否正确。</p><p>为什么要进行<strong>消费者驱动</strong>的契约测试呢？在微服务架构下，提供者和消费者往往是一对多的关系。比如，服务提供者提供了一个 API，该服务会被多个不同的消费者所调用，当提供者想要修改该 API 时，就需要知道该 API 当前正在被多少消费者所调用，具体是怎样调用的。否则，当提供者针对该 API 进行逻辑或字段的修改（新增、删除、更新）时，都有可能导致消费者无法正常使用。而消费者驱动的契约测试相当于把不同消费者对该 API 的需求暴露出来，形成契约文件和验证点，提供者完成功能修改后对修改结果进行验证，以保障符合消费者的预期。</p><p>工欲善其事，必先利其器。要想做某类测试，一个好的测试框架是必不可少的。在契约测试领域也有不少测试框架，其中两个比较成熟的企业级测试框架：</p><ul><li><p>Spring Cloud Contract，它是 Spring 应用程序的消费者契约测试框架；</p></li><li><p>Pact 系列框架，它是支持多种语言的框架。</p></li></ul><p>因为 Pact 的多语言特性，它也是实际工作过程中使用最频繁的框架。为了加深对契约测试的理解，我们来看一个基于 Pact 框架的契约测试的实例。</p><h3 id="契约测试实例" tabindex="-1">契约测试实例 <a class="header-anchor" href="#契约测试实例" aria-label="Permalink to &quot;契约测试实例&quot;">​</a></h3><h4 id="契约内容" tabindex="-1">契约内容 <a class="header-anchor" href="#契约内容" aria-label="Permalink to &quot;契约内容&quot;">​</a></h4><p>如下所示，服务提供者为 userservice，消费者为 ui，契约内容包含了 POST 请求 /user-service/users，传参为对象 user， 并返回 201 和创建用户的 id。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;consumer&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ui&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;provider&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;userservice&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;interactions&quot;</span><span style="color:#E1E4E8;">: [ </span></span>
<span class="line"><span style="color:#E1E4E8;">    { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;description&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;a request to POST a person&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;providerState&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;provider accepts a new person&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;request&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;method&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;/user-service/users&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;headers&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;body&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;firstName&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Arthur&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;lastName&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Dent&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">      }, </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;response&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;status&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">201</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;headers&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;body&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        }, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;matchingRules&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;$.body&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;match&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  ], </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;metadata&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;pactSpecification&quot;</span><span style="color:#E1E4E8;">: { </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2.0.0&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;consumer&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ui&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  }, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;provider&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;userservice&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  }, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;interactions&quot;</span><span style="color:#24292E;">: [ </span></span>
<span class="line"><span style="color:#24292E;">    { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;description&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;a request to POST a person&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;providerState&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;provider accepts a new person&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;request&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;method&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;/user-service/users&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;headers&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        }, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;body&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;firstName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Arthur&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;lastName&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Dent&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">      }, </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;response&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;status&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">201</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;headers&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        }, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;body&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        }, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;matchingRules&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;$.body&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;match&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  ], </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;metadata&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;pactSpecification&quot;</span><span style="color:#24292E;">: { </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2.0.0&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="spring-controller" tabindex="-1">Spring Controller <a class="header-anchor" href="#spring-controller" aria-label="Permalink to &quot;Spring Controller&quot;">​</a></h4><p>创建 Spring Controller，并遵循上述的契约；</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserController</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository; </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserController</span><span style="color:#E1E4E8;">(UserRepository </span><span style="color:#FFAB70;">userRepository</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.userRepository </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userRepository; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/user-service/users&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ResponseEntity&lt;</span><span style="color:#F97583;">IdObject</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">createUser</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Valid</span><span style="color:#E1E4E8;"> User </span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    User savedUser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(user); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ResponseEntity </span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">201</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">body</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IdObject</span><span style="color:#E1E4E8;">(savedUser.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository; </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;">(UserRepository </span><span style="color:#E36209;">userRepository</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userRepository </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userRepository; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/user-service/users&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResponseEntity&lt;</span><span style="color:#D73A49;">IdObject</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">createUser</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Valid</span><span style="color:#24292E;"> User </span><span style="color:#E36209;">user</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    User savedUser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(user); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResponseEntity </span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">status</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">201</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">      .</span><span style="color:#6F42C1;">body</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IdObject</span><span style="color:#24292E;">(savedUser.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="服务提供者测试" tabindex="-1">服务提供者测试 <a class="header-anchor" href="#服务提供者测试" aria-label="Permalink to &quot;服务提供者测试&quot;">​</a></h4><p>为了快速发现问题，最好在每次构建时都进行契约测试，可以使用 Junit 来管理测试。</p><p>要创建 Junit 测试，需要添加依赖到工程中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dependencies { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">testCompile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;au.com.dius:pact-jvm-provider-junit5_2.12:3.5.20&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Spring Boot dependencies omitted </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dependencies { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">testCompile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;au.com.dius:pact-jvm-provider-junit5_2.12:3.5.20&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Spring Boot dependencies omitted </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>创建服务提供者测试 UserControllerProviderTest，并运行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ExtendWith</span><span style="color:#E1E4E8;">(SpringExtension.class) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">webEnvironment</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SpringBootTest.WebEnvironment.DEFINED_PORT,  </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">properties</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;server.port=8080&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Provider</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;userservice&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PactFolder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../pact-angular/pacts&quot;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserControllerProviderTest</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">MockBean</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserRepository userRepository; </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">BeforeEach</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupTestTarget</span><span style="color:#E1E4E8;">(PactVerificationContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    context.</span><span style="color:#B392F0;">setTarget</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HttpTestTarget</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">TestTemplate</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">ExtendWith</span><span style="color:#E1E4E8;">(PactVerificationInvocationContextProvider.class) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pactVerificationTestTemplate</span><span style="color:#E1E4E8;">(PactVerificationContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    context.</span><span style="color:#B392F0;">verifyInteraction</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">State</span><span style="color:#E1E4E8;">({</span><span style="color:#9ECBFF;">&quot;provider accepts a new person&quot;</span><span style="color:#E1E4E8;">}) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toCreatePersonState</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    user.</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42L</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    user.</span><span style="color:#B392F0;">setFirstName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Arthur&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    user.</span><span style="color:#B392F0;">setLastName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Dent&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(userRepository.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">eq</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">42L</span><span style="color:#E1E4E8;">))).</span><span style="color:#B392F0;">thenReturn</span><span style="color:#E1E4E8;">(Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(user)); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(userRepository.</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">any</span><span style="color:#E1E4E8;">(User.class))).</span><span style="color:#B392F0;">thenReturn</span><span style="color:#E1E4E8;">(user); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ExtendWith</span><span style="color:#24292E;">(SpringExtension.class) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">webEnvironment</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SpringBootTest.WebEnvironment.DEFINED_PORT,  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">properties</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;server.port=8080&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Provider</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userservice&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PactFolder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../pact-angular/pacts&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserControllerProviderTest</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">MockBean</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserRepository userRepository; </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">BeforeEach</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupTestTarget</span><span style="color:#24292E;">(PactVerificationContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    context.</span><span style="color:#6F42C1;">setTarget</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpTestTarget</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">TestTemplate</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">ExtendWith</span><span style="color:#24292E;">(PactVerificationInvocationContextProvider.class) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pactVerificationTestTemplate</span><span style="color:#24292E;">(PactVerificationContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    context.</span><span style="color:#6F42C1;">verifyInteraction</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">State</span><span style="color:#24292E;">({</span><span style="color:#032F62;">&quot;provider accepts a new person&quot;</span><span style="color:#24292E;">}) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toCreatePersonState</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    user.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42L</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    user.</span><span style="color:#6F42C1;">setFirstName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Arthur&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    user.</span><span style="color:#6F42C1;">setLastName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Dent&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(userRepository.</span><span style="color:#6F42C1;">findById</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">eq</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">42L</span><span style="color:#24292E;">))).</span><span style="color:#6F42C1;">thenReturn</span><span style="color:#24292E;">(Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(user)); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">when</span><span style="color:#24292E;">(userRepository.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">any</span><span style="color:#24292E;">(User.class))).</span><span style="color:#6F42C1;">thenReturn</span><span style="color:#24292E;">(user); </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>测试结果如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Verifying a pact between ui and userservice </span></span>
<span class="line"><span style="color:#E1E4E8;">  Given provider accepts a </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> person </span></span>
<span class="line"><span style="color:#E1E4E8;">  a request to POST a person </span></span>
<span class="line"><span style="color:#E1E4E8;">    returns a response which </span></span>
<span class="line"><span style="color:#E1E4E8;">      has status code 201 (OK) </span></span>
<span class="line"><span style="color:#E1E4E8;">      includes headers </span></span>
<span class="line"><span style="color:#E1E4E8;">        &quot;Content</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Type</span><span style="color:#9ECBFF;">&quot; with value &quot;</span><span style="color:#E1E4E8;">application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">json</span><span style="color:#9ECBFF;">&quot; (OK) </span></span>
<span class="line"><span style="color:#9ECBFF;">      has a matching body (OK)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Verifying a pact between ui and userservice </span></span>
<span class="line"><span style="color:#24292E;">  Given provider accepts a </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> person </span></span>
<span class="line"><span style="color:#24292E;">  a request to POST a person </span></span>
<span class="line"><span style="color:#24292E;">    returns a response which </span></span>
<span class="line"><span style="color:#24292E;">      has status code 201 (OK) </span></span>
<span class="line"><span style="color:#24292E;">      includes headers </span></span>
<span class="line"><span style="color:#24292E;">        &quot;Content</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Type</span><span style="color:#032F62;">&quot; with value &quot;</span><span style="color:#24292E;">application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">json</span><span style="color:#032F62;">&quot; (OK) </span></span>
<span class="line"><span style="color:#032F62;">      has a matching body (OK)</span></span></code></pre></div><p>也可以将契约文件上传到 PactBroker 中，这样后续测试时可以直接从 PactBroker 中加载契约文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PactBroker</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">host</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;host&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">port</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;80&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">authentication</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">PactBrokerAuth</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">username</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">password</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserControllerProviderTest</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  ... </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PactBroker</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">host</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;host&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">port</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;80&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">protocol</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">authentication</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">PactBrokerAuth</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">username</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserControllerProviderTest</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  ... </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本节课我首先讲解了契约的定义，通俗地讲，它是双方或多方共识的一种约定，需要协同方共同遵守。而在微服务架构下，<strong>契约（Contract）是指服务的消费者（Consumer）与服务的提供者（Provider）之间交互协作的约定，主要包括请求和响应两部分。</strong></p><p>紧接着讲解了微服务架构下跨服务测试的痛点和难点，因而引入了契约测试的概念，它的指导思想是<strong>通过&quot;契约&quot;来降低服务和服务之间的依赖</strong> ，即，将契约作为中间标准，对消费者与提供者间的协作进行的验证。根据测试对象的不同，契约测试分为两种，但最常用的契约测试类型是<strong>消费者驱动的契约测试</strong> （Consumer-Driven Contract Test，简称 CDC）。核心思想是<strong>从消费者业务实现的角度出发</strong>，由消费者端定义需要的数据格式以及交互细节，生成一份契约文件。然后提供者根据契约文件来实现自己的逻辑，并在持续集成环境中持续验证该实现结果是否正确。契约测试框架也有多种，但最常见的框架有 Spring Cloud Contract 和 Pact，其中 Pact 框架更为流行。</p><p>最后给出了基于 Pact 框架的契约测试实例的大体步骤，并在文稿下方给出了示例代码地址，感兴趣的同学可以自行学习。</p><p>你所负责的项目或服务，是否进行过契约测试呢？如果有，是哪种类型的契约测试，具体的进展是怎样的？欢迎在留言区评论。同时欢迎你能把这篇文章分享给你的同学、朋友和同事，大家一起交流。</p><blockquote><p>相关链接</p><p><a href="https://www.martinfowler.com/articles/microservice-testing/" target="_blank" rel="noreferrer">https://www.martinfowler.com/articles/microservice-testing/</a></p><p><a href="https://reflectoring.io/7-reasons-for-consumer-driven-contracts/" target="_blank" rel="noreferrer">https://reflectoring.io/7-reasons-for-consumer-driven-contracts/</a></p><p>契约测试框架</p><p><a href="https://docs.pact.io/" target="_blank" rel="noreferrer">https://docs.pact.io/</a></p><p><a href="https://spring.io/projects/spring-cloud-contract" target="_blank" rel="noreferrer">https://spring.io/projects/spring-cloud-contract</a></p><p><a href="https://www.infoq.com/news/2019/02/contract-testing-microservices/" target="_blank" rel="noreferrer">https://www.infoq.com/news/2019/02/contract-testing-microservices/</a></p><p>实例</p><p><a href="https://github.com/thombergs/code-examples/tree/master/pact/pact-spring-provider" target="_blank" rel="noreferrer">https://github.com/thombergs/code-examples/tree/master/pact/pact-spring-provider</a></p><p><a href="https://reflectoring.io/consumer-driven-contract-provider-pact-spring/" target="_blank" rel="noreferrer">https://reflectoring.io/consumer-driven-contract-provider-pact-spring/</a></p></blockquote>`,33);function m(A,_,b,D,P,f){const a=l("Image");return e(),t("div",null,[E,y,i,u,F,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/3E/3C/CgqCHl8rwdWARQ7JAAAlzqKNM8A650.png"}),q,p(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/3E/3C/CgqCHl8rwd2AHsPJAAAqXjJCb3o139.png"}),d,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/3E/3C/CgqCHl8rweeAaDkdAABVWLFzSS8274.png"}),C,h,g,B,p(a,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image/M00/3E/31/Ciqc1F8rwi2AD_NcAABULdvxmSY140.png"}),n(),v])}const k=o(c,[["render",m]]);export{w as __pageData,k as default};
