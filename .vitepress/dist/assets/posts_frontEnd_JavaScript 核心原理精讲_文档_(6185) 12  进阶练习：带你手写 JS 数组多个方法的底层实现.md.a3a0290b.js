import{_ as s,o as n,h as a,Q as l}from"./chunks/framework.d3daa342.js";const h=JSON.parse('{"title":"12进阶练习：带你手写JS数组多个方法的底层实现","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6185) 12  进阶练习：带你手写 JS 数组多个方法的底层实现.md","filePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6185) 12  进阶练习：带你手写 JS 数组多个方法的底层实现.md","lastUpdated":1696682708000}'),p={name:"posts/frontEnd/JavaScript 核心原理精讲_文档/(6185) 12  进阶练习：带你手写 JS 数组多个方法的底层实现.md"},o=l(`<h1 id="_12进阶练习-带你手写js数组多个方法的底层实现" tabindex="-1">12进阶练习：带你手写JS数组多个方法的底层实现 <a class="header-anchor" href="#_12进阶练习-带你手写js数组多个方法的底层实现" aria-label="Permalink to &quot;12进阶练习：带你手写JS数组多个方法的底层实现&quot;">​</a></h1><p>我们都知道，比较常用的数组方法有 push、pop、slice、map 和 reduce 等。上一讲我带你剖析了 sort 方法以及 V8 源码中关于排序的内容，本讲则会围绕这几个常用方法，并结合 V8 的源代码带你手写这些方法的底层实现。</p><p>那么，为了方便你更好地理解本讲的内容，在课程开始前请你先回想一下：</p><ol><li><p>reduce 方法里面的参数都是什么作用？</p></li><li><p>push 和 pop 的底层逻辑是什么样的呢？</p></li></ol><p>带着思考，我们开始今天的学习。</p><h3 id="push-方法的底层实现" tabindex="-1">push 方法的底层实现 <a class="header-anchor" href="#push-方法的底层实现" aria-label="Permalink to &quot;push 方法的底层实现&quot;">​</a></h3><p>为了更好地实现 push 的底层方法，你可以先去 ECMA 的官网去查一下关于 push 的基本描述（链接：<a href="https://tc39.es/ecma262/#sec-array.prototype.push" target="_blank" rel="noreferrer">ECMA 数组的 push 标准</a>），我们看下其英文的描述，如下所示。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">When the push method is called with zero or more arguments, the following steps are taken:</span></span>
<span class="line"><span style="color:#E1E4E8;">1. Let O be ? ToObject(this value).</span></span>
<span class="line"><span style="color:#E1E4E8;">2. Let len be ? LengthOfArrayLike(O).</span></span>
<span class="line"><span style="color:#E1E4E8;">3. Let argCount be the number of elements in items.</span></span>
<span class="line"><span style="color:#E1E4E8;">4. If len + argCount &gt; 2^53 - 1, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#E1E4E8;">5. For each element E of items, do</span></span>
<span class="line"><span style="color:#E1E4E8;">  a. Perform ? Set(O, ! ToString(F(len)), E, true).</span></span>
<span class="line"><span style="color:#E1E4E8;">  b. Set len to len + 1.</span></span>
<span class="line"><span style="color:#E1E4E8;">6. Perform ? Set(O, &quot;length&quot;, F(len), true).</span></span>
<span class="line"><span style="color:#E1E4E8;">7. Return F(len).</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">When the push method is called with zero or more arguments, the following steps are taken:</span></span>
<span class="line"><span style="color:#24292E;">1. Let O be ? ToObject(this value).</span></span>
<span class="line"><span style="color:#24292E;">2. Let len be ? LengthOfArrayLike(O).</span></span>
<span class="line"><span style="color:#24292E;">3. Let argCount be the number of elements in items.</span></span>
<span class="line"><span style="color:#24292E;">4. If len + argCount &gt; 2^53 - 1, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#24292E;">5. For each element E of items, do</span></span>
<span class="line"><span style="color:#24292E;">  a. Perform ? Set(O, ! ToString(F(len)), E, true).</span></span>
<span class="line"><span style="color:#24292E;">  b. Set len to len + 1.</span></span>
<span class="line"><span style="color:#24292E;">6. Perform ? Set(O, &quot;length&quot;, F(len), true).</span></span>
<span class="line"><span style="color:#24292E;">7. Return F(len).</span></span></code></pre></div><p>从上面的描述可以看到边界判断逻辑以及实现的思路，根据这段英文，我们将其转换为容易理解代码，如下所示。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">items</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// ecma 中提到的先转换为对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> argCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> items.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2 ^ 53 - 1 为JS能表示的最大正整数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (len </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> argCount </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The number of array is over the max value&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> argCount; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">[len </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> items[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> argCount;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newLength;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> newLength;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">items</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// ecma 中提到的先转换为对象</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> argCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> items.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 2 ^ 53 - 1 为JS能表示的最大正整数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> argCount </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">53</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The number of array is over the max value&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> argCount; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">[len </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> items[i];</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> argCount;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newLength;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> newLength;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上面的代码可以看出，关键点就在于给数组本身循环添加新的元素 item，然后调整数组的长度 length 为最新的长度，即可完成 push 的底层实现。</p><p>其中关于长度的部分需要做无符号位移，无符号位移在很多源码中你都会看到。关于为什么一些变量要进行无符号位移，你可以自己研究一下，比如在 Stack Overflow 中有一些高票的回答，这里就不占用篇幅了。下面我们再看来一下 pop 的实现。</p><h3 id="pop-方法的底层实现" tabindex="-1">pop 方法的底层实现 <a class="header-anchor" href="#pop-方法的底层实现" aria-label="Permalink to &quot;pop 方法的底层实现&quot;">​</a></h3><p>同样我们也一起来看下 pop 的底层实现，你也可以先去 ECMA 的官网去查一下关于 pop 的基本描述（链接：<a href="https://tc39.es/ecma262/#sec-array.prototype.pop" target="_blank" rel="noreferrer">ECMA 数组的 pop 标准</a>），我们还是同样看下英文的描述。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">When the pop method is called, the following steps are taken:</span></span>
<span class="line"><span style="color:#E1E4E8;">1. Let O be ? ToObject(this value).</span></span>
<span class="line"><span style="color:#E1E4E8;">2. Let len be ? LengthOfArrayLike(O).</span></span>
<span class="line"><span style="color:#E1E4E8;">3. If len = 0, then</span></span>
<span class="line"><span style="color:#E1E4E8;">    Perform ? Set(O, &quot;length&quot;, +0F, true).</span></span>
<span class="line"><span style="color:#E1E4E8;">    Return undefined.</span></span>
<span class="line"><span style="color:#E1E4E8;">4. Else,</span></span>
<span class="line"><span style="color:#E1E4E8;">  Assert: len &gt; 0.</span></span>
<span class="line"><span style="color:#E1E4E8;">  Let newLen be F(len - 1).</span></span>
<span class="line"><span style="color:#E1E4E8;">  Let index be ! ToString(newLen).</span></span>
<span class="line"><span style="color:#E1E4E8;">  Let element be ? Get(O, index).</span></span>
<span class="line"><span style="color:#E1E4E8;">  Perform ? DeletePropertyOrThrow(O, index).</span></span>
<span class="line"><span style="color:#E1E4E8;">  Perform ? Set(O, &quot;length&quot;, newLen, true).</span></span>
<span class="line"><span style="color:#E1E4E8;">  Return element.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">When the pop method is called, the following steps are taken:</span></span>
<span class="line"><span style="color:#24292E;">1. Let O be ? ToObject(this value).</span></span>
<span class="line"><span style="color:#24292E;">2. Let len be ? LengthOfArrayLike(O).</span></span>
<span class="line"><span style="color:#24292E;">3. If len = 0, then</span></span>
<span class="line"><span style="color:#24292E;">    Perform ? Set(O, &quot;length&quot;, +0F, true).</span></span>
<span class="line"><span style="color:#24292E;">    Return undefined.</span></span>
<span class="line"><span style="color:#24292E;">4. Else,</span></span>
<span class="line"><span style="color:#24292E;">  Assert: len &gt; 0.</span></span>
<span class="line"><span style="color:#24292E;">  Let newLen be F(len - 1).</span></span>
<span class="line"><span style="color:#24292E;">  Let index be ! ToString(newLen).</span></span>
<span class="line"><span style="color:#24292E;">  Let element be ? Get(O, index).</span></span>
<span class="line"><span style="color:#24292E;">  Perform ? DeletePropertyOrThrow(O, index).</span></span>
<span class="line"><span style="color:#24292E;">  Perform ? Set(O, &quot;length&quot;, newLen, true).</span></span>
<span class="line"><span style="color:#24292E;">  Return element.</span></span></code></pre></div><p>从上面的描述可以看到边界判断逻辑以及实现的思路，根据上面的英文，我们同样将其转换为可以理解的代码，如下所示。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (len </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  len </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">[len];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">[len];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> len;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  len </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">[len];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">[len];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其核心思路还是在于删掉数组自身的最后一个元素，index 就是数组的 len 长度，然后更新最新的长度，最后返回的元素的值，即可达到想要的效果。另外就是在当长度为 0 的时候，如果执行 pop 操作，返回的是 undefined，需要做一下特殊处理。</p><p>看完了 pop 的实现，我们再来看一下 map 方法的底层逻辑。</p><h3 id="map-方法的底层实现" tabindex="-1">map 方法的底层实现 <a class="header-anchor" href="#map-方法的底层实现" aria-label="Permalink to &quot;map 方法的底层实现&quot;">​</a></h3><p>同样你可以去 ECMA 的官网去查一下关于 map 的基本描述（链接：<a href="https://tc39.es/ecma262/#sec-array.prototype.map" target="_blank" rel="noreferrer">ECMA 数组的 map 标准</a>），请看英文的表述。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">When the map method is called with one or two arguments, the following steps are taken:</span></span>
<span class="line"><span style="color:#E1E4E8;">1. Let O be ? ToObject(this value).</span></span>
<span class="line"><span style="color:#E1E4E8;">2. Let len be ? LengthOfArrayLike(O).</span></span>
<span class="line"><span style="color:#E1E4E8;">3. If IsCallable(callbackfn) is false, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#E1E4E8;">4. Let A be ? ArraySpeciesCreate(O, len).</span></span>
<span class="line"><span style="color:#E1E4E8;">5. Let k be 0.</span></span>
<span class="line"><span style="color:#E1E4E8;">6. Repeat, while k </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;"> len,</span></span>
<span class="line"><span style="color:#E1E4E8;">    a. Let Pk be ! ToString(F(k)).</span></span>
<span class="line"><span style="color:#E1E4E8;">    b. Let kPresent be ? HasProperty(O, Pk).</span></span>
<span class="line"><span style="color:#E1E4E8;">    c. If kPresent is true, then</span></span>
<span class="line"><span style="color:#E1E4E8;">        Let kValue be ? Get(O, Pk).</span></span>
<span class="line"><span style="color:#E1E4E8;">        Let mappedValue be ? Call(callbackfn, thisArg, </span><span style="color:#FDAEB7;font-style:italic;">&lt;&lt;</span><span style="color:#E1E4E8;"> kValue, F(k), O &gt;&gt;).</span></span>
<span class="line"><span style="color:#E1E4E8;">        Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).</span></span>
<span class="line"><span style="color:#E1E4E8;">    d. Set k to k + 1.</span></span>
<span class="line"><span style="color:#E1E4E8;">7. Return A.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">When the map method is called with one or two arguments, the following steps are taken:</span></span>
<span class="line"><span style="color:#24292E;">1. Let O be ? ToObject(this value).</span></span>
<span class="line"><span style="color:#24292E;">2. Let len be ? LengthOfArrayLike(O).</span></span>
<span class="line"><span style="color:#24292E;">3. If IsCallable(callbackfn) is false, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#24292E;">4. Let A be ? ArraySpeciesCreate(O, len).</span></span>
<span class="line"><span style="color:#24292E;">5. Let k be 0.</span></span>
<span class="line"><span style="color:#24292E;">6. Repeat, while k </span><span style="color:#B31D28;font-style:italic;">&lt;</span><span style="color:#24292E;"> len,</span></span>
<span class="line"><span style="color:#24292E;">    a. Let Pk be ! ToString(F(k)).</span></span>
<span class="line"><span style="color:#24292E;">    b. Let kPresent be ? HasProperty(O, Pk).</span></span>
<span class="line"><span style="color:#24292E;">    c. If kPresent is true, then</span></span>
<span class="line"><span style="color:#24292E;">        Let kValue be ? Get(O, Pk).</span></span>
<span class="line"><span style="color:#24292E;">        Let mappedValue be ? Call(callbackfn, thisArg, </span><span style="color:#B31D28;font-style:italic;">&lt;&lt;</span><span style="color:#24292E;"> kValue, F(k), O &gt;&gt;).</span></span>
<span class="line"><span style="color:#24292E;">        Perform ? CreateDataPropertyOrThrow(A, Pk, mappedValue).</span></span>
<span class="line"><span style="color:#24292E;">    d. Set k to k + 1.</span></span>
<span class="line"><span style="color:#24292E;">7. Return A.</span></span></code></pre></div><p>同样的，根据上面的英文，我们将其转换为可理解的代码，如下所示。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callbackFn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">thisArg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cannot read property &#39;map&#39; of null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(callbackfn) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[object Function]&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">(callbackfn </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; is not a function&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> thisArg;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(len);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> len; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> kValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">[k];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 依次传入this, 当前项，当前索引，整个数组</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> mappedValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callbackfn.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">, KValue, k, </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">[k] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mappedValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">callbackFn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">thisArg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Cannot read property &#39;map&#39; of null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(callbackfn) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[object Function]&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(callbackfn </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; is not a function&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thisArg;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(len);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> kValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">[k];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 依次传入this, 当前项，当前索引，整个数组</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> mappedValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> callbackfn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">, KValue, k, </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">[k] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mappedValue;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了上面实现 push 和 pop 的基础思路，map 的实现也不会太难了，基本就是再多加一些判断，循环遍历实现 map 的思路，将处理过后的 mappedValue 赋给一个新定义的数组 A，最后返回这个新数组 A，并不改变原数组的值。</p><p>我们在&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=601#/detail/pc?id=6180" target="_blank" rel="noreferrer">07 | 数组原理（上）：帮你梳理眼花缭乱的数组 API</a>&quot;中也介绍过数据的方法分类，遍历类型的方法最后返回的都是一个新数组，并不改变原有数组的值，这点你需要牢记。</p><p>最后我们来看看 reduce 的实现。</p><h3 id="reduce-方法的底层实现" tabindex="-1">reduce 方法的底层实现 <a class="header-anchor" href="#reduce-方法的底层实现" aria-label="Permalink to &quot;reduce 方法的底层实现&quot;">​</a></h3><p>ECMA 官网关于 reduce 的基本描述（链接：<a href="https://tc39.es/ecma262/#sec-array.prototype.pop" target="_blank" rel="noreferrer">ECMA 数组的 pop 标准</a>），如下所示。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">When the reduce method is called with one or two arguments, the following steps are taken:</span></span>
<span class="line"><span style="color:#E1E4E8;">1. Let O be ? ToObject(this value).</span></span>
<span class="line"><span style="color:#E1E4E8;">2. Let len be ? LengthOfArrayLike(O).</span></span>
<span class="line"><span style="color:#E1E4E8;">3. If IsCallable(callbackfn) is false, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#E1E4E8;">4. If len = 0 and initialValue is not present, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#E1E4E8;">5. Let k be 0.</span></span>
<span class="line"><span style="color:#E1E4E8;">6. Let accumulator be undefined.</span></span>
<span class="line"><span style="color:#E1E4E8;">7. If initialValue is present, then</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set accumulator to initialValue.</span></span>
<span class="line"><span style="color:#E1E4E8;">8. Else,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Let kPresent be false.</span></span>
<span class="line"><span style="color:#E1E4E8;">    Repeat, while kPresent is false and k </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;"> len,</span></span>
<span class="line"><span style="color:#E1E4E8;">        Let Pk be ! ToString(F(k)).</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set kPresent to ? HasProperty(O, Pk).</span></span>
<span class="line"><span style="color:#E1E4E8;">        If kPresent is true, then</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set accumulator to ? Get(O, Pk).</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set k to k + 1.</span></span>
<span class="line"><span style="color:#E1E4E8;">    If kPresent is false, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#E1E4E8;">9. Repeat, while k </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;"> len,</span></span>
<span class="line"><span style="color:#E1E4E8;">    Let Pk be ! ToString(F(k)).</span></span>
<span class="line"><span style="color:#E1E4E8;">    Let kPresent be ? HasProperty(O, Pk).</span></span>
<span class="line"><span style="color:#E1E4E8;">    If kPresent is true, then</span></span>
<span class="line"><span style="color:#E1E4E8;">        Let kValue be ? Get(O, Pk).</span></span>
<span class="line"><span style="color:#E1E4E8;">        Set accumulator to ? Call(callbackfn, undefined, </span><span style="color:#FDAEB7;font-style:italic;">&lt;&lt;</span><span style="color:#E1E4E8;"> accumulator, kValue, F(k), O &gt;&gt;).</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set k to k + 1.</span></span>
<span class="line"><span style="color:#E1E4E8;">10. Return accumulator.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">When the reduce method is called with one or two arguments, the following steps are taken:</span></span>
<span class="line"><span style="color:#24292E;">1. Let O be ? ToObject(this value).</span></span>
<span class="line"><span style="color:#24292E;">2. Let len be ? LengthOfArrayLike(O).</span></span>
<span class="line"><span style="color:#24292E;">3. If IsCallable(callbackfn) is false, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#24292E;">4. If len = 0 and initialValue is not present, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#24292E;">5. Let k be 0.</span></span>
<span class="line"><span style="color:#24292E;">6. Let accumulator be undefined.</span></span>
<span class="line"><span style="color:#24292E;">7. If initialValue is present, then</span></span>
<span class="line"><span style="color:#24292E;">    Set accumulator to initialValue.</span></span>
<span class="line"><span style="color:#24292E;">8. Else,</span></span>
<span class="line"><span style="color:#24292E;">    Let kPresent be false.</span></span>
<span class="line"><span style="color:#24292E;">    Repeat, while kPresent is false and k </span><span style="color:#B31D28;font-style:italic;">&lt;</span><span style="color:#24292E;"> len,</span></span>
<span class="line"><span style="color:#24292E;">        Let Pk be ! ToString(F(k)).</span></span>
<span class="line"><span style="color:#24292E;">        Set kPresent to ? HasProperty(O, Pk).</span></span>
<span class="line"><span style="color:#24292E;">        If kPresent is true, then</span></span>
<span class="line"><span style="color:#24292E;">        Set accumulator to ? Get(O, Pk).</span></span>
<span class="line"><span style="color:#24292E;">        Set k to k + 1.</span></span>
<span class="line"><span style="color:#24292E;">    If kPresent is false, throw a TypeError exception.</span></span>
<span class="line"><span style="color:#24292E;">9. Repeat, while k </span><span style="color:#B31D28;font-style:italic;">&lt;</span><span style="color:#24292E;"> len,</span></span>
<span class="line"><span style="color:#24292E;">    Let Pk be ! ToString(F(k)).</span></span>
<span class="line"><span style="color:#24292E;">    Let kPresent be ? HasProperty(O, Pk).</span></span>
<span class="line"><span style="color:#24292E;">    If kPresent is true, then</span></span>
<span class="line"><span style="color:#24292E;">        Let kValue be ? Get(O, Pk).</span></span>
<span class="line"><span style="color:#24292E;">        Set accumulator to ? Call(callbackfn, undefined, </span><span style="color:#B31D28;font-style:italic;">&lt;&lt;</span><span style="color:#24292E;"> accumulator, kValue, F(k), O &gt;&gt;).</span></span>
<span class="line"><span style="color:#24292E;">    Set k to k + 1.</span></span>
<span class="line"><span style="color:#24292E;">10. Return accumulator.</span></span></code></pre></div><p>还是将其转换为我们自己的代码，如下所示。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callbackfn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">initialValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 异常处理，和 map 类似</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Cannot read property &#39;reduce&#39; of null&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理回调类型异常</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(callbackfn) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[object Function]&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">(callbackfn </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; is not a function&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> accumulator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> initialValue;  </span><span style="color:#6A737D;">// reduce方法第二个参数作为累加器的初始值</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (accumulator </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Each element of the array is empty&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 初始值不传的处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> len ; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        accumulator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">[k];</span></span>
<span class="line"><span style="color:#E1E4E8;">        k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(;k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> len; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 注意 reduce 的核心累加器</span></span>
<span class="line"><span style="color:#E1E4E8;">      accumulator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callbackfn.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, accumulator, </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">[k], </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> accumulator;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">callbackfn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">initialValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 异常处理，和 map 类似</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Cannot read property &#39;reduce&#39; of null&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理回调类型异常</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(callbackfn) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[object Function]&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(callbackfn </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; is not a function&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> accumulator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> initialValue;  </span><span style="color:#6A737D;">// reduce方法第二个参数作为累加器的初始值</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (accumulator </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Each element of the array is empty&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 初始值不传的处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len ; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        accumulator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">[k];</span></span>
<span class="line"><span style="color:#24292E;">        k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(;k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 注意 reduce 的核心累加器</span></span>
<span class="line"><span style="color:#24292E;">      accumulator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> callbackfn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, accumulator, </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">[k], </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> accumulator;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>根据上面的代码及注释，有几个关键点你需要重点关注：</p><ol><li><p>初始值默认值不传的特殊处理；</p></li><li><p>累加器以及 callbackfn 的处理逻辑。</p></li></ol><p>这两个关键问题处理好，其他的地方和上面几个方法实现的思路是基本类似的，你要学会举一反三。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>到这里，本讲的内容就先告一段落了。这一讲内容虽少，但却是你必须要掌握的内容。</p><p>这一讲中，我把 JS 的 push 、pop、map、reduce 的底层方法挨个带你实现了一遍，希望你能对此形成一套自己的思路。我所提供的实现代码，虽然不能完全和 V8 源码中实现的代码媲美，但是在正常的使用中，你如果自己能实现到这个程度，基本也可以满足要求了。</p><p>讲到这里，我再贴一下 V8 数组关于各种方法的实现源码地址，如下表所示。</p><table><thead><tr><th style="text-align:center;">数组方法</th><th>V8 源码地址</th></tr></thead><tbody><tr><td style="text-align:center;">pop</td><td><a href="https://github.com/v8/v8/blob/98d735069d0937f367852ed968a33210ceb527c2/src/js/array.js#L394" target="_blank" rel="noreferrer">V8 源码 pop 的实现</a></td></tr><tr><td style="text-align:center;">push</td><td><a href="https://github.com/v8/v8/blob/98d735069d0937f367852ed968a33210ceb527c2/src/js/array.js#L414" target="_blank" rel="noreferrer">V8 源码 push 的实现</a></td></tr><tr><td style="text-align:center;">map</td><td><a href="https://github.com/v8/v8/blob/98d735069d0937f367852ed968a33210ceb527c2/src/js/array.js#L1036" target="_blank" rel="noreferrer">V8 源码 map 的实现</a></td></tr><tr><td style="text-align:center;">slice</td><td><a href="https://github.com/v8/v8/blob/98d735069d0937f367852ed968a33210ceb527c2/src/js/array.js#L586" target="_blank" rel="noreferrer">V8 源码 slice 的实现</a></td></tr><tr><td style="text-align:center;">filter</td><td><a href="https://github.com/v8/v8/blob/98d735069d0937f367852ed968a33210ceb527c2/src/js/array.js#L1024" target="_blank" rel="noreferrer">V8 源码 filter 的实现</a></td></tr><tr><td style="text-align:center;">...</td><td>...</td></tr></tbody></table><p>关于本讲内容没有提到的代码及方法，你可以根据自己的兴趣，尝试着实现其中的某个方法。</p><p>同时也希望你能够多思考日常工作中都有哪些经常用到的 JS 方法，并且去研究其底层源代码的实现逻辑，找机会自己实现一遍，来整体提升你的 JavaScript 的编程能力和对底层的理解能力。</p><p>下一讲我们将会进入一个全新的模块------JS 的异步编程篇，期待你能从中学习到更多的东西。每天进步一点点，加油！</p>`,43),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{h as __pageData,d as default};
