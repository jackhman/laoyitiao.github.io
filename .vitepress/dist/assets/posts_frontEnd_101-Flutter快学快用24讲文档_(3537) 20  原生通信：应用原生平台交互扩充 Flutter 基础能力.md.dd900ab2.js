import{_ as o,j as e,o as t,g as r,k as l,h as n,Q as p,s}from"./chunks/framework.4e7d56ce.js";const f=JSON.parse('{"title":"使用场景 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3537) 20  原生通信：应用原生平台交互扩充 Flutter 基础能力.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3537) 20  原生通信：应用原生平台交互扩充 Flutter 基础能力.md","lastUpdated":1696417798000}'),c={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3537) 20  原生通信：应用原生平台交互扩充 Flutter 基础能力.md"},E=p('<p>本课时介绍 Flutter 如何与原生平台进行通信交互方式，让 Flutter 支持各种原生平台的基础能力。</p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p>由于 Flutter 是一个跨平台 UI 库，因此不支持原生系统的功能，例如：</p><ul><li><p>系统通知；</p></li><li><p>系统感应、相机、电量、LBS、声音、语音识别；</p></li><li><p>分享、打开其他 App 或者打开自身 App；</p></li><li><p>设备信息、本地存储。</p></li></ul><p>以上只列举了部分，其实主要是和系统服务调用相关的功能，大部分都不支持。这时候就需要原生平台提供一些基础服务给 Flutter 来调用。我们先来看下 Flutter 与 Android 和 iOS 是怎么进行消息传递和接收的。</p><h3 id="交互原理" tabindex="-1">交互原理 <a class="header-anchor" href="#交互原理" aria-label="Permalink to &quot;交互原理&quot;">​</a></h3><p>在 Flutter 中存在三种与原生平台进行交互的方法： MethodChannel 、BasicMessageChannel 和 EventChannel 。这三者在底层是没有区别的，都是基于 binaryMessenger 来实现。不过在应用层中的使用场景有所区别。</p><ul><li><p>MethodChannel ，该方法需要创建一个消息通道句柄，然后再利用其中的 invokeMethod 来调用原生平台，原生平台根据传递的方法和参数，执行并获得具体的异步响应结果。该方法支持两个参数，一个是方法名，一个是方法参数，因此更适合去调用原生客户端的函数方法；</p></li><li><p>BasicMessageChannel ，该方法需要创建一个消息通道句柄，然后再利用其中的 send 方法发送数据给到原生平台.原生平台接收到数据后，可以针对接收数据响应返回，也可以在接收数据后，不做任何返回。因此该方法更适合向原生平台传递数据，而不是功能调用；</p></li><li><p>EventChannel ，该方法是数据流传递，适用于大文件或者数据流媒体等的应用。发送方不会有响应，但是它会通过调用 MethodChannel 来通知原生平台，比如开始监听数据接收会发送 listen ，取消了数据接收会发送 cancel。</p></li></ul><p>在实际应用中三种方法都是有一定场景，大部分情况下还是基于 MethodChannel 来实现，比如前面我们所应用到的插件：FlutterWebviewPlugin 和 PathProviderPlugin ，当然其中也涉及 EventChannel 的应用，比如 UniLinksPlugin 插件。接下来我们具体看下整个消息交互的流转过程。</p><h4 id="交互实现过程" tabindex="-1">交互实现过程 <a class="header-anchor" href="#交互实现过程" aria-label="Permalink to &quot;交互实现过程&quot;">​</a></h4><p>根据官网的知识以及我自己的一个理解，可以将整个过程总结为下图 1 。</p>',11),y=s("p",null,"图 1 消息交互流程图",-1),i=s("p",null,"从图 1 中我们可以看到，所有的消息都是通过 binaryMessenger 来传递，Flutter 的底层是 C 和 C++ 实现的，binaryMessenger 就是通过 C++ 底层库来调用平台相关的功能，数据返回也是原路处理返回。上面的调用过程，就是 Flutter 官网三层架构（如图 2 所示）的一个典型例子。",-1),F=s("p",null,"图 2 Flutter 三层架构",-1),d=s("h3",{id:"应用示例",tabindex:"-1"},[n("应用示例 "),s("a",{class:"header-anchor",href:"#应用示例","aria-label":'Permalink to "应用示例"'},"​")],-1),u=s("p",null,"原理分析清晰后，我们再基于我们当前 Two You Friend App 项目实践一下这个功能。主要需求就是能够在 Flutter 中查看当前电量信息，具体效果如如图 3 所示。",-1),C=p(`<p>图 3 获取电量界面效果图</p><p>从图中我们可以看到在 Android 中是可以正常获取到当前电量信息，但是在 iOS 中是无法获取（主要原因是在虚拟机上 iOS 不支持 device.batteryState 方法）。接下来我们看下具体的代码实现逻辑。</p><h4 id="增加测试页面" tabindex="-1">增加测试页面 <a class="header-anchor" href="#增加测试页面" aria-label="Permalink to &quot;增加测试页面&quot;">​</a></h4><p>在项目中的 lib/pages 下创建一个 test_page 文件夹，在文件夹中创建 index.dart 。因为需要使用到 MethodChannel ，所以在头部增加两个库的引入，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/material.dart&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:flutter/services.dart&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/material.dart&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:flutter/services.dart&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>接下来实现 TestPageIndex 这个类，并在该类中应用 MethodChannel 创建一个消息句柄，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 测试页面 </span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TestPageIndex</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatelessWidget</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 构造函数 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TestPageIndex</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 创建数据传输句柄 </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> platform </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MethodChannel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;com.example.two_you_friend&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// @todo</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 测试页面 </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TestPageIndex</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatelessWidget</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 构造函数 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TestPageIndex</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 创建数据传输句柄 </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> platform </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MethodChannel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;com.example.two_you_friend&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// @todo</span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码创建了一个唯一的消息名句柄，为了避免重复性，这里最好的方式就是使用包的名称加上功能。接下来我们实现 build 逻辑。由于调用原生的 invokeMethod 是一个异步消息返回的方法，因此这里需要使用 FutureBuilder<code>&lt;Widget&gt;</code> 来实现，具体代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FutureBuilder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;">&gt;( </span></span>
<span class="line"><span style="color:#E1E4E8;">      future</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_getBatteryLevel</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">      builder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">AsyncSnapshot</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;">&gt; snapshot) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(snapshot.error </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">            child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonError</span><span style="color:#E1E4E8;">(), </span></span>
<span class="line"><span style="color:#E1E4E8;">          ); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> snapshot.data, </span></span>
<span class="line"><span style="color:#E1E4E8;">        ); </span></span>
<span class="line"><span style="color:#E1E4E8;">      }); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FutureBuilder</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;">&gt;( </span></span>
<span class="line"><span style="color:#24292E;">      future</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_getBatteryLevel</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">      builder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">AsyncSnapshot</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;">&gt; snapshot) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(snapshot.error </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">            child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonError</span><span style="color:#24292E;">(), </span></span>
<span class="line"><span style="color:#24292E;">          ); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> snapshot.data, </span></span>
<span class="line"><span style="color:#24292E;">        ); </span></span>
<span class="line"><span style="color:#24292E;">      }); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的代码调用了一个异步函数 _getBatteryLevel ，正确返回则显示相应的组件，异常则显示通用报错页面，最后再来看下 _getBatteryLevel 的实现逻辑。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">_getBatteryLevel</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> batteryLevel; </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> platform.</span><span style="color:#B392F0;">invokeMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;getBatteryLevel&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    batteryLevel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Battery level at $</span><span style="color:#79B8FF;">result</span><span style="color:#9ECBFF;"> % .&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(batteryLevel); </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PlatformException</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(e.message); </span></span>
<span class="line"><span style="color:#E1E4E8;">    batteryLevel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Failed to get battery level: &#39;\${</span><span style="color:#79B8FF;">e</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">message</span><span style="color:#9ECBFF;">}&#39;.&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Center</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">    child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(batteryLevel), </span></span>
<span class="line"><span style="color:#E1E4E8;">  ); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">_getBatteryLevel</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> batteryLevel; </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> platform.</span><span style="color:#6F42C1;">invokeMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;getBatteryLevel&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    batteryLevel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Battery level at $</span><span style="color:#005CC5;">result</span><span style="color:#032F62;"> % .&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(batteryLevel); </span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">on</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PlatformException</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(e.message); </span></span>
<span class="line"><span style="color:#24292E;">    batteryLevel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Failed to get battery level: &#39;\${</span><span style="color:#005CC5;">e</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">message</span><span style="color:#032F62;">}&#39;.&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Center</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(batteryLevel), </span></span>
<span class="line"><span style="color:#24292E;">  ); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>创建一个空字符串，然后通过 platform.invokeMethod 发送给原生平台，原生平台异步返回消息得到 result 结果，由于 invokeMethod 是一个范型，因此可以将结果设置为 int 类型。这里使用 try catch 的目的是避免因为原生平台不支持导致的异常，比如 iOS 就不支持在虚拟机上调用该 API 。</p><h4 id="增加页面跳转" tabindex="-1">增加页面跳转 <a class="header-anchor" href="#增加页面跳转" aria-label="Permalink to &quot;增加页面跳转&quot;">​</a></h4><p>页面实现完成后，我们再去 router 中增加该页面的配置。首先使用 import 引入该页面，然后再修改 lib/router.dart 在 routerMapping 中增加一项。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructRouter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">TestPageIndex</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">),</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructRouter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">TestPageIndex</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span></code></pre></div><p>完成路由配置后，再前往 lib/widgets/menu/draw.dart 文件，在 ListView 下的 children 中增加一个新的菜单，代码配置如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">ListTile</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">  leading</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.person), </span></span>
<span class="line"><span style="color:#E1E4E8;">  title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;原生测试&#39;</span><span style="color:#E1E4E8;">), </span></span>
<span class="line"><span style="color:#E1E4E8;">  onTap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Navigator</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">(context); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">redirect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tyfapp://test&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span></span>
<span class="line"><span style="color:#E1E4E8;">),</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">ListTile</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">  leading</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.person), </span></span>
<span class="line"><span style="color:#24292E;">  title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;原生测试&#39;</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">  onTap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Navigator</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(context); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">redirect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;tyfapp://test&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">  }, </span></span>
<span class="line"><span style="color:#24292E;">),</span></span></code></pre></div><p>以上就完成了在 Flutter 中的代码逻辑。运行程序后，我们是可以正常打开该页面的，只是没有正确的响应数据，接下来我们就分平台实现获取平台电量的代码。</p><h4 id="android-代码" tabindex="-1">Android 代码 <a class="header-anchor" href="#android-代码" aria-label="Permalink to &quot;Android 代码&quot;">​</a></h4><p>在项目根目录，我们有一个 android 的目录文件夹，使用 Android Studio 打开该项目，然后在 app/java 下创建一个 com.example.two_you_friend 这样的包名（在 Android Studio 是叫作 Package ），如果你不想再打开一个项目，也可以在当前项目的 android/app/src/main/java 目录下创建 com.example.two_you_friend 包，然后在该目录下新建一个 MainActivity.java 文件。接下来我们看下具体的代码实现。</p><p>第一步还是 import 我们需要的库文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.example.two_you_friend; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> android.content.ContextWrapper; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> android.content.Intent; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> android.content.IntentFilter; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> android.os.BatteryManager; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> android.os.Build.VERSION; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> android.os.Build.VERSION_CODES; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> androidx.annotation.NonNull; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.flutter.embedding.android.FlutterActivity; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.flutter.embedding.engine.FlutterEngine; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.flutter.plugin.common.MethodChannel; </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> io.flutter.plugins.GeneratedPluginRegistrant;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.example.two_you_friend; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> android.content.ContextWrapper; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> android.content.Intent; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> android.content.IntentFilter; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> android.os.BatteryManager; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> android.os.Build.VERSION; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> android.os.Build.VERSION_CODES; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> androidx.annotation.NonNull; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.flutter.embedding.android.FlutterActivity; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.flutter.embedding.engine.FlutterEngine; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.flutter.plugin.common.MethodChannel; </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.flutter.plugins.GeneratedPluginRegistrant;</span></span></code></pre></div><p>接下来创建 MainActivity 来继承 FlutterActivity ，创建一个与 Flutter 中对应的消息名字，并创建两个未实现的方法 configureFlutterEngine 和 getBatteryLevel 。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MainActivity</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FlutterActivity</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String CHANNEL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;com.example.two_you_friend&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureFlutterEngine</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">NonNull</span><span style="color:#E1E4E8;"> FlutterEngine </span><span style="color:#FFAB70;">flutterEngine</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /** </span></span>
<span class="line"><span style="color:#6A737D;">     * 获取电量信息 </span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> string </span></span>
<span class="line"><span style="color:#6A737D;">     */</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBatteryLevel</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MainActivity</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FlutterActivity</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String CHANNEL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;com.example.two_you_friend&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureFlutterEngine</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">NonNull</span><span style="color:#24292E;"> FlutterEngine </span><span style="color:#E36209;">flutterEngine</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /** </span></span>
<span class="line"><span style="color:#6A737D;">     * 获取电量信息 </span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> string </span></span>
<span class="line"><span style="color:#6A737D;">     */</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBatteryLevel</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>configureFlutterEngine 重写的父类方法，主要是用来处理 MethodChannel 发送过来的数据。getBatteryLevel 获取当前电量信息。我们先来看下 configureFlutterEngine 代码：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@Override</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureFlutterEngine</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">@NonNull</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FlutterEngine</span><span style="color:#E1E4E8;"> flutterEngine) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">GeneratedPluginRegistrant</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">registerWith</span><span style="color:#E1E4E8;">(flutterEngine); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MethodChannel</span><span style="color:#E1E4E8;">(flutterEngine.</span><span style="color:#B392F0;">getDartExecutor</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getBinaryMessenger</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">CHANNEL</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setMethodCallHandler</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">                    (call, result) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (call.method.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;getBatteryLevel&quot;</span><span style="color:#E1E4E8;">)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> batteryLevel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBatteryLevel</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (batteryLevel </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                                result.</span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(batteryLevel); </span></span>
<span class="line"><span style="color:#E1E4E8;">                            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">                                result.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;UNAVAILABLE&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Battery level not available.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">                            } </span></span>
<span class="line"><span style="color:#E1E4E8;">                        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">                            result.</span><span style="color:#B392F0;">notImplemented</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">                        } </span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span></span>
<span class="line"><span style="color:#E1E4E8;">            ); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureFlutterEngine</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">@NonNull</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FlutterEngine</span><span style="color:#24292E;"> flutterEngine) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">GeneratedPluginRegistrant</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">registerWith</span><span style="color:#24292E;">(flutterEngine); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MethodChannel</span><span style="color:#24292E;">(flutterEngine.</span><span style="color:#6F42C1;">getDartExecutor</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getBinaryMessenger</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">CHANNEL</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setMethodCallHandler</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">                    (call, result) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (call.method.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getBatteryLevel&quot;</span><span style="color:#24292E;">)) { </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> batteryLevel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBatteryLevel</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (batteryLevel </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                                result.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(batteryLevel); </span></span>
<span class="line"><span style="color:#24292E;">                            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">                                result.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UNAVAILABLE&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Battery level not available.&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">                            } </span></span>
<span class="line"><span style="color:#24292E;">                        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">                            result.</span><span style="color:#6F42C1;">notImplemented</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">                        } </span></span>
<span class="line"><span style="color:#24292E;">                    } </span></span>
<span class="line"><span style="color:#24292E;">            ); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码核心部分是在 call.method.equals ，判断 Flutter 需要调用的方法，根据不同的数据调用不同的函数，比如 getBatteryLevel 则调用 getBatteryLevel() 。最后我们再来看下电量获取部分的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/** </span></span>
<span class="line"><span style="color:#6A737D;"> * 获取电量信息 </span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> string </span></span>
<span class="line"><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBatteryLevel</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> batteryLevel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (VERSION.SDK_INT </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> VERSION_CODES.LOLLIPOP) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        BatteryManager batteryManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (BatteryManager) </span><span style="color:#B392F0;">getSystemService</span><span style="color:#E1E4E8;">(BATTERY_SERVICE); </span></span>
<span class="line"><span style="color:#E1E4E8;">        batteryLevel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> batteryManager.</span><span style="color:#B392F0;">getIntProperty</span><span style="color:#E1E4E8;">(BatteryManager.BATTERY_PROPERTY_CAPACITY); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        Intent intent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContextWrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getApplicationContext</span><span style="color:#E1E4E8;">()). </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">registerReceiver</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntentFilter</span><span style="color:#E1E4E8;">(Intent.ACTION_BATTERY_CHANGED)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        batteryLevel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (intent.</span><span style="color:#B392F0;">getIntExtra</span><span style="color:#E1E4E8;">(BatteryManager.EXTRA_LEVEL, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                intent.</span><span style="color:#B392F0;">getIntExtra</span><span style="color:#E1E4E8;">(BatteryManager.EXTRA_SCALE, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> batteryLevel; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** </span></span>
<span class="line"><span style="color:#6A737D;"> * 获取电量信息 </span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> string </span></span>
<span class="line"><span style="color:#6A737D;"> */</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBatteryLevel</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> batteryLevel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (VERSION.SDK_INT </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> VERSION_CODES.LOLLIPOP) { </span></span>
<span class="line"><span style="color:#24292E;">        BatteryManager batteryManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (BatteryManager) </span><span style="color:#6F42C1;">getSystemService</span><span style="color:#24292E;">(BATTERY_SERVICE); </span></span>
<span class="line"><span style="color:#24292E;">        batteryLevel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> batteryManager.</span><span style="color:#6F42C1;">getIntProperty</span><span style="color:#24292E;">(BatteryManager.BATTERY_PROPERTY_CAPACITY); </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        Intent intent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContextWrapper</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getApplicationContext</span><span style="color:#24292E;">()). </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">registerReceiver</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntentFilter</span><span style="color:#24292E;">(Intent.ACTION_BATTERY_CHANGED)); </span></span>
<span class="line"><span style="color:#24292E;">        batteryLevel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (intent.</span><span style="color:#6F42C1;">getIntExtra</span><span style="color:#24292E;">(BatteryManager.EXTRA_LEVEL, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                intent.</span><span style="color:#6F42C1;">getIntExtra</span><span style="color:#24292E;">(BatteryManager.EXTRA_SCALE, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> batteryLevel; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于是 Java 代码，我了解的也较少，也非本课时的知识点，具体大家参考下了解就可以。</p><p>以上就完成了整个开发过程，不过这里有一个非常大的坑，在 Flutter 项目创建完成后，app 目录下的 src/main/kotlin 目录中也会存在另外一个 MainActivity 类，这样会导致 Android 项目编译失败，可以将 src/main/kotlin 下的 MainActivity 类改一个名字即可，需要时再将 java 和 kotlin 中的两个类名修改回来。</p><p>开发完成后，就可以使用 Android 虚拟机来测试了。接下来我们看下 iOS 代码。</p><h4 id="ios-代码" tabindex="-1">iOS 代码 <a class="header-anchor" href="#ios-代码" aria-label="Permalink to &quot;iOS 代码&quot;">​</a></h4><p>iOS 也支持两种语言 Object-C 和 Swift ，这里我们使用 Swift 来演示。直接在 Android Studio 中打开 ios/Runner 目录下的 .swift 文件。添加下以下部分代码，由于是 Swift 代码，我就不过多介绍如何实现的细节了。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UIKit</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Flutter</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">@UIApplicationMain</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">@objc</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppDelegate</span><span style="color:#E1E4E8;">: FlutterAppDelegate { </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">application</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;"> application: UIApplication, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">didFinishLaunchingWithOptions</span><span style="color:#E1E4E8;"> launchOptions: [UIApplication.LaunchOptionsKey: </span><span style="color:#79B8FF;">Any</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> controller : FlutterViewController </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.rootViewController </span><span style="color:#F97583;">as!</span><span style="color:#E1E4E8;"> FlutterViewController </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> batteryChannel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FlutterMethodChannel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;com.example.two_you_friend&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#79B8FF;">binaryMessenger</span><span style="color:#E1E4E8;">: controller.binaryMessenger) </span></span>
<span class="line"><span style="color:#E1E4E8;">  batteryChannel.</span><span style="color:#79B8FF;">setMethodCallHandler</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">   [</span><span style="color:#F97583;">weak</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">] (</span><span style="color:#79B8FF;">call</span><span style="color:#E1E4E8;">: FlutterMethodCall, </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;">: FlutterResult) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// Note: this method is invoked on the UI thread. </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">guard</span><span style="color:#E1E4E8;"> call.method </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;getBatteryLevel&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;">(FlutterMethodNotImplemented) </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">receiveBatteryLevel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;">: result) </span></span>
<span class="line"><span style="color:#E1E4E8;">  }) </span></span>
<span class="line"><span style="color:#E1E4E8;">  GeneratedPluginRegistrant.</span><span style="color:#79B8FF;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">with</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">application</span><span style="color:#E1E4E8;">(application, </span><span style="color:#79B8FF;">didFinishLaunchingWithOptions</span><span style="color:#E1E4E8;">: launchOptions) </span></span>
<span class="line"><span style="color:#E1E4E8;"> } </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">receiveBatteryLevel</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">result</span><span style="color:#E1E4E8;">: FlutterResult) { </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> device </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UIDevice.current </span></span>
<span class="line"><span style="color:#E1E4E8;">   device.isBatteryMonitoringEnabled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> device.batteryState </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> UIDevice.BatteryState.unknown { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">FlutterError</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;UNAVAILABLE&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Battery info unavailable&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">details</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">(device.batteryLevel </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)) </span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UIKit</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Flutter</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">@UIApplicationMain</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">@objc</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppDelegate</span><span style="color:#24292E;">: FlutterAppDelegate { </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">application</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">_</span><span style="color:#24292E;"> application: UIApplication, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">didFinishLaunchingWithOptions</span><span style="color:#24292E;"> launchOptions: [UIApplication.LaunchOptionsKey: </span><span style="color:#005CC5;">Any</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> controller : FlutterViewController </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.rootViewController </span><span style="color:#D73A49;">as!</span><span style="color:#24292E;"> FlutterViewController </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> batteryChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FlutterMethodChannel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;com.example.two_you_friend&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#005CC5;">binaryMessenger</span><span style="color:#24292E;">: controller.binaryMessenger) </span></span>
<span class="line"><span style="color:#24292E;">  batteryChannel.</span><span style="color:#005CC5;">setMethodCallHandler</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">   [</span><span style="color:#D73A49;">weak</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">] (</span><span style="color:#005CC5;">call</span><span style="color:#24292E;">: FlutterMethodCall, </span><span style="color:#005CC5;">result</span><span style="color:#24292E;">: FlutterResult) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// Note: this method is invoked on the UI thread. </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">guard</span><span style="color:#24292E;"> call.method </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;getBatteryLevel&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">result</span><span style="color:#24292E;">(FlutterMethodNotImplemented) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">   } </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">receiveBatteryLevel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">result</span><span style="color:#24292E;">: result) </span></span>
<span class="line"><span style="color:#24292E;">  }) </span></span>
<span class="line"><span style="color:#24292E;">  GeneratedPluginRegistrant.</span><span style="color:#005CC5;">register</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">with</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">application</span><span style="color:#24292E;">(application, </span><span style="color:#005CC5;">didFinishLaunchingWithOptions</span><span style="color:#24292E;">: launchOptions) </span></span>
<span class="line"><span style="color:#24292E;"> } </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">receiveBatteryLevel</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">result</span><span style="color:#24292E;">: FlutterResult) { </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> device </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UIDevice.current </span></span>
<span class="line"><span style="color:#24292E;">   device.isBatteryMonitoringEnabled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> device.batteryState </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> UIDevice.BatteryState.unknown { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">result</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">FlutterError</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">code</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;UNAVAILABLE&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Battery info unavailable&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">details</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">   } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">result</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">(device.batteryLevel </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)) </span></span>
<span class="line"><span style="color:#24292E;">   } </span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码完成后，使用 iOS 模拟器运行项目就可以看到图 3 所示的一个效果了。</p><h3 id="flutter-插件" tabindex="-1">Flutter 插件 <a class="header-anchor" href="#flutter-插件" aria-label="Permalink to &quot;Flutter 插件&quot;">​</a></h3><p>学习掌握与原生通信原理后，我们就可以利用该功能做一些跨平台原生 Flutter 插件，通过插件的方式来屏蔽平台特性。具体大家可以尝试创建一个试试：</p><p>1.在 Android Studio 创建一个新的项目，项目类型选择 Flutter Plugin ，或者使用下面的命令行；</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">flutter create </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">org com.example </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">plugin plugin_name</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">flutter create </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">org com.example </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">plugin plugin_name</span></span></code></pre></div><p>2.创建完成后，里面会包含相应的测试代码，以及会准备好最基础的代码部分，只需要在模版代码上增加我们应用示例的代码；</p><p>3.创建完成后，在不修改示例的基础上运行，可以看到如图 4 所示的一个效果。</p>`,41),g=p(`<p>图 4 Flutter Plugin 效果</p><p>4.开发完成插件后，如果需要使用该插件，方法还是在 pubspec.yaml 增加依赖，例如下面的配置。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">flutter</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">sdk</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">flutter</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">battery</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># When depending on this package from a real application you should use: </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#   battery2: ^x.y.z </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># See https://dart.dev/tools/pub/dependencies#version-constraints </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># The example app is bundled with the plugin so we use a path dependency on </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># the parent directory to use the current plugin&#39;s version.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">../</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">flutter</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">sdk</span><span style="color:#24292E;">: </span><span style="color:#032F62;">flutter</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">battery</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># When depending on this package from a real application you should use: </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#   battery2: ^x.y.z </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># See https://dart.dev/tools/pub/dependencies#version-constraints </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># The example app is bundled with the plugin so we use a path dependency on </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># the parent directory to use the current plugin&#39;s version.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">../</span></span></code></pre></div><p>battery 是我们测试的插件名称，path 是一个相对路径，指向插件的项目根目录即可。</p><p>以上就是原生插件的开发过程，需要有一定的原生平台开发能力，这也是我一开始介绍到的后面大前端的一个方向，跨端团队作为业务支撑，而 Android 、 iOS 以及 Web 作为平台底层支持跨端的团队。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时核心是介绍了如何在 Flutter 中与原生平台进行通信，从而扩充 Flutter 基础功能，这部分还是需要有一定的原生编程能力。在掌握通信机制后，也顺便介绍了如何创建 Flutter plugin ，从而将多平台代码作为插件进行开发，而在 Flutter 端屏蔽多终端的问题。学完本课时以后，需要掌握 Flutter 与原生平台的通信方式，并且了解 Flutter plugin 的开发过程。</p><p>下一课时我将介绍 Flutter 中的性能监控和分析，并利用性能分析来优化我们当前 Two You APP 项目。</p><p><a href="https://github.com/love-flutter/flutter-column" target="_blank" rel="noreferrer">点击此链接查看本课时源码</a></p>`,9);function h(A,v,B,D,m,b){const a=e("Image");return t(),r("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/41/CC/Ciqc1F82QdiASdHvAAGbIVp4bfI196.png"}),n(),y,i,l(a,{alt:"image (8).png",src:"https://s0.lgstatic.com/i/image/M00/41/E1/CgqCHl82ToiAUS0SAAGny7Ud86w285.png"}),n(),F,d,u,l(a,{alt:"image (7).png",src:"https://s0.lgstatic.com/i/image/M00/41/D6/Ciqc1F82TpCAKE8oAAExi3g6bqk260.png"}),n(),C,l(a,{alt:"image (9).png",src:"https://s0.lgstatic.com/i/image/M00/41/E1/CgqCHl82TqCAWzXCAAAwHz1zoOw595.png"}),n(),g])}const k=o(c,[["render",h]]);export{f as __pageData,k as default};
