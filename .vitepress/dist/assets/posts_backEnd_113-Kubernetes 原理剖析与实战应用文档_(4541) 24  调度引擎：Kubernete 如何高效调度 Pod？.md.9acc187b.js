import{_ as a,j as l,o as p,g as o,k as e,h as t,Q as s}from"./chunks/framework.a0d18f64.js";const A=JSON.parse('{"title":"24调度引擎：Kubernete如何高效调度Pod？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4541) 24  调度引擎：Kubernete 如何高效调度 Pod？.md","filePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4541) 24  调度引擎：Kubernete 如何高效调度 Pod？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4541) 24  调度引擎：Kubernete 如何高效调度 Pod？.md"},r=s(`<h1 id="_24调度引擎-kubernete如何高效调度pod" tabindex="-1">24调度引擎：Kubernete如何高效调度Pod？ <a class="header-anchor" href="#_24调度引擎-kubernete如何高效调度pod" aria-label="Permalink to &quot;24调度引擎：Kubernete如何高效调度Pod？&quot;">​</a></h1><p>我们已经学会如何部署业务，发布 Pod。但是 Pod 创建好以后，Kubernetes 又如何调度这些 Pod 呢？如果我们希望把一个 Pod 跑在我们期望的节点上，该如何操作呢？如果我们希望把某些关联性强的 Pod 跑在特定的节点上，或者同一个节点上，又该怎么操作呢？</p><p>今天我们就来揭晓。</p><h3 id="kubernetes-调度器工作原理简介" tabindex="-1">Kubernetes 调度器工作原理简介 <a class="header-anchor" href="#kubernetes-调度器工作原理简介" aria-label="Permalink to &quot;Kubernetes 调度器工作原理简介&quot;">​</a></h3><p>kube-scheduler 作为 Kubernetes 的调度器，它的主要任务就是给新创建的 Pod 或者是未被调度的 Pod 挑选一个合适的节点供 Pod 运行，满足 Pod 对资源等的要求。这样对应节点上的 Kubelet 就可以监听到该 Pod，并将其创建、运行。</p><p>整个调度过程听起来很简单，但是要考虑到的问题其实有很多，比如优先级、资源高效利用、高性能等。</p><ul><li><p><strong>优先级</strong> 。高优先级的 Pod 肯定要优先被调度，这个我在《<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=447#/detail/pc?id=4538" target="_blank" rel="noreferrer">21 | 优先级调度：你必须掌握的 Pod 抢占式资源调度</a>》中有详细的案例和说明。</p></li><li><p><strong>资源高效利用</strong>。比如我们要避免 Pod 都被调度到一个或某几个节点上，造成节点负载太大；或是避免同一个工作负载（如 Deployment）的几个副本，跑在同一个节点上，以免这个节点宕机对整个业务造成影响。</p></li><li><p><strong>高性能</strong>。我们需要支持快速地完成大规模 Pod 的调度工作，这样才能够支撑大规模的集群。</p></li><li><p><strong>可扩展性强</strong> 。方便用户自己增加调度逻辑，可以参考<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/scheduling-framework/" target="_blank" rel="noreferrer">官方文档</a>中的内容。</p></li><li><p>......</p></li></ul><p>总的来说，调度的过程主要分为两个大步骤。</p><ol><li><p><strong>过滤一些不满足条件的节点</strong>，这个过程也称为 Predict。</p></li><li><p><strong>调度器会对这些合适的节点进行打分排序，从中选择一个最优的节点</strong>，这个过程也称为 Priority。</p></li></ol><p>这里面其实包含了很多的调度策略，在此不一一说明，你可以阅读这份<a href="https://kubernetes.io/zh/docs/reference/scheduling/policies/" target="_blank" rel="noreferrer">调度策略列表</a>，了解各个策略对应的含义。</p><p>在实际使用的过程中，你可以直接使用调度器的默认配置，不需要对其做过多的定制化。当然，如果你有特殊的需求，也可以构建自己的调度器，具体可以参考<a href="https://kubernetes.io/zh/docs/reference/scheduling/config/" target="_blank" rel="noreferrer">这份文档</a>来更改默认调度器的调度策略、调度插件以及调度行为。</p><p>下面我们主要来认识一下调度器都有哪些高级特性。</p><h3 id="调度器的高级特性" tabindex="-1">调度器的高级特性 <a class="header-anchor" href="#调度器的高级特性" aria-label="Permalink to &quot;调度器的高级特性&quot;">​</a></h3><p>调度器的高级特性有 NodeName 和 NodeSelector、亲和性和反亲性、污点和容忍，我们依次来了解一下。</p><h4 id="nodename-和-nodeselector" tabindex="-1">NodeName 和 NodeSelector <a class="header-anchor" href="#nodename-和-nodeselector" aria-label="Permalink to &quot;NodeName 和 NodeSelector&quot;">​</a></h4><p>首先是 NodeName 和 NodeSelector。</p><p>我们可以通过 spec.nodeName 强制约束在某个指定的 Node 上运行 Pod，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">apiVersion</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> v1</span></span>
<span class="line"><span style="color:#E1E4E8;">kind</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Pod</span></span>
<span class="line"><span style="color:#E1E4E8;">metadata</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> pod</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">with</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">nodename</span></span>
<span class="line"><span style="color:#E1E4E8;">  namespace</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> demo</span></span>
<span class="line"><span style="color:#E1E4E8;">spec</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  nodeName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> node1 #指定调度节点 node1 上</span></span>
<span class="line"><span style="color:#E1E4E8;">  containers</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nginx</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo</span></span>
<span class="line"><span style="color:#E1E4E8;">    image</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nginx</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1.19</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">apiVersion</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> v1</span></span>
<span class="line"><span style="color:#24292E;">kind</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Pod</span></span>
<span class="line"><span style="color:#24292E;">metadata</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pod</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">with</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">nodename</span></span>
<span class="line"><span style="color:#24292E;">  namespace</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> demo</span></span>
<span class="line"><span style="color:#24292E;">spec</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  nodeName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> node1 #指定调度节点 node1 上</span></span>
<span class="line"><span style="color:#24292E;">  containers</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nginx</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo</span></span>
<span class="line"><span style="color:#24292E;">    image</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nginx</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1.19</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">4</span></span></code></pre></div><p>上面这个 Pod 就被约束在 node1 上。通过这种方式指定节点，会跳过 kube-scheduler 的调度逻辑，即<strong>不需要经过调度</strong>。</p><p>除了这种强制指定节点的方式，我们还可以通过 NodeSelector 的方式来选择节点。调度器的调度策略 MatchNodeSelector 会匹配 Node 的 label，从而达到节点筛选的目的。比如下面这个例子：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 我们先对节点进行打标</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">label</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nodes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">abc.com/role=dev</span></span>
<span class="line"><span style="color:#6A737D;"># 通过如下命令可以查看该节点目前的所有 label</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--show-labels</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">ROLES</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">AGE</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">VERSION</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">LABELS</span></span>
<span class="line"><span style="color:#B392F0;">node1</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Ready</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">master</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">75</span><span style="color:#9ECBFF;">d</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">v1.16.6-beta.0</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">abc.com/role=dev,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=docker-desktop,kubernetes.io/os=linux,node-role.kubernetes.io/master=</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 我们先对节点进行打标</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">label</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">abc.com/role=dev</span></span>
<span class="line"><span style="color:#6A737D;"># 通过如下命令可以查看该节点目前的所有 label</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--show-labels</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">    </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">   </span><span style="color:#032F62;">ROLES</span><span style="color:#24292E;">    </span><span style="color:#032F62;">AGE</span><span style="color:#24292E;">   </span><span style="color:#032F62;">VERSION</span><span style="color:#24292E;">          </span><span style="color:#032F62;">LABELS</span></span>
<span class="line"><span style="color:#6F42C1;">node1</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Ready</span><span style="color:#24292E;">    </span><span style="color:#032F62;">master</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">75</span><span style="color:#032F62;">d</span><span style="color:#24292E;">   </span><span style="color:#032F62;">v1.16.6-beta.0</span><span style="color:#24292E;">   </span><span style="color:#032F62;">abc.com/role=dev,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=docker-desktop,kubernetes.io/os=linux,node-role.kubernetes.io/master=</span></span></code></pre></div><p>对节点打好标以后，就可以通过 spec.nodeSelector 来将 Pod 调度到带有指定 label 标记的节点上。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pod-with-nodename</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">nodeSelector</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">abc.com/role</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#指定调度到带有 abc.com/role=dev 这种 label 标记的节点上</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-demo</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:1.19.4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pod-with-nodename</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">nodeSelector</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">abc.com/role</span><span style="color:#24292E;">: </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#指定调度到带有 abc.com/role=dev 这种 label 标记的节点上</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-demo</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:1.19.4</span></span></code></pre></div><p>nodeSelector 提供了一种非常简单的方法，方便我们将 Pod 约束到带有特定 label 的节点上。</p><p>除此之外，kube-scheduler 还提供了更加动态的方式，即亲和性和反亲和性，可以帮助我们完成更高级的 Pod 调度，比如将某些 Pod 都调度到某个节点上。</p><p>下面我们就来认识一下亲和性和反亲和性。</p><h4 id="亲和性和反亲和性" tabindex="-1">亲和性和反亲和性 <a class="header-anchor" href="#亲和性和反亲和性" aria-label="Permalink to &quot;亲和性和反亲和性&quot;">​</a></h4><p>Kubernetes 提供了如下 3 种类型：</p><ul><li><p>nodeAffinity（节点亲和性）；</p></li><li><p>podAffinity（Pod 亲和性）；</p></li><li><p>podAntiAffinity（Pod 反亲和性）。</p></li></ul><p>这 3 种亲和性和反亲和性策略支持更广泛的操作符，差异如下表所示：</p>`,30),E=s(`<p>对于上述的亲和性和反亲和性功能，每种都有 3 种规则可以设置。</p><ul><li><p>RequiredDuringSchedulingRequiredDuringExecution：在 Pod 调度期间要求满足亲和性或者反亲和性的规则要求。如果不能满足这些指定的规则，那该 Pod 不能被调度到对应的主机上。而且在之后的运行过程中，如果因为某些原因（比如 label 被修改了）导致规则不再满足了，系统就会尝试把该 Pod 从主机上驱逐掉。</p></li><li><p>RequiredDuringSchedulingIgnoredDuringExecution：在 Pod 调度期间要求满足亲和性或者反亲和性规则。如果不能满足的话，那么该 Pod 不能被调度到对应的主机上。在之后的运行过程中，系统也不会再去检查这些规则是否还继续满足。</p></li><li><p>PreferredDuringSchedulingIgnoredDuringExecution：在 Pod 调度期间要尽量地指定的亲和性和反亲和性规则。即使不能满足，Pod 也有可能被调度到对应的主机上。在之后的运行过程中，系统也不会再去检查这些规则是否继续满足。</p></li></ul><p>我们这里来说说具体的使用场景。</p><p><strong>对于 nodeAffinity</strong>，主要有两个使用场景：</p><ul><li>帮助我们将一个工作负载的所有 Pod 部署到指定的 label 的主机上，这点和 nodeSelector 是类似的；帮助我们将 Pod 部署到不带有特定 label 的主机上，即 Notin，比如不在 Master 节点上部署该 Pod。</li></ul><p>下面是一个<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/assign-pod-node/" target="_blank" rel="noreferrer">官方</a>使用的 nodeAffinity 的例子：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">with-node-affinity</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">affinity</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">nodeAffinity</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">requiredDuringSchedulingIgnoredDuringExecution</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">nodeSelectorTerms</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">matchExpressions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">kubernetes.io/e2e-az-name</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">operator</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">In</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">values</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">e2e-az1</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">e2e-az2</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">preferredDuringSchedulingIgnoredDuringExecution</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">weight</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">preference</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">matchExpressions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">another-node-label-key</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">operator</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">In</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">values</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">another-node-label-value</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">with-node-affinity</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">k8s.gcr.io/pause:2.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">with-node-affinity</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">affinity</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nodeAffinity</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">requiredDuringSchedulingIgnoredDuringExecution</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">nodeSelectorTerms</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">matchExpressions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#22863A;">key</span><span style="color:#24292E;">: </span><span style="color:#032F62;">kubernetes.io/e2e-az-name</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">operator</span><span style="color:#24292E;">: </span><span style="color:#032F62;">In</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">values</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">e2e-az1</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">e2e-az2</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">preferredDuringSchedulingIgnoredDuringExecution</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">weight</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">preference</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">matchExpressions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#22863A;">key</span><span style="color:#24292E;">: </span><span style="color:#032F62;">another-node-label-key</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">operator</span><span style="color:#24292E;">: </span><span style="color:#032F62;">In</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">values</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">another-node-label-value</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">with-node-affinity</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">k8s.gcr.io/pause:2.0</span></span></code></pre></div><p>这个 Pod 指定必须运行在 label 带有 kubernetes.io/e2e-az-name=e2e-az1 或 kubernetes.io/e2e-az-name=e2e-az2 的节点上。如果没有任何一个节点有这些 label，则该 Pod 不会被调度。同时这些节点上最好还带有 another-node-label-key=another-node-label-vale 的标签。</p><p><strong>对于 podAffinity 和 podAntiAffinity</strong>，你可以基于已经在节点上运行的 Pod 的标签来约束新 Pod 可以调度到的节点，而不是基于节点上的标签。</p><p>如下是一个<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/assign-pod-node/" target="_blank" rel="noreferrer">官方</a>使用的 podAffinity 和 podAntiAffinity 的例子：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">a piVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">with-pod-affinity</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">affinity</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">podAffinity</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">requiredDuringSchedulingIgnoredDuringExecution</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">labelSelector</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">matchExpressions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          - </span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">security</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">operator</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">In</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">values</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#9ECBFF;">S1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">topologyKey</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">topology.kubernetes.io/zone</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">podAntiAffinity</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">preferredDuringSchedulingIgnoredDuringExecution</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">weight</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">podAffinityTerm</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">labelSelector</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">matchExpressions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#85E89D;">key</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">security</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">operator</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">In</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">values</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">              - </span><span style="color:#9ECBFF;">S2</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">topologyKey</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">topology.kubernetes.io/zone</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">with-pod-affinity</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">k8s.gcr.io/pause:2.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">a piVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">with-pod-affinity</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">affinity</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">podAffinity</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">requiredDuringSchedulingIgnoredDuringExecution</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">labelSelector</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">matchExpressions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#22863A;">key</span><span style="color:#24292E;">: </span><span style="color:#032F62;">security</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">operator</span><span style="color:#24292E;">: </span><span style="color:#032F62;">In</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">values</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#032F62;">S1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">topologyKey</span><span style="color:#24292E;">: </span><span style="color:#032F62;">topology.kubernetes.io/zone</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">podAntiAffinity</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">preferredDuringSchedulingIgnoredDuringExecution</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">weight</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">podAffinityTerm</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">labelSelector</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">matchExpressions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#22863A;">key</span><span style="color:#24292E;">: </span><span style="color:#032F62;">security</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">operator</span><span style="color:#24292E;">: </span><span style="color:#032F62;">In</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">values</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">              - </span><span style="color:#032F62;">S2</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">topologyKey</span><span style="color:#24292E;">: </span><span style="color:#032F62;">topology.kubernetes.io/zone</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">with-pod-affinity</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">k8s.gcr.io/pause:2.0</span></span></code></pre></div><p>上述这个例子中使用了 podAffinity 和 podAntiAffinity。其中亲和性这块的规则表示该 Pod 必须部署在一个节点上，这个节点上至少有一个处于正在运行状态的带有 security=s1 标签的 Pod，并且要求部署的节点同正在运行的 Pod 所在节点都在相同的云服务区域中，也就是 topologyKey:topology.kubernetes.io/zone。</p><p>换言之，一旦某个区域出了问题，我们希望这些 Pod 能够再次迁移到同一个区域。当然， topologyKey 可以是任何合法的标签键，比如 kubernetes.io/hostname，你可以参考<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/assign-pod-node/#pod-%E4%BD%BF%E7%94%A8-pod-%E4%BA%B2%E5%92%8C-%E7%9A%84%E7%A4%BA%E4%BE%8B" target="_blank" rel="noreferrer">官方文档</a>，看看这个值在使用上的限制。</p><p>对于例子中 Pod 反亲和性规则，表示该 Pod 不希望部署在一个运行着带有 label 为 security=s2 的 Pod 的节点上。</p><p>除了在 Pod 层面进行限制外，我们还可以对 Node 进行操作，可以禁止某些 Pod 调度上来。</p><h4 id="污点和容忍-taints-and-tolerations" tabindex="-1">污点和容忍（Taints and Tolerations） <a class="header-anchor" href="#污点和容忍-taints-and-tolerations" aria-label="Permalink to &quot;污点和容忍（Taints and Tolerations）&quot;">​</a></h4><p>最后我们来看污点和容忍（Taints and Tolerations）。</p><p>我们可以给节点设置污点，通过这个污点就可以避免 Pod 调度上来，除非在 Pod 上设置了污点容忍。</p><p>每个污点的组成如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">effect</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">effect</span></span></code></pre></div><p>每个污点规则都有一个 key 和 value，其中 value 可以为空，effect 描述污点的作用。当前 taint effect 支持如下 3 个选项：</p><ul><li><p>NoSchedule 表示不会将 Pod 调度到带该污点的 Node 上；</p></li><li><p>PreferNoSchedule 表示尽量避免将 Pod 调度到带该污点的 Node 上；</p></li><li><p>NoExecute 表示不会将 Pod 调度到带有该污点的 Node 上，同时会将 Node 上已经运行中的 Pod 驱逐出去。</p></li></ul><p>我们使用 kubectl 命令就可以快速地设置和去除污点，命令如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 设置污点</span></span>
<span class="line"><span style="color:#E1E4E8;">kubectl taint nodes node1 key1</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">value1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">NoSchedule</span></span>
<span class="line"><span style="color:#E1E4E8;"># 去除污点</span></span>
<span class="line"><span style="color:#E1E4E8;">kubectl taint nodes node1 key1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">NoSchedule</span><span style="color:#F97583;">-</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 设置污点</span></span>
<span class="line"><span style="color:#24292E;">kubectl taint nodes node1 key1</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">value1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">NoSchedule</span></span>
<span class="line"><span style="color:#24292E;"># 去除污点</span></span>
<span class="line"><span style="color:#24292E;">kubectl taint nodes node1 key1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">NoSchedule</span><span style="color:#D73A49;">-</span></span></code></pre></div><p>我们可以在 Pod 上设置容忍（Toleration），这样就可以将 Pod 调度到存在污点的 Node 上。在 Pod 的 spec 中设置 tolerations 字段可以给 Pod 设置上容忍点 Toleration，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tolerations</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;key1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  operator</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Equal&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;value1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  effect</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;NoSchedule&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  tolerationSeconds</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3600</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;key1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  operator</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Equal&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;value1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  effect</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;NoExecute&quot;</span></span>
<span class="line"><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;key2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  operator</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Exists&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  effect</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;NoSchedule&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tolerations</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;key1&quot;</span></span>
<span class="line"><span style="color:#24292E;">  operator</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Equal&quot;</span></span>
<span class="line"><span style="color:#24292E;">  value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;value1&quot;</span></span>
<span class="line"><span style="color:#24292E;">  effect</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;NoSchedule&quot;</span></span>
<span class="line"><span style="color:#24292E;">  tolerationSeconds</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3600</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;key1&quot;</span></span>
<span class="line"><span style="color:#24292E;">  operator</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Equal&quot;</span></span>
<span class="line"><span style="color:#24292E;">  value</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;value1&quot;</span></span>
<span class="line"><span style="color:#24292E;">  effect</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;NoExecute&quot;</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;key2&quot;</span></span>
<span class="line"><span style="color:#24292E;">  operator</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Exists&quot;</span></span>
<span class="line"><span style="color:#24292E;">  effect</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;NoSchedule&quot;</span></span></code></pre></div><p>其中 key、vaule、effect 要与 Node 上设置的 taint 保持一致；operator 的值为 Exists 将会忽略 value 值；tolerationSeconds 用于描述当 Pod 需要被驱逐时可以在 Pod 上继续保留运行的时间。</p><h3 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h3><p>这一讲我带你了解了 Kubernetes 调度器的工作原理以及调度器的一些高级特性，也介绍了 Kubernetes 是如何高效调度 Pod 的。你可以在实际使用中慢慢体会调度器的这些高级特性。</p><p>那么，学完这些，你对于调度 Pod 还有什么疑问吗？欢迎在留言区留言。</p><p>下一讲，我将带你剖析容器运行时以及 CRI 原理。</p>`,31);function y(i,d,u,F,h,g){const n=l("Image");return p(),o("div",null,[r,e(n,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/6F/1C/Ciqc1F-0wO2AaNBNAAB8jlKE3Qo120.png"}),t(),E])}const k=a(c,[["render",y]]);export{A as __pageData,k as default};
