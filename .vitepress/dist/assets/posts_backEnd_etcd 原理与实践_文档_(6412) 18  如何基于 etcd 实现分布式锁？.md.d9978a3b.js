import{_ as p,j as o,o as e,g as t,k as n,h as a,Q as l,s as c}from"./chunks/framework.4e7d56ce.js";const g=JSON.parse('{"title":"18如何基于etcd实现分布式锁？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6412) 18  如何基于 etcd 实现分布式锁？.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6412) 18  如何基于 etcd 实现分布式锁？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/etcd 原理与实践_文档/(6412) 18  如何基于 etcd 实现分布式锁？.md"},E=l(`<h1 id="_18如何基于etcd实现分布式锁" tabindex="-1">18如何基于etcd实现分布式锁？ <a class="header-anchor" href="#_18如何基于etcd实现分布式锁" aria-label="Permalink to &quot;18如何基于etcd实现分布式锁？&quot;">​</a></h1><p>从这一模块开始我将会通过几个etcd常见的实践场景，帮助你进一步加深对 etcd的理解，熟悉 etcd 在日常开发环境中的应用。这一讲我们先来介绍基于 etcd 实现分布式锁的案例。</p><h3 id="为什么需要分布式锁" tabindex="-1">为什么需要分布式锁？ <a class="header-anchor" href="#为什么需要分布式锁" aria-label="Permalink to &quot;为什么需要分布式锁？&quot;">​</a></h3><p>在分布式环境下，<strong>数据一致性问题</strong> 一直是个难点。相比于单进程，分布式环境的情况更加复杂。分布式与单机环境最大的不同在于它不是多线程而是<strong>多进程</strong>。由于多线程可以共享堆内存，因此可以简单地采取内存作为标记存储位置。而多进程可能都不在同一台物理机上，就需要将标记存储在一个所有进程都能看到的地方。</p><p>例如秒杀场景就是一个常见的多进程场景。订单服务部署了多个服务实例，如秒杀商品有 4 个，第一个用户购买 3 个，第二个用户购买 2 个，理想状态下第一个用户能购买成功，第二个用户提示购买失败，反之亦可。而实际可能出现的情况是，两个用户都得到库存为 4，第一个用户买到了 3 个，更新库存之前，第二个用户下了 2 个商品的订单，更新库存为 2，导致业务逻辑出错。</p><p>在上面的场景中，商品的库存是共享变量，面对高并发情况，需要保证对资源的<strong>访问互斥</strong>。在单机环境中，比如 Java 语言中其实提供了很多并发处理相关的API，但是这些 API在分布式场景中就无能为力了。由于分布式系统具备多线程和多进程的特点，且分布在不同机器中，synchronized 和 lock 关键字将失去原有锁的效果，仅依赖这些语言自身提供的 API 并不能实现分布式锁的功能，因此需要我们找到其他方法实现分布式锁。</p><p>常见的锁方案如下：</p><ul><li><p>基于数据库实现分布式锁；</p></li><li><p>基于 ZooKeeper 实现分布式锁；</p></li><li><p>基于缓存实现分布式锁，如 redis、etcd等。</p></li></ul><p>下面我们简单介绍一下这几种锁的实现，其中重点介绍 etcd 实现锁的方法。</p><h3 id="基于数据库实现分布式锁" tabindex="-1">基于数据库实现分布式锁 <a class="header-anchor" href="#基于数据库实现分布式锁" aria-label="Permalink to &quot;基于数据库实现分布式锁&quot;">​</a></h3><p>基于数据库实现分布式锁有两种方式，一种是基于数据库表，另一种是基于数据库的排他锁。</p><h4 id="基于数据库表的增删" tabindex="-1">基于数据库表的增删 <a class="header-anchor" href="#基于数据库表的增删" aria-label="Permalink to &quot;基于数据库表的增删&quot;">​</a></h4><p>基于数据库表的增删是最简单的实现方式，首先创建一张锁的表，主要包含方法名、时间戳等字段。</p><p>具体使用的方法为：当需要锁住某个方法时，往该表中插入一条相关的记录。需要注意的是，<strong>方法名有唯一性约束</strong>。如果有多个请求同时提交到数据库，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，可以执行业务逻辑。执行完毕，需要删除该记录。</p><p>对于上述方案我们可以进行优化，如应用<strong>主从数据库</strong> ，数据之间双向同步。一旦主库挂掉，将应用服务快速切换到从库上。除此之外还可以记录当前获得锁的机器的<strong>主机信息和线程信息</strong>，下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到，直接把锁分配给该线程，实现可重入锁。</p><h4 id="基于数据库排他锁" tabindex="-1">基于数据库排他锁 <a class="header-anchor" href="#基于数据库排他锁" aria-label="Permalink to &quot;基于数据库排他锁&quot;">​</a></h4><p>我们还可以通过数据库的排他锁来实现分布式锁。基于 MySQL 的 InnoDB 引擎，可以使用以下方法来实现加锁操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lock</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    connection.</span><span style="color:#B392F0;">setAutoCommit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(count </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            select </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> from lock where lock_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">xxx </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> update;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(结果不为空){</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 代表获取到锁</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 为空或者抛异常都表示没有获取到锁</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LockException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    connection.</span><span style="color:#6F42C1;">setAutoCommit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(count </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            select </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from lock where lock_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">xxx </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> update;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(结果不为空){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 代表获取到锁</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 为空或者抛异常都表示没有获取到锁</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在查询语句后面增加<code>f\`\`o\`\`r\`\`\`\`update</code>，数据库会在查询过程中给数据库表增加排他锁。当某条记录被加上排他锁之后，其他线程就无法再在该行记录上增加排他锁。其他没有获取到锁的线程就会阻塞在上述 select 语句上，可能出现两种结果：在超时之前获取到了锁，在超时之前仍未获取到锁。</p><p>获得排他锁的线程即可获得分布式锁，获取到锁之后，可以执行业务逻辑，执行业务后释放锁即可。</p><h4 id="基于数据库锁的总结" tabindex="-1">基于数据库锁的总结 <a class="header-anchor" href="#基于数据库锁的总结" aria-label="Permalink to &quot;基于数据库锁的总结&quot;">​</a></h4><p>上面两种方式的实现都是依赖数据库的一张表，一种是通过表中记录的存在情况确定当前是否有锁存在，另外一种是通过数据库的排他锁来实现分布式锁。优点是直接借助现有的关系型数据库，简单且容易理解；缺点是操作数据库需要一定的开销，性能问题以及 SQL 执行超时的异常需要考虑。</p><h3 id="基于-zookeeper-实现分布式锁" tabindex="-1">基于 ZooKeeper 实现分布式锁 <a class="header-anchor" href="#基于-zookeeper-实现分布式锁" aria-label="Permalink to &quot;基于 ZooKeeper 实现分布式锁&quot;">​</a></h3><p>基于 ZooKeeper 的<strong>临时节点和顺序特性</strong>可以实现分布式锁。</p><p>申请对某个方法加锁时，在 ZooKeeper 上与该方法对应的指定节点的目录下，生成一个<strong>唯一的临时有序节点</strong>。当需要获取锁时，只需要判断有序节点中该节点是否为序号最小的一个。业务逻辑执行完成释放锁，只需将这个临时节点删除。这种方式也可以避免由于服务宕机导致的锁无法释放，产生的死锁问题。</p><p>Netflix 开源了一套 ZooKeeper 客户端框架 <a href="https://curator.apache.org/?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Curator</a>，Curator 提供的 InterProcessMutex 是分布式锁的一种实现。acquire方法获取锁，release方法释放锁。另外，锁释放、阻塞锁、可重入锁等问题都可以有效解决。</p><p>关于阻塞锁的实现，客户端可以通过在 ZooKeeper 中创建顺序节点，并且在节点上绑定监听器 Watch。一旦节点发生变化，ZooKeeper 会通知客户端，客户端可以检查自己创建的节点是否是当前所有节点中序号最小的，如果是就获取到锁，执行业务逻辑。</p><p>ZooKeeper 实现的分布式锁也存在一些缺陷，比如在性能上可能不如基于缓存实现的分布式锁。因为每次创建锁和释放锁的过程中，都要<strong>动态创建、销毁瞬时节点</strong>，实现锁功能。</p><p>此外，ZooKeeper 中创建和删除节点<strong>只能通过 Leader 节点</strong> 来执行，然后将数据同步到集群中的其他节点。分布式环境中难免存在网络抖动，导致客户端和 ZooKeeper 集群之间的session 连接中断，此时 ZooKeeper 服务端以为客户端挂了，就会删除临时节点。这时其他客户端就可以获取到分布式锁了，会出现多个请求获取到了同一把锁的问题，导致<strong>业务数据不一致</strong>。</p><h3 id="基于缓存实现分布式锁" tabindex="-1">基于缓存实现分布式锁 <a class="header-anchor" href="#基于缓存实现分布式锁" aria-label="Permalink to &quot;基于缓存实现分布式锁&quot;">​</a></h3><p>相对于基于数据库实现分布式锁的方案来说，基于缓存来实现在性能方面会表现得更好一点，存取速度会快很多，而且很多缓存是可以集群部署的，可以解决单点问题。基于缓存的锁有如下几种： memcached、redis、etcd。下面我们主要讲解基于 etcd 实现的分布式锁。</p><h4 id="通过-etcd-txn-实现分布式锁" tabindex="-1">通过 etcd txn 实现分布式锁 <a class="header-anchor" href="#通过-etcd-txn-实现分布式锁" aria-label="Permalink to &quot;通过 etcd txn 实现分布式锁&quot;">​</a></h4><p>通过 etcd 实现分布式锁，同样需要满足一致性、互斥性和可靠性等要求。etcd 中的事务 txn、lease 租约以及 watch 监听特性，能够实现上述要求的分布式锁。</p><h4 id="思路分析" tabindex="-1">思路分析 <a class="header-anchor" href="#思路分析" aria-label="Permalink to &quot;思路分析&quot;">​</a></h4><p>通过 etcd 的事务特性可以帮助我们实现一致性和互斥性。etcd 的事务特性，使用 <code>IF-Then-Else</code> 语句，IF 语言判断 etcd 服务端是否存在指定的key，通过该 key 创建的版本号 create_revision 是否为 0 来检查 key 是否已存在，如果该 key 存在，版本号不为 0。满足 IF 条件的情况下则使用 Then 执行 put 操作，否则 Else 语句将返回抢锁失败的结果。</p><p>当然，除了使用 key 是否创建成功作为 IF 的判断依据，还可以创建前缀相同的 key，通过比较这些 key 的 revision 来判断分布式锁应该属于哪个请求。</p><p>客户端请求在获取到分布式锁后，如果发生异常，需要及时将锁释放掉，因此需要租约。我们申请分布式锁时也需要指定租约时间，超过 lease 租期时间将会自动释放锁，保证业务的可用性。</p><p>但是在执行业务逻辑时，如果客户端发起的是一个耗时的操作，在操作未完成的情况下，租约时间过期，就会导致其他请求获取到分布式锁，造成不一致。这种情况下就需要<strong>续租</strong>，即刷新租约，使得客户端和 etcd 服务端持续保持心跳。</p><h4 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-label="Permalink to &quot;具体实现&quot;">​</a></h4><p>我们基于上述分析思路，绘制出实现 etcd 分布式锁的流程图，如下所示：</p>`,40),y=l(`<p>实现 etcd 分布式锁的流程图</p><p>基于 Go 语言实现的 etcd 分布式锁，测试代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestLock</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 客户端配置</span></span>
<span class="line"><span style="color:#E1E4E8;">	config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientv3.Config{</span></span>
<span class="line"><span style="color:#E1E4E8;">		Endpoints:   []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;localhost:2379&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		DialTimeout: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 建立连接</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> client, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientv3.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(config); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//上锁并创建租约</span></span>
<span class="line"><span style="color:#E1E4E8;">	lease </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientv3.</span><span style="color:#79B8FF;">NewLease</span><span style="color:#E1E4E8;">(client)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> leaseGrantResp, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lease.</span><span style="color:#79B8FF;">Grant</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	leaseId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> leaseGrantResp.ID</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 创建一个可取消的租约，主要是为了退出的时候能够释放</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx, cancelFunc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithCancel</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 释放租约</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cancelFunc</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> lease.</span><span style="color:#79B8FF;">Revoke</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), leaseId)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> keepRespChan, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lease.</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">(ctx, leaseId); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 续约应答</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> keepResp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">keepRespChan:</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> keepRespChan </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">					fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;租约已经失效了&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#F97583;">goto</span><span style="color:#E1E4E8;"> END</span></span>
<span class="line"><span style="color:#E1E4E8;">				} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 每秒会续租一次, 所以就会收到一次应答</span></span>
<span class="line"><span style="color:#E1E4E8;">					fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;收到自动续租应答:&quot;</span><span style="color:#E1E4E8;">, keepResp.ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	END:</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 在租约时间内去抢锁（etcd 里面的锁就是一个 key）</span></span>
<span class="line"><span style="color:#E1E4E8;">	kv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientv3.</span><span style="color:#79B8FF;">NewKV</span><span style="color:#E1E4E8;">(client)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 创建事务</span></span>
<span class="line"><span style="color:#E1E4E8;">	txn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kv.</span><span style="color:#79B8FF;">Txn</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// If 不存在 key，Then 设置它，Else 抢锁失败</span></span>
<span class="line"><span style="color:#E1E4E8;">	txn.</span><span style="color:#79B8FF;">If</span><span style="color:#E1E4E8;">(clientv3.</span><span style="color:#79B8FF;">Compare</span><span style="color:#E1E4E8;">(clientv3.</span><span style="color:#79B8FF;">CreateRevision</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;lock&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)).</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">Then</span><span style="color:#E1E4E8;">(clientv3.</span><span style="color:#79B8FF;">OpPut</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;lock&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;g&quot;</span><span style="color:#E1E4E8;">, clientv3.</span><span style="color:#79B8FF;">WithLease</span><span style="color:#E1E4E8;">(leaseId))).</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">Else</span><span style="color:#E1E4E8;">(clientv3.</span><span style="color:#79B8FF;">OpGet</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;lock&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 提交事务</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> txnResp, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> txn.</span><span style="color:#79B8FF;">Commit</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">txnResp.Succeeded {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;锁被占用:&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(txnResp.Responses[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#79B8FF;">GetResponseRange</span><span style="color:#E1E4E8;">().Kvs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].Value))</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 抢到锁后执行业务逻辑，没有抢到则退出</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;处理任务&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestLock</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 客户端配置</span></span>
<span class="line"><span style="color:#24292E;">	config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientv3.Config{</span></span>
<span class="line"><span style="color:#24292E;">		Endpoints:   []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;localhost:2379&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		DialTimeout: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 建立连接</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> client, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientv3.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(config); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//上锁并创建租约</span></span>
<span class="line"><span style="color:#24292E;">	lease </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientv3.</span><span style="color:#005CC5;">NewLease</span><span style="color:#24292E;">(client)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> leaseGrantResp, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lease.</span><span style="color:#005CC5;">Grant</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	leaseId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> leaseGrantResp.ID</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 创建一个可取消的租约，主要是为了退出的时候能够释放</span></span>
<span class="line"><span style="color:#24292E;">	ctx, cancelFunc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithCancel</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 释放租约</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cancelFunc</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> lease.</span><span style="color:#005CC5;">Revoke</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), leaseId)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> keepRespChan, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lease.</span><span style="color:#005CC5;">KeepAlive</span><span style="color:#24292E;">(ctx, leaseId); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 续约应答</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> keepResp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">keepRespChan:</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> keepRespChan </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">					fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;租约已经失效了&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">goto</span><span style="color:#24292E;"> END</span></span>
<span class="line"><span style="color:#24292E;">				} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 每秒会续租一次, 所以就会收到一次应答</span></span>
<span class="line"><span style="color:#24292E;">					fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;收到自动续租应答:&quot;</span><span style="color:#24292E;">, keepResp.ID)</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	END:</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 在租约时间内去抢锁（etcd 里面的锁就是一个 key）</span></span>
<span class="line"><span style="color:#24292E;">	kv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientv3.</span><span style="color:#005CC5;">NewKV</span><span style="color:#24292E;">(client)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 创建事务</span></span>
<span class="line"><span style="color:#24292E;">	txn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kv.</span><span style="color:#005CC5;">Txn</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// If 不存在 key，Then 设置它，Else 抢锁失败</span></span>
<span class="line"><span style="color:#24292E;">	txn.</span><span style="color:#005CC5;">If</span><span style="color:#24292E;">(clientv3.</span><span style="color:#005CC5;">Compare</span><span style="color:#24292E;">(clientv3.</span><span style="color:#005CC5;">CreateRevision</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lock&quot;</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)).</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">Then</span><span style="color:#24292E;">(clientv3.</span><span style="color:#005CC5;">OpPut</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lock&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;g&quot;</span><span style="color:#24292E;">, clientv3.</span><span style="color:#005CC5;">WithLease</span><span style="color:#24292E;">(leaseId))).</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">Else</span><span style="color:#24292E;">(clientv3.</span><span style="color:#005CC5;">OpGet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lock&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 提交事务</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> txnResp, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> txn.</span><span style="color:#005CC5;">Commit</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">txnResp.Succeeded {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;锁被占用:&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(txnResp.Responses[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#005CC5;">GetResponseRange</span><span style="color:#24292E;">().Kvs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].Value))</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 抢到锁后执行业务逻辑，没有抢到则退出</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;处理任务&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>预期的执行结果如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> RUN   TestLock</span></span>
<span class="line"><span style="color:#E1E4E8;">处理任务</span></span>
<span class="line"><span style="color:#E1E4E8;">收到自动续租应答</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7587848943239472601</span></span>
<span class="line"><span style="color:#E1E4E8;">收到自动续租应答</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7587848943239472601</span></span>
<span class="line"><span style="color:#E1E4E8;">收到自动续租应答</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7587848943239472601</span></span>
<span class="line"><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> PASS</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestLock</span><span style="color:#E1E4E8;"> (5.</span><span style="color:#FDAEB7;font-style:italic;">10s</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">PASS</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">===</span><span style="color:#24292E;"> RUN   TestLock</span></span>
<span class="line"><span style="color:#24292E;">处理任务</span></span>
<span class="line"><span style="color:#24292E;">收到自动续租应答</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7587848943239472601</span></span>
<span class="line"><span style="color:#24292E;">收到自动续租应答</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7587848943239472601</span></span>
<span class="line"><span style="color:#24292E;">收到自动续租应答</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7587848943239472601</span></span>
<span class="line"><span style="color:#D73A49;">---</span><span style="color:#24292E;"> PASS</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestLock</span><span style="color:#24292E;"> (5.</span><span style="color:#B31D28;font-style:italic;">10s</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">PASS</span></span></code></pre></div><p>总的来说，上述关于 etcd 分布式锁的实现过程分为四个步骤：</p><ul><li><p>客户端初始化与 etcd 服务端建立连接；</p></li><li><p>创建租约，自动续租；</p></li><li><p>创建事务，获取锁；</p></li><li><p>执行业务逻辑，最后释放锁。</p></li></ul><p>创建租约的时候，需要创建一个可取消的租约，主要是为了退出的时候能够释放。释放锁对应的步骤，在上面的 defer 语句中。当 defer 租约关掉的时候，分布式锁对应的key 也会被释放掉。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们主要介绍了基于 etcd 实现分布式锁的原理。首先介绍了分布式锁产生的背景以及必要性。分布式架构不同于单体架构，涉及多服务之间多个实例的调用，在跨进程的情况下使用编程语言自带的并发原语没有办法实现数据的一致性，因此分布式锁出现，用来解决分布式环境中的资源互斥问题。</p><p>接着介绍了基于数据库实现分布式锁的两种方式：数据表增删和数据库的排他锁。基于 ZooKeeper 的临时节点和顺序特性也可以实现分布式锁，但是这两种方式或多或少存在性能和稳定性方面的缺陷。</p><p>最后我们重点介绍了基于 etcd 实现分布式锁的方案，根据etcd的特点，利用事务txn、lease 租约以及 watch 监测实现分布式锁，这部分内容需要你加强记忆。</p>`,12),i=c("p",null,"在我们上面的案例中，一旦抢锁失败，客户端就直接返回了。那么当该锁被释放之后，或者持有锁的客户端出现故障退出了，其他客户端如何快速获取锁呢？上述代码可以基于 watch 监测特性进行改进。关于改进的地方，你有什么好的想法吗？欢迎在留言区和我分享。下一讲，我们将介绍如何基于 etcd 实现微服务的注册与发现。",-1);function F(d,C,u,h,D,A){const s=o("Image");return e(),t("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/26/8C/CioPOWBbEnyAfk67AABZkPIb5so774.png"}),a(),y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/26/8D/CioPOWBbEoaANh17AAG9OKrK4kc419.png"}),a(),i])}const f=p(r,[["render",F]]);export{g as __pageData,f as default};
