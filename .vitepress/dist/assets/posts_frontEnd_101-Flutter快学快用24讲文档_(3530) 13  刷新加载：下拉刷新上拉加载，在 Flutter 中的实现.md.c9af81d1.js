import{_ as a,j as l,o as p,h as o,k as e,f as t,Q as s}from"./chunks/framework.d3daa342.js";const D=JSON.parse('{"title":"13刷新加载：下拉刷新上拉加载，在Flutter中的实现","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3530) 13  刷新加载：下拉刷新上拉加载，在 Flutter 中的实现.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3530) 13  刷新加载：下拉刷新上拉加载，在 Flutter 中的实现.md","lastUpdated":1696682708000}'),c={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3530) 13  刷新加载：下拉刷新上拉加载，在 Flutter 中的实现.md"},r=s(`<h1 id="_13刷新加载-下拉刷新上拉加载-在flutter中的实现" tabindex="-1">13刷新加载：下拉刷新上拉加载，在Flutter中的实现 <a class="header-anchor" href="#_13刷新加载-下拉刷新上拉加载-在flutter中的实现" aria-label="Permalink to &quot;13刷新加载：下拉刷新上拉加载，在Flutter中的实现&quot;">​</a></h1><p>你好，欢迎来到第 13 课时，上一课时我们实现了多种列表样式，但是缺乏下拉刷新和上拉加载更多的功能，本课时就来完善这部分的功能。实现下拉刷新和上拉加载更多，需要应用到 RefreshIndicator 组件 ，接下来我们就先了解这个组件的一些作用。</p><h3 id="refreshindicator" tabindex="-1">RefreshIndicator <a class="header-anchor" href="#refreshindicator" aria-label="Permalink to &quot;RefreshIndicator&quot;">​</a></h3><p>该组件主要的作用是在下拉时实现刷新，具体看下组件参数的一些作用。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">RefreshIndicator</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;"> key,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@required</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.child, </span><span style="color:#6A737D;">// 子组件，需要更新的组件列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.displacement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">40.0</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 刷新指示器离顶部的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@required</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.onRefresh, </span><span style="color:#6A737D;">// 下拉触发函数，该函数必须是 Future&lt;void&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.color, </span><span style="color:#6A737D;">// 设置指示器的颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.backgroundColor, </span><span style="color:#6A737D;">// 设置指示器的颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.notificationPredicate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultScrollNotificationPredicate, </span><span style="color:#6A737D;">// 检查组件是否需要监听下拉事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.semanticsLabel, </span><span style="color:#6A737D;">// 设置指示器的一个标签名字</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.semanticsValue, </span><span style="color:#6A737D;">// 加载进度，一般使用百分比</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.strokeWidth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 指示器的像素大小，默认 2.0</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">RefreshIndicator</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Key</span><span style="color:#24292E;"> key,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@required</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.child, </span><span style="color:#6A737D;">// 子组件，需要更新的组件列表</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.displacement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">40.0</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 刷新指示器离顶部的位置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@required</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.onRefresh, </span><span style="color:#6A737D;">// 下拉触发函数，该函数必须是 Future&lt;void&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.color, </span><span style="color:#6A737D;">// 设置指示器的颜色</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.backgroundColor, </span><span style="color:#6A737D;">// 设置指示器的颜色</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.notificationPredicate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultScrollNotificationPredicate, </span><span style="color:#6A737D;">// 检查组件是否需要监听下拉事件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.semanticsLabel, </span><span style="color:#6A737D;">// 设置指示器的一个标签名字</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.semanticsValue, </span><span style="color:#6A737D;">// 加载进度，一般使用百分比</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.strokeWidth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 指示器的像素大小，默认 2.0</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>了解完 RefreshIndicator 组件，我们再来看下本课时所要实现的一个效果，如图 1 动画所示。</p>`,6),E=s(`<p>图 1 下拉刷新上拉加载效果</p><p>图 1 中的效果包含了下拉刷新，上拉滑动翻页，在翻页到最后一页时，给了一定的提示信息。接下来我们就实现这个功能。</p><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p>前面我介绍到了下拉刷新功能，使用到的是 RefreshIndicator 组件。而上拉加载更多，使用的是上课时 ListView.separated 中的 controller 属性，通过监听上拉动作，来判断是否需要执行下一页翻页。</p><p>那么在实现代码前，我们还是需要做一些前期的准备。因为现在涉及了翻页，因此 API 返回的数据结构不仅仅是数据列表了，需要加上翻页相关的一些参数，具体我们来看下实现方案。</p><h4 id="api-增加返回结构" tabindex="-1">API 增加返回结构 <a class="header-anchor" href="#api-增加返回结构" aria-label="Permalink to &quot;API 增加返回结构&quot;">​</a></h4><p>API 的数据结构调整为下面的一个 JSON 格式。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;ret&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;message&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;hasMore&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;lastId&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;ret&quot;</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;message&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;hasMore&quot;</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;lastId&quot;</span><span style="color:#24292E;"> : </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p>ret，表示返回的状态码，0 表示成功。</p></li><li><p>message，返回的提示信息。</p></li><li><p>hasMore，表示是否还有更多，或者说下一页。</p></li><li><p>lastId，翻页标识。</p></li></ul><p>根据如上的结构，我们需要去 Struct 中新建一个 api_ret_info.dart 用来保存所有相关的 api 返回结构，具体代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// api 拉取content list返回结构</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// {</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;ret&quot; : 0,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;message&quot; : &quot;success&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;hasMore&quot; : true,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;lastId&quot; : null,</span></span>
<span class="line"><span style="color:#6A737D;">/// }</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 用户的昵称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 用户头像信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> message;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 是否还有更多</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> hasMore;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 最后一个id</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> lastId;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 具体的content list</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ret, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hasMore, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.lastId, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;package:two_you_friend/util/struct/content_detail.dart&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">/// api 拉取content list返回结构</span></span>
<span class="line"><span style="color:#6A737D;">///</span></span>
<span class="line"><span style="color:#6A737D;">/// {</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;ret&quot; : 0,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;message&quot; : &quot;success&quot;,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;hasMore&quot; : true,</span></span>
<span class="line"><span style="color:#6A737D;">///   &quot;lastId&quot; : null,</span></span>
<span class="line"><span style="color:#6A737D;">/// }</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 用户的昵称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 用户头像信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 是否还有更多</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> hasMore;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 最后一个id</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> lastId;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 具体的content list</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; data;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ret, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.message, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hasMore, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lastId, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.data</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面代码已经是一个比较常见的 Struct 结构。完成 Struct 代码后，我们再来修改 API 文件，将接口返回的类型从原来的 List 修改为 StructApiContentListRetInfo ，其次在函数中增加参数，用来判断是否为下一页，具体代码实现如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 拉取用户内容推荐帖子列表</span></span>
<span class="line"><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">([lastId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(lastId </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; dataList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    ];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;success&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;2001&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      dataList</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; dataList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">()，</span></span>
<span class="line"><span style="color:#E1E4E8;">      ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    ];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;success&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;1010&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        dataList</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 拉取用户内容推荐帖子列表</span></span>
<span class="line"><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">([lastId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(lastId </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; dataList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">      ...</span></span>
<span class="line"><span style="color:#24292E;">    ];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;success&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;2001&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      dataList</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; dataList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">()，</span></span>
<span class="line"><span style="color:#24292E;">      ...</span></span>
<span class="line"><span style="color:#24292E;">    ];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;success&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;1010&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        dataList</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码第 2 行修改了 API 接口返回的数据类型为 StructApiContentListRetInfo 。代码第 3 行，判断是否为下一页，如果是则返回下一页的数据，如果不是则返回第一页数据。最后返回的数据结构都是使用 StructApiContentListRetInfo 进行封装处理。</p><p>完成上面前期准备后，我们再来修改核心主页面的一个逻辑处理，分为下拉刷新和上拉加载更多两部分。Two You APP 的首页会以内容+缩略图的展示方式，本课时也只从这部分来介绍。</p><h4 id="新增状态" tabindex="-1">新增状态 <a class="header-anchor" href="#新增状态" aria-label="Permalink to &quot;新增状态&quot;">​</a></h4><p>为了实现该功能，我们需要新增以下几个状态变量：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 首页推荐贴子列表</span></span>
<span class="line"><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; contentList;</span></span>
<span class="line"><span style="color:#6A737D;">/// 列表事件监听</span></span>
<span class="line"><span style="color:#79B8FF;">ScrollController</span><span style="color:#E1E4E8;"> scrollController </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ScrollController</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">/// 是否存在下一页</span></span>
<span class="line"><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> hasMore;</span></span>
<span class="line"><span style="color:#6A737D;">/// 页面是否正在加载</span></span>
<span class="line"><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> isLoading;</span></span>
<span class="line"><span style="color:#6A737D;">/// 最后一个数据 ID</span></span>
<span class="line"><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> lastId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 首页推荐贴子列表</span></span>
<span class="line"><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; contentList;</span></span>
<span class="line"><span style="color:#6A737D;">/// 列表事件监听</span></span>
<span class="line"><span style="color:#005CC5;">ScrollController</span><span style="color:#24292E;"> scrollController </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ScrollController</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">/// 是否存在下一页</span></span>
<span class="line"><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> hasMore;</span></span>
<span class="line"><span style="color:#6A737D;">/// 页面是否正在加载</span></span>
<span class="line"><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> isLoading;</span></span>
<span class="line"><span style="color:#6A737D;">/// 最后一个数据 ID</span></span>
<span class="line"><span style="color:#005CC5;">String</span><span style="color:#24292E;"> lastId;</span></span></code></pre></div><ul><li><p>contentList，我们已经介绍过，是保存当前需要的列表元素；</p></li><li><p>scrollController，用来监听列表事件，主要是判断上拉加载更多功能；</p></li><li><p>hasMore，标记是否还存在下一页；</p></li><li><p>isLoading，用于标识页面是否正在加载中；</p></li><li><p>lastId，记录最后一条数据的 ID，用于翻页。</p></li></ul><h4 id="首次加载和下拉刷新" tabindex="-1">首次加载和下拉刷新 <a class="header-anchor" href="#首次加载和下拉刷新" aria-label="Permalink to &quot;首次加载和下拉刷新&quot;">​</a></h4><p>首次加载和下拉刷新本质上是一样的作用，因此我们将两个功能合并为一个函数 setFirstPage ，先来看下这个函数的实现。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 处理首次拉取和刷新数据获取动作</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setFirstPage</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;"> retInfo </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ApiContentIndex</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    contentList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    hasMore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.hasMore;</span></span>
<span class="line"><span style="color:#E1E4E8;">    isLoading </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.lastId;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 处理首次拉取和刷新数据获取动作</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setFirstPage</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;"> retInfo </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ApiContentIndex</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">    contentList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.data;</span></span>
<span class="line"><span style="color:#24292E;">    hasMore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.hasMore;</span></span>
<span class="line"><span style="color:#24292E;">    isLoading </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    lastId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.lastId;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上述代码中，首先获取 API 返回数据，然后将返回的数据初始化相应的状态属性。实现完 setFirstPage ，我们再补充调用该函数的两个逻辑，initState 和 onRefresh ，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 处理刷新操作</span></span>
<span class="line"><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onRefresh</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Future</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">delayed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Duration</span><span style="color:#E1E4E8;">(seconds</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setFirstPage</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 拉取首页接口数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setFirstPage</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 处理刷新操作</span></span>
<span class="line"><span style="color:#005CC5;">Future</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onRefresh</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Future</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">delayed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Duration</span><span style="color:#24292E;">(seconds</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setFirstPage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 拉取首页接口数据</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setFirstPage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>完成以上两部分后，我们使用刚刚介绍的 RefreshIndicator 来实现下拉刷新，修改 build 逻辑，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RefreshIndicator</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    onRefresh</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> onRefresh, </span><span style="color:#6A737D;">// 调用刷新事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ListView</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">separated</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      scrollDirection</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Axis</span><span style="color:#E1E4E8;">.vertical,</span></span>
<span class="line"><span style="color:#E1E4E8;">      shrinkWrap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      itemCount</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList.length,</span></span>
<span class="line"><span style="color:#E1E4E8;">      itemBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> position) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ArticleCard</span><span style="color:#E1E4E8;">(articleInfo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[position]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      separatorBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context, index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Divider</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#E1E4E8;">          color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0xFFDDDDDD</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RefreshIndicator</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    onRefresh</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> onRefresh, </span><span style="color:#6A737D;">// 调用刷新事件</span></span>
<span class="line"><span style="color:#24292E;">    child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ListView</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">separated</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      scrollDirection</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Axis</span><span style="color:#24292E;">.vertical,</span></span>
<span class="line"><span style="color:#24292E;">      shrinkWrap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      itemCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList.length,</span></span>
<span class="line"><span style="color:#24292E;">      itemBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> position) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ArticleCard</span><span style="color:#24292E;">(articleInfo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[position]);</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      separatorBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context, index) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Divider</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#24292E;">          color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xFFDDDDDD</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面代码的第 3 行，使用到了 RefreshIndicator 组件，在第 4 行设置 onRefresh 调用 onRefresh 函数，这样就完成了下拉刷新功能。</p><h4 id="上拉加载更多" tabindex="-1">上拉加载更多 <a class="header-anchor" href="#上拉加载更多" aria-label="Permalink to &quot;上拉加载更多&quot;">​</a></h4><p>上拉加载更多使用到 ListView.separated 的 controller 属性功能，在 initState 中，我们首先要设置该滑动的监听事件，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">initState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 拉取首页接口数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setFirstPage</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 监听上滑事件，活动加载更多</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.scrollController.</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hasMore){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isLoading </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        scrollController.position.pixels </span><span style="color:#F97583;">&gt;=</span></span>
<span class="line"><span style="color:#E1E4E8;">            scrollController.position.maxScrollExtent</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      isLoading </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">loadMoreData</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">initState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 拉取首页接口数据</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setFirstPage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 监听上滑事件，活动加载更多</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.scrollController.</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">hasMore){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isLoading </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        scrollController.position.pixels </span><span style="color:#D73A49;">&gt;=</span></span>
<span class="line"><span style="color:#24292E;">            scrollController.position.maxScrollExtent</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      isLoading </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">loadMoreData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码的第 8 行到第 22 行，先判断是否还有更多内容，如果没有则下拉不处理任何事件，如果有更多内容，并且界面内容没有在加载中，则处理内容加载。第 13 行中的 isLoading 目的就是避免上一次内容未加载完，又继续请求触发。第 14 行作用是判断当前滚动位置是否大于等于最大滚动长度，大于则表示需要加载更多。触发加载时，首选需要将 isLoading 修改为 true，这里可以不用 setState ，避免因为使用 setState 而引发 build 逻辑。最后调用 loadMoreData 方法，我们来看下该方法的实现。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 加载下一页</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadMoreData</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;"> retInfo </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ApiContentIndex</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">(lastId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">StructContentDetail</span><span style="color:#E1E4E8;">&gt; newList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    isLoading </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    hasMore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.hasMore;</span></span>
<span class="line"><span style="color:#E1E4E8;">    contentList.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(newList);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 加载下一页</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadMoreData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;"> retInfo </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ApiContentIndex</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">(lastId);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">StructContentDetail</span><span style="color:#24292E;">&gt; newList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.data;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">    isLoading </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    hasMore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.hasMore;</span></span>
<span class="line"><span style="color:#24292E;">    contentList.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(newList);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码第 4 到第 6 行还是拉取 API 接口数据，获取到接口返回后，再使用 setState 来更新状态变量 contentList ，从而触发界面 build 。</p><p>以上就完成了下拉刷新和上拉加载更多，但是这里还存在一些问题，比如在网络较慢的情况下，如何处理一些加载动作，或者在接口出错的情况下，如何友好地提示用户。下面我们就来完成这部分的一个简单优化。</p><h3 id="功能优化" tabindex="-1">功能优化 <a class="header-anchor" href="#功能优化" aria-label="Permalink to &quot;功能优化&quot;">​</a></h3><p>在 App 运行中，都没办法 100% 保证正确性，因此需要考虑到，在接口访问较慢或者接口报错的情况下，我们需要友好地提示用户。这里我们可以在接口报错或者其他异常时，显示通用报错组件。在接口请求较慢，或者加载到最后一页时，可以设计一个通用的 loading 组件来优化这部分体验。接下来我们就来实现这两个通用的组件。</p><h4 id="增加错误处理" tabindex="-1">增加错误处理 <a class="header-anchor" href="#增加错误处理" aria-label="Permalink to &quot;增加错误处理&quot;">​</a></h4><p>首先我们需要创建一个比较通用的错误提示组件，该组件因为是一个通用组件，所以在 widgets/common 文件夹下创建 error.dart 。创建该组件的一些外部参数，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 具体的错误码</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> errorCode;</span></span>
<span class="line"><span style="color:#6A737D;">/// 可点击的回调函数</span></span>
<span class="line"><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;"> action;</span></span>
<span class="line"><span style="color:#6A737D;">/// 默认构造函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonError</span><span style="color:#E1E4E8;">({</span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;"> key, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.errorCode, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.action})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> key);</span></span>
<span class="line"><span style="color:#6A737D;">/// 返回提示信息</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> errorMapping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;server_error&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;服务器响应错误&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;系统异常&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;服务异常&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 具体的错误码</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> errorCode;</span></span>
<span class="line"><span style="color:#6A737D;">/// 可点击的回调函数</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Function</span><span style="color:#24292E;"> action;</span></span>
<span class="line"><span style="color:#6A737D;">/// 默认构造函数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonError</span><span style="color:#24292E;">({</span><span style="color:#005CC5;">Key</span><span style="color:#24292E;"> key, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.errorCode, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.action})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> key);</span></span>
<span class="line"><span style="color:#6A737D;">/// 返回提示信息</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> errorMapping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;server_error&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;服务器响应错误&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;系统异常&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;default&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;服务异常&#39;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>主要看下 build 逻辑，build 中包含两部分，第一部分是解析页面跳转的数据，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> newErrorCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errorCode;</span></span>
<span class="line"><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;"> newAction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> action;</span></span>
<span class="line"><span style="color:#6A737D;">// 获取来自接口 router 跳转参数</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">ModalRoute</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(context).settings.arguments </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;"> dataInfo </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">JsonConfig</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">objectToMap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ModalRoute</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(context).settings.arguments);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(dataInfo[</span><span style="color:#9ECBFF;">&#39;errorCode&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    newErrorCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataInfo[</span><span style="color:#9ECBFF;">&#39;errorCode&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(dataInfo[</span><span style="color:#9ECBFF;">&#39;action&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    newAction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataInfo[</span><span style="color:#9ECBFF;">&#39;action&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 判断是否存在，不存在使用默认提示</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(errorMapping[newErrorCode] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  newErrorCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">String</span><span style="color:#24292E;"> newErrorCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errorCode;</span></span>
<span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;"> newAction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> action;</span></span>
<span class="line"><span style="color:#6A737D;">// 获取来自接口 router 跳转参数</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">ModalRoute</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(context).settings.arguments </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Map</span><span style="color:#24292E;"> dataInfo </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">JsonConfig</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">objectToMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ModalRoute</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(context).settings.arguments);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(dataInfo[</span><span style="color:#032F62;">&#39;errorCode&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    newErrorCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataInfo[</span><span style="color:#032F62;">&#39;errorCode&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(dataInfo[</span><span style="color:#032F62;">&#39;action&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    newAction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dataInfo[</span><span style="color:#032F62;">&#39;action&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Function</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 判断是否存在，不存在使用默认提示</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(errorMapping[newErrorCode] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  newErrorCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;default&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中的第 4 到 13 行主要是为了处理有些来自 router 跳转的参数，router 跳转的参数是通过 ModalRoute.of(context).settings.arguments 方法来获取，这点在第 10 课时已经讲解过。第 15 行则是避免没有匹配到任何错误提示，给一个默认数据。</p><p>以上是参数处理部分，接下来我们看下组件部分代码。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Scaffold</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  body</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Container</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    alignment</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Alignment</span><span style="color:#E1E4E8;">.center,</span></span>
<span class="line"><span style="color:#E1E4E8;">    child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Column</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      mainAxisAlignment</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MainAxisAlignment</span><span style="color:#E1E4E8;">.center,</span></span>
<span class="line"><span style="color:#E1E4E8;">      children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Widget</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Text</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;\${</span><span style="color:#79B8FF;">errorMapping</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">newErrorCode</span><span style="color:#9ECBFF;">]}&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">RaisedButton</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.lightBlueAccent,</span></span>
<span class="line"><span style="color:#E1E4E8;">          highlightColor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.lightBlueAccent[</span><span style="color:#79B8FF;">700</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">          colorBrightness</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Brightness</span><span style="color:#E1E4E8;">.dark,</span></span>
<span class="line"><span style="color:#E1E4E8;">          splashColor</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Colors</span><span style="color:#E1E4E8;">.lightBlueAccent,</span></span>
<span class="line"><span style="color:#E1E4E8;">          child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Icon</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Icons</span><span style="color:#E1E4E8;">.refresh),</span></span>
<span class="line"><span style="color:#E1E4E8;">          shape</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">RoundedRectangleBorder</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">              borderRadius</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">BorderRadius</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">circular</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20.0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">          ),</span></span>
<span class="line"><span style="color:#E1E4E8;">          onPressed</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newAction </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">newAction</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 处理重试</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ),</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Scaffold</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  body</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Container</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    alignment</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Alignment</span><span style="color:#24292E;">.center,</span></span>
<span class="line"><span style="color:#24292E;">    child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Column</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      mainAxisAlignment</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MainAxisAlignment</span><span style="color:#24292E;">.center,</span></span>
<span class="line"><span style="color:#24292E;">      children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Widget</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Text</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;\${</span><span style="color:#005CC5;">errorMapping</span><span style="color:#032F62;">[</span><span style="color:#005CC5;">newErrorCode</span><span style="color:#032F62;">]}&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">RaisedButton</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.lightBlueAccent,</span></span>
<span class="line"><span style="color:#24292E;">          highlightColor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.lightBlueAccent[</span><span style="color:#005CC5;">700</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">          colorBrightness</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Brightness</span><span style="color:#24292E;">.dark,</span></span>
<span class="line"><span style="color:#24292E;">          splashColor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Colors</span><span style="color:#24292E;">.lightBlueAccent,</span></span>
<span class="line"><span style="color:#24292E;">          child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Icon</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Icons</span><span style="color:#24292E;">.refresh),</span></span>
<span class="line"><span style="color:#24292E;">          shape</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">RoundedRectangleBorder</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              borderRadius</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">BorderRadius</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">circular</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20.0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">          ),</span></span>
<span class="line"><span style="color:#24292E;">          onPressed</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(newAction </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">newAction</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 处理重试</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">  ),</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>上面代码使用了按钮组件 RaisedButton ，这和我们之前所使用的 FaltButton 功能相似，都是一个操作按钮，点击触发效果的功能。不过两者在界面上有一定区别，前者是凸起的按钮，后者是扁平的按钮。为了能够让用户手动重试，我们按钮增加了 onPressed 属性，该属性在点击后会触发 newAction 函数的执行。</p><p>接下来我们看下主页面是如何来调用的。首先在接口失败后，需要将一个状态变量 error 设置为 true ，其次在 build 前进行该字段的判断，当为 true 时，则显示错误页面，具体代码如下。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 处理首次拉取和刷新数据获取动作</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setFirstPage</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">StructApiContentListRetInfo</span><span style="color:#E1E4E8;"> retInfo </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">ApiContentIndex</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getRecommendList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(retInfo.ret </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">){ </span><span style="color:#6A737D;">// 判断返回是否正确</span></span>
<span class="line"><span style="color:#E1E4E8;">      error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    contentList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    hasMore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.hasMore;</span></span>
<span class="line"><span style="color:#E1E4E8;">    isLoading </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> retInfo.lastId;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 处理首次拉取和刷新数据获取动作</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setFirstPage</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">StructApiContentListRetInfo</span><span style="color:#24292E;"> retInfo </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">ApiContentIndex</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getRecommendList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(retInfo.ret </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){ </span><span style="color:#6A737D;">// 判断返回是否正确</span></span>
<span class="line"><span style="color:#24292E;">      error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    contentList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.data;</span></span>
<span class="line"><span style="color:#24292E;">    hasMore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.hasMore;</span></span>
<span class="line"><span style="color:#24292E;">    isLoading </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    lastId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> retInfo.lastId;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码和前面介绍的 setFirstPage 的共同点是对接口进行了返回判断，报错则直接设置 error 状态即可。</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(error){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonError</span><span style="color:#E1E4E8;">(action</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.setFirstPage);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(error){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonError</span><span style="color:#24292E;">(action</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.setFirstPage);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>build 部分代码我们只看前三行即可，当接口报错，则直接返回错误组件，并且传入重试函数</p><p>setFirstPage 。以上就完成了对错误的体验优化，这部分也可以使用弹窗提示模式。</p><h4 id="增加-loading-效果" tabindex="-1">增加 loading 效果 <a class="header-anchor" href="#增加-loading-效果" aria-label="Permalink to &quot;增加 loading 效果&quot;">​</a></h4><p>这里和上面错误处理一样，我们先还是创建一个通用的 loading 组件。在 widgets/common 下创建 loading.dart 文件。loading 组件会有三种状态：加载中、上拉加载提示、加载完成。将以上三种状态分别设计为三个小组件，我们主要看下核心组件的代码：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// 自行展示，load more还是已加载完成</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonLoadingButton</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">StatelessWidget</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 加载状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> loadingState;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 是否有更多</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> hasMore;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/// 默认构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonLoadingButton</span><span style="color:#E1E4E8;">({</span><span style="color:#79B8FF;">Key</span><span style="color:#E1E4E8;"> key, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.loadingState, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hasMore}) </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> key);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@override</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hasMore) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NoMore</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.loadingState) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Loading</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">LoadingStatic</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// 自行展示，load more还是已加载完成</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonLoadingButton</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">StatelessWidget</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 加载状态</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> loadingState;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 是否有更多</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> hasMore;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/// 默认构造函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonLoadingButton</span><span style="color:#24292E;">({</span><span style="color:#005CC5;">Key</span><span style="color:#24292E;"> key, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.loadingState, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hasMore}) </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> key);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@override</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.hasMore) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NoMore</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.loadingState) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Loading</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">LoadingStatic</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码第 14 行判断是否存在更多，没有则显示 NoMore 组件，再根据 loadingState 判断是显示加载中还是显示上拉加载提示。</p><p>最后我们再来看下在 build 逻辑中是如何应用该组件的，代码如下：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Widget</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(error){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonError</span><span style="color:#E1E4E8;">(action</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.setFirstPage);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RefreshIndicator</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    onRefresh</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> onRefresh, </span><span style="color:#6A737D;">// 调用刷新事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    child</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ListView</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">separated</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      scrollDirection</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Axis</span><span style="color:#E1E4E8;">.vertical,</span></span>
<span class="line"><span style="color:#E1E4E8;">      controller</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> scrollController,</span></span>
<span class="line"><span style="color:#E1E4E8;">      shrinkWrap</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      itemCount</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList.length </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      itemBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">BuildContext</span><span style="color:#E1E4E8;"> context, </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;"> position) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(position </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contentList.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ArticleCard</span><span style="color:#E1E4E8;">(articleInfo</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> contentList[position]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CommonLoadingButton</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            loadingState</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> isLoading, hasMore</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hasMore</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      separatorBuilder</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (context, index) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Divider</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> .</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#E1E4E8;">          color</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Color</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0xFFDDDDDD</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Widget</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(error){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonError</span><span style="color:#24292E;">(action</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.setFirstPage);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RefreshIndicator</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    onRefresh</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> onRefresh, </span><span style="color:#6A737D;">// 调用刷新事件</span></span>
<span class="line"><span style="color:#24292E;">    child</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ListView</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">separated</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      scrollDirection</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Axis</span><span style="color:#24292E;">.vertical,</span></span>
<span class="line"><span style="color:#24292E;">      controller</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> scrollController,</span></span>
<span class="line"><span style="color:#24292E;">      shrinkWrap</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      itemCount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList.length </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      itemBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">BuildContext</span><span style="color:#24292E;"> context, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> position) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(position </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.contentList.length) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ArticleCard</span><span style="color:#24292E;">(articleInfo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> contentList[position]);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CommonLoadingButton</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            loadingState</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> isLoading, hasMore</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hasMore</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      separatorBuilder</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (context, index) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Divider</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> .</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//indent: 75,</span></span>
<span class="line"><span style="color:#24292E;">          color</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Color</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xFFDDDDDD</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码中的第 11 行，需要将原来的列表数量增加一个，主要是预留给 loading 组件，其次在第 13 行判断是否大于当前列表元素，小于则 build 贴子组件，大于等于则显示 loading 组件。</p><p>以上就完成了错误处理和 loading 效果的优化，这两个功能也是通用组件，后续也会被使用到其他页面逻辑中。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时介绍了刷新组件 RefreshIndicator 的一些基础属性，其次实践开发了下拉刷新和上拉加载更多功能，最后在页面基础上增加了一些优化体验的功能。学完本课时要掌握下拉刷新和上拉加载的知识，并且能够实践应用，其次需要了解通用组件的设计方法。</p><p>下一课时我们将在 App 基础上完成个人页面，并且在个人页面增加红点提醒功能，丰富 App 整体功能。</p><p><a href="https://github.com/love-flutter/flutter-column" target="_blank" rel="noreferrer">点击此链接查看本课时源码</a></p>`,63);function y(i,F,d,C,u,h){const n=l("Image");return p(),o("div",null,[r,e(n,{alt:"20200711_155132.gif",src:"https://s0.lgstatic.com/i/image/M00/36/B5/CgqCHl8X9e6AN6lyAH6AtsDFbHo367.gif"}),t(),E])}const g=a(c,[["render",y]]);export{D as __pageData,g as default};
