import{_ as o,j as e,o as t,g as c,k as a,s,h as p,Q as l}from"./chunks/framework.4e7d56ce.js";const T=JSON.parse('{"title":"Axon ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1822) 第18讲：如何处理司机位置更新事件.md","filePath":"posts/backEnd/云原生微服务架构实战精讲_文档/(1822) 第18讲：如何处理司机位置更新事件.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/云原生微服务架构实战精讲_文档/(1822) 第18讲：如何处理司机位置更新事件.md"},E=s("p",null,"在第 17 课时中，我介绍了事件源技术的基本概念，并提供了基本的 Java 实现。在实际的开发中，我们通常使用已有的开源框架来实现事件源，不同的编程语言和平台都有事件源的开源实现。下表给出了几个比较流行的开源实现，示例应用使用的是 Axon。",-1),y=s("p",null,"示例应用中使用事件源技术的场景是司机位置的更新。本课时将介绍如何使用 Axon 来更新司机的位置，除了本课时之外，在介绍 CQRS 技术的课时中，也会用到 Axon。",-1),i=s("p",null,"在打车应用中，司机需要实时更新其当前位置。司机的位置信息是派发行程的重要依据，同时也是很多安全相关的功能的基础，打车应用的司机 App 会定期读取 GPS 中的位置信息，并发送给服务器。这属于典型的事件应用的场景。示例应用中虽然没有司机 App，但是有司机模拟器来模拟司机的行为，也会同样发送被模拟的司机位置信息给服务器。",-1),d=s("h3",{id:"axon",tabindex:"-1"},[p("Axon "),s("a",{class:"header-anchor",href:"#axon","aria-label":'Permalink to "Axon"'},"​")],-1),F=s("p",null,"Axon 是一个事件驱动的微服务的完整解决方案，我们可以完全基于 Axon 来开发事件驱动的微服务架构的应用。Axon 包括 Axon 框架和 Axon 服务器两个部分。Axon 框架是 Axon 中的编程模型，提供了 SDK 来构建应用，支持事件源和 CQRS 等技术；Axon 服务器则是一个高可用性和可伸缩的事件存储。Axon 框架并不一定要使用 Axon 服务器作为事件存储，也可以使用关系型数据库、MongoDB 或内存作为事件存储方式。不过 Axon 服务器提供了额外的功能，适合于生产环境。",-1),v=s("p",null,"Axon 支持 3 种不同类型的消息，这 3 种消息模式，可以适用于不同的应用场景，如下表所示。",-1),A=l(`<h4 id="axon-服务器" tabindex="-1">Axon 服务器 <a class="header-anchor" href="#axon-服务器" aria-label="Permalink to &quot;Axon 服务器&quot;">​</a></h4><p>Axon 服务器是一个通用的分布式消息处理平台，不同的应用可以连接到 Axon 服务器来进行消息传递。一个应用可以发布事件给 Axon 服务器，其他应用可以声明事件的处理器来处理事件。从这个功能上来说，Axon 服务器的作用类似于分布式的事件总线，一个应用也可以发送命令给 Axon 服务器，由其他应用来提供回应。命令只会发送给一个应用。这个功能类似于常见的<strong>远程过程调用（RPC）模式</strong>。查询会被发送给所有能够回答该查询的应用。</p><p>Axon 服务器提供两种交互方式，分别是 8024 端口上的 HTTP 和 8124 端口上的 gRPC。Axon 服务器基于 Spring Boot 实现，打包成单个 JAR 文件，下载之后可以直接运行。推荐的做法是使用 Docker 来运行。下面的命令用来启动 Axon 服务器的 Docker 容器。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">docker run </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p </span><span style="color:#79B8FF;">8024</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">p </span><span style="color:#79B8FF;">8124</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8124</span><span style="color:#E1E4E8;"> axoniq</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">axonserver</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4.3</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">docker run </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p </span><span style="color:#005CC5;">8024</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p </span><span style="color:#005CC5;">8124</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8124</span><span style="color:#24292E;"> axoniq</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">axonserver</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4.3</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">3</span></span></code></pre></div><h4 id="axon-框架" tabindex="-1">Axon 框架 <a class="header-anchor" href="#axon-框架" aria-label="Permalink to &quot;Axon 框架&quot;">​</a></h4><p>Axon 框架是 Java 应用使用的开发框架，支持 Axon 中 3 种类型的消息发布和处理。在 Spring Boot 应用中使用 Axon 框架非常简单，只需要添加相关的 Maven 依赖，就可以利用 Axon 框架提供的自动配置功能，如下面的代码所示。完成配置之后，Axon 框架中的对象实例都可以通过 @Autowired 来声明。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;org.axonframework&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;axon-spring-boot-starter&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;4.3.3&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;org.axonframework&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;axon-spring-boot-starter&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;4.3.3&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>在 Spring Boot 应用中，可以使用 Spring 标准的方式来配置 Axon 框架。在下面的 YAML 文件中，axon.axonserver.servers 用来配置 Axon 服务器的连接方式，这里连接的是 8124 端口上的 gRPC 接口。axon.serializer 用来配置事件对象的序列化格式。Axon 框架默认使用 XStream 序列化成 XML 格式。下面代码中的配置值 jackson 用来指定使用 Jackson 序列化成 JSON 格式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">axon</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  axonserver</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    servers</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> \${DOCKER_HOST_IP</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">localhost}</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">8124</span></span>
<span class="line"><span style="color:#E1E4E8;">  serializer</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    events</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> jackson</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">axon</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  axonserver</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    servers</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> \${DOCKER_HOST_IP</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">localhost}</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">8124</span></span>
<span class="line"><span style="color:#24292E;">  serializer</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    events</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> jackson</span></span></code></pre></div><h3 id="司机模拟器" tabindex="-1">司机模拟器 <a class="header-anchor" href="#司机模拟器" aria-label="Permalink to &quot;司机模拟器&quot;">​</a></h3><p>司机模拟器是示例应用提供的一个辅助工具，其作用是代替司机 App 在打车应用中的作用，司机模拟器可以同时模拟多个司机的行为。每个被模拟的司机有固定的行为模式，每隔 5 秒钟改变一次位置，位置改变的规则如下所示：</p><ul><li>从当前位置开始进行模拟，第一次模拟时使用初始位置；</li><li>随机确定是否应该转向，如果转向，随机确定是左转还是右转；</li><li>以随机的速度前进一段距离，作为新的位置。</li></ul><p>除了位置之外，司机还可能处于不同的状态，如下表所示。代码中使用枚举类型 DriverState 来表示。</p>`,13),g=s("p",null,"下图是司机模拟器的界面，上面展示了每个司机的状态，以及可以进行的操作。",-1),D=l(`<h3 id="发布事件" tabindex="-1">发布事件 <a class="header-anchor" href="#发布事件" aria-label="Permalink to &quot;发布事件&quot;">​</a></h3><p>Axon 框架中有两类不同的事件，分别是从聚合中发布的领域事件，以及从其他组件发布的普通事件。司机模拟器只需要发布普通事件即可。领域事件相关的内容，将会在介绍 CQRS 技术的课时（第 22 课时）中进行说明。</p><p>Axon 框架 EventGateway 的 publish 方法可以发布多个事件。EventGateway 接口使用 Object 作为事件类型，因此任何对象都可以作为事件来发布。在司机模拟器中，每个被模拟的司机都会定期发送其位置，位置变化的事件由 DriverLocationUpdatedEvent 类表示，如下面的代码所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DriverLocationUpdatedEvent</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DriverLocation location;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DriverState state;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timestamp;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DriverLocationUpdatedEvent</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DriverLocation location;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DriverState state;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timestamp;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在下面的代码中，DriverSimulator 类中的 sendLocation 方法使用 EventGateway 对象来发布 DriverLocationUpdatedEvent 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DriverSimulator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> EventGateway eventGateway;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendLocation</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DriverLocationUpdatedEvent event </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DriverLocationUpdatedEvent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.</span><span style="color:#B392F0;">setTimestamp</span><span style="color:#E1E4E8;">(System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.</span><span style="color:#B392F0;">setLocation</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.currentLocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.</span><span style="color:#B392F0;">setState</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.state);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.eventGateway.</span><span style="color:#B392F0;">publish</span><span style="color:#E1E4E8;">(event);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DriverSimulator</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> EventGateway eventGateway;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendLocation</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DriverLocationUpdatedEvent event </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DriverLocationUpdatedEvent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    event.</span><span style="color:#6F42C1;">setTimestamp</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    event.</span><span style="color:#6F42C1;">setLocation</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.currentLocation);</span></span>
<span class="line"><span style="color:#24292E;">    event.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.state);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.eventGateway.</span><span style="color:#6F42C1;">publish</span><span style="color:#24292E;">(event);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Axon 中所有组件的通讯都是通过消息对象来完成的。Message 是所有消息对象的接口，其类型参数 T 表示载荷对象的类型。所有消息对象都由 <strong>标识符</strong> 、 <strong>载荷</strong> 和 <strong>元数据</strong>这 3 个部分组成，标识符的类型是 String，元数据由 MetaData 类来表示，而载荷则根据消息的类型来确定。MetaData 类实现了 Map&lt;String, Object&gt; 接口，实际是一个名值对的哈希表，用来包含与消息相关的辅助信息。需要注意的是，消息对象都是不可变，对消息对象的修改，都会创建新的消息对象。</p><p>对于 Axon 支持的 3 种类型的消息，都有与之对应的 Message 子接口，表示事件的 EventMessage 接口在 Message 接口的基础上，增加了事件发生的时间戳，以 Instant 对象表示。通过 EventGateway 发布的事件对象，都会被自动封装成 EventMessage 对象，再发送给 Axon 服务器。</p><p>可以访问 Axon 服务器的 8024 端口来查看 Axon 服务器提供的管理界面，如下图所示，可以查看所有发布的事件的详细信息。</p>`,9),u=s("h3",{id:"处理事件",tabindex:"-1"},[p("处理事件 "),s("a",{class:"header-anchor",href:"#处理事件","aria-label":'Permalink to "处理事件"'},"​")],-1),C=s("p",null,"事件的处理器通过在处理方法上添加 @EventHandler 注解来声明。事件处理方法的第一个参数是事件消息的载荷类型，这个载荷类型用来确定可以被处理的事件类型。一个事件处理类中可以包含多个方法来处理不同类型的事件，对于一个事件处理对象，最多只有一个处理方法被调用。如果有多个方法可以匹配，那么参数类型最具体的那个方法会被调用；如果处理方法不需要访问事件的载荷对象，则可以通过 @EventHandler 注解的 payloadType 属性来声明载荷对象的类型，而不需要添加额外的方法参数。",-1),h=s("p",null,"除了事件的载荷之外，处理方法还可以声明其他类型的参数来自动获取事件对象中的其他值，如下表所示。",-1),B=l(`<p>从司机模拟器中发布的 DriverLocationUpdatedEvent 事件，会被行程派发服务来处理。在下面的代码中，DriverLocationUpdater 类中的 handle 方法用来处理 DriverLocationUpdatedEvent 事件。根据事件中司机状态的不同，调用 DriverLocationService 对象中的不同方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DriverLocationUpdater</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  DriverLocationService driverLocationService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">EventHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DriverLocationUpdatedEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DriverLocation location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getLocation</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.</span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> DriverState.AVAILABLE) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.driverLocationService.</span><span style="color:#B392F0;">addAvailableDriver</span><span style="color:#E1E4E8;">(location);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.driverLocationService.</span><span style="color:#B392F0;">removeAvailableDriver</span><span style="color:#E1E4E8;">(location.</span><span style="color:#B392F0;">getDriverId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DriverLocationUpdater</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  DriverLocationService driverLocationService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">EventHandler</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DriverLocationUpdatedEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DriverLocation location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getLocation</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> DriverState.AVAILABLE) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.driverLocationService.</span><span style="color:#6F42C1;">addAvailableDriver</span><span style="color:#24292E;">(location);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.driverLocationService.</span><span style="color:#6F42C1;">removeAvailableDriver</span><span style="color:#24292E;">(location.</span><span style="color:#6F42C1;">getDriverId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="位置查询" tabindex="-1">位置查询 <a class="header-anchor" href="#位置查询" aria-label="Permalink to &quot;位置查询&quot;">​</a></h3><p>在行程派发服务中，司机的位置信息被保存在 Redis 中。通过 Redis 提供的地理位置查询功能，可以从一个点出发，找到指定距离内的其他点。在下面的代码中，DriverLocationService 服务类负责管理所有处于可用状态的司机，其中 addAvailableDriver 和 removeAvailableDriver 方法分别用来添加和删除可用的司机，由上一节中 DriverLocationUpdatedEvent 的 handle 方法来调用。访问 Redis 时使用的是 Spring Data Redis 中的 RedisTemplate。</p><p>在 findAvailableDrivers 方法中，两个参数是作为查找起始点的地理位置坐标。接着通过调用 Redis 的 GEORADIUS 命令来查询以起始位置为圆心，半径 10 公里内的全部可用司机，并以 AvailableDriver 对象的形式返回。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DriverLocationService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">  RedisTemplate&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; redisTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;available_drivers&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Distance searchRadius </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Distance</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      DistanceUnit.KILOMETERS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addAvailableDriver</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DriverLocation </span><span style="color:#FFAB70;">location</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.redisTemplate.</span><span style="color:#B392F0;">opsForGeo</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.key, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;">(location.</span><span style="color:#B392F0;">getLng</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">doubleValue</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                location.</span><span style="color:#B392F0;">getLat</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">doubleValue</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">            location.</span><span style="color:#B392F0;">getDriverId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeAvailableDriver</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">driverId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.redisTemplate.</span><span style="color:#B392F0;">opsForGeo</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.key, driverId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Set&lt;</span><span style="color:#F97583;">AvailableDriver</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAvailableDrivers</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> BigDecimal </span><span style="color:#FFAB70;">lng</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> BigDecimal </span><span style="color:#FFAB70;">lat</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> GeoResults&lt;GeoLocation&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt; results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.redisTemplate.</span><span style="color:#B392F0;">opsForGeo</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">radius</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.key, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Circle</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;">(lng.</span><span style="color:#B392F0;">doubleValue</span><span style="color:#E1E4E8;">(), lat.</span><span style="color:#B392F0;">doubleValue</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">                searchRadius),</span></span>
<span class="line"><span style="color:#E1E4E8;">            GeoRadiusCommandArgs.</span><span style="color:#B392F0;">newGeoRadiusArgs</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">includeCoordinates</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (results </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> results.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Objects</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">nonNull)</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(result </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> GeoLocation&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getContent</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Point point </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> content.</span><span style="color:#B392F0;">getPoint</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AvailableDriver</span><span style="color:#E1E4E8;">(content.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                BigDecimal.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(point.</span><span style="color:#B392F0;">getX</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">                BigDecimal.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(point.</span><span style="color:#B392F0;">getY</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">          })</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toSet</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">emptySet</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DriverLocationService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">  RedisTemplate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; redisTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;available_drivers&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Distance searchRadius </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Distance</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      DistanceUnit.KILOMETERS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addAvailableDriver</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DriverLocation </span><span style="color:#E36209;">location</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.redisTemplate.</span><span style="color:#6F42C1;">opsForGeo</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.key, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">(location.</span><span style="color:#6F42C1;">getLng</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">doubleValue</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                location.</span><span style="color:#6F42C1;">getLat</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">doubleValue</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">            location.</span><span style="color:#6F42C1;">getDriverId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeAvailableDriver</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">driverId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.redisTemplate.</span><span style="color:#6F42C1;">opsForGeo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.key, driverId);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Set&lt;</span><span style="color:#D73A49;">AvailableDriver</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAvailableDrivers</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> BigDecimal </span><span style="color:#E36209;">lng</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> BigDecimal </span><span style="color:#E36209;">lat</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> GeoResults&lt;GeoLocation&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.redisTemplate.</span><span style="color:#6F42C1;">opsForGeo</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">radius</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.key, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Circle</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">(lng.</span><span style="color:#6F42C1;">doubleValue</span><span style="color:#24292E;">(), lat.</span><span style="color:#6F42C1;">doubleValue</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">                searchRadius),</span></span>
<span class="line"><span style="color:#24292E;">            GeoRadiusCommandArgs.</span><span style="color:#6F42C1;">newGeoRadiusArgs</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">includeCoordinates</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (results </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> results.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Objects</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">nonNull)</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(result </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> GeoLocation&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Point point </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> content.</span><span style="color:#6F42C1;">getPoint</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AvailableDriver</span><span style="color:#24292E;">(content.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                BigDecimal.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(point.</span><span style="color:#6F42C1;">getX</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">                BigDecimal.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(point.</span><span style="color:#6F42C1;">getY</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">          })</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toSet</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptySet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>示例应用中的司机模拟器用来模拟司机的行为，并定时发送其位置信息，示例应用使用 Axon 框架和 Axon 服务器来作为事件源技术的实现。本课时介绍了 Axon 服务器及其框架，以及如何使用 Axon 来发布和处理司机位置更新事件，并使用 Redis 来查询可用司机。</p>`,8);function b(_,m,x,f,S,k){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/0A/91/Ciqc1F6-O7-AbNaEAABsUgyb3p4652.png"}),y,i,d,F,v,a(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/0A/91/Ciqc1F6-O9iAaudNAABwa1Xbpcs676.png"}),A,a(n,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image/M00/0A/92/CgqCHl6-PDOAYpzBAACdUJiQWy8457.png"}),g,a(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/0A/92/CgqCHl6-PGaAIeH2AACO1T8V_bc838.png"}),D,a(n,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/0A/92/CgqCHl6-PKCAUPryAAGWDuo36aQ691.png"}),u,C,h,a(n,{alt:"图片4.png",src:"https://s0.lgstatic.com/i/image/M00/0A/92/Ciqc1F6-PLyAESmaAAC8VF4QX40040.png"}),B])}const P=o(r,[["render",b]]);export{T as __pageData,P as default};
