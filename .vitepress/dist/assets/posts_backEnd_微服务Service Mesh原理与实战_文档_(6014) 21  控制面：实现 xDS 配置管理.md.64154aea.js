import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.e0c66c3f.js";const v=JSON.parse('{"title":"代码解析 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/微服务Service Mesh原理与实战_文档/(6014) 21  控制面：实现 xDS 配置管理.md","filePath":"posts/backEnd/微服务Service Mesh原理与实战_文档/(6014) 21  控制面：实现 xDS 配置管理.md","lastUpdated":1696338709000}'),l={name:"posts/backEnd/微服务Service Mesh原理与实战_文档/(6014) 21  控制面：实现 xDS 配置管理.md"},o=p(`<p>今天我要和你分享的是如何用代码实现 Service Mesh 控制面，实现 xDS 配置管理，以及数据面 Sidecar 如何与控制面进行通信。</p><p>这一讲的代码实现在<a href="https://github.com/beck917/easypilot" target="_blank" rel="noreferrer">https://github.com/beck917/easypilot</a>和<a href="https://github.com/beck917/easymesh" target="_blank" rel="noreferrer">https://github.com/beck917/easymesh</a>中，你可以配合代码阅读。</p><p>Envoy 官方的实例和著名的控制面 Istio，都选择使用 Go 语言来实现，所以这里我们也采用 Go 语言实现控制面代码。控制面的基本代码相对简单，主要复杂点在于和公司运维环境的配合上，所以各个公司的控制面大多数都要自研或者二次开发。</p><h3 id="代码解析" tabindex="-1">代码解析 <a class="header-anchor" href="#代码解析" aria-label="Permalink to &quot;代码解析&quot;">​</a></h3><p>我们直接使用 Envoy 官方提供的 go -control-plane 类库来实现具体功能。</p><p>首先看一下 main.go 的入口代码，这部分代码创建了一个 gRPC Server，来提供 xDS 服务。</p><p>go-control-plane 类库使用 Snapshot 的方式存储数据，比如 EDS 中的 Endpoint 数据，如果进行数据更新，只需<strong>刷新 Snapshot 数据</strong>就可以了。</p><p>这里首先创建了 SnapshotCache，然后用 Mock 的数据生成了一份 Snapshot，最后将 Snapshop 存储到 Cache 中，为对应的 NodeID 生成一份 Cache 数据，这样 xDS Server 在提供服务的时候，就可以将对应的数据发送到客户端了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    cache </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cachev3.</span><span style="color:#B392F0;">NewSnapshotCache</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, cachev3.IDHash{}, l)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建 snapshot 数据，用于给数据面提供 xds 数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    snapshot </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> example.</span><span style="color:#B392F0;">GenerateSnapshot</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> snapshot.</span><span style="color:#B392F0;">Consistent</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">        l.</span><span style="color:#B392F0;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;snapshot inconsistency: %+v</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">%+v&quot;</span><span style="color:#E1E4E8;">, snapshot, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        os.</span><span style="color:#B392F0;">Exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    l.</span><span style="color:#B392F0;">Debugf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;will serve snapshot %+v&quot;</span><span style="color:#E1E4E8;">, snapshot)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将 snapshot 写入缓存</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">SetSnapshot</span><span style="color:#E1E4E8;">(nodeID, snapshot); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">        l.</span><span style="color:#B392F0;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;snapshot error %q for %+v&quot;</span><span style="color:#E1E4E8;">, err, snapshot)</span></span>
<span class="line"><span style="color:#E1E4E8;">        os.</span><span style="color:#B392F0;">Exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 运行 xds 服务器</span></span>
<span class="line"><span style="color:#E1E4E8;">    ctx </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">Background</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    cb </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">testv3.Callbacks{Debug</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> l.Debug}</span></span>
<span class="line"><span style="color:#E1E4E8;">    srv </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> serverv3.</span><span style="color:#B392F0;">NewServer</span><span style="color:#E1E4E8;">(ctx, cache, cb)</span></span>
<span class="line"><span style="color:#E1E4E8;">    example.</span><span style="color:#B392F0;">RunServer</span><span style="color:#E1E4E8;">(ctx, srv, port)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建缓存</span></span>
<span class="line"><span style="color:#24292E;">    cache </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cachev3.</span><span style="color:#6F42C1;">NewSnapshotCache</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, cachev3.IDHash{}, l)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建 snapshot 数据，用于给数据面提供 xds 数据</span></span>
<span class="line"><span style="color:#24292E;">    snapshot </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> example.</span><span style="color:#6F42C1;">GenerateSnapshot</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> snapshot.</span><span style="color:#6F42C1;">Consistent</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">        l.</span><span style="color:#6F42C1;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;snapshot inconsistency: %+v</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">%+v&quot;</span><span style="color:#24292E;">, snapshot, err)</span></span>
<span class="line"><span style="color:#24292E;">        os.</span><span style="color:#6F42C1;">Exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    l.</span><span style="color:#6F42C1;">Debugf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;will serve snapshot %+v&quot;</span><span style="color:#24292E;">, snapshot)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将 snapshot 写入缓存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">SetSnapshot</span><span style="color:#24292E;">(nodeID, snapshot); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">        l.</span><span style="color:#6F42C1;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;snapshot error %q for %+v&quot;</span><span style="color:#24292E;">, err, snapshot)</span></span>
<span class="line"><span style="color:#24292E;">        os.</span><span style="color:#6F42C1;">Exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 运行 xds 服务器</span></span>
<span class="line"><span style="color:#24292E;">    ctx </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">Background</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    cb </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">testv3.Callbacks{Debug</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> l.Debug}</span></span>
<span class="line"><span style="color:#24292E;">    srv </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> serverv3.</span><span style="color:#6F42C1;">NewServer</span><span style="color:#24292E;">(ctx, cache, cb)</span></span>
<span class="line"><span style="color:#24292E;">    example.</span><span style="color:#6F42C1;">RunServer</span><span style="color:#24292E;">(ctx, srv, port)</span></span></code></pre></div><p>接下来，我们进入具体方法的学习，先来看 example.GenerateSnapshot() 这个方法，这个方法模拟了一些测试数据。</p><p>下面这段代码创建了 CDS、EDS、RDS、LDS 对应的数据，其中包括集群、节点、路由、监听器等数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">GenerateSnapshot</span><span style="color:#E1E4E8;">() cache.Snapshot {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">NewSnapshot</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			[]types.Resource{}, </span><span style="color:#6A737D;">// endpoints</span></span>
<span class="line"><span style="color:#E1E4E8;">			[]types.Resource{</span><span style="color:#B392F0;">makeCluster</span><span style="color:#E1E4E8;">(ClusterName)},</span></span>
<span class="line"><span style="color:#E1E4E8;">			[]types.Resource{</span><span style="color:#B392F0;">makeRoute</span><span style="color:#E1E4E8;">(RouteName, ClusterName)},</span></span>
<span class="line"><span style="color:#E1E4E8;">			[]types.Resource{</span><span style="color:#B392F0;">makeHTTPListener</span><span style="color:#E1E4E8;">(ListenerName, RouteName)},</span></span>
<span class="line"><span style="color:#E1E4E8;">			[]types.Resource{}, </span><span style="color:#6A737D;">// runtimes</span></span>
<span class="line"><span style="color:#E1E4E8;">			[]types.Resource{}, </span><span style="color:#6A737D;">// secrets</span></span>
<span class="line"><span style="color:#E1E4E8;">		)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">GenerateSnapshot</span><span style="color:#24292E;">() cache.Snapshot {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">NewSnapshot</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			[]types.Resource{}, </span><span style="color:#6A737D;">// endpoints</span></span>
<span class="line"><span style="color:#24292E;">			[]types.Resource{</span><span style="color:#6F42C1;">makeCluster</span><span style="color:#24292E;">(ClusterName)},</span></span>
<span class="line"><span style="color:#24292E;">			[]types.Resource{</span><span style="color:#6F42C1;">makeRoute</span><span style="color:#24292E;">(RouteName, ClusterName)},</span></span>
<span class="line"><span style="color:#24292E;">			[]types.Resource{</span><span style="color:#6F42C1;">makeHTTPListener</span><span style="color:#24292E;">(ListenerName, RouteName)},</span></span>
<span class="line"><span style="color:#24292E;">			[]types.Resource{}, </span><span style="color:#6A737D;">// runtimes</span></span>
<span class="line"><span style="color:#24292E;">			[]types.Resource{}, </span><span style="color:#6A737D;">// secrets</span></span>
<span class="line"><span style="color:#24292E;">		)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>我们再来看 CDS 和 EDS 的数据创建。</p><p>Cluster 和 Endpoint 的数据结构在第<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=586#/detail/pc?id=6008" target="_blank" rel="noreferrer">15 讲《xDS：控制面和数据面的通信桥梁》</a>中有提到过，这里我们结合具体的代码进行深入了解。</p><p>我们先来看 Cluster 的数据类型的参数：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">makeCluster</span><span style="color:#E1E4E8;">(clusterName string) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">cluster.Cluster {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cluster.Cluster{</span></span>
<span class="line"><span style="color:#E1E4E8;">			Name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">                 clusterName,</span></span>
<span class="line"><span style="color:#E1E4E8;">			ConnectTimeout</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">       ptypes.</span><span style="color:#B392F0;">DurationProto</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second),</span></span>
<span class="line"><span style="color:#E1E4E8;">			ClusterDiscoveryType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">cluster.Cluster_Type{Type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cluster.Cluster_LOGICAL_DNS},</span></span>
<span class="line"><span style="color:#E1E4E8;">			LbPolicy</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">             cluster.Cluster_ROUND_ROBIN,</span></span>
<span class="line"><span style="color:#E1E4E8;">			LoadAssignment</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">makeEndpoint</span><span style="color:#E1E4E8;">(clusterName),</span></span>
<span class="line"><span style="color:#E1E4E8;">			DnsLookupFamily</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">      cluster.Cluster_V4_ONLY,</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	func </span><span style="color:#B392F0;">makeEndpoint</span><span style="color:#E1E4E8;">(clusterName string) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">endpoint.ClusterLoadAssignment {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">endpoint.ClusterLoadAssignment{</span></span>
<span class="line"><span style="color:#E1E4E8;">			ClusterName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> clusterName,</span></span>
<span class="line"><span style="color:#E1E4E8;">			Endpoints</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">endpoint.LocalityLbEndpoints{ {</span></span>
<span class="line"><span style="color:#E1E4E8;">				LbEndpoints</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">endpoint.LbEndpoint{ {</span></span>
<span class="line"><span style="color:#E1E4E8;">					HostIdentifier</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">endpoint.LbEndpoint_Endpoint{</span></span>
<span class="line"><span style="color:#E1E4E8;">						Endpoint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">endpoint.Endpoint{</span></span>
<span class="line"><span style="color:#E1E4E8;">							Address</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">core.Address{</span></span>
<span class="line"><span style="color:#E1E4E8;">								Address</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">core.Address_SocketAddress{</span></span>
<span class="line"><span style="color:#E1E4E8;">									SocketAddress</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">core.SocketAddress{</span></span>
<span class="line"><span style="color:#E1E4E8;">										Protocol</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> core.SocketAddress_TCP,</span></span>
<span class="line"><span style="color:#E1E4E8;">										Address</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  UpstreamHost,</span></span>
<span class="line"><span style="color:#E1E4E8;">										PortSpecifier</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">core.SocketAddress_PortValue{</span></span>
<span class="line"><span style="color:#E1E4E8;">											PortValue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> UpstreamPort,</span></span>
<span class="line"><span style="color:#E1E4E8;">										},</span></span>
<span class="line"><span style="color:#E1E4E8;">									},</span></span>
<span class="line"><span style="color:#E1E4E8;">								},</span></span>
<span class="line"><span style="color:#E1E4E8;">							},</span></span>
<span class="line"><span style="color:#E1E4E8;">						},</span></span>
<span class="line"><span style="color:#E1E4E8;">					},</span></span>
<span class="line"><span style="color:#E1E4E8;">				}},</span></span>
<span class="line"><span style="color:#E1E4E8;">			}},</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">makeCluster</span><span style="color:#24292E;">(clusterName string) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">cluster.Cluster {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cluster.Cluster{</span></span>
<span class="line"><span style="color:#24292E;">			Name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">                 clusterName,</span></span>
<span class="line"><span style="color:#24292E;">			ConnectTimeout</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">       ptypes.</span><span style="color:#6F42C1;">DurationProto</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second),</span></span>
<span class="line"><span style="color:#24292E;">			ClusterDiscoveryType</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cluster.Cluster_Type{Type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cluster.Cluster_LOGICAL_DNS},</span></span>
<span class="line"><span style="color:#24292E;">			LbPolicy</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">             cluster.Cluster_ROUND_ROBIN,</span></span>
<span class="line"><span style="color:#24292E;">			LoadAssignment</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">       </span><span style="color:#6F42C1;">makeEndpoint</span><span style="color:#24292E;">(clusterName),</span></span>
<span class="line"><span style="color:#24292E;">			DnsLookupFamily</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">      cluster.Cluster_V4_ONLY,</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	func </span><span style="color:#6F42C1;">makeEndpoint</span><span style="color:#24292E;">(clusterName string) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">endpoint.ClusterLoadAssignment {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">endpoint.ClusterLoadAssignment{</span></span>
<span class="line"><span style="color:#24292E;">			ClusterName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> clusterName,</span></span>
<span class="line"><span style="color:#24292E;">			Endpoints</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">endpoint.LocalityLbEndpoints{ {</span></span>
<span class="line"><span style="color:#24292E;">				LbEndpoints</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">endpoint.LbEndpoint{ {</span></span>
<span class="line"><span style="color:#24292E;">					HostIdentifier</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">endpoint.LbEndpoint_Endpoint{</span></span>
<span class="line"><span style="color:#24292E;">						Endpoint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">endpoint.Endpoint{</span></span>
<span class="line"><span style="color:#24292E;">							Address</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">core.Address{</span></span>
<span class="line"><span style="color:#24292E;">								Address</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">core.Address_SocketAddress{</span></span>
<span class="line"><span style="color:#24292E;">									SocketAddress</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">core.SocketAddress{</span></span>
<span class="line"><span style="color:#24292E;">										Protocol</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> core.SocketAddress_TCP,</span></span>
<span class="line"><span style="color:#24292E;">										Address</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  UpstreamHost,</span></span>
<span class="line"><span style="color:#24292E;">										PortSpecifier</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">core.SocketAddress_PortValue{</span></span>
<span class="line"><span style="color:#24292E;">											PortValue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> UpstreamPort,</span></span>
<span class="line"><span style="color:#24292E;">										},</span></span>
<span class="line"><span style="color:#24292E;">									},</span></span>
<span class="line"><span style="color:#24292E;">								},</span></span>
<span class="line"><span style="color:#24292E;">							},</span></span>
<span class="line"><span style="color:#24292E;">						},</span></span>
<span class="line"><span style="color:#24292E;">					},</span></span>
<span class="line"><span style="color:#24292E;">				}},</span></span>
<span class="line"><span style="color:#24292E;">			}},</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>接下来看一下 example.RunServer(ctx, srv, port) 这个方法。该方法首先创建了一个 gRPC Server，并设置了 grpcMaxConcurrentStreams：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 启动 xds server</span></span>
<span class="line"><span style="color:#E1E4E8;">	func </span><span style="color:#B392F0;">RunServer</span><span style="color:#E1E4E8;">(ctx context.Context, srv3 serverv3.Server, port uint) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 设置 grpcMaxConcurrentStreams 参数，用于增加默认的单连接并发数量</span></span>
<span class="line"><span style="color:#E1E4E8;">		var grpcOptions []grpc.ServerOption</span></span>
<span class="line"><span style="color:#E1E4E8;">		grpcOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(grpcOptions, grpc.</span><span style="color:#B392F0;">MaxConcurrentStreams</span><span style="color:#E1E4E8;">(grpcMaxConcurrentStreams))</span></span>
<span class="line"><span style="color:#E1E4E8;">		grpcServer </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> grpc.</span><span style="color:#B392F0;">NewServer</span><span style="color:#E1E4E8;">(grpcOptions...)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">		lis, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#B392F0;">Listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tcp&quot;</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#B392F0;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:%d&quot;</span><span style="color:#E1E4E8;">, port))</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">			log.</span><span style="color:#B392F0;">Fatal</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">registerServer</span><span style="color:#E1E4E8;">(grpcServer, srv3)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#B392F0;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;management server listening on %d</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, port)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> grpcServer.</span><span style="color:#B392F0;">Serve</span><span style="color:#E1E4E8;">(lis); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">			log.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 启动 xds server</span></span>
<span class="line"><span style="color:#24292E;">	func </span><span style="color:#6F42C1;">RunServer</span><span style="color:#24292E;">(ctx context.Context, srv3 serverv3.Server, port uint) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 设置 grpcMaxConcurrentStreams 参数，用于增加默认的单连接并发数量</span></span>
<span class="line"><span style="color:#24292E;">		var grpcOptions []grpc.ServerOption</span></span>
<span class="line"><span style="color:#24292E;">		grpcOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(grpcOptions, grpc.</span><span style="color:#6F42C1;">MaxConcurrentStreams</span><span style="color:#24292E;">(grpcMaxConcurrentStreams))</span></span>
<span class="line"><span style="color:#24292E;">		grpcServer </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> grpc.</span><span style="color:#6F42C1;">NewServer</span><span style="color:#24292E;">(grpcOptions...)</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">		lis, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> net.</span><span style="color:#6F42C1;">Listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tcp&quot;</span><span style="color:#24292E;">, fmt.</span><span style="color:#6F42C1;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:%d&quot;</span><span style="color:#24292E;">, port))</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">			log.</span><span style="color:#6F42C1;">Fatal</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">registerServer</span><span style="color:#24292E;">(grpcServer, srv3)</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#6F42C1;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;management server listening on %d</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, port)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> grpcServer.</span><span style="color:#6F42C1;">Serve</span><span style="color:#24292E;">(lis); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">			log.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>接来下通过 registerServer 方法，将提供 xDS 服务的 Service 注册到已经创建好的 gRPC Server 上面，用于提供对应的 xDS Server服务。你要注意，这里有一个 RegisterAggregatedDiscoveryServiceServer 的 Server 提供<strong>聚合查询服务</strong>，通过这个 Server 可以为所有的 xDS 协议提供服务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">registerServer</span><span style="color:#E1E4E8;">(grpcServer </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">grpc.Server, server serverv3.Server) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 注册服务</span></span>
<span class="line"><span style="color:#E1E4E8;">		discoverygrpc.</span><span style="color:#B392F0;">RegisterAggregatedDiscoveryServiceServer</span><span style="color:#E1E4E8;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#E1E4E8;">		endpointservice.</span><span style="color:#B392F0;">RegisterEndpointDiscoveryServiceServer</span><span style="color:#E1E4E8;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#E1E4E8;">		clusterservice.</span><span style="color:#B392F0;">RegisterClusterDiscoveryServiceServer</span><span style="color:#E1E4E8;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#E1E4E8;">		routeservice.</span><span style="color:#B392F0;">RegisterRouteDiscoveryServiceServer</span><span style="color:#E1E4E8;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#E1E4E8;">		listenerservice.</span><span style="color:#B392F0;">RegisterListenerDiscoveryServiceServer</span><span style="color:#E1E4E8;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#E1E4E8;">		secretservice.</span><span style="color:#B392F0;">RegisterSecretDiscoveryServiceServer</span><span style="color:#E1E4E8;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#E1E4E8;">		runtimeservice.</span><span style="color:#B392F0;">RegisterRuntimeDiscoveryServiceServer</span><span style="color:#E1E4E8;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">registerServer</span><span style="color:#24292E;">(grpcServer </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">grpc.Server, server serverv3.Server) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 注册服务</span></span>
<span class="line"><span style="color:#24292E;">		discoverygrpc.</span><span style="color:#6F42C1;">RegisterAggregatedDiscoveryServiceServer</span><span style="color:#24292E;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#24292E;">		endpointservice.</span><span style="color:#6F42C1;">RegisterEndpointDiscoveryServiceServer</span><span style="color:#24292E;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#24292E;">		clusterservice.</span><span style="color:#6F42C1;">RegisterClusterDiscoveryServiceServer</span><span style="color:#24292E;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#24292E;">		routeservice.</span><span style="color:#6F42C1;">RegisterRouteDiscoveryServiceServer</span><span style="color:#24292E;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#24292E;">		listenerservice.</span><span style="color:#6F42C1;">RegisterListenerDiscoveryServiceServer</span><span style="color:#24292E;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#24292E;">		secretservice.</span><span style="color:#6F42C1;">RegisterSecretDiscoveryServiceServer</span><span style="color:#24292E;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#24292E;">		runtimeservice.</span><span style="color:#6F42C1;">RegisterRuntimeDiscoveryServiceServer</span><span style="color:#24292E;">(grpcServer, server)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>至此，一个简单的 xDS Server 就讲完了。这里的 xDS Server 填充了一些测试数据来模拟结果，如果在生产环境使用，需要<strong>接入相应的平台</strong>才能提供数据。</p><p>比如在 Istio 中通过 Kubernetes 的 API 为 xDS Server 提供数据；通过在 YAML 中声明 VirtualService 类型来为 RDS 服务提供数据。又或者使用了第三方的注册中心，比如 Consul，则需要通过 Consul API 为 EDS 服务提供数据。</p><p>接下来，我们通过一个 EDS Client，来看一下如何在数据面 Sidecar 中通过 xDS 和控制面协议通信。这部分代码还是在<a href="https://github.com/beck917/easymesh" target="_blank" rel="noreferrer">https://github.com/beck917/easymesh</a>代码仓库中。</p><p>我们先来看 utils/eds 文件夹下的代码。</p><p>首先通过 NewWithInterval 创建一个 EDS 对象，然后连接 EDS 服务器，并且创建一个 Goroutine，通过 Loop 的方法定时发送请求数据到 EDS 服务器。这里我们采用了推拉结合的方式来获取 EDS 数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">NewWithInterval</span><span style="color:#E1E4E8;">(addr string, interval time.Duration) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">adapter, error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> interval </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        interval </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.Minute</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    urlobj, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">Parse</span><span style="color:#E1E4E8;">(addr)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> nil </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(urlobj.Host) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        addr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> urlobj.Host</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    eds </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">adapter{</span></span>
<span class="line"><span style="color:#E1E4E8;">        addr</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> addr,</span></span>
<span class="line"><span style="color:#E1E4E8;">        node</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">core.Node{</span></span>
<span class="line"><span style="color:#E1E4E8;">            Id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateNodeID</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        single</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;">(singleflight.Group),</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">         registry.</span><span style="color:#B392F0;">NewServiceCache</span><span style="color:#E1E4E8;">(nil, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        streams</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">       sync.Map{},</span></span>
<span class="line"><span style="color:#E1E4E8;">        fetchInterval</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> interval,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> eds.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nil, errors.</span><span style="color:#B392F0;">Wrap</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 定时拉取数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    go eds.</span><span style="color:#B392F0;">loop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> eds, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">NewWithInterval</span><span style="color:#24292E;">(addr string, interval time.Duration) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">adapter, error) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> interval </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        interval </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.Minute</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    urlobj, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">Parse</span><span style="color:#24292E;">(addr)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> nil </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(urlobj.Host) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        addr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> urlobj.Host</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    eds </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">adapter{</span></span>
<span class="line"><span style="color:#24292E;">        addr</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> addr,</span></span>
<span class="line"><span style="color:#24292E;">        node</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">core.Node{</span></span>
<span class="line"><span style="color:#24292E;">            Id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateNodeID</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        single</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">(singleflight.Group),</span></span>
<span class="line"><span style="color:#24292E;">        cache</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">         registry.</span><span style="color:#6F42C1;">NewServiceCache</span><span style="color:#24292E;">(nil, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        streams</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">       sync.Map{},</span></span>
<span class="line"><span style="color:#24292E;">        fetchInterval</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> interval,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eds.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nil, errors.</span><span style="color:#6F42C1;">Wrap</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 定时拉取数据</span></span>
<span class="line"><span style="color:#24292E;">    go eds.</span><span style="color:#6F42C1;">loop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> eds, nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同时在负载均衡器中，我们采用 getService 来获取服务节点数据。这个方法首先会读取缓存中的数据，如果缓存中没有数据则会通过创建和 EDS 服务器建立 Watch 机制，动态更新 Cache 中的数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (eds </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">adapter) </span><span style="color:#B392F0;">GetServices</span><span style="color:#E1E4E8;">(name string, opts ...registry.DiscoveryOption) (services []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">registry.Service, err error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> eds.ccErr </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">        err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#B392F0;">Wrap</span><span style="color:#E1E4E8;">(eds.ccErr)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    options </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> registry.</span><span style="color:#B392F0;">NewCommonDiscoveryOption</span><span style="color:#E1E4E8;">(opts...)</span></span>
<span class="line"><span style="color:#E1E4E8;">    key </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> registry.</span><span style="color:#B392F0;">NewServiceKey</span><span style="color:#E1E4E8;">(name, options.Tags, options.DC)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第一步，从缓存读取</span></span>
<span class="line"><span style="color:#E1E4E8;">    services, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> eds.cache.</span><span style="color:#B392F0;">GetServices</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> nil </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(services) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 从 eds 服务获取</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> eds.</span><span style="color:#B392F0;">fetchServices</span><span style="color:#E1E4E8;">(key, options.Tags)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (eds </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">adapter) </span><span style="color:#6F42C1;">GetServices</span><span style="color:#24292E;">(name string, opts ...registry.DiscoveryOption) (services []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">registry.Service, err error) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> eds.ccErr </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">        err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errors.</span><span style="color:#6F42C1;">Wrap</span><span style="color:#24292E;">(eds.ccErr)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    options </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> registry.</span><span style="color:#6F42C1;">NewCommonDiscoveryOption</span><span style="color:#24292E;">(opts...)</span></span>
<span class="line"><span style="color:#24292E;">    key </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> registry.</span><span style="color:#6F42C1;">NewServiceKey</span><span style="color:#24292E;">(name, options.Tags, options.DC)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 第一步，从缓存读取</span></span>
<span class="line"><span style="color:#24292E;">    services, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> eds.cache.</span><span style="color:#6F42C1;">GetServices</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> nil </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(services) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 从 eds 服务获取</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> eds.</span><span style="color:#6F42C1;">fetchServices</span><span style="color:#24292E;">(key, options.Tags)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>startWatch 方法创建了一个新的 Goroutine 用于监听 EDS 数据的变化，通过 parseStream 阻塞获取 EDS Server 的推送获取数据，获取数据后，将数据存入 Cache 中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (eds </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">adapter) </span><span style="color:#B392F0;">startWatch</span><span style="color:#E1E4E8;">(client discovery.AggregatedDiscoveryService_StreamAggregatedResourcesClient, key registry.ServiceKey, tags []string) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    logger.</span><span style="color:#B392F0;">Infof</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;eds.Watch(%+v) ...&quot;</span><span style="color:#E1E4E8;">, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    go </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(streamClient discovery.AggregatedDiscoveryService_StreamAggregatedResourcesClient, serviceKey registry.ServiceKey) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        defer </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> panicErr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">recover</span><span style="color:#E1E4E8;">(); panicErr </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">                logger.</span><span style="color:#B392F0;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;eds.startWatch() panic: %+v&quot;</span><span style="color:#E1E4E8;">, panicErr)</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//eds.streams.Delete(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            services, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> eds.</span><span style="color:#B392F0;">parseStream</span><span style="color:#E1E4E8;">(eds.</span><span style="color:#B392F0;">getStreamClient</span><span style="color:#E1E4E8;">(key), tags)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">                logger.</span><span style="color:#B392F0;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;eds.Watch(%+v): %+v&quot;</span><span style="color:#E1E4E8;">, key, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">                time.</span><span style="color:#B392F0;">Sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">continue</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(services) </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                logger.</span><span style="color:#B392F0;">Warnf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;eds.Watch(%+v): empty services, ignored!&quot;</span><span style="color:#E1E4E8;">, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">continue</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            ipv4s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;">([]string, </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(services))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, svc </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> range services {</span></span>
<span class="line"><span style="color:#E1E4E8;">                ipv4s[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> svc.</span><span style="color:#B392F0;">ServiceIP</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">Infof</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;eds.Watch(%+v): total=%d, services=%+v&quot;</span><span style="color:#E1E4E8;">, key, </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(services), ipv4s)</span></span>
<span class="line"><span style="color:#E1E4E8;">            eds.cache.</span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(key, services)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> eds.watcher </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">                eds.watcher.</span><span style="color:#B392F0;">Handle</span><span style="color:#E1E4E8;">(key, services)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }(client, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (eds </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">adapter) </span><span style="color:#6F42C1;">startWatch</span><span style="color:#24292E;">(client discovery.AggregatedDiscoveryService_StreamAggregatedResourcesClient, key registry.ServiceKey, tags []string) {</span></span>
<span class="line"><span style="color:#24292E;">    logger.</span><span style="color:#6F42C1;">Infof</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;eds.Watch(%+v) ...&quot;</span><span style="color:#24292E;">, key)</span></span>
<span class="line"><span style="color:#24292E;">    go </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(streamClient discovery.AggregatedDiscoveryService_StreamAggregatedResourcesClient, serviceKey registry.ServiceKey) {</span></span>
<span class="line"><span style="color:#24292E;">        defer </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> panicErr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">recover</span><span style="color:#24292E;">(); panicErr </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">                logger.</span><span style="color:#6F42C1;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;eds.startWatch() panic: %+v&quot;</span><span style="color:#24292E;">, panicErr)</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//eds.streams.Delete(key)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            services, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> eds.</span><span style="color:#6F42C1;">parseStream</span><span style="color:#24292E;">(eds.</span><span style="color:#6F42C1;">getStreamClient</span><span style="color:#24292E;">(key), tags)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">                logger.</span><span style="color:#6F42C1;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;eds.Watch(%+v): %+v&quot;</span><span style="color:#24292E;">, key, err)</span></span>
<span class="line"><span style="color:#24292E;">                time.</span><span style="color:#6F42C1;">Sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">continue</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(services) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                logger.</span><span style="color:#6F42C1;">Warnf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;eds.Watch(%+v): empty services, ignored!&quot;</span><span style="color:#24292E;">, key)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">continue</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            ipv4s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;">([]string, </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(services))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, svc </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> range services {</span></span>
<span class="line"><span style="color:#24292E;">                ipv4s[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> svc.</span><span style="color:#6F42C1;">ServiceIP</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">Infof</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;eds.Watch(%+v): total=%d, services=%+v&quot;</span><span style="color:#24292E;">, key, </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(services), ipv4s)</span></span>
<span class="line"><span style="color:#24292E;">            eds.cache.</span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(key, services)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> eds.watcher </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">                eds.watcher.</span><span style="color:#6F42C1;">Handle</span><span style="color:#24292E;">(key, services)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }(client, key)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，整个 EDS 的交互过程就讲完了，需要注意的是：<strong>当发送数据，或者获取数据错误的时候，需要重新连接 EDS 服务器</strong>，否则一旦网络异常或者 EDS 服务器重启，导致 EDS 连接断开，就无法正确地更新数据了。</p><p>现在，数据面和控制面如何通过 xDS 交互就讲完了。但是如果要在代码中真正地跑起来，还需要和负载均衡器结合，下面我们就看一下如何在 Sidecar 中实现负载均衡器。</p><p>和传统的在 Client SDK 中实现负载均衡器有所不同，SDK 中的负载均衡器一般是创建好后传入 Client 对象。Client 对象在发出请求前，先调用负载均衡器的 Next 方法，获取到被调服务的 IP，然后进行服务请求。比如下面的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">var srv </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">registry.Service</span></span>
<span class="line"><span style="color:#E1E4E8;">srv, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tp.rr.</span><span style="color:#B392F0;">Next</span><span style="color:#E1E4E8;">(ireq.</span><span style="color:#B392F0;">Context</span><span style="color:#E1E4E8;">(), host)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">	logger.</span><span style="color:#B392F0;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;get host:%v err:%v&quot;</span><span style="color:#E1E4E8;">, host, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">continue</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">ireq.URL.Host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> srv.</span><span style="color:#B392F0;">Addr</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">resp, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tp.rt.</span><span style="color:#B392F0;">RoundTrip</span><span style="color:#E1E4E8;">(ireq)、</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">var srv </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">registry.Service</span></span>
<span class="line"><span style="color:#24292E;">srv, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tp.rr.</span><span style="color:#6F42C1;">Next</span><span style="color:#24292E;">(ireq.</span><span style="color:#6F42C1;">Context</span><span style="color:#24292E;">(), host)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">	logger.</span><span style="color:#6F42C1;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get host:%v err:%v&quot;</span><span style="color:#24292E;">, host, err)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">continue</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">ireq.URL.Host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> srv.</span><span style="color:#6F42C1;">Addr</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">resp, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tp.rt.</span><span style="color:#6F42C1;">RoundTrip</span><span style="color:#24292E;">(ireq)、</span></span></code></pre></div><p>但在 Sidecar 中，负载均衡器组件也被抽象成了<strong>中间件</strong> 的方式，具体在 Go-Micro 中，就是<strong>创建一个新的 Wrapper</strong> 。而且这<strong>些中间件都被统一写在了 Server 的中间件中</strong>，并不需要写在 Client 的中间件中，因为这种做法的抽象程度更好，模型也更加统一，对于理解和编写、维护代码都有帮助。</p><p>在讲解负载均衡器的中间件代码前，我们先看一下路由器的中间件。路由器中间件的作用是根据我们的请求参数，比如 header、path 等，找到对应的服务。只有通过路由器中间件找到了对应的服务名，我们才能让负载均衡器中间件通过服务名找到对应的 Endpoint。</p><p>这个中间件通过 match 方法获取到了对应的 router 对象和 router 对象内包含的 handlers，这个 handler 实际上是绑定在 router 上的另外一套中间件体系，这样做的目的是<strong>让中间件更容易获取 router 的一些信息</strong>，否则还需要通过 routername 查询才能获取到相关信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HandlerWrapper 服务端中间件</span></span>
<span class="line"><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;"> (wrap </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Wrappers) </span><span style="color:#B392F0;">HandlerWrapper</span><span style="color:#E1E4E8;">() server.HandlerWrapper {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(next server.HandlerFunc) server.HandlerFunc {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(ctx context.Context, req server.Request, rsp interface{}) error {</span></span>
<span class="line"><span style="color:#E1E4E8;">			route, handlers </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> wrap.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(req.</span><span style="color:#B392F0;">Service</span><span style="color:#E1E4E8;">(), req.</span><span style="color:#B392F0;">Method</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> route </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#B392F0;">NotFound</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mesh.wrap.router&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;route mismatch&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">WithValue</span><span style="color:#E1E4E8;">(ctx, defs.CtxRouter{}, route)</span></span>
<span class="line"><span style="color:#E1E4E8;">			handler </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(ctx context.Context, req server.Request, rsp interface{}) error {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// 嵌套自定义 wraps</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(handlers); i </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">				handler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> handlers[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">](handler)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HandlerWrapper 服务端中间件</span></span>
<span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> (wrap </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Wrappers) </span><span style="color:#6F42C1;">HandlerWrapper</span><span style="color:#24292E;">() server.HandlerWrapper {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(next server.HandlerFunc) server.HandlerFunc {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(ctx context.Context, req server.Request, rsp interface{}) error {</span></span>
<span class="line"><span style="color:#24292E;">			route, handlers </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> wrap.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(req.</span><span style="color:#6F42C1;">Service</span><span style="color:#24292E;">(), req.</span><span style="color:#6F42C1;">Method</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> route </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> errors.</span><span style="color:#6F42C1;">NotFound</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mesh.wrap.router&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;route mismatch&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">WithValue</span><span style="color:#24292E;">(ctx, defs.CtxRouter{}, route)</span></span>
<span class="line"><span style="color:#24292E;">			handler </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(ctx context.Context, req server.Request, rsp interface{}) error {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 嵌套自定义 wraps</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(handlers); i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handlers[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">](handler)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>每个中间件，都有一个 Reload 的方法，这个 Reload 方法用来更新 xDS 获取的配置到具体的中间件对象中。比如 router 中间件的 Reload 方法，就将所有的路由信息解析出来，存储在 ServiceRoutes 对象中，用于 match 方法的匹配，这样才能找到请求具体对应的服务名。</p><p>接下来，我们来看负载均衡器的中间件，这个中间件也绑定在路由对象中，当匹配到对应的路由后，会自动通过 Next 方法调用这个中间件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 注入中间件</span></span>
<span class="line"><span style="color:#E1E4E8;">routeHandlers </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> handlers</span></span>
<span class="line"><span style="color:#E1E4E8;">lbWrap, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> loadbalance.</span><span style="color:#B392F0;">HandlerWrapper</span><span style="color:#E1E4E8;">(srv, config, dis)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#B392F0;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;service key:%s empty route:%+v build lb wrap err:%v&quot;</span><span style="color:#E1E4E8;">, srvKey, route, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 注入中间件</span></span>
<span class="line"><span style="color:#24292E;">routeHandlers </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> handlers</span></span>
<span class="line"><span style="color:#24292E;">lbWrap, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> loadbalance.</span><span style="color:#6F42C1;">HandlerWrapper</span><span style="color:#24292E;">(srv, config, dis)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#6F42C1;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;service key:%s empty route:%+v build lb wrap err:%v&quot;</span><span style="color:#24292E;">, srvKey, route, err)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>负载均衡器会通过 nextNode 的方法获取请求的节点，nextNode 方法直接从 LB 对象中获取相应的 Endpoint 数据。这里和 EDS 的类库有一个交互，EDS 类库在获取到新的数据时会主动更新 LB 对象中的数据，以确保 LB 中的 Next 方法可以一直获取到最新的节点数据。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HandlerWrapper 负载均衡和服务发现</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#B392F0;">HandlerWrapper</span><span style="color:#E1E4E8;">(cluster </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">qdx.Cluster, config </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">types.Config, dis qudiscovery.Discovery) (server.HandlerWrapper, error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	nextNode, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newNext</span><span style="color:#E1E4E8;">(cluster, config.Upstreams, dis)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> nil, err</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(next server.HandlerFunc) server.HandlerFunc {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">(ctx context.Context, req server.Request, rsp interface{}) error {</span></span>
<span class="line"><span style="color:#E1E4E8;">			node, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nextNode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#B392F0;">BadRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mesh.wrap.lb&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;lb.next err:%v&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">			ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">WithValue</span><span style="color:#E1E4E8;">(ctx, defs.CtxAddress{}, node.Address)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}, nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HandlerWrapper 负载均衡和服务发现</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#6F42C1;">HandlerWrapper</span><span style="color:#24292E;">(cluster </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">qdx.Cluster, config </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">types.Config, dis qudiscovery.Discovery) (server.HandlerWrapper, error) {</span></span>
<span class="line"><span style="color:#24292E;">	nextNode, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newNext</span><span style="color:#24292E;">(cluster, config.Upstreams, dis)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nil, err</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(next server.HandlerFunc) server.HandlerFunc {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(ctx context.Context, req server.Request, rsp interface{}) error {</span></span>
<span class="line"><span style="color:#24292E;">			node, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nextNode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> errors.</span><span style="color:#6F42C1;">BadRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mesh.wrap.lb&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;lb.next err:%v&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">			ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.</span><span style="color:#6F42C1;">WithValue</span><span style="color:#24292E;">(ctx, defs.CtxAddress{}, node.Address)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(ctx, req, rsp)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}, nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至此，负载均衡器和路由器原理的代码解析部分就讲完了，下面我们对今天的内容做一个简单的总结。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这一讲我主要介绍了如何在代码层面实现 xDS Server，以及数据面如何和控制面通过 xDS 协议进行交互。通过今天的学习，相信你已经对 xDS 协议有了更清晰的认识，也掌握了如何实现一个完整的 Mesh 系统。另外，我们还从代码层面讲解了路由器和负载均衡器模块，这两个部分的学习，有助于你更清晰地理解 Sidecar 的原理。</p><p>结合今天讲解的内容，如果让你实现 RDS 的交互，也就是路由组件和 RDS Server 的交互，你会如何做呢，欢迎在留言区和我分享你的观点。</p><p>今天内容到这里就结束了，下一讲我会讲解 Service Mesh 如何落地：在实践落地中可能遇到的问题和困难。众所周知，任何新的架构在实践落地中都会遇到非常大的阻力，Service Mesh 也不例外。我们下一讲再见。</p>`,48),e=[o];function t(r,c,E,y,i,d){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{v as __pageData,u as default};
