import{_ as l,j as e,o as t,g as r,k as a,Q as p,s as n,h as o}from"./chunks/framework.4e7d56ce.js";const B=JSON.parse('{"title":"Spring Data Rest Demo ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4729) 30  Spring Data Ret 是什么？和 JPA 是什么关系？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4729) 30  Spring Data Ret 是什么？和 JPA 是什么关系？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4729) 30  Spring Data Ret 是什么？和 JPA 是什么关系？.md"},E=p(`<p>通过之前课时的内容，相信你已经对 JPA 有了深入的认识了，那么 JPA 还有哪些应用场景呢？这一讲，我们将通过 Spring Data Rest 来聊聊实体和 Respository 的另外一种用法。</p><p>首先通过一个 Demo 让你感受一下，怎么快速创建一个 Rest 风格的 Server 服务端。</p><h3 id="spring-data-rest-demo" tabindex="-1">Spring Data Rest Demo <a class="header-anchor" href="#spring-data-rest-demo" aria-label="Permalink to &quot;Spring Data Rest Demo&quot;">​</a></h3><p>我们通过以下四个步骤演示一下 Spring Data Rest 的效果。</p><p><strong>第一步：通过 gradle 引入相关的 jar 依赖</strong>，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;org.springframework.boot:spring-boot-starter-data-jpa&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// spring data rest的依赖，由于我们使用的是spring boot，所以只需要添加starter即可</span></span>
<span class="line"><span style="color:#B392F0;">implementation</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-data-rest&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//我们添加swagger方便看得出来，生成了哪些api接口</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;io.springfox:springfox-boot-starter:3.0.0&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// swagger 对spring data reset支持需要添加 springfox-data-rest</span></span>
<span class="line"><span style="color:#E1E4E8;">implementation </span><span style="color:#9ECBFF;">&#39;io.springfox:springfox-data-rest:3.0.0&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;org.springframework.boot:spring-boot-starter-data-jpa&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// spring data rest的依赖，由于我们使用的是spring boot，所以只需要添加starter即可</span></span>
<span class="line"><span style="color:#6F42C1;">implementation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.springframework.boot:spring-boot-starter-data-rest&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//我们添加swagger方便看得出来，生成了哪些api接口</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;io.springfox:springfox-boot-starter:3.0.0&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// swagger 对spring data reset支持需要添加 springfox-data-rest</span></span>
<span class="line"><span style="color:#24292E;">implementation </span><span style="color:#032F62;">&#39;io.springfox:springfox-data-rest:3.0.0&#39;</span></span></code></pre></div><p>添加完依赖之后，我们可以通过 gradle 的依赖视图看一下都用了哪些 jar 包。</p>`,7),y=p(`<p>通过上图可以很清晰地看到 spring-data-rest 的 jar 包引入情况，以及我们依赖的 spring-data-jpa 和 Swagger。</p><p><strong>第二步：在项目里面添加 SpringFoxConfiguration 开启 Swagger</strong>，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableSwagger2</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SpringFoxConfiguration</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableSwagger2</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpringFoxConfiguration</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p><strong>第三步：通过 application.properties 指定一个 base-path，以方便和我们自己的 api 进行区分</strong>，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 我们可以通过spring data rest里面提供的配置项，指定bast</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">path</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.data.rest.base</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">path</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">api</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">rest</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 我们可以通过spring data rest里面提供的配置项，指定bast</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">path</span></span>
<span class="line"><span style="color:#24292E;">spring.data.rest.base</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">path</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">api</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">rest</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v2</span></span></code></pre></div><p><strong>第四步：直接启动项目，就可以看到效果了，不需要任何额外的 controller 的配置和设置</strong>。</p><p>启动成功之后，我们就会发现，里面多了很多 api/rest/v2 等 Rest 风格的 API，并且可以直接使用。如下图所示，不只有我们自己的 Controller，还有 Spring DataRest 自己生成的 API。</p>`,7),i=n("p",null,[o("这时我们打开 Swagger 看一下："),n("a",{href:"http://127.0.0.1:8087/swagger-ui/",target:"_blank",rel:"noreferrer"},"http://127.0.0.1:8087/swagger-ui/")],-1),g=n("p",null,"由于我们的 Demo 的项目结构是下图所示这样的。",-1),d=p(`<p>你会发现有几个 Repository 会帮我们生成几个对应的 Rest 协议的 API，除了基本的 CRUD，例如 UserInfoRespository 自定义的方法它们也会帮我们展示出来。而 Room 实体我们没有对应的 Repository，所以不会有对应的 Rest 风格 API 生成。</p><p>通过这个 Demo 你可以想象一下，如果要做一个 Rest 风格的 Server API 项目，是不是只需要把对应的 Entity 和 Repository 建好，就可以直接拥有了所有的 CRUD 的 API 了？这样可以大大提高我们的开发效率。</p><p>下面我们详细看一下 Spring Data Rest 的基本用法。</p><h3 id="spring-data-rest-基本用法" tabindex="-1">Spring Data Rest 基本用法 <a class="header-anchor" href="#spring-data-rest-基本用法" aria-label="Permalink to &quot;Spring Data Rest 基本用法&quot;">​</a></h3><p>通过 Demo 可以看得出来，Spring Data Rest 的核心功能就是把 Spring Data Resositories 里对外暴露的方法生成对应的 API，如我们上面的 AddressRepository，里面对应的实体是 Address，代码如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;{</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>它帮我们生成的 API 有下图所示的这些。</p>`,7),u=p('<p>从 swagger 我们可以看到 Spring Data Rest 的几点用法。</p><h4 id="语义化的方法" tabindex="-1">语义化的方法 <a class="header-anchor" href="#语义化的方法" aria-label="Permalink to &quot;语义化的方法&quot;">​</a></h4><p>把实体转化成复数的形式，生成基本的 PATCH、GET、PUT、POST、DELETE 带有语义的 Rest 相应的方法，包括的子资源有如下几个。</p><ul><li><p>GET：返回单个实体</p></li><li><p>PUT：更新资源</p></li><li><p>PATCH：与 PUT 类似，但部分是更新资源状态</p></li><li><p>DELETE：删除暴露的资源</p></li><li><p>POST：从给定的请求正文创建一个新的实体</p></li></ul><h4 id="默认的状态码的支持" tabindex="-1">默认的状态码的支持 <a class="header-anchor" href="#默认的状态码的支持" aria-label="Permalink to &quot;默认的状态码的支持&quot;">​</a></h4><ul><li><p>200 OK：适用于纯粹的 GET 请求</p></li><li><p>201 Created：针对创建新资源的 POST 和 PUT 请求</p></li><li><p>204 No Content：对于 PUT、PATCH 和 DELETE 请求</p></li><li><p>401 没有认证</p></li><li><p>403 没有权限，拒绝访问</p></li><li><p>404 没有找到对应的资源</p></li></ul><h4 id="分页支持" tabindex="-1">分页支持 <a class="header-anchor" href="#分页支持" aria-label="Permalink to &quot;分页支持&quot;">​</a></h4><p>通过 Swagger，我们可以看到其完全对分页和排序进行支持，完全兼容我们之前讲过的 Spring Data JPA 的分页和排序的参数，如下图所示。</p>',8),A=p(`<h4 id="通过-repositoryrestresource-改变资源的-metadata" tabindex="-1">通过 @RepositoryRestResource 改变资源的 metaData <a class="header-anchor" href="#通过-repositoryrestresource-改变资源的-metadata" aria-label="Permalink to &quot;通过 @RepositoryRestResource 改变资源的 metaData&quot;">​</a></h4><p>代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RepositoryRestResource</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">exported</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//资源是否暴露，默认true</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;users&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//资源暴露的path访问路径，默认实体名字+s</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">collectionResourceRel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//资源名字，默认实体名字</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">collectionResourceDescription</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Description</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;用户基本信息资源&quot;</span><span style="color:#E1E4E8;">),</span><span style="color:#6A737D;">//资源描述</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">itemResourceRel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userDetail&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//取资源详情的Item名字</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">itemResourceDescription</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Description</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;用户详情&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RepositoryRestResource</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">exported</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//资源是否暴露，默认true</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;users&quot;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//资源暴露的path访问路径，默认实体名字+s</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">collectionResourceRel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//资源名字，默认实体名字</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">collectionResourceDescription</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Description</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;用户基本信息资源&quot;</span><span style="color:#24292E;">),</span><span style="color:#6A737D;">//资源描述</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">itemResourceRel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userDetail&quot;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//取资源详情的Item名字</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">itemResourceDescription</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Description</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;用户详情&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>我们将其放置在 UserInfoRepository 上面测试一下，代码变更如下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RepositoryRestResource</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">exported</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;users&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">collectionResourceRel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">collectionResourceDescription</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Description</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;用户资源&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">itemResourceRel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userDetail&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">itemResourceDescription</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">Description</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;用户详情&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt; {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RepositoryRestResource</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">exported</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;users&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">collectionResourceRel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">collectionResourceDescription</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Description</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;用户资源&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">itemResourceRel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userDetail&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">itemResourceDescription</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Description</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;用户详情&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; {}</span></span></code></pre></div><p>这时通过 Swagger 可以看到，url 的 path 上面变成了 users，而 body 里面的资源名字变成了 userInfo，取 itemResource 的 URL 描述变成了 userDetail，如下图所示。</p>`,6),F=p(`<p>@RepositoryRestResource 是使用在 Repository 类上面的全局设置，我们也可以针对具体的 Repsitory 里面的每个方法进行单独设置，这就是另外一个注解：@RestResource。</p><h4 id="restresource-改变-rest-的-searchpath" tabindex="-1">@RestResource 改变 rest 的 SearchPath <a class="header-anchor" href="#restresource-改变-rest-的-searchpath" aria-label="Permalink to &quot;@RestResource 改变 rest 的 SearchPath&quot;">​</a></h4><p>代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestResource</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">exported</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//是否暴露给Search</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;findCities&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//Search后面的path路径</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">rel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;cities&quot;</span><span style="color:#6A737D;">//资源名字</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestResource</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">exported</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//是否暴露给Search</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;findCities&quot;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//Search后面的path路径</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">rel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;cities&quot;</span><span style="color:#6A737D;">//资源名字</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>可以将其用于 ***Repository 的方法中和 @Entity 的实体关系上，那么我们在 address 的 findByAddress 方法上面做一个测试，看看会变成什么样，代码如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RestResource</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">exported</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//是否暴露给Search</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;findCities&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//Search后面的path路径</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">rel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;cities&quot;</span><span style="color:#6A737D;">//资源名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    Page&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findByAddress</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;address&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">address</span><span style="color:#E1E4E8;">, Pageable </span><span style="color:#FFAB70;">pageable</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RestResource</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">exported</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//是否暴露给Search</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;findCities&quot;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//Search后面的path路径</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">rel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;cities&quot;</span><span style="color:#6A737D;">//资源名字</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    Page&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findByAddress</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;address&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">address</span><span style="color:#24292E;">, Pageable </span><span style="color:#E36209;">pageable</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们打开 Swagger 看一下结果，会发现 search 后面的 path 路径被自定义了，如下图所示。</p>`,7),h=n("p",null,"同时这个注解也可以配置在关联关系上，如 @OneToMany 等。如果我们不想某些方法暴露成 RestAPI，就直接添加 @RestResource(exported = false) 这一注解即可，例如一些删除方法等。",-1),D=n("h4",{id:"spring-data-rest-的配置项支持",tabindex:"-1"},[o("spring data rest 的配置项支持 "),n("a",{class:"header-anchor",href:"#spring-data-rest-的配置项支持","aria-label":'Permalink to "spring data rest 的配置项支持"'},"​")],-1),_=n("p",null,"这个可以直接在 application.properties 里面配置，我们在 IDEA 里面输入前缀的时候，就会有如下提示。",-1),C=n("p",null,"对应的描述如下表所示。",-1),R=p(`<p>Spring Data Rest 的常见用法我们介绍完了，之前还讲过 Spring Data JPA 对 Jackson 的支持，它在 Spring Data Rest 里面完全适用，下面来看一下。</p><h3 id="返回结果对-jackson-的支持" tabindex="-1">返回结果对 Jackson 的支持 <a class="header-anchor" href="#返回结果对-jackson-的支持" aria-label="Permalink to &quot;返回结果对 Jackson 的支持&quot;">​</a></h3><p>通过 jackson 的注解，可以改变 rest api 的属性的名字，或者忽略具体的某个属性。我们在 address 的实体里面，改变一下属性 city 的名字，同时忽略 address 属性，代码会变成如下所示的样子。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SuperBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;myCity&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//改变JSON响应的属性名字</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String city;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonIgnore</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//JSON解析的时候忽略某个属性</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SuperBuilder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;myCity&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//改变JSON响应的属性名字</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String city;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonIgnore</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//JSON解析的时候忽略某个属性</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String address;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们通过 Swagger 里面的 Description 可以看到，当前的资源的描述发生了变化，字段名变成了 myCity，address 属性没有了，具体如下图所示。</p>`,5),m=p('<p>Spring Data Rest 返回 ResponseBody 的原理和接收 RequestBody 的原理都是基于 JSON 格式的，我们之前讲的 Jackson 的所有注解语法同样适用。</p><p>那么介绍了这么多，到底 Spring Data Rest 和 Spring Data JPA 是什么关系呢？我们来总结一下。</p><h3 id="spring-data-rest-和-spring-data-jpa-的关系" tabindex="-1">Spring Data Rest 和 Spring Data JPA 的关系 <a class="header-anchor" href="#spring-data-rest-和-spring-data-jpa-的关系" aria-label="Permalink to &quot;Spring Data Rest 和 Spring Data JPA 的关系&quot;">​</a></h3><p>大概有如下几点。</p><ol><li><p>Spring Data JPA 基于 JPA 协议提供了一套标准的 Repository 的操作统一接口，方法名和 @Query 都是有固定语法和约定的规则的。</p></li><li><p>Spring Data Rest 利用 JPA 的约定和语法，利用 Java 反射、动态代理等机制，很容易可以生成一套标准的 rest 风格的 API 协议操作。</p></li><li><p>也就是说 JPA 制定协议和标准，Spring Data Rest 基于这套协议生成 rest 风格的 Controller。</p></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>由于篇幅有限，SpringDataRest 本身的原理和实现方式一个课时是介绍不完的，虽然这一讲的内容不多，但其精髓都在这里了。</p><p>我想表达的重点是 JPA 的应用领域其实有很多，我的讲解就是想帮你打开思路，在写一些基于实体的框架时就可以参考 Spring Data Rest 的做法。例如<a href="https://jsonapi.org/format/" target="_blank" rel="noreferrer">yahoo 团队设计的 JSONAPI 协议</a>，以及<a href="https://github.com/yahoo/elide/blob/master/translations/zh/README.md" target="_blank" rel="noreferrer">Elide 的实现</a>，也是基于 JPA 的实体注解来实现的。</p><p>甚至 Spring 在研究的 graph QL，也可以基于约定的实体来做很多事情。所以当你把 JPA &quot;玩得很溜&quot;的时候，就可以大大提升开发效率。</p><p>最后欢迎你在留言区发表自己的看法，希望我们可以一起讨论。下一讲我们来聊聊如何通过 spring boot test 提高开发效率，到时见。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>',11);function b(S,q,v,P,k,f){const s=e("Image");return t(),r("div",null,[E,a(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image2/M01/03/D1/CgpVE1_i5W-ASHQlAAGMwEhDK_w968.png"}),y,a(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/03/CF/Cip5yF_i5XaAfkQUAAOu3Oghurk191.png"}),i,a(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image2/M01/03/D1/CgpVE1_i5X2AaQhNAAIRIf6mhUk512.png"}),g,a(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image2/M01/03/CF/Cip5yF_i5YKAdyZXAACzqZkR3vs585.png"}),d,a(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/03/D1/CgpVE1_i5YqAX6zIAAD0ZWEXWfU636.png"}),u,a(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image2/M01/03/CF/Cip5yF_i5ZKAMXN9AADg4CrauLY452.png"}),A,a(s,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image2/M01/03/D1/CgpVE1_i5ZyADJsUAAGZTJ31fiw252.png"}),F,a(s,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image2/M01/03/D1/CgpVE1_i5aSAGiOEAABI57HiU0g381.png"}),h,D,_,a(s,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image2/M01/03/CF/Cip5yF_i5auAW0BTAAEFk4n5M4c741.png"}),C,a(s,{alt:"Lark20201224-161329.png",src:"https://s0.lgstatic.com/i/image/M00/8C/0E/CgqCHl_kTcWAS5aJAAC14Y9YPQ4842.png"}),R,a(s,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image2/M01/03/D1/CgpVE1_i5bSAA7YZAAE7YXeoJQY773.png"}),m])}const I=l(c,[["render",b]]);export{B as __pageData,I as default};
