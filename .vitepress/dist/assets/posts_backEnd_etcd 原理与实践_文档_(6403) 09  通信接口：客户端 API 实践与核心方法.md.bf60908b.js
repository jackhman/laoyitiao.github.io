import{_ as p,j as o,o as e,h as t,k as n,f as a,Q as l,s as c}from"./chunks/framework.d3daa342.js";const m=JSON.parse('{"title":"09通信接口：客户端API实践与核心方法","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6403) 09  通信接口：客户端 API 实践与核心方法.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6403) 09  通信接口：客户端 API 实践与核心方法.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/etcd 原理与实践_文档/(6403) 09  通信接口：客户端 API 实践与核心方法.md"},E=l(`<h1 id="_09通信接口-客户端api实践与核心方法" tabindex="-1">09通信接口：客户端API实践与核心方法 <a class="header-anchor" href="#_09通信接口-客户端api实践与核心方法" aria-label="Permalink to &quot;09通信接口：客户端API实践与核心方法&quot;">​</a></h1><p>上一讲我们介绍了 etcd 的整体架构，学习客户端与 etcd 服务端的通信以及 etcd 集群节点的内部通信接口能帮助我们更好地掌握和使用 etcd 组件，这也是你必须了解的内容。这一讲我们继续介绍 etcd 的 gRPC 通信接口以及客户端的实践。</p><h3 id="client-定义" tabindex="-1">client 定义 <a class="header-anchor" href="#client-定义" aria-label="Permalink to &quot;client 定义&quot;">​</a></h3><p>首先我们来看一下 client 的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type Client struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Cluster</span></span>
<span class="line"><span style="color:#E1E4E8;">    KV</span></span>
<span class="line"><span style="color:#E1E4E8;">    Lease</span></span>
<span class="line"><span style="color:#E1E4E8;">    Watcher</span></span>
<span class="line"><span style="color:#E1E4E8;">    Auth</span></span>
<span class="line"><span style="color:#E1E4E8;">    Maintenance</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 认证的用户名</span></span>
<span class="line"><span style="color:#E1E4E8;">    Username string</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 认证的密码</span></span>
<span class="line"><span style="color:#E1E4E8;">    Password string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type Client struct {</span></span>
<span class="line"><span style="color:#24292E;">    Cluster</span></span>
<span class="line"><span style="color:#24292E;">    KV</span></span>
<span class="line"><span style="color:#24292E;">    Lease</span></span>
<span class="line"><span style="color:#24292E;">    Watcher</span></span>
<span class="line"><span style="color:#24292E;">    Auth</span></span>
<span class="line"><span style="color:#24292E;">    Maintenance</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 认证的用户名</span></span>
<span class="line"><span style="color:#24292E;">    Username string</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 认证的密码</span></span>
<span class="line"><span style="color:#24292E;">    Password string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意，这里显示的都是可导出的模块结构字段，代表了客户端能够使用的几大核心模块，具体功能介绍如下。</p><ul><li><p>Cluster：向集群里增加 etcd 服务端节点之类，属于管理员操作。</p></li><li><p>KV：我们主要使用的功能，即操作 K-V。</p></li><li><p>Lease：租约相关操作，比如申请一个 TTL=10 秒的租约。</p></li><li><p>Watcher：观察订阅，从而监听最新的数据变化。</p></li><li><p>Auth：管理 etcd 的用户和权限，属于管理员操作。</p></li><li><p>Maintenance：维护 etcd，比如主动迁移 etcd 的 leader 节点，属于管理员操作。</p></li></ul><h4 id="grpc-服务" tabindex="-1">gRPC 服务 <a class="header-anchor" href="#grpc-服务" aria-label="Permalink to &quot;gRPC 服务&quot;">​</a></h4><p>etcd v3 的通信基于 gRPC，proto 文件是定义服务端和客户端通信接口的标准。包括：</p><ul><li><p>客户端该传什么样的参数</p></li><li><p>服务端该返回什么参数</p></li><li><p>客户端该怎么调用</p></li><li><p>是阻塞还是非阻塞</p></li><li><p>是同步还是异步</p></li></ul><p>gRPC 推荐使用 proto3 消息格式，在进行核心 API 的学习之前，我们需要对 proto3 的基本语法有初步的了解。<strong>proto3 是原有 Protocol Buffer 2（被称为 proto2）的升级版本，删除了一部分特性，优化了对移动设备的支持</strong>。</p><p>发送到 etcd 服务器的每个 API 请求都是一个 gRPC 远程过程调用。etcd 中的 RPC 接口定义根据功能分类到服务中。</p><p>处理 etcd 键值的重要服务包括：</p><ul><li><p>KV Service，创建、更新、获取和删除键值对。</p></li><li><p>Watch Service，监视键的更改。</p></li><li><p>Lease Service，实现键值对过期，客户端用来续租、保持心跳。</p></li><li><p>Lock Service，etcd 提供分布式共享锁的支持。</p></li><li><p>Election Service，暴露客户端选举机制。</p></li></ul>`,14),y=l(`<h4 id="请求和响应" tabindex="-1">请求和响应 <a class="header-anchor" href="#请求和响应" aria-label="Permalink to &quot;请求和响应&quot;">​</a></h4><p>etcd3 中的所有 RPC 都遵循相同的格式。每个 RPC 都有一个函数名，该函数将 NameRequest 作为参数并返回 NameResponse 作为响应。例如，这是 Range RPC 描述：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">service KV {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Range</span><span style="color:#E1E4E8;">(RangeRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (RangeResponse)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service KV {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Range</span><span style="color:#24292E;">(RangeRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (RangeResponse)</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="响应头" tabindex="-1">响应头 <a class="header-anchor" href="#响应头" aria-label="Permalink to &quot;响应头&quot;">​</a></h4><p>etcd API 的所有响应都有一个附加的响应标头，其中包括响应的集群元数据：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">message ResponseHeader {</span></span>
<span class="line"><span style="color:#E1E4E8;">  uint64 cluster_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  uint64 member_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  int64 revision </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  uint64 raft_term </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">message ResponseHeader {</span></span>
<span class="line"><span style="color:#24292E;">  uint64 cluster_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  uint64 member_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  int64 revision </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  uint64 raft_term </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p>Cluster_ID：产生响应的集群的 ID。</p></li><li><p>Member_ID：产生响应的成员的 ID。</p></li></ul><p>应用服务可以通过 Cluster_ID 和 Member_ID 字段来确保，当前与之通信的正是预期的那个集群或者成员。</p><ul><li>Revision：产生响应时键值存储的修订版本号。</li></ul><p>应用服务可以使用<strong>修订号字段</strong>来获得当前键值存储库最新的修订号。应用程序指定历史修订版以进行查询，如果希望在请求时知道最新修订版，此功能特别有用。</p><ul><li>Raft_Term：产生响应时，成员的 Raft 称谓。</li></ul><p>应用服务可以使用 Raft_Term 来检测集群何时完成一个新的 leader 选举。</p><h3 id="etcd-clientv3-客户端" tabindex="-1">etcd clientv3 客户端 <a class="header-anchor" href="#etcd-clientv3-客户端" aria-label="Permalink to &quot;etcd clientv3 客户端&quot;">​</a></h3><p>etcd 客户端 clientv3 接入的示例将会以 Go 客户端为主，你需要准备好基本的开发环境。</p><p>首先是 etcd clientv3 的初始化，我们根据指定的 etcd 节点，建立客户端与 etcd 集群的连接：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cli,err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> clientv3.</span><span style="color:#B392F0;">New</span><span style="color:#E1E4E8;">(clientv3.Config{</span></span>
<span class="line"><span style="color:#E1E4E8;">    Endpoints</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">[]string{</span><span style="color:#9ECBFF;">&quot;localhost:2379&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    DialTimeout</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cli,err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> clientv3.</span><span style="color:#6F42C1;">New</span><span style="color:#24292E;">(clientv3.Config{</span></span>
<span class="line"><span style="color:#24292E;">    Endpoints</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">[]string{</span><span style="color:#032F62;">&quot;localhost:2379&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    DialTimeout</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>如上的代码实例化了一个 client，这里需要传入两个参数。</p><ul><li><p>Endpoints：etcd 的多个节点服务地址，因为我是单点本机测试，所以只传 1 个。</p></li><li><p>DialTimeout：创建 client 的首次连接超时，这里传了 5 秒，如果 5 秒都没有连接成功就会返回 err。需要注意的是，<strong>一旦 client 创建成功，我们就不用再关心后续底层连接的状态了，client 内部会重连</strong>。</p></li></ul><h3 id="etcd-客户端初始化" tabindex="-1">etcd 客户端初始化 <a class="header-anchor" href="#etcd-客户端初始化" aria-label="Permalink to &quot;etcd 客户端初始化&quot;">​</a></h3><p>解决完包依赖后，我们初始化 etcd 客户端。客户端初始化代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// client_init_test.go</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">client</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">go.etcd.io/etcd/clientv3</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">testing</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">time</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 测试客户端连接</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestEtcdClientInit</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">		config clientv3.Config</span></span>
<span class="line"><span style="color:#E1E4E8;">		client </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">clientv3.Client</span></span>
<span class="line"><span style="color:#E1E4E8;">		err    </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 客户端配置</span></span>
<span class="line"><span style="color:#E1E4E8;">	config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientv3.Config{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 节点配置</span></span>
<span class="line"><span style="color:#E1E4E8;">		Endpoints:   []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;localhost:2379&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">		DialTimeout: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> time.Second,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 建立连接</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> client, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clientv3.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(config); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 输出集群信息</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(client.Cluster.</span><span style="color:#79B8FF;">MemberList</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// client_init_test.go</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">client</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">go.etcd.io/etcd/clientv3</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">testing</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">time</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 测试客户端连接</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestEtcdClientInit</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">		config clientv3.Config</span></span>
<span class="line"><span style="color:#24292E;">		client </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">clientv3.Client</span></span>
<span class="line"><span style="color:#24292E;">		err    </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 客户端配置</span></span>
<span class="line"><span style="color:#24292E;">	config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientv3.Config{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 节点配置</span></span>
<span class="line"><span style="color:#24292E;">		Endpoints:   []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;localhost:2379&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">		DialTimeout: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> time.Second,</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 建立连接</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> client, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clientv3.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(config); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 输出集群信息</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(client.Cluster.</span><span style="color:#005CC5;">MemberList</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>参考上述代码，预期的执行结果如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> RUN   TestEtcdClientInit</span></span>
<span class="line"><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">{cluster_id</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">14841639068965178418</span><span style="color:#E1E4E8;"> member_id</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10276657743932975437</span><span style="color:#E1E4E8;"> raft_term</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">  [ID</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">10276657743932975437</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;"> peerURLs</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;http://localhost:2380&quot;</span><span style="color:#E1E4E8;"> clientURLs</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;http://0.0.0.0:2379&quot;</span><span style="color:#E1E4E8;"> ] {} [] </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">nil</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> PASS</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestEtcdClientInit</span><span style="color:#E1E4E8;"> (0.</span><span style="color:#FDAEB7;font-style:italic;">08s</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">PASS</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">===</span><span style="color:#24292E;"> RUN   TestEtcdClientInit</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">{cluster_id</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">14841639068965178418</span><span style="color:#24292E;"> member_id</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10276657743932975437</span><span style="color:#24292E;"> raft_term</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">  [ID</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">10276657743932975437</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;default&quot;</span><span style="color:#24292E;"> peerURLs</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;http://localhost:2380&quot;</span><span style="color:#24292E;"> clientURLs</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;http://0.0.0.0:2379&quot;</span><span style="color:#24292E;"> ] {} [] </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">nil</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">---</span><span style="color:#24292E;"> PASS</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestEtcdClientInit</span><span style="color:#24292E;"> (0.</span><span style="color:#B31D28;font-style:italic;">08s</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">PASS</span></span></code></pre></div><p>可以看到 clientv3 与 etcd Server 的节点 localhost:2379 成功建立了连接，并且输出了集群的信息，下面我们介绍 etcd 中几个重要的服务和接口，对 etcd 进行操作。</p><h3 id="kv-存储" tabindex="-1">KV 存储 <a class="header-anchor" href="#kv-存储" aria-label="Permalink to &quot;KV 存储&quot;">​</a></h3><p>KV 对象的实例获取通过如下的方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">kv </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> clientev3.</span><span style="color:#B392F0;">NewKV</span><span style="color:#E1E4E8;">(client)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">kv </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> clientev3.</span><span style="color:#6F42C1;">NewKV</span><span style="color:#24292E;">(client)</span></span></code></pre></div><p>我们来看一下 KV 接口的具体定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type KV interface {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Put</span><span style="color:#E1E4E8;">(ctx context.Context, key, val string, opts ...OpOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">PutResponse, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检索 keys</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">(ctx context.Context, key string, opts ...OpOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">GetResponse, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 删除 key，可以使用 WithRange(end), [key, end) 的方式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Delete</span><span style="color:#E1E4E8;">(ctx context.Context, key string, opts ...OpOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">DeleteResponse, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 压缩给定版本之前的 KV 历史</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Compact</span><span style="color:#E1E4E8;">(ctx context.Context, rev int64, opts ...CompactOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">CompactResponse, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 指定某种没有事务的操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Do</span><span style="color:#E1E4E8;">(ctx context.Context, op Op) (OpResponse, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Txn 创建一个事务</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Txn</span><span style="color:#E1E4E8;">(ctx context.Context) Txn</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type KV interface {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Put</span><span style="color:#24292E;">(ctx context.Context, key, val string, opts ...OpOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">PutResponse, error)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检索 keys</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">(ctx context.Context, key string, opts ...OpOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">GetResponse, error)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 删除 key，可以使用 WithRange(end), [key, end) 的方式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Delete</span><span style="color:#24292E;">(ctx context.Context, key string, opts ...OpOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">DeleteResponse, error)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 压缩给定版本之前的 KV 历史</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Compact</span><span style="color:#24292E;">(ctx context.Context, rev int64, opts ...CompactOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">CompactResponse, error)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 指定某种没有事务的操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Do</span><span style="color:#24292E;">(ctx context.Context, op Op) (OpResponse, error)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Txn 创建一个事务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Txn</span><span style="color:#24292E;">(ctx context.Context) Txn</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 KV 对象的定义我们可知，它就是一个接口对象，包含以下几个主要的 KV 操作方法。</p><h4 id="kv-存储-put" tabindex="-1">KV 存储 Put <a class="header-anchor" href="#kv-存储-put" aria-label="Permalink to &quot;KV 存储 Put&quot;">​</a></h4><p>Put 的定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Put</span><span style="color:#E1E4E8;">(ctx context.Context, key, val string, opts ...OpOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">PutResponse, error)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Put</span><span style="color:#24292E;">(ctx context.Context, key, val string, opts ...OpOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">PutResponse, error)</span></span></code></pre></div><p>其中的参数</p><ul><li><p>ctx：Context 包对象，用来跟踪上下文，比如超时控制。</p></li><li><p>key：存储对象的 key。</p></li><li><p>val：存储对象的 value。</p></li><li><p>opts：可变参数，额外选项。</p></li></ul><p>Put 将一个键值对放入 etcd 中。请注意，<strong>键值可以是纯字节数组，字符串是该字节数组的不可变表示形式</strong> 。要获取字节字符串，请执行<code>string([] byte {0x10，0x20})</code>。</p><p>Put 的使用方法如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">putResp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> kv.</span><span style="color:#B392F0;">Put</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">TODO</span><span style="color:#E1E4E8;">(),</span><span style="color:#9ECBFF;">&quot;aa&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;hello-world!&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">putResp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> kv.</span><span style="color:#6F42C1;">Put</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">TODO</span><span style="color:#24292E;">(),</span><span style="color:#032F62;">&quot;aa&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hello-world!&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="kv-查询-get" tabindex="-1">KV 查询 Get <a class="header-anchor" href="#kv-查询-get" aria-label="Permalink to &quot;KV 查询 Get&quot;">​</a></h4><p>现在可以对存储的数据进行取值了。默认情况下，Get 将返回&quot;key&quot;对应的值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">(ctx context.Context, key string, opts ...OpOption) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">GetResponse, error)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">(ctx context.Context, key string, opts ...OpOption) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">GetResponse, error)</span></span></code></pre></div><p>OpOption 为可选的函数传参，传参为<code>WithRange(end)</code>时，Get 将返回 [key，end) 范围内的键；传参为 <code>WithFromKey()</code> 时，Get 返回大于或等于 key 的键；当通过 rev&gt; 0 传递 <code>WithRev(rev)</code> 时，Get 查询给定修订版本的键；如果压缩了所查找的修订版本，则返回请求失败，并显示 ErrCompacted。 传递 <code>WithLimit(limit)</code> 时，返回的 key 数量受 limit 限制；传参为 <code>WithSort</code> 时，将对键进行排序。</p><p>对应的使用方法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">getResp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> kv.</span><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">TODO</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;aa&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">getResp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> kv.</span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">TODO</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;aa&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>从以上数据的存储和取值，我们知道：Put 返回 PutResponse，Get 返回 GetResponse。注意：<strong>不同的 KV 操作对应不同的 Response 结构</strong>，定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    CompactResponse pb.CompactionResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">    PutResponse     pb.PutResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">    GetResponse     pb.RangeResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">    DeleteResponse  pb.DeleteRangeResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">    TxnResponse     pb.TxnResponse</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">type</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    CompactResponse pb.CompactionResponse</span></span>
<span class="line"><span style="color:#24292E;">    PutResponse     pb.PutResponse</span></span>
<span class="line"><span style="color:#24292E;">    GetResponse     pb.RangeResponse</span></span>
<span class="line"><span style="color:#24292E;">    DeleteResponse  pb.DeleteRangeResponse</span></span>
<span class="line"><span style="color:#24292E;">    TxnResponse     pb.TxnResponse</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>下面我们分别来看一看 PutResponse 和 GetResponse 映射的 RangeResponse 结构的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type PutResponse struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Header </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ResponseHeader \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;bytes,1,opt,name=header&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;header,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 请求中如有 prev_kv，响应时也会携带 prev_kv </span></span>
<span class="line"><span style="color:#E1E4E8;">    PrevKv </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">mvccpb.KeyValue \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;bytes,2,opt,name=prev_kv,json=prevKv&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;prev_kv,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//Header 里保存的主要是本次更新的 revision 信息</span></span>
<span class="line"><span style="color:#E1E4E8;">type RangeResponse struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Header </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ResponseHeader \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;bytes,1,opt,name=header&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;header,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// kvs 是一个匹配 range 请求的键值对列表</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Kvs</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">mvccpb.KeyValue \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;bytes,2,rep,name=kvs&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;kvs,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// more 用以分页 </span></span>
<span class="line"><span style="color:#E1E4E8;">    More bool \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;varint,3,opt,name=more,proto3&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;more,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// count 表示 range 的键值对数量</span></span>
<span class="line"><span style="color:#E1E4E8;">    Count int64 \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;varint,4,opt,name=count,proto3&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;count,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type PutResponse struct {</span></span>
<span class="line"><span style="color:#24292E;">    Header </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ResponseHeader \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;bytes,1,opt,name=header&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;header,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 请求中如有 prev_kv，响应时也会携带 prev_kv </span></span>
<span class="line"><span style="color:#24292E;">    PrevKv </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">mvccpb.KeyValue \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;bytes,2,opt,name=prev_kv,json=prevKv&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;prev_kv,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//Header 里保存的主要是本次更新的 revision 信息</span></span>
<span class="line"><span style="color:#24292E;">type RangeResponse struct {</span></span>
<span class="line"><span style="color:#24292E;">    Header </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ResponseHeader \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;bytes,1,opt,name=header&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;header,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// kvs 是一个匹配 range 请求的键值对列表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Kvs</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">mvccpb.KeyValue \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;bytes,2,rep,name=kvs&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;kvs,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// more 用以分页 </span></span>
<span class="line"><span style="color:#24292E;">    More bool \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;varint,3,opt,name=more,proto3&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;more,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// count 表示 range 的键值对数量</span></span>
<span class="line"><span style="color:#24292E;">    Count int64 \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;varint,4,opt,name=count,proto3&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;count,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>KVS 字段，保存了本次 Get 查询到的所有 KV 对，我们继续看一下 mvccpb.KeyValue 对象的定义：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">type KeyValue struct {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Key</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;bytes,1,opt,name=key,proto3&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;key,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// create_revision 是当前 key 的最后创建版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    CreateRevision int64 \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;varint,2,opt,name=create_revision,json=createRevision,proto3&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;create_revision,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// mod_revision 是指当前 key 的最新修订版本</span></span>
<span class="line"><span style="color:#E1E4E8;">    ModRevision int64 \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;varint,3,opt,name=mod_revision,json=modRevision,proto3&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;mod_revision,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// key 的版本，每次更新都会增加版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">    Version int64 \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;varint,4,opt,name=version,proto3&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;version,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;bytes,5,opt,name=value,proto3&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;value,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 绑定了 key 的租期 Id，当 lease 为 0 ，则表明没有绑定 key；租期过期，则会删除 key</span></span>
<span class="line"><span style="color:#E1E4E8;">    Lease int64 \`protobuf</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;varint,6,opt,name=lease,proto3&quot;</span><span style="color:#E1E4E8;"> json</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;lease,omitempty&quot;</span><span style="color:#E1E4E8;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">type KeyValue struct {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Key</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;bytes,1,opt,name=key,proto3&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;key,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// create_revision 是当前 key 的最后创建版本</span></span>
<span class="line"><span style="color:#24292E;">    CreateRevision int64 \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;varint,2,opt,name=create_revision,json=createRevision,proto3&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;create_revision,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// mod_revision 是指当前 key 的最新修订版本</span></span>
<span class="line"><span style="color:#24292E;">    ModRevision int64 \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;varint,3,opt,name=mod_revision,json=modRevision,proto3&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;mod_revision,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// key 的版本，每次更新都会增加版本号</span></span>
<span class="line"><span style="color:#24292E;">    Version int64 \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;varint,4,opt,name=version,proto3&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;version,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Value</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;bytes,5,opt,name=value,proto3&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;value,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 绑定了 key 的租期 Id，当 lease 为 0 ，则表明没有绑定 key；租期过期，则会删除 key</span></span>
<span class="line"><span style="color:#24292E;">    Lease int64 \`protobuf</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;varint,6,opt,name=lease,proto3&quot;</span><span style="color:#24292E;"> json</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;lease,omitempty&quot;</span><span style="color:#24292E;">\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至于 RangeResponse.More 和 Count，当我们使用 withLimit() 选项进行 Get 时会发挥作用，相当于分页查询。</p><p>接下来，我们通过一个特别的 Get 选项，获取 aa 目录下的所有子目录：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">rangeResp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> kv.</span><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">(context.</span><span style="color:#B392F0;">TODO</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;/aa&quot;</span><span style="color:#E1E4E8;">, clientv3.</span><span style="color:#B392F0;">WithPrefix</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">rangeResp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> kv.</span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">(context.</span><span style="color:#6F42C1;">TODO</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;/aa&quot;</span><span style="color:#24292E;">, clientv3.</span><span style="color:#6F42C1;">WithPrefix</span><span style="color:#24292E;">())</span></span></code></pre></div><p><code>WithPrefix()</code>用于查找以<code>/aa</code>为前缀的所有 key，因此可以模拟出查找子目录的效果。我们知道 etcd 是一个有序的 KV 存储，因此<code>/aa</code>为前缀的 key 总是顺序排列在一起。</p><p>WithPrefix 实际上会转化为范围查询，它根据前缀<code>/aa</code>生成了一个 key range，[&quot;/aa/&quot;, &quot;/aa0&quot;)，这是因为比 <code>/</code> 大的字符是 <code>0</code>，所以以 <code>/aa0</code> 作为范围的末尾，就可以扫描到所有的 <code>/aa/</code> 打头的 key 了。</p><h4 id="kv-操作实践" tabindex="-1">KV 操作实践 <a class="header-anchor" href="#kv-操作实践" aria-label="Permalink to &quot;KV 操作实践&quot;">​</a></h4><p>键值对的操作是 etcd 中最基本、最常用的功能，主要包括读、写、删除三种基本的操作。在 etcd 中定义了 KV 接口，用来对外提供这些操作，下面我们进行具体测试：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> client</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	&quot;context&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&quot;fmt&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&quot;github.com/google/uuid&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&quot;go.etcd.io/etcd/clientv3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&quot;testing&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&quot;time&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">func </span><span style="color:#FDAEB7;font-style:italic;">T</span><span style="color:#E1E4E8;">est</span><span style="color:#FDAEB7;font-style:italic;">KV</span><span style="color:#E1E4E8;">(t *testing.</span><span style="color:#FDAEB7;font-style:italic;">T</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	root</span><span style="color:#FDAEB7;font-style:italic;">C</span><span style="color:#E1E4E8;">ontext := context.</span><span style="color:#FDAEB7;font-style:italic;">B</span><span style="color:#E1E4E8;">ackground()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 客户端初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">	cli, err := clientv3.</span><span style="color:#FDAEB7;font-style:italic;">N</span><span style="color:#E1E4E8;">ew(clientv3.</span><span style="color:#FDAEB7;font-style:italic;">C</span><span style="color:#E1E4E8;">onfig{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#FDAEB7;font-style:italic;">E</span><span style="color:#E1E4E8;">ndpoints:   []string{&quot;localhost:</span><span style="color:#FDAEB7;font-style:italic;">2379</span><span style="color:#E1E4E8;">&quot;},</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#FDAEB7;font-style:italic;">D</span><span style="color:#E1E4E8;">ial</span><span style="color:#FDAEB7;font-style:italic;">T</span><span style="color:#E1E4E8;">imeout: </span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;"> * time.</span><span style="color:#FDAEB7;font-style:italic;">S</span><span style="color:#E1E4E8;">econd,</span></span>
<span class="line"><span style="color:#E1E4E8;">	})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// etcd clientv3 &gt;= v3.2.10, grpc/grpc-go &gt;= v1.7.3</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> cli == nil || err == context.</span><span style="color:#FDAEB7;font-style:italic;">D</span><span style="color:#E1E4E8;">eadline</span><span style="color:#FDAEB7;font-style:italic;">E</span><span style="color:#E1E4E8;">xceeded {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// handle errors</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">rintln(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		panic(&quot;invalid connection!&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 客户端断开连接</span></span>
<span class="line"><span style="color:#E1E4E8;">	defer cli.</span><span style="color:#FDAEB7;font-style:italic;">C</span><span style="color:#E1E4E8;">lose()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 初始化 kv</span></span>
<span class="line"><span style="color:#E1E4E8;">	kvc := clientv3.</span><span style="color:#FDAEB7;font-style:italic;">N</span><span style="color:#E1E4E8;">ew</span><span style="color:#FDAEB7;font-style:italic;">KV</span><span style="color:#E1E4E8;">(cli)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//获取值</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx, cancel</span><span style="color:#FDAEB7;font-style:italic;">F</span><span style="color:#E1E4E8;">unc := context.</span><span style="color:#FDAEB7;font-style:italic;">W</span><span style="color:#E1E4E8;">ith</span><span style="color:#FDAEB7;font-style:italic;">T</span><span style="color:#E1E4E8;">imeout(root</span><span style="color:#FDAEB7;font-style:italic;">C</span><span style="color:#E1E4E8;">ontext, time.</span><span style="color:#FDAEB7;font-style:italic;">D</span><span style="color:#E1E4E8;">uration(</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;">)*time.</span><span style="color:#FDAEB7;font-style:italic;">S</span><span style="color:#E1E4E8;">econd)</span></span>
<span class="line"><span style="color:#E1E4E8;">	response, err := kvc.</span><span style="color:#FDAEB7;font-style:italic;">G</span><span style="color:#E1E4E8;">et(ctx, &quot;cc&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">	cancel</span><span style="color:#FDAEB7;font-style:italic;">F</span><span style="color:#E1E4E8;">unc()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> err != nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">rintln(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	kvs := response.</span><span style="color:#FDAEB7;font-style:italic;">K</span><span style="color:#E1E4E8;">vs</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 输出获取的 key</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> len(kvs) &gt; </span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">rintf(&quot;last value is :%s\\r\\n&quot;, string(kvs[</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#FDAEB7;font-style:italic;">V</span><span style="color:#E1E4E8;">alue))</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#FDAEB7;font-style:italic;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">rintf(&quot;empty key </span><span style="color:#FDAEB7;font-style:italic;">for</span><span style="color:#E1E4E8;"> %s\\n&quot;, &quot;cc&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//设置值</span></span>
<span class="line"><span style="color:#E1E4E8;">	uuid := uuid.</span><span style="color:#FDAEB7;font-style:italic;">N</span><span style="color:#E1E4E8;">ew().</span><span style="color:#FDAEB7;font-style:italic;">S</span><span style="color:#E1E4E8;">tring()</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">rintf(&quot;</span><span style="color:#FDAEB7;font-style:italic;">new</span><span style="color:#E1E4E8;"> value is :%s\\r\\n&quot;, uuid)</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx2, cancel</span><span style="color:#FDAEB7;font-style:italic;">F</span><span style="color:#E1E4E8;">unc2 := context.</span><span style="color:#FDAEB7;font-style:italic;">W</span><span style="color:#E1E4E8;">ith</span><span style="color:#FDAEB7;font-style:italic;">T</span><span style="color:#E1E4E8;">imeout(root</span><span style="color:#FDAEB7;font-style:italic;">C</span><span style="color:#E1E4E8;">ontext, time.</span><span style="color:#FDAEB7;font-style:italic;">D</span><span style="color:#E1E4E8;">uration(</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;">)*time.</span><span style="color:#FDAEB7;font-style:italic;">S</span><span style="color:#E1E4E8;">econd)</span></span>
<span class="line"><span style="color:#E1E4E8;">	_, err = kvc.</span><span style="color:#FDAEB7;font-style:italic;">P</span><span style="color:#E1E4E8;">ut(ctx2, &quot;cc&quot;, uuid)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 设置成功后，将该 key 对应的键值删除</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#FDAEB7;font-style:italic;">if</span><span style="color:#E1E4E8;"> del</span><span style="color:#FDAEB7;font-style:italic;">R</span><span style="color:#E1E4E8;">es, err := kvc.</span><span style="color:#FDAEB7;font-style:italic;">D</span><span style="color:#E1E4E8;">elete(ctx2, &quot;cc&quot;); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#B392F0;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;delete %s for %t</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;cc&quot;</span><span style="color:#E1E4E8;">, delRes.Deleted </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">cancelFunc2</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#B392F0;">Println</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> client</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	&quot;context&quot;</span></span>
<span class="line"><span style="color:#24292E;">	&quot;fmt&quot;</span></span>
<span class="line"><span style="color:#24292E;">	&quot;github.com/google/uuid&quot;</span></span>
<span class="line"><span style="color:#24292E;">	&quot;go.etcd.io/etcd/clientv3&quot;</span></span>
<span class="line"><span style="color:#24292E;">	&quot;testing&quot;</span></span>
<span class="line"><span style="color:#24292E;">	&quot;time&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">func </span><span style="color:#B31D28;font-style:italic;">T</span><span style="color:#24292E;">est</span><span style="color:#B31D28;font-style:italic;">KV</span><span style="color:#24292E;">(t *testing.</span><span style="color:#B31D28;font-style:italic;">T</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	root</span><span style="color:#B31D28;font-style:italic;">C</span><span style="color:#24292E;">ontext := context.</span><span style="color:#B31D28;font-style:italic;">B</span><span style="color:#24292E;">ackground()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 客户端初始化</span></span>
<span class="line"><span style="color:#24292E;">	cli, err := clientv3.</span><span style="color:#B31D28;font-style:italic;">N</span><span style="color:#24292E;">ew(clientv3.</span><span style="color:#B31D28;font-style:italic;">C</span><span style="color:#24292E;">onfig{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#B31D28;font-style:italic;">E</span><span style="color:#24292E;">ndpoints:   []string{&quot;localhost:</span><span style="color:#B31D28;font-style:italic;">2379</span><span style="color:#24292E;">&quot;},</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#B31D28;font-style:italic;">D</span><span style="color:#24292E;">ial</span><span style="color:#B31D28;font-style:italic;">T</span><span style="color:#24292E;">imeout: </span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;"> * time.</span><span style="color:#B31D28;font-style:italic;">S</span><span style="color:#24292E;">econd,</span></span>
<span class="line"><span style="color:#24292E;">	})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// etcd clientv3 &gt;= v3.2.10, grpc/grpc-go &gt;= v1.7.3</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> cli == nil || err == context.</span><span style="color:#B31D28;font-style:italic;">D</span><span style="color:#24292E;">eadline</span><span style="color:#B31D28;font-style:italic;">E</span><span style="color:#24292E;">xceeded {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// handle errors</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">rintln(err)</span></span>
<span class="line"><span style="color:#24292E;">		panic(&quot;invalid connection!&quot;)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 客户端断开连接</span></span>
<span class="line"><span style="color:#24292E;">	defer cli.</span><span style="color:#B31D28;font-style:italic;">C</span><span style="color:#24292E;">lose()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 初始化 kv</span></span>
<span class="line"><span style="color:#24292E;">	kvc := clientv3.</span><span style="color:#B31D28;font-style:italic;">N</span><span style="color:#24292E;">ew</span><span style="color:#B31D28;font-style:italic;">KV</span><span style="color:#24292E;">(cli)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//获取值</span></span>
<span class="line"><span style="color:#24292E;">	ctx, cancel</span><span style="color:#B31D28;font-style:italic;">F</span><span style="color:#24292E;">unc := context.</span><span style="color:#B31D28;font-style:italic;">W</span><span style="color:#24292E;">ith</span><span style="color:#B31D28;font-style:italic;">T</span><span style="color:#24292E;">imeout(root</span><span style="color:#B31D28;font-style:italic;">C</span><span style="color:#24292E;">ontext, time.</span><span style="color:#B31D28;font-style:italic;">D</span><span style="color:#24292E;">uration(</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;">)*time.</span><span style="color:#B31D28;font-style:italic;">S</span><span style="color:#24292E;">econd)</span></span>
<span class="line"><span style="color:#24292E;">	response, err := kvc.</span><span style="color:#B31D28;font-style:italic;">G</span><span style="color:#24292E;">et(ctx, &quot;cc&quot;)</span></span>
<span class="line"><span style="color:#24292E;">	cancel</span><span style="color:#B31D28;font-style:italic;">F</span><span style="color:#24292E;">unc()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> err != nil {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">rintln(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	kvs := response.</span><span style="color:#B31D28;font-style:italic;">K</span><span style="color:#24292E;">vs</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 输出获取的 key</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> len(kvs) &gt; </span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">rintf(&quot;last value is :%s\\r\\n&quot;, string(kvs[</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">].</span><span style="color:#B31D28;font-style:italic;">V</span><span style="color:#24292E;">alue))</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#B31D28;font-style:italic;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">rintf(&quot;empty key </span><span style="color:#B31D28;font-style:italic;">for</span><span style="color:#24292E;"> %s\\n&quot;, &quot;cc&quot;)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//设置值</span></span>
<span class="line"><span style="color:#24292E;">	uuid := uuid.</span><span style="color:#B31D28;font-style:italic;">N</span><span style="color:#24292E;">ew().</span><span style="color:#B31D28;font-style:italic;">S</span><span style="color:#24292E;">tring()</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">rintf(&quot;</span><span style="color:#B31D28;font-style:italic;">new</span><span style="color:#24292E;"> value is :%s\\r\\n&quot;, uuid)</span></span>
<span class="line"><span style="color:#24292E;">	ctx2, cancel</span><span style="color:#B31D28;font-style:italic;">F</span><span style="color:#24292E;">unc2 := context.</span><span style="color:#B31D28;font-style:italic;">W</span><span style="color:#24292E;">ith</span><span style="color:#B31D28;font-style:italic;">T</span><span style="color:#24292E;">imeout(root</span><span style="color:#B31D28;font-style:italic;">C</span><span style="color:#24292E;">ontext, time.</span><span style="color:#B31D28;font-style:italic;">D</span><span style="color:#24292E;">uration(</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;">)*time.</span><span style="color:#B31D28;font-style:italic;">S</span><span style="color:#24292E;">econd)</span></span>
<span class="line"><span style="color:#24292E;">	_, err = kvc.</span><span style="color:#B31D28;font-style:italic;">P</span><span style="color:#24292E;">ut(ctx2, &quot;cc&quot;, uuid)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 设置成功后，将该 key 对应的键值删除</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#B31D28;font-style:italic;">if</span><span style="color:#24292E;"> del</span><span style="color:#B31D28;font-style:italic;">R</span><span style="color:#24292E;">es, err := kvc.</span><span style="color:#B31D28;font-style:italic;">D</span><span style="color:#24292E;">elete(ctx2, &quot;cc&quot;); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#6F42C1;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;delete %s for %t</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cc&quot;</span><span style="color:#24292E;">, delRes.Deleted </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">cancelFunc2</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nil {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#6F42C1;">Println</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如上的测试用例，主要是针对 KV 的操作，依次获取 key，即 Get()，对应 etcd 底层实现的 range 接口；其次是写入键值对，即 put 操作；最后删除刚刚写入的键值对。预期的执行结果如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> RUN   Test</span></span>
<span class="line"><span style="color:#E1E4E8;">empty key </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> cc</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> value is</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 41e1362a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">28a7</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">4ac9</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">abf5</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">fe1474d93f84</span></span>
<span class="line"><span style="color:#E1E4E8;">delete cc </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#F97583;">---</span><span style="color:#E1E4E8;"> PASS</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> (0.</span><span style="color:#FDAEB7;font-style:italic;">11s</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">PASS</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">===</span><span style="color:#24292E;"> RUN   Test</span></span>
<span class="line"><span style="color:#24292E;">empty key </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> cc</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> value is</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 41e1362a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">28a7</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">4ac9</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">abf5</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">fe1474d93f84</span></span>
<span class="line"><span style="color:#24292E;">delete cc </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#D73A49;">---</span><span style="color:#24292E;"> PASS</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> (0.</span><span style="color:#B31D28;font-style:italic;">11s</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">PASS</span></span></code></pre></div><p>可以看到，刚开始 etcd 并没有存储键<code>cc</code>的值，随后写入新的键值对并测试将其删除。</p><h3 id="其他通信接口" tabindex="-1">其他通信接口 <a class="header-anchor" href="#其他通信接口" aria-label="Permalink to &quot;其他通信接口&quot;">​</a></h3><p>其他常用的接口还有 Txn、Compact、Watch、Lease、Lock 等。我们依次看看这些接口的定义。</p><h4 id="事务-txn" tabindex="-1">事务 Txn <a class="header-anchor" href="#事务-txn" aria-label="Permalink to &quot;事务 Txn&quot;">​</a></h4><p>Txn 方法在单个事务中处理多个请求。Txn 请求增加键值存储的修订版本，并为每个完成的请求生成带有相同修订版本的事件，<strong>etcd 不容许在一个 Txn 中多次修改同一个 key</strong>。Txn 接口定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">rpc </span><span style="color:#B392F0;">Txn</span><span style="color:#E1E4E8;">(TxnRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (TxnResponse) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">rpc </span><span style="color:#6F42C1;">Txn</span><span style="color:#24292E;">(TxnRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (TxnResponse) {}</span></span></code></pre></div><h4 id="compact" tabindex="-1">Compact <a class="header-anchor" href="#compact" aria-label="Permalink to &quot;Compact&quot;">​</a></h4><p>Compact 方法压缩 etcd 键值对存储中的事件历史。键值对存储应该<strong>定期压缩</strong>，否则事件历史会无限制地持续增长。Compact 接口定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">rpc </span><span style="color:#B392F0;">Compact</span><span style="color:#E1E4E8;">(CompactionRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (CompactionResponse) {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">rpc </span><span style="color:#6F42C1;">Compact</span><span style="color:#24292E;">(CompactionRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (CompactionResponse) {}</span></span></code></pre></div><p>请求的消息体是 CompactionRequest， CompactionRequest 压缩键值对存储到给定修订版本，所有修订版本比压缩修订版本小的键都将被删除。</p><h4 id="watch" tabindex="-1">Watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;Watch&quot;">​</a></h4><p>Watch API 提供了一个基于事件的接口，用于<strong>异步监视键的更改</strong>。etcd 监视程序通过给定的修订版本（当前版本或历史版本）持续监视 key 更改，并将 key 更新流回客户端。</p><p>在 rpc.proto 中 Watch Service 定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">service Watch {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">Watch</span><span style="color:#E1E4E8;">(stream WatchRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (stream WatchResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service Watch {</span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">Watch</span><span style="color:#24292E;">(stream WatchRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (stream WatchResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Watch 观察将要发生或者已经发生的事件。输入和输出都是流，输入流用于创建和取消观察，而输出流发送事件。一个观察 RPC 可以一次性在多个 key 范围上观察，并为多个观察流化事件。整个事件历史可以从最后压缩修订版本开始观察。Watch Service 只有一个 Watch 方法。</p><h4 id="lease-service" tabindex="-1">Lease Service <a class="header-anchor" href="#lease-service" aria-label="Permalink to &quot;Lease Service&quot;">​</a></h4><p>Lease Service 提供租约的支持。Lease 是一种<strong>检测客户端存活状况</strong>的机制。集群授予客户端具有生存时间的租约。如果 etcd 集群在给定的 TTL 时间内未收到 keepAlive，则租约到期。</p><p>为了将租约绑定到键值存储中，每个 key 最多可以附加一个租约。当租约到期或被撤销时，该租约依附的所有 key 都将被删除，每个过期的密钥都会在事件历史记录中生成一个删除事件。</p><p>在 rpc.proto 中 Lease Service 定义的接口如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">service Lease {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">LeaseGrant</span><span style="color:#E1E4E8;">(LeaseGrantRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (LeaseGrantResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">LeaseRevoke</span><span style="color:#E1E4E8;">(LeaseRevokeRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (LeaseRevokeResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">LeaseKeepAlive</span><span style="color:#E1E4E8;">(stream LeaseKeepAliveRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (stream LeaseKeepAliveResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">LeaseTimeToLive</span><span style="color:#E1E4E8;">(LeaseTimeToLiveRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (LeaseTimeToLiveResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service Lease {</span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">LeaseGrant</span><span style="color:#24292E;">(LeaseGrantRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (LeaseGrantResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">LeaseRevoke</span><span style="color:#24292E;">(LeaseRevokeRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (LeaseRevokeResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">LeaseKeepAlive</span><span style="color:#24292E;">(stream LeaseKeepAliveRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (stream LeaseKeepAliveResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">LeaseTimeToLive</span><span style="color:#24292E;">(LeaseTimeToLiveRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (LeaseTimeToLiveResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中：</p><ul><li><p>LeaseGrant，创建一个租约；</p></li><li><p>LeaseRevoke，撤销一个租约；</p></li><li><p>LeaseKeepAlive，用于维持租约；</p></li><li><p>LeaseTimeToLive，获取租约信息。</p></li></ul><h4 id="lock-service" tabindex="-1">Lock Service <a class="header-anchor" href="#lock-service" aria-label="Permalink to &quot;Lock Service&quot;">​</a></h4><p>Lock Service 提供<strong>分布式共享锁</strong>的支持。Lock Service 以 gRPC 接口的方式暴露客户端锁机制。在 v3lock.proto 中 Lock Service 定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">service Lock {</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">Lock</span><span style="color:#E1E4E8;">(LockRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (LockResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpc </span><span style="color:#B392F0;">Unlock</span><span style="color:#E1E4E8;">(UnlockRequest) </span><span style="color:#B392F0;">returns</span><span style="color:#E1E4E8;"> (UnlockResponse) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service Lock {</span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">Lock</span><span style="color:#24292E;">(LockRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (LockResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">  rpc </span><span style="color:#6F42C1;">Unlock</span><span style="color:#24292E;">(UnlockRequest) </span><span style="color:#6F42C1;">returns</span><span style="color:#24292E;"> (UnlockResponse) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中：</p><ul><li><p>Lock 方法，在给定命令锁上获得分布式共享锁；</p></li><li><p>Unlock 使用 Lock 返回的 key 并释放对锁的持有。</p></li></ul><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>这一讲我们主要介绍了 etcd 的 gRPC 通信接口以及 clientv3 客户端的实践，主要包括键值对操作（增删改查）、Watch、Lease、锁和 Compact 等接口。通过这一讲的学习，了解 etcd 客户端的使用以及常用功能的接口定义，对于我们在日常工作中能够得心应手地使用 etcd，实现相应的功能大有助益。</p><p>本讲内容总结如下：</p>`,90),i=c("p",null,"当然，由于篇幅所限，这一讲我们只是介绍了常用的几个通信接口，如果你对其他的接口还有疑问，欢迎在留言区提出。下一课时我们将介绍 etcd 的存储：如何实现键值对的读写操作。",-1);function u(d,F,v,h,g,D){const s=o("Image");return e(),t("div",null,[E,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/07/55/Cgp9HWAzYzCATpxiAABwpS8GraQ616.png"}),a(),y,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/07/53/CioPOWAzZK6AYd3XAAK0402aytE269.png"}),a(),i])}const q=p(r,[["render",u]]);export{m as __pageData,q as default};
