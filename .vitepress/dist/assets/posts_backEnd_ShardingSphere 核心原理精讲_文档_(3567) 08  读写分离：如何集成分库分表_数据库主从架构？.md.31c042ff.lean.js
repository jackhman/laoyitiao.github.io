import{_ as l,j as p,o,g as e,k as r,s,h as a,Q as t}from"./chunks/framework.e0c66c3f.js";const b=JSON.parse('{"title":"ShardingSphere 中的读写分离 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3567) 08  读写分离：如何集成分库分表+数据库主从架构？.md","filePath":"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3567) 08  读写分离：如何集成分库分表+数据库主从架构？.md","lastUpdated":1696338709000}'),c={name:"posts/backEnd/ShardingSphere 核心原理精讲_文档/(3567) 08  读写分离：如何集成分库分表+数据库主从架构？.md"},y=s("p",null,"为了应对高并发场景下的数据库访问需求，读写分离架构是现代数据库架构的一个重要组成部分。今天，我就和你一起来学习 ShardingSphere 中所提供的读写分离机制，以及这一机制如何与前面介绍的分库分表和强制路由整合在一起使用。",-1),E=s("h3",{id:"shardingsphere-中的读写分离",tabindex:"-1"},[a("ShardingSphere 中的读写分离 "),s("a",{class:"header-anchor",href:"#shardingsphere-中的读写分离","aria-label":'Permalink to "ShardingSphere 中的读写分离"'},"​")],-1),i=s("p",null,"为了应对数据库读写分离，ShardingSphere 所提供的解决方案还是依赖于强大的配置体系。为了更好地理解这些读写分离相关的配置，我们有必要对读写分离与主从架构有一定的了解。",-1),d=s("h4",{id:"读写分离与主从架构",tabindex:"-1"},[a("读写分离与主从架构 "),s("a",{class:"header-anchor",href:"#读写分离与主从架构","aria-label":'Permalink to "读写分离与主从架构"'},"​")],-1),F=s("p",null,[a("目前，大部分的主流关系型数据库都提供了主从架构的实现方案，通过配置两台或多台数据库的主从关系，可以将一台数据库服务器的数据更新自动同步到另一台服务器上。而"),s("strong",null,"应用程序可以利用数据库的这一功能，实现数据的读写分离，从而改善数据库的负载压力。")],-1),h=t("",44);function g(u,D,m,A,v,S){const n=p("Image");return o(),e("div",null,[y,E,i,d,F,r(n,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/2F/3E/Ciqc1F8GtwWAVyTlAABxucwuBlQ362.png"}),h])}const B=l(c,[["render",g]]);export{b as __pageData,B as default};
