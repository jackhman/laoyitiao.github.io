import{_ as p,D as e,o as t,g as c,J as l,h as a,Q as o,m as s}from"./chunks/framework.f67d7268.js";const x=JSON.parse('{"title":"第18讲：带你揭开toolkit-activation工具箱的秘密","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1736) 第18讲：带你揭开 toolkit-activation 工具箱的秘密.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1736) 第18讲：带你揭开 toolkit-activation 工具箱的秘密.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1736) 第18讲：带你揭开 toolkit-activation 工具箱的秘密.md"},E=o(`<h1 id="第18讲-带你揭开toolkit-activation工具箱的秘密" tabindex="-1">第18讲：带你揭开toolkit-activation工具箱的秘密 <a class="header-anchor" href="#第18讲-带你揭开toolkit-activation工具箱的秘密" aria-label="Permalink to &quot;第18讲：带你揭开toolkit-activation工具箱的秘密&quot;">​</a></h1><p>在前面两课时中，我们详细介绍了 tomcat-7.x-8.x-plugin 插件以及 dubbo-2.7.x-plugin 插件的核心实现。但是在有些场景中，不仅需要通过插件收集开源组件的 Trace 数据，还需要收集某些关键业务逻辑的 Trace 数据。我们可以通过开发新插件的方式来实现该需求，但是成本是非常高的，尤其是当业务代码发生重构时（例如，方法名或是类名改变了），插件也需要随之修改、发布 jar 包，非常麻烦。</p><h3 id="toolkit-trace-插件" tabindex="-1">toolkit-trace 插件 <a class="header-anchor" href="#toolkit-trace-插件" aria-label="Permalink to &quot;toolkit-trace 插件&quot;">​</a></h3><p>SkyWalking 为了解决上述问题，提供了一个 @Trace 注解，我们只要将该注解添加到需要监控的业务方法之上，即可收集到该方法相关的 Trace 数据。</p><p>下面我们先通过 demo-webapp 介绍 @Trace 注解的使用和效果。首先，我们定义一个 Service 类------ DemoService：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Spring的@Service注解</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DemoService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 添加@Trace注解，使用该注解需要引入apm-toolkit-trace依赖，</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在搭建demo-webapp项目时已经介绍过了，pom文件不再展示</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Trace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">operationName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;default-trace-method&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">traceMethod</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ActiveSpan.</span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;trace-method&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">             String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        ActiveSpan.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;traceMethod info Message&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(TraceContext.</span><span style="color:#B392F0;">traceId</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 打印Trace ID</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Spring的@Service注解</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 添加@Trace注解，使用该注解需要引入apm-toolkit-trace依赖，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在搭建demo-webapp项目时已经介绍过了，pom文件不再展示</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Trace</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">operationName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default-trace-method&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">traceMethod</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ActiveSpan.</span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;trace-method&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">             String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        ActiveSpan.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;traceMethod info Message&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(TraceContext.</span><span style="color:#6F42C1;">traceId</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 打印Trace ID</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后在 HelloWorldController 中注入 DemoService，并在 &quot;/hello/{words}&quot; 接口中调用 traceMethod() 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloWorldController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DemoService demoService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/hello/{words}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;words&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">words</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span></span>
<span class="line"><span style="color:#E1E4E8;">        demoService.</span><span style="color:#B392F0;">traceMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 省略其他方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloWorldController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DemoService demoService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello/{words}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;words&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">words</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ... </span></span>
<span class="line"><span style="color:#24292E;">        demoService.</span><span style="color:#6F42C1;">traceMethod</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 省略其他方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来访问 &quot;localhost:8000/hello/xxx&quot; 这个地址等待片刻之后，即可在 SkyWalking Rocketbot 界面中看到相应的 Span 数据，如下图所示：</p>`,9),y=s("p",null,"点击该 Span，可以看到具体的 Tag 信息以及 Log 信息，如下图所示：",-1),i=s("h4",{id:"深入工具类原理",tabindex:"-1"},[a("深入工具类原理 "),s("a",{class:"header-anchor",href:"#深入工具类原理","aria-label":'Permalink to "深入工具类原理"'},"​")],-1),g=s("p",null,"了解了 @Trace 注解的使用之后，我们来分析其底层实现。首先我们跳转到 SkyWalking 项目的 apm-toolkit-trace 模块，如下图所示：",-1),d=s("p",null,"该模块就有前面使用到的 @Trace 注解以及 ActiveSpan、TraceContext 工具类，打开这两个工具类会发现，全部是空实现，那添加 Tag、获取 Trace ID 等操作是如何完成的呢？我在前面介绍 SkyWalking 源码各个模块功能时提到，apm-application-toolkit 模块类似于暴露 API 定义，对应的处理逻辑在 apm-sniffer/apm-toolkit-activation 模块中实现。",-1),u=s("p",null,"在 apm-toolkit-trace-activation 模块的 skywalking-plugin.def 文件中定义了四个 ClassEnhancePluginDefine 实现类：",-1),F=s("ul",null,[s("li",null,"ActiveSpanActivation"),s("li",null,"TraceAnnotationActivation"),s("li",null,"TraceContextActivation"),s("li",null,"CallableOrRunnableActivation")],-1),h=s("p",null,"这四个 ClassEnhancePluginDefine 实现类的继承关系如下图所示：",-1),v=o(`<p>TraceAnnotationActivation 会拦截所有被 @Trace 注解标记的方法所在的类，在 TraceAnnotationActivation 覆盖的 enhanceClass() 方法中可以看到相关实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> ClassMatch </span><span style="color:#B392F0;">byMethodAnnotationMatch</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] annotations){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MethodAnnotationMatch</span><span style="color:#E1E4E8;">(annotations); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ClassMatch </span><span style="color:#6F42C1;">byMethodAnnotationMatch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] annotations){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MethodAnnotationMatch</span><span style="color:#24292E;">(annotations); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MethodAnnotationMatch 在判断一个类是否符合条件时，会遍历类中的全部方法，只要发现一个被 @Trace 注解标记的方法，则该类符合拦截条件。</p><p>从 getInstanceMethodsInterceptPoints() 方法中可以看到，@Trace 注解的相关增强逻辑定义在 TraceAnnotationMethodInterceptor 中，其 beforeMethod() 方法会调用 ContextManager.createLocalSpan() 方法创建 LocalSpan（注意，EndpointName 优先从注解配置中获取）。在 afterMethod() 方法中会关闭该 LocalSpan，在 handleMethodException() 方法会将异常堆栈作为 Log 记录在该 LocalSpan 中。</p><p>TraceContextActivation 拦截的是 TraceContext.traceId() 这个 static 静态方法，具体增强逻辑在 TraceContextInterceptor 中，其 afterMethod() 方法会调用 ContextManager.getGlobalTraceId() 方法获取当前线程绑定的 Trace ID 并替换 TraceContext.traceId() 方法返回的空字符串。</p><p>ActiveSpanActivation 会拦截 ActiveSpan 类中 static 静态方法并交给不同的 Interceptor 进行增强，具体的 static 静态方法与 Interceptor 之间的映射关系如下：</p>`,6),C=o(`<p>这里以 tag() 方法为例，在 ActiveSpanTagInterceptor 的 beforeMethod() 方法中，会获取 activeSpanStack 栈顶的 Span 对象，并调用其 tag() 方法记录 Tag 信息。其他的 ActiveSpan*Interceptor 会通过 Span.log() 方法记录 Log，这里不再展开。</p><h4 id="跨线程传播" tabindex="-1">跨线程传播 <a class="header-anchor" href="#跨线程传播" aria-label="Permalink to &quot;跨线程传播&quot;">​</a></h4><p>前面的课时已经详细介绍了 Trace 信息跨进程传播的实现原理，这里我们简单看一下跨线程传播的场景。这里我们在 HelloWorldService 中启动一个线程池，并改造 DemoService 的调用方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloWorldController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 启动一个单线程的线程池</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ExecutorService executorService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            Executors.</span><span style="color:#B392F0;">newSingleThreadScheduledExecutor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DemoService demoService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/hello/{words}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;words&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">words</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        ... </span><span style="color:#6A737D;">// 省略其他调用</span></span>
<span class="line"><span style="color:#E1E4E8;">        executorService.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">( </span><span style="color:#6A737D;">// 省略try/catch代码块</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 使用RunnableWrapper对Runnable进行包装，实现Trace跨线程传播</span></span>
<span class="line"><span style="color:#E1E4E8;">            RunnableWrapper.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> demoService.</span><span style="color:#B392F0;">traceMethod</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloWorldController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 启动一个单线程的线程池</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ExecutorService executorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            Executors.</span><span style="color:#6F42C1;">newSingleThreadScheduledExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DemoService demoService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello/{words}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;words&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">words</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        ... </span><span style="color:#6A737D;">// 省略其他调用</span></span>
<span class="line"><span style="color:#24292E;">        executorService.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">( </span><span style="color:#6A737D;">// 省略try/catch代码块</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 使用RunnableWrapper对Runnable进行包装，实现Trace跨线程传播</span></span>
<span class="line"><span style="color:#24292E;">            RunnableWrapper.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> demoService.</span><span style="color:#6F42C1;">traceMethod</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">        ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时再访问 &quot;<a href="http://localhost:8000/hello/xxx" target="_blank" rel="noreferrer">http://localhost:8000/hello/xxx</a>&quot; 地址，稍等片刻之后，会在 SkyWalking Rocketbot 上看到下图这种分叉的 Trace，其中下面那条 Trace 分支就是通过跨线程传播过去的：</p>`,5),A=s("p",null,"除了通过 RunnableWrapper 包装 Runnable 之外，我们可以通过 CallableWrapper 包装 Callable 实现 Trace 的跨线程传播。下图展示了 Trace 信息跨线程传播的核心原理：",-1),b=o(`<p>下面来看 RunnableWrapper 和 CallableWrapper 的实现原理。toolkit-trace-activation 中的 CallableOrRunnableActivation 会拦截被 @TraceCrossThread 注解标记的类（RunnableWrapper 和 CallableWrapper 都标注了 @TraceCrossThread 注解）。</p><p>目标类的构造方法会由 CallableOrRunnableConstructInterceptor 进行增强，其中会调用 capture() 方法将当前 TracingContext 的核心信息填充到 ContextSnapshot 中，并记录到_$EnhancedClassField_ws 字段中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onConstruct</span><span style="color:#E1E4E8;">(EnhancedInstance objInst, </span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ContextManager.</span><span style="color:#B392F0;">isActive</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        objInst.</span><span style="color:#B392F0;">setSkyWalkingDynamicField</span><span style="color:#E1E4E8;">(ContextManager.</span><span style="color:#B392F0;">capture</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onConstruct</span><span style="color:#24292E;">(EnhancedInstance objInst, </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ContextManager.</span><span style="color:#6F42C1;">isActive</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        objInst.</span><span style="color:#6F42C1;">setSkyWalkingDynamicField</span><span style="color:#24292E;">(ContextManager.</span><span style="color:#6F42C1;">capture</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时的 Runnable（或 Callable）对象就携带了当前线程关联的 Trace 信息。</p><p>目标类的 run() 方法或是 callable() 方法由 CallableOrRunnableInvokeInterceptor 进行增强，其 before() 方法会创建 LocalSpan，在上面的 demo-webapp 示例中，线程池中的工作线程没有关联的 TracingContext 也会新创建，之后从增强的 _$EnhancedClassField_ws 字段中获取 ContextSnapshot 对象，将上游线程的数据恢复到新建的 TracingContext 中，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeMethod</span><span style="color:#E1E4E8;">(EnhancedInstance objInst, Method method,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] argumentsTypes,</span></span>
<span class="line"><span style="color:#E1E4E8;">            MethodInterceptResult result) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 该调用中会先创建TracingContext，然后创建LocalSpan</span></span>
<span class="line"><span style="color:#E1E4E8;">    ContextManager.</span><span style="color:#B392F0;">createLocalSpan</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Thread/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">         objInst.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    ContextSnapshot cachedObjects </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        (ContextSnapshot)objInst.</span><span style="color:#B392F0;">getSkyWalkingDynamicField</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cachedObjects </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 恢复Trace信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        ContextManager.</span><span style="color:#B392F0;">continued</span><span style="color:#E1E4E8;">(cachedObjects);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeMethod</span><span style="color:#24292E;">(EnhancedInstance objInst, Method method,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] argumentsTypes,</span></span>
<span class="line"><span style="color:#24292E;">            MethodInterceptResult result) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 该调用中会先创建TracingContext，然后创建LocalSpan</span></span>
<span class="line"><span style="color:#24292E;">    ContextManager.</span><span style="color:#6F42C1;">createLocalSpan</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Thread/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">         objInst.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    ContextSnapshot cachedObjects </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        (ContextSnapshot)objInst.</span><span style="color:#6F42C1;">getSkyWalkingDynamicField</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cachedObjects </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 恢复Trace信息</span></span>
<span class="line"><span style="color:#24292E;">        ContextManager.</span><span style="color:#6F42C1;">continued</span><span style="color:#24292E;">(cachedObjects);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 afterMethod() 中会关闭前置增强逻辑中创建的 LocalSpan，同时，为了防止内存泄漏，会清空 _$EnhancedClassField_ws 字段。</p><h3 id="trace-id-与日志" tabindex="-1">Trace ID 与日志 <a class="header-anchor" href="#trace-id-与日志" aria-label="Permalink to &quot;Trace ID 与日志&quot;">​</a></h3><p>在实际定位问题的时候，我们可能需要将某个用户的某个请求的 Trace 监控以及相关的日志结合起来进行分析，毕竟 Trace 携带 Log 有限，不会携带请求整个生命周期中全部的日志。为了方便将 Trace 和日志进行关联，一般会在日志开头的固定位置打印 Trace ID，</p><p>application-toolkit 工具箱目前支持 logback、log4j-1.x、log4j-2.x 三个日志框架，下面以 logback 为例演示并分析原理。</p><h4 id="日志集成-trace-id" tabindex="-1">日志集成 Trace ID <a class="header-anchor" href="#日志集成-trace-id" aria-label="Permalink to &quot;日志集成 Trace ID&quot;">​</a></h4><p>这里依然通过 demo-webapp 模块为例，介绍如何在日志文件中自动输出 Trace ID。首先我们引入 apm-toolkit-logback-1.x 这个依赖，如下所示：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.skywalking&lt;/</span><span style="color:#FDAEB7;font-style:italic;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;apm-toolkit-logback-1.x&lt;/</span><span style="color:#FDAEB7;font-style:italic;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;6.2.0&lt;/</span><span style="color:#FDAEB7;font-style:italic;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;org.apache.skywalking&lt;/</span><span style="color:#B31D28;font-style:italic;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;apm-toolkit-logback-1.x&lt;/</span><span style="color:#B31D28;font-style:italic;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;6.2.0&lt;/</span><span style="color:#B31D28;font-style:italic;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>接下来在 resource 目录下添加 logback.xml 配置文件，指定日志的输出格式：</p>`,14),D=o(`<p>该配置文件有两个地方需要注意，一个是使用的 layout 为 TraceIdPatternLogbackLayout，该类位于 apm-toolkit-logback-1.x.jar 这个依赖包中，另一个在 pattern 配置中添加了 [%tid] 占位符。</p><p>在 HelloWorldController 中的 &quot;/hello/world&quot; 接口中，我们添加一条日志输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Logger LOGGER </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">       LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(HelloWorldController.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/hello/{words}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;words&quot;</span><span style="color:#E1E4E8;">) String words)</span></span>
<span class="line"><span style="color:#E1E4E8;">    LOGGER.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this is an info log,{}&quot;</span><span style="color:#E1E4E8;">, words);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 省略其他代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Logger LOGGER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">       LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(HelloWorldController.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello/{words}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;words&quot;</span><span style="color:#24292E;">) String words)</span></span>
<span class="line"><span style="color:#24292E;">    LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;this is an info log,{}&quot;</span><span style="color:#24292E;">, words);</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 省略其他代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后重启 demo-webapp 项目，访问 &quot;localhost:8000/hello/xxx&quot; 这个地址，就可以在控制台看到如下输出：</p>`,4),m=o('<h4 id="logback-核心概念" tabindex="-1">Logback 核心概念 <a class="header-anchor" href="#logback-核心概念" aria-label="Permalink to &quot;Logback 核心概念&quot;">​</a></h4><p>Logback 日志框架分为三个模块：logback-core、logback-classic 和 logback-access：</p><ul><li><strong>core 模块</strong>是整个 logback 的核心基础。</li><li><strong>classic 模块</strong>是在 core 模块上的扩展，classic 模块实现了 SLF4J API。</li><li><strong>access 模块</strong>主要用于与 Servlet 容器进行集成，实现记录 access-log 的功能。</li></ul><p>Logback 日志框架中有三个核心类：Logger、Appender 和 Layout。Logger 主要用来接收要输出的日志内容。每个 Logger 实例都有名字，而 Logger 的继承关系与其名称的层级关系保持一致。例如，现在有 3 个 Logger 实例 L1、L2、L3，L1 的名字为 &quot;com&quot;，L2 的名字为 &quot;com.xxx&quot;，L3 的名字为 &quot;com.xxx.Main&quot;，那么三者的继承关系如下图所示：</p>',4),k=o(`<p>其中，名为 &quot;ROOT&quot; 的 Logger 实例是顶层 Logger，它是所有其他 Logger 实例的祖先。</p><p>每个 Logger 实例都有对应的 Level 级别，如果未明确指定 Logger 实例的 Level 级别，则默认沿用上层 Logger 实例的 Level 级别，常用的 Level 级别以及 Level 优先级如下 ：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TRACE </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;"> DEBUG </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;"> INFO </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;"> WARN </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;"> ERROR</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TRACE </span><span style="color:#B31D28;font-style:italic;">&lt;</span><span style="color:#24292E;"> DEBUG </span><span style="color:#B31D28;font-style:italic;">&lt;</span><span style="color:#24292E;"> INFO </span><span style="color:#B31D28;font-style:italic;">&lt;</span><span style="color:#24292E;"> WARN </span><span style="color:#B31D28;font-style:italic;">&lt;</span><span style="color:#24292E;"> ERROR</span></span></code></pre></div><p>在调用 Logger 实例记录日志时会产生对应的日志记录请求，每个日志记录请求也有一个 Level 属性。只有日志记录请求的 Level 属性值大于或等于相应的 Logger 实例的 Level 级别时，该日志记录请求才是有效的。例如，有一个 Logger 实例的 Level 级别为 INFO，调用它的 error() 方法产生的日志记录请求的 Level 级别为 ERROR，ERROR &gt; INFO，所以该日志记录可以正常输出；如果调用其 debug() 方法，则产生的日志记录请求 Level 级别为 DEBUG，DEBUG &lt; INFO，则该日志记录无法正常输出。</p><p>另外，当一个 Logger 实例的 Level 级别为 OFF 时，任何在该 Logger 实例上产生的日志记录请求都是无效的；当一个 Logger 实例的 Level 级别为 ALL 时，任何在该 Logger 实例上产生的日志记录请求都是有效的。</p><p>在使用 Logback 时，我们都是通过下面的方式获取 Logger 实例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Logger LOGGER </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">      LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(HelloWorldController.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Logger LOGGER </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(HelloWorldController.class);</span></span></code></pre></div><p>这个过程底层会查找 LoggerContext 维护的缓存（loggerCache，Map&lt;String, Logger&gt; 类型，其中 Key 是 Logger 实例的名字，Value 为相应 Logger 实例）。如果 loggerCache 中存在相应 Logger 实例，会直接返回；否则会创建相应的 Logger 实例并返回，同时也会将该新建的 Logger 实例缓存到 loggerCache 中，也就是说，同名的 Logger 实例全局只有一个实例。另外，在新建 Logger 实例时，会同时把 loggerCache 中不存在的父 Logger 实例都创建好。</p><p>Appender 是对日志输出目的地的抽象，在示例中使用的 ConsoleAppender 会将日志打印到控制台，实践中常用的 FileAppender、RollingFileAppender 等会将日志输出到 log 文件中，还有 Appender 可以将日志输出到 MySQL 等持久化存储中，这里不再一一列举 。</p><p>一个 Logger 实例上可以绑定多个 Appender 实例，当在 Logger 实例上产生有效的日志记录请求时，日志记录请求会被发送到所有绑定的 Appender 实例上，然后由 Appender 实例进行输出。另外，Logger 实例上绑定的 Appender 实例还可以继承自上层 Logger 实例的 Appender 绑定。</p><p>在老版本的 Logback 中， Appender 会通过 Layout 将日志事件转换成字符串，然后输出到 java.io.Writer 中，实现控制日志输出格式的目的。在新版本的 Logback 中，Appender 不再直接使用 Layout，而是使用 Encoder 实现日志事件到字节数组的转换。Encoder 同时会将转换后的字节数组输出到 Appender 维护的 Outputstream 中。</p><p>最常用的 Encoder 实现是 PatternLayoutEncoder，继承关系如下图所示。</p>`,12),q=o(`<p>从 LayoutWrapperEncoder 中 encode() 方法的实现就可以看出，上述 Encoder 底层还是依赖 Layout 确定日志的格式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(E event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String txt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> layout.</span><span style="color:#B392F0;">doLayout</span><span style="color:#E1E4E8;">(event); </span><span style="color:#6A737D;">// 依赖Layout将日志事件转换字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">convertToBytes</span><span style="color:#E1E4E8;">(txt); </span><span style="color:#6A737D;">// 将字符串转换成字节数组</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(E event) {</span></span>
<span class="line"><span style="color:#24292E;">    String txt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> layout.</span><span style="color:#6F42C1;">doLayout</span><span style="color:#24292E;">(event); </span><span style="color:#6A737D;">// 依赖Layout将日志事件转换字符串</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">convertToBytes</span><span style="color:#24292E;">(txt); </span><span style="color:#6A737D;">// 将字符串转换成字节数组</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>PatternLayoutEncoder 底层就是直接依赖 PatternLayout 确定日志格式的。当然，我们可以使用 LayoutWrappingEncoder 并指定其他自定义的 Layout ，实现自定义格式的日志。</p><p>那 PatternLayout 是如何根据指定的日志输出格式呢？在示例中， 标签下会配置 标签，其中指定了日志的格式。在 PatternLayoutBase 初始化的时候，会解析 字符串，并创建相应的 Converter，其中每个占位符对应一个 Converter，相关代码片段如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析pattern字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">    Parser&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;">&gt; p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Parser&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;">&gt;(pattern);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Node t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据解析后的pattern创建Converter链表</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.head </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(t, </span><span style="color:#B392F0;">getEffectiveConverterMap</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... ... </span><span style="color:#6A737D;">// 省略其他代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析pattern字符串</span></span>
<span class="line"><span style="color:#24292E;">    Parser&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Parser&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;(pattern);</span></span>
<span class="line"><span style="color:#24292E;">    Node t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据解析后的pattern创建Converter链表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(t, </span><span style="color:#6F42C1;">getEffectiveConverterMap</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    ... ... </span><span style="color:#6A737D;">// 省略其他代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Logback 自带的 Converter 实现都在 PatternLayout.defaultConverterMap 集合之中，先来展示了部分 Converter 的功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// DateConverter处理pattern字符串中的&quot;%d&quot;或是&quot;%date&quot;占位符</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultConverterMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;d&quot;</span><span style="color:#E1E4E8;">, DateConverter.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultConverterMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;date&quot;</span><span style="color:#E1E4E8;">, DateConverter.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ThreadConverter处理pattern字符串中的&quot;%t&quot;或是&quot;%thread&quot;占位符</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultConverterMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;t&quot;</span><span style="color:#E1E4E8;">, ThreadConverter.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultConverterMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;thread&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">         ThreadConverter.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// MessageConverter处理&quot;%m&quot;、&quot;%msg&quot;、&quot;message&quot;占位符</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultConverterMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;m&quot;</span><span style="color:#E1E4E8;">, MessageConverter.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultConverterMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;">, MessageConverter.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    defaultConverterMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">         MessageConverter.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 省略其他占位符对应的Converter</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// DateConverter处理pattern字符串中的&quot;%d&quot;或是&quot;%date&quot;占位符</span></span>
<span class="line"><span style="color:#24292E;">    defaultConverterMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d&quot;</span><span style="color:#24292E;">, DateConverter.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    defaultConverterMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;date&quot;</span><span style="color:#24292E;">, DateConverter.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ThreadConverter处理pattern字符串中的&quot;%t&quot;或是&quot;%thread&quot;占位符</span></span>
<span class="line"><span style="color:#24292E;">    defaultConverterMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;t&quot;</span><span style="color:#24292E;">, ThreadConverter.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    defaultConverterMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;thread&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">         ThreadConverter.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// MessageConverter处理&quot;%m&quot;、&quot;%msg&quot;、&quot;message&quot;占位符</span></span>
<span class="line"><span style="color:#24292E;">    defaultConverterMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;m&quot;</span><span style="color:#24292E;">, MessageConverter.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    defaultConverterMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;">, MessageConverter.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    defaultConverterMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">         MessageConverter.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略其他占位符对应的Converter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Converter 的核心是 convert() 方法，它负责从日志事件中提取相关信息填充占位符，例如， DateConverter.convert() 方法的实现就是获取日志时间来填充 %d（或 %date）占位符：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">convert</span><span style="color:#E1E4E8;">(ILoggingEvent le) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> timestamp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> le.</span><span style="color:#B392F0;">getTimeStamp</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取日志事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cachingDateFormatter.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(timestamp); </span><span style="color:#6A737D;">// 格式化</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">MessageConverter 就是获取日志格式化信息来填充 </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">m、</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">msg 或 </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">message 占位符：</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">convert</span><span style="color:#E1E4E8;">(ILoggingEvent event) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getFormattedMessage</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">convert</span><span style="color:#24292E;">(ILoggingEvent le) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> le.</span><span style="color:#6F42C1;">getTimeStamp</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取日志事件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cachingDateFormatter.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(timestamp); </span><span style="color:#6A737D;">// 格式化</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">MessageConverter 就是获取日志格式化信息来填充 </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">m、</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">msg 或 </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">message 占位符：</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">convert</span><span style="color:#24292E;">(ILoggingEvent event) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getFormattedMessage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="toolkit-logback-1-x" tabindex="-1">toolkit-logback-1.x <a class="header-anchor" href="#toolkit-logback-1-x" aria-label="Permalink to &quot;toolkit-logback-1.x&quot;">​</a></h4><p>了解了 Logback 日志框架的核心概念之后，我们回到 demo-webapp 中的 logback.xml 配置文件，这里使用的 Encoder 实现是 LayoutWrappingEncoder，其中指定的 Layout 实现为 SkyWalking 提供的自定义 Layout 实现 ------ TraceIdPatternLogbackLayout，它继承了 PatternLayout 并向 defaultConverterMap 中注册了 %tid 占位符对应的 Converter，具体代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TraceIdPatternLogbackLayout</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PatternLayout</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        defaultConverterMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tid&quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">             LogbackPatternConverter.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TraceIdPatternLogbackLayout</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PatternLayout</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        defaultConverterMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tid&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">             LogbackPatternConverter.class.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>LogbackPatternConverter 中的 convert() 方法实现直接返回了 &quot;TID: N/A&quot;。</p><p>下面我们跳转到 apm-toolkit-logback-1.x-activation 模块，其 skywalking-plugin.def 文件中指定的 LogbackPatternConverterActivation 会拦截 LogbackPatternConverter 的 convert() 方法，并由 PrintTraceIdInterceptor 进行增强。PrintTraceIdInterceptor.afterMethod() 方法实现中会用当前的 Trace ID 替换 &quot;TID: N/A&quot;返回值：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">afterMethod</span><span style="color:#E1E4E8;">(EnhancedInstance objInst, Method method, </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[] allArguments, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;">[] argumentsTypes, Object ret) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;TID:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ContextManager.</span><span style="color:#B392F0;">getGlobalTraceId</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 获取 Trace ID</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">afterMethod</span><span style="color:#24292E;">(EnhancedInstance objInst, Method method, </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] allArguments, Class</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">[] argumentsTypes, Object ret) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;TID:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ContextManager.</span><span style="color:#6F42C1;">getGlobalTraceId</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取 Trace ID</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时重点介绍了 SkyWalking 中 application-toolkit 工具箱的核心原理。首先介绍了 toolkit-trace 模块中 @Trace 注解、 TraceContext 以及 ActiveSpan 工具类的使用方式，然后深入介绍了它们的核心实现。接下来，通过示例介绍了 SkyWalking 与 Logback 日志框架集成方式，深入分析了 Logback 日志框架的核心概念，最后深入介绍了 toolkit-trace-activation 模块的核心原理。</p>`,17);function _(T,S,L,B,M,f){const n=e("Image");return t(),c("div",null,[E,l(n,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/04/26/CgqCHl6zvL-AJxsiAALX11rEFcE040.png"}),a(),y,l(n,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/04/26/Ciqc1F6zvMeAIijwAAG4HeGpP1w020.png"}),a(),i,g,l(n,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/04/26/CgqCHl6zvNCANNntAAF2iT3mNig327.png"}),a(),d,u,F,h,l(n,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image/M00/04/26/CgqCHl6zvNmAEeMhAAHH-Xli_I8395.png"}),a(),v,l(n,{alt:"image (4).png",src:"https://s0.lgstatic.com/i/image/M00/04/26/CgqCHl6zvOSAJMFjAAIONP7amFM561.png"}),a(),C,l(n,{alt:"跨线程传播.png",src:"https://s0.lgstatic.com/i/image/M00/04/26/Ciqc1F6zvO-AEq9VAAFo-ZWXkGM186.png"}),a(),A,l(n,{alt:"image (5).png",src:"https://s0.lgstatic.com/i/image/M00/04/26/Ciqc1F6zvPqAKHZ1AAFedhJrbC8809.png"}),a(),b,l(n,{alt:"image (6).png",src:"https://s0.lgstatic.com/i/image/M00/04/26/CgqCHl6zvQeAdq60AAJd-oywE_o373.png"}),a(),D,l(n,{alt:"image (7).png",src:"https://s0.lgstatic.com/i/image/M00/04/26/Ciqc1F6zvRKAMCK4AAHOkonOBic764.png"}),a(),m,l(n,{alt:"image (8).png",src:"https://s0.lgstatic.com/i/image/M00/04/26/Ciqc1F6zvRqAVReiAAEEjIqgllA872.png"}),a(),k,l(n,{alt:"image (9).png",src:"https://s0.lgstatic.com/i/image/M00/04/26/CgqCHl6zvSWAA-ZRAAB1DP_LB58112.png"}),a(),q])}const P=p(r,[["render",_]]);export{x as __pageData,P as default};
