import{_ as o,D as e,o as t,g as c,J as a,h as s,Q as p,m as l}from"./chunks/framework.f67d7268.js";const W=JSON.parse('{"title":"10 双指针：如何掌握最长、定长、最短区间问题的解题决窍？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6699) 10  双指针：如何掌握最长、定长、最短区间问题的解题决窍？.md","filePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6699) 10  双指针：如何掌握最长、定长、最短区间问题的解题决窍？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/数据结构与算法面试宝典_文档/(6699) 10  双指针：如何掌握最长、定长、最短区间问题的解题决窍？.md"},E=p('<h1 id="_10-双指针-如何掌握最长、定长、最短区间问题的解题决窍" tabindex="-1">10 双指针：如何掌握最长、定长、最短区间问题的解题决窍？ <a class="header-anchor" href="#_10-双指针-如何掌握最长、定长、最短区间问题的解题决窍" aria-label="Permalink to &quot;10 双指针：如何掌握最长、定长、最短区间问题的解题决窍？&quot;">​</a></h1><p>双指针的使用方法，在前面学习链表的时候，已经有所涉及。不过在那时，主要介绍的快慢指针。在这一讲，我们主要介绍双指针在数组上的应用。</p><p>双指针，通常是命名用两个指针在数组/链表上遍历，然后解决满足某种性质的区间问题。在链表中我们已经介绍过双指针（也可以叫作快慢指针）。不过今天我们将重点介绍：如何利用<strong>双指针</strong>处理以下 3 方面的区间问题：</p><ul><li><p>最长区间</p></li><li><p>定长区间</p></li><li><p>最短区间</p></li></ul><p>学完本讲，你将收获双指针的 3 个模板，帮助你通杀所有面试中可能碰到的双指针题目。Ready, Go Go!</p><h3 id="双指针基础" tabindex="-1">双指针基础 <a class="header-anchor" href="#双指针基础" aria-label="Permalink to &quot;双指针基础&quot;">​</a></h3><p>考察双指针的题目，绝大多数<strong>题眼</strong> 就在<strong>区间</strong> 。见面不含糊，直接尝试挖出题目的<strong>两个特点</strong>：</p><ol><li><p>弄清楚题目要的是<strong>什么样的区间</strong>？是最长，定长，最短这三种里面的哪一种。</p></li><li><p>区间需要满足的<strong>条件</strong>是什么？</p></li></ol><p>如果发现题目符合这两个特点，还需要让题目中的连续子串（后文区间 = 连续子串）符合单调性。让我们一起看一下什么是单调性。</p><p><em>注：这里的双指针只是一种算法的命名，有的人喜欢叫滑动窗口，或者尺取法。我觉得用双指针更加形象一点。&quot;指针&quot;二字并不能对应到 C/C++ 里面的指针类型。在使用的时候，往往是两个下标。</em></p><h4 id="单调性" tabindex="-1">单调性 <a class="header-anchor" href="#单调性" aria-label="Permalink to &quot;单调性&quot;">​</a></h4><p>使用双指针，需要区间满足一个条件：区间状态的<strong>单调性</strong>。这里可以用一个例子进行描述。比如我们想在如下数组中找到小于等于 6 的最长子串。现在只看以 3 为区间最右端元素的各种情况，如下图所示：</p>',12),y=l("p",null,"那么区间可以分为 3 种：",-1),i=l("p",null,"第一种区间：以 3 为右端，其和大于 6。",-1),A=l("p",null,"第二种区间：以 3 为右端的区间，其和等于 6。",-1),F=l("p",null,"第三种区间：以 3 为右端的区间，其和小于 6。",-1),D=l("p",null,"如果我们将这些区间的累计和呈现到数轴上，就会得到如下图所示的一个图像：",-1),g=l("p",null,"可以看出，区间的状态的变化是单调的，并且是连续的：这就是双指针算法使用的条件。",-1),u=l("p",null,[l("strong",null,'有个快速判断区间属性是否满足单调性的办法，那就是，当往区间里面添加元素的时候，不能出现波折，比如不允许"满足条件'),s(" →"),l("strong",null,"不满足条件"),s(" →"),l("strong",null,'满足条件"的情况'),s("。")],-1),C=l("p",null,"比如，我们这里的限定条件改成：需要区间满足 >= 6。我们看一下如下操作步骤：",-1),h=p(`<p>那么区间的状态变化就是 <strong>&quot;满足条件</strong> →<strong>不满足条件</strong> →<strong>满足条件&quot;</strong>。这样就不符合单调性。</p><h4 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h4><p>那么双指针为什么可以在 O(N)？它的合理性在哪？这里我尽量尝试用最直白的语言来把题目证明一下。</p><p>首先我们来看<strong>区间右端固定集合</strong>（这个名词是我自创的，因为我没有找到相关的术语来描述这种非常基础的操作）：</p><blockquote><p>把 A[i] 元素固定为区间的右端点，只变动区间的左边界形成的所有区间，并且按区间长度需要从长到短排列。</p></blockquote><p>比如要遍历如下数组：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">};</span></span></code></pre></div><p>比如以 A[i = 2] = 3 为例，形成的<strong>区间右端固定集合</strong>为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">      [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span></code></pre></div><p>如果对每个元素找到<strong>区间右端固定集合</strong>，我们同样可以遍历一个数组里面的所有的子区间：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">], [</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span></code></pre></div><p>接下来我们只分析 A[i] 元素的<strong>区间右端固定集合</strong> 。比如要找出和 &lt;= 7 的最长区间。当已经处理到 A[2] = 3 的时候，当发现 [1, 2, 3] 这个区间之和 6 已经 &lt;=7 时（<strong>满足要求</strong> ），实际上就没有必要再去处理 [2, 3] 区间和 [3] 区间。因为我们要的就是<strong>最长区间！</strong></p>`,12),d=p(`<p>通过上述分析，我们可以总结一个<strong>区间最优原则</strong> ：从左向右遍历<strong>区间右端固定集合中的每个区间，找到一个满足条件的解即可停止</strong>。</p><p>利用这个性质，我们可以再加一个指针 left, 指向区间的左边，与 A[i] 元素构成区间 (left, i]，注意这里我们又用到了<strong>开闭原则，<strong>只不过此时是</strong>左开右闭</strong>。那么寻找以 A[i] 为右边界的最优解可以分 3 步走：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">step1. 将A[i]加到区间中，形成新区间(left, i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 遍历A[i]的区间右端固定集合，直找到以A[i]为右端点的最优解</span></span>
<span class="line"><span style="color:#E1E4E8;">step2. </span><span style="color:#B392F0;">while</span><span style="color:#E1E4E8;"> (left </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (left,i]区间不满足要求) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  left</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 此时要么得到一个满足要求的</span></span>
<span class="line"><span style="color:#E1E4E8;">step </span><span style="color:#79B8FF;">3.</span><span style="color:#E1E4E8;"> (left, i]区间满足要求</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">step1. 将A[i]加到区间中，形成新区间(left, i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 遍历A[i]的区间右端固定集合，直找到以A[i]为右端点的最优解</span></span>
<span class="line"><span style="color:#24292E;">step2. </span><span style="color:#6F42C1;">while</span><span style="color:#24292E;"> (left </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (left,i]区间不满足要求) {</span></span>
<span class="line"><span style="color:#24292E;">  left</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 此时要么得到一个满足要求的</span></span>
<span class="line"><span style="color:#24292E;">step </span><span style="color:#005CC5;">3.</span><span style="color:#24292E;"> (left, i]区间满足要求</span></span></code></pre></div><p>前面我们已经找到了 A[2] = 3 的合法最长区间为 (-1, 2]，那么接下来看一下如何再接着处理 A[3] = 4。</p>`,4),B=p(`<p>通过上述分析，我们可以拿出<strong>求解最长区间时双指针的结论：<strong>最长区间问题的最优解→只需要遍历</strong>每个元素 A[i] 的最优解</strong>即可。</p><p>以前面给的 A[2] = 3, A[3] = 4 两个元素为例，在找整个最优解的时候，只需要看两个区间：</p><ul><li><p>[1, 2, 3]</p></li><li><p>[3, 4]</p></li></ul><p>我们发现，在寻找最优解的时候，已经比暴力算法少了很多需要查看的区间。</p><h3 id="最长区间" tabindex="-1">最长区间 <a class="header-anchor" href="#最长区间" aria-label="Permalink to &quot;最长区间&quot;">​</a></h3><p>使用双指针算法来解决最长区间的问题，一般题目需要具备如下特点：</p><ul><li><p>给定一个条件</p></li><li><p>求最长区间/最长子串</p></li><li><p>题目给出的区间需要<strong>具备单调性</strong></p></li></ul><p>这里需要特别指出，不是看到题目要求最长子串/最长区间就使用双指针，而是需要题目的求解空间具有单调性。这是一个非常重要具必备的条件。</p><h4 id="面试必杀技" tabindex="-1">面试必杀技 <a class="header-anchor" href="#面试必杀技" aria-label="Permalink to &quot;面试必杀技&quot;">​</a></h4><p>不过，真正在面试的时候，可没有那么多时间让你慢慢去证明，慢慢去推导。放心，我这里已经给你准备好了最长区间的面试必杀技，关键就两招：</p><ol><li><p><strong>两个指针</strong> ，left 指针和 right 指针，两个指针形成的区间为 (left, right]。这里的开闭原则是<strong>左开右闭；</strong></p></li><li><p><strong>惰性原则</strong>，如果把 left 指针当成一个人，那么这个人是非常懒惰的，他总是要等到火烧屁股（条件不满足了）才向右移动。</p></li></ol><p>求最长区间的代码模板大概会长成这样（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">maxLength</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 区间的左指针</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// assert 在加入A[i]之前，(left, i-1]是一个合法有效的区间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// step 2. 将A[i]加入之后，惰性原则</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">((left, i]))</span><span style="color:#6A737D;">/*TODO 检查区间状态是否满足条件*/</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">left; </span><span style="color:#6A737D;">// 如果不满足条件，移动左指针</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// TODO 修改区间的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// assert 此时(left, i]必然满足条件</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(ans, i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans; </span><span style="color:#6A737D;">// 返回最优解</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">maxLength</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 区间的左指针</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// assert 在加入A[i]之前，(left, i-1]是一个合法有效的区间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// step 2. 将A[i]加入之后，惰性原则</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">((left, i]))</span><span style="color:#6A737D;">/*TODO 检查区间状态是否满足条件*/</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">left; </span><span style="color:#6A737D;">// 如果不满足条件，移动左指针</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// TODO 修改区间的状态</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// assert 此时(left, i]必然满足条件</span></span>
<span class="line"><span style="color:#24292E;">    ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(ans, i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans; </span><span style="color:#6A737D;">// 返回最优解</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>好了，我们的刀已经磨好了，下面就开始准备切题吧。注意上方代码中的<strong>两个&quot;TODO&quot;</strong> ，我们已经把写算法题，变成<strong>填空题</strong>了。</p><h4 id="例-1-不含重复字符的最长区间" tabindex="-1">例 1：不含重复字符的最长区间 <a class="header-anchor" href="#例-1-不含重复字符的最长区间" aria-label="Permalink to &quot;例 1：不含重复字符的最长区间&quot;">​</a></h4><p>【<strong>题目</strong>】找出一个字符串 s 中无重复字符子串的长度。</p><p>输入： s = &quot;abcdc&quot;</p><p>输出：4</p><p>解释：因为最长的子串就是&quot;abcd&quot;</p><p>【<strong>分析</strong>】首先看题目的特点：</p><ul><li><p>求最长子串</p></li><li><p>条件为无重复字符</p></li><li><p>单调性</p></li></ul><p>子串是数组的一个区间。那么题目的特点已经和最长区间的特点非常匹配了。再看<strong>单调性</strong>，当子串在变长的时候，不可能出现&quot;无重复字符 → 重复字符 → 无重复字符&quot;这种可能。因此满足单调性。</p><p>那么这里我们直接使用双指针进行求解。</p><p>其实可以直接套用前面总结出的模板，但是我们立马会发现模板中代码并不完整，还有两个&quot;TODO&quot;需要处理。下面我们看一下如何像处理填空题一样把这两个空给填上。</p><h5 id="_1-检查区间状态" tabindex="-1">1. 检查区间状态 <a class="header-anchor" href="#_1-检查区间状态" aria-label="Permalink to &quot;1. 检查区间状态&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">((left, i]))是否满足条件)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">((left, i]))是否满足条件)</span></span></code></pre></div><p>首先，我们检查区间是否满足条件，那么如何检查？当我们把新字符 s[i] 加入合法区间 (left, i-1]，形成 (left, i] 区间之后，区间的状态就会变成如下图所示的样子：</p>`,27),f=p(`<p>这个时候，可以发现区间里面 (left, i] 里面已经有一个&#39;a&#39;了。也就是说：如果我们发现当加入一个字符的时候，这个字符位置在 (left, i-1] 区间里面，此时就产生了重复字符。所以检查条件可以修改成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// pos[]数组用来记录每个字符的位置</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (left </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> pos[字符] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> left) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 然后移动left</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TODO 修改区间状态</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// pos[]数组用来记录每个字符的位置</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (left </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> pos[字符] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> left) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 然后移动left</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// TODO 修改区间状态</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="_2-修改区间状态" tabindex="-1">2. 修改区间状态 <a class="header-anchor" href="#_2-修改区间状态" aria-label="Permalink to &quot;2. 修改区间状态&quot;">​</a></h5><p>我们来看一个例子，当产生重复字符的时候，如何修改呢？具体操作如下：</p>`,4),b=p(`<p>也就是 left = pos[&#39;a&#39;] 就可以。那么状态的更新就可以写成如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// pos[]数组用来记录每个字符的位置</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (left </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> pos[字符] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> left) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 然后移动left</span></span>
<span class="line"><span style="color:#E1E4E8;">  left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pos[字符];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// pos[]数组用来记录每个字符的位置</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (left </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> pos[字符] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> left) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 然后移动left</span></span>
<span class="line"><span style="color:#24292E;">  left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pos[字符];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>【<strong>代码</strong>】填好空的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lengthOfLongestSubstring</span><span style="color:#E1E4E8;">(String s) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] pos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  Arrays.</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(pos, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> idx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)s.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// (left, i)已经是一个有效的解</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 现在要把s[i]加进来</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1. 坏了才移动</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 那么看一下是否会坏？</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (pos[idx] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> left) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果(left, i)里面已经有了s[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 那么需要移动左边，</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 移动的时候，怎么移动？</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 可以直接将left 移动到pos[s[i]]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 因为我们采用的区间是左开右闭</span></span>
<span class="line"><span style="color:#E1E4E8;">      left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pos[idx];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    pos[idx] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(ans, i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lengthOfLongestSubstring</span><span style="color:#24292E;">(String s) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] pos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  Arrays.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(pos, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> idx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)s.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// (left, i)已经是一个有效的解</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 现在要把s[i]加进来</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. 坏了才移动</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 那么看一下是否会坏？</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (pos[idx] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> left) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果(left, i)里面已经有了s[i]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 那么需要移动左边，</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 移动的时候，怎么移动？</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 可以直接将left 移动到pos[s[i]]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 因为我们采用的区间是左开右闭</span></span>
<span class="line"><span style="color:#24292E;">      left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pos[idx];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    pos[idx] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(ans, i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N)，空间复杂度 O(1)。</p><p>【<strong>小结</strong>】到这里，我们已经学习了最长区间的原理，模板，以及将它巧妙地变成填空题来快速破题。</p><p>关于最长区间问题，我们可以总结如下：</p>`,8),_=p(`<p>接下来，为了巩固已学的知识，我们再一起看几道练习题。</p><p><strong>练习题 1</strong>：给定一个字符串，你可以把字符串里面的某些字符替换成任意字符 k 次。请返回你可以得到的最长相同字符的长度。</p><p>输入：s = &#39;ABACD&#39;, k = 1</p><p>输出：3</p><p>解释：只需要把 &#39;ABA&#39; 里面的 B 替换成 &#39;A&#39; 即可。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/424.%E6%9B%BF%E6%8D%A2%E5%90%8E%E7%9A%84%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/424.%E6%9B%BF%E6%8D%A2%E5%90%8E%E7%9A%84%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/424.%E6%9B%BF%E6%8D%A2%E5%90%8E%E7%9A%84%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 2</strong>：你需要实现一个类，实现里面的 insert(char c) 函数，调用者会通过 insert 接口给你一个字符。此外，调用者还会立马调用 firstAppearingOnce() 函数来查询第一个出现的字符。如果不存在，返回 &#39;#&#39; 字符。</p><p>输入：google</p><p>输出：ggg#ll</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/64.%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/64.%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/64.%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 3</strong>：给定一个数组 A[]，请你找到一个最长区间，这个区间里面最多包含两个不一样的数。</p><p>输入：A = [1, 2, 1, 2, 3]</p><p>输出：4</p><p>解释：区间 [1, 2, 1, 2] 里面只有两个数，并且是最长区间。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 4</strong>：在练习题 3 的基础上，做了一点点扩展，最多包含 k 个不一样的数。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/386.%E6%9C%80%E5%A4%9A%E6%9C%89k%E4%B8%AA%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/386.%E6%9C%80%E5%A4%9A%E6%9C%89k%E4%B8%AA%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/386.%E6%9C%80%E5%A4%9A%E6%9C%89k%E4%B8%AA%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 5</strong>：一个数组里面的数总是增增减减，会出现升序，然后再降序的情况，请找出这个数组里面最长的子串，这个子串刚好形成先升后降的大山峰。</p><blockquote><p>代码:<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/845.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E5%B1%B1%E8%84%89.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/845.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E5%B1%B1%E8%84%89.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/845.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E5%B1%B1%E8%84%89.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>最长区间问题，经过一小点改动还可以用来解决区间计数问题。下面我们一起来看一下。</p><h4 id="例-2-区间计数" tabindex="-1">例 2: 区间计数 <a class="header-anchor" href="#例-2-区间计数" aria-label="Permalink to &quot;例 2: 区间计数&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个正数数组A[]，以及一个正整数 k，求乘积小于 k 的子数组的个数。</p><p>输入：A = [100, 1, 1, 1, 2, 3, 4], k = 6</p><p>输出：12</p><p>解释：乘积小于 6 的子数组一共有 12 个。比如 [1]、 [1]、[1,1,1]，等等。</p><p>【<strong>分析</strong>】前面我们介绍的是使用模板求解最长区间，这道题目问题却是在求区间的个数。那么这两者之间有什么联系呢？</p><p>这里我们只看 A[4] = 2 元素的<strong>区间右端固定集合</strong>。如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">     [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">&lt;--</span><span style="color:#E1E4E8;"> 最优解：乘积 </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> 6的最长区间</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">           [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">              [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">A</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">     [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">&lt;--</span><span style="color:#24292E;"> 最优解：乘积 </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> 6的最长区间</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">           [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">              [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span></code></pre></div><p>可以发现，[1, 1, 1, 2] 是我们寻找最长区间时候的最优解。让我们再回想一下前面提到的<strong>区间最优原则</strong>：</p><blockquote><p>区间右端固定集合合里面，一旦找到一个最优解，那么最优解右边的区间如果满足条件，但都不是最优解。</p></blockquote><p><strong>区间最优原则</strong> 也在<strong>疯狂暗示</strong>我们，如果找到以 A[i] 为右端的最优解，那么余下的更短的以 A[i] 为右端的区间，也是满足小于等于 k 的。在统计的时候，我们只需要累计每个 A[i] 的最优解区间的长度就可以了。</p><p>那么区间计数的模板就变成如下所示的样子（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rangeCounter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 区间的左指针</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 不变式0: 最开始的区间为(-1, -1] 是一个空区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//         我们认为空区间总是满足条件!</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 不变式1: 在加入A[i]之前，(left, i-1]是一个合法有效的区间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// step 2. 将A[i]加入之后，惰性原则</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">((left, i]))</span><span style="color:#6A737D;">/*TODO 检查区间状态是否满足条件*/</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">left; </span><span style="color:#6A737D;">// 如果不满足条件，移动左指针</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// TODO 修改区间的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 不变式2：此时(left, i]必然合法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 累计区间个数</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans; </span><span style="color:#6A737D;">// 返回最优解</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rangeCounter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 区间的左指针</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 不变式0: 最开始的区间为(-1, -1] 是一个空区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//         我们认为空区间总是满足条件!</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 不变式1: 在加入A[i]之前，(left, i-1]是一个合法有效的区间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// step 2. 将A[i]加入之后，惰性原则</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">((left, i]))</span><span style="color:#6A737D;">/*TODO 检查区间状态是否满足条件*/</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">left; </span><span style="color:#6A737D;">// 如果不满足条件，移动左指针</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// TODO 修改区间的状态</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 不变式2：此时(left, i]必然合法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 累计区间个数</span></span>
<span class="line"><span style="color:#24292E;">    ans </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans; </span><span style="color:#6A737D;">// 返回最优解</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>好吧，经过上述一番分析，我们又把区间计数问题变成填空题。下面只需要再填好那两个&quot;TODO&quot;的地方就可以了：</p><ul><li><p>区间状态是否满足条件</p></li><li><p>移动左指针的时候，修改区间的状态</p></li></ul><p>根据题意，这两个都是比较好填的：</p><ul><li><p>区间状态，我们直接用累积就可以了</p></li><li><p>条件的判断只需要 s &gt; k</p></li><li><p>当移动左指针的时候，只需要 s /= A[++left] 即可</p></li></ul><p>【<strong>代码</strong>】填好空的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">numSubarrayProductLessThanK</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> k) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将x加到子数组中</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">*=</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果破坏了约束，那么移动左指针</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      s </span><span style="color:#F97583;">/=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">left];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 此时必然满足要求</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">numSubarrayProductLessThanK</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将x加到子数组中</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果破坏了约束，那么移动左指针</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> i) {</span></span>
<span class="line"><span style="color:#24292E;">      s </span><span style="color:#D73A49;">/=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">left];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 此时必然满足要求</span></span>
<span class="line"><span style="color:#24292E;">    ans </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)ans;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/713.%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8Ek%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/713.%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8Ek%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/713.%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8Ek%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N)，空间复杂度 O(1)。</p><p>【<strong>小结</strong>】这里我们再次提到**区间最优原则，**这个原则非常重要，是使用双指针来解决问题的关键与依赖。你可以尝试求解下面这道练习题，细细体会该原则。</p><p><strong>练习题 6</strong>：给定一个有正数也有负数的数组 A[] 和 k，请找到最长的子数组，其和等于 k。</p><blockquote><p>解法 1：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/921.%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%BAk.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/921.%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%BAk.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/921.%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%BAk.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><em>注：这里可能需要你好好想一下，为什么不能使用我们刚才所讲的模板。</em></p><p>下面我们整理一下最长区间题目的特点，以及代码模板的适用条件：</p>`,46),m=p('<p>最长区间的知识点就讲到这里。接下来我们看一下定长区间问题的求解。</p><h3 id="定长区间" tabindex="-1">定长区间 <a class="header-anchor" href="#定长区间" aria-label="Permalink to &quot;定长区间&quot;">​</a></h3><p>定长区间问题是要找到一个固定长度的区间，并且这个区间必须满足某种条件。所以求解定长区间问题，实质上是需要找满足两个条件的子串。</p><ol><li><p>子串的长度固定。由于长度固定，因此，<strong>定长区间问题不需要满足单调性</strong>。</p></li><li><p>子串必须满足某种条件。</p></li></ol><p>定长区间的解法通常也被称为&quot;<strong>滑动窗口算法</strong> &quot;。在&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6698&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 09 讲</a>&quot;讲解二分搜索&quot;例 4: 最大平均值&quot;的时候，我们对这种方法有涉及，但是并没有深入地详细展开。这里我们再总结一下这种算法的模板与套路。</p><p>定长区间，由于长度固定，你可以想象成有一个固定的长度的窗口在数组上滑动。比如有一个长度为 3 的窗口在一个数组上滑动。</p>',6),k=l("p",null,"写定长区间的代码也比较容易。如果我们比较两者的变化，可以发现，只有首尾元素发生了变动。",-1),q=p(`<p>那么我们在处理时，只需要保证加入元素和删除元素的时候，去更新区间的性质，查看是否满足约束条件即可。</p><h4 id="面试必杀技-1" tabindex="-1">面试必杀技 <a class="header-anchor" href="#面试必杀技-1" aria-label="Permalink to &quot;面试必杀技&quot;">​</a></h4><p>在面试的时候，如果拿到题目再去慢慢想滑动窗口应该怎么写，会浪费不少时间。这里我已经给你总结好了方法，你拿到题的时候，需要从题目中分析两个特点。</p><ol><li><p><strong>固定长度</strong> ：题目要求解的是不是一个<strong>固定长度</strong>的子串？</p></li><li><p><strong>约束条件</strong>： 这个定长区间必须要满足什么性质？</p></li></ol><p>如果从题目中分析出以上 2 个特点，那么基本上可以直接套用定长区间的&quot;滑动窗口&quot;解法了。这里我已经整理好了一个通用的模板，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fixedLength</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> windowSize) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// TODO 修改区间的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果滑动窗口还太小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> windowSize) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// assert 此时(left, i]长度必然等于windowSize</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// TODO 判断区间的状态是否满足约束条件</span></span>
<span class="line"><span style="color:#E1E4E8;">    left</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// step 2. 移除A[left]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// TODO 修改区间状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans; </span><span style="color:#6A737D;">// 返回最优解</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fixedLength</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> windowSize) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// TODO 修改区间的状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果滑动窗口还太小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> windowSize) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// assert 此时(left, i]长度必然等于windowSize</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// TODO 判断区间的状态是否满足约束条件</span></span>
<span class="line"><span style="color:#24292E;">    left</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// step 2. 移除A[left]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// TODO 修改区间状态</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans; </span><span style="color:#6A737D;">// 返回最优解</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意，模板中只有**3 个&quot; TODO&quot;**要根据题目的具体情况来填。这样，我们又把定长区间算法题变成了填空题。接下来我们再拿两道题来试刀。</p><h4 id="例-3-定长子串-1" tabindex="-1">例 3: 定长子串 1 <a class="header-anchor" href="#例-3-定长子串-1" aria-label="Permalink to &quot;例 3: 定长子串 1&quot;">​</a></h4><p>【<strong>题目</strong>】给定两个字符串 A，B。判断 B 字符串是否有包含 A 字符串的任意排列。</p><p>输入：A = &quot;ab&quot;, B = &quot;bac&quot;</p><p>输出：true</p><p><strong>解释</strong>：因为 B 字符串是包含 &quot;ba&quot;，而 &quot;ba&quot; 是字符串 &quot;ab&quot; 的一个排列。</p><p>【<strong>分析</strong>】首先我们看题目的特点，A 字符串的任意排列，透露出两个特点：</p><ol><li><p>任意排列的长度肯定等于 A.length()</p></li><li><p>任意排列的字符的数目的统计结果必然相同</p></li></ol><p>从这两个特点，我们可以知道：</p><ul><li><p>固定长度，并且区间的长度就是 A 字符串的长度；</p></li><li><p>约束条件，区间里面的字符的统计个数必须相等。</p></li></ul><p>如果现在我们直接套用模板，并且直接用数组来统计字符个数。就可以写出如下代码了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkInclusion</span><span style="color:#E1E4E8;">(String A, String B) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// B contains A的任意排列？</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> blen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> B </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> B.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 统计A字符串里面各个字符的出现次数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] astat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    astat[A.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i)]</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 统计B字符串里面的子串的字符的出现次数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] bstat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 滑动窗口的左边起始点，我们使用(left, i]来表示这个</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定长区间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> blen; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// DONE 修改区间的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    Character c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> B.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    bstat[c]</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果窗口还太小，此时不满足定长的条件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// assert 此时(left, i]长度必然等于windowSize</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// DONE 判断区间的状态是否满足约束</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> same </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> same; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      same </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> astat[j] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> bstat[j];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (same)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 移除滑动窗口的尾巴!</span></span>
<span class="line"><span style="color:#E1E4E8;">    left</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    bstat[B.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(left)]</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkInclusion</span><span style="color:#24292E;">(String A, String B) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// B contains A的任意排列？</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> blen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> B </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> B.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 统计A字符串里面各个字符的出现次数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] astat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    astat[A.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i)]</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 统计B字符串里面的子串的字符的出现次数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] bstat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 滑动窗口的左边起始点，我们使用(left, i]来表示这个</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定长区间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> blen; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// DONE 修改区间的状态</span></span>
<span class="line"><span style="color:#24292E;">    Character c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> B.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    bstat[c]</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果窗口还太小，此时不满足定长的条件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// assert 此时(left, i]长度必然等于windowSize</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// DONE 判断区间的状态是否满足约束</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> same </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">256</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> same; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      same </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> astat[j] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> bstat[j];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (same)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 移除滑动窗口的尾巴!</span></span>
<span class="line"><span style="color:#24292E;">    left</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    bstat[B.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(left)]</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们发现，套用模板还是挺好求解的。不过这里面还有一个小问题，在对比统计结果的时候，我们采用的方式比较暴力，总是遍历了统计结果里面的每一项。那么有没有更好的办法呢？</p><p>不难发现，需要比较的 astat 与 bstat，其中 A 字符串的统计结果<strong>astat 是固定不变的</strong> 。并且 bstat 里面的统计结果，每次<strong>仅有一项会发生增减 1</strong>的情况。那么我们可以采用这种办法：</p><ul><li><p>equal = 0，表示一开始只有 0 项字符的统计结果是相等的；</p></li><li><p>当 bstat[x]++ 之后。如果发现 bstat[x] == astat[x]，那么证明其中又有一个字符的统计结果满足要求了，equal ++；</p></li><li><p>如果发现 equal 等于需要统计的字符个数，那么就得到了一个正确的解；</p></li><li><p>在滑动窗口的尾巴移除之前，如果 bstat[x] == astat[x]，那么说明我们要把一个统计结果相等的字符给删除掉，equal--。</p></li></ul><p>为了方便你记忆，我把这四个办法总结为一句话，<strong>那就是：&quot;刚好等于 astat[x] 时进行增/减&quot;</strong>。这样我们就可以写出更加高效的代码了，不需要再去逐个对比统计结果里面的每一项是否相等。</p><p>【<strong>代码</strong>】最终优化后的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 统计类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> astatashMap&lt;</span><span style="color:#F97583;">Character</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Character </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Character </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(k, </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> v);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(k);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkInclusion</span><span style="color:#E1E4E8;">(String A, String B) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// B contains A?</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> blen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> B </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> B.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 统计A字符串里面每个字符的出现次数。</span></span>
<span class="line"><span style="color:#E1E4E8;">  Counter astat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    astat.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(A.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 统计B字符串里面每个字符的出现次数。</span></span>
<span class="line"><span style="color:#E1E4E8;">  Counter bstat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 比较bstat与astat，有多少个字符的统计结果已经是相等的。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> equal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> blen; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将B[i]添加到区间中</span></span>
<span class="line"><span style="color:#E1E4E8;">    Character c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> B.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新区间的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    bstat.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(c, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新两个计数器相等的计数项的个数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bstat.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(c) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> astat.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(c)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      equal</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果窗口太小</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// assert 此时(left, i]长度必然等于windowSize</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// DONE 判断区间的状态是否满足约</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (equal </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> astat.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 移除滑动窗口的尾巴!</span></span>
<span class="line"><span style="color:#E1E4E8;">    left</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更新移动后的区间的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    Character rm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> B.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(left);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bstat.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(rm) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> astat.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(rm)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      equal</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    bstat.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(rm, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 统计类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> astatashMap&lt;</span><span style="color:#D73A49;">Character</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Character </span><span style="color:#E36209;">k</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(Character </span><span style="color:#E36209;">k</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(k, </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> v);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(k);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkInclusion</span><span style="color:#24292E;">(String A, String B) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// B contains A?</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> blen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> B </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> B.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 统计A字符串里面每个字符的出现次数。</span></span>
<span class="line"><span style="color:#24292E;">  Counter astat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    astat.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(A.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 统计B字符串里面每个字符的出现次数。</span></span>
<span class="line"><span style="color:#24292E;">  Counter bstat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 比较bstat与astat，有多少个字符的统计结果已经是相等的。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> equal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> blen; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将B[i]添加到区间中</span></span>
<span class="line"><span style="color:#24292E;">    Character c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> B.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新区间的状态</span></span>
<span class="line"><span style="color:#24292E;">    bstat.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(c, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新两个计数器相等的计数项的个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bstat.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(c) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> astat.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(c)) {</span></span>
<span class="line"><span style="color:#24292E;">      equal</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果窗口太小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// assert 此时(left, i]长度必然等于windowSize</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// DONE 判断区间的状态是否满足约</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (equal </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> astat.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 移除滑动窗口的尾巴!</span></span>
<span class="line"><span style="color:#24292E;">    left</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 更新移动后的区间的状态</span></span>
<span class="line"><span style="color:#24292E;">    Character rm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> B.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(left);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bstat.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(rm) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> astat.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(rm)) {</span></span>
<span class="line"><span style="color:#24292E;">      equal</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    bstat.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(rm, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N)，空间复杂度 O(1)。由于字符个数是固定的 256 个。虽然使用了哈希表，但是占用的空间是固定的。因此，空间复杂度为 O(1)。</p><p>【<strong>小结</strong>】接下来我们看一下定长区间的知识结构：</p>`,27),v=p('<p>通过上图的总结我们可以发现：<strong>定长区间的核心问题就是关注区间状态的表达</strong> 。所以，这道题目的<strong>考点</strong>也非常明确：</p><ul><li><p>如何用统计的办法来表达区间的状态</p></li><li><p>如何验证两个哈希表是否相等</p></li></ul><p>这里我再给你留个小练习，不要偷懒，一定要尝试自己解答！</p><p><strong>练习题 7</strong>：在例 3 中我们使用了哈希表来处理字符的统计，主要是为了 Counter 类的通用性。由于字符只有 256 个。你能用数组来加速这个算法吗？</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.array.hash.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>接下来我们看一下这道题目的一个变形。</p><h4 id="例-4-定长子串-2" tabindex="-1">例 4: 定长子串 2 <a class="header-anchor" href="#例-4-定长子串-2" aria-label="Permalink to &quot;例 4: 定长子串 2&quot;">​</a></h4><p>【<strong>题目</strong>】给定一个字符串 s，以及一个相同长度的单词列表。请找到所有的子串，这些子串必须包含列表中所有的单词（单词的顺序可以乱）。所有符合要求的子串的起始位置。</p><p>输入：s = &quot;AABBCCBBAA&quot;, D = {&quot;AA&quot;, &quot;BB&quot;};</p><p>输出：[0, 6]</p><p><strong>解释</strong>：在 s 字符串中，以下标 0 和下标 6 起始的子串 &quot;AABB&quot;, &quot;BBAA&quot; 符合要求。</p><p>【<strong>分析</strong>】每个单词的长度是固定的，设为 L，那么需要把 s 按长度 L 进行切分。那么当 L = 2 的时候，切分方式可以如下：</p>',12),T=l("p",null,[s("其他的切分方式都是这两种切分方式的子集。更进一步，我们可以有如下"),l("strong",null,"切分结论"),s("：字符串 s 要按固定长度 L 切分时，只有 L 种切分方式。")],-1),x=l("p",null,"不同的切分方式，就好像生成了不同的数组一样，如下图所示：",-1),w=p(`<p>这个操作代码可以写成如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; start </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> L; start</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这里开始遍历</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 数组0. [&quot;AA&quot;, &quot;BB&quot;, &quot;CC&quot;, &quot;BB&quot;, &quot;AA&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 数组1. [&quot;AB&quot;, &quot;BC&quot;, &quot;CB&quot;, &quot;BA&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> L </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> L) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(i, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> L);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// tmp就是依次取出数组中的单词。</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; start </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> L; start</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这里开始遍历</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 数组0. [&quot;AA&quot;, &quot;BB&quot;, &quot;CC&quot;, &quot;BB&quot;, &quot;AA&quot;]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 数组1. [&quot;AB&quot;, &quot;BC&quot;, &quot;CB&quot;, &quot;BA&quot;]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> L </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> L) {</span></span>
<span class="line"><span style="color:#24292E;">    String tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(i, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> L);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// tmp就是依次取出数组中的单词。</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到此时，题目已经变成在 String[] 数组里面找一个子串，这个子串里面包含列表中所有的单词。这么一看，不就是我们前面学习过的例 3 吗。但是与例 3 不同的地方在于：</p><ul><li><p>这里表面上看是一个字符串 s，实际上是通过字符串 s 生成 L 个数组；</p></li><li><p>例 3 中需要统计的是单个的字符，而在这里需要统计的是单词。</p></li></ul><p>【<strong>代码</strong>】我们直接基于例 3，再加上一些代码（解析在注释里），就可以解决这道题了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashMap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(k, </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> v);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(k);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findSubstring</span><span style="color:#E1E4E8;">(String s, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] D) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Counter H </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> wordLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 统计字典中单词出现的次数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String w </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> D) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    wordLength </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> w.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    H.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(w, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; start </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> wordLength; start</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 切分点从start开始，相当于我们得到了一个新的数组。</span></span>
<span class="line"><span style="color:#E1E4E8;">    Counter R </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> wordLength;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> equalCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 有效的区间是(left, i]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> counter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> wordLength </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            i </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> wordLength) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 依次取出数组中的单词。</span></span>
<span class="line"><span style="color:#E1E4E8;">      String tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(i, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> wordLength);</span></span>
<span class="line"><span style="color:#E1E4E8;">      R.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(tmp, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (R.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(tmp) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(tmp)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        equalCount</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      counter</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果窗口太小</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (counter </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> D.length) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 到这里时，窗口的长度已经一样了</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 看一下命中率</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (equalCount </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(left </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> wordLength);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 移除开头的那个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">      left </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> wordLength;</span></span>
<span class="line"><span style="color:#E1E4E8;">      String rm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(left, left </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> wordLength);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (R.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(rm) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> H.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(rm)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        equalCount</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      R.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(rm, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">k</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">k</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(k, </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> v);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(k);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findSubstring</span><span style="color:#24292E;">(String s, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] D) {</span></span>
<span class="line"><span style="color:#24292E;">  Counter H </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> wordLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 统计字典中单词出现的次数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String w </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> D) {</span></span>
<span class="line"><span style="color:#24292E;">    wordLength </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> w.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    H.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(w, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; start </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> wordLength; start</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 切分点从start开始，相当于我们得到了一个新的数组。</span></span>
<span class="line"><span style="color:#24292E;">    Counter R </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> wordLength;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> equalCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 有效的区间是(left, i]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> wordLength </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            i </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> wordLength) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 依次取出数组中的单词。</span></span>
<span class="line"><span style="color:#24292E;">      String tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(i, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> wordLength);</span></span>
<span class="line"><span style="color:#24292E;">      R.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(tmp, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (R.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(tmp) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(tmp)) {</span></span>
<span class="line"><span style="color:#24292E;">        equalCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      counter</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果窗口太小</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (counter </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> D.length) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 到这里时，窗口的长度已经一样了</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 看一下命中率</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (equalCount </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(left </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> wordLength);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 移除开头的那个元素</span></span>
<span class="line"><span style="color:#24292E;">      left </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> wordLength;</span></span>
<span class="line"><span style="color:#24292E;">      String rm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(left, left </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> wordLength);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (R.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(rm) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> H.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(rm)) {</span></span>
<span class="line"><span style="color:#24292E;">        equalCount</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      R.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(rm, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/30.%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.fix.window.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/30.%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.fix.window.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/30.%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.fix.window.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：当单词固定长度为 L 的时候，一共会切分出 L 个数组。每个数组上的单词个数为 N/L，滑动窗口遍历单个数组时间复杂度是O(N/L)，所以最终时间复杂度为 O(N)。空间复杂度由于使用了哈希表，等价于单词的个数。</p><p>【<strong>小结</strong>】到这里，我们再总结一下这个题目的考点：</p>`,9),P=p(`<p>我们可以发现，在面试中，只要掌握上图中总结的三个知识点，就可以顺利地解决这道面试题。</p><p>接下来我们看一下最短区间问题。</p><h3 id="最短区间" tabindex="-1">最短区间 <a class="header-anchor" href="#最短区间" aria-label="Permalink to &quot;最短区间&quot;">​</a></h3><p>在区间问题中，还有一类区间问题。那就是求最短区间。这类面试题的特点也很明确：</p><ol><li><p>要求子串必须满足某个条件</p></li><li><p>要求子串的长度越小越好</p></li></ol><p>要特别注意的是，最短区间问题，也<strong>必须满足单调性</strong>。</p><h4 id="面试必杀技-2" tabindex="-1">面试必杀技 <a class="header-anchor" href="#面试必杀技-2" aria-label="Permalink to &quot;面试必杀技&quot;">​</a></h4><p>不过，在真正面试的时候，可没有那么多时间让你慢慢去证明，慢慢去推导。放心，我这里已经给你准备好了最短区间的面试必杀技，关键就两招：</p><ol><li><p><strong>两个指针</strong> ，left 指针和 right 指针，这两个指针形成的区间为 (left, right]，这里的开闭原则是<strong>左开右闭；</strong></p></li><li><p><strong>积极原则</strong>，如果把 left 指针当成一个人，那么这个人是非常积极的，他总是主动积极地破坏区间已经满足的条件。</p></li></ol><p>代码模板如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">minimalRange</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 子串的左边，采用左开右闭原则(left, i]表示一个子串</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 记录最短的子串的长度</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A.length </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意 在加入A[i]之前，(left, i-1]可能不满足条件!</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// step 2. TODO 更新区间的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (区间超出</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">满足条件) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(ans, i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// step 3. 移除A[++left];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// step 4. TODO 更新区间的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// assert ! 区间(left, i]到这里肯定不满足条件</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minimalRange</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 子串的左边，采用左开右闭原则(left, i]表示一个子串</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 记录最短的子串的长度</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A.length </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意 在加入A[i]之前，(left, i-1]可能不满足条件!</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// step 1. 直接将A[i]加到区间中，形成(left, i]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// step 2. TODO 更新区间的状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (区间超出</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">满足条件) {</span></span>
<span class="line"><span style="color:#24292E;">      ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(ans, i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// step 3. 移除A[++left];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// step 4. TODO 更新区间的状态</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// assert ! 区间(left, i]到这里肯定不满足条件</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意，这里需要与最长区间的代码模板进行对比。两者的差异部分在于里面的 while 循环处理逻辑不同。在最短区间求解时，当满足条件的时候，仍然需要在这个 while 里面进行处理。</p><p>比如我们仍然以数组 [1, 2, 0, 0, 1, 2, 3] 寻找等于 6 的最短子串为例，如下图所示：</p>`,13),j=p(`<p>当找到一个满足条件的解之后，我们开始不停地查看更短的子串，看看有没有更好的解，并且不停地更新最优解。最终可以得到最优解：长度为 3 的子串 [1, 2, 3]。</p><h4 id="例-5-最短子串" tabindex="-1">例 5：最短子串 <a class="header-anchor" href="#例-5-最短子串" aria-label="Permalink to &quot;例 5：最短子串&quot;">​</a></h4><p>【<strong>题目</strong>】求 A 字符串中的最短子串，要能够包含 B 字符串中的所有字符。</p><p>输入：A = &quot;AXCDEFCFCB&quot;, B = &quot;CBC&quot;</p><p>输出：4</p><p><strong>解释</strong>：因为 A 字符串有子串 &quot;CFCB&quot;，包含了 B 字符串的所有字符&quot;CBC&quot;。</p><p>【<strong>分析</strong> 】不知道你还有没有印象，&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6698&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 09 讲</a>&quot;中讲解关于二分搜索的练习题 5 时，我们也提到了这道题。不过现在我们要尝试使用复杂度更低的双指针来解决它。首先我们来看题目的特点。</p><ul><li><p>最短区间：题目要求一个最短的字符串。</p></li><li><p>约束条件：这个子串里面包含了 B 字符串的所有字符。</p></li><li><p>单调性：当区间变长时，包含的字符只会增加。</p></li></ul><p>如果用哈希表（也可以用数组）来记录 B 字符串中字符出现的次数，也同样用哈希表来记录 A 的子串中各个字符出现的次数。那么我们还需要面临的一个问题就是如何高效地比较两个哈希是否相等。</p><p>不过好在例 3 中我们已经学会了这一招，到这里就可以开始着手写代码了。</p><p>【<strong>代码</strong>】利用最短区间的代码模板以及判断哈希表相等的思路。我们可以写出代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String </span><span style="color:#B392F0;">minWindow</span><span style="color:#E1E4E8;">(String A, String B) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// A 中包含B中所有字符的最短子串。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 两个字符串的长度。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> blen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> B </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> B.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 统计B字符串里面字符出现的次数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] bstat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// items表示B字符串里面出现的字符的种类。类似于hash.size();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> items </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> blen; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    bstat[B.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i)]</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bstat[B.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i)] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      items</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 开始使用最短区间的模板</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用来记录子串里面字符出现的次数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] astat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">256</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用来判断两个哈希表中已经有多少项相等了。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> equal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> alen; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    astat[A.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i)]</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (astat[A.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i)] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> bstat[A.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i)]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      equal</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 积极原则，最短区间要主动破坏条件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (equal </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> items) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 更新最优解</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ans </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> left;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 移除最左端的元素，并且更新区间的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">left;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (astat[A.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(left)] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> bstat[A.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(left)]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        equal</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      astat[A.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(left)]</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> alen </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    A.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(start, start </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ans) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String </span><span style="color:#6F42C1;">minWindow</span><span style="color:#24292E;">(String A, String B) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// A 中包含B中所有字符的最短子串。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 两个字符串的长度。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> blen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> B </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> B.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 统计B字符串里面字符出现的次数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] bstat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// items表示B字符串里面出现的字符的种类。类似于hash.size();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> blen; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    bstat[B.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i)]</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bstat[B.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i)] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      items</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 开始使用最短区间的模板</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用来记录子串里面字符出现的次数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] astat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">256</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用来判断两个哈希表中已经有多少项相等了。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> equal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> alen; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    astat[A.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i)]</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (astat[A.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i)] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> bstat[A.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i)]) {</span></span>
<span class="line"><span style="color:#24292E;">      equal</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 积极原则，最短区间要主动破坏条件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (equal </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> items) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 更新最优解</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ans </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left) {</span></span>
<span class="line"><span style="color:#24292E;">        start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> left;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 移除最左端的元素，并且更新区间的状态</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">left;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (astat[A.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(left)] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> bstat[A.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(left)]) {</span></span>
<span class="line"><span style="color:#24292E;">        equal</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      astat[A.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(left)]</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> alen </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    A.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(start, start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ans) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度 O(N)，空间复杂度 O(1)，两个 256 长度的数组，可以认为是常量空间。</p><p>【<strong>小结</strong>】到这里，我们可以总结一下这个题目的考点：</p>`,15),S=p('<p>如果你能够在面试中清晰地理顺这三个考点，那么写出代码就不成问题了。</p><p>接下来我们看一个更加简单一点的练习题。</p><p><strong>练习题 8</strong>：给定一个正整数数组 A，求一个最短子串，其和大于等于正整数T。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲里面我们介绍了三种区间的解法，以及相应的模板，基本上覆盖了绝大部分双指针算法题。我们将这部分知识点做个简单的小结，如下图所示：</p>',6),O=l("h3",{id:"思考题",tabindex:"-1"},[s("思考题 "),l("a",{class:"header-anchor",href:"#思考题","aria-label":'Permalink to "思考题"'},"​")],-1),V=l("p",null,[s('这里我给你再留一道思考题：在"'),l("a",{href:"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6698&fileGuid=xxQTRXtVcqtHK6j8",target:"_blank",rel:"noreferrer"},"第 09 讲"),s('"中，我们可以利用二分搜索的办法解决一些最长子串、最短子串的题目。其根本原因是什么？练习题 6 不能使用双指针模板，那么二分搜索可以吗？')],-1),R=l("p",null,"希望你可以把思考写在留言区，我们一起讨论，如果看到有趣的想法，我也会做成加餐和大家分享。：）",-1),H=l("p",null,"关于双指针的知识我们就学到这里，并且有相应的代码模板。可是，并不是所有的问题都有模板可以套用的，接下来我们进入没有代码模板的算法类型。11｜贪心：这种思想，没有模板，如何才能掌握它？请和我一起踏上更加奇妙的算法旅程，记得按时来探险。",-1);function N(K,L,I,Q,X,G){const n=e("Image");return t(),c("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhT-Abjx2AAA8vUVJFPw202.png"}),s(),y,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhUaAau8tAAB0ktRDZ1k620.png"}),s(),i,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/02/CioPOWBkhU6AYF-_AAC-KaWKVKw163.png"}),s(),A,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/02/CioPOWBkhVOABOSlAACCwqTl-NM650.png"}),s(),F,D,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhVqAY6gsAACG8pko9yU592.png"}),s(),g,u,C,a(n,{alt:"1.gif",src:"https://s0.lgstatic.com/i/image6/M00/2C/02/CioPOWBkhWuAJBqhAAg8Mji53d0501.gif"}),s(),h,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhYaADxRBAABXMBkDfoQ967.png"}),s(),d,a(n,{alt:"2.gif",src:"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhZKAQoB0AAgbjm0tF6w084.gif"}),s(),B,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhaqAf1zwAABiSObaZeA356.png"}),s(),f,a(n,{alt:"3.gif",src:"https://s0.lgstatic.com/i/image6/M00/2C/03/CioPOWBkhbmARBwhAAn3-RHORc0122.gif"}),s(),b,a(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M01/2B/FA/Cgp9HWBkhciAT_0sAADFc6oIePE139.png"}),s(),_,a(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhdyAN1WxAAEbHio0cA8786.png"}),s(),m,a(n,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image6/M01/2B/FA/Cgp9HWBkheeAR-sCAADcf5wNUa0724.png"}),s(),k,a(n,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image6/M00/2C/03/CioPOWBkhe6AMvLuAAEIxUpEirg181.png"}),s(),q,a(n,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhgOACLehAACpKHyfg0E724.png"}),s(),v,a(n,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhhOAV3QYAAD_YpJTpAU095.png"}),s(),T,x,a(n,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhhmAZHlVAACMmgO8dAQ651.png"}),s(),w,a(n,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhiWAKqnXAACZ5oVzMVw160.png"}),s(),P,a(n,{alt:"Drawing 18.png",src:"https://s0.lgstatic.com/i/image6/M01/2B/FA/Cgp9HWBkhi6AJ0KbAAEVfXDQr3M350.png"}),s(),j,a(n,{alt:"Drawing 19.png",src:"https://s0.lgstatic.com/i/image6/M01/2B/FA/Cgp9HWBkhjyAbuTpAACpwX81ei4297.png"}),s(),S,a(n,{alt:"Drawing 20.png",src:"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhkWARgCNAAD_-oFBQLA198.png"}),s(),O,V,R,H])}const J=o(r,[["render",N]]);export{W as __pageData,J as default};
