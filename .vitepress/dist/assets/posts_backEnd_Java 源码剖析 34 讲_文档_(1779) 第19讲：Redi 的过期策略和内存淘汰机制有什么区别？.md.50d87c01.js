import{_ as p,j as o,o as e,g as t,k as a,h as l,Q as s}from"./chunks/framework.4e7d56ce.js";const g=JSON.parse('{"title":"第19讲：Redi的过期策略和内存淘汰机制有什么区别？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1779) 第19讲：Redi 的过期策略和内存淘汰机制有什么区别？.md","filePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1779) 第19讲：Redi 的过期策略和内存淘汰机制有什么区别？.md","lastUpdated":1696417798000}'),c={name:"posts/backEnd/Java 源码剖析 34 讲_文档/(1779) 第19讲：Redi 的过期策略和内存淘汰机制有什么区别？.md"},r=s(`<h1 id="第19讲-redi的过期策略和内存淘汰机制有什么区别" tabindex="-1">第19讲：Redi的过期策略和内存淘汰机制有什么区别？ <a class="header-anchor" href="#第19讲-redi的过期策略和内存淘汰机制有什么区别" aria-label="Permalink to &quot;第19讲：Redi的过期策略和内存淘汰机制有什么区别？&quot;">​</a></h1><p>Redis 和 MySQL 是面试绕不过的两座大山，他们一个是关系型数据库的代表（MySQL），一个是键值数据库以及缓存中间件的一哥。尤其 Redis 几乎是所有互联网公司都在用的技术，比如国内的 BATJ、新浪、360、小米等公司；国外的微软、Twitter、Stack Overflow、GitHub、暴雪等公司。我从业了十几年，就职过 4、5 家公司，有的公司用 MySQL、有的用 SQL Server、甚至还有的用 Oracle 和 DB2，但缓存无一例外使用的都是 Redis，从某种程度上来讲 Redis 是普及率最高的技术，没有之一。</p><p>我们本课时的面试题是，Redis 是如何处理过期数据的？当内存不够用时 Redis 又是如何处理的？</p><h3 id="典型回答" tabindex="-1">典型回答 <a class="header-anchor" href="#典型回答" aria-label="Permalink to &quot;典型回答&quot;">​</a></h3><p>我们在新增 Redis 缓存时可以设置缓存的过期时间，该时间保证了数据在规定的时间内失效，可以借助这个特性来实现很多功能。比如，存储一定天数的用户（登录）会话信息，这样在一定范围内用户不用重复登录了，但为了安全性，需要在一定时间之后重新验证用户的信息。因此，我们可以使用 Redis 设置过期时间来存储用户的会话信息。</p><p>对于已经过期的数据，Redis 将使用两种策略来删除这些过期键，它们分别是<strong>惰性删除</strong> 和<strong>定期删除</strong>。</p><p><strong>惰性删除</strong>是指 Redis 服务器不主动删除过期的键值，而是当访问键值时，再检查当前的键值是否过期，如果过期则执行删除并返回 null 给客户端；如果没过期则正常返回值信息给客户端。</p><p>它的优点是不会浪费太多的系统资源，只是在每次访问时才检查键值是否过期。缺点是删除过期键不及时，造成了一定的空间浪费。</p><p>惰性删除的源码位于 src/db.c 文件的 expireIfNeeded 方法中，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expireIfNeeded</span><span style="color:#E1E4E8;">(redisDb </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">db, robj </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断键是否过期</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">keyIsExpired</span><span style="color:#E1E4E8;">(db,key)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (server.masterhost </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> NULL) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 删除过期键 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 增加过期键个数</span></span>
<span class="line"><span style="color:#E1E4E8;">    server.stat_expiredkeys</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 传播键过期的消息</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">propagateExpire</span><span style="color:#E1E4E8;">(db,key,server.lazyfree_lazy_expire);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">notifyKeyspaceEvent</span><span style="color:#E1E4E8;">(NOTIFY_EXPIRED,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;expired&quot;</span><span style="color:#E1E4E8;">,key,db</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// server.lazyfree_lazy_expire 为 1 表示异步删除，否则则为同步删除</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> server.lazyfree_lazy_expire </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dbAsyncDelete</span><span style="color:#E1E4E8;">(db,key) </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                                         </span><span style="color:#B392F0;">dbSyncDelete</span><span style="color:#E1E4E8;">(db,key);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 判断键是否过期</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyIsExpired</span><span style="color:#E1E4E8;">(redisDb </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">db, robj </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mstime_t when </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExpire</span><span style="color:#E1E4E8;">(db,key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (when </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (server.loading) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    mstime_t now </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.lua_caller </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> server.lua_time_start </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mstime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> now </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> when;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取键的过期时间</span></span>
<span class="line"><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getExpire</span><span style="color:#E1E4E8;">(redisDb </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">db, robj </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    dictEntry </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">de;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">dictSize</span><span style="color:#E1E4E8;">(db</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">expires) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">       (de </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dictFind</span><span style="color:#E1E4E8;">(db</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">expires,key</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">ptr)) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> NULL) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">serverAssertWithInfo</span><span style="color:#E1E4E8;">(NULL,key,</span><span style="color:#B392F0;">dictFind</span><span style="color:#E1E4E8;">(db</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">dict,key</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">ptr) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> NULL);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dictGetSignedIntegerVal</span><span style="color:#E1E4E8;">(de);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expireIfNeeded</span><span style="color:#24292E;">(redisDb </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">db, robj </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">key) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断键是否过期</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">keyIsExpired</span><span style="color:#24292E;">(db,key)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (server.masterhost </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> NULL) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 删除过期键 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 增加过期键个数</span></span>
<span class="line"><span style="color:#24292E;">    server.stat_expiredkeys</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 传播键过期的消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">propagateExpire</span><span style="color:#24292E;">(db,key,server.lazyfree_lazy_expire);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">notifyKeyspaceEvent</span><span style="color:#24292E;">(NOTIFY_EXPIRED,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;expired&quot;</span><span style="color:#24292E;">,key,db</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">id);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// server.lazyfree_lazy_expire 为 1 表示异步删除，否则则为同步删除</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> server.lazyfree_lazy_expire </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dbAsyncDelete</span><span style="color:#24292E;">(db,key) </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                                         </span><span style="color:#6F42C1;">dbSyncDelete</span><span style="color:#24292E;">(db,key);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 判断键是否过期</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyIsExpired</span><span style="color:#24292E;">(redisDb </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">db, robj </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">key) {</span></span>
<span class="line"><span style="color:#24292E;">    mstime_t when </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExpire</span><span style="color:#24292E;">(db,key);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (when </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (server.loading) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    mstime_t now </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.lua_caller </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> server.lua_time_start </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mstime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> now </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> when;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 获取键的过期时间</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExpire</span><span style="color:#24292E;">(redisDb </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">db, robj </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">key) {</span></span>
<span class="line"><span style="color:#24292E;">    dictEntry </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">de;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">dictSize</span><span style="color:#24292E;">(db</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">expires) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">       (de </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dictFind</span><span style="color:#24292E;">(db</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">expires,key</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">ptr)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> NULL) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">serverAssertWithInfo</span><span style="color:#24292E;">(NULL,key,</span><span style="color:#6F42C1;">dictFind</span><span style="color:#24292E;">(db</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">dict,key</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">ptr) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> NULL);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dictGetSignedIntegerVal</span><span style="color:#24292E;">(de);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>惰性删除的执行流程如下图所示：</p>`,11),E=s(`<p>除了惰性删除之外，Redis 还提供了定期删除功能以弥补惰性删除的不足。</p><p>定期删除是指 Redis 服务器每隔一段时间会检查一下数据库，看看是否有过期键可以被清除。</p><p>默认情况下 Redis 定期检查的频率是每秒扫描 10 次，用于定期清除过期键。当然此值还可以通过配置文件进行设置，在 redis.conf 中修改配置&quot;hz&quot;即可，默认的值为&quot;hz 10&quot;。</p><blockquote><p>小贴士：定期删除的扫描并不是遍历所有的键值对，这样的话比较费时且太消耗系统资源。Redis 服务器采用的是随机抽取形式，每次从过期字典中，取出 20 个键进行过期检测，过期字典中存储的是所有设置了过期时间的键值对。如果这批随机检查的数据中有 25% 的比例过期，那么会再抽取 20 个随机键值进行检测和删除，并且会循环执行这个流程，直到抽取的这批数据中过期键值小于 25%，此次检测才算完成。</p></blockquote><p>定期删除的源码在 expire.c 文件的 activeExpireCycle 方法中，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">activeExpireCycle</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> unsigned </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> current_db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">/* 上次定期删除遍历到的数据库ID */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timelimit_exit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;      </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> last_fast_cycle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">/* 上次执行定期删除的时间点 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j, iteration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> dbs_per_call </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CRON_DBS_PER_CALL; </span><span style="color:#6A737D;">// 需要遍历数据库的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ustime</span><span style="color:#E1E4E8;">(), timelimit, elapsed;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">clientsArePaused</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> ACTIVE_EXPIRE_CYCLE_FAST) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">timelimit_exit) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ACTIVE_EXPIRE_CYCLE_FAST_DURATION 快速定期删除的执行时长</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (start </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> last_fast_cycle </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ACTIVE_EXPIRE_CYCLE_FAST_DURATION</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        last_fast_cycle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (dbs_per_call </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> server.dbnum </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> timelimit_exit)</span></span>
<span class="line"><span style="color:#E1E4E8;">        dbs_per_call </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.dbnum;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 慢速定期删除的执行时长</span></span>
<span class="line"><span style="color:#E1E4E8;">    timelimit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000000</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">server.hz</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    timelimit_exit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (timelimit </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) timelimit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> ACTIVE_EXPIRE_CYCLE_FAST)</span></span>
<span class="line"><span style="color:#E1E4E8;">        timelimit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ACTIVE_EXPIRE_CYCLE_FAST_DURATION; </span><span style="color:#6A737D;">/* 删除操作花费的时间 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> total_sampled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> total_expired </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> dbs_per_call </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> timelimit_exit </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> expired;</span></span>
<span class="line"><span style="color:#E1E4E8;">        redisDb </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.db</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">(current_db </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> server.dbnum);</span></span>
<span class="line"><span style="color:#E1E4E8;">        current_db</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// .......</span></span>
<span class="line"><span style="color:#E1E4E8;">            expired </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            ttl_sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            ttl_samples </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 每个数据库中检查的键的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (num </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP)</span></span>
<span class="line"><span style="color:#E1E4E8;">                num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 从数据库中随机选取 num 个键进行检查</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (num</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                dictEntry </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">de;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> ttl;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((de </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dictGetRandomKey</span><span style="color:#E1E4E8;">(db</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">expires)) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> NULL) </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                ttl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dictGetSignedInteger</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 过期检查，并对过期键进行删除</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">activeExpireCycleTryExpire</span><span style="color:#E1E4E8;">(db,de,now)) expired</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ttl </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ttl_sum </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> ttl;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ttl_samples</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                total_sampled</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            total_expired </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> expired;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ttl_samples) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> avg_ttl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ttl_sum</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">ttl_samples;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (db</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">avg_ttl </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) db</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">avg_ttl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> avg_ttl;</span></span>
<span class="line"><span style="color:#E1E4E8;">                db</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">avg_ttl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (db</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">avg_ttl</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (avg_ttl</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((iteration </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xf</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">/* check once every 16 iterations. */</span></span>
<span class="line"><span style="color:#E1E4E8;">                elapsed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ustime</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">start;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (elapsed </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> timelimit) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    timelimit_exit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    server.stat_expired_time_cap_reached_count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">/* 判断过期键删除数量是否超过 25% */</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (expired </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// .......</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">activeExpireCycle</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> unsigned </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> current_db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">/* 上次定期删除遍历到的数据库ID */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timelimit_exit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;      </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> last_fast_cycle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">/* 上次执行定期删除的时间点 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j, iteration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> dbs_per_call </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CRON_DBS_PER_CALL; </span><span style="color:#6A737D;">// 需要遍历数据库的数量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ustime</span><span style="color:#24292E;">(), timelimit, elapsed;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">clientsArePaused</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ACTIVE_EXPIRE_CYCLE_FAST) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">timelimit_exit) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ACTIVE_EXPIRE_CYCLE_FAST_DURATION 快速定期删除的执行时长</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> last_fast_cycle </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ACTIVE_EXPIRE_CYCLE_FAST_DURATION</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        last_fast_cycle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (dbs_per_call </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> server.dbnum </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> timelimit_exit)</span></span>
<span class="line"><span style="color:#24292E;">        dbs_per_call </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.dbnum;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 慢速定期删除的执行时长</span></span>
<span class="line"><span style="color:#24292E;">    timelimit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000000</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">server.hz</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    timelimit_exit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (timelimit </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) timelimit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ACTIVE_EXPIRE_CYCLE_FAST)</span></span>
<span class="line"><span style="color:#24292E;">        timelimit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ACTIVE_EXPIRE_CYCLE_FAST_DURATION; </span><span style="color:#6A737D;">/* 删除操作花费的时间 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> total_sampled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> total_expired </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> dbs_per_call </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> timelimit_exit </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> expired;</span></span>
<span class="line"><span style="color:#24292E;">        redisDb </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.db</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">(current_db </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> server.dbnum);</span></span>
<span class="line"><span style="color:#24292E;">        current_db</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// .......</span></span>
<span class="line"><span style="color:#24292E;">            expired </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            ttl_sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            ttl_samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 每个数据库中检查的键的数量</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (num </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP)</span></span>
<span class="line"><span style="color:#24292E;">                num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 从数据库中随机选取 num 个键进行检查</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (num</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                dictEntry </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">de;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> ttl;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((de </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dictGetRandomKey</span><span style="color:#24292E;">(db</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">expires)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> NULL) </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                ttl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dictGetSignedInteger</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 过期检查，并对过期键进行删除</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">activeExpireCycleTryExpire</span><span style="color:#24292E;">(db,de,now)) expired</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ttl </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    ttl_sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> ttl;</span></span>
<span class="line"><span style="color:#24292E;">                    ttl_samples</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                total_sampled</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            total_expired </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> expired;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ttl_samples) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> avg_ttl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ttl_sum</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ttl_samples;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (db</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">avg_ttl </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) db</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">avg_ttl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> avg_ttl;</span></span>
<span class="line"><span style="color:#24292E;">                db</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">avg_ttl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (db</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">avg_ttl</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">49</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (avg_ttl</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((iteration </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xf</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">/* check once every 16 iterations. */</span></span>
<span class="line"><span style="color:#24292E;">                elapsed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ustime</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">start;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (elapsed </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> timelimit) {</span></span>
<span class="line"><span style="color:#24292E;">                    timelimit_exit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    server.stat_expired_time_cap_reached_count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">/* 判断过期键删除数量是否超过 25% */</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (expired </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// .......</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>定期删除的执行流程，如下图所示：</p>`,7),y=s(`<blockquote><p>小贴士：Redis 服务器为了保证过期删除策略不会导致线程卡死，会给过期扫描增加了最大执行时间为 25ms。</p></blockquote><p>以上是 Redis 服务器对待过期键的处理方案，当 Redis 的内存超过最大允许的内存之后，Redis 会触发内存淘汰策略，这和过期策略是完全不同的两个概念，经常有人把二者搞混，这两者一个是在正常情况下清除过期键，一个是在非正常情况下为了保证 Redis 顺利运行的保护策略。</p><p>当 Redis 内存不够用时，Redis 服务器会根据服务器设置的淘汰策略，删除一些不常用的数据，以保证 Redis 服务器的顺利运行。</p><h3 id="考点分析" tabindex="-1">考点分析 <a class="header-anchor" href="#考点分析" aria-label="Permalink to &quot;考点分析&quot;">​</a></h3><p>本课时的面试题并非 Redis 的入门级面试题，需要面试者对 Redis 有一定的了解才能对答如流，并且 Redis 的过期淘汰策略和内存淘汰策略的概念比较类似，都是用于淘汰数据的。因此很多人会把二者当成一回事，但其实并不是，这个面试者特别注意一下，和此知识点相关的面试题还有以下这些：</p><ul><li>Redis 内存淘汰策略有哪些？</li><li>Redis 有哪些内存淘汰算法？</li></ul><h3 id="知识扩展" tabindex="-1">知识扩展 <a class="header-anchor" href="#知识扩展" aria-label="Permalink to &quot;知识扩展&quot;">​</a></h3><h4 id="redis-内存淘汰策略" tabindex="-1">Redis 内存淘汰策略 <a class="header-anchor" href="#redis-内存淘汰策略" aria-label="Permalink to &quot;Redis 内存淘汰策略&quot;">​</a></h4><p>我们可以使用 config get maxmemory-policy 命令，来查看当前 Redis 的内存淘汰策略，示例代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">127.0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">6379</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> config get maxmemory</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">policy</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;maxmemory-policy&quot;</span></span>
<span class="line"><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">&quot;noeviction&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">6379</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> config get maxmemory</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">policy</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;maxmemory-policy&quot;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#032F62;">&quot;noeviction&quot;</span></span></code></pre></div><p>从上面的结果可以看出，当前 Redis 服务器设置的是&quot;noeviction&quot;类型的内存淘汰策略，那么这表示什么含义呢？Redis 又有几种内存淘汰策略呢？</p><p>在 4.0 版本之前 Redis 的内存淘汰策略有以下 6 种。</p><ul><li>noeviction：不淘汰任何数据，当内存不足时，执行缓存新增操作会报错，它是 Redis 默认内存淘汰策略。</li><li>allkeys-lru：淘汰整个键值中最久未使用的键值。</li><li>allkeys-random：随机淘汰任意键值。</li><li>volatile-lru：淘汰所有设置了过期时间的键值中最久未使用的键值。</li><li>volatile-random：随机淘汰设置了过期时间的任意键值。</li><li>volatile-ttl：优先淘汰更早过期的键值。</li></ul><p>可以看出我们上面示例使用的是 Redis 默认的内存淘汰策略&quot;noeviction&quot;。</p><p>而在 Redis 4.0 版本中又新增了 2 种淘汰策略：</p><ul><li>volatile-lfu，淘汰所有设置了过期时间的键值中最少使用的键值；</li><li>allkeys-lfu，淘汰整个键值中最少使用的键值。</li></ul><blockquote><p>小贴士：从以上内存淘汰策略中可以看出，allkeys-xxx 表示从所有的键值中淘汰数据，而 volatile-xxx 表示从设置了过期键的键值中淘汰数据。</p></blockquote><p>这个内存淘汰策略我们可以通过配置文件来修改，redis.conf 对应的配置项是&quot;maxmemory-policy noeviction&quot;，只需要把它修改成我们需要设置的类型即可。</p><p>需要注意的是，如果使用修改 redis.conf 的方式，当设置完成之后需要重启 Redis 服务器才能生效。</p><p>还有另一种简单的修改内存淘汰策略的方式，我们可以使用命令行工具输入&quot;config set maxmemory-policy noeviction&quot;来修改内存淘汰的策略，这种修改方式的好处是执行成功之后就会生效，无需重启 Redis 服务器。但它的坏处是不能持久化内存淘汰策略，每次重启 Redis 服务器之后设置的内存淘汰策略就会丢失。</p><h4 id="redis-内存淘汰算法" tabindex="-1">Redis 内存淘汰算法 <a class="header-anchor" href="#redis-内存淘汰算法" aria-label="Permalink to &quot;Redis 内存淘汰算法&quot;">​</a></h4><p>内存淘汰算法主要包含两种：LRU 淘汰算法和 LFU 淘汰算法。</p><p><strong>LRU</strong> （ Least Recently Used，最近最少使用）<strong>淘汰算法</strong>：是一种常用的页面置换算法，也就是说最久没有使用的缓存将会被淘汰。</p><p>LRU 是基于链表结构实现的，链表中的元素按照操作顺序从前往后排列，最新操作的键会被移动到表头，当需要进行内存淘汰时，只需要删除链表尾部的元素即可。</p><p>Redis 使用的是一种近似 LRU 算法，目的是为了更好的节约内存，它的实现方式是给现有的数据结构添加一个额外的字段，用于记录此键值的最后一次访问时间。Redis 内存淘汰时，会使用随机采样的方式来淘汰数据，它是随机取 5 个值 (此值可配置) ，然后淘汰最久没有使用的数据。</p><p><strong>LFU</strong> （Least Frequently Used，最不常用的）<strong>淘汰算法</strong>：最不常用的算法是根据总访问次数来淘汰数据的，它的核心思想是&quot;如果数据过去被访问多次，那么将来被访问的频率也更高&quot;。</p><p>LFU 相对来说比 LRU 更&quot;智能&quot;，因为它解决了使用频率很低的缓存，只是最近被访问了一次就不会被删除的问题。如果是使用 LRU 类似这种情况数据是不会被删除的，而使用 LFU 的话，这个数据就会被删除。</p><p>Redis 内存淘汰策略使用了 LFU 和近 LRU 的淘汰算法，具体使用哪种淘汰算法，要看服务器是如何设置内存淘汰策略的，也就是要看&quot;maxmemory-policy&quot;的值是如何设置的。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>本课时我们讲了 Redis 的过期删除策略：惰性删除 + 定期删除；还讲了 Redis 的内存淘汰策略，它和过期策略是完全不同的两个概念，内存淘汰策略是当内存不够用时才会触发的一种机制，它在 Redis 4.0 之后提供了 8 种内存淘汰策略，这些淘汰策略主要使用了近 LRU 淘汰算法和 LFU 淘汰算法。</p>`,30);function i(F,d,_,A,D,C){const n=o("Image");return e(),t("div",null,[r,a(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/08/B3/CgqCHl67XjqAPZOAAAA2gxqwspY599.png"}),l(),E,a(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/08/B3/Ciqc1F67Xl6ARsvYAADOQ1M6viA643.png"}),l(),y])}const u=p(c,[["render",i]]);export{g as __pageData,u as default};
