import{_ as l,j as n,o as p,g as s,k as t,h as e,Q as a,s as r}from"./chunks/framework.4e7d56ce.js";const q=JSON.parse('{"title":"09构建总览：前端构建工具的演进","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/104-前端工程化精讲文档/(4423) 09  构建总览：前端构建工具的演进.md","filePath":"posts/frontEnd/104-前端工程化精讲文档/(4423) 09  构建总览：前端构建工具的演进.md","lastUpdated":1696417798000}'),i={name:"posts/frontEnd/104-前端工程化精讲文档/(4423) 09  构建总览：前端构建工具的演进.md"},h=a("",12),m=r("p",null,"人们可以把代码包发布到 npm 中",-1),g=r("p",null,[e("2009 年 NodeJS 发布，这对前端开发领域产生了深远的影响。一方面，许多原先基于其他语言开发的工具包如今可以通过 NodeJS 来实现，并通过 npm（Node Package Manager，即 node 包管理器）来安装使用。大量的开发者开始将自己开发的工具包发布到 npm registry 上，"),r("a",{href:"https://blog.npmjs.org/post/156076312840/search-update",target:"_blank",rel:"noreferrer"},"包的数量"),e("在 2012 年初就达到了 6,000 个，而到 2014 年，数字已经上升到了 50,000 个。")],-1),u=r("p",null,[e("另一方面，安装到本地的依赖包在前端项目中如何引用开始受到关注。Twitter 发布的 Bower 旨在解决前端项目中的依赖安装和引用问题，其中一个问题是，在 npm 安装依赖的过程中会引入大量的子包，在早期版本（npm 3 之前）中会产生相同依赖包的大量重复拷贝，这在前端项目中会导致无谓的请求流量损耗。而 Bower 在安装依赖时则可以避免这类问题。然而随着更多模块化打包工具的诞生，它的优势逐渐被其他工具所取代。直到 2017 年，Bower 官方"),r("a",{href:"https://bower.io/blog/2017/how-to-migrate-away-from-bower/",target:"_blank",rel:"noreferrer"},"宣布废弃"),e("这个项目。")],-1),c=a("",22);function d(f,_,b,S,k,J){const o=n("Image");return p(),s("div",null,[h,t(o,{alt:"nodejs-npm-publish-730x340.png",src:"https://s0.lgstatic.com/i/image/M00/4B/8F/Ciqc1F9V55yAQ74HAADJqN1JZaM722.png"}),e(),m,g,u,t(o,{alt:"node_modules_hell.jpg",src:"https://s0.lgstatic.com/i/image/M00/4B/9A/CgqCHl9V58mAJ1qqAACUaxrD3X4489.jpg"}),e(),c])}const C=l(i,[["render",d]]);export{q as __pageData,C as default};
