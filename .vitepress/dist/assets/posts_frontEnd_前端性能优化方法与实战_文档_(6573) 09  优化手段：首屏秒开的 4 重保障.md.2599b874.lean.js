import{_ as n,j as p,o as l,g as o,k as e,h as t,Q as r,s}from"./chunks/framework.cfb14fe0.js";const P=JSON.parse('{"title":"09优化手段：首屏秒开的4重保障","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/前端性能优化方法与实战_文档/(6573) 09  优化手段：首屏秒开的 4 重保障.md","filePath":"posts/frontEnd/前端性能优化方法与实战_文档/(6573) 09  优化手段：首屏秒开的 4 重保障.md","lastUpdated":1696682708000}'),c={name:"posts/frontEnd/前端性能优化方法与实战_文档/(6573) 09  优化手段：首屏秒开的 4 重保障.md"},i=r("",33),E=s("p",null,"好了，以上就是解决首屏时间秒开的四种方案，在实际工作当中，前端工程师还会用到离线包和 SSR 。但 SSR 的实现比较重，要做的改造比较多，要求开发者对 node 生态有很好理解和把握，而离线包依赖于 App 端内的环境，对于端外和 PC 站不具有普适性。所以，这一讲我着重介绍了懒加载、缓存、离线化、并行化这四种具有普适性的优化方案，有关离线包和 SSR 我在后面也会有专门介绍。",-1),y=s("p",null,"最后，给你留一个思考题：",-1),d=s("blockquote",null,[s("p",null,"懒加载、缓存、离线化、并行化这四种方案分别解决性能加载过程中哪个瓶颈点的问题呢？")],-1),h=s("p",null,"欢迎你在留言区写下你的答案。接下来我们进入白屏 300ms 和界面流畅优化技巧部分。",-1);function _(u,g,F,m,b,A){const a=p("Image");return l(),o("div",null,[i,e(a,{alt:"溪风的思维导图09.png",src:"https://s0.lgstatic.com/i/image6/M00/20/67/CioPOWBTEEqAW2TlAALj45XMGvo157.png"}),t(),E,y,d,h])}const S=n(c,[["render",_]]);export{P as __pageData,S as default};
