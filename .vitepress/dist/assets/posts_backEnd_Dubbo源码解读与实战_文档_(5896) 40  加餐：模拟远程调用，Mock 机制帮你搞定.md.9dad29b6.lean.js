import{_ as p,j as e,o as c,g as t,k as l,h as n,s,Q as o}from"./chunks/framework.b3d8e22e.js";const M=JSON.parse('{"title":"MockClusterWrapper ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5896) 40  加餐：模拟远程调用，Mock 机制帮你搞定.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(5896) 40  加餐：模拟远程调用，Mock 机制帮你搞定.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Dubbo源码解读与实战_文档/(5896) 40  加餐：模拟远程调用，Mock 机制帮你搞定.md"},E=s("p",null,"你好，我是杨四正，今天我和你分享的主题是：Dubbo 中的 Mock 机制。",-1),y=s("p",null,[n("Mock 机制是 RPC 框架中非常常见、也非常有用的功能，"),s("strong",null,"不仅可以用来实现服务降级，还可以用来在测试中模拟调用的各种异常情况"),n("。Dubbo 中的 Mock 机制是在 Consumer 这一端实现的，具体来说就是在 Cluster 这一层实现的。")],-1),i=s("p",null,"在前面第 38 课时中，我们深入介绍了 Dubbo 提供的多种 Cluster 实现以及相关的 Cluster Invoker 实现，其中的 ZoneAwareClusterInvoker 就涉及了 MockClusterInvoker 的相关内容。本课时我们就来介绍 Dubbo 中 Mock 机制的全链路流程，不仅包括与 Cluster 接口相关的 MockClusterWrapper 和 MockClusterInvoker，我们还会回顾前面课程的 Router 和 Protocol 接口，分析它们与 Mock 机制相关的实现。",-1),k=s("h3",{id:"mockclusterwrapper",tabindex:"-1"},[n("MockClusterWrapper "),s("a",{class:"header-anchor",href:"#mockclusterwrapper","aria-label":'Permalink to "MockClusterWrapper"'},"​")],-1),F=s("p",null,[n("Cluster 接口有两条继承线（如下图所示）：一条线是 AbstractCluster 抽象类，这条继承线涉及的全部 Cluster 实现类我们已经在"),s("a",{href:"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=393#/detail/pc?id=5834",target:"_blank",rel:"noreferrer"},"第 37 课时"),n("中深入分析过了；另一条线是 MockClusterWrapper 这条线。")],-1),v=o("",14),u=o("",20);function A(D,m,C,g,d,I){const a=e("Image");return c(),t("div",null,[E,y,i,k,F,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/7E/53/Ciqc1F_PExSAAkePAABxACxNLzc156.png"}),n(),v,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/7E/5F/CgqCHl_PEyqAeilHAAAnrF4cOr8848.png"}),n(),u])}const B=p(r,[["render",A]]);export{M as __pageData,B as default};
