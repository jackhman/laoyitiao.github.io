import{_ as t,j as o,o as e,g as r,k as p,h as a,Q as l,s}from"./chunks/framework.4e7d56ce.js";const Z=JSON.parse('{"title":"17链路追踪：Zipkin如何进行分布式追踪？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/分布式链路追踪实战_文档/(4338) 17  链路追踪：Zipkin 如何进行分布式追踪？.md","filePath":"posts/backEnd/分布式链路追踪实战_文档/(4338) 17  链路追踪：Zipkin 如何进行分布式追踪？.md","lastUpdated":1696417798000}'),i={name:"posts/backEnd/分布式链路追踪实战_文档/(4338) 17  链路追踪：Zipkin 如何进行分布式追踪？.md"},c=l("",14),E=l("",19),g=l("",17),_=s("p",null,"在这张图中，我们可以清楚地看到请求时的详细数据。",-1),h=s("p",null,'请求头中除了基础的 Header 信息以外，还会有很多以 "X-B3" 开头的内容，比如TraceId、SpanId 等关键信息，就是经由 Zipkin 产生的链路上下文信息。',-1),d=s("h4",{id:"数据展示",tabindex:"-1"},[a("数据展示 "),s("a",{class:"header-anchor",href:"#数据展示","aria-label":'Permalink to "数据展示"'},"​")],-1),y=s("p",null,"我们来看一张相对简单的链路数据展示图。图中主要模拟就是如项目架构图中类似的 client 端发送请求，server 端接收请求的链路逻辑。",-1),u=s("p",null,"左侧部分展示的是 client 端接收到了上游的请求，然后交由 server 获取数据内容的链路信息。",-1),k=s("p",null,"右侧上半部分分别显示的是客户端发送、服务端接收、服务端处理结束、客户端获取到数据中每一个节点的时间关系。",-1),m=s("p",null,[a('右侧下半部分展示的是当前我们选中的 Span 的标签信息，和我在"'),s("strong",null,"10 链路分析：除了观测链路，还能做什么？"),a('"中所讲的自定义数据十分相似，在这里你可以通过自定义属性信息来完成信息的定制化。')],-1),C=s("h3",{id:"总结",tabindex:"-1"},[a("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),b=s("p",null,"我相信通过这篇文章的讲解，你对链路追踪系统有了一个完整的认识。你在进行性能调优或者分析问题时都是怎么样利用链路追踪的呢？欢迎你在留言区分享你的看法。",-1);function T(F,A,q,D,P,S){const n=o("Image");return e(),r("div",null,[c,p(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/56/DC/Ciqc1F9sMXOAKAomAAB5R_3zHyM553.png"}),a(),E,p(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/56/DD/Ciqc1F9sMZyAE2w1AAFoissS5jA558.png"}),a(),g,p(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/56/E8/CgqCHl9sMaqATYvXAADJK-NCV7U599.png"}),a(),_,h,d,y,p(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/56/DD/Ciqc1F9sMbOABg6OAAXsVfGd0-Q188.png"}),a(),u,k,m,C,b])}const v=t(i,[["render",T]]);export{Z as __pageData,v as default};
