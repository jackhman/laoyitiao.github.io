import{_ as p,j as o,o as e,g as t,k as n,s as a,h as c,Q as l}from"./chunks/framework.b3d8e22e.js";const w=JSON.parse('{"title":"微内核架构 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1729) 第09讲：SkyWalking Agent 启动流程剖析，领略微内核架构之美.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1729) 第09讲：SkyWalking Agent 启动流程剖析，领略微内核架构之美.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1729) 第09讲：SkyWalking Agent 启动流程剖析，领略微内核架构之美.md"},E=a("p",null,"通过此前 8 个课时的学习，相信你已经了解了 SkyWalking Agent 是通过 Java Agent 的方式随应用程序一起启动，然后通过 Byte Buddy 库动态插入埋点收集 Trace 信息。从本课时开始，我会带你深入研究 SkyWalking Agent 的架构、原理以及具体实现，还将深入分析 Tomcat、Dubbo、MySQL 等常用的插件。",-1),y=a("h3",{id:"微内核架构",tabindex:"-1"},[c("微内核架构 "),a("a",{class:"header-anchor",href:"#微内核架构","aria-label":'Permalink to "微内核架构"'},"​")],-1),i=a("p",null,"SkyWalking Agent 采用了微内核架构（Microkernel Architecture），那什么是微内核架构呢？微内核架构也被称为插件化架构（Plug-in Architecture），是一种面向功能进行拆分的可扩展性架构。在基于产品的应用中通常会使用微内核架构，例如，IDEA、Eclipse 这类 IDE 开发工具，内核都是非常精简的，对 Maven、Gradle 等新功能的支持都是以插件的形式增加的。",-1),g=a("p",null,"如下图所示，微内核架构分为核心系统和插件模块两大部分。",-1),d=l("",21),u=a("p",null,"完成解析之后，会通过 ConfigInitializer 工具类，将配置信息填充到 Config 中的静态字段中，具体填充规则如下：",-1),F=l("",24),A=l("",10),h=l("",4),C=l("",40),D=l("",7);function v(k,B,m,b,f,S){const s=o("Image");return e(),t("div",null,[E,y,i,g,n(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/53/Ciqah16FsIuAY29rAADXS1mP1qk235.png"}),d,n(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/69/Cgq2xl6FsIuAD9SEAAXN2BldzCw554.png"}),u,n(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/53/Ciqah16FsIuAMuWAAAGqpFKOkno592.png"}),F,n(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/69/Cgq2xl6FsIyAD1i3AAAs9sJ1s2Y631.png"}),A,n(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/69/Cgq2xl6FsIyAT0wmAAIua7pnGBg062.png"}),h,n(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/81/69/Cgq2xl6FsIyAbzszAAFwI9x3bVc197.png"}),C,n(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/08/53/Ciqah16FsIyAKF5JAAFCMa4LIHU953.png"}),D])}const P=p(r,[["render",v]]);export{w as __pageData,P as default};
