import{_ as p,j as e,o,g as t,k as n,h as l,Q as s}from"./chunks/framework.4e7d56ce.js";const b=JSON.parse('{"title":"13服务守护进程：如何在Kubernete中运行DaemonSet守护进程？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4530) 13  服务守护进程：如何在 Kubernete 中运行 DaemonSet 守护进程？.md","filePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4530) 13  服务守护进程：如何在 Kubernete 中运行 DaemonSet 守护进程？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4530) 13  服务守护进程：如何在 Kubernete 中运行 DaemonSet 守护进程？.md"},r=s('<h1 id="_13服务守护进程-如何在kubernete中运行daemonset守护进程" tabindex="-1">13服务守护进程：如何在Kubernete中运行DaemonSet守护进程？ <a class="header-anchor" href="#_13服务守护进程-如何在kubernete中运行daemonset守护进程" aria-label="Permalink to &quot;13服务守护进程：如何在Kubernete中运行DaemonSet守护进程？&quot;">​</a></h1><p>通过前面课程的学习，我们对 Kubernetes 中一些常见工作负载已经有所了解。比如无状态工作负载 Dployment 可以帮助我们运行指定数目的服务副本，并维护其状态，而对于有状态服务来说，我们同样可以采用 StatefulSet 来做到这一点。</p><p>但是，在实际使用的时候，有些场景，比如监控各个节点的状态，使用 Deployment 或者 StatefulSet 都无法满足我们的需求，因为这个时候我们可能会有以下这些需求。</p><ol><li><p>希望每个节点上都可以运行一个副本，且只运行一个副本。虽然通过调整 spec.replicas 的数值，可以使之等于节点数目，再配合一些调度策略（我们后面讲调度原理的时候会深入解释）可以实现这一点。但是如果节点数目发生了变化呢？</p></li><li><p>希望在新节点上也快速拉起副本。比如集群扩容，这个时候会有一些新节点加入进来，如何立即感知到这些节点，并在上面部署新的副本。</p></li><li><p>希望节点下线的时候，对应的 Pod 也可以被删除。</p></li><li><p>......</p></li></ol><p>Kubernetes 提供的 DaemonSet 就可以完美地解决上述问题，其主要目的就是可以在集群内的每个节点上（或者指定的一堆节点上）都只运行一个副本，即 Pod 和 Node 是一一对应的关系。DaemonSet 会结合节点的情况来帮助你管理这些 Pod，见下面的拓扑结构：</p>',5),E=s(`<p>今天我们就来学习一下 DaemonSet，先来看看其主要的使用场景。</p><h3 id="daemonset-的使用场景" tabindex="-1">DaemonSet 的使用场景 <a class="header-anchor" href="#daemonset-的使用场景" aria-label="Permalink to &quot;DaemonSet 的使用场景&quot;">​</a></h3><p>跟 Deployment 和 StatefulSet 一样，DaemonSet 也是一种工作负载，可以管理一些 Pod。 通常来说，主要有以下的用法：</p><ul><li><p>监控数据收集，比如可以将节点信息收集上报给 Prometheus；</p></li><li><p>日志的收集、轮转和清理；</p></li><li><p>监控节点状态，比如运行 node-problem-detector 来监测节点的状态，并上报给 APIServer；</p></li><li><p>负责在每个节点上网络、存储等组件的运行，比如 glusterd、ceph、flannel 等；</p></li></ul><p>现在我们来尝试部署一个 DaemonSet。</p><h3 id="部署你的第一个-daemonset" tabindex="-1">部署你的第一个 DaemonSet <a class="header-anchor" href="#部署你的第一个-daemonset" aria-label="Permalink to &quot;部署你的第一个 DaemonSet&quot;">​</a></h3><p>这里是一个 DaemonSet 的 YAML 文件：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">apiVersion: apps</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1 # 这个地方已经不是 extension</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1beta1 了，在1.</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">版本已经废弃了，请使用 apps</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1</span></span>
<span class="line"><span style="color:#E1E4E8;">kind: DaemonSet # 这个是类型名</span></span>
<span class="line"><span style="color:#E1E4E8;">metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch # 对象名</span></span>
<span class="line"><span style="color:#E1E4E8;">  namespace: kube</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">system # 所属的命名空间</span></span>
<span class="line"><span style="color:#E1E4E8;">  labels:</span></span>
<span class="line"><span style="color:#E1E4E8;">    k8s</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">logging</span></span>
<span class="line"><span style="color:#E1E4E8;">spec:</span></span>
<span class="line"><span style="color:#E1E4E8;">  selector:</span></span>
<span class="line"><span style="color:#E1E4E8;">    matchLabels:</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">  template:</span></span>
<span class="line"><span style="color:#E1E4E8;">    metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">      labels:</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">    spec:</span></span>
<span class="line"><span style="color:#E1E4E8;">      containers:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">        image: quay.io</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">fluentd_elasticsearch</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">fluentd:v2.</span><span style="color:#79B8FF;">5.2</span></span>
<span class="line"><span style="color:#E1E4E8;">        volumeMounts:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: varlog</span></span>
<span class="line"><span style="color:#E1E4E8;">          mountPath: </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">log</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: varlibdockercontainers</span></span>
<span class="line"><span style="color:#E1E4E8;">          mountPath: </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">docker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">containers</span></span>
<span class="line"><span style="color:#E1E4E8;">          readOnly: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      restartPolicy: Always</span></span>
<span class="line"><span style="color:#E1E4E8;">      volumes:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: varlog</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostPath:</span></span>
<span class="line"><span style="color:#E1E4E8;">          path: </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">log</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: varlibdockercontainers</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostPath:</span></span>
<span class="line"><span style="color:#E1E4E8;">          path: </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">docker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">containers</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">apiVersion: apps</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1 # 这个地方已经不是 extension</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1beta1 了，在1.</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">版本已经废弃了，请使用 apps</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1</span></span>
<span class="line"><span style="color:#24292E;">kind: DaemonSet # 这个是类型名</span></span>
<span class="line"><span style="color:#24292E;">metadata:</span></span>
<span class="line"><span style="color:#24292E;">  name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch # 对象名</span></span>
<span class="line"><span style="color:#24292E;">  namespace: kube</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">system # 所属的命名空间</span></span>
<span class="line"><span style="color:#24292E;">  labels:</span></span>
<span class="line"><span style="color:#24292E;">    k8s</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">logging</span></span>
<span class="line"><span style="color:#24292E;">spec:</span></span>
<span class="line"><span style="color:#24292E;">  selector:</span></span>
<span class="line"><span style="color:#24292E;">    matchLabels:</span></span>
<span class="line"><span style="color:#24292E;">      name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">  template:</span></span>
<span class="line"><span style="color:#24292E;">    metadata:</span></span>
<span class="line"><span style="color:#24292E;">      labels:</span></span>
<span class="line"><span style="color:#24292E;">        name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">    spec:</span></span>
<span class="line"><span style="color:#24292E;">      containers:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">        image: quay.io</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">fluentd_elasticsearch</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">fluentd:v2.</span><span style="color:#005CC5;">5.2</span></span>
<span class="line"><span style="color:#24292E;">        volumeMounts:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: varlog</span></span>
<span class="line"><span style="color:#24292E;">          mountPath: </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">log</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: varlibdockercontainers</span></span>
<span class="line"><span style="color:#24292E;">          mountPath: </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">docker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">containers</span></span>
<span class="line"><span style="color:#24292E;">          readOnly: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      restartPolicy: Always</span></span>
<span class="line"><span style="color:#24292E;">      volumes:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: varlog</span></span>
<span class="line"><span style="color:#24292E;">        hostPath:</span></span>
<span class="line"><span style="color:#24292E;">          path: </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">log</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: varlibdockercontainers</span></span>
<span class="line"><span style="color:#24292E;">        hostPath:</span></span>
<span class="line"><span style="color:#24292E;">          path: </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">docker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">containers</span></span></code></pre></div><p>在这个 YAML 文件里，我们有一个地方需要特别注意，就 <code>restartPolicy</code>这个字段，它是缺省字段，默认值是 <code>Always</code>。而且如果你想显式地去设置，你也只能设置为 <code>Always</code>。</p><p>其他的配置和写法，跟我们之前了解的 Deployment 和 StatefulSet 是类似的。</p><p>我们将上面 YAML 文件保存到本地的 <code>fluentd-elasticsearch-ds.yaml</code> 中，然后用 <code>kubectl apply</code>创建出来：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ kubectl apply </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">f fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ds.yaml</span></span>
<span class="line"><span style="color:#E1E4E8;">daemonset.apps</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch created</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ kubectl apply </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">f fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ds.yaml</span></span>
<span class="line"><span style="color:#24292E;">daemonset.apps</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch created</span></span></code></pre></div><p>创建好后，我们来查看这个 DaemonSet 关联 Pod 的情况：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ kubectl get pod </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n kube</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">system </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">l name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">NAME                          READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span style="color:#E1E4E8;">fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m9zjb   </span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">     Running   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">          85s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ kubectl get pod </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n kube</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">system </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">NAME                          READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span style="color:#24292E;">fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m9zjb   </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">     Running   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">          85s</span></span></code></pre></div><p>可以看到，集群中只有一个 Pod 被创建了出来。我们再来看看集群中有多少个节点：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ kubectl get node</span></span>
<span class="line"><span style="color:#E1E4E8;">NAME             STATUS   ROLES    AGE   VERSION</span></span>
<span class="line"><span style="color:#E1E4E8;">docker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">desktop   Ready    master   </span><span style="color:#79B8FF;">22d</span><span style="color:#E1E4E8;">   v1.</span><span style="color:#FDAEB7;font-style:italic;">16</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">6</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">beta.</span><span style="color:#FDAEB7;font-style:italic;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ kubectl get node</span></span>
<span class="line"><span style="color:#24292E;">NAME             STATUS   ROLES    AGE   VERSION</span></span>
<span class="line"><span style="color:#24292E;">docker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">desktop   Ready    master   </span><span style="color:#005CC5;">22d</span><span style="color:#24292E;">   v1.</span><span style="color:#B31D28;font-style:italic;">16</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">6</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">beta.</span><span style="color:#B31D28;font-style:italic;">0</span></span></code></pre></div><p>由于目前集群中就只有一个节点，所以 Kubernetes 只为这一个节点生成了 Pod。我们来查看下该 DaemonSet 的整体状态：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ kubectl get ds </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n kube</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">system fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">NAME                    DESIRED   CURRENT   READY   UP</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">TO</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">DATE   AVAILABLE   NODE SELECTOR   AGE</span></span>
<span class="line"><span style="color:#E1E4E8;">fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch   </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">none</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ kubectl get ds </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n kube</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">system fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">NAME                    DESIRED   CURRENT   READY   UP</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">TO</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">DATE   AVAILABLE   NODE SELECTOR   AGE</span></span>
<span class="line"><span style="color:#24292E;">fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch   </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">            </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">           </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">none</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">18</span></span></code></pre></div><p>在 kubectl 使用的时候，我们常常将<code>DaemonSet </code> 缩写成 ds。这里输出列表的含义如下：</p><p>DESIRED 代表该 DaemonSet 期望要创建的 Pod 个数，即我们需要几个，它跟节点数目息息相关；</p><ul><li><p><code>CURRENT</code>代表当前已经存在的 Pod 个数；</p></li><li><p><code>READY</code> 代表目前已就绪的 Pod 个数；</p></li><li><p><code>UP-TO-DATE</code> 代表最新创建的个数；</p></li><li><p><code>AVAILABLE </code> 代表目前可用的 Pod个数；</p></li><li><p><code>NODE SELECTOR</code>表示节点选择标签，这个在 DaemonSet 中非常有用。有时候我们只希望在部分节点上运行一些 Pod，比如我们只节点上带有 app=logging-node 的节点上运行一些服务，就可以通过这个标签选择器来实现。</p></li></ul><h4 id="限定-daemonset-运行的节点" tabindex="-1">限定 DaemonSet 运行的节点 <a class="header-anchor" href="#限定-daemonset-运行的节点" aria-label="Permalink to &quot;限定 DaemonSet 运行的节点&quot;">​</a></h4><p>现在我们来看看如何限定一个 DaemonSet，让其只在某些节点上运行，比如只在带有 <code>app=logging-node </code> 的节点上运行，可以看这张图：</p>`,23),y=s(`<p>此时，我们就可以通过 DaemonSet 的 selector 来实现：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">apiVersion: apps</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1</span></span>
<span class="line"><span style="color:#E1E4E8;">kind: DaemonSet</span></span>
<span class="line"><span style="color:#E1E4E8;">metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: my</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ds</span></span>
<span class="line"><span style="color:#E1E4E8;">  namespace: demo</span></span>
<span class="line"><span style="color:#E1E4E8;">  Labels:</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: value</span></span>
<span class="line"><span style="color:#E1E4E8;">spec:</span></span>
<span class="line"><span style="color:#E1E4E8;">  selector: # 通过这个 selector，我们就可以让 daemonset pod 只在指定的节点上运行</span></span>
<span class="line"><span style="color:#E1E4E8;">    matchLabels:</span></span>
<span class="line"><span style="color:#E1E4E8;">      app: logging</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">node</span></span>
<span class="line"><span style="color:#E1E4E8;">  template:</span></span>
<span class="line"><span style="color:#E1E4E8;">    metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">      labels:</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: my</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">daemonset</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">container</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">apiVersion: apps</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1</span></span>
<span class="line"><span style="color:#24292E;">kind: DaemonSet</span></span>
<span class="line"><span style="color:#24292E;">metadata:</span></span>
<span class="line"><span style="color:#24292E;">  name: my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">ds</span></span>
<span class="line"><span style="color:#24292E;">  namespace: demo</span></span>
<span class="line"><span style="color:#24292E;">  Labels:</span></span>
<span class="line"><span style="color:#24292E;">    key: value</span></span>
<span class="line"><span style="color:#24292E;">spec:</span></span>
<span class="line"><span style="color:#24292E;">  selector: # 通过这个 selector，我们就可以让 daemonset pod 只在指定的节点上运行</span></span>
<span class="line"><span style="color:#24292E;">    matchLabels:</span></span>
<span class="line"><span style="color:#24292E;">      app: logging</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">node</span></span>
<span class="line"><span style="color:#24292E;">  template:</span></span>
<span class="line"><span style="color:#24292E;">    metadata:</span></span>
<span class="line"><span style="color:#24292E;">      labels:</span></span>
<span class="line"><span style="color:#24292E;">        name: my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">daemonset</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">container</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span></code></pre></div><p>这样一个 DaemonSet 就会只匹配集群中所有带有标签 <code>app=logging-node</code> 的节点，并分别在这些节点上运行一个 Pod。</p><p>如果集群中节点的标签发生了变化，这个时候<code>DaemonSetsController</code>会立刻为新匹配上的节点创建 Pod，同时删除不匹配的节点上的 Pod。</p><p>知道了这些我们再来看如何调度。</p><h4 id="daemonset-的-pod-是如何被调度的" tabindex="-1">DaemonSet 的 Pod 是如何被调度的 <a class="header-anchor" href="#daemonset-的-pod-是如何被调度的" aria-label="Permalink to &quot;DaemonSet 的 Pod 是如何被调度的&quot;">​</a></h4><p>早期 Kubernetes 是通过<code>DaemonSetsController</code>（在 kube- controller-manager 组件内以 goroutine 方式运行）调度 DaemonSet 管理的 Pod，这些 Pod 在创建的时候，就在 Pod 的 spec 中提前指定了节点名称，即 <code>spec.nodeName</code>。这些 Pod 由于指定了节点，所以不会经过默认调度器进行调度，这就导致了一些问题。</p><ul><li><p>不一致的 Pod 行为：其他的 Pod 都是通过默认调度器进行调度的，初始状态都是 Pending（等待调度），而 DaemonSet 的这些 Pod 的起始状态却不是 Pending。</p></li><li><p><code>DaemonSetsController</code> 并不会感知到节点的资源变化；</p></li><li><p>默认调度器的一些高级特性需要在 、DaemonSetsController 中二次实现。</p></li><li><p>多组件负责调度会导致 Pod 抢占等功能实现起来非常困难；</p></li><li><p>...</p></li></ul><p>如果你有兴趣，你可以看看设计文档 <a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/schedule-DS-pod-by-scheduler.md" target="_blank" rel="noreferrer">Schedule DaemonSet Pods by default scheduler, not DaemonSet controller</a> ，它详细介绍了<code>DaemonSetsController </code> 调度时遇到的各种问题，并给出了详细的解决方案。</p><p>简单来说，DaemonSet Pod 依然由 <code>DaemonSetsController</code> 进行创建，但是不预先指定<code>spec.nodeName</code>了，而通过节点的亲和性，交由默认调度器进行调度。</p><p>我们回过头来看看上面<code>fluentd-elasticsearch</code>这个 DaemonSet 创建的 Pod：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ kubectl get pod </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n kube</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">system fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m9zjb </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">o yaml</span></span>
<span class="line"><span style="color:#E1E4E8;">apiVersion: v1</span></span>
<span class="line"><span style="color:#E1E4E8;">kind: Pod</span></span>
<span class="line"><span style="color:#E1E4E8;">metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">  creationTimestamp: </span><span style="color:#9ECBFF;">&quot;2020-09-25T12:01:31Z&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  generateName: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span><span style="color:#F97583;">-</span></span>
<span class="line"><span style="color:#E1E4E8;">  labels:</span></span>
<span class="line"><span style="color:#E1E4E8;">    controller</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">revision</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">hash: </span><span style="color:#FDAEB7;font-style:italic;">5b5b9c8855</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">    pod</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">generation: </span><span style="color:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m9zjb</span></span>
<span class="line"><span style="color:#E1E4E8;">  namespace: kube</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">system</span></span>
<span class="line"><span style="color:#E1E4E8;">  ownerReferences:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> apiVersion: apps</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    blockOwnerDeletion: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    controller: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    kind: DaemonSet</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">    uid: </span><span style="color:#FDAEB7;font-style:italic;">33dc29aa</span><span style="color:#F97583;">-</span><span style="color:#FDAEB7;font-style:italic;">60b0</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4486</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8645</span><span style="color:#F97583;">-</span><span style="color:#FDAEB7;font-style:italic;">731daa85f25d</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">spec:</span></span>
<span class="line"><span style="color:#E1E4E8;">  affinity:</span></span>
<span class="line"><span style="color:#E1E4E8;">    nodeAffinity: # daemonset 就是利用了 nodeAffinity 的能力</span></span>
<span class="line"><span style="color:#E1E4E8;">      requiredDuringSchedulingIgnoredDuringExecution:</span></span>
<span class="line"><span style="color:#E1E4E8;">        nodeSelectorTerms:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> matchFields:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> key: metadata.name</span></span>
<span class="line"><span style="color:#E1E4E8;">            operator: In</span></span>
<span class="line"><span style="color:#E1E4E8;">            values:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> docker</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">desktop</span></span>
<span class="line"><span style="color:#E1E4E8;">  containers:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> image: quay.io</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">fluentd_elasticsearch</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">fluentd:v2.</span><span style="color:#79B8FF;">5.2</span></span>
<span class="line"><span style="color:#E1E4E8;">    imagePullPolicy: IfNotPresent</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ kubectl get pod </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n kube</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">system fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m9zjb </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o yaml</span></span>
<span class="line"><span style="color:#24292E;">apiVersion: v1</span></span>
<span class="line"><span style="color:#24292E;">kind: Pod</span></span>
<span class="line"><span style="color:#24292E;">metadata:</span></span>
<span class="line"><span style="color:#24292E;">  creationTimestamp: </span><span style="color:#032F62;">&quot;2020-09-25T12:01:31Z&quot;</span></span>
<span class="line"><span style="color:#24292E;">  generateName: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#24292E;">  labels:</span></span>
<span class="line"><span style="color:#24292E;">    controller</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">revision</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">hash: </span><span style="color:#B31D28;font-style:italic;">5b5b9c8855</span></span>
<span class="line"><span style="color:#24292E;">    name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">    pod</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">generation: </span><span style="color:#032F62;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#24292E;">  name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m9zjb</span></span>
<span class="line"><span style="color:#24292E;">  namespace: kube</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">system</span></span>
<span class="line"><span style="color:#24292E;">  ownerReferences:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> apiVersion: apps</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1</span></span>
<span class="line"><span style="color:#24292E;">    blockOwnerDeletion: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    controller: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    kind: DaemonSet</span></span>
<span class="line"><span style="color:#24292E;">    name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">    uid: </span><span style="color:#B31D28;font-style:italic;">33dc29aa</span><span style="color:#D73A49;">-</span><span style="color:#B31D28;font-style:italic;">60b0</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4486</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8645</span><span style="color:#D73A49;">-</span><span style="color:#B31D28;font-style:italic;">731daa85f25d</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span>
<span class="line"><span style="color:#24292E;">spec:</span></span>
<span class="line"><span style="color:#24292E;">  affinity:</span></span>
<span class="line"><span style="color:#24292E;">    nodeAffinity: # daemonset 就是利用了 nodeAffinity 的能力</span></span>
<span class="line"><span style="color:#24292E;">      requiredDuringSchedulingIgnoredDuringExecution:</span></span>
<span class="line"><span style="color:#24292E;">        nodeSelectorTerms:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> matchFields:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> key: metadata.name</span></span>
<span class="line"><span style="color:#24292E;">            operator: In</span></span>
<span class="line"><span style="color:#24292E;">            values:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> docker</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">desktop</span></span>
<span class="line"><span style="color:#24292E;">  containers:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> image: quay.io</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">fluentd_elasticsearch</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">fluentd:v2.</span><span style="color:#005CC5;">5.2</span></span>
<span class="line"><span style="color:#24292E;">    imagePullPolicy: IfNotPresent</span></span>
<span class="line"><span style="color:#24292E;">    name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">  ...</span></span></code></pre></div><p><code>DaemonSetsController</code> 创建的这个 Pod，自动添加了 <code>spec.affinity.nodeAffinity</code>指定节点的名称，替换以前<code>spec.nodeName</code> 的方式。</p><p>除了这个<code>nodeAffinity</code>之外，<code>DaemonSetsController</code>还会自动加一些 Toleration 到 Pod 中。有兴趣可以查看<a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/#taint-and-toleration" target="_blank" rel="noreferrer">这个清单</a>。我们在后续调度器章节，将统一介绍这些 Affinity 和 Toleration 的用法。</p><p>接下来，我们看看它的升级方法。</p><h3 id="如何升级一个-daemonset" tabindex="-1">如何升级一个 Daemonset <a class="header-anchor" href="#如何升级一个-daemonset" aria-label="Permalink to &quot;如何升级一个 Daemonset&quot;">​</a></h3><p>升级一个 DaemonSet 其实非常简单，你可以通过<code>kubectl edit</code> 直接编辑对应的 DaemonSet 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">kubectl edit ds </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">n kube</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">system fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">kubectl edit ds </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">n kube</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">system fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span></code></pre></div><p>也可以直接在<code>fluentd-elasticsearch-ds.yaml</code> 中修改，然后使用<code>kubectl apply </code> ：</p><pre><code>$ kubectl apply -f fluentd-elasticsearch-ds.yaml
</code></pre><p>那么修改后，DaemonSet 的这些 Pod 又是如何更新的呢？</p><p>DaemonSet 中定义了两种更新策略。</p><p><strong>第一种是 OnDelete</strong> ，顾名思义，当指定这种策略时，我们只有先手动删除原有的 Pod 才会触发新的 DaemonSet Pod 的创建。否则，不论你怎么修改 DaemonSet ，都不会触发新的 Pod 生成。<br><strong>第二种是 RollingUpdate</strong>，这是默认的更新策略，使用这种策略可以实现滚动更新，同时你还可以更精细地控制更新的范围，比如通过 maxUnavailable 为 1 来控制更新的速度（你也可以理解为更新时设置的步长），这表示每次只会先删除 1 个 Pod，待其重新创建并Ready 后，再更新同样的方法更新其他的 Pod。在更新期间，每个节点上最多只能有 DaemonSet 的一个 Pod。</p><p>我给你举个例子，下面这个 YAML 是一个使用了<code>RollingUpdate</code>更新策略的 DaemonSet ：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">apiVersion: apps</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">v1</span></span>
<span class="line"><span style="color:#E1E4E8;">kind: DaemonSet</span></span>
<span class="line"><span style="color:#E1E4E8;">metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">  namespace: kube</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">system</span></span>
<span class="line"><span style="color:#E1E4E8;">  labels:</span></span>
<span class="line"><span style="color:#E1E4E8;">    k8s</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">app: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">logging</span></span>
<span class="line"><span style="color:#E1E4E8;">spec:</span></span>
<span class="line"><span style="color:#E1E4E8;">  selector:</span></span>
<span class="line"><span style="color:#E1E4E8;">    matchLabels:</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">  updateStrategy: # 这里指定了更新策略</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: RollingUpdate # 进行滚动更新</span></span>
<span class="line"><span style="color:#E1E4E8;">    rollingUpdate:</span></span>
<span class="line"><span style="color:#E1E4E8;">      maxUnavailable: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> # 这是默认的值</span></span>
<span class="line"><span style="color:#E1E4E8;">  template:</span></span>
<span class="line"><span style="color:#E1E4E8;">    metadata:</span></span>
<span class="line"><span style="color:#E1E4E8;">      labels:</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">    spec:</span></span>
<span class="line"><span style="color:#E1E4E8;">      containers:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: fluentd</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">elasticsearch</span></span>
<span class="line"><span style="color:#E1E4E8;">        image: quay.io</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">fluentd_elasticsearch</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">fluentd:v2.</span><span style="color:#79B8FF;">5.2</span></span>
<span class="line"><span style="color:#E1E4E8;">        volumeMounts:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: varlog</span></span>
<span class="line"><span style="color:#E1E4E8;">          mountPath: </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">log</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: varlibdockercontainers</span></span>
<span class="line"><span style="color:#E1E4E8;">          mountPath: </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">docker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">containers</span></span>
<span class="line"><span style="color:#E1E4E8;">          readOnly: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">      terminationGracePeriodSeconds: </span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#E1E4E8;">      volumes:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: varlog</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostPath:</span></span>
<span class="line"><span style="color:#E1E4E8;">          path: </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">log</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> name: varlibdockercontainers</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostPath:</span></span>
<span class="line"><span style="color:#E1E4E8;">          path: </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">var</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">docker</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">containers</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">apiVersion: apps</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">v1</span></span>
<span class="line"><span style="color:#24292E;">kind: DaemonSet</span></span>
<span class="line"><span style="color:#24292E;">metadata:</span></span>
<span class="line"><span style="color:#24292E;">  name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">  namespace: kube</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">system</span></span>
<span class="line"><span style="color:#24292E;">  labels:</span></span>
<span class="line"><span style="color:#24292E;">    k8s</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">app: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">logging</span></span>
<span class="line"><span style="color:#24292E;">spec:</span></span>
<span class="line"><span style="color:#24292E;">  selector:</span></span>
<span class="line"><span style="color:#24292E;">    matchLabels:</span></span>
<span class="line"><span style="color:#24292E;">      name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">  updateStrategy: # 这里指定了更新策略</span></span>
<span class="line"><span style="color:#24292E;">    type: RollingUpdate # 进行滚动更新</span></span>
<span class="line"><span style="color:#24292E;">    rollingUpdate:</span></span>
<span class="line"><span style="color:#24292E;">      maxUnavailable: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> # 这是默认的值</span></span>
<span class="line"><span style="color:#24292E;">  template:</span></span>
<span class="line"><span style="color:#24292E;">    metadata:</span></span>
<span class="line"><span style="color:#24292E;">      labels:</span></span>
<span class="line"><span style="color:#24292E;">        name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">    spec:</span></span>
<span class="line"><span style="color:#24292E;">      containers:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: fluentd</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">elasticsearch</span></span>
<span class="line"><span style="color:#24292E;">        image: quay.io</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">fluentd_elasticsearch</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">fluentd:v2.</span><span style="color:#005CC5;">5.2</span></span>
<span class="line"><span style="color:#24292E;">        volumeMounts:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: varlog</span></span>
<span class="line"><span style="color:#24292E;">          mountPath: </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">log</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: varlibdockercontainers</span></span>
<span class="line"><span style="color:#24292E;">          mountPath: </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">docker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">containers</span></span>
<span class="line"><span style="color:#24292E;">          readOnly: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">      terminationGracePeriodSeconds: </span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#24292E;">      volumes:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: varlog</span></span>
<span class="line"><span style="color:#24292E;">        hostPath:</span></span>
<span class="line"><span style="color:#24292E;">          path: </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">log</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> name: varlibdockercontainers</span></span>
<span class="line"><span style="color:#24292E;">        hostPath:</span></span>
<span class="line"><span style="color:#24292E;">          path: </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">var</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">docker</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">containers</span></span></code></pre></div><h3 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h3><p>从业务状态的角度来看，Kubernetes 使用 Deployment 和 StatefulSet 来分别支持无状态服务和有状态服务。而 DaemonSet 则从另外的一个角度来为集群中的所有节点提供基础服务，比如网络、存储等。</p><p>通过 DaemonSet，我们可以确保在所有满足条件的 Node 上只运行一个 Pod 实例，通常使用于日志收集、监控、网络等场景。Kubernetes 的组件 kube-prox 有时也可以借助 DaemonSet 拉起，这样每个节点上就会只运行一个 kube-proxy 的实例。Kubeadm 拉起的集群就是这样部署 kube-proxy 的。</p><p>同时 DaemonSet 也帮助我们解决了集群中节点动态变化时业务实例的部署和运维能力，比如扩容、缩容、节点宕机等场景。</p><p>好的，如果你对本节课有什么想法或者疑问，欢迎你在留言区留言，我们一起讨论。</p>`,30);function i(d,m,u,D,h,A){const a=e("Image");return o(),t("div",null,[r,n(a,{alt:"Lark20201009-105149.png",src:"https://s0.lgstatic.com/i/image/M00/5B/9B/Ciqc1F9_0FqACmcBAABg43Rbbow934.png"}),l(),E,n(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/59/81/Ciqc1F9xnpWAKFwRAAB-Lq1l0YU648.png"}),l(),y])}const g=p(c,[["render",i]]);export{b as __pageData,g as default};
