import{_ as n,j as e,o as l,h as r,k as a,f as o,Q as p,s}from"./chunks/framework.d3daa342.js";const T=JSON.parse('{"title":"19如何做好微服务间依赖的治理和分布式事务？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/23讲搞定后台架构实战_文档/(6144) 19 如何做好微服务间依赖的治理和分布式事务？.md","filePath":"posts/backEnd/23讲搞定后台架构实战_文档/(6144) 19 如何做好微服务间依赖的治理和分布式事务？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/23讲搞定后台架构实战_文档/(6144) 19 如何做好微服务间依赖的治理和分布式事务？.md"},i=p("",5),u=s("p",null,"图 1：抽象的架构示意图",-1),g=s("p",null,"从图一中可以看到，微服务会依赖很多其他微服务提供的接口、数据库、缓存，以及消息中间件等，这些接口及存储可能会因为代码 Bug、网络、磁盘故障、上线操作失误等因素引发线上问题。此时，由于依赖不可用，就会导致微服务对外提供的服务受到影响，出现接口可用率下降或者直接宕机的情况。",-1),_=s("p",null,[o('为了防止上述情况的发生，在构建微服务时，就需要预先考虑微服务所依赖的各项"下游"出现故障时的应对方案。假设下游出现故障及预设计对应的方案的过程，便是在实践"'),s("strong",null,"怀疑下游"),o('"。')],-1),d=s("h3",{id:"如何落地",tabindex:"-1"},[o("如何落地 "),s("a",{class:"header-anchor",href:"#如何落地","aria-label":'Permalink to "如何落地"'},"​")],-1),q=s("p",null,"下面将基于下图 2 所展示的三大类依赖：其他微服务、数据库、消息中间件，逐一介绍可能引发的故障的应对方案和最佳使用准则。",-1),h=s("p",null,'#后期同学美化下图，注意将"其它"改为"其他"',-1),E=p("",5),y=p("",6),B=p("",47);function A(C,f,m,v,F,b){const t=e("Image");return l(),r("div",null,[i,a(t,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/18/4B/Cgp9HWBIq_uAEOlnAAD_h2sUo08610.png"}),o(),u,g,_,d,q,h,a(t,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/18/4B/Cgp9HWBIrAaAMCBNAAD_h2sUo08361.png"}),o(),E,a(t,{alt:"图片3.png",src:"https://s0.lgstatic.com/i/image6/M00/18/4B/Cgp9HWBIrBOAF5jYAADCCWS_vYQ972.png"}),o(),y,a(t,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image6/M00/18/47/CioPOWBIrB-AQpXQAAEdF_RLO84122.png"}),o(),B])}const S=n(c,[["render",A]]);export{T as __pageData,S as default};
