import{_ as p,j as o,o as e,g as t,k as n,s as l,h as c,Q as a}from"./chunks/framework.4e7d56ce.js";const k=JSON.parse('{"title":"阻塞 I/O 模型 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4192) 15  案例分析：从 BIO 到 NIO，再到 AIO.md","filePath":"posts/backEnd/Java 性能优化实战 21 讲_文档/(4192) 15  案例分析：从 BIO 到 NIO，再到 AIO.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/Java 性能优化实战 21 讲_文档/(4192) 15  案例分析：从 BIO 到 NIO，再到 AIO.md"},E=l("p",null,"Netty 的高性能架构，是基于一个网络编程设计模式 Reactor 进行设计的。现在，大多数与 I/O 相关的组件，都会使用 Reactor 模型，比如 Tomcat、Redis、Nginx 等，可见 Reactor 应用的广泛性。",-1),y=l("p",null,"Reactor 是 NIO 的基础。为什么 NIO 的性能就能够比传统的阻塞 I/O 性能高呢？我们首先来看一下传统阻塞式 I/O 的一些特点。",-1),i=l("h3",{id:"阻塞-i-o-模型",tabindex:"-1"},[c("阻塞 I/O 模型 "),l("a",{class:"header-anchor",href:"#阻塞-i-o-模型","aria-label":'Permalink to "阻塞 I/O 模型"'},"​")],-1),F=a("",7),u=a("",19),d=a("",19),C=a("",5),A=a("",15),h=a("",15);function B(g,v,D,b,S,f){const s=o("Image");return e(),t("div",null,[E,y,i,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/48/9C/CgqCHl9MynKADFW4AAB9PAD7ZA0902.png"}),F,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/48/9C/CgqCHl9MyoiAGgY5AAGbD3wkqUs988.png"}),u,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/48/91/Ciqc1F9MyqmAdmlrAAMSNPAj_F4698.png"}),d,n(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/48/91/Ciqc1F9MysaAZw9aAADxUNI1q_I139.png"}),C,n(s,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/48/91/Ciqc1F9MytSAebMfAAFlMTAoyJQ496.png"}),A,n(s,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/48/92/Ciqc1F9My2WAeCGbAACrOS4gYGA066.png"}),h])}const m=p(r,[["render",B]]);export{k as __pageData,m as default};
