import{_ as o,D as e,o as t,g as c,J as a,h as s,m as p,Q as l}from"./chunks/framework.f67d7268.js";const T=JSON.parse('{"title":"20ViewModel架构：如何准备UI层的数据？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/048_iOS开发进阶/(6675) 20  View Model 架构：如何准备 UI 层的数据？.md","filePath":"posts/frontEnd/048_iOS开发进阶/(6675) 20  View Model 架构：如何准备 UI 层的数据？.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/048_iOS开发进阶/(6675) 20  View Model 架构：如何准备 UI 层的数据？.md"},E=p("h1",{id:"_20viewmodel架构-如何准备ui层的数据",tabindex:"-1"},[s("20ViewModel架构：如何准备UI层的数据？ "),p("a",{class:"header-anchor",href:"#_20viewmodel架构-如何准备ui层的数据","aria-label":'Permalink to "20ViewModel架构：如何准备UI层的数据？"'},"​")],-1),y=p("p",null,"UI 是 App 的重要组成部分，因为所有 App 都必须呈现 UI，并接收用户的事件。为了让 UI 能正确显示，我们需要把 Model 数据进行转换。例如，当我们显示图片的时候，需要把字符串类型的 URL 转换成 iOS 所支持 URL 类型；当显示时间信息时，需要把 UTC 时间值转换成设备所在的时区。",-1),i=p("p",null,"不过存在一个问题，如果我们把所有类型转换的逻辑都放在 UI/View 层里面，作为 View 层的 View Controller 往往会变得越来越臃肿。 为了避免这一情况，我使用了 MVVM 模式和 RxSwift 来架构 Moments App。MVVM 模式的核心部分是 ViewModel 模块，主要用于把 Model 转换成 UI/View 层所需的数据。为了简化转换的工作，我使用了 RxSwift 的操作符（Operator）。",-1),d=p("p",null,"所以，在这一讲中，我会和你介绍下 ViewModel 模式是怎样工作的，以及如何使用 RxSwift 里常用的操作符。",-1),F=p("h3",{id:"viewmodel-模式的架构",tabindex:"-1"},[s("ViewModel 模式的架构 "),p("a",{class:"header-anchor",href:"#viewmodel-模式的架构","aria-label":'Permalink to "ViewModel 模式的架构"'},"​")],-1),C=p("p",null,"首先我们以朋友圈功能为例，看看 ViewModel 模式的架构图。",-1),g=l(`<p><strong>View 模块</strong> 负责呈现 UI，并接收用户的事件。在朋友圈功能中，<code>MomentsTimelineViewController</code>负责呈现朋友圈的时间轴列表。为了正确显示该页面，我们需要为它准备好一些的数据，例如朋友的名字，朋友头像的 URL 等等，那些数据可以从 ViewModel 模块中读取。</p><p><strong>ViewModel 模块</strong> 是 MVVM 模式的核心，该模块由两个重要的协议所组成：<code>ListViewModel</code>和<code>ListItemViewModel</code>。其中<code>ListViewModel</code>协议用于定义列表页面所需的 ViewModel，而<code>ListItemViewModel</code>用于定义每一条列表项所需的 ViewModel。当他们需要读写数据时，会调用 Repository 模块。比如在朋友圈功能里面，它们都调用<code>MoomentsRepoType</code>来读写数据。</p><h3 id="viewmodel-模式的实现" tabindex="-1">ViewModel 模式的实现 <a class="header-anchor" href="#viewmodel-模式的实现" aria-label="Permalink to &quot;ViewModel 模式的实现&quot;">​</a></h3><p>有了上述的架构图，我们就可以看看 ViewModel 模块是怎样实现的。首先看一下<code>ListViewModel</code>协议的定义。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListViewModel</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> hasContent: Observable&lt;</span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">&gt; { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> hasError: BehaviorSubject&lt;</span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">&gt; { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackScreenviews</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadItems</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> listItems: BehaviorSubject&lt;[SectionModel&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">, ListItemViewModel&gt;]&gt; { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListViewModel</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> hasContent: Observable&lt;</span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">&gt; { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> hasError: BehaviorSubject&lt;</span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">&gt; { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackScreenviews</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadItems</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> listItems: BehaviorSubject&lt;[SectionModel&lt;</span><span style="color:#005CC5;">String</span><span style="color:#24292E;">, ListItemViewModel&gt;]&gt; { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面我们逐一介绍该协议的各个属性与方法。<code>hasContent</code>属性用于通知 UI 是否有内容。例如，当 BFF 没有返回数据时，我们可以在页面上提示用户&quot;目前还没有朋友圈信息，可以添加好友来查看更多的朋友圈信息&quot;。</p><p>为了代码共享，我们为<code>hasContent</code>属性提供了一个默认的实现，代码如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListViewModel</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> hasContent: Observable&lt;</span><span style="color:#79B8FF;">Bool</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> listItems</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;">(\\.</span><span style="color:#79B8FF;">isEmpty</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">distinctUntilChanged</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#79B8FF;">asObservable</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">extension</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListViewModel</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> hasContent: Observable&lt;</span><span style="color:#005CC5;">Bool</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> listItems</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">map</span><span style="color:#24292E;">(\\.</span><span style="color:#005CC5;">isEmpty</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">distinctUntilChanged</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#005CC5;">asObservable</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个方法使用<code>map</code>和<code>distinctUntilChanged</code>操作符来把<code>listItems</code>转换成 Bool 类型的<code>hasContent</code>。其中<code>map</code>用于提取<code>listItems</code>里的数组并检查是否为空，<code>distinctUntilChanged</code>用来保证只有在值发生改变时才发送新事件。</p><p><code>hasError</code>属性是一个<code>BehaviorSubject</code>，其初始值为<code>false</code>。它用于通知 UI 是否需要显示错误信息。</p><p><code>trackScreenviews()</code>方法用于发送用户行为数据。而<code>loadItems() -&gt; Observable&lt;Void&gt;</code>方法用于读取数据。</p><p>最后看一下<code>listItems</code>属性。 该属性用于准备 TableView 所需的数据，其存放了类型为<code>ListItemViewModel</code>的数据。<code>ListItemViewModel</code>能为 TableView 的各个 Cell 提供所需数据。该协议只定义一个名为<code>reuseIdentifier</code>的静态属性 ，如下所示。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">protocol</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListItemViewModel</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> reuseIdentifier: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">extension</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListItemViewModel</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> reuseIdentifier: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">describing</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protocol</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListItemViewModel</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> reuseIdentifier: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">extension</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListItemViewModel</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> reuseIdentifier: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">describing</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>reuseIdentifier</code>属性作为 TableView Cell 的唯一标示，为了重用，我们通过协议扩展来为该属性提供一个默认的实现并把类型的名字作为字符串进行返回。</p><p>上述就是<code>ListViewModel</code>协议的定义，接下来看它的实现结构体<code>MomentsTimelineViewModel</code>。</p><p>由于<code>MomentsTimelineViewModel</code>遵循了<code>ListViewModel</code>协议，因此需要实现了该协议中<code>listItems</code>和<code>hasError</code>属性以及<code>loadItems()</code>和<code>trackScreenviews()</code>方法。我们首先看一下<code>loadItems()</code>方法的实现。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadItems</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Observable&lt;</span><span style="color:#79B8FF;">Void</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> momentsRepo.</span><span style="color:#79B8FF;">getMoments</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userID</span><span style="color:#E1E4E8;">: userID)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadItems</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Observable&lt;</span><span style="color:#005CC5;">Void</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> momentsRepo.</span><span style="color:#005CC5;">getMoments</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userID</span><span style="color:#24292E;">: userID)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当 ViewModel 需要读取数据的时候，会调用 Repository 模块的组件，在朋友圈功能中，我们调用了<code>MomentsRepoType</code>的<code>getMoments()</code>方法来读取数据。</p><p>接着看看<code>trackScreenviews()</code>方法的实现。在该方法里面，我们调用了<code>TrackingRepoType</code>的<code>trackScreenviews()</code>方法来发送用户的行为数据，具体实现如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">trackScreenviews</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    trackingRepo.</span><span style="color:#79B8FF;">trackScreenviews</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ScreenviewsTrackingEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">screenName</span><span style="color:#E1E4E8;">: L10n.Tracking.momentsScreen, </span><span style="color:#79B8FF;">screenClass</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">describing</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">trackScreenviews</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    trackingRepo.</span><span style="color:#005CC5;">trackScreenviews</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ScreenviewsTrackingEvent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">screenName</span><span style="color:#24292E;">: L10n.Tracking.momentsScreen, </span><span style="color:#005CC5;">screenClass</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">describing</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p><strong>ViewModel 模块的一个核心功能，是把 Model 数据转换为用于 UI 呈现所需的 ViewModel 数据</strong>，我通过下面代码看它是怎样转换的。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setupBindings</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;"> momentsRepo.momentsDetails</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         [</span><span style="color:#79B8FF;">UserProfileListItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">userDetails</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.userDetails)]</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.moments.</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">MomentListItemViewModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">moment</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">         listItems.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">SectionModel</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">model</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">items</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"><span style="color:#E1E4E8;">     }, </span><span style="color:#79B8FF;">onError</span><span style="color:#E1E4E8;">: { </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span></span>
<span class="line"><span style="color:#E1E4E8;">         hasError.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">     })</span></span>
<span class="line"><span style="color:#E1E4E8;">     .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setupBindings</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;"> momentsRepo.momentsDetails</span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         [</span><span style="color:#005CC5;">UserProfileListItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">userDetails</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.userDetails)]</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.moments.</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">MomentListItemViewModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">moment</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) }</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">         listItems.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">SectionModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">model</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">items</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)])</span></span>
<span class="line"><span style="color:#24292E;">     }, </span><span style="color:#005CC5;">onError</span><span style="color:#24292E;">: { </span><span style="color:#005CC5;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span></span>
<span class="line"><span style="color:#24292E;">         hasError.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">     })</span></span>
<span class="line"><span style="color:#24292E;">     .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从代码中你可以发现，我们订阅了<code>momentsRepo</code>的<code>momentsDetails</code>属性，接收来自 Model 的数据更新。因为该属性的类型是<code>MomentsDetails</code>，而 View 层用所需的数据类型为<code>ListItemViewModel</code>。我们通过 map 操作符来进行类型转换，在转换成功后，调用<code>listItems</code>的<code>onNext()</code>方法把准备好的 ViewModel 数据发送给 UI。如果发生错误，就通过<code>hasError</code>属性发送出错信息。</p><p>在 map 操作符的转换过程中，我们分别使用了<code>UserProfileListItemViewModel</code>和<code>MomentListItemViewModel</code>结构体来转换用户简介信息和朋友圈条目信息。这两个结构体都遵循了<code>ListItemViewModel</code>协议。</p><p>接下来是它们的实现，首先看一下<code>UserProfileListItemViewModel</code>。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserProfileListItemViewModel</span><span style="color:#E1E4E8;">: ListItemViewModel {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name: </span><span style="color:#79B8FF;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> avatarURL: URL</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> backgroundImageURL: URL</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">userDetails</span><span style="color:#E1E4E8;">: MomentsDetails.UserDetails) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userDetails.name</span></span>
<span class="line"><span style="color:#E1E4E8;">        avatarURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: userDetails.avatar)</span></span>
<span class="line"><span style="color:#E1E4E8;">        backgroundImageURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: userDetails.backgroundImage)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserProfileListItemViewModel</span><span style="color:#24292E;">: ListItemViewModel {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name: </span><span style="color:#005CC5;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> avatarURL: URL</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> backgroundImageURL: URL</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">userDetails</span><span style="color:#24292E;">: MomentsDetails.UserDetails) {</span></span>
<span class="line"><span style="color:#24292E;">        name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userDetails.name</span></span>
<span class="line"><span style="color:#24292E;">        avatarURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: userDetails.avatar)</span></span>
<span class="line"><span style="color:#24292E;">        backgroundImageURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: userDetails.backgroundImage)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该结构体只包含了三个属性：<code>name</code>、<code>avatarURL</code>和<code>backgroundImageURL</code>。</p><p>其中，由于<code>name</code>属性的类型与<code>MomentsDetails.UserDetails</code>中<code>name</code>属性的类型都是字符串，我们只需要直接赋值就可以了。</p><p>而<code>avatarURL</code>和<code>backgroundImageURL</code>用于在 UI 上显示图片。因为 BFF 返回的 URL 值都是字符串类型，我们需要把字符串转换成<code>URL</code>类型。所有的转换工作我都放在<code>init(userDetails: MomentsDetails.UserDetails)</code>方法里面完成，我们只需要调用<code>URL</code>的初始化函数即可。</p><p>接着看一下<code>MomentListItemViewModel</code>结构体，它也是负责把 Model 的数据类型转换成用于 View 层显示 UI 的 ViewModel 数据。其转换的逻辑也封装在<code>init()</code>方法中，我们一起看看该方法是如何工作的。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">moment</span><span style="color:#E1E4E8;">: MomentsDetails.Moment, </span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">: Date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Date</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">relativeDateTimeFormatter</span><span style="color:#E1E4E8;">: RelativeDateTimeFormatterType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RelativeDateTimeFormatter</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    userAvatarURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: moment.userDetails.avatar)</span></span>
<span class="line"><span style="color:#E1E4E8;">    userName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moment.userDetails.name</span></span>
<span class="line"><span style="color:#E1E4E8;">    title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moment.title</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> firstPhoto </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moment.photos.</span><span style="color:#79B8FF;">first</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        photoURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">: firstPhoto)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        photoURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> formatter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> relativeDateTimeFormatter</span></span>
<span class="line"><span style="color:#E1E4E8;">    formatter.unitsStyle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> .full</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> timeInterval </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TimeInterval</span><span style="color:#E1E4E8;">(moment.createdDate) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> createdDate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Date</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">timeIntervalSince1970</span><span style="color:#E1E4E8;">: timeInterval)</span></span>
<span class="line"><span style="color:#E1E4E8;">        postDateDescription </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> formatter.</span><span style="color:#79B8FF;">localizedString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">for</span><span style="color:#E1E4E8;">: createdDate, </span><span style="color:#79B8FF;">relativeTo</span><span style="color:#E1E4E8;">: now)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        postDateDescription </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">init</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">moment</span><span style="color:#24292E;">: MomentsDetails.Moment, </span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">: Date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Date</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">relativeDateTimeFormatter</span><span style="color:#24292E;">: RelativeDateTimeFormatterType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RelativeDateTimeFormatter</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    userAvatarURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: moment.userDetails.avatar)</span></span>
<span class="line"><span style="color:#24292E;">    userName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moment.userDetails.name</span></span>
<span class="line"><span style="color:#24292E;">    title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moment.title</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> firstPhoto </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moment.photos.</span><span style="color:#005CC5;">first</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        photoURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">: firstPhoto)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        photoURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> formatter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> relativeDateTimeFormatter</span></span>
<span class="line"><span style="color:#24292E;">    formatter.unitsStyle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> .full</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> timeInterval </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TimeInterval</span><span style="color:#24292E;">(moment.createdDate) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> createdDate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Date</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">timeIntervalSince1970</span><span style="color:#24292E;">: timeInterval)</span></span>
<span class="line"><span style="color:#24292E;">        postDateDescription </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> formatter.</span><span style="color:#005CC5;">localizedString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">for</span><span style="color:#24292E;">: createdDate, </span><span style="color:#005CC5;">relativeTo</span><span style="color:#24292E;">: now)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        postDateDescription </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>userName</code>和<code>title</code>属性都是字符串类型，只需要简单的赋值就可以了。而<code>userAvatarURL</code>和<code>photoURL</code>属性需要把字符串转换为<code>URL</code>类型来呈现图片。</p><p><code>postDateDescription</code>属性相对复杂些，它的用途是显示一个相对的时间值，例如 &quot;5 分钟前&quot;&quot;2 小时前&quot;等。我们需要把朋友圈信息生成的时间与当前时间进行对比，然后根据手机上的语言配置来显示相对时间值。</p><h3 id="rxswift-操作符" tabindex="-1">RxSwift 操作符 <a class="header-anchor" href="#rxswift-操作符" aria-label="Permalink to &quot;RxSwift 操作符&quot;">​</a></h3><p>ViewModel 的核心功能是把 Model 数据转换为用于 UI 呈现所需的数据。其实<strong>RxSwift 的操作符就是负责转换的，使用合适的操作符能帮我们减少代码量并提高生产力</strong>。因此我建议你把 RxSwift 所提供的所有操作符都看一遍，然后在实际工作再挑选合适的来满足业务需求。</p><p>在这里，我着重介绍下过<strong>滤操作符，转换操作符和合并操作符</strong>中常用的 filter、distinctUntilChanged、map 和 combineLatest 等用法。</p><h4 id="过滤操作符" tabindex="-1">过滤操作符 <a class="header-anchor" href="#过滤操作符" aria-label="Permalink to &quot;过滤操作符&quot;">​</a></h4><p>过滤操作符用于过滤事件，我们可以使用过滤操作符把订阅者不关心的事件给过滤掉。常用的过滤操作符有 filter 和 distinctUntilChanged。</p><p><strong>filter</strong>操作符常用于通过规则过滤不需要的事件，例如在朋友圈功能里面，可以把发布时间早于一天前的信息过滤掉不显示。为了方便理解，我就以几个数字来解释下。如下所示，有 2、23、5、60、1、31，我想把小于 10 的数过滤掉，就可以通过 filter 设置过滤规则，然后打印出来的数字就是 23、 60、31。代码示例如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">filter</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">31</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">filter</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre></div>`,40),u=l(`<p>过滤操作符 filter 的效果</p><p><strong>distinctUntilChanged</strong>用于把相同的事件过滤掉。如下面例子中的第二个 1 和第四个 2，使用distinctUntilChanged 就可以把它们给过滤掉，然后打印出 1、 2、 1。代码和图例如下所示。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">distinctUntilChanged</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">distinctUntilChanged</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre></div>`,3),b=l(`<p>过滤操作符 distinctUntilChanged 的效果</p><p>除了相同的事件，我们还可以使用操作符<strong>distinctUntilChanged</strong>过滤掉相同的状态，从而避免频繁更新 UI。例如，我们先使用本地缓存数据呈现 UI，然后发起网络请求。当请求成功以后可以把结果数据与缓存进行对比，如果数据一致就没必要再次更新 UI。</p><h4 id="转换操作符" tabindex="-1">转换操作符 <a class="header-anchor" href="#转换操作符" aria-label="Permalink to &quot;转换操作符&quot;">​</a></h4><p>转换操作符非常实用，能帮助我们从一种数据类型转变成另外一种类型，例如我们可以把用于数据传输和存储的 Model 类型转换成用于 UI 呈现的 ViewModel 类型。在这里，我就以几个常用的转换操作符 map，compactMap 和 flapMap 来介绍下如何使用它们。</p><p><strong>map</strong>是一个十分常用的操作符，可用于从一种类型转换成另外一种类型，例如下面的例子，我把数值类型转换成字符串。程序执行的时候会打印 &quot;String: 1&quot; 和 &quot;String: 2&quot;。代码和图例如下所示。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;String: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;String: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">String</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) }</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre></div>`,6),m=l(`<p>转换操作符 map 的效果</p><p><strong>compactMap</strong> 常用于过滤掉值为<code>nil</code>的操作符，你可以把 compactMap 理解为同时使用 filter 和 map 的两个操作符。filter 把<code>nil</code>的值过滤掉，而 map 把非空的值进行转换。</p><p>例如下面的例子中，我把字符串的值转换为数值类型，并把转换不成功的值过滤掉。由于 &quot;not-a-number&quot; 不能转换成数值类型，因此被过滤掉了，执行的时候会打印 1 和 2。代码示例如下所示：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;not-a-number&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .compactMap { </span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;not-a-number&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .compactMap { </span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">) }</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre></div>`,4),B=l(`<p>转换操作符 compactMap 效果</p><p><strong>flatMap</strong>用于把两层的 Observable 序列合并到一层。我们通过一个例子来解析到底怎样合并。</p><p>请看代码示例：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TemperatureSensor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> temperature: Observable&lt;</span><span style="color:#79B8FF;">Int</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sensor1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TemperatureSensor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">temperature</span><span style="color:#E1E4E8;">: Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sensor2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TemperatureSensor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">temperature</span><span style="color:#E1E4E8;">: Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(sensor1, sensor2)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">flatMap</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">.temperature }</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TemperatureSensor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> temperature: Observable&lt;</span><span style="color:#005CC5;">Int</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sensor1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TemperatureSensor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">temperature</span><span style="color:#24292E;">: Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">21</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sensor2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TemperatureSensor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">temperature</span><span style="color:#24292E;">: Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">22</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(sensor1, sensor2)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">flatMap</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">.temperature }</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre></div><p>在这个例子中，我定义一个叫作<code>TemperatureSensor</code>的结构体，用来表示收集温度的传感器，该结构体包含了一个类型为<code>Observable</code>的<code>temperature</code>的属性。</p><p>假如天气站有多个这样的传感器，我们要把它们的温度信息合并到一个单独的 Observable 序列中方便统计，此时就可以使用 flatMap 来完成这项任务。</p><p>具体来说，我们在<code>flatMap</code>方法的闭包里面返回<code>temperature</code>属性，由于该属性是一个<code>Observable</code>对象，因此<code>flatMap</code>方法会把这些序列统一合并到一个单独的 Observable 序列里面，并打印出 21、23、22、25。</p>`,7),h=l(`<p>转换操作符 flatMap 的效果</p><h4 id="合并操作符" tabindex="-1">合并操作符 <a class="header-anchor" href="#合并操作符" aria-label="Permalink to &quot;合并操作符&quot;">​</a></h4><p>合并操作符用于组装与合并多个 Observable 序列。我们通过 startWith，concat 和 merge 等几个常用的合并操作符，来看看它们是怎样运作的。</p><p><strong>startWith</strong> 可以使订阅者在接收到 Observable 序列的事件前，先收到传给 startWith 方法的事件。它的使用非常简单，例如在下面的例子中，我们把 3 和 4 传递给<code>startWith</code>。那么在执行过程中，会先把 3 和 4 事件发送给订阅者，其运行效果为 3、4、1、2。代码示例如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">startWith</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">startWith</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre></div>`,5),v=l(`<p>合并操作符 startWith 效果</p><p><strong>日常中我们可以通过</strong> <code>startWith</code>方法，把加载事件插入网络数据事件之前，以此<strong>来保持 UI 状态的自动更新。</strong></p><p><strong>concat</strong>能把多个 Observable 序列按顺序合并在一起。例如，在下面的例子中我们合并了两个 Observable 序列，第一个包含 1 和 2，第二个包含 3 和 4，那么执行的时候会打印 1、2、3、4。代码示例如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">concat</span><span style="color:#E1E4E8;">(Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">concat</span><span style="color:#24292E;">(Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span></code></pre></div>`,4),_=l(`<p>合并操作符 concat 效果</p><p><strong>merge</strong>，常用于合并多个 Observable 序列的操作符，和 concat 不一样的地方是它能保持原来事件的顺序。我们可以通过一个例子来看看，它是怎样合并 Observable 序列的。代码示例如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> first </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PublishSubject</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Int</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> second </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PublishSubject</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">Int</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">of</span><span style="color:#E1E4E8;">(first, second)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">merge</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">second.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">second.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">second.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PublishSubject</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Int</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> second </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PublishSubject</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">Int</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">of</span><span style="color:#24292E;">(first, second)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">merge</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">second.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">second.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">second.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span></code></pre></div><p>我们调用<code>merge</code>方法把两个 PublishSubject 合并在一起，然后不同的 PublishSubject 会分别发出不同的<code>next</code>事件，订阅者根据事件发生的顺序来接收到相关事件。如下图所示，程序执行时会打印 1、2、11、3、12、13、4。</p>`,4),f=l(`<p>合并操作符 merge 的效果</p><p><strong>combineLatest</strong>会把两个 Observable 序列里最后的事件合并起来，代码示例如下。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> first </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PublishSubject</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> second </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PublishSubject</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">combineLatest</span><span style="color:#E1E4E8;">(first, second) { </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$1</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">second.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">second.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">second.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;4&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PublishSubject</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> second </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PublishSubject</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">combineLatest</span><span style="color:#24292E;">(first, second) { </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$1</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">second.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">second.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">second.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>在程序执行过程中，当其中一个 PublishSubject 发出<code>next</code>事件时，就会从另外一个 PublishSubject 取出其最后一个事件，然后调用<code>combineLatest</code>方法的闭包，把这两个事件合并起来并通知订阅者。上述的例子在执行时会打印 1a、2a、2b、2c、3c、4c。</p>`,4),D=l(`<p>合并操作符 combineLatest</p><p>在实际开发中，<code>combineLatest</code>方法非常实用。我们可以用它来监听多个 Observable 序列，然后组合起来统一更新状态。例如在一个登录页面里面，我们可以同时监听用户名和密码两个输入框，当它们同时有值的时候才激活登录按钮。</p><p><strong>zip</strong>也能用于合并两个 Observable 序列，和 combineLatest 不一样的地方是， zip 只会把两个 Observable 序列的事件配对合并。就像两队小朋友，排在前头的手牵手来到一个新队列。一旦出来就不再留在原有队列了。</p><p>为了方便理解 zip 与 combineLatest 的区别，我在下面例子中也使用了一样的数据并保持事件发送的顺序。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> first </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PublishSubject</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> second </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PublishSubject</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">Observable.</span><span style="color:#79B8FF;">zip</span><span style="color:#E1E4E8;">(first, second) { </span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$1</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#79B8FF;">disposed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">by</span><span style="color:#E1E4E8;">: disposeBag)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">second.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">second.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">second.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">first.</span><span style="color:#79B8FF;">onNext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;4&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PublishSubject</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> second </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PublishSubject</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">Observable.</span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(first, second) { </span><span style="color:#005CC5;">$0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$1</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#005CC5;">disposed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">by</span><span style="color:#24292E;">: disposeBag)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">second.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">second.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">second.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">first.</span><span style="color:#005CC5;">onNext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>在上述的例子中，有两个 PublishSubject，其中<code>first</code>发出 1、2、3、4，而<code>second</code>发出 a、b、c。<code>zip</code>方法会返回它们的合并事件 1a、2b、3c。由于<code>first</code>所发出<code>next(&quot;4&quot;)</code>事件没有在<code>second</code>里面找到对应的事件，所以合并后的 Observable 序列只有三个事件。</p>`,6),A=l('<p>合并操作符 zip 的效果</p><br><p>上面是常用的操作符，灵活使用它们，我们可以完成绝大部分的任务了。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在这一讲中，我们介绍了 ViewModel 模式的架构与实现和 RxSwift 的操作符。有了 ViewModel，我们可以把业务逻辑从 View 层抽离出来，甚至把 View 层进行替换，例如把 UIKit 替换成 SwiftUI。而 UI 所需的数据，可以通过 ViewModel 模块把 Model 数据转换出来。至于转换工作，我们可以借助操作符来完成。</p><p>有关本讲操作符的例子代码，我都放在项目中的<strong>RxSwift Playground 文件</strong>里面，希望你能多练习，灵活运用。</p><p>RxSwift 为我们提供了 50 多个操作符，我建议你到 rxmarbles.com 或者到 App Store 下载 RxMarbles App，并在 App 中替换各种参数来观察执行的结果，这样能帮助你学会所有的操作符，在现实工作中能选择合适的操作符来简化大量的开发工作。</p><p><strong>思考题</strong></p><blockquote><p>请问你会把所有逻辑都编写在 ViewController 里面吗？如果没有，使用了怎样模式与架构来解耦呢？能分享一下这方面的经验吗？</p></blockquote><p>请把你的想法写到留言区哦，下一讲我将介绍如何开发统一并且灵活的 UI。</p><p><strong>源码地址：</strong></p><blockquote><p>RxSwift Playground 文件地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Playgrounds/RxSwiftPlayground.playground/Contents.swift?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/blob/main/Playgrounds/RxSwiftPlayground.playground/Contents.swift</a></p><p>ViewModel 协议定义的源码地址：<a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/ViewModels?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Foundations/ViewModels</a></p><p>朋友圈功能 ViewModel 实现的源码地址：<br><a href="https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/Moments/ViewModels?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">https://github.com/lagoueduCol/iOS-linyongjian/tree/main/Moments/Moments/Features/Moments/ViewModels</a></p></blockquote>',12);function w(M,S,I,V,k,x){const n=e("Image");return t(),c("div",null,[E,y,i,d,F,C,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/3C/0F/CioPOWCH7COAXcMTAAPT7Gr7yvg197.png"}),s(),g,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/06/Cgp9HWCH7E6AcOAxAAD0m4P1ZAs382.png"}),s(),u,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/06/Cgp9HWCH7Q-AVcVjAAEFCx3nsK4458.png"}),s(),b,a(n,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/07/Cgp9HWCH7R6ASEB0AAD5Z_BYeoQ092.png"}),s(),m,a(n,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/0F/CioPOWCH7SeAfVeYAAEfEP1ULSY822.png"}),s(),B,a(n,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/0F/CioPOWCH7TKAWC3hAAEPlMCt_uM223.png"}),s(),h,a(n,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/0F/CioPOWCH7USAKIvoAADtwXiN318148.png"}),s(),v,a(n,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image6/M00/3C/0F/CioPOWCH7VeAeMD5AACnQDe-5Nk532.png"}),s(),_,a(n,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image6/M00/3C/0F/CioPOWCH7W6AOGypAAEmk4CaMh0083.png"}),s(),f,a(n,{alt:"Drawing 19.png",src:"https://s0.lgstatic.com/i/image6/M00/3C/0F/CioPOWCH7X6AJXQvAAEo9AcsIGo039.png"}),s(),D,a(n,{alt:"图片5.png",src:"https://s0.lgstatic.com/i/image6/M01/3C/9B/Cgp9HWCLocCASVLAAAEE-3Z6-aU135.png"}),s(),A])}const U=o(r,[["render",w]]);export{T as __pageData,U as default};
