import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.f949202b.js";const u=JSON.parse('{"title":"Hibernate 中 @Fetch 数据的策略 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(5893) 26  经典的 N+1 SQL 问题如何正确解决？（下）.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(5893) 26  经典的 N+1 SQL 问题如何正确解决？（下）.md","lastUpdated":null}'),p={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(5893) 26  经典的 N+1 SQL 问题如何正确解决？（下）.md"},e=l(`<p>你好，上一讲我们介绍了什么是 N+1 的 SQL 问题，以及减少 N 对应 SQL 条数的机制有哪些，相信你对此已经有了大概的了解。那么这一讲我们接着说这个经典的 SQL 问题，看看还有没有其他的解决方式。</p><h3 id="hibernate-中-fetch-数据的策略" tabindex="-1">Hibernate 中 @Fetch 数据的策略 <a class="header-anchor" href="#hibernate-中-fetch-数据的策略" aria-label="Permalink to &quot;Hibernate 中 @Fetch 数据的策略&quot;">​</a></h3><p>Hibernate 提供了一个 @Fetch 注解，用来改变获取数据的策略。我们来研究一下这一注解的语法，代码如下所示。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// fetch注解只能用在方法和字段上面</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ElementType.METHOD, ElementType.FIELD})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Fetch</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//注解里面，只有一个属性获取数据的模式</span></span>
<span class="line"><span style="color:#E1E4E8;">   FetchMode </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//其中FetchMode的值有如下几种：</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FetchMode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//默认模式，就是会有N+1 sql的问题；</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">SELECT</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//通过join的模式，用一个sql把主体数据和关联关系数据一口气查出来</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">JOIN</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//通过子查询的模式，查询关联关系的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">SUBSELECT</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// fetch注解只能用在方法和字段上面</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.METHOD, ElementType.FIELD})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Fetch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//注解里面，只有一个属性获取数据的模式</span></span>
<span class="line"><span style="color:#24292E;">   FetchMode </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//其中FetchMode的值有如下几种：</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FetchMode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//默认模式，就是会有N+1 sql的问题；</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">SELECT</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//通过join的模式，用一个sql把主体数据和关联关系数据一口气查出来</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">JOIN</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//通过子查询的模式，查询关联关系的数据</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">SUBSELECT</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>需要注意的是，不要把这个注解和 JPA 协议里面的 FetchType.EAGER、FetchType.LAZY 搞混了，JPA 协议的关联关系中的 FetchTyp 解决的是取关联关系数据时机的问题，也就是说 EAGER 代表的是立即获得关联关系的数据，LAZY 是需要的时候再获得关联关系的数据。</p><p>这和 Hibernate 的 FetchMode 是两回事，FetchMode 解决的是获得数据策略的问题，也就是说，获得关联关系数据的策略有三种模式：SELECT（默认）、JOIN、SUBSELECT。下面我通过例子来分别介绍一下这三种模式有什么区别，分别起到什么作用。</p><h4 id="fetchmode-select" tabindex="-1">FetchMode.SELECT <a class="header-anchor" href="#fetchmode-select" aria-label="Permalink to &quot;FetchMode.SELECT&quot;">​</a></h4><p>我们直接更改一下 UserInfo 实体，将 @Fetch(value = FetchMode.SELECT) 作为获取数据的策略，使用 FetchType.EAGER 作为获取数据的时机，代码如下所示。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SuperBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;addressList&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.PERSIST,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.EAGER)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchMode.SELECT)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; addressList;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SuperBuilder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;addressList&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.PERSIST,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.EAGER)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Fetch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchMode.SELECT)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; addressList;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>然后还是执行 userInfoRepository.findAll(); 这个方法，看一下打印的 SQL 有哪些。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">org</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hibernate</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">SQL</span><span style="color:#E1E4E8;">                        :</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> id1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_time</span><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_t2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_user_id</span><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_u3_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_time</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod4_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_user_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod5_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">version</span><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> version6_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">ages</span><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> ages7_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">email_address</span><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> email_ad8_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_name</span><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_nam9_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> name10_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">telephone</span><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> telepho11_1_</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> user_info userinfo0_ </span></span>
<span class="line"><span style="color:#79B8FF;">org</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hibernate</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">SQL</span><span style="color:#E1E4E8;">                        :</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> id1_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> id1_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_time</span><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_t2_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_user_id</span><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_u3_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_time</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod4_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_user_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod5_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">version</span><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> version6_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">city</span><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> city7_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> user_inf8_0_1_</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">address</span><span style="color:#E1E4E8;"> addresslis0_</span></span>
<span class="line"><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ? </span></span>
<span class="line"><span style="color:#79B8FF;">org</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hibernate</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">SQL</span><span style="color:#E1E4E8;">                        :</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> id1_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> id1_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_time</span><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_t2_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_user_id</span><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_u3_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_time</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod4_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_user_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod5_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">version</span><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> version6_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">city</span><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> city7_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> user_inf8_0_1_</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">address</span><span style="color:#E1E4E8;"> addresslis0_</span></span>
<span class="line"><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ? </span></span>
<span class="line"><span style="color:#79B8FF;">org</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hibernate</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">SQL</span><span style="color:#E1E4E8;">                        :</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> id1_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> id1_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_time</span><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_t2_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_user_id</span><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_u3_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_time</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod4_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_user_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod5_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">version</span><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> version6_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">city</span><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> city7_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> user_inf8_0_1_</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">address</span><span style="color:#E1E4E8;"> addresslis0_</span></span>
<span class="line"><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addresslis0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">org</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hibernate</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">SQL</span><span style="color:#24292E;">                        :</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">                    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_time</span><span style="color:#24292E;">           </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_t2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_user_id</span><span style="color:#24292E;">        </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_u3_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_time</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod4_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_user_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod5_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">version</span><span style="color:#24292E;">               </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> version6_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">ages</span><span style="color:#24292E;">                  </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> ages7_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">email_address</span><span style="color:#24292E;">         </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> email_ad8_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_name</span><span style="color:#24292E;">             </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_nam9_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">name</span><span style="color:#24292E;">                  </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> name10_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">telephone</span><span style="color:#24292E;">             </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> telepho11_1_</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> user_info userinfo0_ </span></span>
<span class="line"><span style="color:#005CC5;">org</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hibernate</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">SQL</span><span style="color:#24292E;">                        :</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;">          </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">                    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id1_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">                    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id1_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_time</span><span style="color:#24292E;">           </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_t2_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_user_id</span><span style="color:#24292E;">        </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_u3_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_time</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod4_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_user_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod5_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">version</span><span style="color:#24292E;">               </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> version6_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">city</span><span style="color:#24292E;">                  </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> city7_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;">          </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> user_inf8_0_1_</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">address</span><span style="color:#24292E;"> addresslis0_</span></span>
<span class="line"><span style="color:#D73A49;">where</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ? </span></span>
<span class="line"><span style="color:#005CC5;">org</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hibernate</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">SQL</span><span style="color:#24292E;">                        :</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;">          </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">                    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id1_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">                    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id1_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_time</span><span style="color:#24292E;">           </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_t2_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_user_id</span><span style="color:#24292E;">        </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_u3_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_time</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod4_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_user_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod5_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">version</span><span style="color:#24292E;">               </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> version6_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">city</span><span style="color:#24292E;">                  </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> city7_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;">          </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> user_inf8_0_1_</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">address</span><span style="color:#24292E;"> addresslis0_</span></span>
<span class="line"><span style="color:#D73A49;">where</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ? </span></span>
<span class="line"><span style="color:#005CC5;">org</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hibernate</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">SQL</span><span style="color:#24292E;">                        :</span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;">          </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">                    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id1_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">                    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id1_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_time</span><span style="color:#24292E;">           </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_t2_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_user_id</span><span style="color:#24292E;">        </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_u3_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_time</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod4_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_user_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod5_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">version</span><span style="color:#24292E;">               </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> version6_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">city</span><span style="color:#24292E;">                  </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> city7_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;">          </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> user_inf8_0_1_</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">address</span><span style="color:#24292E;"> addresslis0_</span></span>
<span class="line"><span style="color:#D73A49;">where</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">addresslis0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>从上述 SQL 中可以看出，这依然是 N+1 的 SQL 问题，FetchMode.Select 是默认策略，加与不加是同样的效果，代表获取关系的时候新开一个 SQL 进行查询。</p><h4 id="fetchmode-join" tabindex="-1">FetchMode.JOIN <a class="header-anchor" href="#fetchmode-join" aria-label="Permalink to &quot;FetchMode.JOIN&quot;">​</a></h4><p>FetchMode.JOIN 的意思是主表信息和关联关系通过一个 SQL JOIN 的方式查出来，我们看一下例子。</p><p>首先，将 UserInfo 里面的 FetchMode 改成 JOIN 模式，关键代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.PERSIST,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.EAGER)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchMode.JOIN) </span><span style="color:#6A737D;">//唯一变化的地方采用JOIN模式</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; addressList;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.PERSIST,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.EAGER)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Fetch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchMode.JOIN) </span><span style="color:#6A737D;">//唯一变化的地方采用JOIN模式</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; addressList;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然后，调用一下 userInfoRepository.findAll(); 这个方法，发现依然是这三条 SQL，如下图所示。</p><p><img src="https://s0.lgstatic.com/i/image/M00/80/74/CgqCHl_Qr5uACOYLAAEMvYccGw4336.png" alt="Lark20201209-190554.png"></p><p>这是因为 FetchMode.JOIN 只支持通过 ID 或者联合唯一键获取数据才有效，这正是 JOIN 策略模式的局限性所在。</p><p>那么我们再调用一下 userInfoRepository.findById(id)，看看控制台的 SQL 执行情况，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">select userinfo0_.id                      as id1_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.create_time             as create_t2_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.create_user_id          as create_u3_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.last_modified_time      as last_mod4_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.last_modified_user_id   as last_mod5_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.version                 as version6_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.ages                    as ages7_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.email_address           as email_ad8_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.last_name               as last_nam9_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.name                    as name10_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.telephone               as telepho11_1_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.user_info_id          as user_inf8_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.id                    as id1_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.id                    as id1_0_2_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.create_time           as create_t2_0_2_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.create_user_id        as create_u3_0_2_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.last_modified_time    as last_mod4_0_2_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.last_modified_user_id as last_mod5_0_2_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.version               as version6_0_2_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.city                  as city7_0_2_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.user_info_id          as user_inf8_0_2_</span></span>
<span class="line"><span style="color:#E1E4E8;">from user_info userinfo0_</span></span>
<span class="line"><span style="color:#E1E4E8;">         left outer join address addresslis1_ on userinfo0_.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addresslis1_.user_info_id</span></span>
<span class="line"><span style="color:#E1E4E8;">where userinfo0_.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">select userinfo0_.id                      as id1_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.create_time             as create_t2_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.create_user_id          as create_u3_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.last_modified_time      as last_mod4_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.last_modified_user_id   as last_mod5_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.version                 as version6_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.ages                    as ages7_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.email_address           as email_ad8_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.last_name               as last_nam9_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.name                    as name10_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.telephone               as telepho11_1_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.user_info_id          as user_inf8_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.id                    as id1_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.id                    as id1_0_2_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.create_time           as create_t2_0_2_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.create_user_id        as create_u3_0_2_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.last_modified_time    as last_mod4_0_2_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.last_modified_user_id as last_mod5_0_2_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.version               as version6_0_2_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.city                  as city7_0_2_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.user_info_id          as user_inf8_0_2_</span></span>
<span class="line"><span style="color:#24292E;">from user_info userinfo0_</span></span>
<span class="line"><span style="color:#24292E;">         left outer join address addresslis1_ on userinfo0_.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addresslis1_.user_info_id</span></span>
<span class="line"><span style="color:#24292E;">where userinfo0_.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这时我们会发现，当查询 UserInfo 的时候，它会通过 left outer join 把 Address 的信息也查询出来，虽然 SQL 上会有冗余信息，但是你会发现我们之前的 N+1 的 SQL 直接变成 1 条 SQL 了。</p><p>此时我们修改 UserInfo 里面的 @OneToMany，这个 @Fetch(value = FetchMode.JOIN) 同样适用于 @ManyToOne；然后再改一下 Address 实例，用 @Fetch(value = FetchMode.JOIN) 把 Adress 里面的 UserInfo 关联关系改成 JOIN 模式；接着我们用 LAZY 获取数据的时机，会发现其对获取数据的策略没有任何影响。</p><p>这里我只是给你演示获取数据时机的不同情况，关键代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SuperBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String city;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.PERSIST,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonBackReference</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchMode.JOIN)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfo userInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SuperBuilder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String city;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.PERSIST,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonBackReference</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Fetch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchMode.JOIN)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfo userInfo;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>同样的道理，JOIN 对列表性的查询是没有效果的，我们调用一下 addressRepository.findById(id)，产生的 SQL 如下所示。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">org</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">hibernate</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">SQL</span><span style="color:#E1E4E8;">                        : </span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">                     </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> id1_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_time</span><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_t2_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_user_id</span><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_u3_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_time</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod4_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_user_id</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod5_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">version</span><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> version6_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">city</span><span style="color:#E1E4E8;">                   </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> city7_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> id1_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_time</span><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_t2_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">create_user_id</span><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> create_u3_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_time</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod4_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_modified_user_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_mod5_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">version</span><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> version6_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">ages</span><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> ages7_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">email_address</span><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> email_ad8_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">last_name</span><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> last_nam9_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> name10_1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">telephone</span><span style="color:#E1E4E8;">             </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> telepho11_1_1_</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">address</span><span style="color:#E1E4E8;"> address0_</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">left outer join</span><span style="color:#E1E4E8;"> user_info userinfo1_ </span><span style="color:#F97583;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">user_info_id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userinfo1_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span></span>
<span class="line"><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">address0_</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ?</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">org</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">hibernate</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">SQL</span><span style="color:#24292E;">                        : </span></span>
<span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">                     </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id1_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_time</span><span style="color:#24292E;">            </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_t2_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_user_id</span><span style="color:#24292E;">         </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_u3_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_time</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod4_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_user_id</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod5_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">version</span><span style="color:#24292E;">                </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> version6_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">city</span><span style="color:#24292E;">                   </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> city7_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;">           </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">                    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> id1_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_time</span><span style="color:#24292E;">           </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_t2_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">create_user_id</span><span style="color:#24292E;">        </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> create_u3_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_time</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod4_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_modified_user_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_mod5_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">version</span><span style="color:#24292E;">               </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> version6_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">ages</span><span style="color:#24292E;">                  </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> ages7_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">email_address</span><span style="color:#24292E;">         </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> email_ad8_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">last_name</span><span style="color:#24292E;">             </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> last_nam9_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">name</span><span style="color:#24292E;">                  </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> name10_1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">telephone</span><span style="color:#24292E;">             </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> telepho11_1_1_</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">address</span><span style="color:#24292E;"> address0_</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">left outer join</span><span style="color:#24292E;"> user_info userinfo1_ </span><span style="color:#D73A49;">on</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">user_info_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userinfo1_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span></span>
<span class="line"><span style="color:#D73A49;">where</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">address0_</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>我们发现此时只会产生一个 SQL，即通过 from address left outer join user_info 一次性把所有信息都查出来，然后 Hibernate 再根据查询出来的结果组合到不同的实体里面。</p><p>也就是说 FetchMode.JOIN 对于关联关系的查询 LAZY 是不起作用的，因为 JOIN 的模式是通过一条 SQL 查出来所有信息，所以 FetchMode.JOIN 会忽略 FetchType。</p><p>那么我们再来看第三种模式。</p><h4 id="fetchmode-subselect" tabindex="-1">FetchMode.SUBSELECT <a class="header-anchor" href="#fetchmode-subselect" aria-label="Permalink to &quot;FetchMode.SUBSELECT&quot;">​</a></h4><p>这种模式很简单，就是将关联关系通过子查询的形式查询出来，我们还是结合例子来理解一下。</p><p>首先，将 UserInfo 里面的关联关系改成 @Fetch(value = FetchMode.SUBSELECT)，关键代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.PERSIST,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.LAZY) </span><span style="color:#6A737D;">//我们这里测试一下LAZY情况</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchMode.SUBSELECT) </span><span style="color:#6A737D;">//唯一变化之处</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; addressList;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.PERSIST,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.LAZY) </span><span style="color:#6A737D;">//我们这里测试一下LAZY情况</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Fetch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchMode.SUBSELECT) </span><span style="color:#6A737D;">//唯一变化之处</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; addressList;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>接着，像上面的做法一样，执行一下 userInfoRepository.findAll()；方法，看一下控制台的 SQL 情况，如下所示。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">org.hibernate.SQL                        </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">select userinfo0_.id                    as id1_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.create_time           as create_t2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.create_user_id        as create_u3_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.last_modified_time    as last_mod4_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.last_modified_user_id as last_mod5_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.version               as version6_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.ages                  as ages7_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.email_address         as email_ad8_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.last_name             as last_nam9_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.name                  as name10_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.telephone             as telepho11_1_</span></span>
<span class="line"><span style="color:#E1E4E8;">from user_info userinfo0_ </span></span>
<span class="line"><span style="color:#E1E4E8;">org.hibernate.SQL                        </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">select addresslis0_.user_info_id          as user_inf8_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis0_.id                    as id1_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis0_.id                    as id1_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis0_.create_time           as create_t2_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis0_.create_user_id        as create_u3_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis0_.last_modified_time    as last_mod4_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis0_.last_modified_user_id as last_mod5_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis0_.version               as version6_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis0_.city                  as city7_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis0_.user_info_id          as user_inf8_0_0_</span></span>
<span class="line"><span style="color:#E1E4E8;">from address addresslis0_</span></span>
<span class="line"><span style="color:#E1E4E8;">where addresslis0_.user_info_id </span><span style="color:#B392F0;">in</span><span style="color:#E1E4E8;"> (select userinfo0_.id from user_info userinfo0_)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">org.hibernate.SQL                        </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">select userinfo0_.id                    as id1_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.create_time           as create_t2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.create_user_id        as create_u3_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.last_modified_time    as last_mod4_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.last_modified_user_id as last_mod5_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.version               as version6_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.ages                  as ages7_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.email_address         as email_ad8_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.last_name             as last_nam9_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.name                  as name10_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.telephone             as telepho11_1_</span></span>
<span class="line"><span style="color:#24292E;">from user_info userinfo0_ </span></span>
<span class="line"><span style="color:#24292E;">org.hibernate.SQL                        </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">select addresslis0_.user_info_id          as user_inf8_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis0_.id                    as id1_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis0_.id                    as id1_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis0_.create_time           as create_t2_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis0_.create_user_id        as create_u3_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis0_.last_modified_time    as last_mod4_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis0_.last_modified_user_id as last_mod5_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis0_.version               as version6_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis0_.city                  as city7_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis0_.user_info_id          as user_inf8_0_0_</span></span>
<span class="line"><span style="color:#24292E;">from address addresslis0_</span></span>
<span class="line"><span style="color:#24292E;">where addresslis0_.user_info_id </span><span style="color:#6F42C1;">in</span><span style="color:#24292E;"> (select userinfo0_.id from user_info userinfo0_)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>这个时候会发现，查询 Address 信息是直接通过 addresslis0_.user_info_id in (select userinfo0_.id from user_info userinfo0_) 子查询的方式进行的，也就是说 N+1 SQL 变成了 1+1 的 SQL，这有点类似我们配置 @BatchSize 的效果。</p><p>FetchMode.SUBSELECT 支持 ID 查询和各种条件查询，唯一的缺点是只能配置在 @OneToMany 和 @ManyToMany 的关联关系上，不能配置在 @ManyToOne 和 @OneToOne 的关联关系上，所以我们在 Address 里面关联 UserInfo 的时候就没有办法做实验了。</p><p>总之，@Fetch 的不同模型，都有各自的优缺点：FetchMode.SELECT 默认，和不配置的效果一样；FetchMode.JOIN 只支持类似 findById(id) 的方法，只能根据 ID 查询才有效果；FetchMode.SUBSELECT 虽然不限使用方式，但是只支持 **ToMany 的关联关系。</p><p>所以你在使用 @Fetch 的时候需要注意一下它的局限性，我个人是比较推荐 @BatchSize 的方式。</p><p>那么除了上面的处理方式，我们也可以采用之前写 Mybatis 的思路来查询关联关系，下面来看一下该如何转变思路。</p><h3 id="转化解决问题的思路" tabindex="-1">转化解决问题的思路 <a class="header-anchor" href="#转化解决问题的思路" aria-label="Permalink to &quot;转化解决问题的思路&quot;">​</a></h3><p>这时需要我们在思想上进行转变，利用 JPA 的优势，摒弃它的缺陷。想想我们没有用 JPA 的时候是怎么做的？难道一定要用实体之间的关联关系吗？如果用的是 Mybatis，你在给前端返回关联关系数据的时候一般怎么写呢？</p><p>答案肯定是写成 1+1 SQL 的形式，也就是一条主 SQL、一条查关联关系的 SQL。我们还用 UserInfo 和 Address 实体来演示，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SuperBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Transient</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//在UserInfo实体中，我们不利用JPA来关联实体的关联关系了，而是把它设置成@Transisent，只维护java对象的关系，不维护DB之间的关联关系</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; addressList;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SuperBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String city;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String userId;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Transient</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//同样Address里面也可以不维护UserInfo的关联关系</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfo userInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SuperBuilder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Transient</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//在UserInfo实体中，我们不利用JPA来关联实体的关联关系了，而是把它设置成@Transisent，只维护java对象的关系，不维护DB之间的关联关系</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; addressList;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SuperBuilder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String city;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String userId;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Transient</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//同样Address里面也可以不维护UserInfo的关联关系</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfo userInfo;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>当我们查询所有 UserInfo 信息的时候，又想把每个 UserInfo 的 Address 信息都带上，应该怎么做呢？请看如下代码。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 自己实现一套 Batch fetch的逻辑</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UserInfo</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAllUserWithAddress</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//先查出来所有的UserInfo信息</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; userInfos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userInfoRepository.</span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//再查出来上面userInfos里面的所有userId列表，再查询出来上面的查询结果所对应的所有Address信息</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; addresses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addressRepository.</span><span style="color:#B392F0;">findByUserIdIn</span><span style="color:#E1E4E8;">(userInfos.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(userInfo </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> userInfo.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//我们自己再写一个转化逻辑，把各自user info的address信息放置到响应的UserInfo实例里面；</span></span>
<span class="line"><span style="color:#E1E4E8;">   Map&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">,List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt;&gt; addressMaps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addresses</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">         .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">groupingBy</span><span style="color:#E1E4E8;">(Address</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getUserId));</span><span style="color:#6A737D;">//里面Map结构方便获取</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfos.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(userInfo </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       userInfo.</span><span style="color:#B392F0;">setAddressList</span><span style="color:#E1E4E8;">(addressMaps.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(userInfo.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }).</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 自己实现一套 Batch fetch的逻辑</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UserInfo</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAllUserWithAddress</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//先查出来所有的UserInfo信息</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; userInfos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userInfoRepository.</span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//再查出来上面userInfos里面的所有userId列表，再查询出来上面的查询结果所对应的所有Address信息</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; addresses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addressRepository.</span><span style="color:#6F42C1;">findByUserIdIn</span><span style="color:#24292E;">(userInfos.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(userInfo </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> userInfo.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//我们自己再写一个转化逻辑，把各自user info的address信息放置到响应的UserInfo实例里面；</span></span>
<span class="line"><span style="color:#24292E;">   Map&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">,List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt;&gt; addressMaps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addresses</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">         .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">groupingBy</span><span style="color:#24292E;">(Address</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getUserId));</span><span style="color:#6A737D;">//里面Map结构方便获取</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfos.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(userInfo </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       userInfo.</span><span style="color:#6F42C1;">setAddressList</span><span style="color:#24292E;">(addressMaps.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(userInfo.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userInfo;</span></span>
<span class="line"><span style="color:#24292E;">   }).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>你会发现，这要比原来的方式稍微复杂一点，但是如果我们做框架的话，上面有些逻辑可以抽到一个 Util 类里面去。</p><p>不过需要注意的是，实际工作中我们肯定不是 findAll()，而是会根据一些业务逻辑查询一个 UserInfo 的 List 信息，然后再根据查询出来的 userInfo 的 ID 列表去二次查询 Address 信息，这样最多只需要 2 个 SQL 就可完成实际业务逻辑。</p><p>那么反向思考，我们通过 Address 对象查询 UserInfo 也是一样的道理，可以先查询出 List<code>&lt;Address&gt;</code>，再查询出 List<code>&lt;Address&gt;</code>里面包含的所有 UserInfoId 列表，然后再去查询 UserInfo 信息，通过 Map 组装到 Address 里面。</p><p>Tips：实体里面如果关联关系有非常多的请求，想维护关联关系是一件非常难的事情。我们可以利用 Mybatis 的思想、JPA 的快捷查询语法，来组装想要的任何关联关系的对象。这样的代码虽然比起原生的 JPA 语法较复杂，但是比起 Mybatis 还是要简单很多，理解起来也更容易，问题反倒会更少一点。</p><p>上面我们介绍完了 Hibernate 中的做法，其实 JPA 协议也提供了另外一种解题思路：利用 @EntityGraph 注解来解决，我们详细看一下。</p><h3 id="entitygraph-使用详解" tabindex="-1">@EntityGraph 使用详解 <a class="header-anchor" href="#entitygraph-使用详解" aria-label="Permalink to &quot;@EntityGraph 使用详解&quot;">​</a></h3><p>众所周知，实体与实体之间的关联关系错综复杂，就像一个大网图一样，网状分布交叉引用。而 JPA 协议在 2.1 版本之后企图用 Entity Graph 的方式，描绘出一个实体与实体之间的关联关系。</p><p>普通做法为，通过 @ManyToOne/@OneToMany/@ManyToMany/@OneToOne 这些关联关系注解表示它们之间的关系时，只能配置 EAGER 或者 LAZY，没办法根据不同的配置、不同的关联关系加载时机。</p><p>而 JPA 协议企图通过 @NamedEntityGraph 注解来描述实体之间的关联关系，当被 @EntityGraph 使用的时候进行 EAGER 加载，以减少 N+1 的 SQL，我们来看一下具体用法。</p><h4 id="namedentitygraph-和-entitygraph-用法" tabindex="-1">@NamedEntityGraph 和 @EntityGraph 用法 <a class="header-anchor" href="#namedentitygraph-和-entitygraph-用法" aria-label="Permalink to &quot;@NamedEntityGraph 和 @EntityGraph 用法&quot;">​</a></h4><p>还是直接通过一个例子来说明，请看下面的代码。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//可以被@NamedEntityGraphs注解重复使用，只能配置在类上面，用来声明不同的EntityGraph；</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repeatable</span><span style="color:#E1E4E8;">(NamedEntityGraphs.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({TYPE})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">NamedEntityGraph</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//指定一个名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//哪些关联关系属性可以被EntityGraph包含进去，默认一个没有。可以配置多个</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">NamedAttributeNode</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">attributeNodes</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//是否所有的关联关系属性自动包含在内，默认false;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">includeAllAttributes</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//配置subgraphs，子实体图(可以理解为关联关系实体图，即如果算层级，可以配置第二层级)，可以被NamedAttributeNode引用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">NamedSubgraph</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">subgraphs</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//配置subclassSubgraphs的namedSubgraph有哪些。即如果算层级，可以配置第三层级</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">NamedSubgraph</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">subclassSubgraphs</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//可以被@NamedEntityGraphs注解重复使用，只能配置在类上面，用来声明不同的EntityGraph；</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repeatable</span><span style="color:#24292E;">(NamedEntityGraphs.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({TYPE})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">NamedEntityGraph</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//指定一个名字</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//哪些关联关系属性可以被EntityGraph包含进去，默认一个没有。可以配置多个</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">NamedAttributeNode</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">attributeNodes</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//是否所有的关联关系属性自动包含在内，默认false;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">includeAllAttributes</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//配置subgraphs，子实体图(可以理解为关联关系实体图，即如果算层级，可以配置第二层级)，可以被NamedAttributeNode引用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">NamedSubgraph</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">subgraphs</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//配置subclassSubgraphs的namedSubgraph有哪些。即如果算层级，可以配置第三层级</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">NamedSubgraph</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">subclassSubgraphs</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>上述代码中，可以看到 @NamedEntityGraphs 能够配置多个 @NamedEntityGraph。我们接着往下看。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//只能使用在实体类上面</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({TYPE})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">NamedEntityGraphs</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">NamedEntityGraph</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//可以同时指定多个NamedEntityGraph</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//只能使用在实体类上面</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({TYPE})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">NamedEntityGraphs</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">NamedEntityGraph</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//可以同时指定多个NamedEntityGraph</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面这段代码中，NamedSubgraph 用来指定关联关系的策略，也就关联关系有两层。</p><p>我们再看一下 @NamedEntityGraph 里面的 NamedAttributeNode 属性有哪些值，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 用来进行属性节点的描述</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">NamedAttributeNode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//要包含的关联关系的属性的名字，必填</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//如果我们在@NamedEntityGraph里面配置了子关联关系，这个是配置subgraph的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">subgraph</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//当关联关系是被Map结构引用的时候，我们可以指定key的方式，一般很少用</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">keySubgraph</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 用来进行属性节点的描述</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">NamedAttributeNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//要包含的关联关系的属性的名字，必填</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//如果我们在@NamedEntityGraph里面配置了子关联关系，这个是配置subgraph的名字</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">subgraph</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//当关联关系是被Map结构引用的时候，我们可以指定key的方式，一般很少用</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">keySubgraph</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面就是对 @NamedAttributeNode 的介绍，我们再看一下 @EntityGraph 里面的 @NamedSubgraph 的结构，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">NamedSubgraph</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//指定一个名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//子关联关系的类的class</span></span>
<span class="line"><span style="color:#E1E4E8;">    Class </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> void.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//二层关联关系的要包含的关联关系的属性的名字</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">NamedAttributeNode</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">attributeNodes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RUNTIME)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">NamedSubgraph</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//指定一个名字</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//子关联关系的类的class</span></span>
<span class="line"><span style="color:#24292E;">    Class </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> void.class;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//二层关联关系的要包含的关联关系的属性的名字</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">NamedAttributeNode</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">attributeNodes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>其中，@NamedEntityGraph 的注解都是配置在实体本身上面的，而 @EntityGraph 是用在 ***Repository 接口里的方法中的。</p><p>接着我们再来了解一下 @EntityGraph 注解的语法，如下所示。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ ElementType.METHOD, ElementType.ANNOTATION_TYPE })</span></span>
<span class="line"><span style="color:#6A737D;">//EntityGraph 作用在Repository的接口里面的方法上面</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">EntityGraph</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//指@EntityGraph注解引用的@NamedEntityGraph里面定义的name，如果是空EntityGraph就不会起作用，如果为空相当于没有配置；</span></span>
<span class="line"><span style="color:#E1E4E8;">   String </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//EntityGraph的类型，默认是EntityGraphType.FETCH类型，我们接着往下看EntityGraphType一共有几个值</span></span>
<span class="line"><span style="color:#E1E4E8;">   EntityGraphType </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> EntityGraphType.FETCH;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//可以指定attributePaths用来覆盖@NamedEntityGraph里面的attributeNodes的配置，默认配置是空，以@NamedEntityGraph里面的为准；</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">attributePaths</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//JPA 2.1支持的EntityGraphType对应的枚举值</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EntityGraphType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//LOAD模式，当被指定了这种模式、被@EntityGraph管理的attributes的时候，原来的FetchType的类型直接忽略变成Eager模式，而不被@EntityGraph管理的attributes还是保持默认的FetchType</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">LOAD</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;javax.persistence.loadgraph&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//FETCH模式，当被指定了这种模式、被@EntityGraph管理的attributes的时候，原来的FetchType的类型直接忽略变成Eager模式，而不被@EntityGraph管理的attributes将会变成Lazy模式，和LOAD的区别就是对不被@NamedEntityGraph配置的关联关系的属性的FetchType不一样；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">FETCH</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;javax.persistence.fetchgraph&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String key;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EntityGraphType</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> key;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ ElementType.METHOD, ElementType.ANNOTATION_TYPE })</span></span>
<span class="line"><span style="color:#6A737D;">//EntityGraph 作用在Repository的接口里面的方法上面</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">EntityGraph</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//指@EntityGraph注解引用的@NamedEntityGraph里面定义的name，如果是空EntityGraph就不会起作用，如果为空相当于没有配置；</span></span>
<span class="line"><span style="color:#24292E;">   String </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//EntityGraph的类型，默认是EntityGraphType.FETCH类型，我们接着往下看EntityGraphType一共有几个值</span></span>
<span class="line"><span style="color:#24292E;">   EntityGraphType </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> EntityGraphType.FETCH;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//可以指定attributePaths用来覆盖@NamedEntityGraph里面的attributeNodes的配置，默认配置是空，以@NamedEntityGraph里面的为准；</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">attributePaths</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//JPA 2.1支持的EntityGraphType对应的枚举值</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EntityGraphType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//LOAD模式，当被指定了这种模式、被@EntityGraph管理的attributes的时候，原来的FetchType的类型直接忽略变成Eager模式，而不被@EntityGraph管理的attributes还是保持默认的FetchType</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">LOAD</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;javax.persistence.loadgraph&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//FETCH模式，当被指定了这种模式、被@EntityGraph管理的attributes的时候，原来的FetchType的类型直接忽略变成Eager模式，而不被@EntityGraph管理的attributes将会变成Lazy模式，和LOAD的区别就是对不被@NamedEntityGraph配置的关联关系的属性的FetchType不一样；</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">FETCH</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;javax.persistence.fetchgraph&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String key;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EntityGraphType</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> key;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>现在你知道这个注解的基本用法了，下面我们通过实例来具体操作一下。</p><h4 id="entitygraph-使用实例" tabindex="-1">@EntityGraph 使用实例 <a class="header-anchor" href="#entitygraph-使用实例" aria-label="Permalink to &quot;@EntityGraph 使用实例&quot;">​</a></h4><p>我们通过改造 Address 和 UserInfo 实体，来分别测试一下 @NamedEntityGraph 和 @EntityGraph 的用法。</p><p><strong>第一步：在实体里面配置 @EntityGraph</strong>，关键代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SuperBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//这里我们直接使用@NamedEntityGraph，因为只需要配置一个@NamedEntityGraph，我们指定一个名字getAllUserInfo，指定被这个名字的实体试图关联的关联关系属性是userInfo</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NamedEntityGraph</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;getAllUserInfo&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">attributeNodes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">NamedAttributeNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String city;</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">JsonBackReference</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//防止JSON死循环</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">ManyToOne</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.PERSIST,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.LAZY)</span><span style="color:#6A737D;">//采用默认的lazy模式</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> UserInfo userInfo;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Entity</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SuperBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Table</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ToString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exclude</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;addressList&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">//UserInfo对应的关联关系，我们利用@NamedEntityGraphs配置了两个，一个是针对Address的关联关系，一个是name叫rooms的实体图包含了rooms属性；我们在UserInfo里面增加了两个关联关系；</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">NamedEntityGraphs</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {@</span><span style="color:#F97583;">NamedEntityGraph</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;addressGraph&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">attributeNodes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">NamedAttributeNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;addressList&quot;</span><span style="color:#E1E4E8;">)),@</span><span style="color:#F97583;">NamedEntityGraph</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rooms&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">attributeNodes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">NamedAttributeNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rooms&quot;</span><span style="color:#E1E4E8;">))})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BaseEntity</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String telephone;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Integer ages;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//默认LAZY模式</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mappedBy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userInfo&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.PERSIST,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; addressList;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//默认EAGER模式</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">OneToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">cascade</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CascadeType.PERSIST,</span><span style="color:#79B8FF;">fetch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FetchType.EAGER)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Room</span><span style="color:#E1E4E8;">&gt; rooms;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SuperBuilder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//这里我们直接使用@NamedEntityGraph，因为只需要配置一个@NamedEntityGraph，我们指定一个名字getAllUserInfo，指定被这个名字的实体试图关联的关联关系属性是userInfo</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NamedEntityGraph</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;getAllUserInfo&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">attributeNodes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">NamedAttributeNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String city;</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">JsonBackReference</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//防止JSON死循环</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">ManyToOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.PERSIST,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.LAZY)</span><span style="color:#6A737D;">//采用默认的lazy模式</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserInfo userInfo;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SuperBuilder</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ToString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">exclude</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;addressList&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//UserInfo对应的关联关系，我们利用@NamedEntityGraphs配置了两个，一个是针对Address的关联关系，一个是name叫rooms的实体图包含了rooms属性；我们在UserInfo里面增加了两个关联关系；</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">NamedEntityGraphs</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {@</span><span style="color:#D73A49;">NamedEntityGraph</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;addressGraph&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">attributeNodes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">NamedAttributeNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;addressList&quot;</span><span style="color:#24292E;">)),@</span><span style="color:#D73A49;">NamedEntityGraph</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;rooms&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">attributeNodes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">NamedAttributeNode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;rooms&quot;</span><span style="color:#24292E;">))})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BaseEntity</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String telephone;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer ages;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//默认LAZY模式</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mappedBy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userInfo&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.PERSIST,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.LAZY)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; addressList;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//默认EAGER模式</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">OneToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">cascade</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CascadeType.PERSIST,</span><span style="color:#005CC5;">fetch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FetchType.EAGER)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Room</span><span style="color:#24292E;">&gt; rooms;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>**第二步：在我们需要的 *<strong>Repository 的方法上面直接使用 @EntityGraph</strong>，关键代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//因为要用findAll()做测试，所以可以覆盖JpaRepository里面的findAll()方法，加上@EntityGraph注解</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserInfoRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//我们指定EntityGraph引用的是，在UserInfo实例里面配置的name=addressGraph的NamedEntityGraph；</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 这里采用的是LOAD的类型，也就是说被addressGraph配置的实体图属性address采用的fetch会变成 FetchType.EAGER模式，而没有被addressGraph实体图配置关联关系属性room还是采用默认的EAGER模式</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EntityGraph</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;addressGraph&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> EntityGraph.EntityGraphType.LOAD)</span></span>
<span class="line"><span style="color:#E1E4E8;">   List&lt;</span><span style="color:#F97583;">UserInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//因为要用findAll()做测试，所以可以覆盖JpaRepository里面的findAll()方法，加上@EntityGraph注解</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserInfoRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;{</span></span>
<span class="line"><span style="color:#24292E;">   @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//我们指定EntityGraph引用的是，在UserInfo实例里面配置的name=addressGraph的NamedEntityGraph；</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 这里采用的是LOAD的类型，也就是说被addressGraph配置的实体图属性address采用的fetch会变成 FetchType.EAGER模式，而没有被addressGraph实体图配置关联关系属性room还是采用默认的EAGER模式</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EntityGraph</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;addressGraph&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EntityGraph.EntityGraphType.LOAD)</span></span>
<span class="line"><span style="color:#24292E;">   List&lt;</span><span style="color:#D73A49;">UserInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>同样的道理，其对于 AddressRepository 也是适用的，代码如下。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AddressRepository</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JpaRepository</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">&gt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Override</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//可以覆盖原始方法，添加上不同的@EntityGraph策略</span></span>
<span class="line"><span style="color:#6A737D;">//使用@EntityGraph查询所有Address的时候，指定name = &quot;getAllUserInfo&quot;的@NamedEntityGraph，采用默认的EntityGraphType.FETCH，如果Address里面有多个关联关系的时候，只有在name = &quot;getAllUserInfo&quot;的实体图配置的userInfo属性上采用Eager模式，其他关联关系属性没有指定，默认采用LAZY模式；</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EntityGraph</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;getAllUserInfo&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">Address</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">findAll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AddressRepository</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;{</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//可以覆盖原始方法，添加上不同的@EntityGraph策略</span></span>
<span class="line"><span style="color:#6A737D;">//使用@EntityGraph查询所有Address的时候，指定name = &quot;getAllUserInfo&quot;的@NamedEntityGraph，采用默认的EntityGraphType.FETCH，如果Address里面有多个关联关系的时候，只有在name = &quot;getAllUserInfo&quot;的实体图配置的userInfo属性上采用Eager模式，其他关联关系属性没有指定，默认采用LAZY模式；</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EntityGraph</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;getAllUserInfo&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Address</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">findAll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>第三步：看一下上面的两个方法执行的 SQL</strong>。</p><p>当我们再次执行 userInfoRepository.findAll(); 这个方法的时候会发现，被配置 EntityGraph 的 Address 和 user_info 通过 left join 一条 SQL 就把所有的信息都查出来了，SQL 如下所示。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">org.hibernate.SQL                        </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">select userinfo0_.id                      as id1_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.id                    as id1_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.create_time             as create_t2_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.create_user_id          as create_u3_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.last_modified_time      as last_mod4_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.last_modified_user_id   as last_mod5_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.version                 as version6_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.ages                    as ages7_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.email_address           as email_ad8_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.last_name               as last_nam9_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.name                    as name10_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo0_.telephone               as telepho11_2_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.create_time           as create_t2_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.create_user_id        as create_u3_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.last_modified_time    as last_mod4_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.last_modified_user_id as last_mod5_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.version               as version6_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.city                  as city7_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.user_info_id          as user_inf8_0_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.user_info_id          as user_inf8_0_0__,</span></span>
<span class="line"><span style="color:#E1E4E8;">       addresslis1_.id                    as id1_0_0__</span></span>
<span class="line"><span style="color:#E1E4E8;">from user_info userinfo0_</span></span>
<span class="line"><span style="color:#E1E4E8;">    left outer join address addresslis1_ on userinfo0_.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addresslis1_.user_info_id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">org.hibernate.SQL                        </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">select userinfo0_.id                      as id1_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.id                    as id1_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.create_time             as create_t2_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.create_user_id          as create_u3_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.last_modified_time      as last_mod4_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.last_modified_user_id   as last_mod5_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.version                 as version6_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.ages                    as ages7_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.email_address           as email_ad8_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.last_name               as last_nam9_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.name                    as name10_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo0_.telephone               as telepho11_2_0_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.create_time           as create_t2_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.create_user_id        as create_u3_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.last_modified_time    as last_mod4_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.last_modified_user_id as last_mod5_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.version               as version6_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.city                  as city7_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.user_info_id          as user_inf8_0_1_,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.user_info_id          as user_inf8_0_0__,</span></span>
<span class="line"><span style="color:#24292E;">       addresslis1_.id                    as id1_0_0__</span></span>
<span class="line"><span style="color:#24292E;">from user_info userinfo0_</span></span>
<span class="line"><span style="color:#24292E;">    left outer join address addresslis1_ on userinfo0_.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> addresslis1_.user_info_id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>而我们没有配置 rooms 这个关联关系的属性时，rooms 的查询还是会触发 N+1 的 SQL。</p><p>从中可以看到 @EntityGraph 的效果有点类似 Hibernate 里面提供的 FetchModel.JOIN 的模式，但不同的是 @EntityGraph 可以搭配任何的查询情况，只需要我们在查询方法上直接加 @EntityGraph 注解即可。</p><p>这种方法还有个优势就是 @EntityGraph 和 @NamedEntityGraph 是 JPA 协议规定的，这样可以对 Hibernate 无感。</p><p>那么我们再看一下 @ManyToOne 的模式是否同样奏效，访问 addressRepository.findAll() 这个方法看一下 SQL，如下所示。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">org.hibernate.SQL                        </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">select address0_.id                     as id1_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.id                    as id1_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       address0_.create_time            as create_t2_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       address0_.create_user_id         as create_u3_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       address0_.last_modified_time     as last_mod4_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       address0_.last_modified_user_id  as last_mod5_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       address0_.version                as version6_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       address0_.city                   as city7_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       address0_.user_info_id           as user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.create_time           as create_t2_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.create_user_id        as create_u3_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.last_modified_time    as last_mod4_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.last_modified_user_id as last_mod5_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.version               as version6_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.ages                  as ages7_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.email_address         as email_ad8_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.last_name             as last_nam9_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.name                  as name10_2_1_,</span></span>
<span class="line"><span style="color:#E1E4E8;">       userinfo1_.telephone             as telepho11_2_1_</span></span>
<span class="line"><span style="color:#E1E4E8;">from address address0_</span></span>
<span class="line"><span style="color:#E1E4E8;">         left outer join user_info userinfo1_ on address0_.user_info_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userinfo1_.id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">org.hibernate.SQL                        </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">select address0_.id                     as id1_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.id                    as id1_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       address0_.create_time            as create_t2_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       address0_.create_user_id         as create_u3_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       address0_.last_modified_time     as last_mod4_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       address0_.last_modified_user_id  as last_mod5_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       address0_.version                as version6_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       address0_.city                   as city7_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       address0_.user_info_id           as user_inf8_0_0_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.create_time           as create_t2_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.create_user_id        as create_u3_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.last_modified_time    as last_mod4_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.last_modified_user_id as last_mod5_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.version               as version6_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.ages                  as ages7_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.email_address         as email_ad8_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.last_name             as last_nam9_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.name                  as name10_2_1_,</span></span>
<span class="line"><span style="color:#24292E;">       userinfo1_.telephone             as telepho11_2_1_</span></span>
<span class="line"><span style="color:#24292E;">from address address0_</span></span>
<span class="line"><span style="color:#24292E;">         left outer join user_info userinfo1_ on address0_.user_info_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userinfo1_.id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>可以看到 address left join 的模式中，一个 SQL 把所有的 address 和 user_info 都查询出来了。</p><p>综上所述，@EntityGraph 可以用在任何 ***Repository 的查询方法上，针对不同的场景配置不同的关联关系策略，就可以减少 N+1 的 SQL，成为一条 SQL。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过这两讲的介绍，你可以知道关联关系在 Hibernate 的 JPA 中的优点就是使用方便、效率高；而缺点就是需要了解很多知识，才能知道最佳实践是什么。</p><p>关于这四种处理 N+1 SQL 的方法，你在使用的时候可以根据实际情况自由选择，不局限于某一种解决方式。</p><p>在我介绍的内容中，有一些方法不是 JPA 协议的标准，而是 Hibernate 的语法，所以你在用的时候要看一下注解或者配置的源码注释，看看是否有变化，再根据实际情况自由调整。不过思路上的转化可以不需要关心版本的变化。</p><p>好了，本讲到这里就结束了。全网最全的 N+1 SQL 处理方案，如果你觉得有用，就动动手指分享吧。下一讲我们来聊聊 SPEL 表达式的相关内容，再见。</p><blockquote><p>点击下方链接查看源码（不定时更新）<br><a href="https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa" target="_blank" rel="noreferrer">https://github.com/zhangzhenhuajack/spring-boot-guide/tree/master/spring-data/spring-data-jpa</a></p></blockquote>`,94),o=[e];function r(t,c,E,y,i,_){return n(),a("div",null,o)}const b=s(p,[["render",r]]);export{u as __pageData,b as default};
