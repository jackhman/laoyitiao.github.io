import{_ as p,j as o,o as e,g as t,k as l,h as n,s,Q as c}from"./chunks/framework.a0d18f64.js";const O=JSON.parse('{"title":"07状态管理：Flutter状态管理及对比选型","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3524) 07  状态管理：Flutter 状态管理及对比选型.md","filePath":"posts/frontEnd/101-Flutter快学快用24讲文档/(3524) 07  状态管理：Flutter 状态管理及对比选型.md","lastUpdated":1696682708000}'),r={name:"posts/frontEnd/101-Flutter快学快用24讲文档/(3524) 07  状态管理：Flutter 状态管理及对比选型.md"},E=s("h1",{id:"_07状态管理-flutter状态管理及对比选型",tabindex:"-1"},[n("07状态管理：Flutter状态管理及对比选型 "),s("a",{class:"header-anchor",href:"#_07状态管理-flutter状态管理及对比选型","aria-label":'Permalink to "07状态管理：Flutter状态管理及对比选型"'},"​")],-1),y=s("p",null,"上一课时我详细介绍了有/无状态组件的应用设计，但是在设计过程中，还缺乏一个对状态管理的考虑。本课时介绍状态管理设计的必要性，以及一些常见的状态管理技术对比，最后再着重通过 Provider 来优化前一课时中的例子。",-1),i=s("h3",{id:"状态管理场景",tabindex:"-1"},[n("状态管理场景 "),s("a",{class:"header-anchor",href:"#状态管理场景","aria-label":'Permalink to "状态管理场景"'},"​")],-1),d=s("p",null,"上一课时的例子中，只涉及一个有状态的组件 article_like_bar ，接下来我们需要实现另外一个详情页面，并且在详情页面中也需要一个点赞功能，具体的界面效果可以参考动图 1 （为了界面更好，我在上一课时的基础上增加了一些样式）。",-1),F=s("p",null,"图 1 增加二级点赞详情页面效果",-1),m=s("p",null,"在上面的动图例子中，你是否发现了一个问题？第一个页面的点赞数与第二个页面的点赞数并不同步。在实际项目开发过中，需求方希望二级详情页面的点赞数能与第一个页面的点赞数同步。",-1),C=s("p",null,"如果不引入新的技术方案，能想到的办法就是将该状态进行提升，放到其共同的父节点上，然后将父节点设计为有状态组件，并提供修改状态的方法给到子组件。可以用图 2 来表示。",-1),g=s("p",null,"图 2 状态提升共享方式",-1),u=s("p",null,"上面的方式是可以做到这点，但是你有没有发现，只因为一个点赞行为，就需要将两个页面的所有组件（静态组件和动图组件）进行重新 build ，成本实在太高，这也违背了我们上一课时的组件设计原则（尽可能减少动态组件下的静态组件）。为了更好地解决这个问题，我们就需要引入一些状态管理的方法，下面就介绍一些常见的技术方案，同时做一个对比。",-1),A=s("h3",{id:"状态选型对比",tabindex:"-1"},[n("状态选型对比 "),s("a",{class:"header-anchor",href:"#状态选型对比","aria-label":'Permalink to "状态选型对比"'},"​")],-1),h=s("p",null,"状态管理技术不少于 10 种，但是为了高效，我只介绍其中比较核心的三个，第一个是原生所使用的 InheritedWidget ；第二个是相对前端同学比较熟悉的 Redux 技术；最后一个则是我们推荐使用的技术 Provider 。",-1),D=s("h4",{id:"inheritedwidget",tabindex:"-1"},[n("InheritedWidget "),s("a",{class:"header-anchor",href:"#inheritedwidget","aria-label":'Permalink to "InheritedWidget"'},"​")],-1),B=s("p",null,"InheritedWidget 核心原理和状态提升原理一致，将 likeNum 提升到根节点，但不需要一层层地将变量传递下去，只需要在根节点声明即可。",-1),k=s("p",null,"现在我们有一个页面，页面下有两个组件，两个组件都需要用同一个名字，并且第二个组件的名字可以点击切换随机名字，而切换以后需要及时更新第一个组件中的名字。页面效果如图 3 所示。",-1),_=s("p",null,"图 3 多组件状态共享效果",-1),v=s("p",null,"按照上面介绍的例子以及上一课时的知识点，画一个简单的组件树，并且附带上需要的状态属性，如图 4 所示。",-1),N=c("",69),f=s("p",null,"图 5 多页面状态点赞同步效果",-1),b=s("h3",{id:"总结",tabindex:"-1"},[n("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),x=s("p",null,"以上就是本课时的所有内容，学完本课时你需要掌握使用状态管理的场景，常见的状态管理有哪些。本课时的核心是需要你掌握 Provider 的状态管理技术方案。",-1),S=s("p",null,"至此，我已经将组件的设计基本介绍完毕，接下来我将介绍组件的单元测试，以及完善组件功能。如果你有疑问，可以在下方留言。",-1),W=s("p",null,[s("a",{href:"https://github.com/love-flutter/flutter-column",target:"_blank",rel:"noreferrer"},"点击此链接查看本课时源码")],-1);function P(w,M,I,T,L,R){const a=o("Image");return e(),t("div",null,[E,y,i,d,l(a,{alt:"20200620_110314.gif",src:"https://s0.lgstatic.com/i/image/M00/2A/89/CgqCHl78dduAVpypABtxqF5qwAA906.gif"}),n(),F,m,C,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/2A/7D/Ciqc1F78dfGARKuUAACYOe66MlY026.png"}),n(),g,u,A,h,D,B,k,l(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/2A/89/CgqCHl78diqALC0dAACKe0B0HjU731.png"}),n(),_,v,l(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/2A/7D/Ciqc1F78djSAUVqwAACHGNkmeCM922.png"}),n(),N,l(a,{alt:"20200620_213558.gif",src:"https://s0.lgstatic.com/i/image/M00/2A/7E/Ciqc1F78dpSARI7HACF3LNRp7LA326.gif"}),n(),f,b,x,S,W])}const G=p(r,[["render",P]]);export{O as __pageData,G as default};
