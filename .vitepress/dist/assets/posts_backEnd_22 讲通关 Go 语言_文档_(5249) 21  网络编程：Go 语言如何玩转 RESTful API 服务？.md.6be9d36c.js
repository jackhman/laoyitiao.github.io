import{_ as n,j as p,o as l,g as o,k as e,h as t,Q as c,s}from"./chunks/framework.cfb14fe0.js";const A=JSON.parse('{"title":"21网络编程：Go语言如何玩转RESTfulAPI服务？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5249) 21  网络编程：Go 语言如何玩转 RESTful API 服务？.md","filePath":"posts/backEnd/22 讲通关 Go 语言_文档/(5249) 21  网络编程：Go 语言如何玩转 RESTful API 服务？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/22 讲通关 Go 语言_文档/(5249) 21  网络编程：Go 语言如何玩转 RESTful API 服务？.md"},E=c(`<h1 id="_21网络编程-go语言如何玩转restfulapi服务" tabindex="-1">21网络编程：Go语言如何玩转RESTfulAPI服务？ <a class="header-anchor" href="#_21网络编程-go语言如何玩转restfulapi服务" aria-label="Permalink to &quot;21网络编程：Go语言如何玩转RESTfulAPI服务？&quot;">​</a></h1><p>从这一讲开始，我将带你学习本专栏的第五模块，在这个模块中，你将学到我们项目中最常用的编码操作，也就是编写 RESTful API 和 RPC 服务。在实际开发项目中，你编写的这些服务可以被其他服务使用，这样就组成了微服务的架构；也可以被前端调用，这样就可以前后端分离。</p><p>今天我就先来为你介绍什么是 RESTful API，以及 Go 语言是如何玩转 RESTful API 的。</p><h3 id="什么是-restful-api" tabindex="-1">什么是 RESTful API <a class="header-anchor" href="#什么是-restful-api" aria-label="Permalink to &quot;什么是 RESTful API&quot;">​</a></h3><p>RESTful API 是一套规范，它可以规范我们如何对服务器上的资源进行操作。在了解 RESTful API 之前，我先为你介绍下 HTTP Method，因为 RESTful API 和它是密不可分的。</p><p>说起 HTTP Method，最常见的就是<strong>POST</strong> 和<strong>GET</strong> ，其实最早在 HTTP 0.9 版本中，只有一个<strong>GET</strong> 方法，该方法是一个<strong>幂等方法</strong>，用于获取服务器上的资源，也就是我们在浏览器中直接输入网址回车请求的方法。</p><p>在 HTTP 1.0 版本中又增加了<strong>HEAD</strong> 和<strong>POST</strong>方法，其中常用的是 POST 方法，一般用于给服务端提交一个资源，导致服务器的资源发生变化。</p><p>随着网络越来越复杂，发现这两个方法是不够用的，就继续新增了方法。所以在 HTTP1.1 版本的时候，一口气增加到了 9 个，新增的方法有 HEAD、OPTIONS、PUT、DELETE、TRACE、PATCH 和 CONNECT。下面我为你一一介绍它们的作用。</p><ol><li><p>GET 方法可请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据。</p></li><li><p>HEAD 方法用于请求一个与 GET 请求的响应相同的响应，但没有响应体。</p></li><li><p>POST 方法用于将实体提交到指定的资源，通常导致服务器上的状态变化或副作用。</p></li><li><p>PUT 方法用于请求有效载荷替换目标资源的所有当前表示。</p></li><li><p>DELETE 方法用于删除指定的资源。</p></li><li><p>CONNECT 方法用于建立一个到由目标资源标识的服务器的隧道。</p></li><li><p>OPTIONS 方法用于描述目标资源的通信选项。</p></li><li><p>TRACE 方法用于沿着到目标资源的路径执行一个消息环回测试。</p></li><li><p>PATCH 方法用于对资源应用部分修改。</p></li></ol><p>从以上每个方法的介绍可以看到，HTTP 规范针对每个方法都给出了明确的定义，所以我们使用的时候也要尽可能地<strong>遵循这些定义</strong>，这样我们在开发中才可以更好地协作。</p><p>理解了这些 HTTP 方法，就可以更好地理解 RESTful API 规范了，因为 RESTful API 规范就是基于这些 HTTP 方法规范我们对服务器资源的操作，同时规范了 URL 的样式和 HTTP Status Code。</p><p>在 RESTful API 中，使用的主要是以下五种 HTTP 方法：</p><ol><li><p>GET，表示读取服务器上的资源；</p></li><li><p>POST，表示在服务器上创建资源；</p></li><li><p>PUT，表示更新或者替换服务器上的资源；</p></li><li><p>DELETE，表示删除服务器上的资源；</p></li><li><p>PATCH，表示更新 / 修改资源的一部分。</p></li></ol><p>以上 HTTP 方法在 RESTful API 规范中是一个操作，操作的就是服务器的资源，服务器的资源通过特定的 URL 表示。</p><p>现在我们通过一些示例让你更好地理解 RESTful API，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">HTTP GET https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//www.flysnow.org/users</span></span>
<span class="line"><span style="color:#E1E4E8;">HTTP GET https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//www.flysnow.org/users/123</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HTTP GET https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//www.flysnow.org/users</span></span>
<span class="line"><span style="color:#24292E;">HTTP GET https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//www.flysnow.org/users/123</span></span></code></pre></div><p>以上是两个 GET 方法的示例：</p><ul><li><p>第一个表示获取所有用户的信息；</p></li><li><p>第二个表示获取 ID 为 123 用户的信息。</p></li></ul><p>下面再看一个 POST 方法的示例，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">HTTP POST https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//www.flysnow.org/users</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HTTP POST https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//www.flysnow.org/users</span></span></code></pre></div><p>这个示例表示创建一个用户，通过 POST 方法给服务器提供创建这个用户所需的全部信息。</p><blockquote><p>注意：这里 users 是个复数。</p></blockquote><p>现在你已经知道了如何创建一个用户，那么如果要更新某个特定的用户怎么做呢？其实也非常简单，示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">HTTP PUT https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//www.flysnow.org/users/123</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HTTP PUT https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//www.flysnow.org/users/123</span></span></code></pre></div><p>这表示要更新 / 替换 ID 为 123 的这个用户，在更新的时候，会通过 PUT 方法提供更新这个用户需要的全部用户信息。这里 PUT 方法和 POST 方法不太一样的是，从 URL 上看，PUT 方法操作的是单个资源，比如这里 ID 为 123 的用户。</p><blockquote><p>小提示：如果要更新一个用户的部分信息，使用 PATCH 方法更恰当。</p></blockquote><p>看到这里，相信你已经知道了如何删除一个用户，示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">HTTP DELETE https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//www.flysnow.org/users/123</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HTTP DELETE https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//www.flysnow.org/users/123</span></span></code></pre></div><p>DELETE 方法的使用和 PUT 方法一样，也是操作单个资源，这里是删除 ID 为 123 的这个用户。</p><h3 id="一个简单的-restful-api" tabindex="-1">一个简单的 RESTful API <a class="header-anchor" href="#一个简单的-restful-api" aria-label="Permalink to &quot;一个简单的 RESTful API&quot;">​</a></h3><p>相信你已经非常了解什么是 RESTful API 了，现在开始，我会带你通过一个使用 Golang 实现 RESTful API 风格的示例，加深 RESTful API 的理解。</p><p>Go 语言的一个很大的优势，就是可以很容易地开发出网络后台服务，而且性能快、效率高。在开发后端 HTTP 网络应用服务的时候，我们需要处理很多 HTTP 的请求访问，比如常见的RESTful API 服务，就要处理很多 HTTP 请求，然后把处理的信息返回给使用者。对于这类需求，Golang 提供了内置的 net/http 包帮我们处理这些 HTTP 请求，让我们可以比较方便地开发一个 HTTP 服务。</p><p>下面我们来看一个简单的 HTTP 服务的 Go 语言实现，代码如下所示：</p><p><em>ch21/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#79B8FF;">HandleFunc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">,handleUsers)</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#79B8FF;">ListenAndServe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:8080&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleUsers</span><span style="color:#E1E4E8;">(w http.ResponseWriter, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request){</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Fprintln</span><span style="color:#E1E4E8;">(w,</span><span style="color:#9ECBFF;">&quot;ID:1,Name:张三&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Fprintln</span><span style="color:#E1E4E8;">(w,</span><span style="color:#9ECBFF;">&quot;ID:2,Name:李四&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   fmt.</span><span style="color:#79B8FF;">Fprintln</span><span style="color:#E1E4E8;">(w,</span><span style="color:#9ECBFF;">&quot;ID:3,Name:王五&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#005CC5;">HandleFunc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">,handleUsers)</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#005CC5;">ListenAndServe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:8080&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleUsers</span><span style="color:#24292E;">(w http.ResponseWriter, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request){</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Fprintln</span><span style="color:#24292E;">(w,</span><span style="color:#032F62;">&quot;ID:1,Name:张三&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Fprintln</span><span style="color:#24292E;">(w,</span><span style="color:#032F62;">&quot;ID:2,Name:李四&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Fprintln</span><span style="color:#24292E;">(w,</span><span style="color:#032F62;">&quot;ID:3,Name:王五&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个示例运行后，你在浏览器中输入 <a href="http://localhost:8080/users" target="_blank" rel="noreferrer">http://localhost:8080/users</a>, 就可以看到如下内容信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ID</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,Name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">张三</span></span>
<span class="line"><span style="color:#E1E4E8;">ID</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,Name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">李四</span></span>
<span class="line"><span style="color:#E1E4E8;">ID</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,Name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">王五</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ID</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,Name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">张三</span></span>
<span class="line"><span style="color:#24292E;">ID</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,Name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">李四</span></span>
<span class="line"><span style="color:#24292E;">ID</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,Name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">王五</span></span></code></pre></div><p>也就是获取所有的用户信息，但是这并不是一个 RESTful API，因为使用者不仅可以通过 HTTP GET 方法获得所有的用户信息，还可以通过 POST、DELETE、PUT 等 HTTP 方法获得所有的用户信息，这显然不符合 RESTful API 的规范。</p><p>现在我对以上示例进行修改，使它符合 RESTful API 的规范，修改后的示例代码如下所示：</p><p><em>ch20/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleUsers</span><span style="color:#E1E4E8;">(w http.ResponseWriter, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request){</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> r.Method {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      w.</span><span style="color:#79B8FF;">WriteHeader</span><span style="color:#E1E4E8;">(http.StatusOK)</span></span>
<span class="line"><span style="color:#E1E4E8;">      fmt.</span><span style="color:#79B8FF;">Fprintln</span><span style="color:#E1E4E8;">(w,</span><span style="color:#9ECBFF;">&quot;ID:1,Name:张三&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      fmt.</span><span style="color:#79B8FF;">Fprintln</span><span style="color:#E1E4E8;">(w,</span><span style="color:#9ECBFF;">&quot;ID:2,Name:李四&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      fmt.</span><span style="color:#79B8FF;">Fprintln</span><span style="color:#E1E4E8;">(w,</span><span style="color:#9ECBFF;">&quot;ID:3,Name:王五&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      w.</span><span style="color:#79B8FF;">WriteHeader</span><span style="color:#E1E4E8;">(http.StatusNotFound)</span></span>
<span class="line"><span style="color:#E1E4E8;">      fmt.</span><span style="color:#79B8FF;">Fprintln</span><span style="color:#E1E4E8;">(w,</span><span style="color:#9ECBFF;">&quot;not found&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleUsers</span><span style="color:#24292E;">(w http.ResponseWriter, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request){</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> r.Method {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      w.</span><span style="color:#005CC5;">WriteHeader</span><span style="color:#24292E;">(http.StatusOK)</span></span>
<span class="line"><span style="color:#24292E;">      fmt.</span><span style="color:#005CC5;">Fprintln</span><span style="color:#24292E;">(w,</span><span style="color:#032F62;">&quot;ID:1,Name:张三&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      fmt.</span><span style="color:#005CC5;">Fprintln</span><span style="color:#24292E;">(w,</span><span style="color:#032F62;">&quot;ID:2,Name:李四&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      fmt.</span><span style="color:#005CC5;">Fprintln</span><span style="color:#24292E;">(w,</span><span style="color:#032F62;">&quot;ID:3,Name:王五&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      w.</span><span style="color:#005CC5;">WriteHeader</span><span style="color:#24292E;">(http.StatusNotFound)</span></span>
<span class="line"><span style="color:#24292E;">      fmt.</span><span style="color:#005CC5;">Fprintln</span><span style="color:#24292E;">(w,</span><span style="color:#032F62;">&quot;not found&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里我只修改了 handleUsers 函数，在该函数中增加了只在使用 GET 方法时，才获得所有用户的信息，其他情况返回 not found。</p><p>现在再运行这个示例，会发现只能通过 HTTP GET 方法进行访问了，使用其他方法会提示 not found。</p><h3 id="restful-json-api" tabindex="-1">RESTful JSON API <a class="header-anchor" href="#restful-json-api" aria-label="Permalink to &quot;RESTful JSON API&quot;">​</a></h3><p>在项目中最常见的是使用 JSON 格式传输信息，也就是我们提供的 RESTful API 要返回 JSON 内容给使用者。</p><p>同样用上面的示例，我把它改造成可以返回 JSON 内容的方式，示例代码如下所示：</p><p><em>ch20/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//数据源，类似MySQL中的数据</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []User{</span></span>
<span class="line"><span style="color:#E1E4E8;">   {ID: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,Name: </span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">   {ID: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,Name: </span><span style="color:#9ECBFF;">&quot;李四&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">   {ID: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,Name: </span><span style="color:#9ECBFF;">&quot;王五&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleUsers</span><span style="color:#E1E4E8;">(w http.ResponseWriter, r </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">http.Request){</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> r.Method {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      users,err</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">json.</span><span style="color:#79B8FF;">Marshal</span><span style="color:#E1E4E8;">(users)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         w.</span><span style="color:#79B8FF;">WriteHeader</span><span style="color:#E1E4E8;">(http.StatusInternalServerError)</span></span>
<span class="line"><span style="color:#E1E4E8;">         fmt.</span><span style="color:#79B8FF;">Fprint</span><span style="color:#E1E4E8;">(w,</span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">message</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">err.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">         w.</span><span style="color:#79B8FF;">WriteHeader</span><span style="color:#E1E4E8;">(http.StatusOK)</span></span>
<span class="line"><span style="color:#E1E4E8;">         w.</span><span style="color:#79B8FF;">Write</span><span style="color:#E1E4E8;">(users)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      w.</span><span style="color:#79B8FF;">WriteHeader</span><span style="color:#E1E4E8;">(http.StatusNotFound)</span></span>
<span class="line"><span style="color:#E1E4E8;">      fmt.</span><span style="color:#79B8FF;">Fprint</span><span style="color:#E1E4E8;">(w,</span><span style="color:#9ECBFF;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">message</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">not found</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//用户</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   ID </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">   Name </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//数据源，类似MySQL中的数据</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []User{</span></span>
<span class="line"><span style="color:#24292E;">   {ID: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,Name: </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">   {ID: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,Name: </span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">   {ID: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,Name: </span><span style="color:#032F62;">&quot;王五&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleUsers</span><span style="color:#24292E;">(w http.ResponseWriter, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request){</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> r.Method {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      users,err</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">json.</span><span style="color:#005CC5;">Marshal</span><span style="color:#24292E;">(users)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         w.</span><span style="color:#005CC5;">WriteHeader</span><span style="color:#24292E;">(http.StatusInternalServerError)</span></span>
<span class="line"><span style="color:#24292E;">         fmt.</span><span style="color:#005CC5;">Fprint</span><span style="color:#24292E;">(w,</span><span style="color:#032F62;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">message</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">err.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         w.</span><span style="color:#005CC5;">WriteHeader</span><span style="color:#24292E;">(http.StatusOK)</span></span>
<span class="line"><span style="color:#24292E;">         w.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">(users)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      w.</span><span style="color:#005CC5;">WriteHeader</span><span style="color:#24292E;">(http.StatusNotFound)</span></span>
<span class="line"><span style="color:#24292E;">      fmt.</span><span style="color:#005CC5;">Fprint</span><span style="color:#24292E;">(w,</span><span style="color:#032F62;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">message</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">not found</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//用户</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   ID </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">   Name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从以上代码可以看到，这次的改造主要是新建了一个 User 结构体，并且使用 users 这个切片存储所有的用户，然后在 handleUsers 函数中把它转化为一个 JSON 数组返回。这样，就实现了基于 JSON 数据格式的 RESTful API。</p><p>运行这个示例，在浏览器中输入 <a href="http://localhost:8080/users%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E4%BF%A1%E6%81%AF%EF%BC%9A" target="_blank" rel="noreferrer">http://localhost:8080/users，可以看到如下信息：</a></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[{</span><span style="color:#9ECBFF;">&quot;ID&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">},{</span><span style="color:#9ECBFF;">&quot;ID&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;李四&quot;</span><span style="color:#E1E4E8;">},{</span><span style="color:#9ECBFF;">&quot;ID&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;王五&quot;</span><span style="color:#E1E4E8;">}]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[{</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">},{</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">},{</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;王五&quot;</span><span style="color:#24292E;">}]</span></span></code></pre></div><p>这已经是 JSON 格式的用户信息，包含了所有用户。</p><h3 id="gin-框架" tabindex="-1">Gin 框架 <a class="header-anchor" href="#gin-框架" aria-label="Permalink to &quot;Gin 框架&quot;">​</a></h3><p>虽然 Go 语言自带的 net/http 包，可以比较容易地创建 HTTP 服务，但是它也有很多不足：</p><ul><li><p>不能单独地对请求方法（POST、GET 等）注册特定的处理函数；</p></li><li><p>不支持 Path 变量参数；</p></li><li><p>不能自动对 Path 进行校准；</p></li><li><p>性能一般；</p></li><li><p>扩展性不足；</p></li><li><p>......</p></li></ul><p>基于以上这些不足，出现了很多 Golang Web 框架，如 Mux，Gin、Fiber 等，今天我要为你介绍的就是这款使用最多的 Gin 框架。</p><h4 id="引入-gin-框架" tabindex="-1">引入 Gin 框架 <a class="header-anchor" href="#引入-gin-框架" aria-label="Permalink to &quot;引入 Gin 框架&quot;">​</a></h4><p>Gin 框架是一个在 Github 上开源的 Web 框架，封装了很多 Web 开发需要的通用功能，并且性能也非常高，可以让我们很容易地写出 RESTful API。</p><p>Gin 框架其实是一个模块，也就是 Go Mod，所以采用 Go Mod 的方法引入即可。我在第 18讲的时候详细介绍过如何引入第三方的模块，这里再复习一下。</p><p>首先需要下载安装 Gin 框架，安装代码如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/gin-gonic/gin</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/gin-gonic/gin</span></span></code></pre></div><p>然后就可以在 Go 语言代码中导入使用了，导入代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/gin-gonic/gin</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/gin-gonic/gin</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><p>通过以上安装和导入这两个步骤，就可以在你的 Go 语言项目中使用 Gin 框架了。</p><h4 id="使用-gin-框架" tabindex="-1">使用 Gin 框架 <a class="header-anchor" href="#使用-gin-框架" aria-label="Permalink to &quot;使用 Gin 框架&quot;">​</a></h4><p>现在，已经引入了 Gin 框架，下面我就是用 Gin 框架重写上面的示例，修改的代码如下所示：</p><p><em>ch21/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   r</span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;">gin.</span><span style="color:#79B8FF;">Default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">   r.</span><span style="color:#79B8FF;">GET</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">, listUser)</span></span>
<span class="line"><span style="color:#E1E4E8;">   r.</span><span style="color:#79B8FF;">Run</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;:8080&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listUser</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">gin.Context)  {</span></span>
<span class="line"><span style="color:#E1E4E8;">   c.</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,users)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   r</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;">gin.</span><span style="color:#005CC5;">Default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   r.</span><span style="color:#005CC5;">GET</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">, listUser)</span></span>
<span class="line"><span style="color:#24292E;">   r.</span><span style="color:#005CC5;">Run</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;:8080&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listUser</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">gin.Context)  {</span></span>
<span class="line"><span style="color:#24292E;">   c.</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,users)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>相比 net/http 包，Gin 框架的代码非常简单，通过它的 GET 方法就可以创建一个只处理 HTTP GET 方法的服务，而且输出 JSON 格式的数据也非常简单，使用 c.JSON 方法即可。</p><p>最后通过 Run 方法启动 HTTP 服务，监听在 8080 端口。现在运行这个 Gin 示例，在浏览器中输入 <a href="http://localhost:8080/users%EF%BC%8C%E7%9C%8B%E5%88%B0%E7%9A%84%E4%BF%A1%E6%81%AF%E5%92%8C%E9%80%9A%E8%BF%87" target="_blank" rel="noreferrer">http://localhost:8080/users，看到的信息和通过</a> net/http 包实现的效果是一样的。</p><h4 id="获取特定的用户" tabindex="-1">获取特定的用户 <a class="header-anchor" href="#获取特定的用户" aria-label="Permalink to &quot;获取特定的用户&quot;">​</a></h4><p>现在你已经掌握了如何使用 Gin 框架创建一个简单的 RESTful API，并且可以返回所有的用户信息，那么如何获取特定用户的信息呢？</p><p>我们知道，如果要获得特定用户的信息，需要使用的是 GET 方法，并且 URL 格式如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:8080/users/2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:8080/users/2</span></span></code></pre></div><p>以上示例中的 2 是用户的 ID，也就是通过 ID 来获取特定的用户。</p><p>下面我通过 Gin 框架 Path 路径参数来实现这个功能，示例代码如下：</p><p><em>ch21/main.go</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//省略没有改动的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">   r.</span><span style="color:#79B8FF;">GET</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users/:id&quot;</span><span style="color:#E1E4E8;">, getUser)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">gin.Context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   id </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> user User</span></span>
<span class="line"><span style="color:#E1E4E8;">   found </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//类似于数据库的SQL查询</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, u </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> users {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#79B8FF;">EqualFold</span><span style="color:#E1E4E8;">(id, strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(u.ID)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> u</span></span>
<span class="line"><span style="color:#E1E4E8;">         found </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">break</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> found {</span></span>
<span class="line"><span style="color:#E1E4E8;">      c.</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, user)</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      c.</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">, gin.H{</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;用户不存在&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//省略没有改动的代码</span></span>
<span class="line"><span style="color:#24292E;">   r.</span><span style="color:#005CC5;">GET</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users/:id&quot;</span><span style="color:#24292E;">, getUser)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">gin.Context) {</span></span>
<span class="line"><span style="color:#24292E;">   id </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> user User</span></span>
<span class="line"><span style="color:#24292E;">   found </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//类似于数据库的SQL查询</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, u </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> users {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> strings.</span><span style="color:#005CC5;">EqualFold</span><span style="color:#24292E;">(id, strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(u.ID)) {</span></span>
<span class="line"><span style="color:#24292E;">         user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> u</span></span>
<span class="line"><span style="color:#24292E;">         found </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> found {</span></span>
<span class="line"><span style="color:#24292E;">      c.</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, user)</span></span>
<span class="line"><span style="color:#24292E;">   } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      c.</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">, gin.H{</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;用户不存在&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Gin 框架中，路径中使用冒号表示 Path 路径参数，比如示例中的 :id，然后在 getUser 函数中可以通过 c.Param(&quot;id&quot;) 获取需要查询用户的 ID 值。</p><blockquote><p>小提示：Param 方法的参数要和 Path 路径参数中的一致，比如示例中都是 ID。</p></blockquote><p>现在运行这个示例，通过浏览器访问 <a href="http://localhost:8080/users/2" target="_blank" rel="noreferrer">http://localhost:8080/users/2</a>，就可以获得 ID 为 2 的用户，输出信息如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;ID&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;李四&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，已经正确的获取到了 ID 为 2 的用户，他的名字叫李四。</p><p>假如我们访问一个不存在的 ID，会得到什么结果呢？比如 99，示例如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">➜ curl http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:8080/users/99</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;用户不存在&quot;</span><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">%</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">➜ curl http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:8080/users/99</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;用户不存在&quot;</span><span style="color:#24292E;">}</span><span style="color:#D73A49;">%</span></span></code></pre></div><p>从以上示例输出可以看到，返回了『用户不存在』的信息，和我们代码中处理的逻辑一样。</p><h4 id="新增一个用户" tabindex="-1">新增一个用户 <a class="header-anchor" href="#新增一个用户" aria-label="Permalink to &quot;新增一个用户&quot;">​</a></h4><p>现在你已经可以使用 Gin 获取所有用户，还可以获取特定的用户，那么你也应该知道如何新增一个用户了，现在我通过 Gin 实现如何新增一个用户，看和你想的方案是否相似。</p><p>根据 RESTful API 规范，实现新增使用的是 POST 方法，并且 URL 的格式为 <a href="http://localhost:8080/users" target="_blank" rel="noreferrer">http://localhost:8080/users</a> ，向这个 URL 发送数据，就可以新增一个用户，然后返回创建的用户信息。</p><p>现在我使用 Gin 框架实现新增一个用户，示例代码如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//省略没有改动的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">   r.</span><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">, createUser)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createUser</span><span style="color:#E1E4E8;">(c </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">gin.Context) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   name </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">DefaultPostForm</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      u </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> User{ID: </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(users) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, Name: name}</span></span>
<span class="line"><span style="color:#E1E4E8;">      users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(users, u)</span></span>
<span class="line"><span style="color:#E1E4E8;">      c.</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">(http.StatusCreated,u)</span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      c.</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">(http.StatusOK, gin.H{</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">&quot;message&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;请输入用户名称&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//省略没有改动的代码</span></span>
<span class="line"><span style="color:#24292E;">   r.</span><span style="color:#005CC5;">POST</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">, createUser)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createUser</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">gin.Context) {</span></span>
<span class="line"><span style="color:#24292E;">   name </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">DefaultPostForm</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      u </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> User{ID: </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(users) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, Name: name}</span></span>
<span class="line"><span style="color:#24292E;">      users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(users, u)</span></span>
<span class="line"><span style="color:#24292E;">      c.</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">(http.StatusCreated,u)</span></span>
<span class="line"><span style="color:#24292E;">   } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      c.</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">(http.StatusOK, gin.H{</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;请输入用户名称&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上新增用户的主要逻辑是获取客户端上传的 name 值，然后生成一个 User 用户，最后把它存储到 users 集合中，达到新增用户的目的。</p><p>在这个示例中，使用 POST 方法来新增用户，所以只能通过 POST 方法才能新增用户成功。</p><p>现在运行这个示例，然后通过如下命令发送一个新增用户的请求，查看结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">➜ curl </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">X POST </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">d </span><span style="color:#9ECBFF;">&#39;name=飞雪&#39;</span><span style="color:#E1E4E8;"> http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//localhost:8080/users</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;ID&quot;</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;Name&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;飞雪&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">➜ curl </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">X POST </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">d </span><span style="color:#032F62;">&#39;name=飞雪&#39;</span><span style="color:#24292E;"> http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:8080/users</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#D73A49;">:</span><span style="color:#032F62;">&quot;飞雪&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到新增用户成功，并且返回了新增的用户，还有分配的 ID。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Go 语言已经给我们提供了比较强大的 SDK，让我们可以很容易地开发网络服务的应用，而借助第三方的 Web 框架，可以让这件事情更容易、更高效。比如这篇文章介绍的 Gin 框架，就可以很容易让我们开发出 RESTful API，更多关于 Gin 框架的使用可以参考 <a href="https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;album_id=1362784031968149504&amp;__biz=MzI3MjU4Njk3Ng==#wechat_redirect" target="_blank" rel="noreferrer">Golang Gin 实战</a>系列文章。</p><p>在我们做项目开发的时候，要善于借助已经有的轮子，让自己的开发更有效率，也更容易实现。</p>`,99),y=s("p",null,"在我们做项目开发的时候，会有增、删、改和查，现在增和查你已经学会了，那么就给你留 2 个作业，任选其中 1 个即可，它们是：",-1),i=s("ol",null,[s("li",null,[s("p",null,"修改一个用户的名字；")]),s("li",null,[s("p",null,"删除一个用户。")])],-1),u=s("p",null,"下一讲，也就是本专栏的最后一讲，我将为你介绍如何使用 Go 语言实现 RPC 服务，记得来听课哦。",-1);function F(d,h,C,g,q,T){const a=p("Image");return l(),o("div",null,[E,e(a,{alt:"go语言金句.png",src:"https://s0.lgstatic.com/i/image/M00/8C/DA/Ciqc1F_1dACARBqrAAVSvK3wokw352.png"}),t(),y,i,u])}const m=n(r,[["render",F]]);export{A as __pageData,m as default};
