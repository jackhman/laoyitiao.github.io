import{_ as o,j as e,o as t,g as c,k as n,Q as l,s as a,h as p}from"./chunks/framework.4e7d56ce.js";const M=JSON.parse('{"title":"题目 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6706) 17  深度思考子集：如何掌握 5 种通用解法？.md","filePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6706) 17  深度思考子集：如何掌握 5 种通用解法？.md","lastUpdated":1696417798000}'),r={name:"posts/backEnd/数据结构与算法面试宝典_文档/(6706) 17  深度思考子集：如何掌握 5 种通用解法？.md"},E=l(`<p>今天我会带你深度思考子集，介绍掌握 5 种通用解法。</p><p>不知道你对子集问题是否还有印象，我们曾在&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6701&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">12 | 回溯：我把回溯总结成一个公式，回溯题一出就用它</a>&quot;，花了大量篇幅深入讨论过子集相关的问题。但当时的思路是已经知道了解题方法，然后再对题目实施&quot;精确制导的定向爆破&quot;。</p><p>但是，子集问题的解法就只有回溯吗？我们是否还可以继续深挖题目给予的信息？在这个&quot;一题多解&quot;的模块里面，我们需要重新审视子集问题，比如看一看：</p><ul><li><p>能否挖掘出更多的信息？</p></li><li><p>能不能匹配到更多的算法和数据结构？</p></li><li><p>能不能找到更多有趣的解法。</p></li></ul><p>下面请你带着以上三个问题，开启今天的探索旅程。</p><h3 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h3><p>首先，子集问题实际上包含两类问题。下面我们通过两个题目详细介绍一下。</p><p>【<strong>题目 1</strong>】给你一个整数数组 nums ，数组中的元素互不相同。返回该数组所有可能的子集。</p><p>解集<strong>不能</strong> 包含重复的子集。你可以按<strong>任意顺序</strong>返回解集。</p><p><strong>示例 1</strong></p><p>输入：nums = [1,2,3]</p><p>输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</p><p>【<strong>题目 2</strong> 】给你一个整数数组 nums ，其中<strong>可能包含重复</strong> 元素，请你返回该数组所有可能的子集。解集<strong>不能</strong> 包含重复的子集。返回的解集中，子集可以按<strong>任意顺序</strong>排列。</p><p><strong>示例 1</strong></p><p>输入：nums = [1,2,2]</p><p>输出：[[],[1],[1,2],[1,2,2],[2],[2,2]]</p><p>注：在后文中，我们将分别用题目 1、题目 2 来引用这两个题目。</p><p>声明：对于这个题目，在最差情况下，时间复杂度都是 O(N2^N^)。不算返回值的情况下，空间复杂度为 O(N)（BFS 的空间复杂度会到 O(2^N^)）。因此，后面的代码不会再对时间复杂度和空间复杂度做特别的声明。</p><h3 id="通用方法-1-回溯" tabindex="-1">通用方法 1：回溯 <a class="header-anchor" href="#通用方法-1-回溯" aria-label="Permalink to &quot;通用方法 1：回溯&quot;">​</a></h3><p>首先，因为题目中已经说明了，数组中的每个元素都是不相同的，因此题目 1 不涉及去重。我们在&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6701&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 12 讲</a>&quot;中利用&quot;回溯法：一个核心，三个条件&quot;写过题目 1 的回溯代码。关于这种方法，不再做过多的叙述，你可以参考如下代码（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> box, List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> all) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  all.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    all.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(all.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start, </span><span style="color:#6A737D;">/*第i个人的选择范围[start, N)*/</span></span>
<span class="line"><span style="color:#E1E4E8;">               List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> box,</span></span>
<span class="line"><span style="color:#E1E4E8;">               List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> all) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 公布当前箱子的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, all);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果我是最后一个人，并且没有东西给我选了</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 那么原样返回箱子</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (start </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 我还是有宝石可以选择的。</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    box.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(A, j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, box, all);</span></span>
<span class="line"><span style="color:#E1E4E8;">    box.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(box.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">subsets</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] A) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">  List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">backTrace</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> box, List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> all) {</span></span>
<span class="line"><span style="color:#24292E;">  all.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box) {</span></span>
<span class="line"><span style="color:#24292E;">    all.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(all.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start, </span><span style="color:#6A737D;">/*第i个人的选择范围[start, N)*/</span></span>
<span class="line"><span style="color:#24292E;">               List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> box,</span></span>
<span class="line"><span style="color:#24292E;">               List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> all) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 公布当前箱子的状态</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, all);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果我是最后一个人，并且没有东西给我选了</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 那么原样返回箱子</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 我还是有宝石可以选择的。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    box.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j]);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(A, j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, box, all);</span></span>
<span class="line"><span style="color:#24292E;">    box.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(box.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Integer</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subsets</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] A) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">  List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">backTrace</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span></code></pre></div><blockquote><p>代码:<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/78.%E5%AD%90%E9%9B%86.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/78.%E5%AD%90%E9%9B%86.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/78.%E5%AD%90%E9%9B%86.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>可以看到，题目 2 与题目 1 有一点不同：</p><blockquote><p>题目 2 给定的数组可能存在重复元素，因此，还需要对子集进行去重。</p></blockquote><p>接下来我们讨论题目 2 中涉及的去重问题。</p><p>当时，我们采用&quot;<strong>排序 + 判断元素是否出现过</strong>&quot;的方法进行去重。经过优化后的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                      List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> box) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      ans.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(ans.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">start</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/*第i个人的选择范围(start, N)*/</span></span>
<span class="line"><span style="color:#E1E4E8;">                         List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">box</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                         List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">ans</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 已经没得选了</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (start </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        box.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, j </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">        box.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(box.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">subsetsWithDup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">A</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> A </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> A.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (N </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(A);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">backtrace</span><span style="color:#E1E4E8;">(A, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, box, ans);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">box</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                      List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> box) {</span></span>
<span class="line"><span style="color:#24292E;">      ans.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(ans.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">start</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/*第i个人的选择范围(start, N)*/</span></span>
<span class="line"><span style="color:#24292E;">                         List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">box</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#E36209;">ans</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(box, ans);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 已经没得选了</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (start </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        box.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[j]);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">        box.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(box.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">subsetsWithDup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">A</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> A </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> A.length;</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (N </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(A);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">backtrace</span><span style="color:#24292E;">(A, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, box, ans);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>其实，这是一道非常经典的题目，我们可以从不同角度思考这个题目，进而得到不同的解法。</p><h3 id="通用方法-2-bfs" tabindex="-1">通用方法 2：BFS <a class="header-anchor" href="#通用方法-2-bfs" aria-label="Permalink to &quot;通用方法 2：BFS&quot;">​</a></h3><p>既然可以利用回溯（可以认为回溯是某种形式的 DFS），那么应该也可以尝试往 BFS 方向思考。因为大部分时候，DFS 的代码都可以改写为 BFS 的代码，</p><p>题目 1 不需要考虑去重的问题。我们可以假设数组为 A[] = {1, 2, 3}，那么可以进行如下的操作（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cur </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { {}}; </span><span style="color:#6A737D;">// 一开始我只有一个空集</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x in A</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> subset in cur</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 复制当前已有的子集subset</span></span>
<span class="line"><span style="color:#E1E4E8;">        subset.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x)  </span><span style="color:#6A737D;">// 把数组中元素x加到子集中</span></span>
<span class="line"><span style="color:#E1E4E8;">        tmp.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(subset)</span><span style="color:#6A737D;">// 把更新后的subset放到tmp中。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> subset in tmp</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        cur.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(subset)</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cur</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { {}}; </span><span style="color:#6A737D;">// 一开始我只有一个空集</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x in A</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> subset in cur</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 复制当前已有的子集subset</span></span>
<span class="line"><span style="color:#24292E;">        subset.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x)  </span><span style="color:#6A737D;">// 把数组中元素x加到子集中</span></span>
<span class="line"><span style="color:#24292E;">        tmp.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(subset)</span><span style="color:#6A737D;">// 把更新后的subset放到tmp中。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> subset in tmp</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        cur.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(subset)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cur</span></span></code></pre></div><p>不过，我们也要注意到，这里在进行 BFS 的时候，与常规的 BFS 不太一样。</p><blockquote><p>BFS 的方法有两种，一种是使用 Queue，另一种是使用&quot;两段击&quot;。这里我们指的是两段击。</p><p>如果你忘了什么是&quot;两段击&quot;，那么快去看一下&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6691&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">02 | 队列：FIFO 队列与单调队列的深挖与扩展</a>&quot;。</p></blockquote><p>常规的 BFS 流程如下（我们<strong>聚焦</strong>于 BFS 的一轮迭代）：</p>`,36),y=l('<p>我们发现，进行 BFS 的时候，在生成 next 之后，并不是直接赋值给 cur，而是采用了 cur + next。这里我建议你花点时间完成下面两道常规 BFS 的练习题，巩固一下 BFS 的知识。</p><p><strong>练习题 1</strong>：从上到下按层打印二叉树，同一层结点按照从左到右的顺序打印，每一层打印到一行。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/02.Queue/01.TreeLevelOrder.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/02.Queue/01.TreeLevelOrder.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/02.Queue/01.TreeLevelOrder.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>练习题 2</strong>：有 n 个城市通过 m 个航班连接。每个航班都从城市 u 开始，以价格 w 抵达 v。现在给定所有的城市和航班，以及出发城市 src 和目的地 dst，你的任务是找到从 src 到 dst 最多经过 k 站中转的最便宜的价格。 如果没有这样的路线，则输出 -1。</p><p>输入：n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src = 0, dst = 2, k = 1</p><p>输出：200</p><p>城市航班图如下：</p>',7),i=l(`<p>从城市 0 到城市 2 在 1 站中转的最便宜价格是 200，如上图中红色所示：</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/787.k-%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/787.k-%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/787.k-%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>既然我们已经知道子集的 BFS 的程序框架了，针对题目 1，可以写出代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">subsets</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; cur </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// cur里面会有一个空集</span></span>
<span class="line"><span style="color:#E1E4E8;">        cur.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            next.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; subset</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cur) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; newSubset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(subset);</span></span>
<span class="line"><span style="color:#E1E4E8;">                newSubset.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">                next.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(newSubset);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// cur = cur + next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; newSubset</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> next) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                cur.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(newSubset);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cur;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">subsets</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// cur里面会有一个空集</span></span>
<span class="line"><span style="color:#24292E;">        cur.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;">            next.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; subset</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cur) {</span></span>
<span class="line"><span style="color:#24292E;">                List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; newSubset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(subset);</span></span>
<span class="line"><span style="color:#24292E;">                newSubset.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">                next.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(newSubset);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// cur = cur + next;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; newSubset</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> next) {</span></span>
<span class="line"><span style="color:#24292E;">                cur.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(newSubset);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cur;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/78.%E5%AD%90%E9%9B%86.BFS.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/78.%E5%AD%90%E9%9B%86.BFS.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/78.%E5%AD%90%E9%9B%86.BFS.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>当<strong>题目 1</strong> 解决之后，我们再来看一下能不能用同样的BFS 方法解决<strong>题目 2</strong>。假设 A[] = {1,2,2}。看看是否会出现什么问题，步骤如下：</p><p>Step 1. 一开始 cur = [{}]；</p><p>Step 2. 当加入元素 1，生成 next = [{1}]；</p><p>Step 3. cur = cur + next = [{}, {1}]；</p><p>Step 4. 再加入元素 2，生成 next = [{2}, {1,2}]；</p><p>Step 5. cur = cur + next = [{}, {1}, {2}, {1,2}]；</p><p>Step 6. 再加入元素 2，生成 next = [{2}, {1,2}, {2,2}, {1,2,2}]；</p><p>Step 7. 最后执行cur = cur + next = [{}, {1}, {2}, {1,2},{2}, {1,2}, {2,2}, {1,2,2}]。</p><p>我们发现，如果还是沿用题目 1 的 BFS 方法，会在最终解中<strong>产生重复的子集</strong>。那么，有没有办法去除这些重复的子集？</p><p>下面我们需要追踪一下这些重复元素是如何生成的，可以画出下图：</p>`,15),A=a("p",null,"重复元素 [{2}, {1,2}] 是由 [{}, {1}] 加入元素 2 后生成的。重复的元素分别是在 Step 4 和 Step 6 生成的，如下图所示：",-1),F=l(`<p>因此，在更新的时候，应该要注意，如果一些元素，比如 [{}, {1}] 已经被元素 2 更新过了。那么后面就不应该再去更新了。</p><p>此时，我们应该可以写出伪代码了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cur </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [{}]</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x in A</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> subset in cur</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updated</span><span style="color:#E1E4E8;">(subset, x) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> False</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            next.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(subset.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> newSubset in next</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        cur.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(newSubset)</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cur</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{}]</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x in A</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> subset in cur</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updated</span><span style="color:#24292E;">(subset, x) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> False</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            next.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(subset.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> newSubset in next</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        cur.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(newSubset)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cur</span></span></code></pre></div><p>现在问题的重点在于：如何完成 updated(subset, x) 的检查。我们发现可以按照下图这样的方式操作：</p>`,4),g=l(`<p>通过上述分析， 我们可以总结出如下结论：</p><ul><li><p>如果加入的元素与前面加入的元素一样，那么只需要更新&quot;<strong>新增的部分</strong>&quot;；</p></li><li><p>为了同时达到，就需要与前面一轮的元素进行比较，并且记住前面新增的部分。</p></li></ul><p>也就是说，我们需要做两个事情：</p><ul><li><p>对数组排序，排序之后，我们总是可以很容易得出与前面一轮的元素是否相等；</p></li><li><p>记住前面新增的部分，我们只需要每次<strong>更新之前</strong>，记录一下 cur 的 size 就可以了。</p></li></ul><p>基于这两点，可以写出题目 2 的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">subsetsWithDup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(nums);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; cur </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// cur里面会有一个空集</span></span>
<span class="line"><span style="color:#E1E4E8;">        cur.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 前面用来更新的元素的值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在利用pre元素更新之前</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// cur里面item的个数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意：是利用pre更新之前，不是pre更新之后的元素的个数!</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> beforePreUpdateSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> curValue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            next.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 在更新之前，我们需要判断一下，是从cur的哪里开始更新</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 正常情况下，都是从cur[0]开始更新</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> startUpdatePos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果与pre值相等</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (curValue </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> pre) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 那么在更新的时候，需要从beforePreUpdateSize这里开始更新。</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 因为[0, ...., beforePreUpdateSize)这部分内容</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 肯定已经被等于pre的值给更新过了</span></span>
<span class="line"><span style="color:#E1E4E8;">                startUpdatePos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> beforePreUpdateSize;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> startUpdatePos; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> cur.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; newSubset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(cur.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i));</span></span>
<span class="line"><span style="color:#E1E4E8;">                newSubset.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(curValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">                next.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(newSubset);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 记录一下更新前的大小</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> beforeCurValueUpdateSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cur.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; subset</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> next) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                cur.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(subset);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 更新一下大小的情况</span></span>
<span class="line"><span style="color:#E1E4E8;">            beforePreUpdateSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> beforeCurValueUpdateSize;</span></span>
<span class="line"><span style="color:#E1E4E8;">            pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> curValue;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cur;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">subsetsWithDup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(nums);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// cur里面会有一个空集</span></span>
<span class="line"><span style="color:#24292E;">        cur.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 前面用来更新的元素的值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在利用pre元素更新之前</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// cur里面item的个数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意：是利用pre更新之前，不是pre更新之后的元素的个数!</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> beforePreUpdateSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> curValue</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;">            next.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 在更新之前，我们需要判断一下，是从cur的哪里开始更新</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 正常情况下，都是从cur[0]开始更新</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> startUpdatePos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果与pre值相等</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (curValue </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> pre) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 那么在更新的时候，需要从beforePreUpdateSize这里开始更新。</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 因为[0, ...., beforePreUpdateSize)这部分内容</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 肯定已经被等于pre的值给更新过了</span></span>
<span class="line"><span style="color:#24292E;">                startUpdatePos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> beforePreUpdateSize;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> startUpdatePos; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> cur.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; newSubset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(cur.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i));</span></span>
<span class="line"><span style="color:#24292E;">                newSubset.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(curValue);</span></span>
<span class="line"><span style="color:#24292E;">                next.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(newSubset);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 记录一下更新前的大小</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> beforeCurValueUpdateSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; subset</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> next) {</span></span>
<span class="line"><span style="color:#24292E;">                cur.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(subset);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 更新一下大小的情况</span></span>
<span class="line"><span style="color:#24292E;">            beforePreUpdateSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> beforeCurValueUpdateSize;</span></span>
<span class="line"><span style="color:#24292E;">            pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> curValue;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cur;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.BFS.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.BFS.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.BFS.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>【<strong>小结</strong>】我们不妨将用到的 BFS 进行比较，通过比较它们之间的异同，有助于梳理知识点里面的考点（红色部分是变更之后的考点）。</p>`,8),u=l('<p>我们发现，题目 1 与题目 2 无非就是在原始的 BFS 上不停地更改 BFS 的条件，然后就出现了新的题型与考点。</p><p>这里我再给你留一个练习题，通过这些练习，可以和我们以前学习过的知识产生联动，让你对题目、知识点的理解更加深刻。</p><p><strong>练习题 3</strong> ：在学习&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6701&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 12 讲</a>&quot;回溯中例 4 的时候，也讲到了题目 2。在那里，我们同样用到了去重的技巧，并且也用到了排序。那么请问，&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6701&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">第 12 讲</a>&quot;中用到的排序和这里 BFS 的排序的目的有什么异同点？</p><p><strong>练习题 4</strong> ：题目 2 在进行 BFS 的时候，采用了使用部分 cur 里面的元素来进行更新，并且生成 next 的办法。我们在讲解&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6700&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">11 | 贪心：这种思想，没有模板，如何才能掌握它？</a>&quot;贪心算法例 3&quot;青蛙跳&quot;的时候，曾说过可以采用类似 BFS 的方法进行思考。那么题目 2 和&quot;青蛙跳&quot;有什么异同呢？</p><h3 id="通用方法-3-选与不选" tabindex="-1">通用方法 3：选与不选 <a class="header-anchor" href="#通用方法-3-选与不选" aria-label="Permalink to &quot;通用方法 3：选与不选&quot;">​</a></h3><p>现在我们换一种思路来看这个题目：生成一个子集的时候，对于一个元素而言，就只有选与不选两种选择。如果用二进制 bit，0 表示选中，1 表示没有选中。</p><p>那么对于一个有 n 个元素的数组，可以用一个二进制串表示一个子集。比如空集就是所有的二进制 bit 都是 0。</p>',7),D=l(`<p>比如，我们还可以用 b0110 表示子集 {A[1], A[2]}。那么现在你应该明白，针对四个元素的子集，可以按照 [0, ~ b1111] 顺序遍历，然后依次遍历二进制串的每一位，通过 bit 0/1 决定是否需要把相应的元素放到集合中。</p><p>通过这种思路，我们可以写出<strong>题目 1</strong>的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">subsets</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nums </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;">N); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; subset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 看一下哪些元素会被选择</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果要选择nums[j]</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> mask </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> j;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((i </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> mask) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    subset.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(nums[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 然后把tmp 加到 ans里面 </span></span>
<span class="line"><span style="color:#E1E4E8;">            ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(subset);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">subsets</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nums </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums.length;</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">N); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; subset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 看一下哪些元素会被选择</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果要选择nums[j]</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> j;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((i </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> mask) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    subset.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(nums[j]);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 然后把tmp 加到 ans里面 </span></span>
<span class="line"><span style="color:#24292E;">            ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(subset);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/78.%E5%AD%90%E9%9B%86.binary.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/78.%E5%AD%90%E9%9B%86.binary.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/78.%E5%AD%90%E9%9B%86.binary.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>学完这种解法之后，我们会发现和&quot;<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6703&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">14 | DP：我是怎么治好&#39;DP 头痛症&#39;的？</a>&quot;里面的状态压缩有非常类似的地方：</p><blockquote><ol><li><p>都是用 0/1 bit 位来表示一个元素的选中和不选中；</p></li><li><p>都是用一个整数来表示一个集合的状态。</p></li></ol></blockquote><p>题目 1 解决之后，我们接下来看一下<strong>题目 2</strong>。如果仍然采用这种方法，可能会面临一个问题。对于给定数组 A[] = {1,2,2,2}。如下图所示：</p>`,7),d=a("p",null,"虽然用了两个不同的二进制串，但是会导致它们映射到同样的子集。因此，也就存在重复的可能性。那么，有没有什么办法可以去重呢？",-1),b=a("p",null,"我们接着来看下面这个例子。对于数组 A[] = {1,2,2,2,2}，可以发现有些二进制串实际上是等价的。比如只选中一个 1 的时候，如下图所示：",-1),C=a("p",null,"例 2：只选择 2 个 2 到子集里面的时候。如下图所示：",-1),m=a("p",null,"假设需要选择 x 个 2 出来，只需要数字 2 对应的位置 bit = 1 的总数有 x 个就可以了。比如，以选择 2 个 2 为例，只需 2 对应的位置有 2 个 bit=1 就可以了。",-1),h=l(`<p>那么，在这些二进制串中，需要选择一个我们想要的数字出来。所以，现在问题的重点，就是<strong>选谁</strong>。</p><p>经过一系列挑选，我们<strong>精心</strong> 按照<strong>一定规则，即</strong>相同的数的 bit = 1，挑选了如下数组的所有二进制串：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 比如A[] = [1, 2, 2, 2, 2]</span></span>
<span class="line"><span style="color:#6A737D;">//      0  0  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  1  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  1  1</span></span>
<span class="line"><span style="color:#6A737D;">//      1  0  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  1  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  1  1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 比如A[] = [1, 2, 2, 2, 2]</span></span>
<span class="line"><span style="color:#6A737D;">//      0  0  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  1  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  1  1</span></span>
<span class="line"><span style="color:#6A737D;">//      1  0  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  1  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  1  1</span></span></code></pre></div><p>也就是说，本质上我们是在具有重复含义的二进制串中选出了&quot;代表&quot;。比如下面这两个二进制串：</p>`,4),B=l("<p>两个二进制串都表示往集合中添加：</p><ul><li><p>1 个 1</p></li><li><p>2 个 3</p></li><li><p>2 个 4</p></li></ul><p>你可以观察上图中红色勾选的二进制串，上述选择规则有 2 个条件。注意，这里的条件都是针对数组中值相同的元素：</p><ul><li><p>对于数组中的相同的元素，选中的时候，bit 为 1 时，都必须<strong>连</strong>在一起；</p></li><li><p>对于数组中的相同的元素，bit 为 1 时，都必须靠<strong>左边</strong>连续存放。</p></li></ul><p>注意：这里的&quot;靠左存放&quot;不是靠整个二进制串的左边，而是靠着相同元素的左边界存放。如下图所示：</p>",5),f=a("p",null,"我们认为上图中相同元素 3 和元素 4 的 bit = 1 都是靠其左边连续存放的。",-1),_=a("p",null,"这里我给出一些示例，如下图所示：",-1),L=a("p",null,"例 1，满足条件 1，不满足条件 2。因为选中元素 2 的 bit = 1 没有连续靠左存放。",-1),x=a("p",null,"例 2，不满足条件 1，也不满足条件 2，因为选中相同元素的 bit = 1 没有连续，也没有靠左存放。",-1),k=a("p",null,"例 3，满足条件 1，也满足条件 2。针对相同元素 3 的 bit = 1 同时满足上面两个条件。",-1),v=a("p",null,"例 4，针对元素 3 的选择，同时满足两个条件。",-1),I=l(`<p>例 5，针对相同元素 3 和 4，其中元素 3 的 bit = 1 满足两个条件，但是元素 4 的 bit 位不满足条件 2。因此，这个二进制串也不满足两个条件。</p><p>那么按照这个规则，在生成子集的同时，我们还要<strong>检查一下二进制串是否满足条件 1 和条件 2</strong>。</p><blockquote><p>注意：这里只是为了方便写代码，所以采用这个规则来挑选二进制串，挑选二进制串的方法并不是唯一的，你也可以选择其他简便的方法。</p></blockquote><p>经过前面的分析，我们可以写出代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">subsetsWithDup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nums </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(nums);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;">N); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; subset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 这里在检查每个bit的时候，还要带个逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 那就是如果值相同的时候，我们希望是有连续的1bit</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> validSubset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 我们依次查看每个bit</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果当前值与之前的值是一样的。</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> nums[j] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> nums[j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 取出当前bit</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> curBit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;">j);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 取出之前一位bit</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> preBit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;">(j</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 如果当前位为1，但是之前位为0</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 这种情况是不允许的</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (curBit </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> preBit </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        validSubset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 如果这个bit为1，那么被选中</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((i </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;">j)) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    subset.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(nums[j]);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (validSubset) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(subset);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">subsetsWithDup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nums </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums.length;</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(nums);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">N); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; subset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 这里在检查每个bit的时候，还要带个逻辑</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 那就是如果值相同的时候，我们希望是有连续的1bit</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> validSubset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 我们依次查看每个bit</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果当前值与之前的值是一样的。</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nums[j] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> nums[j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 取出当前bit</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> curBit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">j);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 取出之前一位bit</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> preBit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">(j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 如果当前位为1，但是之前位为0</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 这种情况是不允许的</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (curBit </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> preBit </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        validSubset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果这个bit为1，那么被选中</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((i </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">j)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    subset.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(nums[j]);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (validSubset) {</span></span>
<span class="line"><span style="color:#24292E;">                ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(subset);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.binary.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.binary.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.binary.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><h3 id="通用方法-4-以退为进" tabindex="-1">通用方法 4：以退为进 <a class="header-anchor" href="#通用方法-4-以退为进" aria-label="Permalink to &quot;通用方法 4：以退为进&quot;">​</a></h3><p>接下来，我们重点讨论一下题目 2。在题目 2 去重的时候。如果我们再深入思考一下挑选二进制串的本质。不难发现，当数组为 A[] = {1, 2, 2, 2, 2} 时，我们只是想往子集中加入 2 的时候，分别往子集中添加：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 比如A[] = [1, 2, 2, 2, 2]</span></span>
<span class="line"><span style="color:#6A737D;">//      0  0  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  0  0  0 &lt;-- 加入1个2</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  0  0 &lt;-- 加入2个2</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  1  0 &lt;-- 加入3个2</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  1  1 &lt;-- 加入4个2</span></span>
<span class="line"><span style="color:#6A737D;">//      1  0  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  0  0  0 &lt;-- 加入1个2</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  0  0 &lt;-- 加入2个2</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  1  0 &lt;-- 加入3个2</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  1  1 &lt;-- 加入4个2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 比如A[] = [1, 2, 2, 2, 2]</span></span>
<span class="line"><span style="color:#6A737D;">//      0  0  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  0  0  0 &lt;-- 加入1个2</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  0  0 &lt;-- 加入2个2</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  1  0 &lt;-- 加入3个2</span></span>
<span class="line"><span style="color:#6A737D;">//      0  1  1  1  1 &lt;-- 加入4个2</span></span>
<span class="line"><span style="color:#6A737D;">//      1  0  0  0  0</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  0  0  0 &lt;-- 加入1个2</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  0  0 &lt;-- 加入2个2</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  1  0 &lt;-- 加入3个2</span></span>
<span class="line"><span style="color:#6A737D;">//      1  1  1  1  1 &lt;-- 加入4个2</span></span></code></pre></div><p>那么，我们有没有可能采用下面这种思路？</p><p>首先记录数组中每个数出现的次数 hash[number] = count；接着，将数组中的元素去重。最后，当我们需要往子集中加入某个数的时候，只需要在题目 1 的基础上做一点变动：</p><blockquote><p>选中某个数的时候，需要加入 1 个,2 个, ..., hash[number] 个这样的数。</p></blockquote><p>处理题目 2 的过程，实际上是先退回了题目 1（这里我们选中了 BFS 算法），然后再在加入元素的次数上做了调整。</p><p>通过这种思路，就可以写出题目 2 代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashMap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Integer </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(k, </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> v);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(k);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">subsetsWithDup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Counter cnt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            cnt.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; cur </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        cur.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Map.Entry&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; en</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cnt.</span><span style="color:#B392F0;">entrySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// BFS的next</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> addTimes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                 addTimes </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> en.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">(); addTimes</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 遍历cur中的每一个subset</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; subset</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cur) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 生成新的subset</span></span>
<span class="line"><span style="color:#E1E4E8;">                    List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; newSubset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(subset);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// 添加选中的数 addTimes次到集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> addTimes; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        newSubset.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(en.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    next.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(newSubset);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 将next放到cur中。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; subset</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> next) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                cur.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(subset);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cur;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">k</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">k</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(k, </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> v);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(k);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">subsetsWithDup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Counter cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums) {</span></span>
<span class="line"><span style="color:#24292E;">            cnt.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        cur.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; en</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cnt.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// BFS的next</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> addTimes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                 addTimes </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> en.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(); addTimes</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 遍历cur中的每一个subset</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; subset</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cur) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 生成新的subset</span></span>
<span class="line"><span style="color:#24292E;">                    List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; newSubset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(subset);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 添加选中的数 addTimes次到集合中</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> addTimes; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        newSubset.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(en.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    next.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(newSubset);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将next放到cur中。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; subset</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> next) {</span></span>
<span class="line"><span style="color:#24292E;">                cur.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(subset);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cur;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.BFS.2.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.BFS.2.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.BFS.2.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><h3 id="通用方法-5-分治" tabindex="-1">通用方法 5：分治 <a class="header-anchor" href="#通用方法-5-分治" aria-label="Permalink to &quot;通用方法 5：分治&quot;">​</a></h3><p>首先我们看一下<strong>题目 1</strong>，如果给定的数组 A[] = {1, 2}。实际上我们同然可以这样操作，得到所有的子集。</p><blockquote><p>分治算法总是可以画成二叉树的样子，所以这里我们借助二叉树来展示分治的过程。</p></blockquote>`,19),S=l(`<p>基于这种思想，可以得到<strong>题目 1</strong>分治的解法，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将两个合并成一个</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(a);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> b) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            tmp.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tmp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意：这里给的区间是左闭右开[b, e)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">dq</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            tmp.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(nums[b]);</span></span>
<span class="line"><span style="color:#E1E4E8;">            ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(tmp);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果数组里面没有重复元素，那么只需要从中间切分开就可以了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> mid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((e</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b)</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dq</span><span style="color:#E1E4E8;">(nums, b, mid);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dq</span><span style="color:#E1E4E8;">(nums, mid, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 两两组合</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> l) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> r) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 由于我们已经在ans中存放了空集，所以如果遇到两个都是空集的时候</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 我们就不再进行merge</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> y.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(x, y));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">subsets</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nums </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nums.length;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dq</span><span style="color:#E1E4E8;">(nums, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, N);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将两个合并成一个</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(a);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> b) {</span></span>
<span class="line"><span style="color:#24292E;">            tmp.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意：这里给的区间是左闭右开[b, e)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">dq</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">            tmp.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(nums[b]);</span></span>
<span class="line"><span style="color:#24292E;">            ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(tmp);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果数组里面没有重复元素，那么只需要从中间切分开就可以了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((e</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b)</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dq</span><span style="color:#24292E;">(nums, b, mid);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dq</span><span style="color:#24292E;">(nums, mid, e);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 两两组合</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> l) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> r) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 由于我们已经在ans中存放了空集，所以如果遇到两个都是空集的时候</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 我们就不再进行merge</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> y.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(x, y));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">subsets</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nums </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nums.length;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dq</span><span style="color:#24292E;">(nums, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, N);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/78.%E5%AD%90%E9%9B%86.dq.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Jav</a><a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.dq.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">a/</a><a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/78.%E5%AD%90%E9%9B%86.dq.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/78.%E5%AD%90%E9%9B%86.dq.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p><p>我们需要格外注意空集的处理，合并的时候，如果两个集合都是空集，就不要再加入返回值了。因为它们之前已经加入空集（代码 13 行）了，重复加入会导致返回值中存在很多空集。</p></blockquote><p>那么，我们应该如何处理题目 2 呢？如果仍然延续上述处理思路，在处理 A[] = {1, 2, 2, 2} 的时候，就会遇到问题。</p>`,4),q=l(`<p>那么，有没有办法解决冲突 1 和冲突 2 呢？</p><p>首先来看<strong>冲突 1</strong>，产生冲突 1 的本质是因为，当数组已经被切分成 [2, 2] 的时候，实际上可以直接通过计算 2 的个数来生成子集。这里有 2 个 2，所以可以直接生成如下子集：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{},   0个2</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">},  1个2</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">} 2个2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{},   0个2</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">},  1个2</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">} 2个2</span></span></code></pre></div><p>也就是说，当数组里面的元素都是一样的时候，我们不能再进行切分。</p><p>那么再查看<strong>冲突 2</strong>。产生冲突 2 的根本原因在于：元素 2 分散在很多地方，每次合并的时候，都有可能生成重复的子集。在切分的时候，我们应该采用如下图所示的方法进行切分：</p>`,5),T=l(`<p>那么，这里可以总结为两个原则。</p><ul><li><p>原则 1：当范围里面的数都是一样的时候，不能切分，而是采用计数的原则来生成子集。</p></li><li><p>原则 2：相同的数，不能被切分开，而是要当成一个整体。</p></li></ul><p>基于这两个原则，我们就可以写出题目 2 的分治的代码了，如下所示（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将两个合并成一个</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(a);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> b) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            tmp.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tmp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 查看这段区域里面的值是不是都是一样的</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isSame</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> same </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> e; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nums[i] </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> nums[b]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 注意：这里给的区间是左闭右开[b, e)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">dq</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (b </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果整段区间里面的值都是一样的</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 那么在选择的时候，只有e - b种情况</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 比如有[2, 2]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 那么这里会添加子集</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// - [2]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// - [2, 2]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 使用原则1：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> same </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">isSame</span><span style="color:#E1E4E8;">(nums, b, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (same) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> e; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                tmp.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(nums[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">                ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(tmp));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果数组里面没有重复元素，那么只需要从中间切分开就可以了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> mid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ((e</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b)</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 接下来是使用原则2：要让所有相同的数，必须要当成一个整体</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 不能被切散了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mid </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (l </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> nums[l] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> nums[mid]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            l</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mid;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> nums[r] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> nums[mid]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            r</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 正常情况下，我们切分点都选择 r</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> cutPos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 但是如果右边[r, e)这个区间已经没有数了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 我们需要把(l, r)这个区间划给右边</span></span>
<span class="line"><span style="color:#E1E4E8;">            cutPos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; lans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dq</span><span style="color:#E1E4E8;">(nums, b, cutPos);</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; rans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dq</span><span style="color:#E1E4E8;">(nums, cutPos, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 两两组合</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> lans) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> rans) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 由于我们已经在ans中存放了空集，所以如果遇到两个都是空集的时候</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 我们就不再进行merge</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> y.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                ans.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">merge</span><span style="color:#E1E4E8;">(x, y));</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#B392F0;">subsetsWithDup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nums </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> nums.length </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(nums);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dq</span><span style="color:#E1E4E8;">(nums, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, nums.length);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将两个合并成一个</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(a);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> b) {</span></span>
<span class="line"><span style="color:#24292E;">            tmp.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tmp;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 查看这段区域里面的值是不是都是一样的</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isSame</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> same </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> e; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nums[i] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> nums[b]) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注意：这里给的区间是左闭右开[b, e)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">dq</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果整段区间里面的值都是一样的</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 那么在选择的时候，只有e - b种情况</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 比如有[2, 2]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 那么这里会添加子集</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// - [2]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// - [2, 2]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用原则1：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> same </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">isSame</span><span style="color:#24292E;">(nums, b, e);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (same) {</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> e; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                tmp.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(nums[i]);</span></span>
<span class="line"><span style="color:#24292E;">                ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(tmp));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果数组里面没有重复元素，那么只需要从中间切分开就可以了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ((e</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b)</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 接下来是使用原则2：要让所有相同的数，必须要当成一个整体</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 不能被切散了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nums[l] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> nums[mid]) {</span></span>
<span class="line"><span style="color:#24292E;">            l</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (r </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> nums[r] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> nums[mid]) {</span></span>
<span class="line"><span style="color:#24292E;">            r</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 正常情况下，我们切分点都选择 r</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cutPos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> r;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 但是如果右边[r, e)这个区间已经没有数了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (r </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 我们需要把(l, r)这个区间划给右边</span></span>
<span class="line"><span style="color:#24292E;">            cutPos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; lans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dq</span><span style="color:#24292E;">(nums, b, cutPos);</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; rans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dq</span><span style="color:#24292E;">(nums, cutPos, e);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 两两组合</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> lans) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> rans) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 由于我们已经在ans中存放了空集，所以如果遇到两个都是空集的时候</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 我们就不再进行merge</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> y.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                ans.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">merge</span><span style="color:#24292E;">(x, y));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#6F42C1;">subsetsWithDup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nums </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> nums.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(nums);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dq</span><span style="color:#24292E;">(nums, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, nums.length);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.dq.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Jav</a><a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.dq.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">a</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.dq.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/17.Subset/90.%E5%AD%90%E9%9B%86-ii.dq.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在本讲，我们通过分析题目的不同特点，展开了不同的解题思路，构造出了 5 种不同的解法。这里，我将 5 种解法进行了一个总结，如下图所示：</p>`,7),j=a("p",null,'题目是做不完的，但是我们可以通过分析每一个题目来锻炼挖掘题目信息的能力，以及匹配到我们大脑中已经存储的数据结构与算法的能力。同时，也可以通过这种方式，将学会的知识变成我们解决问题的能力，只有这样"学习"才能变成"学会"。',-1),w=a("h3",{id:"思考题",tabindex:"-1"},[p("思考题 "),a("a",{class:"header-anchor",href:"#思考题","aria-label":'Permalink to "思考题"'},"​")],-1),V=a("p",null,[a("strong",null,"最后，我再给你留一个思考题：在求解题目 2 的每一种方法中，我们都提前对数组进行了排序的处理，每次排序的原因和目的分别是什么"),p("？")],-1),P=a("p",null,"可以把你的分析写在留言区，我们一起讨论。如果你觉得今天的内容对你有所启发，欢迎分享给身边的朋友。",-1),N=a("p",null,"好了，子集问题我们就学习到这里，希望你还能找出更多有趣的解法。接下来让我们前进到18 | 单词接龙：如何巧用深搜与广搜的变形？记得按时来探险。",-1);function H(R,Q,G,K,X,W){const s=e("Image");return t(),c("div",null,[E,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/1C/CioPOWCChpeATCyQAABtL-4I4AU783.png"}),y,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChp6Ab6B3AAB6kPgo4wQ968.png"}),i,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/1D/CioPOWCChqiAdm7xAADFwWCKF6U657.png"}),A,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/14/Cgp9HWCChq-AbWGFAACfXWp9Low360.png"}),F,n(s,{alt:"3.gif",src:"https://s0.lgstatic.com/i/image6/M01/3B/1D/CioPOWCChs6ASdvfAAY7y-x_0T0475.gif"}),g,n(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/1D/CioPOWCChtmACSQgAAByLMtH9fw534.png"}),u,n(s,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChuGAZqi8AAChWwRZV6U128.png"}),D,n(s,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChvGAQ8GAAACmdtVGGo0109.png"}),d,b,n(s,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChviAf9KNAAFHgJCoZvU511.png"}),C,n(s,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/1D/CioPOWCChv-AG6oSAAFVoOOh6qQ752.png"}),m,n(s,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChwaAefbdAAB7Y8WLUUY506.png"}),h,n(s,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChw6AT5_KAAETiNOj7Xs819.png"}),B,n(s,{alt:"Drawing 12.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChxeAQxZXAACagi2nfs8308.png"}),f,_,n(s,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChx6AF3lnAAB7jvDEfhA419.png"}),L,n(s,{alt:"Drawing 14.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChyWACm9rAAB7k7a6eos642.png"}),x,n(s,{alt:"Drawing 15.png",src:"https://s0.lgstatic.com/i/image6/M01/3B/14/Cgp9HWCChyuAd3A7AAB4Cz6xpA8058.png"}),k,n(s,{alt:"Drawing 16.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/1D/CioPOWCChzGAQNfYAAB_IwcBfBU453.png"}),v,n(s,{alt:"Drawing 17.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/1D/CioPOWCChziACLWvAACesKL-RlQ770.png"}),I,n(s,{alt:"1.gif",src:"https://s0.lgstatic.com/i/image6/M01/3B/15/Cgp9HWCCh0eATulfAAT7HVtlTIg477.gif"}),S,n(s,{alt:"2.gif",src:"https://s0.lgstatic.com/i/image6/M00/3B/1D/CioPOWCCh1SAOfdmABHxRZZnCOw782.gif"}),q,n(s,{alt:"Drawing 20.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/1D/CioPOWCCh16AHJ7BAABqOFr59u8458.png"}),T,n(s,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image6/M00/3B/9C/CioPOWCGG5KAdVEJAAHM2pBloNY568.png"}),j,w,V,P,N])}const U=o(r,[["render",H]]);export{M as __pageData,U as default};
