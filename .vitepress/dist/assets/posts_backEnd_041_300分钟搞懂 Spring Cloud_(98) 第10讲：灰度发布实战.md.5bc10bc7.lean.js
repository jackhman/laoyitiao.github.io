import{_ as r,j as i,o as n,g as p,k as o,h as a,Q as t,s as e}from"./chunks/framework.4e7d56ce.js";const R=JSON.parse('{"title":"第10讲：灰度发布实战","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/041_300分钟搞懂 Spring Cloud/(98) 第10讲：灰度发布实战.md","filePath":"posts/backEnd/041_300分钟搞懂 Spring Cloud/(98) 第10讲：灰度发布实战.md","lastUpdated":1696417798000}'),l={name:"posts/backEnd/041_300分钟搞懂 Spring Cloud/(98) 第10讲：灰度发布实战.md"},c=t("",24),d=e("p",null,"Discovery 是一款功能强大的框架，我们可以用它来实现灰度发布、服务隔离等高级功能。它的实现原理也非常简单，灰度发布最重要的是需要能够识别请求，然后将请求转发到匹配的服务上，说到这里你应该能想到需要怎么去实现了，前面课时中我也有提到过，可以通过 Ribbon 的算法类来实现这些功能。",-1),g=e("p",null,"除了控制 Ribbon 的路由，还需要将客户端带来的灰度信息一层层传递下去，可以将信息从 HTTP 请求头中带过去。",-1),_=e("p",null,"从图中我们可以看出 Discovery 对注册中心的支持做得非常好，支持了目前主流的注册中心。有Nacos、Eureka、Redis、Zookeeper。",-1),h=e("p",null,"对配置中心的支持也同样非常好，支持了 Nacos、Apollo、Redis。可以将灰度发布的规则放入配置中心，修改实时生效。",-1),u=e("h1",{id:"discovery-灰度发布实现",tabindex:"-1"},[a("Discovery 灰度发布实现 "),e("a",{class:"header-anchor",href:"#discovery-灰度发布实现","aria-label":'Permalink to "Discovery 灰度发布实现"'},"​")],-1),v=t("",11),y=e("p",null,"然后演示下效果，重新启动一个 article-service 的服务，版本为 1.01，然后访问对应的接口，可以看到正常的请求还是可以请求到之前的 article-service，新版本 1.01 由于在配置中心里指定成灰度的版本，所以正常请求是不能访问的，我们可以在请求头中增加 n-d-version 来访问这个灰度的版本，等这个版本没问题后，就将配置中心里的灰度内容去掉，这样就能被正常请求访问了，然后就可以继续发布下一个实例，通过这样的方式就实现了我们的灰度发布功能。",-1),b=e("h1",{id:"discovery实现多版本调用隔离",tabindex:"-1"},[a("Discovery实现多版本调用隔离 "),e("a",{class:"header-anchor",href:"#discovery实现多版本调用隔离","aria-label":'Permalink to "Discovery实现多版本调用隔离"'},"​")],-1),m=t("",8),A=t("",15),k=e("p",null,"同样的，使用 Discovery 也可以实现这个需求。使用 Discovery 可以在本地测试时通过版本来实现，通过在请求头中指定 n-d-version 的值来控制访问的服务。也就是本地修改的服务，版本需要设置成唯一的，不能跟测试环境冲突，然后不需要修改的服务直接依赖测试环境已有的即可，假如 A 服务是需要修改的，A 服务又依赖了 B 服务，本地不需要启动 B 服务，只需要指定 A 服务的版本为本地刚修改的版本，B 服务的版本为测试环境的版本即可实现服务复用效果。",-1),C=e("h2",{id:"本地复用测试服务-ip端口指定",tabindex:"-1"},[a("本地复用测试服务-IP端口指定 "),e("a",{class:"header-anchor",href:"#本地复用测试服务-ip端口指定","aria-label":'Permalink to "本地复用测试服务-IP端口指定"'},"​")],-1),D=t("",14);function E(T,P,S,I,q,x){const s=i("Image");return n(),p("div",null,[c,o(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/54/41/Cgq2xl3nXSaAV-vYAAFZZs65xIg434.png"}),a(),d,g,_,h,u,o(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/54/41/CgpOIF3nXSaAB9bRAAE8rktrUyY037.png"}),a(),v,o(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/54/42/CgpOIF3nXlyAMoy6AGFoiuAfQOc234.gif"}),a(),y,b,o(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/54/41/Cgq2xl3nXSeAZMTOAAE2sCaIhPE668.png"}),a(),m,o(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/54/41/CgpOIF3nXSeAcyxLAAFCuPpRQwE826.png"}),a(),A,o(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/54/41/Cgq2xl3nXSeAIiOhAAE940NnPNc596.png"}),a(),k,C,o(s,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/54/41/CgpOIF3nXSeAMhddAAGm0RFoGm4638.png"}),a(),D])}const z=r(l,[["render",E]]);export{R as __pageData,z as default};
