import{_ as o,D as e,o as t,g as r,J as n,h as a,Q as l,m as p}from"./chunks/framework.f67d7268.js";const m=JSON.parse('{"title":"24为什么总会遇到LazyException？如何解决？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4724) 24  为什么总会遇到 Lazy Exception？如何解决？.md","filePath":"posts/backEnd/Spring Data JPA 原理与实战_文档/(4724) 24  为什么总会遇到 Lazy Exception？如何解决？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Spring Data JPA 原理与实战_文档/(4724) 24  为什么总会遇到 Lazy Exception？如何解决？.md"},y=l("",21),E=l("",9),i=p("p",null,"所以在默认的情况下，如果我们把 Session 关闭了，想利用 Lazy 的机制加载管理关系，就会发生异常了。我们通过实例看一下，在上面例子的 Controller 上加一个 debug 断点，可以看到如下图显示的内容：我们的 Address 指向了 PersistentBag 代理实例类。",-1),d=p("p",null,"同时我们再设置断点的话也可以看到，PersistentBag 被初始化的时候，会传进来 Session 的上下文，即包含 Datasource 和需要执行 Lazy 的 sql。",-1),F=p("p",null,"而需要执行 Lazy 的 sql，我们通过 debug 的栈信息可以看到其中有个 instantiate，有兴趣的同学可以 debug 看一下，关键断点信息如下图所示。",-1),u=p("p",null,"再继续 debug 的话，也会看到调用 AbstractPersistentCollection 的初始化 Lazy 的方法，如下所示。",-1),A=l("",53),g=l("",7);function h(D,C,b,v,B,f){const s=e("Image");return t(),r("div",null,[y,n(s,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/75/11/Ciqc1F_HTamAUlWuAADQNwt-UxI634.png"}),a(),E,n(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/75/12/Ciqc1F_HTbOAXgh4AAEtSArhDWw293.png"}),a(),i,n(s,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/75/1D/CgqCHl_HTbeARnVnAAFroRKKQe4214.png"}),a(),d,F,n(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/75/1D/CgqCHl_HTb2ARhUkAAQSJOfdHvc744.png"}),a(),u,n(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/75/12/Ciqc1F_HTcSALyT5AADMzJ35Sgg935.png"}),a(),A,n(s,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/75/1D/CgqCHl_HTdmADLLsAAJrRYrE3Gk475.png"}),a(),g])}const z=o(c,[["render",h]]);export{m as __pageData,z as default};
