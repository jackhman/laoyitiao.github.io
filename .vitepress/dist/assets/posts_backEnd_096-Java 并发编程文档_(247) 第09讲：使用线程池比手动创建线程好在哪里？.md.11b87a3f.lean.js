import{_ as o,j as e,o as c,g as t,k as l,h as a,Q as p,s}from"./chunks/framework.4e7d56ce.js";const N=JSON.parse('{"title":"第09讲：使用线程池比手动创建线程好在哪里？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/096-Java 并发编程文档/(247) 第09讲：使用线程池比手动创建线程好在哪里？.md","filePath":"posts/backEnd/096-Java 并发编程文档/(247) 第09讲：使用线程池比手动创建线程好在哪里？.md","lastUpdated":1696682708000}'),r={name:"posts/backEnd/096-Java 并发编程文档/(247) 第09讲：使用线程池比手动创建线程好在哪里？.md"},y=p("",6),E=p("",5),i=p("",3),F=p("",13),d=s("p",null,"执行流程如图所示，首先创建了一个线程池，线程池中有 5 个线程，然后线程池将 10000 个任务分配给这 5 个线程，这 5 个线程反复领取任务并执行，直到所有任务执行完毕，这就是线程池的思想。",-1),h=s("h3",{id:"使用线程池的好处",tabindex:"-1"},[a("使用线程池的好处 "),s("a",{class:"header-anchor",href:"#使用线程池的好处","aria-label":'Permalink to "使用线程池的好处"'},"​")],-1),A=s("p",null,"使用线程池比手动创建线程主要有三点好处。",-1),D=s("ol",null,[s("li",null,"第一点，线程池可以解决线程生命周期的系统开销问题，同时还可以加快响应速度。因为线程池中的线程是可以复用的，我们只用少量的线程去执行大量的任务，这就大大减小了线程生命周期的开销。而且线程通常不是等接到任务后再临时创建，而是已经创建好时刻准备执行任务，这样就消除了线程创建所带来的延迟，提升了响应速度，增强了用户体验。"),s("li",null,"第二点，线程池可以统筹内存和 CPU 的使用，避免资源使用不当。线程池会根据配置和任务数量灵活地控制线程数量，不够的时候就创建，太多的时候就回收，避免线程过多导致内存溢出，或线程太少导致 CPU 资源浪费，达到了一个完美的平衡。"),s("li",null,"第三点，线程池可以统一管理资源。比如线程池可以统一管理任务队列和线程，可以统一开始或结束任务，比单个线程逐一处理任务要更方便、更易于管理，同时也有利于数据统计，比如我们可以很方便地统计出已经执行过的任务的数量。")],-1);function C(T,m,u,_,B,g){const n=e("Image");return c(),t("div",null,[y,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AC/D8/CgotOV3bl_OAP8gZAAAYnEDwotE879.png"}),a(),E,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AC/B8/CgoB5l3bmAiAKPcnAAAnuMuAyEc996.png"}),a(),i,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AC/B8/CgoB5l3bmCWACy-0AABGfJcEe18035.png"}),a(),F,l(n,{alt:"",src:"https://s0.lgstatic.com/i/image2/M01/AC/D8/CgotOV3bmEOAaIncAABOPHpwdNY412.png"}),a(),d,h,A,D])}const b=o(r,[["render",C]]);export{N as __pageData,b as default};
