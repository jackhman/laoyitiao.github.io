import{_ as o,j as e,o as t,g as r,k as a,h as s,Q as p,s as l}from"./chunks/framework.4e7d56ce.js";const q=JSON.parse('{"title":"21 安排会议室：如何利用多种方法安排会议室？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6710) 21  安排会议室：如何利用多种方法安排会议室？.md","filePath":"posts/backEnd/数据结构与算法面试宝典_文档/(6710) 21  安排会议室：如何利用多种方法安排会议室？.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/数据结构与算法面试宝典_文档/(6710) 21  安排会议室：如何利用多种方法安排会议室？.md"},E=p('<h1 id="_21-安排会议室-如何利用多种方法安排会议室" tabindex="-1">21 安排会议室：如何利用多种方法安排会议室？ <a class="header-anchor" href="#_21-安排会议室-如何利用多种方法安排会议室" aria-label="Permalink to &quot;21 安排会议室：如何利用多种方法安排会议室？&quot;">​</a></h1><p>本讲是一题多解模块的最后一讲，之所以安排这一讲，是因为通常情况下，一道算法题目有多种的解法。我们与别人交流时，大家的思路和解题方法可能不同，每个人写出来的代码差异巨大。那么这些不同的<strong>正确解法</strong>，可以理解成&quot;一题多解&quot;吗？换句话说，你能分清什么是真正的&quot;多解&quot;，什么是&quot;伪多解&quot;吗？</p><p>通过这些&quot;伪多解&quot;，有助于我们看透题目的本质，从而掌握核心知识点，同时也可以降低我们需要理解和记忆的知识量。</p><p>所以，在本讲，你将掌握以下三种思考方法：</p><ul><li><p>如何通过&quot;多解&quot;看透知识点的本质（分清&quot;伪多解&quot;&quot;真多解&quot;）？</p></li><li><p>如何用多种技巧满足题目要求？</p></li><li><p>如何深挖题目特点，达到一题多解的目标？</p></li></ul><h3 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h3><p>给定一系列的会议，时间间隔intervals，包括起始和结束时间<code>[[s``1``,e1],[s``2``,e2],``...``]````(``s``i &lt; ei)</code>，找到所需的最小的会议室数量。</p><p>输入：会议时间表 [[0, 30],[5, 10],[15, 20]]</p><p>输出：最少需要的会议室数量 2</p><blockquote><p>注意：如果有两个会议 [6,8] 和 [8,10]，我们认为这两个会议不冲突。</p></blockquote><h3 id="特点-1-时间分布" tabindex="-1">特点 1：时间分布 <a class="header-anchor" href="#特点-1-时间分布" aria-label="Permalink to &quot;特点 1：时间分布&quot;">​</a></h3><p>拿到这个题时，我们要特别注意一点：</p><blockquote><p>如果有两个会议，其中一个会议结束于时间点x，下一个会议同时从时间点y 开始，这两个会议可以用同一个会议室。也就是说，这两个时间段并不重合（虽然在时间点 x 相接）。</p></blockquote><p>我们从<strong>时间点</strong>出发来考虑这个问题，有以下 3 种情况。</p><h4 id="情况-1-需-1-个会议室" tabindex="-1">情况 1：需 1 个会议室 <a class="header-anchor" href="#情况-1-需-1-个会议室" aria-label="Permalink to &quot;情况 1：需 1 个会议室&quot;">​</a></h4><p>首先我们考虑一种简单的情况，假设会议与会议之间均没有重合的情况。比如输入如下：</p><blockquote><p>intervals=[0,1],[1,2],[2, 3]</p></blockquote><p>在下图中，x 轴表示会议的时间表，y 轴表示将哪些会议放在哪个会议室，蓝色、橘色和红色分别表示不同的会议。</p>',18),y=l("p",null,"在这种情况下，每个时间点只可以被染上一种颜色，时间衔接得非常好，此时只需要一个会议室。接下来我们再看一下衔接得不那么好的情况。",-1),i=p('<p>在这种情况下，每个时间点只可以被染上一种颜色，或者没有染上颜色，同样此时最多也只需要一个会议室。</p><p>不过，我们还需要处理一种很麻烦的情况，此时 [6, 8] 和 [8, 10] 两个会议的时间点都会将时间点 8 进行染色。那岂不是时间点 8 会有两种颜色？针对这种情况，我们在染色的时候，可以做一点更正。</p><blockquote><p>针对会议时间[start,end]染色时，只需要渲染[start,end)，不需要将end点进行染色。</p></blockquote><p>此时，即可满足：</p><blockquote><p>区间 [6,8)与区间[8,10)不相交。</p></blockquote><p>并且，我们不需要再对这种前后时间相接的情况做特殊判断。</p><h4 id="情况-2-需-2-个会议室" tabindex="-1">情况 2：需 2 个会议室 <a class="header-anchor" href="#情况-2-需-2-个会议室" aria-label="Permalink to &quot;情况 2：需 2 个会议室&quot;">​</a></h4><p>前面我们考虑的都是没有重合的情况，接下来，再看一下两个会议室 [0, 2) 和 [1, 4) 有重合的情况。</p>',8),A=l("p",null,"此时，只需要对 [0, 2) 和区间 [1, 4) 进行染色。我们发现，如果在时刻 1画一条竖线，会分别遇到两种颜色：蓝色和红色。",-1),F=l("h4",{id:"情况-3-需多个会议室",tabindex:"-1"},[s("情况 3：需多个会议室 "),l("a",{class:"header-anchor",href:"#情况-3-需多个会议室","aria-label":'Permalink to "情况 3：需多个会议室"'},"​")],-1),d=l("p",null,"前面考虑了需要 1 个和 2 个会议室的情况，接下来我们看一下稍微复杂一点的场景。",-1),D=p(`<p>通过画图可以发现规律，y 轴的会议室的数目与某个点染色的次数相关。那么，我们可以把这个题转换为一个<strong>更加容易理解的题目</strong>：</p><blockquote><p>给定一个数组A[]，再给定一系列区间[start, end)，我们将此区间中A[start...end)都加上1。最后求数组 A[] 中的最大值。</p></blockquote><h4 id="差分数组" tabindex="-1">差分数组 <a class="header-anchor" href="#差分数组" aria-label="Permalink to &quot;差分数组&quot;">​</a></h4><p>差分数组是一种求解区间累加的有效手段。我们先考虑只有一个区间 [start, end) 的情况。</p><p>一种暴力的写法是下面这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 给定数组A[]已经初始化为0</span></span>
<span class="line"><span style="color:#6A737D;">// 处理一个区间的情况</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i]</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 这里是累加之后的A[]数组</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 给定数组A[]已经初始化为0</span></span>
<span class="line"><span style="color:#6A737D;">// 处理一个区间的情况</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i]</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 这里是累加之后的A[]数组</span></span></code></pre></div><p>我们可以通过画图表示操作后的结果，如下图所示：</p>`,7),g=l("p",null,"如果我们只关心每个时间点的涨幅与跌幅，那么可以对每个点进行标注，如下图所示：",-1),u=p(`<p>你可以按照如下操作，得到任意时刻的累计值（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 给定数组A[]已初始化全为0</span></span>
<span class="line"><span style="color:#6A737D;">// 处理一个区间</span></span>
<span class="line"><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[start] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[end] </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 最后求前缀和，得到任意时刻的值</span></span>
<span class="line"><span style="color:#E1E4E8;">pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  pre </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> pre;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 给定数组A[]已初始化全为0</span></span>
<span class="line"><span style="color:#6A737D;">// 处理一个区间</span></span>
<span class="line"><span style="color:#D73A49;">A</span><span style="color:#24292E;">[start] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">A</span><span style="color:#24292E;">[end] </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 最后求前缀和，得到任意时刻的值</span></span>
<span class="line"><span style="color:#24292E;">pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  pre </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> pre;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>无论是一个区间还是多个区间，我们都可以参考上述方式进行处理，代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 给定数组A[]已初始化全为0</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Interval range</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> intervals) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[range.start] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[range.end] </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 最后求前缀和，得到任意时刻的值</span></span>
<span class="line"><span style="color:#E1E4E8;">pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> start; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  pre </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">A</span><span style="color:#E1E4E8;">[i] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> pre;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 给定数组A[]已初始化全为0</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Interval range</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> intervals) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[range.start] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[range.end] </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 最后求前缀和，得到任意时刻的值</span></span>
<span class="line"><span style="color:#24292E;">pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  pre </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">A</span><span style="color:#24292E;">[i] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> pre;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>基于这个知识点，我还给你留了一个练习题。</p><p><strong>练习题 1</strong> ：假设你有一个长度为<code>n</code>的数组，数组的所有元素初始化为<code>0</code>，并且给定<code>k</code>个更新操作。每个更新操作表示为一个三元组：<code>[startIndex, endIndex, inc]</code>。这个更新操作给子数组<code>A[start\`\`I\`\`ndex\`\`\`\`... endIndex]</code>（包括startIndex和endIndex）中的每一个元素增加<code>inc</code>。返回执行<code>k</code>个更新操作后的新数组。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/903.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/903.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/903.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><h4 id="改进-1-哈希表" tabindex="-1">改进 1： 哈希表 <a class="header-anchor" href="#改进-1-哈希表" aria-label="Permalink to &quot;改进 1： 哈希表&quot;">​</a></h4><p>如果我们直接使用差分数组，好像无法直接破解这个题，因为题目中并没有约定所有整数的范围。比如，如果给定的某个会议时间段是 [0, 10000000000]，就无法直接申请 A[10000000000] 这么大的数组。</p><p>因此，我们还需要对差分数组做一点改进：可以尝试用哈希表来表示数组。</p><h4 id="改进-2-范围" tabindex="-1">改进 2：范围 <a class="header-anchor" href="#改进-2-范围" aria-label="Permalink to &quot;改进 2：范围&quot;">​</a></h4><p>在标准的差分数组中，我们需要返回的是一个操作之后的数组，也就是求出每一个 A[i] 的值。但是在这个题中，只需要拿到数组的最大值就可以了。因此，我们也没有必要求出每一个 A[i] 的值。</p><p>综上，可以写出基于差分数组的改进的代码如下（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashMap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Integer </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">containsKey</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Integer </span><span style="color:#FFAB70;">k</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(k, </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(k) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> v);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">intervals:</span><span style="color:#6A737D;"> an array of meeting time intervals</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;">: the minimum number of conference rooms required</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">minMeetingRooms</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Interval</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">intervals</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// Write your code here</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 利用Hash表生成A[]数组</span></span>
<span class="line"><span style="color:#E1E4E8;">      Counter A </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Interval range</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> intervals) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> range.start;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> range.end;</span></span>
<span class="line"><span style="color:#E1E4E8;">        A.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(start, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        A.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(end, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; idx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(A.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      Collections.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(idx);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Integer i</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> idx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        pre </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> A.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(ans, pre);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">k</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">k</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(k, </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(k) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> v);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">intervals:</span><span style="color:#6A737D;"> an array of meeting time intervals</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;">: the minimum number of conference rooms required</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minMeetingRooms</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Interval</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">intervals</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Write your code here</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 利用Hash表生成A[]数组</span></span>
<span class="line"><span style="color:#24292E;">      Counter A </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Interval range</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> intervals) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> range.start;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> range.end;</span></span>
<span class="line"><span style="color:#24292E;">        A.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(start, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        A.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(end, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; idx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(A.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(idx);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Integer i</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> idx) {</span></span>
<span class="line"><span style="color:#24292E;">        pre </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> A.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(ans, pre);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.%E5%B7%AE%E5%88%86.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.%E5%B7%AE%E5%88%86.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.%E5%B7%AE%E5%88%86.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度为 O(NlgN)，空间复杂度为 O(N)。</p><p>我们发现，这个题目的考点就是在差分数组上的两点变化：</p><ul><li><p>利用哈希表表示数组；</p></li><li><p>由于只需要求最大值，因此我们求出区间端点的值就可以了。</p></li></ul><p>接下来，我们来看另外一种思路。</p><h3 id="特点-2-变招-1" tabindex="-1">特点 2：变招 1 <a class="header-anchor" href="#特点-2-变招-1" aria-label="Permalink to &quot;特点 2：变招 1&quot;">​</a></h3><p>我们继续讨论一下差分数组的解法。在本题中，我们需要的并不是一个标准的差分解法。经过分析之后，实际上只需要处理以下情况：</p><ul><li><p>给定区间 [start, end)；</p></li><li><p>只需要遇到 start 时 +1；</p></li><li><p>只需要遇到 end时 -1；</p></li><li><p>然后再利用累计求和的方式计算每个位置的值。</p></li></ul><p>在前面我们用了哈希数组的办法，那么，哈希数组就是必需的吗？</p><p>由于我们并不像差分数组一样返回操作之后的整个数组，而是返回最大值。因此只需要经过以下两步，就可以得到最大值。</p><ul><li><p>Step 1. 将所有的下标放到一个数组中，并且进行排序。</p></li><li><p>Step 2. 从头倒尾遍历下标，如果遇到区间的起始点，那么 +1；如果遇到区间的终点，那么 -1。</p></li></ul><p>操作伪代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [收集了所有的下标]</span></span>
<span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(item)</span></span>
<span class="line"><span style="color:#E1E4E8;">ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> 坐标 in item</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> 坐标是区间的起始点</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        pre </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else:</span></span>
<span class="line"><span style="color:#E1E4E8;">        pre </span><span style="color:#F97583;">-=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(ans, pre)</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [收集了所有的下标]</span></span>
<span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(item)</span></span>
<span class="line"><span style="color:#24292E;">ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> 坐标 in item</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> 坐标是区间的起始点</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        pre </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else:</span></span>
<span class="line"><span style="color:#24292E;">        pre </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(ans, pre)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans</span></span></code></pre></div><p>这里还有两个地方需要处理：</p><p>1 ) 如何判断经过排序之后的下标，是区间的终点还是一个区间的起始点？</p><p>解决方法：在放到 item 里面的时候，我们可以将起始点设置为正值，终点设置为负值。</p><p>2 ）如果经过排序之后的下标分了正负，那么一个区间的终点将会位于 x 轴的负半轴，起始点位于 x 轴的正半轴，这并没有按照原本的坐标排序。</p><p>解决方法：排序时，我们只需要按照下标的绝对值排序即可。</p><p>基于这样的处理技巧，可以写出代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">intervals:</span><span style="color:#6A737D;"> an array of meeting time intervals</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;">: the minimum number of conference rooms required</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">minMeetingRooms</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Interval</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">intervals</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Interval range</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> intervals) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      item.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(range.start);</span></span>
<span class="line"><span style="color:#E1E4E8;">      item.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> range.end);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collections.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(item, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Comparator&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(Integer </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, Integer </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(a) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">abs</span><span style="color:#E1E4E8;">(b);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> item.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (item.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        pre</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        pre</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(ans, pre);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">intervals:</span><span style="color:#6A737D;"> an array of meeting time intervals</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;">: the minimum number of conference rooms required</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minMeetingRooms</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Interval</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">intervals</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Interval range</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> intervals) {</span></span>
<span class="line"><span style="color:#24292E;">      item.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(range.start);</span></span>
<span class="line"><span style="color:#24292E;">      item.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> range.end);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(item, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, Integer </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(a) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> item.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (item.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        pre</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        pre</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(ans, pre);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.%E5%B7%AE%E5%88%862.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.%E5%B7%AE%E5%88%862.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.%E5%B7%AE%E5%88%862.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度为 O(NlgN)，空间复杂度为 O(N)。</p><p>在这里，我们已经快找不到差分数组的影子了，但是本质上还是基于差分数组进行求解。那么，还有其他的解法吗？</p><h3 id="特点-3-变招-2" tabindex="-1">特点 3：变招 2 <a class="header-anchor" href="#特点-3-变招-2" aria-label="Permalink to &quot;特点 3：变招 2&quot;">​</a></h3><p>前面在处理区间的时候：是将所有区间的起始点标记为非负，区间的终点标记为负数；排序时按照绝对值进行排序。然后再利用<strong>差分数组的核心思想</strong>：遇到区间的起始点 +1；遇到区间的终点 -1。</p><p>那么还有没有其他的招法呢？我们再认真地研究一下这个题目，不难发现，破题的关键就在两处条件：</p><ol><li><p>需要将所有的坐标排序，并且需要知道每个坐标是属于一个区间的起始点还是终点。<strong>即顺序遍历坐标，知道每个坐标是起始点还是终点</strong>；</p></li><li><p>利用差分数组的核心思想，然后求出最大值。</p></li></ol><p>根据条件 2，我们已知可以利用差分数组的思路，那么条件 1 这里还可以用别的方法吗？下面我们尝试完成条件 1 。</p><p>首先将所有区间的起始点坐标放到 starts 数组中，将所有区间的终点坐标放到 end 数组中。然后，再将 starts 和 end 采用<strong>合并排序</strong>的方法进行合并（注意，此时我们不是直接使用合并排序，准确来说是使用合并排序中的合并的技巧）。</p><p>此时，我们可以达成条件 1 的两个目的：</p><ul><li><p>顺序遍历每个坐标；</p></li><li><p>知道每个坐标是区间起始坐标，还是终点坐标。</p></li></ul><p>伪代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">starts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [...区间的起始点...]</span></span>
<span class="line"><span style="color:#E1E4E8;">ends </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [...区间的终点...]</span></span>
<span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(start);</span></span>
<span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(ends);</span></span>
<span class="line"><span style="color:#E1E4E8;">slen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(starts)</span></span>
<span class="line"><span style="color:#E1E4E8;">elen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">(ends)</span></span>
<span class="line"><span style="color:#E1E4E8;">i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> slen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> elen</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> elen </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> slen</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        遍历到了start[i]；并且我们知道这个坐标是区间的起始点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else:</span></span>
<span class="line"><span style="color:#E1E4E8;">        遍历到了end[i]；并且我们知道这个坐标是区间的终点</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">starts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [...区间的起始点...]</span></span>
<span class="line"><span style="color:#24292E;">ends </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [...区间的终点...]</span></span>
<span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(start);</span></span>
<span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(ends);</span></span>
<span class="line"><span style="color:#24292E;">slen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(starts)</span></span>
<span class="line"><span style="color:#24292E;">elen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">(ends)</span></span>
<span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> slen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> elen</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> elen </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> slen</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        遍历到了start[i]；并且我们知道这个坐标是区间的起始点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else:</span></span>
<span class="line"><span style="color:#24292E;">        遍历到了end[i]；并且我们知道这个坐标是区间的终点</span></span></code></pre></div><p>基于这样的思想，再加上我们的差分核心思路，那么就可以写出如下代码了（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#FFAB70;">intervals:</span><span style="color:#6A737D;"> an array of meeting time intervals</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;">: the minimum number of conference rooms required</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">minMeetingRooms</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Interval</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">intervals</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Write your code here</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> intervals </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> intervals.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[N];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[N];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Interval range</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> intervals) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          start[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> range.start;</span></span>
<span class="line"><span style="color:#E1E4E8;">          end[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> range.end;</span></span>
<span class="line"><span style="color:#E1E4E8;">          i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(start);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Arrays.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(end);</span></span>
<span class="line"><span style="color:#E1E4E8;">        i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> pre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> start[i] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> end[j]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 是个坐标的起始点</span></span>
<span class="line"><span style="color:#E1E4E8;">            pre</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 是个坐标的终点</span></span>
<span class="line"><span style="color:#E1E4E8;">            pre</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          ans </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(ans, pre);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">intervals:</span><span style="color:#6A737D;"> an array of meeting time intervals</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;">: the minimum number of conference rooms required</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minMeetingRooms</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Interval</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">intervals</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Write your code here</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> intervals </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> intervals.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[N];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[N];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Interval range</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> intervals) {</span></span>
<span class="line"><span style="color:#24292E;">          start[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> range.start;</span></span>
<span class="line"><span style="color:#24292E;">          end[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> range.end;</span></span>
<span class="line"><span style="color:#24292E;">          i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(start);</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(end);</span></span>
<span class="line"><span style="color:#24292E;">        i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> start[i] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end[j]) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 是个坐标的起始点</span></span>
<span class="line"><span style="color:#24292E;">            pre</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 是个坐标的终点</span></span>
<span class="line"><span style="color:#24292E;">            pre</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(ans, pre);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ans;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.%E5%B7%AE%E5%88%863.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.%E5%B7%AE%E5%88%863.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.%E5%B7%AE%E5%88%863.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度为 O(NlgN)，空间复杂度为O(N)。</p><p>接下来，我们再看看有没有其他的解法。</p><h3 id="特点-4-最少" tabindex="-1">特点 4：最少 <a class="header-anchor" href="#特点-4-最少" aria-label="Permalink to &quot;特点 4：最少&quot;">​</a></h3><p>再回到原始题目，要想会议室最少，那么我们在拿到一个 meeting = [start,end] 的时候，尽量不去开新的会议室，而是<strong>选择一个已有会议结束时间</strong>&lt;= start 的会议室开会。</p><p>要做到这一点，我们需要记录每个会议室的结束时间；当给定 meeting = [start,end] 的时候，就需要找到一个 &lt;= start 的会议室提供给这个 meeting使用。</p><p>到这里，不知道你是否想起了我们在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6692&amp;fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">《03 | 优先级队列：堆与优先级队列，筛选最优元素》</a>中介绍的&quot;例 3&quot;。我们可以把会议室也放到优先级队列中，每次总是取出结束时间最早的会议室。</p><p>由于给定的所有的 meeting 并没有排好序。因此，我们还需要做一点预处理------对 meeting进行排序。此时你还会面临一个问题，在排序的时候，meeting有 [start,end]，那么应该按照 start 值来排序，还是按照 end 来排序呢？</p><p>答案是按照 start 值来排序。因为我们在选择会议室的时候，需要两个输入，分别是 meeting 的开始时间 start 和会议室的结束时间。</p><p>基于这样的思想，我们就可以写出如下的代码（解析在注释里）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">minMeetingRooms</span><span style="color:#E1E4E8;">(List&lt;</span><span style="color:#F97583;">Interval</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">intervals</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> N </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> intervals </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> intervals.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 把所有的会议时间段都按start来排序</span></span>
<span class="line"><span style="color:#E1E4E8;">      Collections.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(intervals, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Comparator&lt;</span><span style="color:#F97583;">Interval</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(Interval </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, Interval </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a.start </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b.start;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 这里要按照会议室的结束时间来排序</span></span>
<span class="line"><span style="color:#E1E4E8;">      Queue&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; meetingRooms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> PriorityQueue&lt;&gt;((v1, v2) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> v1 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> v2);</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Interval meeting </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> intervals) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">meetingRooms.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">              meetingRooms.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> meeting.start) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 我们需要把这个会议室的结束时间修改一下</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 当然，优先级队列里面是不好直接修改元素值的</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 那我们只能采用先出队，再把当前会议结束时间入队的方式</span></span>
<span class="line"><span style="color:#E1E4E8;">          meetingRooms.</span><span style="color:#B392F0;">poll</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">          meetingRooms.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(meeting.end);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果找不到会议室，那么新开一间</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 标记其结束时间</span></span>
<span class="line"><span style="color:#E1E4E8;">          meetingRooms.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(meeting.end);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> meetingRooms.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">minMeetingRooms</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">Interval</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">intervals</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> N </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> intervals </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> intervals.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 把所有的会议时间段都按start来排序</span></span>
<span class="line"><span style="color:#24292E;">      Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(intervals, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">Interval</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Interval </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, Interval </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a.start </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b.start;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 这里要按照会议室的结束时间来排序</span></span>
<span class="line"><span style="color:#24292E;">      Queue&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; meetingRooms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> PriorityQueue&lt;&gt;((v1, v2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> v1 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> v2);</span></span>
<span class="line"><span style="color:#24292E;">          </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Interval meeting </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> intervals) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">meetingRooms.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">              meetingRooms.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> meeting.start) {</span></span>
<span class="line"><span style="color:#24292E;">              </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 我们需要把这个会议室的结束时间修改一下</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 当然，优先级队列里面是不好直接修改元素值的</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 那我们只能采用先出队，再把当前会议结束时间入队的方式</span></span>
<span class="line"><span style="color:#24292E;">          meetingRooms.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          meetingRooms.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(meeting.end);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 如果找不到会议室，那么新开一间</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 标记其结束时间</span></span>
<span class="line"><span style="color:#24292E;">          meetingRooms.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(meeting.end);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> meetingRooms.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.PQ.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.PQ.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/919.%E4%BC%9A%E8%AE%AE%E5%AE%A4II.PQ.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p><strong>复杂度分析</strong>：时间复杂度为O(NlgN)，空间复杂度为 O(N)。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>最后，我将本讲用到的知识整理成在一张思维导图中，方便你复习。</p>`,64),m=p('<p>通过总结我们发现，这个题目的核心解法实际上只有两种，但是基于差分方法又出现了三种&quot;伪多解&quot;的做法，我们一一进行了分析，透过代码，相信你也学会了如何运用多种技巧来满足题目的条件。</p><p>当然，在面试中，如果你遇到这道题之后，面试官有可能还会深入地问你一些问题，比如下面这道一个思考题。</p><p>题目仍然不变，要求输出最少会议室的个数，并且还要输出每个会议室里面召开哪些会议。</p><p>输入：会议时间表[[0,30],[5,10],[15,20]]</p><p>输出：最少需要的会议室数量 2，[[0,30]] 放到会议室 1，[[5,10], [15,20]] 放到会议室 2。</p><blockquote><p>代码：<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/ans.java?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Java</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/ans.cpp?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">C++</a>/<a href="https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/21.Meets/ans.py?fileGuid=xxQTRXtVcqtHK6j8" target="_blank" rel="noreferrer">Python</a></p></blockquote><p>你可以自己尝试求解这道题目，把答案写在留言区，我们一起讨论。关于这道会议室的题目就介绍到这里。接下来，下一讲介绍&quot;22|数据结构模板：如何让解题变成搭积木？&quot;，让我们继续前进。</p>',7);function h(C,b,v,_,f,B){const n=e("Image");return t(),r("div",null,[E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M00/3D/CC/CioPOWCWS3qAAHo4AADc4BKJoU0568.png"}),s(),y,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/3D/C4/Cgp9HWCWS4GAbC39AACrd4MbmYc760.png"}),s(),i,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image6/M00/3D/C4/Cgp9HWCWS4uACkpsAAE9Ulp4bYY214.png"}),s(),A,F,d,a(n,{alt:"Drawing 6.png",src:"https://s0.lgstatic.com/i/image6/M00/3D/C4/Cgp9HWCWS5KAbk7KAAMAlgj142s581.png"}),s(),D,a(n,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image6/M00/3D/CD/CioPOWCWS6CAMsbXAACSuolYP0Y214.png"}),s(),g,a(n,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image6/M01/3D/C4/Cgp9HWCWS6eAWdrcAACUf94Rarg748.png"}),s(),u,a(n,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image6/M00/3D/CD/CioPOWCWTAeAaIcSAAGls-nmvb0606.png"}),s(),m])}const I=o(c,[["render",h]]);export{q as __pageData,I as default};
