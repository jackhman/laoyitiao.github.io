import{_ as n,j as o,o as p,g as l,k as e,s,h as r,Q as c}from"./chunks/framework.b3d8e22e.js";const _=JSON.parse('{"title":"提交请求 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3161) 第31讲：ZooKeeper 中二阶段提交算法的实现分析.md","filePath":"posts/backEnd/ZooKeeper源码分析与实战_文档/(3161) 第31讲：ZooKeeper 中二阶段提交算法的实现分析.md","lastUpdated":1696417798000}'),t={name:"posts/backEnd/ZooKeeper源码分析与实战_文档/(3161) 第31讲：ZooKeeper 中二阶段提交算法的实现分析.md"},E=s("p",null,"前几节课中，我们一直围绕在分布式系统环境下，如何解决一致性问题来进行讨论，并分别介绍了在分布式环境中比较常见的二阶段提交、三阶段提交算法，之后又对比介绍了 ZooKeeper 所采用的 ZAB 协议算法和 Paxos 算法的优缺点。",-1),y=s("p",null,"在学习 ZAB 协议和 Paxos 算法的过程中，我们曾提到在处理来自客户端的事务性请求时，为了保证整个集群的数据一致性，其各自的底层实现与二阶段算法都有相似之处。但我们知道，二阶段提交算法自身有一些缺点，比如容易发生单点故障，比如在并发性能上有一些瓶颈，那么今天就深入 ZooKeeper 的底层，来看一下 ZooKeeper 是如何克服这些问题，并实现自己特有的二阶段提交算法的。希望通过本节课的学习，帮助你进一步提高解决分布式一致性问题的能力。",-1),i=s("h3",{id:"提交请求",tabindex:"-1"},[r("提交请求 "),s("a",{class:"header-anchor",href:"#提交请求","aria-label":'Permalink to "提交请求"'},"​")],-1),d=s("p",null,"前面我们学到，二阶段提交的本质是协调和处理 ZooKeeper 集群中的服务器，使它们在处理事务性会话请求的过程中能保证数据一致性。如果把执行在 ZooKeeper 集群中各个服务器上的事务会话处理操作分别看作不同的函数，那么整个一致性的处理逻辑就相当于包裹这些函数的事务。而在单机环境中处理事务的逻辑是，包含在事务中的所有函数要么全部成功执行，要么全部都不执行。",-1),u=c(`<p>不同的是，在分布式环境中，处理事务请求的各个函数是分布在不同的网络服务器上的线程，无法像在单机环境下一样，做到当事务中的某一个环节发生异常的时候，回滚包裹在整个事务中的操作。因此，分布式环境中处理事务操作的时候，一般的算法不会要求全部集群中的机器都成功执行操作，如果有其中一个函数执行异常，那么整个事务就会把所有函数的执行结果回滚到执行前的状态，也就是无论是正确执行的函数，还是执行异常的函数，各自所做的对数据和程序状态的变更都将被删除。</p><h3 id="执行请求" tabindex="-1">执行请求 <a class="header-anchor" href="#执行请求" aria-label="Permalink to &quot;执行请求&quot;">​</a></h3><p>看完提交请求的处理过程后，我们再来看一下在执行请求时 ZooKeeper 的底层实现过程。</p><p>ZooKeeper 集群中的 Leader 服务器对该条事务性会话操作是否能够在 Follow 服务器上执行，向集群中的 Follow 服务器发起 Proposal 请求。</p><p>这里请你注意，与我们之前介绍的二阶段提交不同的是，在 ZooKeeper 的实现中并没有中断提交的逻辑。集群中的 Follow 服务器在接收到上述 Proposal 请求后，只有两种处理情况：</p><p>第一种情况：ZooKeeper 集群中的 Follow 服务器能够正确执行操作，并向 ZooKeeper 集群中的 Leader 反馈执行结果。</p><p>第二种情况：无法正确执行该条 Proposal 操作，直接抛弃该条请求。</p><p>ZooKeeper 集群的这种执行逻辑，最终导致无须等 待所有服务器都执行完成并反馈，集群中的 Leader 服务器只需要接收到集群中过半数的 Follow 服务器成功执行的反馈信息， ZooKeeper 集群中的 Leader 服务器最终会统计 Follow 服务器反馈的信息，当超过半数以上服务器可以正确执行操作后，整个 ZooKeeper 集群就可以进入执行事务提交操作。</p><h3 id="底层实现" tabindex="-1">底层实现 <a class="header-anchor" href="#底层实现" aria-label="Permalink to &quot;底层实现&quot;">​</a></h3><p>介绍完 ZooKeeper 实现二阶段提交算法的原理后，接下来我们深入代码层面看看 ZooKeeper 是如何设计架构的。</p><p>从源码层面来讲，ZooKeeper 在实现整个二阶段提交算法的过程中，可以分为 Leader 服务器端的发起 Proposal 操作和 Follow 服务器端的执行反馈操作。</p><p>我们先来看看，在 ZooKeeper 集群中的 Leader 是如何向其他 Follow 服务器发送 Proposal 请求的呢？</p><p>如下面的代码所示， ZooKeeper 通过 SendAckRequestProcessor 类发送 Proposal 来提交请求。这个类首先继承了 RequestProcessor 类，但是它不是处理来自客户端的请求信息，而是用来处理向 Follow 服务器发送的 Proposal 请求信息。它在内部通过 processRequest 函数来判断，责任链中传递请求操作是否是数据同步操作：如果判断是 OpCode.sync 操作（也就是数据同步操作），就通过 learner.writePacket 方法把 Proposal 请求向集群中的所有 Follow 服务器进行发送。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SendAckRequestProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestProcessor</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Flushable</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processRequest</span><span style="color:#E1E4E8;">(Request </span><span style="color:#FFAB70;">si</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(si.type </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> OpCode.sync){ </span></span>
<span class="line"><span style="color:#E1E4E8;">        QuorumPacket qp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">QuorumPacket</span><span style="color:#E1E4E8;">(Leader.ACK, si.</span><span style="color:#B392F0;">getHdr</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getZxid</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            learner.</span><span style="color:#B392F0;">writePacket</span><span style="color:#E1E4E8;">(qp, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            LOG.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Closing connection to leader, exception during packet send&quot;</span><span style="color:#E1E4E8;">, e); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">learner.sock.</span><span style="color:#B392F0;">isClosed</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    learner.sock.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e1</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// Nothing to do, we are shutting things down, so an exception here is irrelevant </span></span>
<span class="line"><span style="color:#E1E4E8;">                LOG.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Ignoring error closing the connection&quot;</span><span style="color:#E1E4E8;">, e1); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SendAckRequestProcessor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestProcessor</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Flushable</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processRequest</span><span style="color:#24292E;">(Request </span><span style="color:#E36209;">si</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(si.type </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> OpCode.sync){ </span></span>
<span class="line"><span style="color:#24292E;">        QuorumPacket qp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QuorumPacket</span><span style="color:#24292E;">(Leader.ACK, si.</span><span style="color:#6F42C1;">getHdr</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getZxid</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            learner.</span><span style="color:#6F42C1;">writePacket</span><span style="color:#24292E;">(qp, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            LOG.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Closing connection to leader, exception during packet send&quot;</span><span style="color:#24292E;">, e); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">learner.sock.</span><span style="color:#6F42C1;">isClosed</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">                    learner.sock.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e1</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Nothing to do, we are shutting things down, so an exception here is irrelevant </span></span>
<span class="line"><span style="color:#24292E;">                LOG.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Ignoring error closing the connection&quot;</span><span style="color:#24292E;">, e1); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在介绍完 ZooKeeper 集群中的 Leader 服务器发送 Proposal 的底层实现过程后，接下来我们再来学习一下 Follow 服务端在接收到 Leader 服务器发送的 Proposal 后的整个处理逻辑。</p><p>如下面的代码所示，这在 Follow 服务器端是通过 ProposalRequestProcessor 来完成处理的。ProposalRequestProcessor 构造函数中首先初始化了 Leader 服务器、下一个请求处理器，以及负责反馈执行结果给 Leader 服务器的 AckRequestProcessor 处理器。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ProposalRequestProcessor</span><span style="color:#E1E4E8;">(LeaderZooKeeperServer zks, </span></span>
<span class="line"><span style="color:#E1E4E8;">        RequestProcessor nextProcessor) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.zks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zks; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.nextProcessor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nextProcessor; </span></span>
<span class="line"><span style="color:#E1E4E8;">    AckRequestProcessor ackProcessor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AckRequestProcessor</span><span style="color:#E1E4E8;">(zks.</span><span style="color:#B392F0;">getLeader</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">    syncProcessor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncRequestProcessor</span><span style="color:#E1E4E8;">(zks, ackProcessor); </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProposalRequestProcessor</span><span style="color:#24292E;">(LeaderZooKeeperServer zks, </span></span>
<span class="line"><span style="color:#24292E;">        RequestProcessor nextProcessor) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.zks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zks; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.nextProcessor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextProcessor; </span></span>
<span class="line"><span style="color:#24292E;">    AckRequestProcessor ackProcessor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AckRequestProcessor</span><span style="color:#24292E;">(zks.</span><span style="color:#6F42C1;">getLeader</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">    syncProcessor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncRequestProcessor</span><span style="color:#24292E;">(zks, ackProcessor); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，我们进入到 AckRequestProcessor 函数的内部，来看一下 Follow 服务器是如何反馈处理结果给 Leader 服务器的。</p><p>如下面的代码所示， AckRequestProcessor 类同样也继承了 RequestProcessor，从中可以看出在 ZooKeeper 中处理 Leader 服务器的 Proposal 时，是将该 Proposal 请求当作网络中的一条会话请求来处理的。整个处理的逻辑实现也是按照处理链模式设计实现的，在 AckRequestProcessor 类的内部通过 processRequest 函数，来向集群中的 Leader 服务器发送 ack 反馈信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AckRequestProcessor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestProcessor</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processRequest</span><span style="color:#E1E4E8;">(Request </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    QuorumPeer self </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> leader.self; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(self </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">        leader.</span><span style="color:#B392F0;">processAck</span><span style="color:#E1E4E8;">(self.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), request.zxid, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        LOG.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Null QuorumPeer&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AckRequestProcessor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RequestProcessor</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processRequest</span><span style="color:#24292E;">(Request </span><span style="color:#E36209;">request</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    QuorumPeer self </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> leader.self; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(self </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">        leader.</span><span style="color:#6F42C1;">processAck</span><span style="color:#24292E;">(self.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), request.zxid, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        LOG.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Null QuorumPeer&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">}}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本节课我们主要介绍了，二阶段提交算法在 ZooKeeper 中的应用，并深入底层分析了 ZooKeeper 实现二阶段提交的具体过程。虽然二阶段提交自身有一些问题，不过还是一个比较好的解决分布式环境下一致性问题的算法，因此 ZooKeeper 在实现的过程中也借鉴了它，并通过自身的崩溃恢复机制来解决二阶段提交算法中的单点故障等问题。</p><p>从前几个课时到现在可以发现，无论是 Paxos 算法还是 ZAB 协议，都在原始的二阶段提交算法的基础上针对自身要解决的问题进行了修改和优化。面对复杂的网络环境，再优秀的算法也不是万能的。我们在学习算法的同时，更应该深入掌握其中的核心原理以及算法设计的目的，以便在日常工作中更好地解决遇到的问题。</p><p>这里给大家一道<strong>思考题</strong>：在二阶段提交算法中，不可缺少的一个环节就是，向集群中的服务器发送提案询问操作，当收到提案操作后，需要集群中的服务器给予反馈，这本质上就是一次客户端和服务器端的会话处理过程。而当会话的超时时间过长，虽然能够保证服务器的响应，但又会降低整个集群的处理性能。可是过短的超时时间，又可能会因为网络延迟或事务处理耗时，导致本可以正常执行的反馈信息并没有发送回提案服务器。那么如果是你，应该如何设置这个会话的超时时间呢？</p>`,24);function F(P,h,k,q,A,g){const a=o("Image");return p(),l("div",null,[E,y,i,d,e(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/43/F4/Ciqc1F889pCADWF1AABRdrcwWog707.png"}),u])}const B=n(t,[["render",F]]);export{_ as __pageData,B as default};
