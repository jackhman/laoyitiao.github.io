import{_ as o,j as e,o as t,g as c,k as p,h as s,s as n,Q as l}from"./chunks/framework.a0d18f64.js";const U=JSON.parse('{"title":"09你的第一个API测试框架（一）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4820) 09  你的第一个 API 测试框架（一）.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4820) 09  你的第一个 API 测试框架（一）.md","lastUpdated":1696682708000}'),r={name:"posts/devops/114-测试开发入门与实战文档/(4820) 09  你的第一个 API 测试框架（一）.md"},y=n("h1",{id:"_09你的第一个api测试框架-一",tabindex:"-1"},[s("09你的第一个API测试框架（一） "),n("a",{class:"header-anchor",href:"#_09你的第一个api测试框架-一","aria-label":'Permalink to "09你的第一个API测试框架（一）"'},"​")],-1),E=n("p",null,"通过上一节课的学习，我们已经对搭建 Web 自动化测试框架非常熟悉了。",-1),i=n("p",null,"接下来，我将带你一步步搭建 API 测试框架，同样也是分为两个课时讲解，今天课时的主要内容是 Requests 和 pytest 的基本介绍，下一课时则是详细讲解 pytest 的使用，以及 pytest 集成测试报告，课时具体安排如下所示。",-1),u=l(`<p>首先我们看下 API 测试框架和 Web 测试框架的区别。</p><p>两者唯一的区别在于测试请求的方式不同，Web 自动化测试框架是通过操作浏览器对目标对象进行操作的，而 API 测试框架通常是通过<strong>直接请求 HTTP 接口来完成的</strong>，特别是随着近几年微服务技术的普及，RESTFUL 风格的 HTTP 接口调用越来越多。</p><blockquote><p>想要了解更多关于 HTTP 协议和 RESTFUL 的内容，可参考公众号 iTesting 的两篇文章<a href="https://mp.weixin.qq.com/s/PLidZRuIGA6snNejmH9Llw" target="_blank" rel="noreferrer">《更好地理解 RSTFUL》</a>和<a href="https://mp.weixin.qq.com/s/cyzpqlAd5S4WUr8UreQNHA" target="_blank" rel="noreferrer">《HTTP协议总结》</a>。</p></blockquote><p>那么 HTTP 形式的 API， 有哪几种请求方式呢？</p><blockquote><p><code>GET</code></p><p>GET 方法请求一个指定资源的表示形式，使用 GET 的请求应该只被用于获取数据。<br><code>HEAD</code></p><p>HEAD 方法请求一个与 GET 请求的响应相同的响应，但没有响应体。<br><code>POST</code></p><p>POST 方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用。<br><code>PUT</code></p><p>PUT 方法用请求有效载荷替换目标资源的所有当前表示。<br><code>DELETE</code></p><p>DELETE 方法删除指定的资源。<br><code>CONNECT</code></p><p>CONNECT 方法建立一个到由目标资源标识的服务器的隧道。<br><code>OPTIONS</code></p><p>OPTIONS 方法用于描述目标资源的通信选项。<br><code>TRACE</code></p><p>TRACE 方法沿着到目标资源的路径执行一个消息环回测试。<br><code>PATCH</code></p><p>PATCH 方法用于对资源应用部分修改。</p></blockquote><p>一般情况下，在测试中使用最多的请求方式是 GET、POST、PUT、DELETE 这四种。并且如果是通过代码方式发送请求，在 Python 里我们最经常用的就是 Requests 库。</p><p>如果我们要使用 Requests 库作为发送接口请求的命令，我们就必须了解下 Requests 是什么，以及具体怎么用。</p><h3 id="requests" tabindex="-1">Requests <a class="header-anchor" href="#requests" aria-label="Permalink to &quot;Requests&quot;">​</a></h3><p>那什么是 Request 呢？Requests 官方说它是一个<strong>简单而优雅的 HTTP 库</strong>。</p><h4 id="_1-requests-安装" tabindex="-1">1.Requests 安装 <a class="header-anchor" href="#_1-requests-安装" aria-label="Permalink to &quot;1.Requests 安装&quot;">​</a></h4><p>Requests 的安装非常简单，只要在命令行里输入如下命令即可：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;"> python </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m pip install requests</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;"> python </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m pip install requests</span></span></code></pre></div><h4 id="_2-requests-使用" tabindex="-1">2.Requests 使用 <a class="header-anchor" href="#_2-requests-使用" aria-label="Permalink to &quot;2.Requests 使用&quot;">​</a></h4><p>Requests 的使用也非常简单，下面我们就来看下。</p><ul><li><strong>发送 get 请求</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 发送get请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    requests.get(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/ip&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 发送get请求</span></span>
<span class="line"><span style="color:#24292E;">    requests.get(</span><span style="color:#032F62;">&#39;https://httpbin.org/ip&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>是不是非常简单？但在实际应用中，GET 接口请求常常要带参数 query string，而且有时候需要加 Header，鉴权（OAuth）甚至代理（Proxy），那么这部分接口请求如何发送呢？</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 发送get请求 --带参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 等同于直接访问https://httpbin.org/get?kevin=hello</span></span>
<span class="line"><span style="color:#E1E4E8;">    requests.get(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/get&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;kevin&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 当访问接口发生301跳转时，可以设置允许或者禁止跳转</span></span>
<span class="line"><span style="color:#E1E4E8;">    requests.get(</span><span style="color:#9ECBFF;">&#39;http://github.com/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">allow_redirects</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 发送get请求， 加proxy</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;http://10.10.1.10:3128&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#9ECBFF;">&#39;https&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;http://10.10.1.10:1080&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    requests.get(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/get&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">proxies</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">proxies)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 发送get请求，加鉴权 -- Basic Auth</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 首先导入HTTPBasicAuth，一般导入语句写在py文件的最前面。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> requests.auth </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> HTTPBasicAuth</span></span>
<span class="line"><span style="color:#E1E4E8;">    requests.get(</span><span style="color:#9ECBFF;">&#39;https://api.github.com/user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">auth</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">HTTPBasicAuth(</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 发送get请求，加鉴权 -- Digest Auth</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 首先导入HTTPDigestAuth，一般导入语句写在py文件的最前面。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> requests.auth </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> HTTPDigestAuth</span></span>
<span class="line"><span style="color:#E1E4E8;">    requests.get(</span><span style="color:#9ECBFF;">&#39;https://api.github.com/user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">auth</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">HTTPDigestAuth(</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># OAuth 1 Authentication</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 首先安装requests_oauthlib （可通过pip install）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> requests_oauthlib </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> OAuth1</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://api.twitter.com/1.1/account/verify_credentials.json&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    auth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> OAuth1(</span><span style="color:#9ECBFF;">&#39;YOUR_APP_KEY&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;YOUR_APP_SECRET&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;USER_OAUTH_TOKEN&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;USER_OAUTH_TOKEN_SECRET&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    requests.get(url, </span><span style="color:#FFAB70;">auth</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">auth)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 发送get请求 --带参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 等同于直接访问https://httpbin.org/get?kevin=hello</span></span>
<span class="line"><span style="color:#24292E;">    requests.get(</span><span style="color:#032F62;">&#39;https://httpbin.org/get&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;kevin&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 当访问接口发生301跳转时，可以设置允许或者禁止跳转</span></span>
<span class="line"><span style="color:#24292E;">    requests.get(</span><span style="color:#032F62;">&#39;http://github.com/&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">allow_redirects</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 发送get请求， 加proxy</span></span>
<span class="line"><span style="color:#24292E;">    proxies </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;http&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;http://10.10.1.10:3128&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#032F62;">&#39;https&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;http://10.10.1.10:1080&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    requests.get(</span><span style="color:#032F62;">&#39;https://httpbin.org/get&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">proxies</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">proxies)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 发送get请求，加鉴权 -- Basic Auth</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 首先导入HTTPBasicAuth，一般导入语句写在py文件的最前面。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> requests.auth </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> HTTPBasicAuth</span></span>
<span class="line"><span style="color:#24292E;">    requests.get(</span><span style="color:#032F62;">&#39;https://api.github.com/user&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">auth</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">HTTPBasicAuth(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 发送get请求，加鉴权 -- Digest Auth</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 首先导入HTTPDigestAuth，一般导入语句写在py文件的最前面。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> requests.auth </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> HTTPDigestAuth</span></span>
<span class="line"><span style="color:#24292E;">    requests.get(</span><span style="color:#032F62;">&#39;https://api.github.com/user&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">auth</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">HTTPDigestAuth(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># OAuth 1 Authentication</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 首先安装requests_oauthlib （可通过pip install）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> requests_oauthlib </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> OAuth1</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://api.twitter.com/1.1/account/verify_credentials.json&#39;</span></span>
<span class="line"><span style="color:#24292E;">    auth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> OAuth1(</span><span style="color:#032F62;">&#39;YOUR_APP_KEY&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;YOUR_APP_SECRET&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;USER_OAUTH_TOKEN&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;USER_OAUTH_TOKEN_SECRET&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    requests.get(url, </span><span style="color:#E36209;">auth</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">auth)</span></span></code></pre></div><p>以上是不同情况下的 get 请求，在测试中可以根据实际需求选择具体使用哪种方式。</p><ul><li><strong>发送 post 请求</strong></li></ul><p>post 请求通常都会带数据 Payloads，当然也会需要 Header、OAuth，发送方式如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://httpbin.org/anything&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;user-agent&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;my-app/  0.0.1&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    payloads </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;better to follow&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    auth </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Kevin&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 直接post</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.post(url, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">payloads)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># post带header</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.post(url, </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">headers, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">payloads)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># post带鉴权, auth类型跟get请求支持的auth类型相同。</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.post(url, </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">headers, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">payloads， </span><span style="color:#FFAB70;">auth</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">HTTPBasicAuth(</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://httpbin.org/anything&#39;</span></span>
<span class="line"><span style="color:#24292E;">    headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;user-agent&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;my-app/  0.0.1&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    payloads </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;better to follow&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    auth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Kevin&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 直接post</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.post(url, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">payloads)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># post带header</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.post(url, </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">headers, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">payloads)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># post带鉴权, auth类型跟get请求支持的auth类型相同。</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.post(url, </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">headers, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">payloads， </span><span style="color:#E36209;">auth</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">HTTPBasicAuth(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">))</span></span></code></pre></div><ul><li><strong>发送 put 请求</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 直接发送put请求 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 如需要加header，auth，即参考post请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.put(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/put&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.text)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 直接发送put请求 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 如需要加header，auth，即参考post请求</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.put(</span><span style="color:#032F62;">&#39;https://httpbin.org/put&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.text)</span></span></code></pre></div><ul><li><strong>发送 delete 请求</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 直接发送delete请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.delete(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/anything&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.text)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 直接发送delete请求</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.delete(</span><span style="color:#032F62;">&#39;https://httpbin.org/anything&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.text)</span></span></code></pre></div><h4 id="_3-获取接口返回值" tabindex="-1">3.获取接口返回值 <a class="header-anchor" href="#_3-获取接口返回值" aria-label="Permalink to &quot;3.获取接口返回值&quot;">​</a></h4><p>接口的请求通常会有返回值，在接口测试中，特别是在顺序访问多个接口，并且前一个接口的返回是后一个接口的入参时，常常需要把接口返回的结果保持下来解析，那么如何保持接口请求呢？</p><p>Requests 中提供了以下方式来保存接口返回值：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.session()</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.post(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/anything&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;kevin&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 返回文本型response</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.text)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># #返回文本型response，并用utf-8格式编码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># # 当你用r.text得出的结果是不可读的内容例如包括类似xu&#39;\\xe1&#39;或者有错误提示&quot;&#39;ascii&#39; codec can&#39;t encode characters in position&quot;时，可以用encode</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.text.encode(</span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># # 获取二进制返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.content)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># # 获取请求返回码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.status_code)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 获取response的headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.headers)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 获取请求返回的cookies</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.get(</span><span style="color:#9ECBFF;">&#39;http://google.com&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(request.cookies.get_dict())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.session()</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.post(</span><span style="color:#032F62;">&#39;https://httpbin.org/anything&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;kevin&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 返回文本型response</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.text)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># #返回文本型response，并用utf-8格式编码</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># # 当你用r.text得出的结果是不可读的内容例如包括类似xu&#39;\\xe1&#39;或者有错误提示&quot;&#39;ascii&#39; codec can&#39;t encode characters in position&quot;时，可以用encode</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.text.encode(</span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># # 获取二进制返回值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.content)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># # 获取请求返回码</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.status_code)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 获取response的headers</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.headers)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 获取请求返回的cookies</span></span>
<span class="line"><span style="color:#24292E;">    s.get(</span><span style="color:#032F62;">&#39;http://google.com&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(request.cookies.get_dict())</span></span></code></pre></div><p>获取接口返回值后，如果你的前一个接口的返回是下一个接口的入参，那么就可以根据需要采用以上方式的任意一个解析出你需要的返回值，然后传递给下一个接口即可。</p><h4 id="_4-requests-保存-session" tabindex="-1">4.Requests 保存 Session <a class="header-anchor" href="#_4-requests-保存-session" aria-label="Permalink to &quot;4.Requests 保存 Session&quot;">​</a></h4><p>以上 4 种 Requests 使用方式是直接发送接口请求，我们知道 HTTP 协议是无状态的协议，这也就导致每次接口请求都是独立的，也就意味着你的多个接口请求之间不能共用数据，比如登录态、cookie 等都是不能共用，这显然不符合我们的需求。</p><p>基于此，Requests 库提供了 Session 会话对象， 用来帮我们跨请求保持参数，使用 requests.Session() , 可以在一个 Session 实例的所有请求中保留 cookie，下面我们来看下 requests.Session() 的基本用法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 初始化一个session对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 第一个get，先设置一个session</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># httpbin这个网站允许我们通过如下方式设置，在set后写你需要的值即可</span></span>
<span class="line"><span style="color:#E1E4E8;"> s.get(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/cookies/set/sessioncookie/iTestingIsGood&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 设置好后获取所有的cookies</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.get(</span><span style="color:#9ECBFF;">&#39;https://httpbin.org/cookies&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 打印，确定我们的cookies被保存了 </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.text)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 结果如下</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># &#39;{&quot;cookies&quot;: {&quot;sessioncookie&quot;: &quot;iTestingIsGood&quot;}}&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 初始化一个session对象</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 第一个get，先设置一个session</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># httpbin这个网站允许我们通过如下方式设置，在set后写你需要的值即可</span></span>
<span class="line"><span style="color:#24292E;"> s.get(</span><span style="color:#032F62;">&#39;https://httpbin.org/cookies/set/sessioncookie/iTestingIsGood&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 设置好后获取所有的cookies</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.get(</span><span style="color:#032F62;">&#39;https://httpbin.org/cookies&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 打印，确定我们的cookies被保存了 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.text)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 结果如下</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;{&quot;cookies&quot;: {&quot;sessioncookie&quot;: &quot;iTestingIsGood&quot;}}&#39;</span></span></code></pre></div><p>requests.Session() 的使用非常简单，首先你初始化一个 session 对象，接着你使用这个初始化后对象实例直接发起请求，在整个 session 内的所有请求之间是可以共享状态的。上个例子中我们就先初始化了 Session() 对象，假设是 s，然后通过 s.get() 方法去设置了一个 cookie，它的名字是 sessioncookie，它的值是 itestingIsGood。最后，我们去访问 cookies 接口，就拿到了我们刚设置的 cookie。通过 requests.Session() 的方式，我们就实现了 cookie 的保持。</p><p>现在，我们更改一下运行方式，注释掉 9 行语句设置 sessioncookie 的那条语句， 再次运行结果如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;cookies&quot;</span><span style="color:#E1E4E8;">: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;cookies&quot;</span><span style="color:#24292E;">: {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>你会发现，本次运行并没有拿到任何 cookie，由此可见，正是由于 requests.Session() ，cookie 才在两次请求中保持了。</p><p>一般在测试中，你可以通过直接请求登录接口便能拿到登录态，例如如下的形态：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 本代码仅供演示用法</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 登录获取登录态</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.post(login_url, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">data, </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">headers, </span><span style="color:#FFAB70;">verify</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 登录态获取后，请求登录后才能访问的接口，也能请求成功。</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.post（</span><span style="color:#9ECBFF;">&#39;your-api&#39;</span><span style="color:#E1E4E8;">）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 本代码仅供演示用法</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 登录获取登录态</span></span>
<span class="line"><span style="color:#24292E;">    s.post(login_url, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data, </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">headers, </span><span style="color:#E36209;">verify</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 登录态获取后，请求登录后才能访问的接口，也能请求成功。</span></span>
<span class="line"><span style="color:#24292E;">    s.post（</span><span style="color:#032F62;">&#39;your-api&#39;</span><span style="color:#24292E;">）</span></span></code></pre></div><p>为了更好地理解 requests.Session() 是如何保持登录态的，我们来看一个实际例子：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    api </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://gate.lagou.com/v1/entry/message/newMessageList&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.get(api)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.text)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 结果如下：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># {&quot;state&quot;: 1003, &quot;message&quot;: &quot;非法的访问&quot;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    api </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://gate.lagou.com/v1/entry/message/newMessageList&#39;</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.get(api)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.text)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 结果如下：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># {&quot;state&quot;: 1003, &quot;message&quot;: &quot;非法的访问&quot;}</span></span></code></pre></div><p>在这个例子中，我直接访问拉勾教育的一个接口，这个接口是用来获取当前账户有没有新的 Message 的，但由于我没有登录，所以我访问的结果是返回&quot;非法的访问&quot;。那么我的登录态怎么获取呢？</p><p>因为我们无法得知 lagou教育生产环境上的登录接口，故我们采用另外一个办法绕过，我首先采用人工登录的方式，然后打开浏览器 console，去 Applicaton → Cookies下查看 cookies：</p>`,45),F=l(`<p>经过尝试，我们得出 lagou 网站用于保持登录态的两个 cookie 的 key 是 _gid 和 gate_login_token。由此，更改我们的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://gate.lagou.com/v1/entry/message/newMessageList&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;cookie&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;_gid=GA1.2.438589688.1601450871; gate_login_token=475844a837230240e1e73e4ecfa34102e65fa8e5384801cca67bbe983a142abb;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;x-l-req-header&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{deviceType</span><span style="color:#F97583;">: 9</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 直接带登录态发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.get(url, </span><span style="color:#FFAB70;">cookies</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cookie, </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">headers)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 不经过登录，也能访问登录后才能访问的接口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(r.text.encode(</span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># {&quot;state&quot;:1,&quot;message&quot;:&quot;成功&quot;,&quot;content&quot;:{&quot;newMessageList&quot;:[],&quot;newMessageCount&quot;:0}}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://gate.lagou.com/v1/entry/message/newMessageList&#39;</span></span>
<span class="line"><span style="color:#24292E;">    cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;cookie&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;_gid=GA1.2.438589688.1601450871; gate_login_token=475844a837230240e1e73e4ecfa34102e65fa8e5384801cca67bbe983a142abb;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;x-l-req-header&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{deviceType</span><span style="color:#D73A49;">: 9</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 直接带登录态发送请求</span></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.get(url, </span><span style="color:#E36209;">cookies</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cookie, </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">headers)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 不经过登录，也能访问登录后才能访问的接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.text.encode(</span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># {&quot;state&quot;:1,&quot;message&quot;:&quot;成功&quot;,&quot;content&quot;:{&quot;newMessageList&quot;:[],&quot;newMessageCount&quot;:0}}</span></span></code></pre></div><p>由此看出，通过在不同接口请求中传递维持登录态的 cookies，就可以实现登录态在多个接口中的传递。</p><h3 id="unittest-框架集成-requests" tabindex="-1">unittest 框架集成 Requests <a class="header-anchor" href="#unittest-框架集成-requests" aria-label="Permalink to &quot;unittest 框架集成 Requests&quot;">​</a></h3><p>至此，我们已经对如何使用 Requests 发送接口请求了然于胸了。现在我把它嵌入到我们上一节讲到的 unittest 框架中去：</p>`,5),d=l(`<p>我们文件结构不变，仅仅只把原来调用 Selenium/WebDriver 的地方换成 Requests 即可。</p><p>先来看下我们之前的框架文件结构：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">lagouTest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">html_reporter.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">HTMLTestRunner.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">main.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">txtReport.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;">lagouTest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">html_reporter.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">HTMLTestRunner.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">main.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">txtReport.py</span></span></code></pre></div><p>其他文件不用更改，我们仅需要在 tests 文件夹下面新建一个测试接口的文件，例如 test_lagou.py，如此我们的文件结构就变成了如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">lagouTest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_lagou.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">common</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">html_reporter.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">HTMLTestRunner.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">main.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">txtReport.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;">lagouTest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">tests</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_lagou.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">common</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">html_reporter.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">HTMLTestRunner.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">main.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">txtReport.py</span></span></code></pre></div><p>test_lagou.py 下的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestLaGou</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://www.lagou.com&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_visit_lagou</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.url)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> result.status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">        unittest.TestCase.assertIn(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;拉勾&#39;</span><span style="color:#E1E4E8;">, result.text)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_get_new_message</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 此处需要一个方法登录获取登录的cookie，但因我们无法知道拉勾登录真实的API，故采用此方式登录</span></span>
<span class="line"><span style="color:#E1E4E8;">        message_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://gate.lagou.com/v1/entry/message/newMessageList&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;cookie&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;_gid=GA1.2.438589688.1601450871; gate_login_token=475844a837230240e1e73e4ecfa34102e65fa8e5384801cca67bbe983a142abb;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;x-l-req-header&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{deviceType</span><span style="color:#F97583;">: 9</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 直接带登录态发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.get(message_url, </span><span style="color:#FFAB70;">cookies</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cookie, </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">headers)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> result.status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> json.loads(result.content)[</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;成功&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tearDown</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    unittest.main(</span><span style="color:#FFAB70;">verbosity</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestLaGou</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://www.lagou.com&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_visit_lagou</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.url)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> result.status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">        unittest.TestCase.assertIn(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;拉勾&#39;</span><span style="color:#24292E;">, result.text)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_get_new_message</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 此处需要一个方法登录获取登录的cookie，但因我们无法知道拉勾登录真实的API，故采用此方式登录</span></span>
<span class="line"><span style="color:#24292E;">        message_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://gate.lagou.com/v1/entry/message/newMessageList&#39;</span></span>
<span class="line"><span style="color:#24292E;">        cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;cookie&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;_gid=GA1.2.438589688.1601450871; gate_login_token=475844a837230240e1e73e4ecfa34102e65fa8e5384801cca67bbe983a142abb;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;x-l-req-header&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{deviceType</span><span style="color:#D73A49;">: 9</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 直接带登录态发送请求</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.get(message_url, </span><span style="color:#E36209;">cookies</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cookie, </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">headers)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> result.status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> json.loads(result.content)[</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;成功&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tearDown</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.close()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    unittest.main(</span><span style="color:#E36209;">verbosity</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>在本文件里，我们定义了一个测试类 TestLaGou，然后在 setUp 方法里初始化了 requests.Session() 对象，接着定义了两个测试用例 test_visit_lagou 和 test_get_new_message，在这两个测试用例中，分别发送不同的接口请求并且断言，最后在测试结束后关闭了这个 Session 对象。</p><p>直接运行 main.py, 运行成功后，浏览器打开在项目根目录下生成的 test_report 文件，如下图所示：</p>`,9),_=n("p",null,"可以看到 test_visit_lagou 和 test_get_new_message 这两条测试用例均运行成功了。",-1),h=n("p",null,[s("你可以看出用 unittest 集成 API 测试也非常简单？在此，给你留一个课后作业，那就是："),n("strong",null,"仔细学习下 Appium 的基础知识，然后把 Appium 和 unittest 集成起来，生成一个可用于移动端测试的自动化框架。")],-1),g=n("p",null,"这个时候，我们再来看下，我们的测试框架变成了什么样子？",-1),A=l(`<p>（很多模块我们还没有完成，将在后续章节逐一完善）</p><p>通过前面章节的学习，我们依托测试框架核心模块 unittest，快速搭建了我们的 Web 自动化测试框架、API 自动化测试框架，但我们在 unittest 的使用中，发现了如下缺点：</p><ul><li><p>重复代码太多，比如 seUp(), tearDown() 每个测试类都需要。</p></li><li><p>unittest 数据驱动支持不好，并且不明显， case 一多就容易乱。</p></li><li><p>有一定的学习成本，例如 unittest 里的 assertIn* 语法，便是 unittest 特有的。</p></li></ul><p>学过测试框架设计原则的我们都知道， 一个好的框架必须做到避免重复代码。 那么测试框架核心模块，是不是只有 unittest 一个呢？有没有更好的测试框架核心模块来解决上述问题呢？</p><h3 id="pytest" tabindex="-1">pytest <a class="header-anchor" href="#pytest" aria-label="Permalink to &quot;pytest&quot;">​</a></h3><p>pytest 是一个成熟、全套的 python 自动化测试工具，旨在帮助你写出更好的程序。它可以用来做单元测试，也可以用来做功能测试、接口自动化测试；相比 unittest，它能支持更多、更全面的功能，有着以下特色和优势。</p><p>直接使用纯粹的 python 语言， 不需要你过多学习框架特定的语法，例如 self.assert* 等，以此减少你的学习成本；</p><ul><li><p>pytest 框架不需要写诸如 setUp()、tearDown() 这样的方法，它可以直接开始测试；</p></li><li><p>pytest 可以自动识别测试用例，无须像 unittest 一样将测试用例放进 TestSuite 里组装；</p></li><li><p>test fixtures 包括数据参数化测试非常好用；</p></li><li><p>pytest 支持错误重试；</p></li><li><p>pytest 支持并发测试。</p></li></ul><p>下面我们就一起看下，如何使用 pytest 来搭建我们的第一个接口测试框架？</p><p>俗话说&quot;不积跬步，无以至千里&quot;。在创建我们的第一个接口测试框架之前，我们先来看下 pytest的基础用法。</p><h4 id="_1-pytest-安装" tabindex="-1">1. pytest 安装 <a class="header-anchor" href="#_1-pytest-安装" aria-label="Permalink to &quot;1. pytest 安装&quot;">​</a></h4><p>pytest 不是 python 标准库，故使用时需要安装：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">U pytest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">U pytest</span></span></code></pre></div><p>安装好后，你可以再 terminal 里查看它的版本：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;">version</span></span>
<span class="line"><span style="color:#6A737D;"># pytest 6.1.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">version</span></span>
<span class="line"><span style="color:#6A737D;"># pytest 6.1.0</span></span></code></pre></div><h4 id="_2-pytest-简单使用" tabindex="-1">2. pytest 简单使用 <a class="header-anchor" href="#_2-pytest-简单使用" aria-label="Permalink to &quot;2. pytest 简单使用&quot;">​</a></h4><p>下面来看下，你的第一个 pytest 脚本怎么写：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># iTesting.py</span></span>
<span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestSample</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 测试用例默认以test开头</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_equal</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_not_equal</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># iTesting.py</span></span>
<span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSample</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 测试用例默认以test开头</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_equal</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_not_equal</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>在这个测试文件（iTesting.py）里，我定义了一个测试类 TestSample，然后在这个测试类下面定义了两个测试用例，分别是 test_equal 和 test_not_equal，下面来运行下这个测试类：</p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 以在Windows下执行为例</span></span>
<span class="line"><span style="color:#6A737D;"># 假设我们的测试目录在D:\\_Automation\\lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">D:\\_Automation\\lagouAPITest</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">python </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m pytest iTesting.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 以在Windows下执行为例</span></span>
<span class="line"><span style="color:#6A737D;"># 假设我们的测试目录在D:\\_Automation\\lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">D:\\_Automation\\lagouAPITest</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">python </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m pytest iTesting.py</span></span></code></pre></div><p>运行后，你会看到如下结果：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> test session starts </span><span style="color:#F97583;">====</span></span>
<span class="line"><span style="color:#E1E4E8;">platform win32 </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;"> Python </span><span style="color:#79B8FF;">3.8</span><span style="color:#E1E4E8;">.5, pytest</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">6.1</span><span style="color:#E1E4E8;">.0, py</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1.9</span><span style="color:#E1E4E8;">.0, pluggy</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">0.13</span><span style="color:#E1E4E8;">.1</span></span>
<span class="line"><span style="color:#E1E4E8;">rootdir: D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">collected </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">iTesting.py ..                                                                                                                               [</span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> passed </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.</span><span style="color:#FDAEB7;font-style:italic;">01s</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">====</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">===</span><span style="color:#24292E;"> test session starts </span><span style="color:#D73A49;">====</span></span>
<span class="line"><span style="color:#24292E;">platform win32 </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;"> Python </span><span style="color:#005CC5;">3.8</span><span style="color:#24292E;">.5, pytest</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">6.1</span><span style="color:#24292E;">.0, py</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1.9</span><span style="color:#24292E;">.0, pluggy</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.13</span><span style="color:#24292E;">.1</span></span>
<span class="line"><span style="color:#24292E;">rootdir: D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">collected </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">iTesting.py ..                                                                                                                               [</span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> passed </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.</span><span style="color:#B31D28;font-style:italic;">01s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">====</span></span></code></pre></div><p>是不是非常简单？而且在整个测试中，你只需要有 python 的原生语法基础知识就好了，不需要再额外地学习。</p><h4 id="_3-pytest-直接运行-unittest-测试用例" tabindex="-1">3. pytest 直接运行 unittest 测试用例 <a class="header-anchor" href="#_3-pytest-直接运行-unittest-测试用例" aria-label="Permalink to &quot;3. pytest 直接运行 unittest 测试用例&quot;">​</a></h4><p>不仅如此，pytest 还可以兼容 unittest，原来使用 unittest 框架写的代码，可以被 pytest 直接调用。</p><p>我们来看下如下 unittest 测试用例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 文件名tests/test_sample.py</span></span>
<span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#测试类必须要继承TestCase类</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestSample</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">#测试用例默认以test开头</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_equal</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertEqual(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_not_equal</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.assertNotEqual(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    unittest.main()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 文件名tests/test_sample.py</span></span>
<span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#测试类必须要继承TestCase类</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSample</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">#测试用例默认以test开头</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_equal</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertEqual(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_not_equal</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.assertNotEqual(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    unittest.main()</span></span></code></pre></div><p>在运行时，我们可以直接用如下方式调用：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouTest&gt;python -m pytest tests/test_sample.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouTest&gt;python -m pytest tests/test_sample.py</span></span></code></pre></div><p>如果你想运行整个测试用例集，或者你想把之前用 unittest 的测试用例全部换成用 pytest 执行，该如何操作呢？</p><p>我们把 main.py 文件里，所有关于执行测试用例的部分，从 unittest 执行更改为 pytest 执行，更改后的 main.py 函数如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> glob</span></span>
<span class="line"><span style="color:#6A737D;"># 查找所有待执行的测试用例module，见《04|必知必会，打好Python基本功》</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find_modules_from_folder</span><span style="color:#E1E4E8;">(folder):</span></span>
<span class="line"><span style="color:#E1E4E8;">    absolute_f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.abspath(folder)</span></span>
<span class="line"><span style="color:#E1E4E8;">    md </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> glob.glob(os.path.join(absolute_f, </span><span style="color:#9ECBFF;">&quot;*.py&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [f </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> md </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> os.path.isfile(f) </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> f.endswith(</span><span style="color:#9ECBFF;">&#39;__init__.py&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 得出测试文件夹地址</span></span>
<span class="line"><span style="color:#E1E4E8;">    test_folder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.join(os.path.dirname(</span><span style="color:#79B8FF;">__file__</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&#39;tests&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 得出测试文件夹下的所有测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">    target_file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> find_modules_from_folder(test_folder)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 直接运行所有的测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main([</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">target_file, </span><span style="color:#9ECBFF;">&#39;-v&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> glob</span></span>
<span class="line"><span style="color:#6A737D;"># 查找所有待执行的测试用例module，见《04|必知必会，打好Python基本功》</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find_modules_from_folder</span><span style="color:#24292E;">(folder):</span></span>
<span class="line"><span style="color:#24292E;">    absolute_f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.abspath(folder)</span></span>
<span class="line"><span style="color:#24292E;">    md </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> glob.glob(os.path.join(absolute_f, </span><span style="color:#032F62;">&quot;*.py&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [f </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> md </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> os.path.isfile(f) </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> f.endswith(</span><span style="color:#032F62;">&#39;__init__.py&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 得出测试文件夹地址</span></span>
<span class="line"><span style="color:#24292E;">    test_folder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.join(os.path.dirname(</span><span style="color:#005CC5;">__file__</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&#39;tests&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 得出测试文件夹下的所有测试用例</span></span>
<span class="line"><span style="color:#24292E;">    target_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> find_modules_from_folder(test_folder)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 直接运行所有的测试用例</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main([</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">target_file, </span><span style="color:#032F62;">&#39;-v&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>然后在命令行下执行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouTest&gt;python main.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouTest&gt;python main.py</span></span></code></pre></div><p>你会发现，整个测试用例集用 pytest 开始执行了，执行结果如下：</p>`,35),D=l('<p>正因为 pytest 完全兼容 unittest，以及具备刚刚介绍的那些诸多优点，才使得 pytest 风靡于整个 python 社区。</p><h4 id="_4-pytest-查找测试用例的原则" tabindex="-1">4. pytest 查找测试用例的原则 <a class="header-anchor" href="#_4-pytest-查找测试用例的原则" aria-label="Permalink to &quot;4. pytest 查找测试用例的原则&quot;">​</a></h4><p>在我们介绍 pytest 的诸多使用方法之前，我先介绍下使用 pytest 查找测试用例的原则：</p><p><strong>指定命令行参数时的查找原则</strong></p><p>如果指定了命令行参数，则根据命令行参数执行。</p><p>这句话很好理解，像我们之前的测试里，均指定了测试要执行的 module（例如 &quot;python -m pytest tests/test_sample.py&quot;），故 pytest 只会查找 test_sample.py 文件。</p><p><strong>未指定命令行参数时的查找原则</strong></p><p>如果未指定命令行参数（即直接在命令行输入 pytest），则从 testpath（已配置）或从当前目录开始查找可用的测试用例， 其步骤如下：</p><ul><li><p>搜索由任何符合以下规则的文件 test_*.py 或 *_test.py 文件。</p></li><li><p>找到后，从这些文件中，收集如下测试项：test 为前缀的函数；Test 为前缀的类里面的以 test 为前缀的函数。</p></li></ul><p>我们举个例子来理解下这个原则， 假设我的项目结构如下：</p>',10),C=l('<p>注意：我有一个测试文件为 sample.py，里面包括两个测试用例，然后我 tests 文件夹下有两个 .py 文件共计 4 个测试用例，如果我在命令行里输入以下命令：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouTest&gt;pytest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouTest&gt;pytest</span></span></code></pre></div><p>你会发现运行结果如下：</p>',3),m=l('<p>仅仅有 4 个测试用例运行了，但不包括 sample.py 里的两个测试用例，这就是 pytest 默认查找在起作用，因为运行 pytest 时，我没有指定运行某个文件，所以 pytest 自动在当前目录下查找以&quot;test_&quot;开头或者以&quot;_test&quot; 结尾的 py 文件，显然sample.py 不符合这个规则，故被忽略了。</p><p>而我如果直接在命令行运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouTest&gt;pytest sample.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouTest&gt;pytest sample.py</span></span></code></pre></div><p>你将看到 sample.py 里的两个测试方法都被执行了（因为指定了运行文件）。</p>',4),q=n("p",null,'下面我们再一次更改，更改 sample.py 为 test_sample.py，然后把这个文件里的方法"test_equal"改成"equal_test"，于是项目文件结构如下：',-1),B=l('<p>在命令行运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouTest&gt;pytest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouTest&gt;pytest</span></span></code></pre></div><p>你可以看到运行结果如下：</p>',3),b=l(`<p>共有 5 个测试被执行，其中不包括 equal_test 方法，因为它不是以 test 开头。</p><h3 id="pytest-集成-requests" tabindex="-1">pytest 集成 Requests <a class="header-anchor" href="#pytest-集成-requests" aria-label="Permalink to &quot;pytest 集成 Requests&quot;">​</a></h3><p>知道了 pytest 如何使用，我们来看下，如何创建第一个 API 接口测试框架？</p><p>首先创建我们的项目文件结构：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">|--lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--tests</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--test_baidu.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--test_lagou.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--common</span></span>
<span class="line"><span style="color:#E1E4E8;">        |--__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">    |--__init__.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">|--lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    |--tests</span></span>
<span class="line"><span style="color:#24292E;">        |--test_baidu.py</span></span>
<span class="line"><span style="color:#24292E;">        |--test_lagou.py</span></span>
<span class="line"><span style="color:#24292E;">        |--__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    |--common</span></span>
<span class="line"><span style="color:#24292E;">        |--__init__.py</span></span>
<span class="line"><span style="color:#24292E;">    |--__init__.py</span></span></code></pre></div><p>其中：</p><ul><li><p>各个__init__.py 文件都是空文件。</p></li><li><p>tests 文件夹下的 test_baidu.py 是我们在第 7、8课时**&quot;你的第一个 Web 测试框架&quot;**里创建的，里面的内容我们保持不变，仍然以 unittest 作为测试框架的核心模块。</p></li><li><p>tests 文件夹下的另外一个文件 test_lagou.py 是我刚刚在<strong>unittest 框架集成 Requests</strong>这一小节建立的，当时我们是以 unittest 作为测试框架的核心驱动模块，现在我们把它更改为由 pytest 驱动。</p></li></ul><p>更改后的 test_lagou.py 文件内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestLaGou</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 在pytest里，针对一个类方法的setup为setup_method,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># setup_method作用同unittest里的setUp()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup_method</span><span style="color:#E1E4E8;">(self, method):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> requests.Session()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://www.lagou.com&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_visit_lagou</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.get(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.url)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> result.status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;拉勾&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> result.text</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_get_new_message</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 此处需要一个方法登录获取登录的cookie</span></span>
<span class="line"><span style="color:#E1E4E8;">        message_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;https://gate.lagou.com/v1/entry/message/newMessageList&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;cookie&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;_gid=GA1.2.438589688.1601450871; gate_login_token=475844a837230240e1e73e4ecfa34102e65fa8e5384801cca67bbe983a142abb;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&#39;x-l-req-header&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{deviceType</span><span style="color:#F97583;">: 9</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 直接带登录态发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.get(message_url, </span><span style="color:#FFAB70;">cookies</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">cookie, </span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">headers)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> result.status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> json.loads(result.content)[</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;成功&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 在pytest里，针对一个类方法的teardown为teardown_method,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># teardown_method作用同unittest里的dearDown()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">teardown_method</span><span style="color:#E1E4E8;">(self, method):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.s.close()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># coding=utf-8</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestLaGou</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 在pytest里，针对一个类方法的setup为setup_method,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># setup_method作用同unittest里的setUp()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup_method</span><span style="color:#24292E;">(self, method):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.Session()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://www.lagou.com&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_visit_lagou</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.get(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.url)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> result.status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;拉勾&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> result.text</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_get_new_message</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 此处需要一个方法登录获取登录的cookie</span></span>
<span class="line"><span style="color:#24292E;">        message_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;https://gate.lagou.com/v1/entry/message/newMessageList&#39;</span></span>
<span class="line"><span style="color:#24292E;">        cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;cookie&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;_gid=GA1.2.438589688.1601450871; gate_login_token=475844a837230240e1e73e4ecfa34102e65fa8e5384801cca67bbe983a142abb;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;x-l-req-header&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{deviceType</span><span style="color:#D73A49;">: 9</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 直接带登录态发送请求</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.get(message_url, </span><span style="color:#E36209;">cookies</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cookie, </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">headers)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> result.status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> json.loads(result.content)[</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;成功&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 在pytest里，针对一个类方法的teardown为teardown_method,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># teardown_method作用同unittest里的dearDown()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">teardown_method</span><span style="color:#24292E;">(self, method):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.s.close()</span></span></code></pre></div><p>在命令行中运行整个测试用例集：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\_Automation\\lagouAPITest&gt;pytest -v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\_Automation\\lagouAPITest&gt;pytest -v</span></span></code></pre></div><p>运行结果如下所示：</p>`,12),f=n("p",null,"整个测试用例集的 4 条测试用例全部被 pytest 识别到并执行了（有一条 case 被人为 skip了）。由此可见，使用 pytest 集成 Requests 非常简单，我们甚至不需要定义 main.py 文件也可以运行所有的测试用例。",-1),v=n("h3",{id:"小结",tabindex:"-1"},[s("小结 "),n("a",{class:"header-anchor",href:"#小结","aria-label":'Permalink to "小结"'},"​")],-1),k=n("p",null,"最后，我们回顾一下这一课时的主要内容。",-1),T=n("p",null,"我们知道 API 测试框架通常是通过直接请求 HTTP 接口来完成的，所以我先介绍了一个 HTTP 库------ Requests。通过上节课对 Web 自动化测试框架，我们将测试驱动模块由 Selenium/WebDriver 换成了 Requests，并借此搭建了第一个基于 unittest 的接口测试框架。但在 unittest 框架集成 Requests 的过程中，我们发现了 unittest 使用中的许多不便。",-1),P=n("p",null,"所以便向你介绍了另一个测试框架核心模块------pytest，简单讲解了 pytest 的安装、使用，以及 pytest 集成 Requests 的过程。下一课时我将详细讲解 pytest 的应用，以及如何生成 pytest 测试报告，将一步步带领你深入 pytest，在此过程中会带你完整搭建出一个基于 pytest 的接口自动化测试框架。",-1);function S(w,R,x,I,H,M){const a=e("Image");return t(),c("div",null,[y,E,i,p(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/5A/80/Ciqc1F94gWOAbwCSAADOdv9P5Zg817.png"}),s(),u,p(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/5A/80/Ciqc1F94gZyAfOrUAAoNlT33MlE974.png"}),s(),F,p(a,{alt:"Lark20201009-103932.png",src:"https://s0.lgstatic.com/i/image/M00/5B/98/Ciqc1F9_zauANTCUAABZM3jMEa0315.png"}),s(),d,p(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/5A/8B/CgqCHl94ge-AdRRDAABZxh02p1w599.png"}),s(),_,h,g,p(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/5A/80/Ciqc1F94gfiAV8RRAAGrePedYyM644.png"}),s(),A,p(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/5A/80/Ciqc1F94giqAf8W1AAB1RPOx38c013.png"}),s(),D,p(a,{alt:"WechatIMG371.png",src:"https://s0.lgstatic.com/i/image/M00/67/E2/Ciqc1F-idzWAefg8AACJWi5QaQU000.png"}),s(),C,p(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/5A/80/Ciqc1F94gkKAGOlHAABgpOiBFGM362.png"}),s(),m,p(a,{alt:"Drawing 8.png",src:"https://s0.lgstatic.com/i/image/M00/5A/8B/CgqCHl94gk2AWAstAAA-R09vUPU514.png"}),s(),q,p(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/5A/8B/CgqCHl94glSAB2tlAACdqGmQ4DQ752.png"}),s(),B,p(a,{alt:"Drawing 10.png",src:"https://s0.lgstatic.com/i/image/M00/5A/80/Ciqc1F94glyAYHH8AABaEreP5ms475.png"}),s(),b,p(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/5A/8B/CgqCHl94gmiAMkWPAABpsxQSdJE404.png"}),s(),f,v,k,T,P])}const N=o(r,[["render",S]]);export{U as __pageData,N as default};
