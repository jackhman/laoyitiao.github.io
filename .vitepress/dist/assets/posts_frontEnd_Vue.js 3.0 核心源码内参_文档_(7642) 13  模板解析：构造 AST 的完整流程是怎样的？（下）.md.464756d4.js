import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.4e7d56ce.js";const D=JSON.parse('{"title":"13模板解析：构造AST的完整流程是怎样的？（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7642) 13  模板解析：构造 AST 的完整流程是怎样的？（下）.md","filePath":"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7642) 13  模板解析：构造 AST 的完整流程是怎样的？（下）.md","lastUpdated":1696417798000}'),l={name:"posts/frontEnd/Vue.js 3.0 核心源码内参_文档/(7642) 13  模板解析：构造 AST 的完整流程是怎样的？（下）.md"},o=p(`<h1 id="_13模板解析-构造ast的完整流程是怎样的-下" tabindex="-1">13模板解析：构造AST的完整流程是怎样的？（下） <a class="header-anchor" href="#_13模板解析-构造ast的完整流程是怎样的-下" aria-label="Permalink to &quot;13模板解析：构造AST的完整流程是怎样的？（下）&quot;">​</a></h1><p>这一节课我们依然要<strong>解析 template 生成 AST 背后的实现原理</strong> ，上节课，我们知道了baseParse 主要就做三件事情：<strong>创建解析上下文</strong> ，<strong>解析子节点</strong> ，<strong>创建 AST 根节点</strong>。</p><p>我们讲到了解析子节点，主要有四种情况，分别是注释节点的解析、插值的解析、普通文本的解析，以及元素节点的解析，这节课我们就到了最后的元素节点。</p><h3 id="解析子节点" tabindex="-1">解析子节点 <a class="header-anchor" href="#解析子节点" aria-label="Permalink to &quot;解析子节点&quot;">​</a></h3><ul><li>元素节点的解析</li></ul><p>最后，我们来看元素节点的解析过程，它会解析模板中的标签节点，举个例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:msg=&quot;msg&quot;&gt;&lt;/hello&gt;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;/div&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">hello</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:msg=&quot;msg&quot;&gt;&lt;/hello&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/div&gt;</span></span></code></pre></div><p>相对于前面三种类型的解析过程，元素节点的解析过程应该是最复杂的了，即当前代码 s 是以 &lt; 开头，并且后面跟着字母，说明它是一个标签的开头，则走到元素节点的解析处理逻辑，我们来看 parseElement 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseElement</span><span style="color:#E1E4E8;">(context, ancestors) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否在 pre 标签内</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> wasInPre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.inPre</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否在 v-pre 指令内</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> wasInVPre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.inVPre</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取当前元素的父标签节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">last</span><span style="color:#E1E4E8;">(ancestors)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 解析开始标签，生成一个标签节点，并前进代码到开始标签后</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> element </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseTag</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* Start */</span><span style="color:#E1E4E8;">, parent)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否在 pre 标签的边界</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isPreBoundary </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.inPre </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">wasInPre</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 是否在 v-pre 指令的边界</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> isVPreBoundary </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.inVPre </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">wasInVPre</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (element.isSelfClosing </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> context.options.</span><span style="color:#B392F0;">isVoidTag</span><span style="color:#E1E4E8;">(element.tag)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果是自闭和标签，直接返回标签节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> element</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 下面是处理子节点的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 先把标签节点添加到 ancestors，入栈</span></span>
<span class="line"><span style="color:#E1E4E8;">  ancestors.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(element)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.options.</span><span style="color:#B392F0;">getTextMode</span><span style="color:#E1E4E8;">(element, parent)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 递归解析子节点，传入 ancestors</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseChildren</span><span style="color:#E1E4E8;">(context, mode, ancestors)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ancestors 出栈</span></span>
<span class="line"><span style="color:#E1E4E8;">  ancestors.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 添加到 children 属性中</span></span>
<span class="line"><span style="color:#E1E4E8;">  element.children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 结束标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">startsWithEndTagOpen</span><span style="color:#E1E4E8;">(context.source, element.tag)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析结束标签，并前进代码到结束标签后</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">parseTag</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* End */</span><span style="color:#E1E4E8;">, parent)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* X_MISSING_END_TAG */</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, element.loc.start);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (context.source.length </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> element.tag.</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;script&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> first </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (first </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(first.loc.source, </span><span style="color:#9ECBFF;">&#39;&lt;!--&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 更新标签节点的代码位置，结束位置到结束标签后</span></span>
<span class="line"><span style="color:#E1E4E8;">  element.loc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSelection</span><span style="color:#E1E4E8;">(context, element.loc.start)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isPreBoundary) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.inPre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isVPreBoundary) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.inVPre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> element</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseElement</span><span style="color:#24292E;">(context, ancestors) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否在 pre 标签内</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> wasInPre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.inPre</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否在 v-pre 指令内</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> wasInVPre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.inVPre</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取当前元素的父标签节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">last</span><span style="color:#24292E;">(ancestors)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 解析开始标签，生成一个标签节点，并前进代码到开始标签后</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseTag</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* Start */</span><span style="color:#24292E;">, parent)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否在 pre 标签的边界</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isPreBoundary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.inPre </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">wasInPre</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 是否在 v-pre 指令的边界</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> isVPreBoundary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.inVPre </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">wasInVPre</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (element.isSelfClosing </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> context.options.</span><span style="color:#6F42C1;">isVoidTag</span><span style="color:#24292E;">(element.tag)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果是自闭和标签，直接返回标签节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> element</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 下面是处理子节点的逻辑</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 先把标签节点添加到 ancestors，入栈</span></span>
<span class="line"><span style="color:#24292E;">  ancestors.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(element)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.options.</span><span style="color:#6F42C1;">getTextMode</span><span style="color:#24292E;">(element, parent)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 递归解析子节点，传入 ancestors</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseChildren</span><span style="color:#24292E;">(context, mode, ancestors)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ancestors 出栈</span></span>
<span class="line"><span style="color:#24292E;">  ancestors.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 添加到 children 属性中</span></span>
<span class="line"><span style="color:#24292E;">  element.children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> children</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 结束标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">startsWithEndTagOpen</span><span style="color:#24292E;">(context.source, element.tag)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析结束标签，并前进代码到结束标签后</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">parseTag</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* End */</span><span style="color:#24292E;">, parent)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* X_MISSING_END_TAG */</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, element.loc.start);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (context.source.length </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> element.tag.</span><span style="color:#6F42C1;">toLowerCase</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;script&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> children[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (first </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(first.loc.source, </span><span style="color:#032F62;">&#39;&lt;!--&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 更新标签节点的代码位置，结束位置到结束标签后</span></span>
<span class="line"><span style="color:#24292E;">  element.loc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSelection</span><span style="color:#24292E;">(context, element.loc.start)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isPreBoundary) {</span></span>
<span class="line"><span style="color:#24292E;">    context.inPre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isVPreBoundary) {</span></span>
<span class="line"><span style="color:#24292E;">    context.inVPre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> element</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，这个过程中 parseElement 主要做了三件事情：解析开始标签，解析子节点，解析闭合标签。</p><p>首先，我们来看解析开始标签的过程。主要通过 parseTag 方法来解析并创建一个标签节点，来看它的实现原理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseTag</span><span style="color:#E1E4E8;">(context, type, parent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 标签打开</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCursor</span><span style="color:#E1E4E8;">(context)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 匹配标签文本结束的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> match </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/^&lt;</span><span style="color:#E1E4E8;">\\</span><span style="color:#F97583;">/?</span><span style="color:#E1E4E8;">([a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">z][</span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;">\\t\\r\\n\\f </span><span style="color:#F97583;">/&gt;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">i.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(context.source);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> tag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> match[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.options.</span><span style="color:#B392F0;">getNamespace</span><span style="color:#E1E4E8;">(tag, parent);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 前进代码到标签文本结束位置</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">advanceBy</span><span style="color:#E1E4E8;">(context, match[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].length);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 前进代码到标签文本后面的空白字符后</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">advanceSpaces</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 保存当前状态以防我们需要用 v-pre 重新解析属性</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cursor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCursor</span><span style="color:#E1E4E8;">(context);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> currentSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.source;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 解析标签中的属性，并前进代码到属性后</span></span>
<span class="line"><span style="color:#E1E4E8;">  let props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseAttributes</span><span style="color:#E1E4E8;">(context, type);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 检查是不是一个 pre 标签</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (context.options.</span><span style="color:#B392F0;">isPreTag</span><span style="color:#E1E4E8;">(tag)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.inPre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 检查属性中有没有 v-pre 指令</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">context.inVPre </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    props.</span><span style="color:#B392F0;">some</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* DIRECTIVE */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> p.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;pre&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.inVPre </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 重置 context</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">(context, cursor);</span></span>
<span class="line"><span style="color:#E1E4E8;">    context.source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentSource;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 重新解析属性，并把 v-pre 过滤了</span></span>
<span class="line"><span style="color:#E1E4E8;">    props </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseAttributes</span><span style="color:#E1E4E8;">(context, type).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.name </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;v-pre&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 标签闭合</span></span>
<span class="line"><span style="color:#E1E4E8;">  let isSelfClosing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (context.source.length </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* EOF_IN_TAG */</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断是否自闭合标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    isSelfClosing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(context.source, </span><span style="color:#9ECBFF;">&#39;/&gt;&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* End */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> isSelfClosing) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 结束标签不应该是自闭和标签</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">(context, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* END_TAG_WITH_TRAILING_SOLIDUS */</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 前进代码到闭合标签后</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">advanceBy</span><span style="color:#E1E4E8;">(context, isSelfClosing </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  let tagType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ELEMENT */</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.options;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 接下来判断标签类型，是组件、插槽还是模板</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">context.inVPre </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">options.</span><span style="color:#B392F0;">isCustomElement</span><span style="color:#E1E4E8;">(tag)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断是否有 is 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> hasVIs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> props.</span><span style="color:#B392F0;">some</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> p.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* DIRECTIVE */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> p.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;is&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.isNativeTag </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hasVIs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">options.</span><span style="color:#B392F0;">isNativeTag</span><span style="color:#E1E4E8;">(tag))</span></span>
<span class="line"><span style="color:#E1E4E8;">        tagType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT */</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hasVIs </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">isCoreComponent</span><span style="color:#E1E4E8;">(tag) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">      (options.isBuiltInComponent </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> options.</span><span style="color:#B392F0;">isBuiltInComponent</span><span style="color:#E1E4E8;">(tag)) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">/^</span><span style="color:#E1E4E8;">[A</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Z]</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(tag) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">      tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;component&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      tagType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMPONENT */</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;slot&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      tagType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* SLOT */</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;template&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      props.</span><span style="color:#B392F0;">some</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (p.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* DIRECTIVE */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isSpecialTemplateDirective</span><span style="color:#E1E4E8;">(p.name));</span></span>
<span class="line"><span style="color:#E1E4E8;">      })) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      tagType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* TEMPLATE */</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ELEMENT */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ns,</span></span>
<span class="line"><span style="color:#E1E4E8;">    tag,</span></span>
<span class="line"><span style="color:#E1E4E8;">    tagType,</span></span>
<span class="line"><span style="color:#E1E4E8;">    props,</span></span>
<span class="line"><span style="color:#E1E4E8;">    isSelfClosing,</span></span>
<span class="line"><span style="color:#E1E4E8;">    children</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    loc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSelection</span><span style="color:#E1E4E8;">(context, start),</span></span>
<span class="line"><span style="color:#E1E4E8;">    codegenNode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseTag</span><span style="color:#24292E;">(context, type, parent) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 标签打开</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCursor</span><span style="color:#24292E;">(context)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 匹配标签文本结束的位置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> match </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/^&lt;</span><span style="color:#24292E;">\\</span><span style="color:#D73A49;">/?</span><span style="color:#24292E;">([a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">z][</span><span style="color:#D73A49;">^</span><span style="color:#24292E;">\\t\\r\\n\\f </span><span style="color:#D73A49;">/&gt;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">i.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(context.source);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> tag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> match[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.options.</span><span style="color:#6F42C1;">getNamespace</span><span style="color:#24292E;">(tag, parent);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 前进代码到标签文本结束位置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">advanceBy</span><span style="color:#24292E;">(context, match[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].length);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 前进代码到标签文本后面的空白字符后</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">advanceSpaces</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 保存当前状态以防我们需要用 v-pre 重新解析属性</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cursor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCursor</span><span style="color:#24292E;">(context);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> currentSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.source;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 解析标签中的属性，并前进代码到属性后</span></span>
<span class="line"><span style="color:#24292E;">  let props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseAttributes</span><span style="color:#24292E;">(context, type);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 检查是不是一个 pre 标签</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (context.options.</span><span style="color:#6F42C1;">isPreTag</span><span style="color:#24292E;">(tag)) {</span></span>
<span class="line"><span style="color:#24292E;">    context.inPre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 检查属性中有没有 v-pre 指令</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">context.inVPre </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">    props.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* DIRECTIVE */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> p.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pre&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    context.inVPre </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 重置 context</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;">(context, cursor);</span></span>
<span class="line"><span style="color:#24292E;">    context.source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentSource;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 重新解析属性，并把 v-pre 过滤了</span></span>
<span class="line"><span style="color:#24292E;">    props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseAttributes</span><span style="color:#24292E;">(context, type).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.name </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;v-pre&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 标签闭合</span></span>
<span class="line"><span style="color:#24292E;">  let isSelfClosing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (context.source.length </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* EOF_IN_TAG */</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断是否自闭合标签</span></span>
<span class="line"><span style="color:#24292E;">    isSelfClosing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(context.source, </span><span style="color:#032F62;">&#39;/&gt;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* End */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> isSelfClosing) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 结束标签不应该是自闭和标签</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">(context, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* END_TAG_WITH_TRAILING_SOLIDUS */</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 前进代码到闭合标签后</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">advanceBy</span><span style="color:#24292E;">(context, isSelfClosing </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  let tagType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ELEMENT */</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context.options;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 接下来判断标签类型，是组件、插槽还是模板</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">context.inVPre </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">options.</span><span style="color:#6F42C1;">isCustomElement</span><span style="color:#24292E;">(tag)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 判断是否有 is 属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> hasVIs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> props.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> p.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* DIRECTIVE */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> p.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;is&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.isNativeTag </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">hasVIs) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">options.</span><span style="color:#6F42C1;">isNativeTag</span><span style="color:#24292E;">(tag))</span></span>
<span class="line"><span style="color:#24292E;">        tagType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT */</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hasVIs </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">isCoreComponent</span><span style="color:#24292E;">(tag) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      (options.isBuiltInComponent </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> options.</span><span style="color:#6F42C1;">isBuiltInComponent</span><span style="color:#24292E;">(tag)) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">/^</span><span style="color:#24292E;">[A</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Z]</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(tag) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">      tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;component&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      tagType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMPONENT */</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;slot&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      tagType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* SLOT */</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tag </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;template&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      props.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (p.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* DIRECTIVE */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isSpecialTemplateDirective</span><span style="color:#24292E;">(p.name));</span></span>
<span class="line"><span style="color:#24292E;">      })) {</span></span>
<span class="line"><span style="color:#24292E;">      tagType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* TEMPLATE */</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ELEMENT */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ns,</span></span>
<span class="line"><span style="color:#24292E;">    tag,</span></span>
<span class="line"><span style="color:#24292E;">    tagType,</span></span>
<span class="line"><span style="color:#24292E;">    props,</span></span>
<span class="line"><span style="color:#24292E;">    isSelfClosing,</span></span>
<span class="line"><span style="color:#24292E;">    children</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    loc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSelection</span><span style="color:#24292E;">(context, start),</span></span>
<span class="line"><span style="color:#24292E;">    codegenNode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>parseTag 首先匹配标签文本结束的位置，并前进代码到标签文本后面的空白字符后，然后解析标签中的属性，比如 class、style 和指令等，parseAttributes 函数的实现我就不多说了，感兴趣的同学可以自己去看，它最终会解析生成一个 props 的数组，并前进代码到属性后。</p><p>接着去检查是不是一个 pre 标签，如果是则设置 context.inPre 为 true；再去检查属性中有没有 v-pre 指令，如果有则设置 context.inVPre 为 true，并重置上下文 context 和重新解析属性；接下来再去判断是不是一个自闭和标签，并前进代码到闭合标签后；最后判断标签类型，是组件、插槽还是模板。</p><p>parseTag 最终返回的值就是一个描述标签节点的对象，其中 type 表示它是一个标签节点，tag 表示标签名，tagType 表示标签的类型，content 表示文本的内容，isSelfClosing 表示是否是一个闭合标签，loc 表示文本的代码开头和结束的位置信息，children 是标签的子节点数组，会先初始化为空。</p><p>解析完开始标签后，再回到 parseElement，接下来第二步就是解析子节点，它把解析好的 element 节点添加到 ancestors 数组中，然后执行 parseChildren 去解析子节点，并传入 ancestors。</p><p>如果有嵌套的标签，那么就会递归执行 parseElement，可以看到，在 parseElement 的一开始，我们能获取 ancestors 数组的最后一个值拿到父元素的标签节点，这个就是我们在执行 parseChildren 前添加到数组尾部的。</p><p>解析完子节点后，我们再把 element 从 ancestors 中弹出，然后把 children 数组添加到 element.children 中，同时也把代码前进到子节点的末尾。</p><p>最后，就是解析结束标签，并前进代码到结束标签后，然后更新标签节点的代码位置。parseElement 最终返回的值就是这样一个标签节点 element。</p><p>其实 HTML 的嵌套结构的解析过程，就是一个递归解析元素节点的过程，为了维护父子关系，当需要解析子节点时，我们就把当前节点入栈，子节点解析完毕后，我们就把当前节点出栈，因此 ancestors 的设计就是一个栈的数据结构，整个过程是一个不断入栈和出栈的过程。</p><p>通过不断地递归解析，我们就可以完整地解析整个模板，并且标签类型的 AST 节点会保持对子节点数组的引用，这样就构成了一个树形的数据结构，所以整个解析过程构造出的 AST 节点数组就能很好地映射整个模板的 DOM 结构。</p><h3 id="空白字符管理" tabindex="-1">空白字符管理 <a class="header-anchor" href="#空白字符管理" aria-label="Permalink to &quot;空白字符管理&quot;">​</a></h3><p>在前面的解析过程中，有些时候我们会遇到空白字符的情况，比如前面的例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:msg=&quot;msg&quot;&gt;&lt;/hello&gt;</span></span>
<span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;/div&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">hello</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:msg=&quot;msg&quot;&gt;&lt;/hello&gt;</span></span>
<span class="line"><span style="color:#B31D28;font-style:italic;">&lt;/div&gt;</span></span></code></pre></div><p>div 标签到下一行会有一个换行符，hello 标签前面也有空白字符，这些空白字符在解析的过程中会被当作文本节点解析处理。但这些空白节点显然是没有什么意义的，所以我们需要移除这些节点，减少后续对这些没用意义的节点的处理，以提高编译效率。</p><p>我们先来看一下空白字符管理相关逻辑代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">parseChildren</span><span style="color:#E1E4E8;">(context, mode, ancestors) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">last</span><span style="color:#E1E4E8;">(ancestors)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> ns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> parent.ns </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* HTML */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> nodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 自顶向下分析代码，生成 nodes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  let removedWhitespace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mode </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* RAWTEXT */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">context.inPre) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (let i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> nodes.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nodes[i]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (node.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!/</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;">\\t\\r\\n\\f ]</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(node.content)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 匹配空白字符</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> prev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nodes[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nodes[i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 如果空白字符是开头或者结尾节点</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 或者空白字符与注释节点相连</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 或者空白字符在两个元素之间并包含换行符</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 那么这些空白字符节点都应该被移除</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">prev </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">next </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">              prev.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMMENT */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">              next.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMMENT */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">              (prev.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ELEMENT */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                next.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ELEMENT */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">[\\r\\n]</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(node.content))) {</span></span>
<span class="line"><span style="color:#E1E4E8;">              removedWhitespace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">              nodes[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// 否则压缩这些空白字符到一个空格</span></span>
<span class="line"><span style="color:#E1E4E8;">              node.content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; &#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 替换内容中的空白空间到一个空格</span></span>
<span class="line"><span style="color:#E1E4E8;">            node.content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.content.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">[\\t\\r\\n\\f ]</span><span style="color:#F97583;">+/</span><span style="color:#E1E4E8;">g, </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">(p<wbr>rocess.env.NODE_ENV </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> node.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* COMMENT */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 生产环境移除注释节点</span></span>
<span class="line"><span style="color:#E1E4E8;">          removedWhitespace </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">          nodes[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> context.options.</span><span style="color:#B392F0;">isPreTag</span><span style="color:#E1E4E8;">(parent.tag)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 根据 HTML 规范删除前导换行符</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> first </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nodes[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (first </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> first.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        first.content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> first.content.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">/^</span><span style="color:#E1E4E8;">\\r</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">\\n</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 过滤空白字符节点</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> removedWhitespace </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> nodes.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Boolean) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> nodes</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">parseChildren</span><span style="color:#24292E;">(context, mode, ancestors) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">last</span><span style="color:#24292E;">(ancestors)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> ns </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parent </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> parent.ns </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* HTML */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> nodes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 自顶向下分析代码，生成 nodes</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  let removedWhitespace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mode </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* RAWTEXT */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">context.inPre) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (let i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> nodes.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nodes[i]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!/</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">^</span><span style="color:#24292E;">\\t\\r\\n\\f ]</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(node.content)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 匹配空白字符</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nodes[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nodes[i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果空白字符是开头或者结尾节点</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 或者空白字符与注释节点相连</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 或者空白字符在两个元素之间并包含换行符</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 那么这些空白字符节点都应该被移除</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">prev </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">next </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">              prev.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMMENT */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">              next.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMMENT */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">              (prev.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ELEMENT */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                next.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ELEMENT */</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">[\\r\\n]</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(node.content))) {</span></span>
<span class="line"><span style="color:#24292E;">              removedWhitespace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">              nodes[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 否则压缩这些空白字符到一个空格</span></span>
<span class="line"><span style="color:#24292E;">              node.content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; &#39;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 替换内容中的空白空间到一个空格</span></span>
<span class="line"><span style="color:#24292E;">            node.content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node.content.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">[\\t\\r\\n\\f ]</span><span style="color:#D73A49;">+/</span><span style="color:#24292E;">g, </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(p<wbr>rocess.env.NODE_ENV </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> node.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* COMMENT */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 生产环境移除注释节点</span></span>
<span class="line"><span style="color:#24292E;">          removedWhitespace </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">          nodes[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parent </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> context.options.</span><span style="color:#6F42C1;">isPreTag</span><span style="color:#24292E;">(parent.tag)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 根据 HTML 规范删除前导换行符</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nodes[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (first </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> first.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* TEXT */</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        first.content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first.content.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">/^</span><span style="color:#24292E;">\\r</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">\\n</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 过滤空白字符节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> removedWhitespace </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> nodes.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(Boolean) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nodes</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码逻辑很简单，主要就是遍历 nodes，拿到每一个 AST 节点，判断是否为一个文本节点，如果是则判断它是不是空白字符；如果是则进一步判断空白字符是开头或还是结尾节点，或者空白字符与注释节点相连，或者空白字符在两个元素之间并包含换行符，如果满足上述这些情况，这些空白字符节点都应该被移除。</p><p>此外，不满足这三种情况的空白字符都会被压缩成一个空格，非空文本中间的空白字符也会被压缩成一个空格，在生产环境下注释节点也会被移除。</p><p>在 parseChildren 函数的最后，会过滤掉这些被标记清除的节点并返回过滤后的 AST 节点数组。</p><h3 id="创建-ast-根节点" tabindex="-1">创建 AST 根节点 <a class="header-anchor" href="#创建-ast-根节点" aria-label="Permalink to &quot;创建 AST 根节点&quot;">​</a></h3><p>子节点解析完毕，baseParse 过程就剩最后一步创建 AST 根节点了，我们来看一下 createRoot 的实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(children, loc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> locStub) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/* ROOT */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    children,</span></span>
<span class="line"><span style="color:#E1E4E8;">    helpers</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    components</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    directives</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    hoists</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    imports</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    cached</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    temps</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    codegenNode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> undefined,</span></span>
<span class="line"><span style="color:#E1E4E8;">    loc</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(children, loc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> locStub) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    type</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/* ROOT */</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    children,</span></span>
<span class="line"><span style="color:#24292E;">    helpers</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    components</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    directives</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    hoists</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    imports</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [],</span></span>
<span class="line"><span style="color:#24292E;">    cached</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    temps</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    codegenNode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> undefined,</span></span>
<span class="line"><span style="color:#24292E;">    loc</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>createRoot 的实现非常简单，它就是返回一个 JavaScript 对象，作为 AST 根节点。其中 type 表示它是一个根节点类型，children 是我们前面解析的子节点数组。除此之外，这个根节点还添加了其它的属性，当前我们并不需要搞清楚每一个属性代表的含义，这些属性我们在分析后续的处理流程中会介绍。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该掌握 Vue.js 编译过程的第一步，即<strong>把 template 解析生成 AST 对象</strong>，整个解析过程是一个自顶向下的分析过程，也就是从代码开始，通过语法分析，找到对应的解析处理逻辑，创建 AST 节点，处理的过程中也在不断前进代码，更新解析上下文，最终根据生成的 AST 节点数组创建 AST 根节点。</p><p>最后，给你留一道思考题目，在 parseTag 的过程中，如果解析的属性有 v-pre 标签，为什么要回到之前的 context，重新解析一次？欢迎你在留言区与我分享。</p><blockquote><p><strong>本节课的相关代码在源代码中的位置如下：</strong></p><p>packages/compiler-core/src/parse.ts</p><p>packages/compiler-core/src/ast.ts</p></blockquote>`,38),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const d=s(l,[["render",t]]);export{D as __pageData,d as default};
