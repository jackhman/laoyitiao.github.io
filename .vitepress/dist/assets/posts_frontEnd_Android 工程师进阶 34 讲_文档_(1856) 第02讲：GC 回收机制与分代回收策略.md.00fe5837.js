import{_ as s,o as n,g as a,Q as l}from"./chunks/framework.f949202b.js";const u=JSON.parse('{"title":"什么是垃圾 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1856) 第02讲：GC 回收机制与分代回收策略.md","filePath":"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1856) 第02讲：GC 回收机制与分代回收策略.md","lastUpdated":null}'),p={name:"posts/frontEnd/Android 工程师进阶 34 讲_文档/(1856) 第02讲：GC 回收机制与分代回收策略.md"},o=l(`<p>本课时我们讲解 GC 回收机制与分代回收策略。</p><p>垃圾回收（Garbage Collection，简写为 GC）可能是虚拟机众多知识点中最为大众所熟知的一个了，也是Java开发者最关注的一块知识点。Java 语言开发者比 C 语言开发者幸福的地方就在于，我们不需要手动释放对象的内存，JVM 中的垃圾回收器（Garbage Collector）会为我们自动回收。但是这种幸福是有代价的：一旦这种自动化机制出错，我们又不得不去深入理解 GC 回收机制，甚至需要对这些&quot;自动化&quot;的技术实施必要的监控和调节。</p><p>上一节课我介绍了 Java 内存运行时区域的各个部分，其中程序计数器、虚拟机栈、本地方法栈 3 个区域随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作，这几个区域内不需要过多考虑回收的问题。</p><p>而堆和方法区则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾收集器所关注的就是这部分内存。</p><h3 id="什么是垃圾" tabindex="-1">什么是垃圾 <a class="header-anchor" href="#什么是垃圾" aria-label="Permalink to &quot;什么是垃圾&quot;">​</a></h3><p>所谓垃圾就是内存中已经没有用的对象。 既然是&quot;垃圾回收&quot;，那就必须知道哪些对象是垃圾。Java 虚拟机中使用一种叫作&quot;**可达性分析&quot;**的算法来决定对象是否可以被回收。</p><h4 id="可达性分析" tabindex="-1">可达性分析 <a class="header-anchor" href="#可达性分析" aria-label="Permalink to &quot;可达性分析&quot;">​</a></h4><p>可达性分析算法是从离散数学中的图论引入的，JVM 把内存中所有的对象之间的引用关系看作一张图，通过一组名为&quot;GC Root&quot;的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，最后通过判断对象的引用链是否可达来决定对象是否可以被回收。如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/7C/9B/Cgq2xl58leGAIoKxAAEZWYE_v08477.png" alt=""></p><p>比如上图中，对象A/B/C/D/E 与 GC Root 之间都存在一条直接或者间接的引用链，这也代表它们与 GC Root 之间是可达的，因此它们是不能被 GC 回收掉的。而对象M和K虽然被对J 引用到，但是并不存在一条引用链连接它们与 GC Root，所以当 GC 进行垃圾回收时，只要遍历到 J/K/M 这 3 个对象，就会将它们回收。</p><blockquote><p><strong>注意</strong>：上图中圆形图标虽然标记的是对象，但实际上代表的是此对象在内存中的引用。包括 GC Root 也是一组引用而并非对象。</p></blockquote><h4 id="gc-root-对象" tabindex="-1">GC Root 对象 <a class="header-anchor" href="#gc-root-对象" aria-label="Permalink to &quot;GC Root 对象&quot;">​</a></h4><p>在 Java 中，有以下几种对象可以作为 GC Root：</p><ol><li>Java 虚拟机栈（局部变量表）中的引用的对象。</li><li>方法区中静态引用指向的对象。</li><li>仍处于存活状态中的线程对象。</li><li>Native 方法中 JNI 引用的对象。</li></ol><h3 id="什么时候回收" tabindex="-1">什么时候回收 <a class="header-anchor" href="#什么时候回收" aria-label="Permalink to &quot;什么时候回收&quot;">​</a></h3><p>不同的虚拟机实现有着不同的 GC 实现机制，但是一般情况下每一种 GC 实现都会在以下两种情况下触发垃圾回收。</p><ol><li><strong>Allocation Failure</strong>：在堆内存中分配时，如果因为可用剩余空间不足导致对象内存分配失败，这时系统会触发一次 GC。</li><li><strong>System.gc()</strong>：在应用层，Java 开发工程师可以主动调用此 API 来请求一次 GC。</li></ol><h3 id="代码验证-gc-root-的几种情况" tabindex="-1">代码验证 GC Root 的几种情况 <a class="header-anchor" href="#代码验证-gc-root-的几种情况" aria-label="Permalink to &quot;代码验证 GC Root 的几种情况&quot;">​</a></h3><p>现在我们了解了 Java 中的 GC Root，以及何时触发 GC，接下来就通过几个案例来验证 GC Root 的情况。在看具体代码之前，我们先了解一个执行 Java 命令时的参数。</p><blockquote><p>-Xms 初始分配 JVM 运行时的内存大小，如果不指定默认为物理内存的 1/64。</p></blockquote><p>比如我们运行如下命令执行 HelloWorld 程序，从物理内存中分配出 200M 空间分配给 JVM 内存。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">java </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Xms200m HelloWorld</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">java </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Xms200m HelloWorld</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="验证虚拟机栈-栈帧中的局部变量-中引用的对象作为-gc-root" tabindex="-1">验证虚拟机栈（栈帧中的局部变量）中引用的对象作为 GC Root <a class="header-anchor" href="#验证虚拟机栈-栈帧中的局部变量-中引用的对象作为-gc-root" aria-label="Permalink to &quot;验证虚拟机栈（栈帧中的局部变量）中引用的对象作为 GC Root&quot;">​</a></h4><p>我们运行如下代码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootLocalVariable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> _10MB </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] memory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _10MB];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;开始时:&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">gc</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;第二次GC完成&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        GCRootLocalVariable g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootLocalVariable</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">gc</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;第一次GC完成&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 打印出当前JVM剩余空间和总的空间大小</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;free is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">freeMemory</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; M, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;total is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">totalMemory</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; M, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootLocalVariable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> _10MB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] memory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _10MB];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;开始时:&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">gc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;第二次GC完成&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        GCRootLocalVariable g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootLocalVariable</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">gc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;第一次GC完成&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 打印出当前JVM剩余空间和总的空间大小</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;free is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">freeMemory</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; M, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;total is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">totalMemory</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; M, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>打印日志：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">开始时</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">242</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span>
<span class="line"><span style="color:#E1E4E8;">第一次GC完成</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">163</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span>
<span class="line"><span style="color:#E1E4E8;">第二次GC完成</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">243</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">开始时</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">242</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span>
<span class="line"><span style="color:#24292E;">第一次GC完成</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">163</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span>
<span class="line"><span style="color:#24292E;">第二次GC完成</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">243</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以看出：</p><ul><li>当第一次 GC 时，g 作为局部变量，引用了 new 出的对象（80M），并且它作为 GC Roots，在 GC 后并不会被 GC 回收。</li><li>当第二次 GC：method() 方法执行完后，局部变量 g 跟随方法消失，不再有引用类型指向该 80M 对象，所以第二次 GC 后此 80M 也会被回收。</li></ul><blockquote><p><strong>注意</strong>：上面日志包括后面的实例中，因为有中间变量，所以会有 1M 左右的误差，但不影响我们分析 GC 过程。</p></blockquote><h4 id="验证方法区中的静态变量引用的对象作为-gc-root" tabindex="-1">验证方法区中的静态变量引用的对象作为 GC Root <a class="header-anchor" href="#验证方法区中的静态变量引用的对象作为-gc-root" aria-label="Permalink to &quot;验证方法区中的静态变量引用的对象作为 GC Root&quot;">​</a></h4><p>我们运行如下代码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootStaticVariable</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> _10MB </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] memory;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> GCRootStaticVariable staticVariable;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootStaticVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        memory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[size];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;程序开始:&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        GCRootStaticVariable g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootStaticVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _10MB);</span></span>
<span class="line"><span style="color:#E1E4E8;">        g.staticVariable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootStaticVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _10MB);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将g置为null, 调用GC时可以回收此对象内存</span></span>
<span class="line"><span style="color:#E1E4E8;">        g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">gc</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;GC完成&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 打印出当前JVM剩余空间和总的空间大小</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;free is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">freeMemory</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; M, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;total is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">totalMemory</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; M, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootStaticVariable</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> _10MB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] memory;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> GCRootStaticVariable staticVariable;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootStaticVariable</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        memory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[size];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;程序开始:&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        GCRootStaticVariable g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootStaticVariable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _10MB);</span></span>
<span class="line"><span style="color:#24292E;">        g.staticVariable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootStaticVariable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _10MB);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将g置为null, 调用GC时可以回收此对象内存</span></span>
<span class="line"><span style="color:#24292E;">        g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">gc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GC完成&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 打印出当前JVM剩余空间和总的空间大小</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;free is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">freeMemory</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; M, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;total is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">totalMemory</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; M, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>打印日志：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">程序开始</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">242</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span>
<span class="line"><span style="color:#E1E4E8;">GC完成</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">163</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">程序开始</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">242</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span>
<span class="line"><span style="color:#24292E;">GC完成</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">163</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以看出：</p><p>程序刚开始运行时内存为 242M，并分别创建了 g 对象（40M），同时也初始化 g 对象内部的静态变量 staticVariable 对象（80M）。当调用 GC 时，只有 g 对象的 40M 被 GC 回收掉，而静态变量 staticVariable 作为 GC Root，它引用的 80M 并不会被回收。</p><h4 id="验证活跃线程作为-gc-root" tabindex="-1">验证活跃线程作为 GC Root <a class="header-anchor" href="#验证活跃线程作为-gc-root" aria-label="Permalink to &quot;验证活跃线程作为 GC Root&quot;">​</a></h4><p>我们运行如下代码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootThread</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> _10MB </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] memory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _10MB];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;开始前内存情况:&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        AsyncTask at </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncTask</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootThread</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        Thread thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Thread</span><span style="color:#E1E4E8;">(at);</span></span>
<span class="line"><span style="color:#E1E4E8;">        thread.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">gc</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;main方法执行完毕，完成GC&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        thread.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        at </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">gc</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;线程代码执行完毕，完成GC&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 打印出当前JVM剩余空间和总的空间大小</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;free is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">freeMemory</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; M, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;total is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">totalMemory</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; M, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncTask</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Runnable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GCRootThread gcRootThread;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncTask</span><span style="color:#E1E4E8;">(GCRootThread </span><span style="color:#FFAB70;">gcRootThread</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.gcRootThread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gcRootThread;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">                Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">){}</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootThread</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> _10MB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] memory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _10MB];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;开始前内存情况:&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        AsyncTask at </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncTask</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootThread</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(at);</span></span>
<span class="line"><span style="color:#24292E;">        thread.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">gc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;main方法执行完毕，完成GC&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        thread.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        at </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">gc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;线程代码执行完毕，完成GC&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 打印出当前JVM剩余空间和总的空间大小</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;free is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">freeMemory</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; M, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;total is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">totalMemory</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; M, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncTask</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GCRootThread gcRootThread;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncTask</span><span style="color:#24292E;">(GCRootThread </span><span style="color:#E36209;">gcRootThread</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.gcRootThread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gcRootThread;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">                Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){}</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>打印日志：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">开始前内存情况</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">242</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span>
<span class="line"><span style="color:#E1E4E8;">main方法执行完毕，完成GC</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">163</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span>
<span class="line"><span style="color:#E1E4E8;">线程代码执行完毕，完成GC</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">243</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">开始前内存情况</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">242</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span>
<span class="line"><span style="color:#24292E;">main方法执行完毕，完成GC</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">163</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span>
<span class="line"><span style="color:#24292E;">线程代码执行完毕，完成GC</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">243</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以看出：</p><p>程序刚开始时是 242M 内存，当调用第一次 GC 时线程并没有执行结束，并且它作为 GC Root，所以它所引用的 80M 内存并不会被 GC 回收掉。 thread.join() 保证线程结束再调用后续代码，所以当调用第二次 GC 时，线程已经执行完毕并被置为 null，这时线程已经被销毁，所以之前它所引用的 80M 此时会被 GC 回收掉。</p><h4 id="测试成员变量是否可作为-gc-root" tabindex="-1">测试成员变量是否可作为 GC Root <a class="header-anchor" href="#测试成员变量是否可作为-gc-root" aria-label="Permalink to &quot;测试成员变量是否可作为 GC Root&quot;">​</a></h4><p>我们运行如下代码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootClassVariable</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> _10MB </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] memory;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> GCRootClassVariable classVariable;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootClassVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        memory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[size];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;程序开始:&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        GCRootClassVariable g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootClassVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _10MB);</span></span>
<span class="line"><span style="color:#E1E4E8;">        g.classVariable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GCRootClassVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _10MB);</span></span>
<span class="line"><span style="color:#E1E4E8;">        g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.</span><span style="color:#B392F0;">gc</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;GC完成&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 打印出当前JVM剩余空间和总的空间大小</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printMemory</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;free is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">freeMemory</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; M, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;total is &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> Runtime.</span><span style="color:#B392F0;">getRuntime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">totalMemory</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; M, &quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootClassVariable</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> _10MB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] memory;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> GCRootClassVariable classVariable;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootClassVariable</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        memory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[size];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;程序开始:&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        GCRootClassVariable g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootClassVariable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _10MB);</span></span>
<span class="line"><span style="color:#24292E;">        g.classVariable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GCRootClassVariable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _10MB);</span></span>
<span class="line"><span style="color:#24292E;">        g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">gc</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GC完成&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 打印出当前JVM剩余空间和总的空间大小</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printMemory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;free is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">freeMemory</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; M, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;total is &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">totalMemory</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; M, &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>打印日志：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">程序开始</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">242</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span>
<span class="line"><span style="color:#E1E4E8;">GC完成</span></span>
<span class="line"><span style="color:#E1E4E8;">free is </span><span style="color:#79B8FF;">243</span><span style="color:#E1E4E8;"> M, total is </span><span style="color:#79B8FF;">245</span><span style="color:#E1E4E8;"> M,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">程序开始</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">242</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span>
<span class="line"><span style="color:#24292E;">GC完成</span></span>
<span class="line"><span style="color:#24292E;">free is </span><span style="color:#005CC5;">243</span><span style="color:#24292E;"> M, total is </span><span style="color:#005CC5;">245</span><span style="color:#24292E;"> M,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>从上面日志中可以看出当调用 GC 时，因为 g 已经置为 null，因此 g 中的全局变量 classVariable 此时也不再被 GC Root 所引用。所以最后 g(40M) 和 classVariable(80M) 都会被回收掉。<strong>这也表明全局变量同静态变量不同，它不会被当作 GC Root</strong>。</p><blockquote><p>上面演示的这几种情况往往也是内存泄漏发生的场景，设想一下我们将各个 Test 类换成 Android 中的 Activity 的话将导致 Activity 无法被系统回收，而一个 Activity 中的数据往往是较大的，因此内存泄漏导致 Activity 无法回收还是比较致命的。</p></blockquote><h3 id="如何回收垃圾" tabindex="-1">如何回收垃圾 <a class="header-anchor" href="#如何回收垃圾" aria-label="Permalink to &quot;如何回收垃圾&quot;">​</a></h3><p>由于垃圾收集算法的实现涉及大量的程序细节，各家虚拟机厂商对其实现细节各不相同，因此本课时并不会过多的讨论算法的实现，只是介绍几种算法的思想以及优缺点。</p><h4 id="标记清除算法-mark-and-sweep-gc" tabindex="-1">标记清除算法（Mark and Sweep GC） <a class="header-anchor" href="#标记清除算法-mark-and-sweep-gc" aria-label="Permalink to &quot;标记清除算法（Mark and Sweep GC）&quot;">​</a></h4><p>从&quot;GC Roots&quot;集合开始，将内存整个遍历一次，保留所有可以被 GC Roots 直接或间接引用到的对象，而剩下的对象都当作垃圾对待并回收，过程分两步。</p><ol><li><strong>Mark 标记阶段</strong>：找到内存中的所有 GC Root 对象，只要是和 GC Root 对象直接或者间接相连则标记为灰色（也就是存活对象），否则标记为黑色（也就是垃圾对象）。</li><li><strong>Sweep 清除阶段</strong>：当遍历完所有的 GC Root 之后，则将标记为垃圾的对象直接清除。</li></ol><p>如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/03/81/Ciqah158kR-AFqC0AACRJFj-tqc381.png" alt=""></p><ul><li><strong>优点</strong>：实现简单，不需要将对象进行移动。</li><li><strong>缺点</strong>：这个算法需要中断进程内其他组件的执行（stop the world），并且可能产生内存碎片，提高了垃圾回收的频率。</li></ul><h4 id="复制算法-copying" tabindex="-1">复制算法（Copying） <a class="header-anchor" href="#复制算法-copying" aria-label="Permalink to &quot;复制算法（Copying）&quot;">​</a></h4><p>将现有的内存空间分为两快，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中。之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</p><ol><li>复制算法之前，内存分为 A/B 两块，并且当前只使用内存 A，内存的状况如下图所示：</li></ol><p><img src="https://s0.lgstatic.com/i/image3/M01/7C/97/Cgq2xl58kR-AfKs5AABx53v9UCk063.png" alt=""></p><ol start="2"><li>标记完之后，所有可达对象都被按次序复制到内存 B 中，并设置 B 为当前使用中的内存。内存状况如下图所示：</li></ol><p><img src="https://s0.lgstatic.com/i/image3/M01/03/81/Ciqah158kR-AQa1cAABq_Yx6zyw527.png" alt=""></p><ul><li><strong>优点</strong>：按顺序分配内存即可，实现简单、运行高效，不用考虑内存碎片。</li><li><strong>缺点</strong>：可用的内存大小缩小为原来的一半，对象存活率高时会频繁进行复制。</li></ul><h4 id="标记-压缩算法-mark-compact" tabindex="-1">标记-压缩算法 (Mark-Compact) <a class="header-anchor" href="#标记-压缩算法-mark-compact" aria-label="Permalink to &quot;标记-压缩算法 (Mark-Compact)&quot;">​</a></h4><p>需要先从根节点开始对所有可达对象做一次标记，之后，它并不简单地清理未标记的对象，而是将所有的存活对象压缩到内存的一端。最后，清理边界外所有的空间。因此标记压缩也分两步完成：</p><ol><li><strong>Mark 标记阶段</strong>：找到内存中的所有 GC Root 对象，只要是和 GC Root 对象直接或者间接相连则标记为灰色（也就是存活对象），否则标记为黑色（也就是垃圾对象）。</li><li><strong>Compact 压缩阶段</strong> ：将剩余存活对象按顺序压缩到内存的某一端。<br><img src="https://s0.lgstatic.com/i/image3/M01/7C/97/Cgq2xl58kR-AQb0SAAAl99yZMSc183.png" alt=""></li></ol><ul><li><strong>优点</strong>：这种方法既避免了碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高。</li><li><strong>缺点</strong>：所谓压缩操作，仍需要进行局部对象移动，所以一定程度上还是降低了效率。</li></ul><h3 id="jvm分代回收策略" tabindex="-1">JVM分代回收策略 <a class="header-anchor" href="#jvm分代回收策略" aria-label="Permalink to &quot;JVM分代回收策略&quot;">​</a></h3><p>Java 虚拟机根据对象存活的周期不同，把堆内存划分为几块，一般分为<strong>新生代</strong> 、<strong>老年代</strong> ，这就是 JVM 的内存分代策略。<strong>注意: 在 HotSpot 中除了新生代和老年代，还有永久代</strong></p><p>分代回收的中心思想就是：对于新创建的对象会在新生代中分配内存，此区域的对象生命周期一般较短。如果经过多次回收仍然存活下来，则将它们转移到老年代中。</p><h4 id="年轻代-young-generation" tabindex="-1">年轻代（Young Generation） <a class="header-anchor" href="#年轻代-young-generation" aria-label="Permalink to &quot;年轻代（Young Generation）&quot;">​</a></h4><p>新生成的对象优先存放在新生代中，新生代对象朝生夕死，存活率很低，在新生代中，常规应用进行一次垃圾收集一般可以回收 70%~95% 的空间，回收效率很高。新生代中因为要进行一些复制操作，所以一般采用的 GC 回收算法是复制算法。</p><p>新生代又可以继续细分为 3 部分：Eden、Survivor0（简称 S0）、Survivor1（简称S1）。这 3 部分按照 8:1:1 的比例来划分新生代。这 3 块区域的内存分配过程如下：</p><p>绝大多数刚刚被创建的对象会存放在 <strong>Eden</strong> 区。如图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/03/81/Ciqah158kSCACECoAABYMXWFYtY758.png" alt=""></p><p>当 <strong>Eden</strong> 区第一次满的时候，会进行垃圾回收。首先将 <strong>Eden</strong> 区的垃圾对象回收清除，并将存活的对象复制到 <strong>S0</strong> ，此时 <strong>S1</strong> 是空的。如图所示：<br><img src="https://s0.lgstatic.com/i/image3/M01/7C/97/Cgq2xl58kSGACeimAABTArM3xYk676.png" alt=""></p><p>下一次 <strong>Eden</strong> 区满时，再执行一次垃圾回收。此次会将 <strong>Eden</strong> 和 <strong>S0</strong> 区中所有垃圾对象清除，并将存活对象复制到 <strong>S1</strong> ，此时 <strong>S0</strong>变为空。如图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/03/81/Ciqah158kSGAXW6uAABTZbbBBQU172.png" alt=""></p><p>如此反复在 <strong>S0</strong> 和 <strong>S1</strong>之间切换几次（默认 15 次）之后，如果还有存活对象。说明这些对象的生命周期较长，则将它们转移到老年代中。如图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/7C/97/Cgq2xl58kSGAIFsJAABiXFUZ3JU251.png" alt=""></p><h4 id="年老代-old-generation" tabindex="-1">年老代（Old Generation） <a class="header-anchor" href="#年老代-old-generation" aria-label="Permalink to &quot;年老代（Old Generation）&quot;">​</a></h4><p>一个对象如果在新生代存活了足够长的时间而没有被清理掉，则会被复制到老年代。老年代的内存大小一般比新生代大，能存放更多的对象。如果对象比较大（比如长字符串或者大数组），并且新生代的剩余空间不足，则这个大对象会直接被分配到老年代上。</p><p>我们可以使用 -XX:PretenureSizeThreshold 来控制直接升入老年代的对象大小，大于这个值的对象会直接分配在老年代上。老年代因为对象的生命周期较长，不需要过多的复制操作，所以一般采用标记压缩的回收算法。</p><blockquote><p><strong>注意</strong>：对于老年代可能存在这么一种情况，老年代中的对象有时候会引用到新生代对象。这时如果要执行新生代 GC，则可能需要查询整个老年代上可能存在引用新生代的情况，这显然是低效的。所以，老年代中维护了一个 512 byte 的 card table，所有老年代对象引用新生代对象的信息都记录在这里。每当新生代发生 GC 时，只需要检查这个 card table 即可，大大提高了性能。</p></blockquote><h3 id="gc-log-分析" tabindex="-1">GC Log 分析 <a class="header-anchor" href="#gc-log-分析" aria-label="Permalink to &quot;GC Log 分析&quot;">​</a></h3><p>为了让上层应用开发人员更加方便的调试 Java 程序，JVM 提供了相应的 GC 日志。在 GC 执行垃圾回收事件的过程中，会有各种相应的 log 被打印出来。其中新生代和老年代所打印的日志是有区别的。</p><ul><li>新生代 GC：这一区域的 GC 叫作 Minor GC。因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。</li><li>老年代 GC：发生在这一区域的 GC 也叫作 Major GC 或者 Full GC。当出现了 Major GC，经常会伴随至少一次的 Minor GC。</li></ul><blockquote><p>注意：在有些虚拟机实现中，Major GC 和 Full GC 还是有一些区别的。Major GC 只是代表回收老年代的内存，而 Full GC 则代表回收整个堆中的内存，也就是新生代 + 老年代。</p></blockquote><p>接下来就通过几个案例来分析如何查看 GC Log，分析这些 GC Log 的过程中也能再加深对 JVM 分代策略的理解。</p><p>首先我们需要理解几个 Java 命令的参数：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/7C/9B/Cgq2xl58lmeAAsp5AABwifdCuEw841.png" alt=""></p><p>我使用如下代码，在内存中创建 4 个 byte 类型数组来演示内存分配与 GC 的详细过程。代码如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* VM agrs: -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails</span></span>
<span class="line"><span style="color:#6A737D;">* -XX:SurvivorRatio=8</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MinorGCTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> _1MB </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testAllocation</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] a1, a2, a3, z4;</span></span>
<span class="line"><span style="color:#E1E4E8;">        a1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _1MB];</span></span>
<span class="line"><span style="color:#E1E4E8;">        a2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _1MB];</span></span>
<span class="line"><span style="color:#E1E4E8;">        a3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _1MB];</span></span>
<span class="line"><span style="color:#E1E4E8;">        a4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> _1MB];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">agrs</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">testAllocation</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">* VM agrs: -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails</span></span>
<span class="line"><span style="color:#6A737D;">* -XX:SurvivorRatio=8</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MinorGCTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> _1MB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testAllocation</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] a1, a2, a3, z4;</span></span>
<span class="line"><span style="color:#24292E;">        a1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _1MB];</span></span>
<span class="line"><span style="color:#24292E;">        a2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _1MB];</span></span>
<span class="line"><span style="color:#24292E;">        a3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _1MB];</span></span>
<span class="line"><span style="color:#24292E;">        a4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> _1MB];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">agrs</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">testAllocation</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>通过上面的参数，可以看出堆内存总大小为 20M，其中新生代占 10M，剩下的 10M 会自动分配给老年代。执行上述代码打印日志如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Heap</span></span>
<span class="line"><span style="color:#E1E4E8;">PSYoungGen      total 9216K, used 8003K [</span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x00000007c0000000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x00000007c0000000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  eden space 8192K, </span><span style="color:#79B8FF;">97</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> used [</span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bfdd0ed8</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bfe00000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  from space 1024K, </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> used [</span><span style="color:#79B8FF;">0x00000007bff00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bff00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007c0000000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  to   space 1024K, </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> used [</span><span style="color:#79B8FF;">0x00000007bfe00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bfe00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bff00000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">ParOldGen       total 10240K, used 0K [</span><span style="color:#79B8FF;">0x00000007bec00000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  object space 10240K, </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> used [</span><span style="color:#79B8FF;">0x00000007bec00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bec00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Metaspace       used 2631K, capacity 4486K, committed 4864K, reserved 1056768K</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">space</span><span style="color:#E1E4E8;">    used 286K, capacity 386K, committed 512K, reserved 1048576K</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Heap</span></span>
<span class="line"><span style="color:#24292E;">PSYoungGen      total 9216K, used 8003K [</span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x00000007c0000000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x00000007c0000000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  eden space 8192K, </span><span style="color:#005CC5;">97</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> used [</span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bfdd0ed8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bfe00000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  from space 1024K, </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> used [</span><span style="color:#005CC5;">0x00000007bff00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bff00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007c0000000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  to   space 1024K, </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> used [</span><span style="color:#005CC5;">0x00000007bfe00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bfe00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bff00000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">ParOldGen       total 10240K, used 0K [</span><span style="color:#005CC5;">0x00000007bec00000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  object space 10240K, </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> used [</span><span style="color:#005CC5;">0x00000007bec00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bec00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Metaspace       used 2631K, capacity 4486K, committed 4864K, reserved 1056768K</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">space</span><span style="color:#24292E;">    used 286K, capacity 386K, committed 512K, reserved 1048576K</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>日志中的各字段代表意义如下：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/03/85/Ciqah158lqGAOkbpAAAvHYLJUt0639.png" alt=""></p><p>从日志中可以看出：程序执行完之后，a1、a2、a3、a4 四个对象都被分配在了新生代的 Eden 区。</p><p>如果我们将测试代码中的 a4 初始化改为 a4 = new byte[2 * _1MB] 则打印日志如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">GC</span><span style="color:#E1E4E8;"> (Allocation Failure) [PSYoungGen</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 6815K</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">480</span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">(9216K)] 6815K</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">6632</span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">(19456K), </span><span style="color:#79B8FF;">0.0067344</span><span style="color:#E1E4E8;"> secs] [Times</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> user</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.04</span><span style="color:#E1E4E8;"> sys</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.00</span><span style="color:#E1E4E8;">, real</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.01</span><span style="color:#E1E4E8;"> secs]</span></span>
<span class="line"><span style="color:#E1E4E8;">Heap</span></span>
<span class="line"><span style="color:#E1E4E8;">PSYoungGen      total 9216K, used 2130K [</span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x00000007c0000000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x00000007c0000000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  eden space 8192K, </span><span style="color:#79B8FF;">26</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> used [</span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bf814930</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bfe00000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  from space 1024K, </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> used [</span><span style="color:#79B8FF;">0x00000007bfe00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bfe00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bff00000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  to   space 1024K, </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> used [</span><span style="color:#79B8FF;">0x00000007bff00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bff00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007c0000000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">ParOldGen       total 10240K, used 6420K [</span><span style="color:#79B8FF;">0x00000007bec00000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  object space 10240K, </span><span style="color:#79B8FF;">62</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> used [</span><span style="color:#79B8FF;">0x00000007bec00000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bf2450d0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0x00000007bf600000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">Metaspace       used 2632K, capacity 4486K, committed 4864K, reserved 1056768K</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">space</span><span style="color:#E1E4E8;">    used 286K, capacity 386K, committed 512K, reserved 1048576K</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">GC</span><span style="color:#24292E;"> (Allocation Failure) [PSYoungGen</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 6815K</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">480</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">(9216K)] 6815K</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">6632</span><span style="color:#6F42C1;">K</span><span style="color:#24292E;">(19456K), </span><span style="color:#005CC5;">0.0067344</span><span style="color:#24292E;"> secs] [Times</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> user</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.04</span><span style="color:#24292E;"> sys</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.00</span><span style="color:#24292E;">, real</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.01</span><span style="color:#24292E;"> secs]</span></span>
<span class="line"><span style="color:#24292E;">Heap</span></span>
<span class="line"><span style="color:#24292E;">PSYoungGen      total 9216K, used 2130K [</span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x00000007c0000000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x00000007c0000000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  eden space 8192K, </span><span style="color:#005CC5;">26</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> used [</span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bf814930</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bfe00000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  from space 1024K, </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> used [</span><span style="color:#005CC5;">0x00000007bfe00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bfe00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bff00000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  to   space 1024K, </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> used [</span><span style="color:#005CC5;">0x00000007bff00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bff00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007c0000000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">ParOldGen       total 10240K, used 6420K [</span><span style="color:#005CC5;">0x00000007bec00000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  object space 10240K, </span><span style="color:#005CC5;">62</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> used [</span><span style="color:#005CC5;">0x00000007bec00000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bf2450d0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0x00000007bf600000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Metaspace       used 2632K, capacity 4486K, committed 4864K, reserved 1056768K</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">space</span><span style="color:#24292E;">    used 286K, capacity 386K, committed 512K, reserved 1048576K</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这是因为在给 a4 分配内存之前，Eden 区已经被占用 6M。已经无法再分配出 2M 来存储 a4 对象。因此会执行一次 Minor GC。并尝试将存活的 a1、a2、a3 复制到 S1 区。但是 S1 区只有 1M 空间，所以没有办法存储 a1、a2、a3 任意一个对象。在这种情况下 a1、a2、a3 将被转移到老年代，最后将 a4 保存在 Eden 区。<strong>所以最终结果就是：Eden 区占用 2M（a4），老年代占用 6M（a1、a2、a3）。</strong></p><blockquote><p>通过这个测试案例，我们也间接验证了 JVM 的内存分配和分代回收策略。如果你感兴趣可以在课下尝试使用各种命令参数，给堆的新生代和老年代设置不同的大小来验证不同的结果。</p></blockquote><h4 id="再谈引用" tabindex="-1">再谈引用 <a class="header-anchor" href="#再谈引用" aria-label="Permalink to &quot;再谈引用&quot;">​</a></h4><p>上文中已经介绍过，判断对象是否存活我们是通过GC Roots的引用可达性来判断的。但是JVM中的引用关系并不止一种，而是有四种，根据引用强度的由强到弱，他们分别是:<strong>强引用</strong> (Strong Reference)、<strong>软引用</strong> (Soft Reference)、<strong>弱引用</strong> (Weak Reference)、<strong>虚引用</strong>(Phantom Reference)。</p><p>任何一本Java面试书籍都会对这四种引用做简单对比，我用一张表格来表示如下：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/03/85/Ciqah158ltqAHyEHAACoLz2II_g092.png" alt=""></p><p>平时项目中，尤其是Android项目，因为有大量的图像(Bitmap)对象，使用软引用的场景较多。所以重点看下软引用SoftReference的使用，不当的使用软引用有时也会导致系统异常。</p><h4 id="软引用常规使用" tabindex="-1">软引用常规使用 <a class="header-anchor" href="#软引用常规使用" aria-label="Permalink to &quot;软引用常规使用&quot;">​</a></h4><p>常规使用代码如下：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/05/F7/Ciqah16B6smATzkwAAL0Suw9ZmQ406.png" alt=""></p><p>执行上述代码，打印日志如下：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/7C/97/Cgq2xl58kSGAFUHRAACFBaOn7hI672.png" alt=""></p><p>首先通过-Xmx将堆最大内存设置为200M。从日志中可以看出，当第一次GC时，内存中还有剩余可用内存，所以软引用并不会被GC回收。但是当我们再次创建一个120M的强引用时，JVM可用内存已经不够，所以会尝试将软引用给回收掉。</p><h4 id="软引用隐藏问题" tabindex="-1">软引用隐藏问题 <a class="header-anchor" href="#软引用隐藏问题" aria-label="Permalink to &quot;软引用隐藏问题&quot;">​</a></h4><p>需要注意的是，被软引用对象关联的对象会自动被垃圾回收器回收，但是软引用对象本身也是一个对象，这些创建的软引用并不会自动被垃圾回收器回收掉。比如如下代码：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/03/81/Ciqah158kSKACYQrAAHi5SOybBQ812.png" alt=""></p><p>上述代码，虽然每一个SoftObject都被一个软引用所引用，在内存紧张时，GC会将SoftObject所占用的1KB回收。但是每一个SoftReference又都被Set所引用(强引用)。执行上述代码结果如下：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/7C/97/Cgq2xl58kSKANSWJAADApye5msQ014.png" alt=""></p><p>限制堆内存大小为4M，最终程序崩溃，但是异常的原因并不是普通的堆内存溢出，而是&quot;GC overhead&quot;。之所以会抛出这个错误，是由于虚拟机一直在不断回收软引用，回收进行的速度过快，占用的cpu过大(超过98%)，并且每次回收掉的内存过小(小于2%)，导致最终抛出了这个错误。</p><p>这里需要做优化，合适的处理方式是注册一个引用队列，每次循环之后将引用队列中出现的软引用对象从cache中移除。如下所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/03/81/Ciqah158kSOAcJtVAAMtvCkCXt0643.png" alt=""></p><p>再次运行修改后的代码，结果如下：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/7C/97/Cgq2xl58kSOAMcDMAADVGDMKO7w664.png" alt=""></p><p>可以看出优化后，程序可以正常执行完。并且在执行过程中会动态的将集合中的软引用删除。</p><p>更多详细 SoftReference 的介绍，可以参考 、<a href="https://mp.weixin.qq.com/s/XRCq3IDdGJt3Nq9Mu23U5g" target="_blank" rel="noreferrer">Java虚拟机究竟是如何处理SoftReference的</a> 。</p><h3 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h3><p>本课时着重讲解了 JVM 中有关垃圾回收的相关知识点，其中重点介绍了使用可达性分析来判断对象是否可以被回收，以及 3 种垃圾回收算法。最后通过分析 GC Log 验证了 Java 虚拟机中内存分配及分代策略的一些细节。</p><p>虚拟机垃圾回收机制很多时候都是影响系统性能、并发能力的主要因素之一。尤其是对于从事 Android 开发的工程师来说，有时候垃圾回收会很大程度上影响 UI 线程，并造成界面卡顿现象。因此理解垃圾回收机制并学会分析 GC Log 也是一项必不可少的技能。后续我会在 DVM 课时中，详细介绍 Android 虚拟机中对垃圾回收所做的优化。</p>`,131),e=[o];function t(r,c,E,y,i,F){return n(),a("div",null,e)}const C=s(p,[["render",t]]);export{u as __pageData,C as default};
