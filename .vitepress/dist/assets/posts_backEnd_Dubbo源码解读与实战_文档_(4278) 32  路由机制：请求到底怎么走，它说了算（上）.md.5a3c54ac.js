import{_ as p,j as t,o as e,g as r,k as l,h as s,Q as o,s as n}from"./chunks/framework.cfb14fe0.js";const m=JSON.parse('{"title":"32路由机制：请求到底怎么走，它说了算（上）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4278) 32  路由机制：请求到底怎么走，它说了算（上）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4278) 32  路由机制：请求到底怎么走，它说了算（上）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4278) 32  路由机制：请求到底怎么走，它说了算（上）.md"},E=o(`<h1 id="_32路由机制-请求到底怎么走-它说了算-上" tabindex="-1">32路由机制：请求到底怎么走，它说了算（上） <a class="header-anchor" href="#_32路由机制-请求到底怎么走-它说了算-上" aria-label="Permalink to &quot;32路由机制：请求到底怎么走，它说了算（上）&quot;">​</a></h1><p>作为 dubbo-cluster 模块分析的第二课时，本课时我们就来介绍一下 dubbo-cluster 模块中涉及的另一个核心概念------ Router。</p><p><strong>Router 的主要功能就是根据用户配置的路由规则以及请求携带的信息，过滤出符合条件的 Invoker 集合，供后续负载均衡逻辑使用</strong>。在上一课时介绍 RegistryDirectory 实现的时候，我们就已经看到了 RouterChain 这个 Router 链的存在，但是没有深入分析，下面我们就来深入 Router 进行分析。</p><h3 id="routerchain、routerfactory-与-router" tabindex="-1">RouterChain、RouterFactory 与 Router <a class="header-anchor" href="#routerchain、routerfactory-与-router" aria-label="Permalink to &quot;RouterChain、RouterFactory 与 Router&quot;">​</a></h3><p>首先我们来看 RouterChain 的核心字段。</p><ul><li><p>invokers（List&lt;Invoker<code>&lt;T&gt;</code>&gt; 类型）：当前 RouterChain 对象要过滤的 Invoker 集合。我们可以看到，在 StaticDirectory 中是通过 RouterChain.setInvokers() 方法进行设置的。</p></li><li><p>builtinRouters（List<code>&lt;Router&gt;</code> 类型）：当前 RouterChain 激活的内置 Router 集合。</p></li><li><p>routers（List<code>&lt;Router&gt;</code> 类型）：当前 RouterChain 中真正要使用的 Router 集合，其中不仅包括了上面 builtinRouters 集合中全部的 Router 对象，还包括通过 addRouters() 方法添加的 Router 对象。</p></li></ul><p>在 RouterChain 的构造函数中，会在传入的 URL 参数中查找 router 参数值，并根据该值获取确定激活的 RouterFactory，之后通过 Dubbo SPI 机制加载这些激活的 RouterFactory 对象，由 RouterFactory 创建当前激活的内置 Router 实例，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RouterChain</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 通过ExtensionLoader加载激活的RouterFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">RouterFactory</span><span style="color:#E1E4E8;">&gt; extensionFactories </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtensionLoader.</span><span style="color:#B392F0;">getExtensionLoader</span><span style="color:#E1E4E8;">(RouterFactory.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">getActivateExtension</span><span style="color:#E1E4E8;">(url, </span><span style="color:#9ECBFF;">&quot;router&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历所有RouterFactory，调用其getRouter()方法创建相应的Router对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Router</span><span style="color:#E1E4E8;">&gt; routers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> extensionFactories.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(factory </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">getRouter</span><span style="color:#E1E4E8;">(url))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">initWithRouters</span><span style="color:#E1E4E8;">(routers); </span><span style="color:#6A737D;">// 初始化buildinRouters字段以及routers字段</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initWithRouters</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Router</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> builtinRouters) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.builtinRouters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> builtinRouters;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.routers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(builtinRouters);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 这里会对routers集合进行排序</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RouterChain</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 通过ExtensionLoader加载激活的RouterFactory</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">RouterFactory</span><span style="color:#24292E;">&gt; extensionFactories </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(RouterFactory.class)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">getActivateExtension</span><span style="color:#24292E;">(url, </span><span style="color:#032F62;">&quot;router&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历所有RouterFactory，调用其getRouter()方法创建相应的Router对象</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Router</span><span style="color:#24292E;">&gt; routers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> extensionFactories.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(factory </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">getRouter</span><span style="color:#24292E;">(url))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">initWithRouters</span><span style="color:#24292E;">(routers); </span><span style="color:#6A737D;">// 初始化buildinRouters字段以及routers字段</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initWithRouters</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Router</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> builtinRouters) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.builtinRouters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> builtinRouters;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.routers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(builtinRouters);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 这里会对routers集合进行排序</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>完成内置 Router 的初始化之后，在 Directory 实现中还可以通过 addRouter() 方法添加新的 Router 实例到 routers 字段中，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addRouters</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Router</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> routers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Router</span><span style="color:#E1E4E8;">&gt; newRouters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    newRouters.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(builtinRouters); </span><span style="color:#6A737D;">// 添加builtinRouters集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    newRouters.</span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(routers); </span><span style="color:#6A737D;">// 添加传入的Router集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    CollectionUtils.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(newRouters); </span><span style="color:#6A737D;">// 重新排序</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.routers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newRouters;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addRouters</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Router</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> routers) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Router</span><span style="color:#24292E;">&gt; newRouters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    newRouters.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(builtinRouters); </span><span style="color:#6A737D;">// 添加builtinRouters集合</span></span>
<span class="line"><span style="color:#24292E;">    newRouters.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(routers); </span><span style="color:#6A737D;">// 添加传入的Router集合</span></span>
<span class="line"><span style="color:#24292E;">    CollectionUtils.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(newRouters); </span><span style="color:#6A737D;">// 重新排序</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.routers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newRouters;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>RouterChain.route() 方法会遍历 routers 字段，逐个调用 Router 对象的 route() 方法，对 invokers 集合进行过滤，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(URL url, Invocation invocation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt; finalInvokers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> invokers;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Router router </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> routers) { </span><span style="color:#6A737D;">// 遍历全部的Router对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        finalInvokers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> router.</span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(finalInvokers, url, invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> finalInvokers;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(URL url, Invocation invocation) {</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt; finalInvokers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> invokers;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Router router </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> routers) { </span><span style="color:#6A737D;">// 遍历全部的Router对象</span></span>
<span class="line"><span style="color:#24292E;">        finalInvokers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> router.</span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(finalInvokers, url, invocation);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> finalInvokers;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>了解了 RouterChain 的大致逻辑之后，我们知道<strong>真正进行路由的是 routers 集合中的 Router 对象</strong> 。接下来我们再来看 RouterFactory 这个工厂接口，<strong>RouterFactory 接口是一个扩展接口</strong>，具体定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SPI</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RouterFactory</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Adaptive</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;protocol&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 动态生成的适配器会根据protocol参数选择扩展实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    Router </span><span style="color:#B392F0;">getRouter</span><span style="color:#E1E4E8;">(URL </span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SPI</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RouterFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Adaptive</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;protocol&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 动态生成的适配器会根据protocol参数选择扩展实现</span></span>
<span class="line"><span style="color:#24292E;">    Router </span><span style="color:#6F42C1;">getRouter</span><span style="color:#24292E;">(URL </span><span style="color:#E36209;">url</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>RouterFactory 接口有很多实现类，如下图所示：</p>`,15),y=n("p",null,"RouterFactory 继承关系图",-1),i=n("p",null,[s("下面我们就来深入介绍下每个 RouterFactory 实现类以及对应的 Router 实现对象。"),n("strong",null,"Router 决定了一次 Dubbo 调用的目标服务，Router 接口的每个实现类代表了一个路由规则"),s("，当 Consumer 访问 Provider 时，Dubbo 根据路由规则筛选出合适的 Provider 列表，之后通过负载均衡算法再次进行筛选。Router 接口的继承关系如下图所示：")],-1),u=o(`<p>Router 继承关系图</p><p>接下来我们就开始介绍 RouterFactory 以及 Router 的具体实现。</p><h3 id="conditionrouterfactory-conditionrouter" tabindex="-1">ConditionRouterFactory&amp;ConditionRouter <a class="header-anchor" href="#conditionrouterfactory-conditionrouter" aria-label="Permalink to &quot;ConditionRouterFactory\\&amp;ConditionRouter&quot;">​</a></h3><p>首先来看 ConditionRouterFactory 实现，其扩展名为 condition，在其 getRouter() 方法中会创建 ConditionRouter 对象，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Router </span><span style="color:#B392F0;">getRouter</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConditionRouter</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Router </span><span style="color:#6F42C1;">getRouter</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConditionRouter</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>ConditionRouter 是基于条件表达式的路由实现类</strong>，下面就是一条基于条件表达式的路由规则：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">100</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">192.168</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">150</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">192.168</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">150</span></span></code></pre></div><p>在上述规则中，<code>=&gt;</code>之前的为 Consumer 匹配的条件，该条件中的所有参数会与 Consumer 的 URL 进行对比，当 Consumer 满足匹配条件时，会对该 Consumer 的此次调用执行 <code>=&gt;</code> 后面的过滤规则。</p><p><code>=&gt;</code> 之后为 Provider 地址列表的过滤条件，该条件中的所有参数会和 Provider 的 URL 进行对比，Consumer 最终只拿到过滤后的地址列表。</p><p><strong>如果 Consumer 匹配条件为空，表示 <code>=&gt;</code> 之后的过滤条件对所有 Consumer 生效</strong>，例如：=&gt; host != 192.168.0.150，含义是所有 Consumer 都不能请求 192.168.0.150 这个 Provider 节点。</p><p><strong>如果 Provider 过滤条件为空，表示禁止访问所有 Provider</strong>，例如：host = 192.168.0.100 =&gt;，含义是 192.168.0.100 这个 Consumer 不能访问任何 Provider 节点。</p><p>ConditionRouter 的核心字段有如下几个。</p><ul><li><p>url（URL 类型）：路由规则的 URL，可以从 rule 参数中获取具体的路由规则。</p></li><li><p>ROUTE_PATTERN（Pattern 类型）：用于切分路由规则的正则表达式。</p></li><li><p>priority（int 类型）：路由规则的优先级，用于排序，该字段值越大，优先级越高，默认值为 0。</p></li><li><p>force（boolean 类型）：当路由结果为空时，是否强制执行。如果不强制执行，则路由结果为空的路由规则将会自动失效；如果强制执行，则直接返回空的路由结果。</p></li><li><p>whenCondition（Map&lt;String, MatchPair&gt; 类型）：Consumer 匹配的条件集合，通过解析条件表达式 rule 的 <code>=&gt;</code> 之前半部分，可以得到该集合中的内容。</p></li><li><p>thenCondition（Map&lt;String, MatchPair&gt; 类型）：Provider 匹配的条件集合，通过解析条件表达式 rule 的 <code>=&gt;</code> 之后半部分，可以得到该集合中的内容。</p></li></ul><p>在 ConditionRouter 的构造方法中，会根据 URL 中携带的相应参数初始化 priority、force、enable 等字段，然后从 URL 的 rule 参数中获取路由规则进行解析，具体的解析逻辑是在 init() 方法中实现的，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(String rule) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将路由规则中的&quot;consumer.&quot;和&quot;provider.&quot;字符串清理掉</span></span>
<span class="line"><span style="color:#E1E4E8;">    rule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rule.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;consumer.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;provider.&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 按照&quot;=&gt;&quot;字符串进行分割，得到whenRule和thenRule两部分</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rule.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;=&gt;&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    String whenRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> rule.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, i).</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String thenRule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> rule.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> rule.</span><span style="color:#B392F0;">substring</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析whenRule和thenRule，得到whenCondition和thenCondition两个条件集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">MatchPair</span><span style="color:#E1E4E8;">&gt; when </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(whenRule) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(whenRule) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">MatchPair</span><span style="color:#E1E4E8;">&gt;() </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseRule</span><span style="color:#E1E4E8;">(whenRule);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">MatchPair</span><span style="color:#E1E4E8;">&gt; then </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringUtils.</span><span style="color:#B392F0;">isBlank</span><span style="color:#E1E4E8;">(thenRule) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(thenRule) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseRule</span><span style="color:#E1E4E8;">(thenRule);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.whenCondition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> when;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.thenCondition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> then;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(String rule) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将路由规则中的&quot;consumer.&quot;和&quot;provider.&quot;字符串清理掉</span></span>
<span class="line"><span style="color:#24292E;">    rule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rule.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;consumer.&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;provider.&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 按照&quot;=&gt;&quot;字符串进行分割，得到whenRule和thenRule两部分</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rule.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;=&gt;&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    String whenRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> rule.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, i).</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String thenRule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> rule.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> rule.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析whenRule和thenRule，得到whenCondition和thenCondition两个条件集合</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">MatchPair</span><span style="color:#24292E;">&gt; when </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(whenRule) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(whenRule) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">MatchPair</span><span style="color:#24292E;">&gt;() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseRule</span><span style="color:#24292E;">(whenRule);</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">MatchPair</span><span style="color:#24292E;">&gt; then </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtils.</span><span style="color:#6F42C1;">isBlank</span><span style="color:#24292E;">(thenRule) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(thenRule) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseRule</span><span style="color:#24292E;">(thenRule);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.whenCondition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> when;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.thenCondition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> then;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>whenCondition 和 thenCondition 两个集合中，Key 是条件表达式中指定的参数名称（例如 host = 192.168.0.150 这个表达式中的 host）。ConditionRouter 支持三类参数：</p><ul><li><p>服务调用信息，例如，method、argument 等；</p></li><li><p>URL 本身的字段，例如，protocol、host、port 等；</p></li><li><p>URL 上的所有参数，例如，application 等。</p></li></ul><p>Value 是 MatchPair 对象，包含两个 Set 类型的集合------ matches 和 mismatches。在<strong>使用 MatchPair 进行过滤</strong>的时候，会按照下面四条规则执行。</p><ol><li><p>当 mismatches 集合为空的时候，会逐个遍历 matches 集合中的匹配条件，匹配成功任意一条即会返回 true。这里具体的匹配逻辑以及后续 mismatches 集合中条件的匹配逻辑，都是在 UrlUtils.isMatchGlobPattern() 方法中实现，其中完成了如下操作：如果匹配条件以 &quot;$&quot; 符号开头，则从 URL 中获取相应的参数值进行匹配；当遇到 &quot;<em>&quot; 通配符的时候，会处理&quot;</em>&quot;通配符在匹配条件开头、中间以及末尾三种情况。</p></li><li><p>当 matches 集合为空的时候，会逐个遍历 mismatches 集合中的匹配条件，匹配成功任意一条即会返回 false。</p></li><li><p>当 matches 集合和 mismatches 集合同时不为空时，会优先匹配 mismatches 集合中的条件，成功匹配任意一条规则，就会返回 false；若 mismatches 中的条件全部匹配失败，才会开始匹配 matches 集合，成功匹配任意一条规则，就会返回 true。</p></li><li><p>当上述三个步骤都没有成功匹配时，直接返回 false。</p></li></ol><p>上述流程具体实现在 MatchPair 的 isMatch() 方法中，比较简单，这里就不再展示。</p><p>了解了每个 MatchPair 的匹配流程之后，我们来看<strong>parseRule() 方法是如何解析一条完整的条件表达式，生成对应 MatchPair 的</strong>，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Map</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, MatchPair</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseRule</span><span style="color:#E1E4E8;">(String rule) throws ParseException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">MatchPair</span><span style="color:#E1E4E8;">&gt; condition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">MatchPair</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    MatchPair pair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; values </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 首先，按照ROUTE_PATTERN指定的正则表达式匹配整个条件表达式</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Matcher matcher </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ROUTE_PATTERN.</span><span style="color:#B392F0;">matcher</span><span style="color:#E1E4E8;">(rule);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (matcher.</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">()) { </span><span style="color:#6A737D;">// 遍历匹配的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 每个匹配结果有两部分(分组)，第一部分是分隔符，第二部分是内容</span></span>
<span class="line"><span style="color:#E1E4E8;">        String separator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcher.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        String content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> matcher.</span><span style="color:#B392F0;">group</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (StringUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(separator)) { </span><span style="color:#6A737D;">// ---(1) 没有分隔符，content即为参数名称</span></span>
<span class="line"><span style="color:#E1E4E8;">            pair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MatchPair</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 初始化MatchPair对象，并将其与对应的Key(即content)记录到condition集合中</span></span>
<span class="line"><span style="color:#E1E4E8;">            condition.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(content, pair); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;&amp;&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(separator)) { </span><span style="color:#6A737D;">// ---(4)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// &amp;分隔符表示多个表达式,会创建多个MatchPair对象</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (condition.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(content) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                pair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MatchPair</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                condition.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(content, pair);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                pair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> condition.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(content);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;=&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(separator)) { </span><span style="color:#6A737D;">// ---(2) </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// =以及!=两个分隔符表示KV的分界线</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (pair </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ParseException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;...&quot;&quot;);</span></span>
<span class="line"><span style="color:#9ECBFF;">            }</span></span>
<span class="line"><span style="color:#9ECBFF;">            values = pair.matches;</span></span>
<span class="line"><span style="color:#9ECBFF;">            values.add(content);</span></span>
<span class="line"><span style="color:#9ECBFF;">        }else if (&quot;</span><span style="color:#F97583;">!=</span><span style="color:#9ECBFF;">&quot;.equals(separator)) { // ---(5)</span></span>
<span class="line"><span style="color:#9ECBFF;">            if (pair == null) {</span></span>
<span class="line"><span style="color:#9ECBFF;">                throw new ParseException(&quot;</span><span style="color:#E1E4E8;">...</span><span style="color:#9ECBFF;">&quot;);</span></span>
<span class="line"><span style="color:#9ECBFF;">            }</span></span>
<span class="line"><span style="color:#9ECBFF;">            values = pair.mismatches;</span></span>
<span class="line"><span style="color:#9ECBFF;">            values.add(content);</span></span>
<span class="line"><span style="color:#9ECBFF;">        }else if (&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;.equals(separator)) { // ---(3)</span></span>
<span class="line"><span style="color:#9ECBFF;">            // 逗号分隔符表示有多个Value值</span></span>
<span class="line"><span style="color:#9ECBFF;">            if (values == null || values.isEmpty()) {</span></span>
<span class="line"><span style="color:#9ECBFF;">                throw new ParseException(&quot;</span><span style="color:#E1E4E8;">...</span><span style="color:#9ECBFF;">&quot;);</span></span>
<span class="line"><span style="color:#9ECBFF;">            }</span></span>
<span class="line"><span style="color:#9ECBFF;">            values.add(content);</span></span>
<span class="line"><span style="color:#9ECBFF;">        } else {</span></span>
<span class="line"><span style="color:#9ECBFF;">            throw new ParseException(&quot;</span><span style="color:#E1E4E8;">...</span><span style="color:#9ECBFF;">&quot;);</span></span>
<span class="line"><span style="color:#9ECBFF;">        }</span></span>
<span class="line"><span style="color:#9ECBFF;">    }</span></span>
<span class="line"><span style="color:#9ECBFF;">    return condition;</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, MatchPair</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseRule</span><span style="color:#24292E;">(String rule) throws ParseException {</span></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">MatchPair</span><span style="color:#24292E;">&gt; condition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">MatchPair</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    MatchPair pair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 首先，按照ROUTE_PATTERN指定的正则表达式匹配整个条件表达式</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Matcher matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ROUTE_PATTERN.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(rule);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (matcher.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 遍历匹配的结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 每个匹配结果有两部分(分组)，第一部分是分隔符，第二部分是内容</span></span>
<span class="line"><span style="color:#24292E;">        String separator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        String content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (StringUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(separator)) { </span><span style="color:#6A737D;">// ---(1) 没有分隔符，content即为参数名称</span></span>
<span class="line"><span style="color:#24292E;">            pair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MatchPair</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 初始化MatchPair对象，并将其与对应的Key(即content)记录到condition集合中</span></span>
<span class="line"><span style="color:#24292E;">            condition.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(content, pair); </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(separator)) { </span><span style="color:#6A737D;">// ---(4)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// &amp;分隔符表示多个表达式,会创建多个MatchPair对象</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (condition.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(content) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                pair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MatchPair</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                condition.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(content, pair);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                pair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> condition.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(content);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;=&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(separator)) { </span><span style="color:#6A737D;">// ---(2) </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// =以及!=两个分隔符表示KV的分界线</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pair </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParseException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;...&quot;&quot;);</span></span>
<span class="line"><span style="color:#032F62;">            }</span></span>
<span class="line"><span style="color:#032F62;">            values = pair.matches;</span></span>
<span class="line"><span style="color:#032F62;">            values.add(content);</span></span>
<span class="line"><span style="color:#032F62;">        }else if (&quot;</span><span style="color:#D73A49;">!=</span><span style="color:#032F62;">&quot;.equals(separator)) { // ---(5)</span></span>
<span class="line"><span style="color:#032F62;">            if (pair == null) {</span></span>
<span class="line"><span style="color:#032F62;">                throw new ParseException(&quot;</span><span style="color:#24292E;">...</span><span style="color:#032F62;">&quot;);</span></span>
<span class="line"><span style="color:#032F62;">            }</span></span>
<span class="line"><span style="color:#032F62;">            values = pair.mismatches;</span></span>
<span class="line"><span style="color:#032F62;">            values.add(content);</span></span>
<span class="line"><span style="color:#032F62;">        }else if (&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;.equals(separator)) { // ---(3)</span></span>
<span class="line"><span style="color:#032F62;">            // 逗号分隔符表示有多个Value值</span></span>
<span class="line"><span style="color:#032F62;">            if (values == null || values.isEmpty()) {</span></span>
<span class="line"><span style="color:#032F62;">                throw new ParseException(&quot;</span><span style="color:#24292E;">...</span><span style="color:#032F62;">&quot;);</span></span>
<span class="line"><span style="color:#032F62;">            }</span></span>
<span class="line"><span style="color:#032F62;">            values.add(content);</span></span>
<span class="line"><span style="color:#032F62;">        } else {</span></span>
<span class="line"><span style="color:#032F62;">            throw new ParseException(&quot;</span><span style="color:#24292E;">...</span><span style="color:#032F62;">&quot;);</span></span>
<span class="line"><span style="color:#032F62;">        }</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">    return condition;</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre></div><p>介绍完 parseRule() 方法的实现之后，我们可以再通过下面这个条件表达式示例的解析流程，更深入地体会 parseRule() 方法的工作原理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3.3</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">3</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> method </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;">get </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> host </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.2</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">3</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3.3</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">3</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> method </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;">get </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.2</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">3</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">4</span></span></code></pre></div><p>经过 ROUTE_PATTERN 正则表达式的分组之后，我们得到如下分组：</p>`,25),F=o("<p>Rule 分组示意图</p><p>我们先来看 <code>=&gt;</code> 之前的 Consumer 匹配规则的处理。</p><ol><li><p>分组 1 中，separator 为空字符串，content 为 host 字符串。此时会进入上面示例代码展示的 parseRule() 方法中（1）处的分支，创建 MatchPair 对象，并以 host 为 Key 记录到 condition 集合中。</p></li><li><p>分组 2 中，separator 为 &quot;=&quot; 空字符串，content 为 &quot;2.2.2.2&quot; 字符串。处理该分组时，会进入 parseRule() 方法中（2） 处的分支，在 MatchPair 的 matches 集合中添加 &quot;2.2.2.2&quot; 字符串。</p></li><li><p>分组 3 中，separator 为 &quot;,&quot; 字符串，content 为 &quot;3.3.3.3&quot; 字符串。处理该分组时，会进入 parseRule() 方法中（3）处的分支，继续向 MatchPair 的 matches 集合中添加 &quot;3.3.3.3&quot; 字符串。</p></li><li><p>分组 4 中，separator 为 &quot;&amp;&quot; 字符串，content 为 &quot;method&quot; 字符串。处理该分组时，会进入 parseRule() 方法中（4）处的分支，创建新的 MatchPair 对象，并以 method 为 Key 记录到 condition 集合中。</p></li><li><p>分组 5 中，separator 为 &quot;!=&quot; 字符串，content 为 &quot;get&quot; 字符串。处理该分组时，会进入 parseRule() 方法中（5）处的分支，向步骤 4 新建的 MatchPair 对象中的 mismatches 集合添加 &quot;get&quot; 字符串。</p></li></ol><p>最后，我们得到的 whenCondition 集合如下图所示：</p>",4),d=n("p",null,"whenCondition 集合示意图",-1),g=n("p",null,[s("同理，parseRule() 方法解析上述表达式 "),n("code",null,"=>"),s(" 之后的规则得到的 thenCondition 集合，如下图所示：")],-1),h=o(`<p>thenCondition 集合示意图</p><p>了解了 ConditionRouter 解析规则的流程以及 MatchPair 内部的匹配原则之后，ConditionRouter 中最后一个需要介绍的内容就是它的 route() 方法了。</p><p>ConditionRouter.route() 方法首先会尝试前面创建的 whenCondition 集合，判断此次发起调用的 Consumer 是否符合表达式中 <code>=&gt;</code> 之前的 Consumer 过滤条件，若不符合，直接返回整个 invokers 集合；若符合，则通过 thenCondition 集合对 invokers 集合进行过滤，得到符合 Provider 过滤条件的 Invoker 集合，然后返回给上层调用方。ConditionRouter.route() 方法的核心实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> invokers, URL url, Invocation invocation)</span></span>
<span class="line"><span style="color:#E1E4E8;">        throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 通过enable字段判断当前ConditionRouter对象是否可用</span></span>
<span class="line"><span style="color:#E1E4E8;">    ... </span><span style="color:#6A737D;">// 当前invokers集合为空，则直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">matchWhen</span><span style="color:#E1E4E8;">(url, invocation)) { </span><span style="color:#6A737D;">// 匹配发起请求的Consumer是否符合表达式中=&gt;之前的过滤条件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invokers;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (thenCondition </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 判断=&gt;之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (Invoker&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; invoker </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> invokers) { </span><span style="color:#6A737D;">// 逐个判断Invoker是否符合表达式中=&gt;之后的过滤条件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">matchThen</span><span style="color:#E1E4E8;">(invoker.</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">(), url)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(invoker); </span><span style="color:#6A737D;">// 记录符合条件的Invoker</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (force) { </span><span style="color:#6A737D;">// 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invokers;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> invokers, URL url, Invocation invocation)</span></span>
<span class="line"><span style="color:#24292E;">        throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 通过enable字段判断当前ConditionRouter对象是否可用</span></span>
<span class="line"><span style="color:#24292E;">    ... </span><span style="color:#6A737D;">// 当前invokers集合为空，则直接返回</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">matchWhen</span><span style="color:#24292E;">(url, invocation)) { </span><span style="color:#6A737D;">// 匹配发起请求的Consumer是否符合表达式中=&gt;之前的过滤条件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invokers;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (thenCondition </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 判断=&gt;之后是否存在Provider过滤条件，若不存在则直接返回空集合，表示无Provider可用</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Invoker&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; invoker </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokers) { </span><span style="color:#6A737D;">// 逐个判断Invoker是否符合表达式中=&gt;之后的过滤条件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">matchThen</span><span style="color:#24292E;">(invoker.</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">(), url)) {</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(invoker); </span><span style="color:#6A737D;">// 记录符合条件的Invoker</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (force) { </span><span style="color:#6A737D;">// 在无Invoker符合条件时，根据force决定是返回空集合还是返回全部Invoker</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invokers;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="scriptrouterfactory-scriptrouter" tabindex="-1">ScriptRouterFactory&amp;ScriptRouter <a class="header-anchor" href="#scriptrouterfactory-scriptrouter" aria-label="Permalink to &quot;ScriptRouterFactory\\&amp;ScriptRouter&quot;">​</a></h3><p>ScriptRouterFactory 的扩展名为 script，其 getRouter() 方法中会创建一个 ScriptRouter 对象并返回。</p><p><strong>ScriptRouter 支持 JDK 脚本引擎的所有脚本</strong> ，例如，JavaScript、JRuby、Groovy 等，通过 <code>type=javascript</code> 参数设置脚本类型，缺省为 javascript。下面我们就定义一个 route() 函数进行 host 过滤：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(invokers, invocation, context){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#B392F0;">ArrayList</span><span style="color:#E1E4E8;">(invokers.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> targetHost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#B392F0;">ArrayList</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">	targetHost.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;10.134.108.2&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> invokers.length; i) {  </span><span style="color:#6A737D;">// 遍历Invoker集合</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 判断Invoker的host是否符合条件</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(targetHost.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(invokers[i].</span><span style="color:#B392F0;">getUrl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">())){</span></span>
<span class="line"><span style="color:#E1E4E8;">			result.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(invokers[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(invokers, invocation, context)  </span><span style="color:#6A737D;">// 立即执行route()函数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(invokers, invocation, context){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> java.util.</span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">(invokers.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> targetHost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> java.util.</span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	targetHost.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10.134.108.2&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> invokers.length; i) {  </span><span style="color:#6A737D;">// 遍历Invoker集合</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 判断Invoker的host是否符合条件</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(targetHost.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(invokers[i].</span><span style="color:#6F42C1;">getUrl</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">())){</span></span>
<span class="line"><span style="color:#24292E;">			result.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(invokers[i]);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(invokers, invocation, context)  </span><span style="color:#6A737D;">// 立即执行route()函数</span></span></code></pre></div><p>我们可以将上面这段代码进行编码并作为 rule 参数的值添加到 URL 中，在这个 URL 传入 ScriptRouter 的构造函数时，即可被 ScriptRouter 解析。</p><p>ScriptRouter 的<strong>核心字段</strong>有如下几个。</p><ul><li><p>url（URL 类型）：路由规则的 URL，可以从 rule 参数中获取具体的路由规则。</p></li><li><p>priority（int 类型）：路由规则的优先级，用于排序，该字段值越大，优先级越高，默认值为 0。</p></li><li><p>ENGINES（ConcurrentHashMap&lt;String, ScriptEngine&gt; 类型）：这是一个 static 集合，其中的 Key 是脚本语言的名称，Value 是对应的 ScriptEngine 对象。这里会按照脚本语言的类型复用 ScriptEngine 对象。</p></li><li><p>engine（ScriptEngine 类型）：当前 ScriptRouter 使用的 ScriptEngine 对象。</p></li><li><p>rule（String 类型）：当前 ScriptRouter 使用的具体脚本内容。</p></li><li><p>function（CompiledScript 类型）：根据 rule 这个具体脚本内容编译得到。</p></li></ul><p>在 ScriptRouter 的构造函数中，首先会初始化 url 字段以及 priority 字段（用于排序），然后根据 URL 中的 type 参数初始化 engine、rule 和 function 三个核心字段 ，具体实现如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScriptRouter</span><span style="color:#E1E4E8;">(URL url) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.priority </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url.</span><span style="color:#B392F0;">getParameter</span><span style="color:#E1E4E8;">(PRIORITY_KEY, SCRIPT_ROUTER_DEFAULT_PRIORITY);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据URL中的type参数值，从ENGINES集合中获取对应的ScriptEngine对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    engine </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEngine</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取URL中的rule参数值，即为具体的脚本</span></span>
<span class="line"><span style="color:#E1E4E8;">    rule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRule</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Compilable compilable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Compilable) engine;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 编译rule字段中的脚本，得到function字段</span></span>
<span class="line"><span style="color:#E1E4E8;">    function </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilable.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(rule);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScriptRouter</span><span style="color:#24292E;">(URL url) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.priority </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> url.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(PRIORITY_KEY, SCRIPT_ROUTER_DEFAULT_PRIORITY);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 根据URL中的type参数值，从ENGINES集合中获取对应的ScriptEngine对象</span></span>
<span class="line"><span style="color:#24292E;">    engine </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEngine</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取URL中的rule参数值，即为具体的脚本</span></span>
<span class="line"><span style="color:#24292E;">    rule </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRule</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    Compilable compilable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Compilable) engine;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 编译rule字段中的脚本，得到function字段</span></span>
<span class="line"><span style="color:#24292E;">    function </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compilable.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(rule);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来看 ScriptRouter 对 route() 方法的实现，其中首先会创建调用 function 函数所需的入参，也就是 Bindings 对象，然后调用 function 函数得到过滤后的 Invoker 集合，最后通过 getRoutedInvokers() 方法整理 Invoker 集合得到最终的返回值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">route</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> invokers, URL url, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建Bindings对象作为function函数的入参</span></span>
<span class="line"><span style="color:#E1E4E8;">    Bindings bindings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createBindings</span><span style="color:#E1E4E8;">(invokers, invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (function </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> invokers;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用function函数，并在getRoutedInvokers()方法中整理得到的Invoker集合</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRoutedInvokers</span><span style="color:#E1E4E8;">(function.</span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(bindings));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> Bindings </span><span style="color:#B392F0;">createBindings</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Invoker</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> invokers, Invocation invocation) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Bindings bindings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> engine.</span><span style="color:#B392F0;">createBindings</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 与前面的javascript的示例脚本结合，我们可以看到这里在Bindings中为脚本中的route()函数提供了invokers、Invocation、context三个参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    bindings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;invokers&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(invokers));</span></span>
<span class="line"><span style="color:#E1E4E8;">    bindings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;invocation&quot;</span><span style="color:#E1E4E8;">, invocation);</span></span>
<span class="line"><span style="color:#E1E4E8;">    bindings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;context&quot;</span><span style="color:#E1E4E8;">, RpcContext.</span><span style="color:#B392F0;">getContext</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> bindings;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">route</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> invokers, URL url, Invocation invocation) throws RpcException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建Bindings对象作为function函数的入参</span></span>
<span class="line"><span style="color:#24292E;">    Bindings bindings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createBindings</span><span style="color:#24292E;">(invokers, invocation);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (function </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> invokers;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用function函数，并在getRoutedInvokers()方法中整理得到的Invoker集合</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRoutedInvokers</span><span style="color:#24292E;">(function.</span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(bindings));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Bindings </span><span style="color:#6F42C1;">createBindings</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Invoker</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> invokers, Invocation invocation) {</span></span>
<span class="line"><span style="color:#24292E;">    Bindings bindings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> engine.</span><span style="color:#6F42C1;">createBindings</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 与前面的javascript的示例脚本结合，我们可以看到这里在Bindings中为脚本中的route()函数提供了invokers、Invocation、context三个参数</span></span>
<span class="line"><span style="color:#24292E;">    bindings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;invokers&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(invokers));</span></span>
<span class="line"><span style="color:#24292E;">    bindings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;invocation&quot;</span><span style="color:#24292E;">, invocation);</span></span>
<span class="line"><span style="color:#24292E;">    bindings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;context&quot;</span><span style="color:#24292E;">, RpcContext.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bindings;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时重点介绍了 Router 接口的相关内容。首先我们介绍了 RouterChain 的核心实现以及构建过程，然后讲解了 RouterFactory 接口和 Router 接口中核心方法的功能。接下来，我们还深入分析了<strong>ConditionRouter 对条件路由功能的实现</strong> ，以及<strong>ScriptRouter 对脚本路由功能的实现</strong>。</p><p>下一课时，我们会继续深入介绍剩余的 Router 实现。</p>`,18);function A(C,v,D,R,B,k){const a=t("Image");return e(),r("div",null,[E,l(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/6B/ED/CgqCHl-qOLWAf_G5AACv9PqZOrc667.png"}),s(),y,i,l(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/6B/E2/Ciqc1F-qOL2AAXYIAACMVPC1qW0732.png"}),s(),u,l(a,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/6D/97/CgqCHl-uM9aALLGaAAFMMnXRAPw685.png"}),s(),F,l(a,{alt:"3.png",src:"https://s0.lgstatic.com/i/image/M00/6D/8B/Ciqc1F-uM-OABiPoAADt1lcbl7U975.png"}),s(),d,g,l(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/6D/97/CgqCHl-uM-6AXnrOAAB6hJLFL50095.png"}),s(),h])}const b=p(c,[["render",A]]);export{m as __pageData,b as default};
