import{_ as s,o as a,g as n,Q as l}from"./chunks/framework.f67d7268.js";const F=JSON.parse('{"title":"14熔断之器：如何使用SpringCloudCircuitBreaker实现服务容错？（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4759) 14  熔断之器：如何使用 Spring Cloud Circuit Breaker 实现服务容错？（下）.md","filePath":"posts/backEnd/Spring Cloud 原理与实战_文档/(4759) 14  熔断之器：如何使用 Spring Cloud Circuit Breaker 实现服务容错？（下）.md","lastUpdated":1696682708000}'),p={name:"posts/backEnd/Spring Cloud 原理与实战_文档/(4759) 14  熔断之器：如何使用 Spring Cloud Circuit Breaker 实现服务容错？（下）.md"},o=l(`<h1 id="_14熔断之器-如何使用springcloudcircuitbreaker实现服务容错-下" tabindex="-1">14熔断之器：如何使用SpringCloudCircuitBreaker实现服务容错？（下） <a class="header-anchor" href="#_14熔断之器-如何使用springcloudcircuitbreaker实现服务容错-下" aria-label="Permalink to &quot;14熔断之器：如何使用SpringCloudCircuitBreaker实现服务容错？（下）&quot;">​</a></h1><p>在上一课时中，我们系统介绍了 Hystrix 所提供了服务隔离、服务容错和服务回退功能。我们发现这个框架确实非常强大，能够灵活处理服务容错的各种场景。事实上，业界也存在一批类似 Hystrix 的框架。Spring Cloud 基于这些框架的共性，专门抽象并开发了一个 Spring Cloud Circuit Breaker 框架。在今天的课程中，我们将引入 Spring Cloud Circuit Breaker 框架，并给出使用这个框架来满足各种服务容错需求的实现方法。</p><h3 id="理解-spring-cloud-circuit-breaker-中的熔断器抽象" tabindex="-1">理解 Spring Cloud Circuit Breaker 中的熔断器抽象 <a class="header-anchor" href="#理解-spring-cloud-circuit-breaker-中的熔断器抽象" aria-label="Permalink to &quot;理解 Spring Cloud Circuit Breaker 中的熔断器抽象&quot;">​</a></h3><p>从命名上看，Spring Cloud Circuit Breaker 是对熔断器抽象，内部集成了多款不同的熔断器实现工具，并基于这些工具提取了统一的 API 供应用程序进行调用。</p><p>为了在应用程序中创建一个熔断器，我们可以使用 Spring Cloud Circuit Breaker 中的工厂类 CircuitBreakerFactory，该工厂类的定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CircuitBreakerFactory</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">CONF</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">CONFB</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> ConfigBuilder&lt;</span><span style="color:#F97583;">CONF</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractCircuitBreakerFactory</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">CONF</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">CONFB</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> CircuitBreaker </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CircuitBreakerFactory</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">CONF</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">CONFB</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> ConfigBuilder&lt;</span><span style="color:#D73A49;">CONF</span><span style="color:#24292E;">&gt;&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractCircuitBreakerFactory</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">CONF</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">CONFB</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> CircuitBreaker </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到这是一个抽象类，只有一个 create 方法用来创建一个 CircuitBreaker。CircuitBreaker 是一个接口，约定了熔断器应该具有的功能，该接口定义如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CircuitBreaker</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Supplier&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">toRun</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(toRun, throwable </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NoFallbackAvailableException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No fallback available.&quot;</span><span style="color:#E1E4E8;">, throwable);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Supplier&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">toRun</span><span style="color:#E1E4E8;">, Function&lt;</span><span style="color:#F97583;">Throwable</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">fallback</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CircuitBreaker</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Supplier&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">toRun</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(toRun, throwable </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoFallbackAvailableException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No fallback available.&quot;</span><span style="color:#24292E;">, throwable);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Supplier&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">toRun</span><span style="color:#24292E;">, Function&lt;</span><span style="color:#D73A49;">Throwable</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">fallback</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里用到了函数式编程的一些语法，但我们从方法定义上还是可以明显看出包含了 run() 方法和 fallback() 方法。其中的 Supplier 包含了你希望运行在熔断器中的业务代码，而 Function 则代表着回退方法。对比上一课时中介绍的 HystrixCommand，我们发现两者之间存在明显的对应关系。</p><p>在 Spring Cloud Circuit Breaker 中，分别针对 Hystrix、Resilience4j、Sentinel 和 Spring Retry 这四款框架提供了 CircuitBreakerFactory 抽象类的子类。如果我们想要在应用程序中使用这些工具，首先需要引入相关的 Maven 依赖。以 Resilience4j 为例，对应的 Maven 依赖如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;                &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-circuitbreaker-resilience4j&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;                &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-circuitbreaker-resilience4j&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>不过有一点需要注意，Hystrix 对应的 Maven 依赖名称并不是像其他三个框架一样是在&quot;spring-cloud-starter-circuitbreaker-&quot;之后添加具体的框架名称，而是使用如下所示的依赖关系：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-cloud-starter-netflix-hystrix&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-netflix-hystrix&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>一旦在代码工程的类路径中添加了 starter，系统就会自动创建 CircuitBreaker。也就是说 CircuitBreakerFactory.create 方法会实例化对应框架的一个 CircuitBreaker 实例。</p><p>在引入具体的开发框架之后，下一步工作就是对它们进行配置。在 CircuitBreakerFactory 的父类 AbstractCircuitBreakerFactory 中，我们发现了如下两个抽象方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//针对某一个 id 创建配置构造器</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> CONFB </span><span style="color:#B392F0;">configBuilder</span><span style="color:#E1E4E8;">(String id);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">//为熔断器配置默认属性</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">abstract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureDefault</span><span style="color:#E1E4E8;">(Function</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, CONF</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> defaultConfiguration);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//针对某一个 id 创建配置构造器</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> CONFB </span><span style="color:#6F42C1;">configBuilder</span><span style="color:#24292E;">(String id);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">//为熔断器配置默认属性</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureDefault</span><span style="color:#24292E;">(Function</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, CONF</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> defaultConfiguration);</span></span></code></pre></div><p>这里用到了大量的泛型定义，我们可以猜想，在这两个抽象方法的背后，Spring Cloud Circuit Breaker 会针对不同的第三方框架提供了不同的配置实现过程。我们在后续内容中会基于具体的框架对这一过程做展开讨论，首当其冲的就是 Hystrix 框架。</p><h3 id="使用-spring-cloud-circuit-breaker-集成-hystrix" tabindex="-1">使用 Spring Cloud Circuit Breaker 集成 Hystrix <a class="header-anchor" href="#使用-spring-cloud-circuit-breaker-集成-hystrix" aria-label="Permalink to &quot;使用 Spring Cloud Circuit Breaker 集成 Hystrix&quot;">​</a></h3><p>让我们回到 Hystrix，来看看在 Spring Cloud Circuit Breaker 中是如何使用统一编程模式集成 Hystrix。</p><h4 id="理解-hystrixcircuitbreakerfactory-和-hystrixcircuitbreaker" tabindex="-1">理解 HystrixCircuitBreakerFactory 和 HystrixCircuitBreaker <a class="header-anchor" href="#理解-hystrixcircuitbreakerfactory-和-hystrixcircuitbreaker" aria-label="Permalink to &quot;理解 HystrixCircuitBreakerFactory 和 HystrixCircuitBreaker&quot;">​</a></h4><p>我们首先关注实现了 CircuitBreaker 接口的 HystrixCircuitBreaker 类，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HystrixCircuitBreaker</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CircuitBreaker</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> HystrixCommand.Setter setter;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HystrixCircuitBreaker</span><span style="color:#E1E4E8;">(HystrixCommand.Setter </span><span style="color:#FFAB70;">setter</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.setter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> setter;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; T </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(Supplier&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">toRun</span><span style="color:#E1E4E8;">, Function&lt;</span><span style="color:#F97583;">Throwable</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">fallback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        HystrixCommand&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; command </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HystrixCommand&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt;(setter) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> toRun.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> T </span><span style="color:#B392F0;">getFallback</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fallback.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getExecutionException</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> command.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HystrixCircuitBreaker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CircuitBreaker</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> HystrixCommand.Setter setter;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HystrixCircuitBreaker</span><span style="color:#24292E;">(HystrixCommand.Setter </span><span style="color:#E36209;">setter</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.setter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> setter;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; T </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(Supplier&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">toRun</span><span style="color:#24292E;">, Function&lt;</span><span style="color:#D73A49;">Throwable</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">fallback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        HystrixCommand&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; command </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HystrixCommand&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;(setter) {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> toRun.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getFallback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fallback.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getExecutionException</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> command.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>不难想象，这里应该构建了一个 HystrixCommand 对象，并在该对象原有的 run 和 getFallback 方法中封装了 CircuitBreaker 中的统一方法调用，而最终实现熔断操作的还是 Hystrix 原生的 HystrixCommand。</p><p>然后，我们接着来看 HystrixCircuitBreakerFactory，这个类的实现过程也简洁明了，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HystrixCircuitBreakerFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">CircuitBreakerFactory</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">HystrixCommand</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HystrixCircuitBreakerFactory</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">HystrixConfigBuilder</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//实现默认配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> Function&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HystrixCommand</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;">&gt; defaultConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> HystrixCommand.Setter</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">withGroupKey</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    HystrixCommandGroupKey.Factory.</span><span style="color:#B392F0;">asKey</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSimpleName</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">andCommandKey</span><span style="color:#E1E4E8;">(HystrixCommandKey.Factory.</span><span style="color:#B392F0;">asKey</span><span style="color:#E1E4E8;">(id));</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureDefault</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            Function&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">HystrixCommand</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">defaultConfiguration</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.defaultConfiguration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultConfiguration;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> HystrixConfigBuilder </span><span style="color:#B392F0;">configBuilder</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HystrixConfigBuilder</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//创建熔断器</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> HystrixCircuitBreaker </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">hasText</span><span style="color:#E1E4E8;">(id, </span><span style="color:#9ECBFF;">&quot;A CircuitBreaker must have an id.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        HystrixCommand.Setter setter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getConfigurations</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">computeIfAbsent</span><span style="color:#E1E4E8;">(id,</span></span>
<span class="line"><span style="color:#E1E4E8;">                defaultConfiguration);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HystrixCircuitBreaker</span><span style="color:#E1E4E8;">(setter);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HystrixConfigBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AbstractHystrixConfigBuilder</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">HystrixCommand</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">Setter</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HystrixConfigBuilder</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> HystrixCommand.Setter </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> HystrixCommand.Setter.</span><span style="color:#B392F0;">withGroupKey</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getGroupKey</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">andCommandKey</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getCommandKey</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">andCommandPropertiesDefaults</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getCommandPropertiesSetter</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HystrixCircuitBreakerFactory</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">CircuitBreakerFactory</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">HystrixCommand</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HystrixCircuitBreakerFactory</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">HystrixConfigBuilder</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//实现默认配置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Function&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HystrixCommand</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;">&gt; defaultConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> HystrixCommand.Setter</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">withGroupKey</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    HystrixCommandGroupKey.Factory.</span><span style="color:#6F42C1;">asKey</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSimpleName</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">andCommandKey</span><span style="color:#24292E;">(HystrixCommandKey.Factory.</span><span style="color:#6F42C1;">asKey</span><span style="color:#24292E;">(id));</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureDefault</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            Function&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">HystrixCommand</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">defaultConfiguration</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultConfiguration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultConfiguration;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> HystrixConfigBuilder </span><span style="color:#6F42C1;">configBuilder</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HystrixConfigBuilder</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//创建熔断器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> HystrixCircuitBreaker </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Assert.</span><span style="color:#6F42C1;">hasText</span><span style="color:#24292E;">(id, </span><span style="color:#032F62;">&quot;A CircuitBreaker must have an id.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        HystrixCommand.Setter setter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getConfigurations</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">computeIfAbsent</span><span style="color:#24292E;">(id,</span></span>
<span class="line"><span style="color:#24292E;">                defaultConfiguration);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HystrixCircuitBreaker</span><span style="color:#24292E;">(setter);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HystrixConfigBuilder</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractHystrixConfigBuilder</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">HystrixCommand</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Setter</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HystrixConfigBuilder</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> HystrixCommand.Setter </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> HystrixCommand.Setter.</span><span style="color:#6F42C1;">withGroupKey</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getGroupKey</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">andCommandKey</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getCommandKey</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">andCommandPropertiesDefaults</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getCommandPropertiesSetter</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码基本就是对原有 HystrixCommand 中关于服务分组等属性的简单封装，你可以结合上一课时的内容做一些回顾。</p><h4 id="使用-hystrixcircuitbreakerfactory-设置默认属性" tabindex="-1">使用 HystrixCircuitBreakerFactory 设置默认属性 <a class="header-anchor" href="#使用-hystrixcircuitbreakerfactory-设置默认属性" aria-label="Permalink to &quot;使用 HystrixCircuitBreakerFactory 设置默认属性&quot;">​</a></h4><p>在应用程序中为熔断器创建默认配置，我们可以使用 Spring Cloud Circuit Breaker 提供的 Customizer工具类。通过传入一个 HystrixCircuitBreakerFactory 对象，然后调用它的 configureDefault 方法就可以构建一个 Customizer 实例。示例代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Customizer</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">HystrixCircuitBreakerFactory</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defaultConfig</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> factory </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">configureDefault</span><span style="color:#E1E4E8;">(id </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> HystrixCommand.Setter</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">withGroupKey</span><span style="color:#E1E4E8;">(HystrixCommandGroupKey.Factory.</span><span style="color:#B392F0;">asKey</span><span style="color:#E1E4E8;">(id))</span></span>
<span class="line"><span style="color:#E1E4E8;">             .</span><span style="color:#B392F0;">andCommandPropertiesDefaults</span><span style="color:#E1E4E8;">(HystrixCommandProperties.</span><span style="color:#B392F0;">Setter</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withExecutionTimeoutInMilliseconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Customizer</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">HystrixCircuitBreakerFactory</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defaultConfig</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> factory </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">configureDefault</span><span style="color:#24292E;">(id </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> HystrixCommand.Setter</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">withGroupKey</span><span style="color:#24292E;">(HystrixCommandGroupKey.Factory.</span><span style="color:#6F42C1;">asKey</span><span style="color:#24292E;">(id))</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">andCommandPropertiesDefaults</span><span style="color:#24292E;">(HystrixCommandProperties.</span><span style="color:#6F42C1;">Setter</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withExecutionTimeoutInMilliseconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码比较容易理解，我们看到了熟悉的服务分组键 GroupKey，以及 Hystrix 命令属性 CommandProperties。这里同样通过 HystrixCommandProperties 的 withExecutionTimeoutInMilliseconds 方法将默认超时时间设置为 3000 毫秒。</p><p>以上方法一般推荐放置在 Spring Boot 的启动类中，这样相当于对 HystrixCircuitBreakerFactory 进行了初始化，接下来就可以使用它来完成服务熔断操作了。</p><h3 id="使用-hystrix-实现服务熔断" tabindex="-1">使用 Hystrix 实现服务熔断 <a class="header-anchor" href="#使用-hystrix-实现服务熔断" aria-label="Permalink to &quot;使用 Hystrix 实现服务熔断&quot;">​</a></h3><p>使用 HystrixCircuitBreakerFactory 实现服务熔断的开发流程比较固化。首先，我们需要通过 HystrixCircuitBreakerFactory 创建一个runCircuitBreaker 实例，然后实现具体的业务逻辑并提供一个回退函数，最后执行 CircuitBreaker 的 run 方法。示例代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//创建 CircuitBreaker</span></span>
<span class="line"><span style="color:#E1E4E8;">CircuitBreaker hystrixCircuitBreaker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> circuitBreakerFactory.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;springhealth&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//封装业务逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">Supplier&lt;</span><span style="color:#F97583;">UserMapper</span><span style="color:#E1E4E8;">&gt; supplier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> userClient.</span><span style="color:#B392F0;">getUserByUserName</span><span style="color:#E1E4E8;">(userName);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">//初始化回退函数</span></span>
<span class="line"><span style="color:#E1E4E8;">Function&lt;</span><span style="color:#F97583;">Throwable</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">UserMapper</span><span style="color:#E1E4E8;">&gt; fallback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     UserMapper fallbackUser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserMapper</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;no_user&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;not_existed_user&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fallbackUser;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//执行业务逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">hystrixCircuitBreaker.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(supplier, fallback);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//创建 CircuitBreaker</span></span>
<span class="line"><span style="color:#24292E;">CircuitBreaker hystrixCircuitBreaker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> circuitBreakerFactory.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;springhealth&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//封装业务逻辑</span></span>
<span class="line"><span style="color:#24292E;">Supplier&lt;</span><span style="color:#D73A49;">UserMapper</span><span style="color:#24292E;">&gt; supplier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> userClient.</span><span style="color:#6F42C1;">getUserByUserName</span><span style="color:#24292E;">(userName);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">//初始化回退函数</span></span>
<span class="line"><span style="color:#24292E;">Function&lt;</span><span style="color:#D73A49;">Throwable</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">UserMapper</span><span style="color:#24292E;">&gt; fallback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     UserMapper fallbackUser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserMapper</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;no_user&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;not_existed_user&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fallbackUser;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//执行业务逻辑</span></span>
<span class="line"><span style="color:#24292E;">hystrixCircuitBreaker.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(supplier, fallback);</span></span></code></pre></div><p>我们可以把上述示例代码进行调整并嵌入到各种业务场景中。</p><h3 id="使用-spring-cloud-circuit-breaker-集成-resilience4j" tabindex="-1">使用 Spring Cloud Circuit Breaker 集成 Resilience4j <a class="header-anchor" href="#使用-spring-cloud-circuit-breaker-集成-resilience4j" aria-label="Permalink to &quot;使用 Spring Cloud Circuit Breaker 集成 Resilience4j&quot;">​</a></h3><p>介绍完 Hystrix，我们接下来再来看另一个非常主流的熔断器实现工具 Resilience4j。</p><h4 id="resilience4j-基础" tabindex="-1">Resilience4j 基础 <a class="header-anchor" href="#resilience4j-基础" aria-label="Permalink to &quot;Resilience4j 基础&quot;">​</a></h4><p>Resilience4j 是一款轻量级的服务容错库，其设计灵感正是来自 Hystrix，我们先来看一下 Resilience4j 中定义的几个核心组件。</p><p>当使用 Resilience4j 时，同样需要对熔断器进行配置。而这样配置信息同样分为两部分，一部分是默认配置，一部分是专属于某一个服务的特定配置。典型的 Resilience4j 配置项如下所示：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">resilience4j</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  circuitbreaker</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    configs</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">default:</span></span>
<span class="line"><span style="color:#E1E4E8;">        ringBufferSizeInClosedState</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> # 熔断器关闭时的缓冲区大小</span></span>
<span class="line"><span style="color:#E1E4E8;">        ringBufferSizeInHalfOpenState</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> # 熔断器半开时的缓冲区大小</span></span>
<span class="line"><span style="color:#E1E4E8;">        waitDurationInOpenState</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> # 熔断器从打开到半开需要的时间</span></span>
<span class="line"><span style="color:#E1E4E8;">        failureRateThreshold</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;"> # 熔断器打开的失败阈值</span></span>
<span class="line"><span style="color:#E1E4E8;">        eventConsumerBufferSize</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> # 事件缓冲区大小</span></span>
<span class="line"><span style="color:#E1E4E8;">        recordExceptions</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> # 记录的异常</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> com.example.resilience4j.exceptions.</span><span style="color:#79B8FF;">BusinessBException</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> com.example.resilience4j.exceptions.</span><span style="color:#79B8FF;">BusinessAException</span></span>
<span class="line"><span style="color:#E1E4E8;">        ignoreExceptions</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> # 忽略的异常</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> com.example.resilience4j.exceptions.</span><span style="color:#79B8FF;">BusinessAException</span></span>
<span class="line"><span style="color:#E1E4E8;">    instances</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      userCircuitBreaker</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        baseConfig</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span></span>
<span class="line"><span style="color:#E1E4E8;">      deviceCircuitBreaker</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        baseConfig</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span></span>
<span class="line"><span style="color:#E1E4E8;">        waitDurationInOpenState</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5000</span></span>
<span class="line"><span style="color:#E1E4E8;">        failureRateThreshold</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">resilience4j</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  circuitbreaker</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    configs</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">        ringBufferSizeInClosedState</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> # 熔断器关闭时的缓冲区大小</span></span>
<span class="line"><span style="color:#24292E;">        ringBufferSizeInHalfOpenState</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> # 熔断器半开时的缓冲区大小</span></span>
<span class="line"><span style="color:#24292E;">        waitDurationInOpenState</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> # 熔断器从打开到半开需要的时间</span></span>
<span class="line"><span style="color:#24292E;">        failureRateThreshold</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> # 熔断器打开的失败阈值</span></span>
<span class="line"><span style="color:#24292E;">        eventConsumerBufferSize</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> # 事件缓冲区大小</span></span>
<span class="line"><span style="color:#24292E;">        recordExceptions</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> # 记录的异常</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> com.example.resilience4j.exceptions.</span><span style="color:#005CC5;">BusinessBException</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> com.example.resilience4j.exceptions.</span><span style="color:#005CC5;">BusinessAException</span></span>
<span class="line"><span style="color:#24292E;">        ignoreExceptions</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> # 忽略的异常</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> com.example.resilience4j.exceptions.</span><span style="color:#005CC5;">BusinessAException</span></span>
<span class="line"><span style="color:#24292E;">    instances</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">      userCircuitBreaker</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        baseConfig</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span></span>
<span class="line"><span style="color:#24292E;">      deviceCircuitBreaker</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        baseConfig</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span></span>
<span class="line"><span style="color:#24292E;">        waitDurationInOpenState</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span></span>
<span class="line"><span style="color:#24292E;">        failureRateThreshold</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span></code></pre></div><p>可以看到这里，我们先对<strong>全局熔断器</strong>设置好一系列的默认配置。针对不同的业务服务，我们可以配置多个熔断器实例，并对这些实例使用不同的配置或者直接覆盖默认配置。在上述配置项中，我们初始化了两个服务级的 Circuit Breaker 实例 userCircuitBreaker 和 deviceCircuitBreaker，分别作用于 user-service 和 device-service。其中，userCircuitBreaker 完全使用的是默认配置，而 deviceCircuitBreaker 对 waitDurationInOpenState 和 failureRateThreshold 这两个配置项做了覆盖。</p><p>在 Resilience4j 中，存在一个熔断器注册器 CircuitBreakerRegistry。上述配置项会帮我们把 userCircuitBreaker 和 deviceCircuitBreaker 自动注册到这个 CircuitBreakerRegistry 中。而在应用程序中，通过指定熔断器名称就可以从 CircuitBreakerRegistry 中获取熔断器，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">CircuitBreaker circuitBreaker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> circuitBreakerRegistry.</span><span style="color:#B392F0;">circuitBreaker</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;userCircuitBreaker&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">CircuitBreaker circuitBreaker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> circuitBreakerRegistry.</span><span style="color:#6F42C1;">circuitBreaker</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userCircuitBreaker&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>一旦获取了 CircuitBreaker 对象，接下来就是通过该对象所提供的 executeSupplier 方法或 executeCheckedSupplier 方法来执行业务代码，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">circuitBreaker.</span><span style="color:#B392F0;">executeCheckedSupplier</span><span style="color:#E1E4E8;">(userClient</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getUser);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">circuitBreaker.</span><span style="color:#6F42C1;">executeCheckedSupplier</span><span style="color:#24292E;">(userClient</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getUser);</span></span></code></pre></div><p>如果需要对业务代码执行回退，在 Resilience4j 中的实现过程会相对复杂一点。我们需要使用包装器方法 decorateCheckedSupplier，然后再使用 Try.of().recover() 方法进行降级处理，代码示例如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">CircuitBreaker circuitBreaker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> circuitBreakerRegistry.</span><span style="color:#B392F0;">circuitBreaker</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;userCircuitBreaker&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">CheckedFunction0&lt;</span><span style="color:#F97583;">UserMapper</span><span style="color:#E1E4E8;">&gt; checkedSupplier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CircuitBreaker.</span></span>
<span class="line"><span style="color:#B392F0;">decorateCheckedSupplier</span><span style="color:#E1E4E8;">(circuitBreaker, userClient</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getUser);</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Try&lt;</span><span style="color:#F97583;">UserMapper</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Try.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(checkedSupplier).</span></span>
<span class="line"><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">recover</span><span style="color:#E1E4E8;">(throwable </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserMapper fallbackUser </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserMapper</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0L</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;no_user&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;not_existed_user&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fallbackUser;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">CircuitBreaker circuitBreaker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> circuitBreakerRegistry.</span><span style="color:#6F42C1;">circuitBreaker</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userCircuitBreaker&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">CheckedFunction0&lt;</span><span style="color:#D73A49;">UserMapper</span><span style="color:#24292E;">&gt; checkedSupplier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CircuitBreaker.</span></span>
<span class="line"><span style="color:#6F42C1;">decorateCheckedSupplier</span><span style="color:#24292E;">(circuitBreaker, userClient</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getUser);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Try&lt;</span><span style="color:#D73A49;">UserMapper</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Try.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(checkedSupplier).</span></span>
<span class="line"><span style="color:#24292E;">.</span><span style="color:#6F42C1;">recover</span><span style="color:#24292E;">(throwable </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    UserMapper fallbackUser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserMapper</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;no_user&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;not_existed_user&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fallbackUser;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><p>至此我们演示了基于 Java 代码的方式来使用 Resilience4j，但 Resilience4j 也提供了 @CircuitBreaker 注解。该注解类似 Hystrix 中的 @HystrixCommand 注解。使用方式上也比较类似，一般只需要指定熔断器的名称以及回退方法即可，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">CircuitBreaker</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;userCircuitBreaker&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">fallbackMethod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;getUserFallback&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CircuitBreaker</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userCircuitBreaker&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">fallbackMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;getUserFallback&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="使用-resilience4j-实现服务熔断" tabindex="-1">使用 Resilience4j 实现服务熔断 <a class="header-anchor" href="#使用-resilience4j-实现服务熔断" aria-label="Permalink to &quot;使用 Resilience4j 实现服务熔断&quot;">​</a></h4><p>现在，让我们回到 Spring Cloud Circuit Breaker，看看该框架如何对 Resilience4j 的使用过程进行封装和集成。</p><p>首先，我们同样需要构建一个 Customizer 实例，来初始化对 Resilience4j 的配置，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Customizer</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Resilience4JCircuitBreakerFactory</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defaultCustomizer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> factory </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> factory.</span><span style="color:#B392F0;">configureDefault</span><span style="color:#E1E4E8;">(id </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Resilience4JConfigBuilder</span><span style="color:#E1E4E8;">(id)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">circuitBreakerConfig</span><span style="color:#E1E4E8;">(CircuitBreakerConfig.</span><span style="color:#B392F0;">ofDefaults</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Customizer</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Resilience4JCircuitBreakerFactory</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defaultCustomizer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> factory </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">configureDefault</span><span style="color:#24292E;">(id </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Resilience4JConfigBuilder</span><span style="color:#24292E;">(id)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">circuitBreakerConfig</span><span style="color:#24292E;">(CircuitBreakerConfig.</span><span style="color:#6F42C1;">ofDefaults</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述代码似曾相识，但这里的 Customizer 中包装的是 Resilience4JCircuitBreakerFactory 工厂类。同时，这里也构建了一个 Resilience4JConfigBuilder 用来完成与 Resilience4j 相关配置的构建工作。</p><p>而针对 Resilience4JCircuitBreakerFactory 的使用方法，我们会发现与 HystrixCircuitBreakerFactory 是完全一致的。我们也是先通过 Resilience4JCircuitBreakerFactory 创建 CircuitBreaker，然后封装业务逻辑并初始化回调函数，最后通过 CircuitBreaker 的 run 方法执行业务逻辑。相关代码不再重复展开，这种实现方式也是 Spring Cloud Circuit Breaker 作为一个平台化框架提供统一 API 的价值所在。</p><h3 id="服务容错集成-api-网关" tabindex="-1">服务容错集成 API 网关 <a class="header-anchor" href="#服务容错集成-api-网关" aria-label="Permalink to &quot;服务容错集成 API 网关&quot;">​</a></h3><p>最后，我们还是有必要提在 API 网关中集成服务容错机制的实现方法。我们在前面几个课时中系统介绍了 Netflix Zuul 和 Spring Cloud Gateway 这两款 API 网关实现工具，它们都可以完成与 Hystrix 的无缝集成。</p><p>事实上，Hystrix 集成 API 网关唯一所要做的事情就是<strong>在网关的配置文件中添加与 Hystrix 相关的配置项</strong>即可。这里以常见的设置服务访问超时时间的场景为例，给出 Hystrix 配置项，如下所示：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">hystrix:</span></span>
<span class="line"><span style="color:#E1E4E8;">  command:</span></span>
<span class="line"><span style="color:#E1E4E8;">    default:</span></span>
<span class="line"><span style="color:#E1E4E8;">       execution:</span></span>
<span class="line"><span style="color:#E1E4E8;">          isolation:</span></span>
<span class="line"><span style="color:#E1E4E8;">             thread:</span></span>
<span class="line"><span style="color:#E1E4E8;">	            timeoutInMilliseconds: 5000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">hystrix:</span></span>
<span class="line"><span style="color:#24292E;">  command:</span></span>
<span class="line"><span style="color:#24292E;">    default:</span></span>
<span class="line"><span style="color:#24292E;">       execution:</span></span>
<span class="line"><span style="color:#24292E;">          isolation:</span></span>
<span class="line"><span style="color:#24292E;">             thread:</span></span>
<span class="line"><span style="color:#24292E;">	            timeoutInMilliseconds: 5000</span></span></code></pre></div><p>显然，上述配置信息的效果就是覆写 Hystrix 的默认超时时间为 5000 毫秒。请注意，以上配置项对经由 API 网关中的所有服务均生效。如果我们想要设置具体某一个服务（例如 userservice）的 Hystrix 超时时间，把&quot;hystrix.command.default&quot;段改为&quot;hystrix.command.userservice&quot;即可。</p><p>对于 API 而言，无论是 Netflix Zuul 还是 Spring Cloud Gateway，上述配置项都是一样的。你可以自己进行尝试使用。</p><h3 id="小结与预告" tabindex="-1">小结与预告 <a class="header-anchor" href="#小结与预告" aria-label="Permalink to &quot;小结与预告&quot;">​</a></h3><p>本课时对 Spring Cloud Circuit Breaker 框架进行了展开，并基于该框架重构了上一课时中针对 Hystrix 的使用方法。然后，我们引入了另一个主流的熔断器框架 Resilience4j，并同样基于 Spring Cloud Circuit Breaker 所提供的统一 API 完成了熔断器实现。同时，在结尾部分，我们还给出了 Hystrix 集成 API 网关的配置方法。作为对主流几款熔断器实现技术的统一抽象和封装，Spring Cloud Circuit Breaker 的设计和实现过程值得我们借鉴。</p><p>这里给你留一道思考题：Spring Cloud Circuit Breaker 是如何对各种不同的 Circuit Breaker 的使用方法进行统一抽象的？</p><p>讲完 Spring Cloud Circuit Breaker 的使用方法，我们有必要对熔断器的实现原理做一定的展开。作为一款强大而完善的熔断器工具，Hystrix 内部使用了滑动窗口机制来对运行时度量数据进行采集和计算，从而实现自动熔断。下一课时，就让我们继续围绕 Hystrix 的内部结构和实现机制展开深入分析。</p>`,66),e=[o];function r(t,c,E,y,i,u){return a(),n("div",null,e)}const C=s(p,[["render",r]]);export{F as __pageData,C as default};
