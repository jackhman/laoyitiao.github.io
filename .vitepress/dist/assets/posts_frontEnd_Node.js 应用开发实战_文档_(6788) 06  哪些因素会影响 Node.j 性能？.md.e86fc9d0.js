import{_ as o,D as e,o as t,g as r,J as l,h as a,Q as p,m as s}from"./chunks/framework.f67d7268.js";const b=JSON.parse('{"title":"06哪些因素会影响Node.j性能？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/Node.js 应用开发实战_文档/(6788) 06  哪些因素会影响 Node.j 性能？.md","filePath":"posts/frontEnd/Node.js 应用开发实战_文档/(6788) 06  哪些因素会影响 Node.j 性能？.md","lastUpdated":1696682708000}'),c={name:"posts/frontEnd/Node.js 应用开发实战_文档/(6788) 06  哪些因素会影响 Node.j 性能？.md"},E=p(`<h1 id="_06哪些因素会影响node-j性能" tabindex="-1">06哪些因素会影响Node.j性能？ <a class="header-anchor" href="#_06哪些因素会影响node-j性能" aria-label="Permalink to &quot;06哪些因素会影响Node.j性能？&quot;">​</a></h1><p>Node.js 作为后台服务性能是非常关键的一点，而影响 Node.js 的性能不仅仅要考虑其本身的因素，还应该考虑所在服务器的一些因素。前面我们介绍的 Node.js 的事件循环机制和 cluster 模式就是一种 Node.js 潜在的内在因素，而网络 I/O 、磁盘 I/O 以及其他内存、句柄的一些问题则是因为服务器的资源因素导致的性能问题。本讲就详细地分析影响其性能的因素原因，以及部分的优化解决方案。</p><h3 id="代码逻辑" tabindex="-1">代码逻辑 <a class="header-anchor" href="#代码逻辑" aria-label="Permalink to &quot;代码逻辑&quot;">​</a></h3><p>影响性能的一个最大的原因就是在写 Node.js 代码时，没有注重性能影响问题，接下来我们就从三个方面来分析下到底哪些代码会出现性能影响。</p><h4 id="_1-cpu-密集型计算" tabindex="-1">1.CPU 密集型计算 <a class="header-anchor" href="#_1-cpu-密集型计算" aria-label="Permalink to &quot;1.CPU 密集型计算&quot;">​</a></h4><p>CPU 负责了程序的运行和业务逻辑的处理，而 CPU 密集型表示的主要是 <strong>CPU 承载了比较复杂的运算</strong>。</p><p>在 Node.js 中由于主线程是单线程的（这部分知识点，在<a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=694#/detail/pc?id=6783" target="_blank" rel="noreferrer">《01 | 事件循环：高性能到底是如何做到的？》</a>中已经非常详细地讲解了），无论是主线程逻辑，还是回调处理逻辑，最终都是在主线程处理，那么如果该线程一直在处理复杂的计算，其他请求就无法再次进来，也就是单个用户就可以阻塞所有用户的请求。因此保持主线程的通畅是非常关键的。</p><p>在 Node.js 中有以下几种情况，会影响到主线程的运行，应该主动避免：</p><ul><li><p><strong>大的数据循环</strong>，比如没有利用好数据流，一次性处理非常大的数组；</p></li><li><p><strong>字符串处理转化</strong>，比如加解密、字符串序列化等；</p></li><li><p><strong>图片</strong> 、<strong>视频的计算处理</strong>，比如对图片进行裁剪、缩放或者切割等。</p></li></ul><p>接下来举个实际例子，假设我们现在有 2 个功能：</p><ul><li><p>大数组的循环；</p></li><li><p>一个非常简单的 Hello World 输出。</p></li></ul><p>再来看下因为大计算的逻辑如何影响了其他逻辑的处理，代码如下（请注意这里会应用 MSVC 框架来实现，因此我们只看 Controller 部分逻辑）：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Controller</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../core/controller&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(res, req);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 复杂运算</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">bad</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;">10000000000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resApi</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;success&#39;</span><span style="color:#E1E4E8;">, {</span><span style="color:#9ECBFF;">&#39;sum&#39;</span><span style="color:#E1E4E8;"> : sum});</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 正常请求</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">normal</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resApi</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;good&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello world&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Test;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Controller</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../core/controller&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">req</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(res, req);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 复杂运算</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">bad</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">10000000000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resApi</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;success&#39;</span><span style="color:#24292E;">, {</span><span style="color:#032F62;">&#39;sum&#39;</span><span style="color:#24292E;"> : sum});</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 正常请求</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">normal</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resApi</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;good&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello world&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Test;</span></span></code></pre></div><p>这段代码中 bad 是一个复杂的 CPU 计算，而 normal 是一个正常的请求。</p><p>接下来我们使用 PM2 将服务运行，也可以直接运行（作为后台进程服务，建议后续都使用 PM2 来运行）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ pm2 start pm2.config.js </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">env</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">development</span></span>
<span class="line"><span style="color:#E1E4E8;">或者</span></span>
<span class="line"><span style="color:#E1E4E8;">$ node index</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ pm2 start pm2.config.js </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">env</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">development</span></span>
<span class="line"><span style="color:#24292E;">或者</span></span>
<span class="line"><span style="color:#24292E;">$ node index</span></span></code></pre></div><p>运行成功后，我们在浏览器可以多次访问该地址：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/v1/normal</span></span>
<span class="line"><span style="color:#E1E4E8;">或者在命令行运行</span></span>
<span class="line"><span style="color:#E1E4E8;">$ time curl http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/v1/normal</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/v1/normal</span></span>
<span class="line"><span style="color:#24292E;">或者在命令行运行</span></span>
<span class="line"><span style="color:#24292E;">$ time curl http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/v1/normal</span></span></code></pre></div><p>不管如何访问，响应速度都是非常快的，那么接下来我们打开浏览器的另外一个窗口，访问如下地址：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/v1/cpu</span></span>
<span class="line"><span style="color:#E1E4E8;">或者运行 </span></span>
<span class="line"><span style="color:#E1E4E8;">$ time curl http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/v1/cpu</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/v1/cpu</span></span>
<span class="line"><span style="color:#24292E;">或者运行 </span></span>
<span class="line"><span style="color:#24292E;">$ time curl http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:3000/v1/cpu</span></span></code></pre></div><p>你再切换到 normal 的请求链接，会发现响应时间变得非常慢了。</p><p>这样就会因为某些用户的复杂运算，而影响到整个系统的请求处理，如果这种复杂运算占用的 CPU 时间越久，那么就会导致请求堆积，而这就会进一步导致系统处于崩溃状态无法恢复。</p><h4 id="_2-网络-i-o" tabindex="-1">2.网络 I/O <a class="header-anchor" href="#_2-网络-i-o" aria-label="Permalink to &quot;2.网络 I/O&quot;">​</a></h4><p>网络 I/O 中有 2 种相关的类型，同步阻塞 I/O 和 异步非阻塞 I/O：</p><ul><li><p><strong>同步阻塞 I/O</strong>的字面意思是发出网络请求后需要等待返回后，再处理其他计算；</p></li><li><p><strong>异步非阻塞 I/O</strong>就是发起网络 I/O 后，还可以处理其他的计算，这也是为什么 Node.js 在处理网络 I/O 性能较高的原因。</p></li></ul><p>举个例子，假设我们有个功能需要访问一个 API 的数据，Node.js 调用 API 就是一种网络 I/O：</p><ul><li><p>如果该 API 处理慢，那么则所有用户请求都被阻塞了；</p></li><li><p>而如果异步的话，则无须等待处理，可以继续其他的运行。</p></li></ul><p>在 CPU 例子中，我们有一种办法就是将 CPU 密集型计算使用其他进程来处理，那么这里我们可以来做一个简单的测试，启用 2 个服务，一个是使用 <strong>CPU 密集型计算</strong>（保留上面 CPU 的服务、代码不变）、另外一个则是正常请求的，这部分 Controller 代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;request-promise&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Controller</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../core/controller&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">(res, req);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 复杂运算，使用网络 I/O 调用</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bad</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> rp.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://127.0.0.1:3000/v1/cpu&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sumData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sumData </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> sumData.data </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> sumData.data.sum </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resApi</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;success&#39;</span><span style="color:#E1E4E8;">, {</span><span style="color:#9ECBFF;">&#39;sum&#39;</span><span style="color:#E1E4E8;"> : sum});</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 正常请求</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">normal</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resApi</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;good&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello world io&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Test;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;request-promise&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Controller</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../core/controller&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">req</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(res, req);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 复杂运算，使用网络 I/O 调用</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bad</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> rp.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://127.0.0.1:3000/v1/cpu&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sumData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sumData </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> sumData.data </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> sumData.data.sum </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resApi</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;success&#39;</span><span style="color:#24292E;">, {</span><span style="color:#032F62;">&#39;sum&#39;</span><span style="color:#24292E;"> : sum});</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 正常请求</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">normal</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resApi</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;good&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello world io&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Test;</span></span></code></pre></div><p>这部分代码和上面 CPU 代码例子唯一不同在于<strong>bad 函数中复杂的运算使用了网络 I/O</strong>，这样就不会影响 normal 的请求了。</p><p>接下来我们将 CPU 部分的服务启动，然后在浏览器再次访问。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:4000/v1/cpu</span></span>
<span class="line"><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:4000/v1/normal</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:4000/v1/cpu</span></span>
<span class="line"><span style="color:#24292E;">http</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//127.0.0.1:4000/v1/normal</span></span></code></pre></div><p>你会发现虽然 /v1/cpu 很慢，但是并不影响 /v1/normal 的请求，这就是我们上面介绍到的为什么 Node.js 适合网络 I/O 密集型的服务的原因了。</p><p>从上面的例子中，看到了网络 I/O 其实是 Node.js 的优势，虽然不影响主线程的处理，但是对于 <a href="http://127.0.0.1:4000/v1/cpu" target="_blank" rel="noreferrer">http://127.0.0.1:4000/v1/cpu</a> 这个请求，如果要提升性能，我们应该关注什么呢？</p><ul><li><p><strong>通道复用</strong>，比如我们现在每次访问 :4000/v1/cpu 时都会发起一个 TCP 到 :3000/v1/cpu，如果能够通道复用，减少 TCP 握手，那么就可以提升该接口的性能，或者将某些内部服务使用 UDP 来实现。</p></li><li><p><strong>增加缓存</strong>，对于相同响应的返回数据，增加缓存处理，避免不必要的计算，对于上面的计算，我们完全可以缓存计算结果，这样来减少网络 I/O。</p></li><li><p><strong>长链接链接池</strong>，有一些网络 I/O 是长链接的形式，比如 MySQL、Mamcached 或者 Redis，为了避免排队使用长链接的问题，可以使用链接池，而由于 Redis 和 Node.js 是单线程非阻塞处理，因此可以不用链接池。</p></li></ul><p>网络 I/O 一般不影响主线程逻辑，往往<strong>网络 I/O 请求的服务反而是瓶颈端</strong>，从而影响 Node.js 中涉及该网络服务的请求。其次网络 I/O 堆积较多会侧面影响：</p><ul><li><p>服务器本身的网络模块问题；</p></li><li><p>Node.js 性能，导致其他服务接口受影响。</p></li></ul><p>因此在网络 I/O 瓶颈时需要考虑修改服务器网络相关的配置。</p><h4 id="_3-磁盘-i-o" tabindex="-1">3.磁盘 I/O <a class="header-anchor" href="#_3-磁盘-i-o" aria-label="Permalink to &quot;3.磁盘 I/O&quot;">​</a></h4><p>和网络 I/O 相似，在一般情况下磁盘 I/O 是不会影响到主线程性能的，这里就不举例子了，因为磁盘 I/O 也是异步其他线程处理。这里所说的也不是主线程的问题，而是涉及磁盘 I/O 的服务请求。因为服务器的<strong>磁盘性能</strong>是一定的，如果在高并发情况下，磁盘 I/O 压力较大，从而导致磁盘 I/O 的服务性能下降。</p><p>在实际开发过程中，最常见的磁盘 I/O 场景，那就是<strong>日志模块</strong>，因为日志是需要写文件，从而会有频繁的日志写入。和网络 I/O 相似，磁盘 I/O 也会从侧面的影响机器性能，导致 Node.js 服务性能受影响。</p><p>在上面 3 种情况中，只有<strong>CPU 密集计算会真正影响到 Node.js 服务性能</strong> ，<strong>而网络 I/O 和磁盘 I/O 都是直接影响服务器性能</strong> ，<strong>从而侧面影响到 Node.js 服务性能</strong>，一般这时候就需要调整服务器配置或者做一些队列优化方式来提升服务器性能，这点我们在《12 | 性能分析：性能影响的关键路径以及优化策略》将会介绍。</p><h3 id="集群服务" tabindex="-1">集群服务 <a class="header-anchor" href="#集群服务" aria-label="Permalink to &quot;集群服务&quot;">​</a></h3><p><strong>后台服务一般都有集群的概念</strong>，无论是多机器部署，还是单机器（Node.js cluster 模式），具体我们画一个集群的架构例子，如图 1 所示。在进程分发的主节点 Nginx 和 Master 都可能会存在性能影响因素点，本讲核心是介绍 Node.js，因此我们主要看 cluster 模式的性能影响问题。</p>`,44),y=s("h4",{id:"_1-多进程-cluster-模式",tabindex:"-1"},[a("1.多进程 cluster 模式 "),s("a",{class:"header-anchor",href:"#_1-多进程-cluster-模式","aria-label":'Permalink to "1.多进程 cluster 模式"'},"​")],-1),i=s("p",null,"在上一讲中我们详细地介绍了 cluster 模式，在实际应用过程中这种模式也是存在性能瓶颈问题的。我们在上一讲中讲到的 cluster 模式，如图 2 所示。",-1),d=p('<p>你会发现这种模式的主进程也就是上一讲中的<strong>master 进程</strong>会存在瓶颈，因为所有的请求都必须经过 master 进程进行分发，同时接收处理 worker 进程的返回。</p><p>在实际开发过程中，遇到一个问题，由于我们所用机器是一个 96 核以上的服务器，因此启用了比较多的 worker 进程，而主进程只有一个，从而在单机高并发时（2 万以上的每秒并发请求）会导致 master 进程处理瓶颈，这样就影响到了服务性能，并且这时候你会发现 worker 进程的 CPU 并没有任何压力。</p><p>以上这点非常重要，在生产环境下一般很难发现这类问题，不过你应该有一个这样的概念：大概在 2 万以上的并发时，master 进程会存在性能瓶颈。</p><h3 id="其他相关" tabindex="-1">其他相关 <a class="header-anchor" href="#其他相关" aria-label="Permalink to &quot;其他相关&quot;">​</a></h3><p>对于 Node.js 后台服务，我们不仅仅要考虑其本身的性能影响，更应该考虑它对服务器资源竞争产生的性能影响。比如<strong>无节制地使用服务器的内存或者句柄</strong>，都会导致服务器的异常，而服务器的异常则从侧面影响到 Node.js 本身的性能。</p><h4 id="_1-内存限制" tabindex="-1">1.内存限制 <a class="header-anchor" href="#_1-内存限制" aria-label="Permalink to &quot;1.内存限制&quot;">​</a></h4><p>在 32 位服务器上 Node.js 的内存限制是 0.7 G，而在 64 位服务器上则是 1.4 G，而这个限制主要是因为 Node.js 的垃圾回收线程在超过限制内存时，回收时长循环会大于 1s，从而会影响性能问题。</p><p>现网我们一般会<strong>启用多个进程</strong>，如果每个进程损耗 1.4 G，那么加起来可能超出了服务器内存上限，从而导致服务器瘫痪。其次如果内存不会超出服务器上限，而是在达到一定上限时，也就是我们上面说的 0.7 G和 1.4 G，会导致服务器重启，从而会导致接口请求失败的问题。</p><h4 id="_2-句柄限制" tabindex="-1">2.句柄限制 <a class="header-anchor" href="#_2-句柄限制" aria-label="Permalink to &quot;2.句柄限制&quot;">​</a></h4><p>句柄可以简单理解为一个 <strong>ID 索引</strong>，通过这个索引可以访问到其他的资源，比如说文件句柄、网络 I/O 操作句柄等等，而一般服务器句柄都有上限。当 Node.js 没有控制好句柄，比如说无限的打开文件并未关闭，就会出现句柄泄漏问题，而这样会导致服务器异常，从而影响 Node.js 服务。</p><p>以上这两点我们都需要有一定的工具检测方法，<strong>在服务上限之前进行检测</strong>，其次也需要有一定的定位的方法，在出现现网异常时，能够定位出具体的问题，这也就是我们接下来会涉及的知识点。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本讲介绍了影响 Node.js 后台服务的代码因素、cluster 模式因素以及其他服务器资源相关的因素。学完本讲后，要了解哪些直接影响性能，哪些是从侧面也就是因为服务器资源问题导致的性能下降原因。本讲中的几个知识点，也是面试中常见的面试题，希望你能牢记这些知识点，这些也是我们后续章节中经常会被提及的一些知识。</p><p>那这一讲学完，你有什么心得或者问题吗？欢迎在评论区与我讨论。</p><p>下一讲将会为你讲解&quot;CPU 过载保护设计：如何在服务层面确保系统稳定&quot;。</p><hr><p>[</p>',17),u=s("p",null,[a("]("),s("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"https://shenceyun.lagou.com/t/mka"),a(")")],-1),F=s("p",null,[s("strong",null,"《大前端高薪训练营》")],-1),h=s("p",null,[a("对标阿里 P7 技术需求 + 每月大厂内推，6 个月助你斩获名企高薪 Offer。"),s("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"点击链接"),a("，快来领取！")],-1);function g(C,A,m,D,_,v){const n=e("Image");return t(),r("div",null,[E,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/1D/E1/CioPOWBQK0GAZFfaAABsROVQ92Y096.png"}),a(),y,i,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image6/M00/1D/E1/CioPOWBQK0mAAVVQAAB3dogpY-k967.png"}),a(),d,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M00/12/FA/CioPOWBBrAKAAod-AASyC72ZqWw233.png"}),a(),u,F,h])}const j=o(c,[["render",g]]);export{b as __pageData,j as default};
