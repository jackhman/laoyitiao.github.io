import{_ as o,j as t,o as e,g as c,k as a,s,Q as l,h as p}from"./chunks/framework.b3d8e22e.js";const _=JSON.parse('{"title":"破题 ","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/107-前端面试宝典之 React篇文档/(5792) 02  为什么 React 要用 JSX？.md","filePath":"posts/frontEnd/107-前端面试宝典之 React篇文档/(5792) 02  为什么 React 要用 JSX？.md","lastUpdated":1696417798000}'),r={name:"posts/frontEnd/107-前端面试宝典之 React篇文档/(5792) 02  为什么 React 要用 JSX？.md"},E=l('<p>本讲我们一起来聊聊在面试中&quot;为什么 React 要用 JSX?&quot;该如何回答。</p><h3 id="破题" tabindex="-1">破题 <a class="header-anchor" href="#破题" aria-label="Permalink to &quot;破题&quot;">​</a></h3><p>初读一遍题目&quot;为什么 React 要用 JSX？&quot;，你可能会感觉有点怪怪的。这时你可以换个角度想一下，就好像有人在问你，&quot;为什么你喜欢吃甜豆腐脑？&quot;</p><p>你是不是想迫不及待地写一首诗，赞美甜豆腐脑到底有多好吃呢？这你可就没答到点子上了。其实面试官的潜台词是&quot;咸豆腐脑为什么不可以呢？&quot;，对于这个问题来说是这样的。</p><p>这便是我想着重告诉你的一个思路------通过比较论证的方式证明甜豆腐脑更胜一筹。</p><p>当然，如果你是一位豆腐脑大师，甚至一名颇有威望的豆腐脑专家。那么，摆在大家面前对比的方案将会更多，甚至有酸辣豆腐脑、巧克力豆腐脑、韩式豆腐脑等等。所以，这里问&quot;为什么用 JSX&quot;，其引申含义是&quot;为什么不用 A、B、C？&quot;</p><p>无论是面试还是晋升，&quot;为什么采用该技术方案&quot;这一类问题是主考官最爱提的。这类问题其实在考察你的两个方面：</p><ul><li><p><strong>技术广度，深挖知识面涉猎广度，对流行框架的模板方案是否知悉了解；</strong></p></li><li><p><strong>技术方案调研能力。</strong></p></li></ul><p>大多数时候，我们选取技术方案主要依靠直觉和习惯。这样既缺乏技术方案调研比对的过程，又缺乏个人的深度思考。所以这道题，如果<strong>你的回答是&quot;JSX 更简单易用，React 官方推荐&quot;，当然不行</strong>！你要说服主考官，你就得拿出更多口味的&quot;豆腐脑&quot;进行比对才行。</p><h3 id="承题" tabindex="-1">承题 <a class="header-anchor" href="#承题" aria-label="Permalink to &quot;承题&quot;">​</a></h3><p>通过以上的分析，我们可以使用**&quot;三步走技巧&quot;，即 &quot;一句话解释，核心概念，方案对比&quot;**的解题思路，来回答面试中&quot;为什么 React 使用 JSX？&quot;这类问题。</p><ol><li><p>一句话解释 JSX。首先能一句话说清楚 JSX 到底是什么。</p></li><li><p>核心概念。JSX 用于解决什么问题？如何使用？</p></li><li><p>方案对比。与其他的方案对比，说明 React 选用 JSX 的必要性。</p></li></ol>',12),y=l(`<h3 id="入手" tabindex="-1">入手 <a class="header-anchor" href="#入手" aria-label="Permalink to &quot;入手&quot;">​</a></h3><h4 id="一句话解释" tabindex="-1">一句话解释 <a class="header-anchor" href="#一句话解释" aria-label="Permalink to &quot;一句话解释&quot;">​</a></h4><p>按照 React 官方的解释，<strong>JSX 是一个 JavaScript 的语法扩展，或者说是一个类似于 XML 的 ECMAScript 语法扩展</strong>。它本身没有太多的语法定义，也不期望引入更多的标准。</p><p>实际上，在 16 年的时候，JSX 公布过 2.0 的建设计划与小部分新特性，但很快被 Facebook 放弃掉了。整个计划在公布不到两个月的时间里便停掉了。其中一个原因是 JSX 的设计初衷，即并不希望引入太多的标准，也不期望 JSX 加入浏览器或者 ECMAScript 标准。</p><p>那这是为什么呢？这就涉及了 JSX 的核心概念。</p><h4 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h4><p>其实 React 本身并不强制使用 JSX。在没有 JSX 的时候，React 实现一个组件依赖于使用 React.createElement 函数。代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React.Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">        \`Hello \${</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props.toWhat}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  React.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(Hello, {toWhat</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;World&#39;</span><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React.Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        \`Hello \${</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props.toWhat}\`</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  React.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(Hello, {toWhat</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;World&#39;</span><span style="color:#24292E;">}, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>而 JSX 更像是一种<strong>语法糖</strong>，通过类似 XML 的描述方式，描写函数对象。在采用 JSX 之后，这段代码会这样写：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">React</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;Hello {</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.props.toWhat}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toWhat</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;"> /&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">React</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;Hello {</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.props.toWhat}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">Hello</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toWhat</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;"> /&gt;,</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>通过这样的对比，你可以清晰地发现，<strong>代码变得更为简洁，而且代码结构层次更为清晰。</strong></p><p>因为 React 需要将组件转化为虚拟 DOM 树，所以我们在编写代码时，实际上是在手写一棵结构树。而<strong>XML 在树结构的描述上天生具有可读性强的优势</strong>。</p><p>但这样可读性强的代码仅仅是给写程序的同学看的，实际上在运行的时候，会使用 Babel 插件将 JSX 语法的代码还原为 React.createElement 的代码。</p><p>那既然可以用插件帮我们编译转换代码，那为什么不直接使用模板呢？通过下一部分的方案对比可以解决你的问题。</p><h4 id="方案对比" tabindex="-1">方案对比 <a class="header-anchor" href="#方案对比" aria-label="Permalink to &quot;方案对比&quot;">​</a></h4><p><strong>设计初衷</strong></p><p>谈论其他方案之前，就需要谈到 React 的设计初衷，也是计算机科学里面一个非常重要的概念，叫作关注点分离（Separation of concerns）。</p><blockquote><p>关注点分离在计算机科学中，是将代码分隔为不同部分的设计原则，是面向对象的程序设计的核心概念。其中每一部分会有各自的关注焦点。</p><p>关注点分离的价值在于简化程序的开发和维护。当关注点分开时，各部分可以重复使用，以及独立开发和更新。具有特殊价值的是能够稍后改进或修改一段代码，而无须知道其他部分的细节必须对这些部分进行相应的更改。</p></blockquote><p>在 React 中，关注点的基本单位是组件。在接触一段时间 React 开发后，你会发现 React 单个组件是高内聚的，组件之间耦合度很低。</p><p>那模板不能做到吗？</p><p><strong>模板</strong></p><p><strong>React 团队认为引入模板是一种不佳的实现。</strong> 因为模板分离了技术栈，而非关注点的模板同时又引入了更多的概念。比如新的模板语法、模板指令等，以 AngularJS 为例，我们可以看一下有多少新概念的引入。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;!</span><span style="color:#E1E4E8;">doctype html</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ng-app</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;docsBindExample&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://code.angularjs.org/1.2.25/angular.min.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;script.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ng-controller</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Ctrl1&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Hello &lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ng-model</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#85E89D;">hr</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ng-bind</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#85E89D;">br</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ng</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">bind</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#85E89D;">br</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ng_bind</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#85E89D;">br</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-ng-bind</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#85E89D;">br</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">x-ng-bind</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt; &lt;</span><span style="color:#85E89D;">br</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">angular.module(&#39;docsBindExample&#39;, [])</span></span>
<span class="line"><span style="color:#E1E4E8;">  .controller(&#39;Ctrl1&#39;, function Ctrl1($scope) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $scope.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Max Karl Ernst Ludwig Planck (April 23, 1858 --        October 4, 1947)&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!</span><span style="color:#24292E;">doctype html</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ng-app</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;docsBindExample&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://code.angularjs.org/1.2.25/angular.min.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;script.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ng-controller</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Ctrl1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      Hello &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ng-model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#22863A;">hr</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ng-bind</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#22863A;">br</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ng</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">bind</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#22863A;">br</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ng_bind</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#22863A;">br</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-ng-bind</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#22863A;">br</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">x-ng-bind</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt; &lt;</span><span style="color:#22863A;">br</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">angular.module(&#39;docsBindExample&#39;, [])</span></span>
<span class="line"><span style="color:#24292E;">  .controller(&#39;Ctrl1&#39;, function Ctrl1($scope) {</span></span>
<span class="line"><span style="color:#24292E;">    $scope.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Max Karl Ernst Ludwig Planck (April 23, 1858 --        October 4, 1947)&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><p>这段代码有很强的疏离感，引入了非常多 Angular 独有的概念。但 JSX 并不会引入太多新的概念，它仍然是 JavaScript，就连条件表达式和循环都仍然是 JavaScript 的方式。如下代码所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       {props.isShow</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;show&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;hidden&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;}</span></span>
<span class="line"><span style="color:#E1E4E8;">       {props.names.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;{name}&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;)}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       {props.isShow</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;show&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;hidden&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;}</span></span>
<span class="line"><span style="color:#24292E;">       {props.names.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;{name}&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;)}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>即便是粗略的比较代码，也可以看出 React 代码更简洁，更具有可读性，更贴近 HTML。</p><p>那模板字符串也可以套用 HTML，所以用模板字符串不行吗？</p><p><strong>模板字符串</strong></p><p>我们来看下面的例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> box </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jsx</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;\${</span><span style="color:#E1E4E8;">Box</span><span style="color:#9ECBFF;">}&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    \${</span></span>
<span class="line"><span style="color:#9ECBFF;">      </span><span style="color:#B392F0;">shouldShowAnswer</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">user</span><span style="color:#9ECBFF;">) </span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#9ECBFF;">      </span><span style="color:#B392F0;">jsx</span><span style="color:#9ECBFF;">\`&lt;\${</span><span style="color:#E1E4E8;">Answer</span><span style="color:#9ECBFF;">} value=\${</span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">}&gt;no&lt;/\${</span><span style="color:#E1E4E8;">Answer</span><span style="color:#9ECBFF;">}&gt;\`</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#9ECBFF;">      </span><span style="color:#B392F0;">jsx</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">        &lt;\${</span><span style="color:#E1E4E8;">Box</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">Comment</span><span style="color:#9ECBFF;">}&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">         Text Content</span></span>
<span class="line"><span style="color:#9ECBFF;">        &lt;/\${</span><span style="color:#E1E4E8;">Box</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">Comment</span><span style="color:#9ECBFF;">}&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">      \`</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">  &lt;/\${</span><span style="color:#E1E4E8;">Box</span><span style="color:#9ECBFF;">}&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> box </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jsx</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  &lt;\${</span><span style="color:#24292E;">Box</span><span style="color:#032F62;">}&gt;</span></span>
<span class="line"><span style="color:#032F62;">    \${</span></span>
<span class="line"><span style="color:#032F62;">      </span><span style="color:#6F42C1;">shouldShowAnswer</span><span style="color:#032F62;">(</span><span style="color:#24292E;">user</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#032F62;">      </span><span style="color:#6F42C1;">jsx</span><span style="color:#032F62;">\`&lt;\${</span><span style="color:#24292E;">Answer</span><span style="color:#032F62;">} value=\${</span><span style="color:#005CC5;">false</span><span style="color:#032F62;">}&gt;no&lt;/\${</span><span style="color:#24292E;">Answer</span><span style="color:#032F62;">}&gt;\`</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#032F62;">      </span><span style="color:#6F42C1;">jsx</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">        &lt;\${</span><span style="color:#24292E;">Box</span><span style="color:#032F62;">.</span><span style="color:#24292E;">Comment</span><span style="color:#032F62;">}&gt;</span></span>
<span class="line"><span style="color:#032F62;">         Text Content</span></span>
<span class="line"><span style="color:#032F62;">        &lt;/\${</span><span style="color:#24292E;">Box</span><span style="color:#032F62;">.</span><span style="color:#24292E;">Comment</span><span style="color:#032F62;">}&gt;</span></span>
<span class="line"><span style="color:#032F62;">      \`</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">  &lt;/\${</span><span style="color:#24292E;">Box</span><span style="color:#032F62;">}&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">;</span></span></code></pre></div><p>这显然不是一个容易的方案，代码结构变得更复杂了，而且开发工具的代码提示也会变得很困难。</p><p><strong>JXON</strong></p><p>JXON 非常类似于当下的 JSX，它的结构是这样的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">catalog</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">product</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Cardigan Sweater&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#79B8FF;">catalog_item</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gender</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Men&#39;s&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#79B8FF;">item_number</span><span style="color:#E1E4E8;">&gt;QWZ5671&lt;/</span><span style="color:#79B8FF;">item_number</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">price</span><span style="color:#E1E4E8;">&gt;39.95&lt;/</span><span style="color:#85E89D;">price</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">size</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Medium&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">image</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;red_cardigan.jpg&quot;</span><span style="color:#E1E4E8;">&gt;Red&lt;/</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">image</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;burgundy_cardigan.jpg&quot;</span><span style="color:#E1E4E8;">&gt;Burgundy&lt;/</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;/</span><span style="color:#85E89D;">size</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">size</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Large&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">image</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;red_cardigan.jpg&quot;</span><span style="color:#E1E4E8;">&gt;Red&lt;/</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">image</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;burgundy_cardigan.jpg&quot;</span><span style="color:#E1E4E8;">&gt;Burgundy&lt;/</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;/</span><span style="color:#85E89D;">size</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;/</span><span style="color:#79B8FF;">catalog_item</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#79B8FF;">catalog_item</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gender</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Women&#39;s&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#79B8FF;">item_number</span><span style="color:#E1E4E8;">&gt;RRX9856&lt;/</span><span style="color:#79B8FF;">item_number</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#79B8FF;">discount_until</span><span style="color:#E1E4E8;">&gt;Dec 25, 1995&lt;/</span><span style="color:#79B8FF;">discount_until</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">price</span><span style="color:#E1E4E8;">&gt;42.50&lt;/</span><span style="color:#85E89D;">price</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;</span><span style="color:#85E89D;">size</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Medium&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">image</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;black_cardigan.jpg&quot;</span><span style="color:#E1E4E8;">&gt;Black&lt;/</span><span style="color:#79B8FF;">color_swatch</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     &lt;/</span><span style="color:#85E89D;">size</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;/</span><span style="color:#79B8FF;">catalog_item</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">product</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;text/javascript&quot;</span><span style="color:#E1E4E8;">&gt;&lt;![CDATA[function matchwo(a,b) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { return </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    else { return </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">}]]&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">catalog</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">catalog</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">product</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Cardigan Sweater&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#005CC5;">catalog_item</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gender</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Men&#39;s&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#005CC5;">item_number</span><span style="color:#24292E;">&gt;QWZ5671&lt;/</span><span style="color:#005CC5;">item_number</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">price</span><span style="color:#24292E;">&gt;39.95&lt;/</span><span style="color:#22863A;">price</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">size</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Medium&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">image</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;red_cardigan.jpg&quot;</span><span style="color:#24292E;">&gt;Red&lt;/</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">image</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;burgundy_cardigan.jpg&quot;</span><span style="color:#24292E;">&gt;Burgundy&lt;/</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;/</span><span style="color:#22863A;">size</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">size</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Large&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">image</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;red_cardigan.jpg&quot;</span><span style="color:#24292E;">&gt;Red&lt;/</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">image</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;burgundy_cardigan.jpg&quot;</span><span style="color:#24292E;">&gt;Burgundy&lt;/</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;/</span><span style="color:#22863A;">size</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;/</span><span style="color:#005CC5;">catalog_item</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#005CC5;">catalog_item</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gender</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Women&#39;s&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#005CC5;">item_number</span><span style="color:#24292E;">&gt;RRX9856&lt;/</span><span style="color:#005CC5;">item_number</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#005CC5;">discount_until</span><span style="color:#24292E;">&gt;Dec 25, 1995&lt;/</span><span style="color:#005CC5;">discount_until</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">price</span><span style="color:#24292E;">&gt;42.50&lt;/</span><span style="color:#22863A;">price</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;</span><span style="color:#22863A;">size</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Medium&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">image</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;black_cardigan.jpg&quot;</span><span style="color:#24292E;">&gt;Black&lt;/</span><span style="color:#005CC5;">color_swatch</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     &lt;/</span><span style="color:#22863A;">size</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;/</span><span style="color:#005CC5;">catalog_item</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">product</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;text/javascript&quot;</span><span style="color:#24292E;">&gt;&lt;![CDATA[function matchwo(a,b) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">if</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) { return </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">    else { return </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">}]]&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">catalog</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>但最终放弃 JXON 这一方案的原因是，大括号不能为元素在树中开始和结束的位置，提供很好的语法提示。</p><h3 id="答题" tabindex="-1">答题 <a class="header-anchor" href="#答题" aria-label="Permalink to &quot;答题&quot;">​</a></h3><p>经过以上的梳理，我们可以尝试答题了。</p><blockquote><p>在回答问题之前，我首先解释下什么是 JSX 吧。JSX 是一个 JavaScript 的语法扩展，结构类似 XML。</p><blockquote><p>JSX 主要用于声明 React 元素，但 React 中并不强制使用 JSX。即使使用了 JSX，也会在构建过程中，通过 Babel 插件编译为 React.createElement。所以 JSX 更像是 React.createElement 的一种语法糖。</p></blockquote><p>所以从这里可以看出，React 团队并不想引入 JavaScript 本身以外的开发体系。而是希望通过合理的关注点分离保持组件开发的纯粹性。</p><p>接下来与 JSX 以外的三种技术方案进行对比。</p><p>首先是模板，React 团队认为模板不应该是开发过程中的关注点，因为引入了模板语法、模板指令等概念，是一种不佳的实现方案。</p><p>其次是模板字符串，模板字符串编写的结构会造成多次内部嵌套，使整个结构变得复杂，并且优化代码提示也会变得困难重重。</p><p>最后是 JXON，同样因为代码提示困难的原因而被放弃。</p><p>所以 React 最后选用了 JSX，因为 JSX 与其设计思想贴合，不需要引入过多新的概念，对编辑器的代码提示也极为友好。</p></blockquote><p>大家在学完这讲内容后，就可以对照以下知识导图，检验自己的学习成果了。</p>`,39),i=l(`<h3 id="进阶" tabindex="-1">进阶 <a class="header-anchor" href="#进阶" aria-label="Permalink to &quot;进阶&quot;">​</a></h3><p><strong>Babel 插件如何实现 JSX 到 JS 的编译？</strong> 在 React 面试中，这个问题很容易被追问，也经常被要求手写。</p><p>它的实现原理是这样的。Babel 读取代码并解析，生成 AST，再将 AST 传入插件层进行转换，在转换时就可以将 JSX 的结构转换为 React.createElement 的函数。如下代码所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">babel</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> babel.types;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;custom-jsx-plugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    visitor: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">JSXElement</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> openingElement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.node.openingElement;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tagName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> openingElement.name.name;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []; </span></span>
<span class="line"><span style="color:#E1E4E8;">        args.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(t.</span><span style="color:#B392F0;">stringLiteral</span><span style="color:#E1E4E8;">(tagName)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> attribs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">nullLiteral</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        args.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(attribs); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> reactIdentifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;React&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//object</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> createElementIdentifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;createElement&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> callee </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">memberExpression</span><span style="color:#E1E4E8;">(reactIdentifier, createElementIdentifier)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> callExpression </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t.</span><span style="color:#B392F0;">callExpression</span><span style="color:#E1E4E8;">(callee, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        callExpression.arguments </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callExpression.arguments.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(path.node.children);</span></span>
<span class="line"><span style="color:#E1E4E8;">        path.</span><span style="color:#B392F0;">replaceWith</span><span style="color:#E1E4E8;">(callExpression, path.node); </span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">babel</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> babel.types;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;custom-jsx-plugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    visitor: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">JSXElement</span><span style="color:#24292E;">(</span><span style="color:#E36209;">path</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> openingElement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.node.openingElement;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tagName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> openingElement.name.name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []; </span></span>
<span class="line"><span style="color:#24292E;">        args.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(t.</span><span style="color:#6F42C1;">stringLiteral</span><span style="color:#24292E;">(tagName)); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> attribs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">nullLiteral</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        args.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(attribs); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> reactIdentifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">identifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;React&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//object</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> createElementIdentifier </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">identifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;createElement&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> callee </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">memberExpression</span><span style="color:#24292E;">(reactIdentifier, createElementIdentifier)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> callExpression </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.</span><span style="color:#6F42C1;">callExpression</span><span style="color:#24292E;">(callee, args);</span></span>
<span class="line"><span style="color:#24292E;">        callExpression.arguments </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> callExpression.arguments.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(path.node.children);</span></span>
<span class="line"><span style="color:#24292E;">        path.</span><span style="color:#6F42C1;">replaceWith</span><span style="color:#24292E;">(callExpression, path.node); </span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>这里布置个小作业给大家：弄清楚这段代码是如何运行起来的。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本讲主要讲解了 React 选用 JSX 的原因，通过这一讲你可以掌握 JSX 的核心思想与替代方案。但似乎离组件的主题还有点儿距离，毕竟 JSX 只是组件的一种描述形式，真正到组件上还有诸如生命周期一类的东西。下一讲我就带你到组件的生命周期中去一探究竟。</p><p>在进阶部分，我给你留了个小作业，你可以通过查询 Babel 的<a href="https://www.babeljs.cn/docs/plugins" target="_blank" rel="noreferrer">开发文档</a>来解决这个问题。</p><p>无论是在学习还是完成小作业的过程中遇到任何问题，都可以随时在留言区留言，我将与你共同探讨。</p>`,9),F={href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},g=s("p",null,"《大前端高薪训练营》",-1),u=s("p",null,[p("对标阿里 P7 技术需求 + 每月大厂内推，6 个月助你斩获名企高薪 Offer。"),s("a",{href:"https://shenceyun.lagou.com/t/mka",target:"_blank",rel:"noreferrer"},"点击链接"),p("，快来领取！")],-1);function d(C,h,m,B,A,q){const n=t("Image");return e(),c("div",null,[E,a(n,{alt:"图片1.png",src:"https://s0.lgstatic.com/i/image/M00/73/A4/Ciqc1F_GJQ-AK9FZAAC_MeElm70712.png"}),y,a(n,{alt:"图片2.png",src:"https://s0.lgstatic.com/i/image/M00/73/A4/Ciqc1F_GJSSAU6odAAFLeX8UyTo307.png"}),i,s("p",null,[s("a",F,[a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/72/94/Ciqc1F_EZ0eANc6tAASyC72ZqWw643.png"})])]),g,u])}const b=o(r,[["render",d]]);export{_ as __pageData,b as default};
