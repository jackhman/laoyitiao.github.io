import{_ as o,j as e,o as t,g as c,k as l,h as s,s as a,Q as p}from"./chunks/framework.4e7d56ce.js";const b=JSON.parse('{"title":"15Panda：拒绝低效，数据驱动新手段","description":"","frontmatter":{},"headers":[],"relativePath":"posts/devops/114-测试开发入门与实战文档/(4675) 15  Panda：拒绝低效，数据驱动新手段.md","filePath":"posts/devops/114-测试开发入门与实战文档/(4675) 15  Panda：拒绝低效，数据驱动新手段.md","lastUpdated":1696682708000}'),r={name:"posts/devops/114-测试开发入门与实战文档/(4675) 15  Panda：拒绝低效，数据驱动新手段.md"},E=a("h1",{id:"_15panda-拒绝低效-数据驱动新手段",tabindex:"-1"},[s("15Panda：拒绝低效，数据驱动新手段 "),a("a",{class:"header-anchor",href:"#_15panda-拒绝低效-数据驱动新手段","aria-label":'Permalink to "15Panda：拒绝低效，数据驱动新手段"'},"​")],-1),y=a("p",null,"你好，我是蔡超，欢迎来到第 15 课时，经过从第一节课迄今为止的学习，你已经对测试框架的搭建，使用有比较深入的理解。 公司里的各种项目假设需要自动化测试，你也可以根据本专栏能融合 API 测试和 UI 测试，并学会了使用 PageObject 模型，且拥有数据驱动能力的测试框架了。",-1),i=a("p",null,[s("今天我将带你在"),a("strong",null,"数据驱动这个话题上继续深耕"),s(" ，一起来探索在自动化测试中"),a("strong",null,"如何使用不同类型的数据驱动，下方这个本课时的内容脑图可供你学习参考。")],-1),d=p(`<h3 id="使用-pytest-进行数据驱动的基本思路" tabindex="-1">使用 pytest 进行数据驱动的基本思路 <a class="header-anchor" href="#使用-pytest-进行数据驱动的基本思路" aria-label="Permalink to &quot;使用 pytest 进行数据驱动的基本思路&quot;">​</a></h3><p>我们知道 pytest 可以通过 pytest.mark.parametrize 来实现数据驱动，而 pytest.mark.parametrize 接受的数据格式要求为：</p><ul><li><p>如果只有一组数据，以列表的形式存在；</p></li><li><p>如果有多组数据，以列表嵌套元组的形式存在（例如 [0,1] 或者 [(0,1), (1,2)]）。</p></li></ul><p>既然如此，我们只需要创建一个方法，在这个方法里解析我们提供的各种数据格式，然后解析后返回 pytest.mark.parametrize 支持的格式就好。</p><h3 id="常规的数据驱动方法" tabindex="-1">常规的数据驱动方法 <a class="header-anchor" href="#常规的数据驱动方法" aria-label="Permalink to &quot;常规的数据驱动方法&quot;">​</a></h3><h4 id="_1-pytest-操作-json-yaml-文件实现数据驱动" tabindex="-1">1.pytest 操作 JSON/YAML 文件实现数据驱动 <a class="header-anchor" href="#_1-pytest-操作-json-yaml-文件实现数据驱动" aria-label="Permalink to &quot;1.pytest 操作 JSON/YAML 文件实现数据驱动&quot;">​</a></h4><p>在《13 | DDT：博采众长，数据驱动的秘诀（一）》中我们讲到了在 unittest 框架中操作 JSON 和 YAML 文件实现数据驱动。</p><p>那么在 pytest 中，又该如何实现呢？</p><p>我们先按照刚刚所说的<strong>使用 pytest 进行数据驱动的基本思路</strong>创建一个读取 JSON 文件和 YAML 文件的方法：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_data_from_json_yaml</span><span style="color:#E1E4E8;">(data_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">    return_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    data_file_path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.abspath(data_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(data_file_path)</span></span>
<span class="line"><span style="color:#E1E4E8;">    _is_yaml_file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data_file_path.endswith((</span><span style="color:#9ECBFF;">&quot;.yml&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.yaml&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> codecs.open(data_file_path, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># Load the data from YAML or JSON</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> _is_yaml_file:</span></span>
<span class="line"><span style="color:#E1E4E8;">            data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> yaml.safe_load(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.load(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, elem </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(data):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(data, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            key, value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> elem, data[elem]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(value, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">                case_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> value.values():</span></span>
<span class="line"><span style="color:#E1E4E8;">                    case_data.append(v)</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append(</span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;">(case_data))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append((value,))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> return_value</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_data_from_json_yaml</span><span style="color:#24292E;">(data_file):</span></span>
<span class="line"><span style="color:#24292E;">    return_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    data_file_path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.abspath(data_file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(data_file_path)</span></span>
<span class="line"><span style="color:#24292E;">    _is_yaml_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data_file_path.endswith((</span><span style="color:#032F62;">&quot;.yml&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.yaml&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> codecs.open(data_file_path, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># Load the data from YAML or JSON</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> _is_yaml_file:</span></span>
<span class="line"><span style="color:#24292E;">            data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> yaml.safe_load(f)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.load(f)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, elem </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(data):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(data, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            key, value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elem, data[elem]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                case_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> value.values():</span></span>
<span class="line"><span style="color:#24292E;">                    case_data.append(v)</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append(</span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;">(case_data))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append((value,))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> return_value</span></span></code></pre></div><p>read_data_from_json_yaml 这个方法，实现了自动读取 JSON 文件和 YAML 文件，并且把 JSON 文件和 YAML 文件中的数据提取出来，并按照 pytest.mark.parametrize 可接收的方式返回。代码比较简单，我就不再一一讲解其含义</p><blockquote><p><strong>注意：如果你的测试文件与本文中的 YAML 和 JSON 文件的层次不同，此方法也需要做相应的修正。</strong></p></blockquote><p>有了这个方法，JSON 或者 YAML 文件的数据通过此方法就可以转换成 pytest.mark.parametrize 认可的格式直接传入了。</p><p>下面实践一下，在 lagouAPITest 项目根目录下创建如下文件目录：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">tests_pytest_ddt</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu_ddt.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu_ddt.json</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu_ddt.yaml</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_baidu_ddt.xlsx</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">conftest.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">tests_pytest_ddt</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu_ddt.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu_ddt.json</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu_ddt.yaml</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_baidu_ddt.xlsx</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">conftest.py</span></span></code></pre></div><p>其中，test_baidu_ddt.json 文件的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;case1&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;search_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;itesting&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;expect_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;case2&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;search_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;helloqa.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;expect_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;case1&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;search_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;itesting&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;expect_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;case2&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;search_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;helloqa.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;expect_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>test_baidu_ddt.yaml 文件的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;case1&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;search_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;itesting&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;expect_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;case2&quot;</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;search_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;helloqa.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;expect_string&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;case1&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;search_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;itesting&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;expect_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTesting&quot;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#032F62;">&quot;case2&quot;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;search_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;helloqa.com&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;expect_string&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;iTesting&quot;</span></span></code></pre></div><p>test_baidu_ddt.py 文件的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> codecs</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> yaml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_data_from_json_yaml</span><span style="color:#E1E4E8;">(data_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">    return_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    data_file_path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.abspath(data_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(data_file_path)</span></span>
<span class="line"><span style="color:#E1E4E8;">    _is_yaml_file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data_file_path.endswith((</span><span style="color:#9ECBFF;">&quot;.yml&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.yaml&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> codecs.open(data_file_path, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># Load the data from YAML or JSON</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> _is_yaml_file:</span></span>
<span class="line"><span style="color:#E1E4E8;">            data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> yaml.safe_load(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.load(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, elem </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(data):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(data, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            key, value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> elem, data[elem]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(value, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">                case_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> value.values():</span></span>
<span class="line"><span style="color:#E1E4E8;">                    case_data.append(v)</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append(</span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;">(case_data))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append((value,))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> return_value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestBaidu</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;search_string, expect_string&#39;</span><span style="color:#E1E4E8;">,  read_data_from_json_yaml(</span><span style="color:#9ECBFF;">&#39;tests_pytest_ddt/test_baidu_ddt.yaml&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, login, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver, s, base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> login</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(search_results)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> (expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results) </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main([</span><span style="color:#9ECBFF;">&#39;-s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-v&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> codecs</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> yaml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_data_from_json_yaml</span><span style="color:#24292E;">(data_file):</span></span>
<span class="line"><span style="color:#24292E;">    return_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    data_file_path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.abspath(data_file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(data_file_path)</span></span>
<span class="line"><span style="color:#24292E;">    _is_yaml_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data_file_path.endswith((</span><span style="color:#032F62;">&quot;.yml&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.yaml&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> codecs.open(data_file_path, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># Load the data from YAML or JSON</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> _is_yaml_file:</span></span>
<span class="line"><span style="color:#24292E;">            data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> yaml.safe_load(f)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.load(f)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, elem </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(data):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(data, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            key, value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elem, data[elem]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                case_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> value.values():</span></span>
<span class="line"><span style="color:#24292E;">                    case_data.append(v)</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append(</span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;">(case_data))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append((value,))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> return_value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestBaidu</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;search_string, expect_string&#39;</span><span style="color:#24292E;">,  read_data_from_json_yaml(</span><span style="color:#032F62;">&#39;tests_pytest_ddt/test_baidu_ddt.yaml&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, login, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver, s, base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> login</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(search_results)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> (expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results) </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main([</span><span style="color:#032F62;">&#39;-s&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-v&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>此段代码跟我们在《14 | DDT：博采众长，数据驱动的秘诀（二）》中讲解的代码几乎相同，唯一的改变在于增加了一个新方法 read_data_from_json_yaml，另外 @pytest.mark.parametrize 的参数，从直接提供参数变成了<strong>从文件提供参数。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">（</span><span style="color:#B392F0;">read_data_from_json_yaml</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tests_pytest_ddt/test_baidu_ddt.yaml&#39;</span><span style="color:#E1E4E8;">)）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">（</span><span style="color:#6F42C1;">read_data_from_json_yaml</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;tests_pytest_ddt/test_baidu_ddt.yaml&#39;</span><span style="color:#24292E;">)）</span></span></code></pre></div><p>在命令行中通过如下方式运行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests_pytest_ddt -s -v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests_pytest_ddt -s -v</span></span></code></pre></div><p>运行结束后查看结果如下：</p>`,26),F=p(`<p>可以看到，两个测试用例都执行了，并且 YAML 文件中的数据被正确读取。</p><p>那么如果我们现在要执行 JSON 文件中的数据该如何操作呢？把上述第 40 行代码中的 yaml 文件后缀换成 json 文件后缀，再次执行即可。</p><h4 id="_2-pytest-操作-excel-文件实现数据驱动" tabindex="-1">2.pytest 操作 Excel 文件实现数据驱动 <a class="header-anchor" href="#_2-pytest-操作-excel-文件实现数据驱动" aria-label="Permalink to &quot;2.pytest 操作 Excel 文件实现数据驱动&quot;">​</a></h4><p>在实际应用中，也有很多公司使用 Excel 来做数据驱动。 在 python 中，读写 Excel 的 library 很多，常见的有 xlrd、xlwt，以及<strong>openpyxl</strong>。由于 xlrd 和 xlwt 只能分别用作读和写，实现同样的读写操作，它的代码行数较多，故逐渐变得不再流行。所以下面我将重点介绍 openpyxl 的使用。</p><p><strong>（1）openpyxl 安装</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pip install openpyxl</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pip install openpyxl</span></span></code></pre></div><p><strong>（2）openpyxl 使用</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> openpyxl </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> load_workbook, Workbook</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 创建一个workbook</span></span>
<span class="line"><span style="color:#E1E4E8;">    file_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#DBEDFF;">c:</span><span style="color:#85E89D;font-weight:bold;">\\t</span><span style="color:#DBEDFF;">est</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">xlsx</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    wb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Workbook()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 创建一个sheet，名为iTesting，把它插入到最前的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    wb.create_sheet(</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 创建一个sheet，名为VIPTEST，把它插入index为1的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    wb.create_sheet(</span><span style="color:#9ECBFF;">&#39;VIPTEST&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 保存表格</span></span>
<span class="line"><span style="color:#E1E4E8;">    wb.save(file_name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 读和写</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 初始化表格</span></span>
<span class="line"><span style="color:#E1E4E8;">    wb2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> load_workbook(file_name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 读，获取所有的sheet名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(wb2.sheetnames)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 获取sheet名为iTesting的表格</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> wb2[</span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 将A1行的值设置为iTesting</span></span>
<span class="line"><span style="color:#E1E4E8;">    s[</span><span style="color:#9ECBFF;">&#39;A1&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 将第2行，第一列的值设置为1</span></span>
<span class="line"><span style="color:#E1E4E8;">    s.cell(</span><span style="color:#FFAB70;">row</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">column</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 打印第2行第一列单元格的值 --方法1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(s.cell(</span><span style="color:#FFAB70;">row</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">column</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 打印第2行第一列单元格的值 --方法2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(s[</span><span style="color:#9ECBFF;">&#39;A2&#39;</span><span style="color:#E1E4E8;">].value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 保存表格</span></span>
<span class="line"><span style="color:#E1E4E8;">    wb.save(file_name)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> openpyxl </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> load_workbook, Workbook</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 创建一个workbook</span></span>
<span class="line"><span style="color:#24292E;">    file_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;c:</span><span style="color:#22863A;font-weight:bold;">\\t</span><span style="color:#032F62;">est</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">xlsx&#39;</span></span>
<span class="line"><span style="color:#24292E;">    wb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Workbook()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 创建一个sheet，名为iTesting，把它插入到最前的位置</span></span>
<span class="line"><span style="color:#24292E;">    wb.create_sheet(</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 创建一个sheet，名为VIPTEST，把它插入index为1的位置</span></span>
<span class="line"><span style="color:#24292E;">    wb.create_sheet(</span><span style="color:#032F62;">&#39;VIPTEST&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 保存表格</span></span>
<span class="line"><span style="color:#24292E;">    wb.save(file_name)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 读和写</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 初始化表格</span></span>
<span class="line"><span style="color:#24292E;">    wb2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> load_workbook(file_name)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 读，获取所有的sheet名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(wb2.sheetnames)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 获取sheet名为iTesting的表格</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wb2[</span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 将A1行的值设置为iTesting</span></span>
<span class="line"><span style="color:#24292E;">    s[</span><span style="color:#032F62;">&#39;A1&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iTesting&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 将第2行，第一列的值设置为1</span></span>
<span class="line"><span style="color:#24292E;">    s.cell(</span><span style="color:#E36209;">row</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">column</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 打印第2行第一列单元格的值 --方法1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(s.cell(</span><span style="color:#E36209;">row</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#E36209;">column</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).value)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 打印第2行第一列单元格的值 --方法2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(s[</span><span style="color:#032F62;">&#39;A2&#39;</span><span style="color:#24292E;">].value)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 保存表格</span></span>
<span class="line"><span style="color:#24292E;">    wb.save(file_name)</span></span></code></pre></div><p>上面的一段代码里，我简单介绍了 openpyxl 的用法，涉及创建表格、创建 sheet 名、读取单元格的值、设置单元格的值等部分。你可以看出使用 openpyxl 操作 excel 是相对比较简单的。<br><strong>（3）openpyxl 结合 pytest 实现数据驱动</strong></p><p>文件 test_baidu_ddt.xlsx 的内容如下（sheet 名 iTesting）：</p>`,10),_=p(`<p>我们来写个读 Excel 的方法，代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_data_from_excel</span><span style="color:#E1E4E8;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#E1E4E8;">    return_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 判断文件是否存在</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;File not exists&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 打开指定的sheet</span></span>
<span class="line"><span style="color:#E1E4E8;">    wb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> load_workbook(excel_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 按照pytest接受的格式输出数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> wb.sheetnames:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> sheet_name:</span></span>
<span class="line"><span style="color:#E1E4E8;">            sheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> wb[sheet_name]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> row </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> sheet.rows:</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append([col.value </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> col </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> row])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 第一行数据是标题，故skip掉</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> return_value[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_data_from_excel</span><span style="color:#24292E;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#24292E;">    return_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 判断文件是否存在</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;File not exists&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 打开指定的sheet</span></span>
<span class="line"><span style="color:#24292E;">    wb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> load_workbook(excel_file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 按照pytest接受的格式输出数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> wb.sheetnames:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> sheet_name:</span></span>
<span class="line"><span style="color:#24292E;">            sheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wb[sheet_name]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> sheet.rows:</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append([col.value </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> col </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> row])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 第一行数据是标题，故skip掉</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> return_value[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:]</span></span></code></pre></div><p>更新 test_baidu_ddt.py 文件，把 read_data_from_excel 的方法加进去，更新后的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> codecs</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> yaml</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> openpyxl </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> load_workbook</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_data_from_json_yaml</span><span style="color:#E1E4E8;">(data_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">    return_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    data_file_path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.abspath(data_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(data_file_path)</span></span>
<span class="line"><span style="color:#E1E4E8;">    _is_yaml_file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data_file_path.endswith((</span><span style="color:#9ECBFF;">&quot;.yml&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.yaml&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> codecs.open(data_file_path, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># Load the data from YAML or JSON</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> _is_yaml_file:</span></span>
<span class="line"><span style="color:#E1E4E8;">            data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> yaml.safe_load(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.load(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, elem </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(data):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(data, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            key, value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> elem, data[elem]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(value, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">                case_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> value.values():</span></span>
<span class="line"><span style="color:#E1E4E8;">                    case_data.append(v)</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append(</span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;">(case_data))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append((value,))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> return_value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_data_from_excel</span><span style="color:#E1E4E8;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#E1E4E8;">    return_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;File not exists&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    wb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> load_workbook(excel_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> wb.sheetnames:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> sheet_name:</span></span>
<span class="line"><span style="color:#E1E4E8;">            sheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> wb[sheet_name]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> row </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> sheet.rows:</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append([col.value </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> col </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> row])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(return_value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> return_value[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestBaidu</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 注意，此处调用我换成了读Excel的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;search_string, expect_string&#39;</span><span style="color:#E1E4E8;">,  read_data_from_excel(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#DBEDFF;">D:</span><span style="color:#85E89D;font-weight:bold;">\\_</span><span style="color:#DBEDFF;">Automation</span><span style="color:#85E89D;font-weight:bold;">\\l</span><span style="color:#DBEDFF;">agouAPITest</span><span style="color:#85E89D;font-weight:bold;">\\t</span><span style="color:#DBEDFF;">ests_pytest_ddt</span><span style="color:#85E89D;font-weight:bold;">\\t</span><span style="color:#DBEDFF;">est_baidu_ddt</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">xlsx</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, login, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver, s, base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> login</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(search_results)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> (expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results) </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main([</span><span style="color:#9ECBFF;">&#39;-s&#39;</span><span style="color:#E1E4E8;">， </span><span style="color:#9ECBFF;">&#39;-v&#39;</span><span style="color:#E1E4E8;">，</span><span style="color:#9ECBFF;">&#39;tests_pytest_ddt&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> codecs</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> yaml</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> openpyxl </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> load_workbook</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_data_from_json_yaml</span><span style="color:#24292E;">(data_file):</span></span>
<span class="line"><span style="color:#24292E;">    return_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    data_file_path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.abspath(data_file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(data_file_path)</span></span>
<span class="line"><span style="color:#24292E;">    _is_yaml_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data_file_path.endswith((</span><span style="color:#032F62;">&quot;.yml&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.yaml&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> codecs.open(data_file_path, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># Load the data from YAML or JSON</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> _is_yaml_file:</span></span>
<span class="line"><span style="color:#24292E;">            data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> yaml.safe_load(f)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.load(f)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, elem </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(data):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(data, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            key, value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elem, data[elem]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                case_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> value.values():</span></span>
<span class="line"><span style="color:#24292E;">                    case_data.append(v)</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append(</span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;">(case_data))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append((value,))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> return_value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_data_from_excel</span><span style="color:#24292E;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#24292E;">    return_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;File not exists&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    wb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> load_workbook(excel_file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> wb.sheetnames:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> sheet_name:</span></span>
<span class="line"><span style="color:#24292E;">            sheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wb[sheet_name]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> sheet.rows:</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append([col.value </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> col </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> row])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(return_value)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> return_value[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestBaidu</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 注意，此处调用我换成了读Excel的方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;search_string, expect_string&#39;</span><span style="color:#24292E;">,  read_data_from_excel(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;D:</span><span style="color:#22863A;font-weight:bold;">\\_</span><span style="color:#032F62;">Automation</span><span style="color:#22863A;font-weight:bold;">\\l</span><span style="color:#032F62;">agouAPITest</span><span style="color:#22863A;font-weight:bold;">\\t</span><span style="color:#032F62;">ests_pytest_ddt</span><span style="color:#22863A;font-weight:bold;">\\t</span><span style="color:#032F62;">est_baidu_ddt</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">xlsx&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, login, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver, s, base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> login</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(search_results)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> (expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results) </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main([</span><span style="color:#032F62;">&#39;-s&#39;</span><span style="color:#24292E;">， </span><span style="color:#032F62;">&#39;-v&#39;</span><span style="color:#24292E;">，</span><span style="color:#032F62;">&#39;tests_pytest_ddt&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>在命令行中通过如下方式再次运行即可：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\</span><span style="color:#FDAEB7;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests_pytest_ddt -s -v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\</span><span style="color:#B31D28;font-style:italic;">_Automation\\lagouAPITest&gt;pytest tests_pytest_ddt -s -v</span></span></code></pre></div><p>运行后查看结果，你会发现测试被正确执行，测试数据是从 Excel 指定的 sheet 名中获取的。</p><h3 id="数据驱动新姿势" tabindex="-1">数据驱动新姿势 <a class="header-anchor" href="#数据驱动新姿势" aria-label="Permalink to &quot;数据驱动新姿势&quot;">​</a></h3><h4 id="_1-pandas-实现数据驱动" tabindex="-1">1.Pandas 实现数据驱动 <a class="header-anchor" href="#_1-pandas-实现数据驱动" aria-label="Permalink to &quot;1.Pandas 实现数据驱动&quot;">​</a></h4><p>openpyxl 操作 Excel 非常简洁，但是相对于 Pandas 来说，还不够简洁，而且 openpyxl 运算效率不如 Pandas，特别是当表格行项目过多时，openpyxl 运算较慢。</p><p>我们知道，当测试脚本过多时，单个脚本的运行时间差异加起来也会是个不小的浪费。作为测试开发，我们有义务提升测试效率。</p><p>Pandas 是一个强大的<strong>分析结构化数据</strong>的工具集，它的使用基础是 Numpy（提供高性能的矩阵运算）；Pandas 用于数据挖掘和数据分析，同时也提供数据清洗功能。使用 Pandas 操作 Excel 数据，就好像数数那样简单。</p><p><strong>Pandas 安装</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># pandas默认依赖xlrd库，故先安装xlrd</span></span>
<span class="line"><span style="color:#E1E4E8;">pip install xlrd</span></span>
<span class="line"><span style="color:#E1E4E8;"># 安装Pandas</span></span>
<span class="line"><span style="color:#E1E4E8;">pip install Pandas</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># pandas默认依赖xlrd库，故先安装xlrd</span></span>
<span class="line"><span style="color:#24292E;">pip install xlrd</span></span>
<span class="line"><span style="color:#24292E;"># 安装Pandas</span></span>
<span class="line"><span style="color:#24292E;">pip install Pandas</span></span></code></pre></div><p><strong>Pandas 语法</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Pandas </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> pd</span></span>
<span class="line"><span style="color:#6A737D;"># 首先初始化，engine默认是xlrd</span></span>
<span class="line"><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.ExcelFile(path_or_buffer, </span><span style="color:#FFAB70;">engine</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 接着parse</span></span>
<span class="line"><span style="color:#E1E4E8;">s.parse(</span><span style="color:#FFAB70;">sheet_name</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">header</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">names</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">index_col</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">usecols</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">squeeze</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">converters</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">true_values</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">false_values</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">skiprows</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">nrows</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">na_values</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">parse_dates</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">date_parser</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">thousands</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">comment</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">skipfooter</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">convert_float</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">mangle_dupe_cols</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwds,)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Pandas </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pd</span></span>
<span class="line"><span style="color:#6A737D;"># 首先初始化，engine默认是xlrd</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.ExcelFile(path_or_buffer, </span><span style="color:#E36209;">engine</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 接着parse</span></span>
<span class="line"><span style="color:#24292E;">s.parse(</span><span style="color:#E36209;">sheet_name</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#E36209;">header</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#E36209;">names</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index_col</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">usecols</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">squeeze</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span><span style="color:#E36209;">converters</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">true_values</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">false_values</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">skiprows</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">nrows</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">na_values</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">parse_dates</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">date_parser</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">thousands</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">comment</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span><span style="color:#E36209;">skipfooter</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">convert_float</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span><span style="color:#E36209;">mangle_dupe_cols</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwds,)</span></span></code></pre></div><p>Pandas 读取 Excel 文件非常简单，首先使用 Pandas 初始化 ExcelFile。其两个参数path_or_buffer 是我们要读取的文件路径。</p><p>Excel 文件名称建议使用英文路径及英文命名方式，尽量不要使用中文。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pandas as pd</span></span>
<span class="line"><span style="color:#E1E4E8;">path_or_buffer = r&#39;D:\\_Automation\\lagouAPITest\\tests_pytest_ddt\\test_baidu_ddt.xlsx&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pandas as pd</span></span>
<span class="line"><span style="color:#24292E;">path_or_buffer = r&#39;D:\\_Automation\\lagouAPITest\\tests_pytest_ddt\\test_baidu_ddt.xlsx&#39;</span></span></code></pre></div><p>engine 是供 Pandas 使用的 engine，可选项为&quot;xlrd&quot;&quot;openpyxl&quot;&quot;odf&quot;和&quot;pyxlsb&quot;，如果不提供，默认使用 xlrd。</p><p><strong>parse 函数的参数</strong></p><p>初始化后，可以使用 s.parse() 函数。parse 函数有非常多的参数，在此我列出常用的几个。</p><ul><li><strong>sheet_name: Excel 的 sheet 名</strong></li></ul><p>sheet_name 可以是整型数字、列表名，或者上述两者组合。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 通过整型数字读取。读取第一个sheet。 Pandas sheet名下标以0开始</span></span>
<span class="line"><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.ExcelFile(path_or_buffer, </span><span style="color:#FFAB70;">sheet_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 通过列表名读取</span></span>
<span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.parse(</span><span style="color:#FFAB70;">sheet_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 通过index读取。读取第一个sheet</span></span>
<span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.parse(</span><span style="color:#FFAB70;">sheet_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">#组合读取。读取第4个sheet，名为iTesting的sheet以及第7个sheet</span></span>
<span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.parse(</span><span style="color:#FFAB70;">sheet_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Sheet6&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 通过整型数字读取。读取第一个sheet。 Pandas sheet名下标以0开始</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.ExcelFile(path_or_buffer, </span><span style="color:#E36209;">sheet_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 通过列表名读取</span></span>
<span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.parse(</span><span style="color:#E36209;">sheet_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 通过index读取。读取第一个sheet</span></span>
<span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.parse(</span><span style="color:#E36209;">sheet_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">#组合读取。读取第4个sheet，名为iTesting的sheet以及第7个sheet</span></span>
<span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.parse(</span><span style="color:#E36209;">sheet_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Sheet6&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><ul><li><strong>header：使用哪一行作为列名</strong></li></ul><p>header 默认值为 0，即第一行，也可以设置为 [0, x]。</p><p>（例如 [0,1] 意味着将前两行作为多重索引）</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.parse(</span><span style="color:#FFAB70;">sheet_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">header</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.parse(</span><span style="color:#E36209;">sheet_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">header</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div><p>需要注意： Pandas 默认使用第一行为 header，所以在 Excel 里，第一行必须是 title，如果第一行是数据，将会导致第一行数据被遗漏。如果不想要 header，可以参数传递 header=None。</p><ul><li><strong>usecols：待读取的列</strong></li></ul><p>usecols 接收整型，从 0 开始，例如 [0, 1, 2]，也可以使用列名例如 &quot;A:D, F&quot;，表示读取 A 到 D 列，以及 F 列。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.parse(</span><span style="color:#FFAB70;">sheet_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">usecols</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;A:D&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.parse(</span><span style="color:#E36209;">sheet_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">usecols</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;A:D&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li><strong>skiprows：读取时，跳过特定行</strong></li></ul><p>skiprows=n，跳过前 n 行；skiprows = [a, b, c]，跳过第 a+1、b+1、c+1 行（索引从0开始）</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.parse(</span><span style="color:#FFAB70;">sheet_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">skiprows</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.parse(</span><span style="color:#E36209;">sheet_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">skiprows</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">])</span></span></code></pre></div><ul><li><strong>nrows：需要读取的行数</strong></li></ul><p>仅仅列出要读取的行数</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.parse(</span><span style="color:#FFAB70;">sheet_name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">nrows</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.parse(</span><span style="color:#E36209;">sheet_name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">nrows</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Pandas 结合 pytest 实现数据驱动</strong></p><p>了解了 Pandas 语法后，我们来看下如何使用 Pandas 读取 Excel 数据：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_data_from_pandas</span><span style="color:#E1E4E8;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;File not exists&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.ExcelFile(excel_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 解析Excel Sheet</span></span>
<span class="line"><span style="color:#E1E4E8;">    df </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.parse(sheet_name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 以list格式返回数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> df.values.tolist()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_data_from_pandas</span><span style="color:#24292E;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;File not exists&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 初始化</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.ExcelFile(excel_file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 解析Excel Sheet</span></span>
<span class="line"><span style="color:#24292E;">    df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.parse(sheet_name)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 以list格式返回数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> df.values.tolist()</span></span></code></pre></div><p>可以看到，使用 pandas 读取 Excel 数据更加简洁方便。</p><p>最后，我们来更新下 test_baidu_ddt.py 文件，更新后的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> codecs</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> yaml</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> openpyxl </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> load_workbook</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pandas </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> pd</span></span>
<span class="line"><span style="color:#6A737D;"># 读取Yaml文件和Json文件</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_data_from_json_yaml</span><span style="color:#E1E4E8;">(data_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">    return_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    data_file_path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.path.abspath(data_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(data_file_path)</span></span>
<span class="line"><span style="color:#E1E4E8;">    _is_yaml_file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data_file_path.endswith((</span><span style="color:#9ECBFF;">&quot;.yml&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.yaml&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> codecs.open(data_file_path, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># Load the data from YAML or JSON</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> _is_yaml_file:</span></span>
<span class="line"><span style="color:#E1E4E8;">            data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> yaml.safe_load(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.load(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i, elem </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enumerate</span><span style="color:#E1E4E8;">(data):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(data, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            key, value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> elem, data[elem]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(value, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">                case_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> value.values():</span></span>
<span class="line"><span style="color:#E1E4E8;">                    case_data.append(v)</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append(</span><span style="color:#79B8FF;">tuple</span><span style="color:#E1E4E8;">(case_data))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append((value,))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> return_value</span></span>
<span class="line"><span style="color:#6A737D;"># 读取Excel 文件 -- openpyxl</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_data_from_excel</span><span style="color:#E1E4E8;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#E1E4E8;">    return_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;File not exists&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    wb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> load_workbook(excel_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> wb.sheetnames:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> sheet_name:</span></span>
<span class="line"><span style="color:#E1E4E8;">            sheet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> wb[sheet_name]</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> row </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> sheet.rows:</span></span>
<span class="line"><span style="color:#E1E4E8;">                return_value.append([col.value </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> col </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> row])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(return_value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> return_value[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:]</span></span>
<span class="line"><span style="color:#6A737D;"># 读取Excel文件 -- Pandas</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_data_from_pandas</span><span style="color:#E1E4E8;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;File not exists&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pd.ExcelFile(excel_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    df </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.parse(sheet_name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> df.values.tolist()</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestBaidu</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;search_string, expect_string&#39;</span><span style="color:#E1E4E8;">,  read_data_from_pandas(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#DBEDFF;">D:</span><span style="color:#85E89D;font-weight:bold;">\\_</span><span style="color:#DBEDFF;">Automation</span><span style="color:#85E89D;font-weight:bold;">\\l</span><span style="color:#DBEDFF;">agouAPITest</span><span style="color:#85E89D;font-weight:bold;">\\t</span><span style="color:#DBEDFF;">ests_pytest_ddt</span><span style="color:#85E89D;font-weight:bold;">\\t</span><span style="color:#DBEDFF;">est_baidu_ddt</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">xlsx</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iTesting&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baidu_search</span><span style="color:#E1E4E8;">(self, login, search_string, expect_string):</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver, s, base_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> login</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.get(base_url </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;kw&quot;</span><span style="color:#E1E4E8;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#E1E4E8;">        driver.find_element_by_id(</span><span style="color:#9ECBFF;">&quot;su&quot;</span><span style="color:#E1E4E8;">).click()</span></span>
<span class="line"><span style="color:#E1E4E8;">        time.sleep(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        search_results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> driver.find_element_by_xpath(</span><span style="color:#9ECBFF;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#E1E4E8;">).get_attribute(</span><span style="color:#9ECBFF;">&#39;innerHTML&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(search_results)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> (expect_string </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> search_results) </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main([</span><span style="color:#9ECBFF;">&#39;-s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-v&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;tests_pytest_ddt&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> codecs</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> yaml</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> openpyxl </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> load_workbook</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pandas </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pd</span></span>
<span class="line"><span style="color:#6A737D;"># 读取Yaml文件和Json文件</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_data_from_json_yaml</span><span style="color:#24292E;">(data_file):</span></span>
<span class="line"><span style="color:#24292E;">    return_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    data_file_path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.path.abspath(data_file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(data_file_path)</span></span>
<span class="line"><span style="color:#24292E;">    _is_yaml_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data_file_path.endswith((</span><span style="color:#032F62;">&quot;.yml&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.yaml&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> codecs.open(data_file_path, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># Load the data from YAML or JSON</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> _is_yaml_file:</span></span>
<span class="line"><span style="color:#24292E;">            data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> yaml.safe_load(f)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.load(f)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, elem </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(data):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(data, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            key, value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elem, data[elem]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                case_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> value.values():</span></span>
<span class="line"><span style="color:#24292E;">                    case_data.append(v)</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append(</span><span style="color:#005CC5;">tuple</span><span style="color:#24292E;">(case_data))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append((value,))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> return_value</span></span>
<span class="line"><span style="color:#6A737D;"># 读取Excel 文件 -- openpyxl</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_data_from_excel</span><span style="color:#24292E;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#24292E;">    return_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;File not exists&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    wb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> load_workbook(excel_file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> wb.sheetnames:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> sheet_name:</span></span>
<span class="line"><span style="color:#24292E;">            sheet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wb[sheet_name]</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> sheet.rows:</span></span>
<span class="line"><span style="color:#24292E;">                return_value.append([col.value </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> col </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> row])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(return_value)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> return_value[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:]</span></span>
<span class="line"><span style="color:#6A737D;"># 读取Excel文件 -- Pandas</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_data_from_pandas</span><span style="color:#24292E;">(excel_file, sheet_name):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> os.path.exists(excel_file):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;File not exists&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.ExcelFile(excel_file)</span></span>
<span class="line"><span style="color:#24292E;">    df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.parse(sheet_name)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> df.values.tolist()</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.baidu</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestBaidu</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;search_string, expect_string&#39;</span><span style="color:#24292E;">,  read_data_from_pandas(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;D:</span><span style="color:#22863A;font-weight:bold;">\\_</span><span style="color:#032F62;">Automation</span><span style="color:#22863A;font-weight:bold;">\\l</span><span style="color:#032F62;">agouAPITest</span><span style="color:#22863A;font-weight:bold;">\\t</span><span style="color:#032F62;">ests_pytest_ddt</span><span style="color:#22863A;font-weight:bold;">\\t</span><span style="color:#032F62;">est_baidu_ddt</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">xlsx&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;iTesting&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baidu_search</span><span style="color:#24292E;">(self, login, search_string, expect_string):</span></span>
<span class="line"><span style="color:#24292E;">        driver, s, base_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> login</span></span>
<span class="line"><span style="color:#24292E;">        driver.get(base_url </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;kw&quot;</span><span style="color:#24292E;">).send_keys(search_string)</span></span>
<span class="line"><span style="color:#24292E;">        driver.find_element_by_id(</span><span style="color:#032F62;">&quot;su&quot;</span><span style="color:#24292E;">).click()</span></span>
<span class="line"><span style="color:#24292E;">        time.sleep(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        search_results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> driver.find_element_by_xpath(</span><span style="color:#032F62;">&#39;//*[@id=&quot;1&quot;]/h3/a&#39;</span><span style="color:#24292E;">).get_attribute(</span><span style="color:#032F62;">&#39;innerHTML&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(search_results)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> (expect_string </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> search_results) </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main([</span><span style="color:#032F62;">&#39;-s&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-v&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;tests_pytest_ddt&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>在命令行中通过如下方式再次运行即可：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">:\\_Automation\\lagouAPITest</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">pytest tests_pytest_ddt </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">s </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">D</span><span style="color:#24292E;">:\\_Automation\\lagouAPITest</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">pytest tests_pytest_ddt </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">s </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">v</span></span></code></pre></div><p>运行后查看结果，你会发现测试被正确执行，测试数据是通过 Pandas 从 Excel 指定的 sheet 名中获取的。</p><p>事实在，Pandas 不仅仅能读取 Excel 文件，还可以读取 HTML 文件、TXT 文件、JSON 文件、数据库文件 (.sql) 等。在数据分析领域，Pandas 使用非常广泛，更多具体的 Pandas 使用，请自行查阅。</p><h4 id="_2-自定义实现数据驱动" tabindex="-1">2.自定义实现数据驱动 <a class="header-anchor" href="#_2-自定义实现数据驱动" aria-label="Permalink to &quot;2.自定义实现数据驱动&quot;">​</a></h4><p>我在第 11、12 课时的&quot; DDT：博采众长，数据驱动的秘诀&quot;里，详细讲解了如何使用 ddt、pytest.mark.parametrize 和 pytest.fixture 来实现数据驱动。今天我来讲 pytest 里另外一个实现数据驱动的方式 pytest_generate_tests。</p><ul><li><strong>直接提供数据实现数据驱动</strong></li></ul><p>pytest 中提供了一个钩子函数，名为 pytest_generate_tests。此函数在 pytest 收集测试函数时会被调用。通过传入 metafunc 对象，我们可以&quot;自定义&quot;数据驱动，即通过调用metafunc.parametrize() 来进行参数化。</p><p>我们先看一个例子：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 定义文件test_customize_ddt.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_generate_tests</span><span style="color:#E1E4E8;">(metafunc):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 查看metafunc有多少种可用方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">dir</span><span style="color:#E1E4E8;">(metafunc))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;text_para&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> metafunc.fixturenames:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 指定参数化名称，及其对应的值</span></span>
<span class="line"><span style="color:#E1E4E8;">        metafunc.parametrize(</span><span style="color:#9ECBFF;">&quot;text_para&quot;</span><span style="color:#E1E4E8;">, [[</span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&quot;always&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;always&quot;</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&quot;awesome&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;good&quot;</span><span style="color:#E1E4E8;">]])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_func</span><span style="color:#E1E4E8;">(self, text_para):</span></span>
<span class="line"><span style="color:#E1E4E8;">        input_str, output_str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text_para</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(input_str)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(output_str)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> input_str </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> output_str</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main([</span><span style="color:#9ECBFF;">&#39;-s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-v&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;test_pytest_ddt/test_customize_ddt.py&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 定义文件test_customize_ddt.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_generate_tests</span><span style="color:#24292E;">(metafunc):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 查看metafunc有多少种可用方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">dir</span><span style="color:#24292E;">(metafunc))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;text_para&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> metafunc.fixturenames:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 指定参数化名称，及其对应的值</span></span>
<span class="line"><span style="color:#24292E;">        metafunc.parametrize(</span><span style="color:#032F62;">&quot;text_para&quot;</span><span style="color:#24292E;">, [[</span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&quot;always&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;always&quot;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&quot;awesome&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;good&quot;</span><span style="color:#24292E;">]])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_func</span><span style="color:#24292E;">(self, text_para):</span></span>
<span class="line"><span style="color:#24292E;">        input_str, output_str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text_para</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(input_str)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(output_str)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> input_str </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> output_str</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main([</span><span style="color:#032F62;">&#39;-s&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-v&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;test_pytest_ddt/test_customize_ddt.py&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>直接在 Pycharm 中运行此文件，或者在命令行中通过如下方式运行：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">D:\\_Automation\\lagouAPITest&gt;pytest -s -v tests_pytest_ddt/test_customize_ddt.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">D:\\_Automation\\lagouAPITest&gt;pytest -s -v tests_pytest_ddt/test_customize_ddt.py</span></span></code></pre></div><p>运行后查看结果：</p>`,58),u=p(`<p>可以看到，有 3 个测试用例被执行了，执行的测试用例是 test_func 这个函数，执行的结果是两个成功，一个失败（注意，一个用例失败不会影响其他用例执行）。其使用的数据正好就是我们提供的这组数据：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[[</span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&quot;always&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;always&quot;</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&quot;awesome&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;good&quot;</span><span style="color:#E1E4E8;">]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[[</span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&quot;always&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;always&quot;</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&quot;awesome&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;good&quot;</span><span style="color:#24292E;">]]</span></span></code></pre></div><p>下面我来讲解下这段代码。</p><p>首先，我定义了一个函数，名字为 pytest_generate_tests(metafunc)， 注意这个函数名称和参数名称均是固定的，不可更改。</p><p>然后，我在函数 pytest_generate_tests 中（第 7 行）打印出 metafunc 可用的方法有哪些。 事实上，通过查看源代码可以发现，metafunc 支持的属性有：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#: Access to </span><span style="color:#B392F0;">the</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">\`_pytest.config.Config\`</span><span style="color:#E1E4E8;"> object for the test session.</span></span>
<span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#B392F0;">用于在测试session中访问</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">\`_pytest.config.Config\`</span><span style="color:#E1E4E8;">对象</span></span>
<span class="line"><span style="color:#E1E4E8;">metafunc.config</span></span>
<span class="line"><span style="color:#E1E4E8;">#: The </span><span style="color:#F97583;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defined</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">in</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">#： </span><span style="color:#B392F0;">代表使用参数名称进行参数化的test</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function所在的模块对象</span></span>
<span class="line"><span style="color:#B392F0;">metafunc</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">module</span></span>
<span class="line"><span style="color:#E1E4E8;">#: </span><span style="color:#B392F0;">Underlying</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">#： </span><span style="color:#B392F0;">测试用例对象</span></span>
<span class="line"><span style="color:#B392F0;">metafunc</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">function</span></span>
<span class="line"><span style="color:#E1E4E8;">#: </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fixture</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">names</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">required</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">#： </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function参数化所需的fixtures名字</span></span>
<span class="line"><span style="color:#B392F0;">metafunc</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">fixturenames</span></span>
<span class="line"><span style="color:#E1E4E8;">#: </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defined</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">None</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#E1E4E8;"># </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">function所属的类的类对象</span><span style="color:#E1E4E8;">，</span><span style="color:#B392F0;">如果没有</span><span style="color:#E1E4E8;">，</span><span style="color:#B392F0;">就是None</span></span>
<span class="line"><span style="color:#B392F0;">metafunc</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">cls</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#: Access to </span><span style="color:#6F42C1;">the</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">:</span><span style="color:#032F62;">\`_pytest.config.Config\`</span><span style="color:#24292E;"> object for the test session.</span></span>
<span class="line"><span style="color:#24292E;"># </span><span style="color:#6F42C1;">用于在测试session中访问</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">:</span><span style="color:#032F62;">\`_pytest.config.Config\`</span><span style="color:#24292E;">对象</span></span>
<span class="line"><span style="color:#24292E;">metafunc.config</span></span>
<span class="line"><span style="color:#24292E;">#: The </span><span style="color:#D73A49;">module</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">object</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">where</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">the</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">is</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defined</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">in</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">#： </span><span style="color:#6F42C1;">代表使用参数名称进行参数化的test</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function所在的模块对象</span></span>
<span class="line"><span style="color:#6F42C1;">metafunc</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">module</span></span>
<span class="line"><span style="color:#24292E;">#: </span><span style="color:#6F42C1;">Underlying</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Python</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">#： </span><span style="color:#6F42C1;">测试用例对象</span></span>
<span class="line"><span style="color:#6F42C1;">metafunc</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">function</span></span>
<span class="line"><span style="color:#24292E;">#: </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">of</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fixture</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">names</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">required</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">by</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">the</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;">#： </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function参数化所需的fixtures名字</span></span>
<span class="line"><span style="color:#6F42C1;">metafunc</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">fixturenames</span></span>
<span class="line"><span style="color:#24292E;">#: </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">object</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">where</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">the</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">is</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defined</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">in</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">None</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#24292E;"># </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">function所属的类的类对象</span><span style="color:#24292E;">，</span><span style="color:#6F42C1;">如果没有</span><span style="color:#24292E;">，</span><span style="color:#6F42C1;">就是None</span></span>
<span class="line"><span style="color:#6F42C1;">metafunc</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">cls</span></span></code></pre></div><p>我使用 metafunc.fixturenames 列出所有可能的 fixture 名字，并当它的名字跟我提供的 fixture 名称一样时，我使用 metafunc.parametrize 函数为其提供参数化的数据值，以便实现数据驱动（8~11 行）。</p><p>接着，我定义了一个测试类 TestClass，然后在其中定义了一个类方法 test_func，并在其中定义了一个&quot;参数&quot; text_para。 而这个&quot;参数&quot;名称 text_para 实际上就是我提供的 fixtures。</p><p>最后，pytest.main() 函数运行， 在收集测试函数时，会找到 test_func 这个函数，然后在运行这个函数前，函数 pytest_generate_tests 会被调用，通过查看代码运行，你可以看到：</p><p>metafunc 对象被传入进来，它的 5 个属性分别是：</p>`,10),h=a("p",null,"接着 pytest 会在其中经过一系列复杂的操作，最终为 text_para 这个 fixture 完成参数化，并且根据数据的组数将测试用例 test_func 分成多个测试用例，接着依次运行新生成的测试用例，并且为每一个测试用例提供一组数据，如下：",-1),m=p(`<p>接着，这些测试用例依次运行完毕，输出结果。</p><ul><li><strong>从外部文件提供数据实现数据驱动</strong></li></ul><p>数据驱动的最大好处就是更改数据不需要更改代码， 所以将测试数据抽离出来到外部文件是通用的做法，下面我们就来看下如何做。</p><p>在 lagouAPITest 项目根目录下创建如下文件目录：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">lagouAPITest</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">tests_pytest_new_ddt</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">test_new_ddt.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">data_new_ddt.py</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">|--</span><span style="color:#E1E4E8;">__init__.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">|--</span><span style="color:#24292E;">lagouAPITest</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">tests_pytest_new_ddt</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">test_new_ddt.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">data_new_ddt.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">|--</span><span style="color:#24292E;">__init__.py</span></span></code></pre></div><p>其中 data_new_ddt.py 文件的内容如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">tests </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;iTesting&quot;</span><span style="color:#E1E4E8;">], </span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&quot;always&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;always&quot;</span><span style="color:#E1E4E8;">], </span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&quot;awesome&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;good&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">tests </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;iTesting&quot;</span><span style="color:#24292E;">], </span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&quot;always&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;always&quot;</span><span style="color:#24292E;">], </span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&quot;awesome&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;good&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>test_new_ddt.py 的代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> importlib</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_generate_tests</span><span style="color:#E1E4E8;">(metafunc):</span></span>
<span class="line"><span style="color:#E1E4E8;">    package_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> metafunc.module.</span><span style="color:#79B8FF;">__package__</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> fixture </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> metafunc.fixturenames:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> fixture.startswith(</span><span style="color:#9ECBFF;">&#39;data_&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 加载测试数据</span></span>
<span class="line"><span style="color:#E1E4E8;">            module_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> package_name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> fixture</span></span>
<span class="line"><span style="color:#E1E4E8;">            tests </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TestClass.load_tests(module_name)</span></span>
<span class="line"><span style="color:#E1E4E8;">            metafunc.parametrize(fixture, tests)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@</span><span style="color:#79B8FF;">staticmethod</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">load_tests</span><span style="color:#E1E4E8;">(name):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 加载测试数据文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        tests_module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> importlib.import_module(name)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># 针对每一个测试文件，赋予不同的测试值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> tests_module.tests:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_func</span><span style="color:#E1E4E8;">(self, data_new_ddt):</span></span>
<span class="line"><span style="color:#E1E4E8;">        input_str, output_str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data_new_ddt</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> input_str </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> output_str</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;__main__&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytest.main(</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;-s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-v&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;tests_new_ddt/test_new_ddt.py&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> importlib</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_generate_tests</span><span style="color:#24292E;">(metafunc):</span></span>
<span class="line"><span style="color:#24292E;">    package_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> metafunc.module.</span><span style="color:#005CC5;">__package__</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> fixture </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> metafunc.fixturenames:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> fixture.startswith(</span><span style="color:#032F62;">&#39;data_&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 加载测试数据</span></span>
<span class="line"><span style="color:#24292E;">            module_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> package_name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> fixture</span></span>
<span class="line"><span style="color:#24292E;">            tests </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TestClass.load_tests(module_name)</span></span>
<span class="line"><span style="color:#24292E;">            metafunc.parametrize(fixture, tests)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">staticmethod</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">load_tests</span><span style="color:#24292E;">(name):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 加载测试数据文件</span></span>
<span class="line"><span style="color:#24292E;">        tests_module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> importlib.import_module(name)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 针对每一个测试文件，赋予不同的测试值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> tests_module.tests:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_func</span><span style="color:#24292E;">(self, data_new_ddt):</span></span>
<span class="line"><span style="color:#24292E;">        input_str, output_str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data_new_ddt</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> input_str </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> output_str</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;__main__&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytest.main(</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;-s&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-v&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;tests_new_ddt/test_new_ddt.py&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>这段代码比较复杂，我来一一解释。</p><p>首先，函数 pytest_generate_tests 仍然是实现了把给定的 fixture（data_new_ddt）加载进来，并且根据测试数据生成多组测试用例。</p><p>其次， 测试类 TestClass 中的 load_tests 静态方法实现了解析测试数据并逐个返回， 这里用了yield。 yield 在fixture 里是个特殊的存在，它用于返回 fixture 的分组测试数据。正因为此，通过 load_tests 函数返回的数据才能正确地被 metafunc.parametrize 参数化（把 load_tests 里的 yield 改成 true，测试会出错）。</p><p>最后， 分组测试数据被生成的多组新测试用例返回，并用于测试方法 test_func 中，从而实现了从外部文件提供数据实现数据启动。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本节课我们首先学习了数据驱动的新姿势 ------ Pandas。不同格式数据驱动的要点在于解析这些文件并将数据转换成 pytest.mark.parametrize 认可的数据格式。</p><p>至此，JSON、YAML、TXT、CSV、xlsx、sql 甚至 .py 格式的数据格式，对你来说就仅仅是写一个数据解析方法而已。</p><p>其次，本节课着重介绍了通过 pytest 的预留方法 pytest_generate_tests 来实现数据驱动。使用 pytest_generate_tests 实现数据驱动，可以允许你灵活地定制你的数据驱动模式。这部分代码稍微有点复杂，在了解其原理时，建议大家多读 pytest 源码，所谓书读千遍，其意自现。</p><h3 id="课后作业" tabindex="-1">课后作业 <a class="header-anchor" href="#课后作业" aria-label="Permalink to &quot;课后作业&quot;">​</a></h3><p>在本节课中，介绍数据驱动时，为了讲解简单，我实现数据驱动的 fixture 方法，都是直接放在测试文件中的，例如 read_data_from_excel、read_data_from_pandas 等。请尝试将他们放入 conftest.py 文件中 ，并更改你的代码使之能够正确运行。</p><p>好了，今天的课程就到这里，有任何问题也可以在下方讨论区留言，我是蔡超， 我们下节课再见。</p><hr><p>关注公众号 iTesting，回复&quot;测试框架&quot;，查看更多自研测试框架的技术原理。</p>`,22);function A(f,g,C,D,v,B){const n=e("Image");return t(),c("div",null,[E,y,i,l(n,{alt:"Lark20201028-190551.png",src:"https://s0.lgstatic.com/i/image/M00/64/E7/CgqCHl-ZUKyAIUsJAALUSW5S0PI459.png"}),s(),d,l(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/64/E6/CgqCHl-ZTzeAXyTQAACWaRTvsc0516.png"}),s(),F,l(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/64/E7/CgqCHl-ZUAyAOH7TAAAJXFXWlIE940.png"}),s(),_,l(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/64/DB/Ciqc1F-ZT4mAECokAABqMkmXXgs908.png"}),s(),u,l(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/64/DB/Ciqc1F-ZT5CAadvKAAA6CFGmj18747.png"}),s(),h,l(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/64/E7/CgqCHl-ZT6iADUUHAAANxdO_dSA750.png"}),s(),m])}const x=o(r,[["render",A]]);export{b as __pageData,x as default};
