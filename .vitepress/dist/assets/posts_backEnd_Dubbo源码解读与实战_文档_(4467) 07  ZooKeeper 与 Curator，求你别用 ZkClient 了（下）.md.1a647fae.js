import{_ as p,j as o,o as e,h as t,k as a,f as l,Q as s}from"./chunks/framework.d3daa342.js";const k=JSON.parse('{"title":"07ZooKeeper与Curator，求你别用ZkClient了（下）","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4467) 07  ZooKeeper 与 Curator，求你别用 ZkClient 了（下）.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4467) 07  ZooKeeper 与 Curator，求你别用 ZkClient 了（下）.md","lastUpdated":1696682708000}'),c={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4467) 07  ZooKeeper 与 Curator，求你别用 ZkClient 了（下）.md"},r=s('<h1 id="_07zookeeper与curator-求你别用zkclient了-下" tabindex="-1">07ZooKeeper与Curator，求你别用ZkClient了（下） <a class="header-anchor" href="#_07zookeeper与curator-求你别用zkclient了-下" aria-label="Permalink to &quot;07ZooKeeper与Curator，求你别用ZkClient了（下）&quot;">​</a></h1><p>在上一课时我们介绍了 ZooKeeper 的核心概念以及工作原理，这里我们再简单了解一下 ZooKeeper 客户端的相关内容，毕竟在实际工作中，直接使用客户端与 ZooKeeper 进行交互的次数比深入 ZooKeeper 底层进行扩展和二次开发的次数要多得多。从 ZooKeeper 架构的角度看，使用 Dubbo 的业务节点也只是一个 ZooKeeper 客户端罢了。</p><p>ZooKeeper 官方提供的客户端支持了一些基本操作，例如，创建会话、创建节点、读取节点、更新数据、删除节点和检查节点是否存在等，但在实际开发中只有这些简单功能是根本不够的。而且，ZooKeeper 本身的一些 API 也存在不足，例如：</p><ul><li><p>ZooKeeper 的 Watcher 是一次性的，每次触发之后都需要重新进行注册。</p></li><li><p>会话超时之后，没有实现自动重连的机制。</p></li><li><p>ZooKeeper 提供了非常详细的异常，异常处理显得非常烦琐，对开发新手来说，非常不友好。</p></li><li><p>只提供了简单的 byte[] 数组的接口，没有提供基本类型以及对象级别的序列化。</p></li><li><p>创建节点时，如果节点存在抛出异常，需要自行检查节点是否存在。</p></li><li><p>删除节点就无法实现级联删除。</p></li></ul><p><strong>常见的第三方开源 ZooKeeper 客户端有 ZkClient 和 Apache Curator</strong>。</p><p>ZkClient 是在 ZooKeeper 原生 API 接口的基础上进行了包装，虽然 ZkClient 解决了 ZooKeeper 原生 API 接口的很多问题，提供了非常简洁的 API 接口，实现了会话超时自动重连的机制，解决了 Watcher 反复注册等问题，但其缺陷也非常明显。例如，文档不全、重试机制难用、异常全部转换成了 RuntimeException、没有足够的参考示例等。可见，一个简单易用、高效可靠的 ZooKeeper 客户端是多么重要。</p><h3 id="apache-curator-基础" tabindex="-1">Apache Curator 基础 <a class="header-anchor" href="#apache-curator-基础" aria-label="Permalink to &quot;Apache Curator 基础&quot;">​</a></h3><p><strong>Apache Curator 是 Apache 基金会提供的一款 ZooKeeper 客户端，它提供了一套易用性和可读性非常强的 Fluent 风格的客户端 API ，可以帮助我们快速搭建稳定可靠的 ZooKeeper 客户端程序。</strong></p><p>为便于你更全面了解 Curator 的功能，我整理出了如下表格，展示了 Curator 提供的 jar 包：</p>',9),E=s(`<p>下面我们从最基础的使用展开，逐一介绍 Apache Curator 在实践中常用的核心功能，开始我们的 Apache Curator 之旅。</p><h4 id="_1-基本操作" tabindex="-1">1. 基本操作 <a class="header-anchor" href="#_1-基本操作" aria-label="Permalink to &quot;1. 基本操作&quot;">​</a></h4><p>简单了解了 Apache Curator 各个组件的定位之后，下面我们立刻通过一个示例上手使用 Curator。首先，我们创建一个 Maven 项目，并添加 Apache Curator 的依赖：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.curator&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;curator-recipes&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.0.1&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.curator&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;curator-recipes&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.0.1&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后写一个 main 方法，其中会说明 Curator 提供的基础 API 的使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String zkAddress </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#E1E4E8;">        RetryPolicy retryPolicy </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExponentialBackoffRetry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#E1E4E8;">        CuratorFramework client </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            CuratorFrameworkFactory.</span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 下面简单说明Curator中常用的API </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// create()方法创建ZNode，可以调用额外方法来设置节点类型、添加Watcher </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 下面是创建一个名为&quot;user&quot;的持久节点，其中会存储一个test字符串 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(CreateMode.PERSISTENT) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(path); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 输出:/user </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// checkExists()方法可以检查一个节点是否存在 </span></span>
<span class="line"><span style="color:#E1E4E8;">        Stat stat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">checkExists</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(stat</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 输出:true，返回的Stat不为null，即表示节点存在 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// getData()方法可以获取一个节点中的数据 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(data)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 输出:test </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// setData()方法可以设置一个节点中的数据 </span></span>
<span class="line"><span style="color:#E1E4E8;">        stat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(data)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 输出:data </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 在/user节点下，创建多个临时顺序节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            client.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(CreateMode.EPHEMERAL_SEQUENTIAL) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/child-&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取所有子节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(children); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 输出：[child-0000000002, child-0000000001, child-0000000000] </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// delete()方法可以删除指定节点，deletingChildrenIfNeeded()方法 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 会级联删除子节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">deletingChildrenIfNeeded</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#24292E;">        String zkAddress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127.0.0.1:2181&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#24292E;">        RetryPolicy retryPolicy </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExponentialBackoffRetry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#24292E;">        CuratorFramework client </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            CuratorFrameworkFactory.</span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 下面简单说明Curator中常用的API </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// create()方法创建ZNode，可以调用额外方法来设置节点类型、添加Watcher </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 下面是创建一个名为&quot;user&quot;的持久节点，其中会存储一个test字符串 </span></span>
<span class="line"><span style="color:#24292E;">        String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(CreateMode.PERSISTENT) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(path); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 输出:/user </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// checkExists()方法可以检查一个节点是否存在 </span></span>
<span class="line"><span style="color:#24292E;">        Stat stat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">checkExists</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(stat</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 输出:true，返回的Stat不为null，即表示节点存在 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// getData()方法可以获取一个节点中的数据 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(data)); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 输出:test </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// setData()方法可以设置一个节点中的数据 </span></span>
<span class="line"><span style="color:#24292E;">        stat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(data)); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 输出:data </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在/user节点下，创建多个临时顺序节点 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            client.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(CreateMode.EPHEMERAL_SEQUENTIAL) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/child-&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取所有子节点 </span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(children); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 输出：[child-0000000002, child-0000000001, child-0000000000] </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// delete()方法可以删除指定节点，deletingChildrenIfNeeded()方法 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 会级联删除子节点 </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">deletingChildrenIfNeeded</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-background" tabindex="-1">2. Background <a class="header-anchor" href="#_2-background" aria-label="Permalink to &quot;2. Background&quot;">​</a></h4><p>上面介绍的创建、删除、更新、读取等方法都是同步的，Curator 提供异步接口，引入了BackgroundCallback 这个回调接口以及 CuratorListener 这个监听器，用于处理 Background 调用之后服务端返回的结果信息。BackgroundCallback 接口和 CuratorListener 监听器中接收一个 CuratorEvent 的参数，里面包含事件类型、响应码、节点路径等详细信息。</p><p>下面我们通过一个示例说明 BackgroundCallback 接口以及 CuratorListener 监听器的基本使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main2</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String zkAddress </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#E1E4E8;">        RetryPolicy retryPolicy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExponentialBackoffRetry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#E1E4E8;">        CuratorFramework client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CuratorFrameworkFactory </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加CuratorListener监听器，针对不同的事件进行处理 </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">getCuratorListenable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CuratorListener</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">eventReceived</span><span style="color:#E1E4E8;">(CuratorFramework </span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  CuratorEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">()) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> CREATE</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;CREATE:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                              event.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> DELETE</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DELETE:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                               event.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> EXISTS</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;EXISTS:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                                event.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> GET_DATA</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;GET_DATA:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                          event.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;,&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                              </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SET_DATA</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SET_DATA:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                                 </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> CHILDREN</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;CHILDREN:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                                event.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        }); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 注意:下面所有的操作都添加了inBackground()方法，转换为后台操作 </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(CreateMode.PERSISTENT) </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">inBackground</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">checkExists</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">inBackground</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">inBackground</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;setData-Test&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">inBackground</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            client.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(CreateMode.EPHEMERAL_SEQUENTIAL) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">inBackground</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/child-&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">inBackground</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加BackgroundCallback </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">inBackground</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BackgroundCallback</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processResult</span><span style="color:#E1E4E8;">(CuratorFramework </span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                CuratorEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in background:&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                      </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        }).</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">deletingChildrenIfNeeded</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">inBackground</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.in.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 输出： </span></span>
<span class="line"><span style="color:#6A737D;">// CREATE:/user </span></span>
<span class="line"><span style="color:#6A737D;">// EXISTS:/user </span></span>
<span class="line"><span style="color:#6A737D;">// GET_DATA:/user,setData-Test </span></span>
<span class="line"><span style="color:#6A737D;">// CREATE:/user/child- </span></span>
<span class="line"><span style="color:#6A737D;">// CREATE:/user/child- </span></span>
<span class="line"><span style="color:#6A737D;">// CREATE:/user/child- </span></span>
<span class="line"><span style="color:#6A737D;">// CHILDREN:/user </span></span>
<span class="line"><span style="color:#6A737D;">// DELETE:/user</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main2</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#24292E;">        String zkAddress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127.0.0.1:2181&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#24292E;">        RetryPolicy retryPolicy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExponentialBackoffRetry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#24292E;">        CuratorFramework client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CuratorFrameworkFactory </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加CuratorListener监听器，针对不同的事件进行处理 </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">getCuratorListenable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CuratorListener</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">eventReceived</span><span style="color:#24292E;">(CuratorFramework </span><span style="color:#E36209;">client</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  CuratorEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> CREATE</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CREATE:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                              event.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> DELETE</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DELETE:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                               event.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> EXISTS</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;EXISTS:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                                event.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> GET_DATA</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GET_DATA:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                          event.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;,&quot;</span></span>
<span class="line"><span style="color:#24292E;">                              </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SET_DATA</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SET_DATA:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                                 </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> CHILDREN</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CHILDREN:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                                event.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        }); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意:下面所有的操作都添加了inBackground()方法，转换为后台操作 </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(CreateMode.PERSISTENT) </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">inBackground</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">checkExists</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">inBackground</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">inBackground</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;setData-Test&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">inBackground</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            client.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(CreateMode.EPHEMERAL_SEQUENTIAL) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">inBackground</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/child-&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">inBackground</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加BackgroundCallback </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">inBackground</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BackgroundCallback</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processResult</span><span style="color:#24292E;">(CuratorFramework </span><span style="color:#E36209;">client</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                CuratorEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in background:&quot;</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        }).</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">deletingChildrenIfNeeded</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">inBackground</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        System.in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6A737D;">// 输出： </span></span>
<span class="line"><span style="color:#6A737D;">// CREATE:/user </span></span>
<span class="line"><span style="color:#6A737D;">// EXISTS:/user </span></span>
<span class="line"><span style="color:#6A737D;">// GET_DATA:/user,setData-Test </span></span>
<span class="line"><span style="color:#6A737D;">// CREATE:/user/child- </span></span>
<span class="line"><span style="color:#6A737D;">// CREATE:/user/child- </span></span>
<span class="line"><span style="color:#6A737D;">// CREATE:/user/child- </span></span>
<span class="line"><span style="color:#6A737D;">// CHILDREN:/user </span></span>
<span class="line"><span style="color:#6A737D;">// DELETE:/user</span></span></code></pre></div><h4 id="_3-连接状态监听" tabindex="-1">3. 连接状态监听 <a class="header-anchor" href="#_3-连接状态监听" aria-label="Permalink to &quot;3. 连接状态监听&quot;">​</a></h4><p>除了基础的数据操作，Curator 还提供了<strong>监听连接状态的监听器------ConnectionStateListener</strong>，它主要是处理 Curator 客户端和 ZooKeeper 服务器间连接的异常情况，例如， 短暂或者长时间断开连接。</p><p>短暂断开连接时，ZooKeeper 客户端会检测到与服务端的连接已经断开，但是服务端维护的客户端 Session 尚未过期，之后客户端和服务端重新建立了连接；当客户端重新连接后，由于 Session 没有过期，ZooKeeper 能够保证连接恢复后保持正常服务。</p><p>而长时间断开连接时，Session 已过期，与先前 Session 相关的 Watcher 和临时节点都会丢失。当 Curator 重新创建了与 ZooKeeper 的连接时，会获取到 Session 过期的相关异常，Curator 会销毁老 Session，并且创建一个新的 Session。由于老 Session 关联的数据不存在了，在 ConnectionStateListener 监听到 LOST 事件时，就可以依靠本地存储的数据恢复 Session 了。</p><p><strong>这里 Session 指的是 ZooKeeper 服务器与客户端的会话</strong>。客户端启动的时候会与服务器建立一个 TCP 连接，从第一次连接建立开始，客户端会话的生命周期也开始了。客户端能够通过心跳检测与服务器保持有效的会话，也能够向 ZooKeeper 服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的 Watch 事件通知。</p><p>我们可以设置客户端会话的超时时间（sessionTimeout），当服务器压力太大、网络故障或是客户端主动断开连接等原因导致连接断开时，只要客户端在 sessionTimeout 规定的时间内能够重新连接到 ZooKeeper 集群中任意一个实例，那么之前创建的会话仍然有效。ZooKeeper 通过 sessionID 唯一标识 Session，所以在 ZooKeeper 集群中，sessionID 需要保证全局唯一。 由于 ZooKeeper 会将 Session 信息存放到硬盘中，即使节点重启，之前未过期的 Session 仍然会存在。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main3</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String zkAddress </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#E1E4E8;">        RetryPolicy retryPolicy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExponentialBackoffRetry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#E1E4E8;">        CuratorFramework client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CuratorFrameworkFactory </span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加ConnectionStateListener监听器 </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">getConnectionStateListenable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConnectionStateListener</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stateChanged</span><span style="color:#E1E4E8;">(CuratorFramework </span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ConnectionState </span><span style="color:#FFAB70;">newState</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 这里我们可以针对不同的连接状态进行特殊的处理 </span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (newState) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> CONNECTED</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 第一次成功连接到ZooKeeper之后会进入该状态。 </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 对于每个CuratorFramework对象，此状态仅出现一次 </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> SUSPENDED</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//   ZooKeeper的连接丢失 </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> RECONNECTED</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 丢失的连接被重新建立 </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> LOST</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;">// 当Curator认为会话已经过期时，则进入此状态 </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> READ_ONLY</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 连接进入只读模式 </span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        }); </span></span>
<span class="line"><span style="color:#E1E4E8;">   } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main3</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#24292E;">        String zkAddress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127.0.0.1:2181&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#24292E;">        RetryPolicy retryPolicy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExponentialBackoffRetry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#24292E;">        CuratorFramework client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CuratorFrameworkFactory </span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加ConnectionStateListener监听器 </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">getConnectionStateListenable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConnectionStateListener</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stateChanged</span><span style="color:#24292E;">(CuratorFramework </span><span style="color:#E36209;">client</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    ConnectionState </span><span style="color:#E36209;">newState</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 这里我们可以针对不同的连接状态进行特殊的处理 </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (newState) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> CONNECTED</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 第一次成功连接到ZooKeeper之后会进入该状态。 </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 对于每个CuratorFramework对象，此状态仅出现一次 </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SUSPENDED</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//   ZooKeeper的连接丢失 </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> RECONNECTED</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 丢失的连接被重新建立 </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> LOST</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 当Curator认为会话已经过期时，则进入此状态 </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> READ_ONLY</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 连接进入只读模式 </span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">                } </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        }); </span></span>
<span class="line"><span style="color:#24292E;">   } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_4-watcher" tabindex="-1">4. Watcher <a class="header-anchor" href="#_4-watcher" aria-label="Permalink to &quot;4. Watcher&quot;">​</a></h4><p>Watcher 监听机制是 ZooKeeper 中非常重要的特性，可以监听某个节点上发生的特定事件，例如，监听节点数据变更、节点删除、子节点状态变更等事件。当相应事件发生时，ZooKeeper 会产生一个 Watcher 事件，并且发送到客户端。通过 Watcher 机制，就可以使用 ZooKeeper 实现分布式锁、集群管理等功能。</p><p>在 Curator 客户端中，我们可以使用 usingWatcher() 方法添加 Watcher，前面示例中，能够添加 Watcher 的有 checkExists()、getData()以及 getChildren() 三个方法，下面我们来看一个具体的示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main4</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String zkAddress </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#E1E4E8;">        RetryPolicy retryPolicy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExponentialBackoffRetry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#E1E4E8;">        CuratorFramework client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CuratorFrameworkFactory </span></span>
<span class="line"><span style="color:#E1E4E8;">              .</span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">           client.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">withMode</span><span style="color:#E1E4E8;">(CreateMode.PERSISTENT) </span></span>
<span class="line"><span style="color:#E1E4E8;">                 .</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这里通过usingWatcher()方法添加一个Watcher </span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getChildren</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">usingWatcher</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CuratorWatcher</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(WatchedEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">                    event.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        }).</span><span style="color:#B392F0;">forPath</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(children); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.in.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main4</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#24292E;">        String zkAddress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127.0.0.1:2181&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#24292E;">        RetryPolicy retryPolicy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExponentialBackoffRetry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#24292E;">        CuratorFramework client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CuratorFrameworkFactory </span></span>
<span class="line"><span style="color:#24292E;">              .</span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">           client.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">withMode</span><span style="color:#24292E;">(CreateMode.PERSISTENT) </span></span>
<span class="line"><span style="color:#24292E;">                 .</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里通过usingWatcher()方法添加一个Watcher </span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getChildren</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">usingWatcher</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CuratorWatcher</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(WatchedEvent </span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                    event.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        }).</span><span style="color:#6F42C1;">forPath</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(children); </span></span>
<span class="line"><span style="color:#24292E;">        System.in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，我们打开 ZooKeeper 的命令行客户端，在 /user 节点下先后添加两个子节点，如下所示：</p>`,22),y=s(`<p>此时我们只得到一行输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">NodeChildrenChanged,</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">NodeChildrenChanged,</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span></span></code></pre></div><p>之所以这样，是因为通过 usingWatcher() 方法添加的 CuratorWatcher 只会触发一次，触发完毕后就会销毁。checkExists() 方法、getData() 方法通过 usingWatcher() 方法添加的 Watcher 也是一样的原理，只不过监听的事件不同，你若感兴趣的话，可以自行尝试一下。</p><p>相信你已经感受到，直接通过注册 Watcher 进行事件监听不是特别方便，需要我们自己反复注册 Watcher。<strong>Apache Curator 引入了 Cache 来实现对 ZooKeeper 服务端事件的监听</strong>。Cache 是 Curator 中对事件监听的包装，其对事件的监听其实可以近似看作是一个本地缓存视图和远程ZooKeeper 视图的对比过程。同时，Curator 能够自动为开发人员处理反复注册监听，从而大大简化了代码的复杂程度。</p><p>实践中常用的 Cache 有三大类：</p><ul><li><p><strong>NodeCache。</strong> 对一个节点进行监听，监听事件包括指定节点的增删改操作。注意哦，NodeCache 不仅可以监听数据节点的内容变更，也能监听指定节点是否存在，如果原本节点不存在，那么 Cache 就会在节点被创建后触发 NodeCacheListener，删除操作亦然。</p></li><li><p><strong>PathChildrenCache。</strong> 对指定节点的一级子节点进行监听，监听事件包括子节点的增删改操作，但是不对该节点的操作监听。</p></li><li><p><strong>TreeCache。</strong> 综合 NodeCache 和 PathChildrenCache 的功能，是对指定节点以及其子节点进行监听，同时还可以设置监听的深度。</p></li></ul><p>下面通过示例介绍上述三种 Cache 的基本使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main5</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#E1E4E8;">        String zkAddress </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;127.0.0.1:2181&quot;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#E1E4E8;">        RetryPolicy retryPolicy </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExponentialBackoffRetry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#E1E4E8;">        CuratorFramework client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CuratorFrameworkFactory </span></span>
<span class="line"><span style="color:#E1E4E8;">           .</span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建NodeCache，监听的是&quot;/user&quot;这个节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">        NodeCache nodeCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeCache</span><span style="color:#E1E4E8;">(client, </span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// start()方法有个boolean类型的参数，默认是false。如果设置为true， </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 那么NodeCache在第一次启动的时候就会立刻从ZooKeeper上读取对应节点的 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 数据内容，并保存在Cache中。 </span></span>
<span class="line"><span style="color:#E1E4E8;">        nodeCache.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (nodeCache.</span><span style="color:#B392F0;">getCurrentData</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NodeCache节点初始化数据为：&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(nodeCache.</span><span style="color:#B392F0;">getCurrentData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NodeCache节点数据为空&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加监听器 </span></span>
<span class="line"><span style="color:#E1E4E8;">        nodeCache.</span><span style="color:#B392F0;">getListenable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            String data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(nodeCache.</span><span style="color:#B392F0;">getCurrentData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NodeCache节点路径：&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> nodeCache.</span><span style="color:#B392F0;">getCurrentData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;，节点数据为：&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> data); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建PathChildrenCache实例，监听的是&quot;user&quot;这个节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">        PathChildrenCache childrenCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PathChildrenCache</span><span style="color:#E1E4E8;">(client, </span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// StartMode指定的初始化的模式 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// NORMAL:普通异步初始化 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// BUILD_INITIAL_CACHE:同步初始化 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// POST_INITIALIZED_EVENT:异步初始化，初始化之后会触发事件 </span></span>
<span class="line"><span style="color:#E1E4E8;">        childrenCache.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// childrenCache.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// childrenCache.start(PathChildrenCache.StartMode.NORMAL); </span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">ChildData</span><span style="color:#E1E4E8;">&gt; children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> childrenCache.</span><span style="color:#B392F0;">getCurrentData</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;获取子节点列表：&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果是BUILD_INITIAL_CACHE可以获取这个数据，如果不是就不行 </span></span>
<span class="line"><span style="color:#E1E4E8;">        children.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(childData </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(childData.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }); </span></span>
<span class="line"><span style="color:#E1E4E8;">        childrenCache.</span><span style="color:#B392F0;">getListenable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">(((client1, event) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(LocalDateTime.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;  &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(PathChildrenCacheEvent.Type.INITIALIZED)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;PathChildrenCache:子节点初始化成功...&quot;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(PathChildrenCacheEvent.Type.CHILD_ADDED)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                String path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;PathChildrenCache添加子节点:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;PathChildrenCache子节点数据:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(PathChildrenCacheEvent.Type.CHILD_REMOVED)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;PathChildrenCache删除子节点:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(PathChildrenCacheEvent.Type.CHILD_UPDATED)) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;PathChildrenCache修改子节点路径:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;PathChildrenCache修改子节点数据:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">())); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        })); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建TreeCache实例监听&quot;user&quot;节点 </span></span>
<span class="line"><span style="color:#E1E4E8;">        TreeCache cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TreeCache.</span><span style="color:#B392F0;">newBuilder</span><span style="color:#E1E4E8;">(client, </span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">setCacheData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        cache.</span><span style="color:#B392F0;">getListenable</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addListener</span><span style="color:#E1E4E8;">((c, event) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TreeCache,type=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; path=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TreeCache,type=&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.</span><span style="color:#B392F0;">getType</span><span style="color:#E1E4E8;">()); </span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span></span>
<span class="line"><span style="color:#E1E4E8;">        }); </span></span>
<span class="line"><span style="color:#E1E4E8;">        cache.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        System.in.</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main5</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Zookeeper集群地址，多个节点地址可以用逗号分隔 </span></span>
<span class="line"><span style="color:#24292E;">        String zkAddress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127.0.0.1:2181&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 重试策略，如果连接不上ZooKeeper集群，会重试三次，重试间隔会递增 </span></span>
<span class="line"><span style="color:#24292E;">        RetryPolicy retryPolicy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExponentialBackoffRetry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建Curator Client并启动，启动成功之后，就可以与Zookeeper进行交互了 </span></span>
<span class="line"><span style="color:#24292E;">        CuratorFramework client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CuratorFrameworkFactory </span></span>
<span class="line"><span style="color:#24292E;">           .</span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">(zkAddress, retryPolicy); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建NodeCache，监听的是&quot;/user&quot;这个节点 </span></span>
<span class="line"><span style="color:#24292E;">        NodeCache nodeCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeCache</span><span style="color:#24292E;">(client, </span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// start()方法有个boolean类型的参数，默认是false。如果设置为true， </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 那么NodeCache在第一次启动的时候就会立刻从ZooKeeper上读取对应节点的 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 数据内容，并保存在Cache中。 </span></span>
<span class="line"><span style="color:#24292E;">        nodeCache.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nodeCache.</span><span style="color:#6F42C1;">getCurrentData</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NodeCache节点初始化数据为：&quot;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(nodeCache.</span><span style="color:#6F42C1;">getCurrentData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NodeCache节点数据为空&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加监听器 </span></span>
<span class="line"><span style="color:#24292E;">        nodeCache.</span><span style="color:#6F42C1;">getListenable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            String data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(nodeCache.</span><span style="color:#6F42C1;">getCurrentData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NodeCache节点路径：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> nodeCache.</span><span style="color:#6F42C1;">getCurrentData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;，节点数据为：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> data); </span></span>
<span class="line"><span style="color:#24292E;">        }); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建PathChildrenCache实例，监听的是&quot;user&quot;这个节点 </span></span>
<span class="line"><span style="color:#24292E;">        PathChildrenCache childrenCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PathChildrenCache</span><span style="color:#24292E;">(client, </span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// StartMode指定的初始化的模式 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// NORMAL:普通异步初始化 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// BUILD_INITIAL_CACHE:同步初始化 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// POST_INITIALIZED_EVENT:异步初始化，初始化之后会触发事件 </span></span>
<span class="line"><span style="color:#24292E;">        childrenCache.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// childrenCache.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// childrenCache.start(PathChildrenCache.StartMode.NORMAL); </span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">ChildData</span><span style="color:#24292E;">&gt; children </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> childrenCache.</span><span style="color:#6F42C1;">getCurrentData</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;获取子节点列表：&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果是BUILD_INITIAL_CACHE可以获取这个数据，如果不是就不行 </span></span>
<span class="line"><span style="color:#24292E;">        children.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(childData </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(childData.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">        }); </span></span>
<span class="line"><span style="color:#24292E;">        childrenCache.</span><span style="color:#6F42C1;">getListenable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(((client1, event) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(LocalDateTime.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;  &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(PathChildrenCacheEvent.Type.INITIALIZED)) { </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PathChildrenCache:子节点初始化成功...&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(PathChildrenCacheEvent.Type.CHILD_ADDED)) { </span></span>
<span class="line"><span style="color:#24292E;">                String path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PathChildrenCache添加子节点:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PathChildrenCache子节点数据:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(PathChildrenCacheEvent.Type.CHILD_REMOVED)) { </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PathChildrenCache删除子节点:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(PathChildrenCacheEvent.Type.CHILD_UPDATED)) { </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PathChildrenCache修改子节点路径:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PathChildrenCache修改子节点数据:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">())); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        })); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建TreeCache实例监听&quot;user&quot;节点 </span></span>
<span class="line"><span style="color:#24292E;">        TreeCache cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TreeCache.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">(client, </span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">setCacheData</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        cache.</span><span style="color:#6F42C1;">getListenable</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">((c, event) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TreeCache,type=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; path=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TreeCache,type=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.</span><span style="color:#6F42C1;">getType</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">            } </span></span>
<span class="line"><span style="color:#24292E;">        }); </span></span>
<span class="line"><span style="color:#24292E;">        cache.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时，ZooKeeper 集群中存在 /user/test1 和 /user/test2 两个节点，启动上述测试代码，得到的输出如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">NodeCache节点初始化数据为：test </span><span style="color:#6A737D;">//NodeCache的相关输出</span></span>
<span class="line"><span style="color:#E1E4E8;">获取子节点列表：</span><span style="color:#6A737D;">// PathChildrenCache的相关输出 </span></span>
<span class="line"><span style="color:#E1E4E8;">xxx </span></span>
<span class="line"><span style="color:#E1E4E8;">xxx2 </span></span>
<span class="line"><span style="color:#6A737D;">// TreeCache监听到的事件 </span></span>
<span class="line"><span style="color:#E1E4E8;">TreeCache,type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">NODE_ADDED path</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">user </span></span>
<span class="line"><span style="color:#E1E4E8;">TreeCache,type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">NODE_ADDED path</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test1 </span></span>
<span class="line"><span style="color:#E1E4E8;">TreeCache,type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">NODE_ADDED path</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test2 </span></span>
<span class="line"><span style="color:#E1E4E8;">TreeCache,type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">INITIALIZED</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">NodeCache节点初始化数据为：test </span><span style="color:#6A737D;">//NodeCache的相关输出</span></span>
<span class="line"><span style="color:#24292E;">获取子节点列表：</span><span style="color:#6A737D;">// PathChildrenCache的相关输出 </span></span>
<span class="line"><span style="color:#24292E;">xxx </span></span>
<span class="line"><span style="color:#24292E;">xxx2 </span></span>
<span class="line"><span style="color:#6A737D;">// TreeCache监听到的事件 </span></span>
<span class="line"><span style="color:#24292E;">TreeCache,type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">NODE_ADDED path</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">user </span></span>
<span class="line"><span style="color:#24292E;">TreeCache,type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">NODE_ADDED path</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test1 </span></span>
<span class="line"><span style="color:#24292E;">TreeCache,type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">NODE_ADDED path</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test2 </span></span>
<span class="line"><span style="color:#24292E;">TreeCache,type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">INITIALIZED</span></span></code></pre></div><p>接下来，我们在 ZooKeeper 命令行客户端中<strong>更新 /user 节点中的数据</strong>：</p>`,11),i=s(`<p>得到如下输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TreeCache,type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">NODE_UPDATED path</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">user </span></span>
<span class="line"><span style="color:#E1E4E8;">NodeCache节点路径：</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user，节点数据为：userData</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TreeCache,type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">NODE_UPDATED path</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">user </span></span>
<span class="line"><span style="color:#24292E;">NodeCache节点路径：</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user，节点数据为：userData</span></span></code></pre></div><p><strong>创建 /user/test3 节点</strong>：</p>`,3),F=s(`<p>得到输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TreeCache,type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">NODE_ADDED path</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test3 </span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">26T08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">35</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">22.393</span><span style="color:#E1E4E8;">  CHILD_ADDED </span></span>
<span class="line"><span style="color:#E1E4E8;">PathChildrenCache添加子节点</span><span style="color:#F97583;">:/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test3 </span></span>
<span class="line"><span style="color:#E1E4E8;">PathChildrenCache子节点数据</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">xxx3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TreeCache,type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">NODE_ADDED path</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test3 </span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">26T08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">35</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">22.393</span><span style="color:#24292E;">  CHILD_ADDED </span></span>
<span class="line"><span style="color:#24292E;">PathChildrenCache添加子节点</span><span style="color:#D73A49;">:/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test3 </span></span>
<span class="line"><span style="color:#24292E;">PathChildrenCache子节点数据</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">xxx3</span></span></code></pre></div><p><strong>更新 /user/test3 节点的数据</strong>：</p>`,3),C=s(`<p>得到输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TreeCache,type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">NODE_UPDATED path</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test3 </span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">26T08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">43</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">54.604</span><span style="color:#E1E4E8;">  CHILD_UPDATED </span></span>
<span class="line"><span style="color:#E1E4E8;">PathChildrenCache修改子节点路径</span><span style="color:#F97583;">:/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test3 </span></span>
<span class="line"><span style="color:#E1E4E8;">PathChildrenCache修改子节点数据</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">xxx33</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TreeCache,type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">NODE_UPDATED path</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test3 </span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">26T08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">43</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54.604</span><span style="color:#24292E;">  CHILD_UPDATED </span></span>
<span class="line"><span style="color:#24292E;">PathChildrenCache修改子节点路径</span><span style="color:#D73A49;">:/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test3 </span></span>
<span class="line"><span style="color:#24292E;">PathChildrenCache修改子节点数据</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">xxx33</span></span></code></pre></div><p><strong>删除 /user/test3 节点</strong>：</p>`,3),u=s(`<p>得到输出：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">TreeCache,type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">NODE_REMOVED path</span><span style="color:#F97583;">=/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test3 </span></span>
<span class="line"><span style="color:#79B8FF;">2020</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">06</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">26T08</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">44</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">06</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">329</span><span style="color:#E1E4E8;">  CHILD_REMOVED </span></span>
<span class="line"><span style="color:#E1E4E8;">PathChildrenCache删除子节点</span><span style="color:#F97583;">:/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">TreeCache,type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">NODE_REMOVED path</span><span style="color:#D73A49;">=/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test3 </span></span>
<span class="line"><span style="color:#005CC5;">2020</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">06</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">26T08</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">44</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">06</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">329</span><span style="color:#24292E;">  CHILD_REMOVED </span></span>
<span class="line"><span style="color:#24292E;">PathChildrenCache删除子节点</span><span style="color:#D73A49;">:/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test3</span></span></code></pre></div><h3 id="curator-x-discovery-扩展库" tabindex="-1">curator-x-discovery 扩展库 <a class="header-anchor" href="#curator-x-discovery-扩展库" aria-label="Permalink to &quot;curator-x-discovery 扩展库&quot;">​</a></h3><p>为了避免 curator-framework 包过于膨胀，Curator 将很多其他解决方案都拆出来了，作为单独的一个包，例如：curator-recipes、curator-x-discovery、curator-x-rpc 等。</p><p>在后面我们会使用到 curator-x-discovery 来完成一个简易 RPC 框架的注册中心模块。<strong>curator-x-discovery 扩展包是一个服务发现的解决方案</strong>。在 ZooKeeper 中，我们可以使用临时节点实现一个服务注册机制。当服务启动后在 ZooKeeper 的指定 Path 下创建临时节点，服务断掉与 ZooKeeper 的会话之后，其相应的临时节点就会被删除。这个 curator-x-discovery 扩展包抽象了这种功能，并提供了一套简单的 API 来实现服务发现机制。curator-x-discovery 扩展包的核心概念如下：</p><ul><li><strong>ServiceInstance。</strong> 这是 curator-x-discovery 扩展包对服务实例的抽象，由 name、id、address、port 以及一个可选的 payload 属性构成。其存储在 ZooKeeper 中的方式如下图展示的这样。</li></ul>`,6),D=s(`<ul><li><p><strong>ServiceProvider。</strong> 这是 curator-x-discovery 扩展包的核心组件之一，提供了多种不同策略的服务发现方式，具体策略有轮询调度、随机和黏性（总是选择相同的一个）。得到 ServiceProvider 对象之后，我们可以调用其 getInstance() 方法，按照指定策略获取 ServiceInstance 对象（即发现可用服务实例）；还可以调用 getAllInstances() 方法，获取所有 ServiceInstance 对象（即获取全部可用服务实例）。</p></li><li><p><strong>ServiceDiscovery。</strong> 这是 curator-x-discovery 扩展包的入口类。开始必须调用 start() 方法，当使用完成应该调用 close() 方法进行销毁。</p></li><li><p><strong>ServiceCache。</strong> 如果程序中会频繁地查询 ServiceInstance 对象，我们可以添加 ServiceCache 缓存，ServiceCache 会在内存中缓存 ServiceInstance 实例的列表，并且添加相应的 Watcher 来同步更新缓存。查询 ServiceCache 的方式也是 getInstances() 方法。另外，ServiceCache 上还可以添加 Listener 来监听缓存变化。</p></li></ul><p>下面通过一个简单示例来说明一下 curator-x-discovery 包的使用，该示例中的 ServerInfo 记录了一个服务的 host、port 以及描述信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZookeeperCoordinator</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ServiceDiscovery&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; serviceDiscovery; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> ServiceCache&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; serviceCache; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> CuratorFramework client; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> String root; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里的JsonInstanceSerializer是将ServerInfo序列化成Json </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> InstanceSerializer serializer </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> JsonInstanceSerializer&lt;&gt;(ServerInfo.class); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">ZookeeperCoordinator</span><span style="color:#E1E4E8;">(Config </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.</span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建Curator客户端 </span></span>
<span class="line"><span style="color:#E1E4E8;">        client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CuratorFrameworkFactory.</span><span style="color:#B392F0;">newClient</span><span style="color:#E1E4E8;">( </span></span>
<span class="line"><span style="color:#E1E4E8;">            config.</span><span style="color:#B392F0;">getHostPort</span><span style="color:#E1E4E8;">(),  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExponentialBackoffRetry</span><span style="color:#E1E4E8;">(...)); </span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 启动Curator客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">blockUntilConnected</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 阻塞当前线程，等待连接成功 </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建ServiceDiscovery </span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceDiscovery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ServiceDiscoveryBuilder </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">(ServerInfo.class) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;">(client) </span><span style="color:#6A737D;">// 依赖Curator客户端 </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">basePath</span><span style="color:#E1E4E8;">(root) </span><span style="color:#6A737D;">// 管理的Zk路径 </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">watchInstances</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 当ServiceInstance加载 </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">serializer</span><span style="color:#E1E4E8;">(serializer) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">         serviceDiscovery.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 启动ServiceDiscovery </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 创建ServiceCache，监Zookeeper相应节点的变化，也方便后续的读取 </span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceDiscovery.</span><span style="color:#B392F0;">serviceCacheBuilder</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(root) </span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         serviceCache.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 启动ServiceCache </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerRemote</span><span style="color:#E1E4E8;">(ServerInfo </span><span style="color:#FFAB70;">serverInfo</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception{ </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 将ServerInfo对象转换成ServiceInstance对象 </span></span>
<span class="line"><span style="color:#E1E4E8;">         ServiceInstance&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; thisInstance </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            ServiceInstance.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ServerInfo</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">() </span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(root) </span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">(UUID.</span><span style="color:#B392F0;">randomUUID</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 随机生成的UUID </span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">(serverInfo.</span><span style="color:#B392F0;">getHost</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// host </span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">(serverInfo.</span><span style="color:#B392F0;">getPort</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// port </span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">payload</span><span style="color:#E1E4E8;">(serverInfo) </span><span style="color:#6A737D;">// payload </span></span>
<span class="line"><span style="color:#E1E4E8;">                    .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// 将ServiceInstance写入到Zookeeper中 </span></span>
<span class="line"><span style="color:#E1E4E8;">         serviceDiscovery.</span><span style="color:#B392F0;">registerService</span><span style="color:#E1E4E8;">(thisInstance); </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">queryRemoteNodes</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt; ServerInfoDetails </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 查询 ServiceCache 获取全部的 ServiceInstance 对象 </span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;ServiceInstance&lt;</span><span style="color:#F97583;">ServerInfo</span><span style="color:#E1E4E8;">&gt;&gt; serviceInstances </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">            serviceCache.</span><span style="color:#B392F0;">getInstances</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        serviceInstances.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(serviceInstance </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 从每个ServiceInstance对象的playload字段中反序列化得 </span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 到ServerInfo实例 </span></span>
<span class="line"><span style="color:#E1E4E8;">            ServerInfo instance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceInstance.</span><span style="color:#B392F0;">getPayload</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">            ServerInfoDetails.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(instance); </span></span>
<span class="line"><span style="color:#E1E4E8;">        }); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ServerInfoDetails; </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ZookeeperCoordinator</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ServiceDiscovery&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; serviceDiscovery; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ServiceCache&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; serviceCache; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> CuratorFramework client; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String root; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里的JsonInstanceSerializer是将ServerInfo序列化成Json </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> InstanceSerializer serializer </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> JsonInstanceSerializer&lt;&gt;(ServerInfo.class); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ZookeeperCoordinator</span><span style="color:#24292E;">(Config </span><span style="color:#E36209;">config</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建Curator客户端 </span></span>
<span class="line"><span style="color:#24292E;">        client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CuratorFrameworkFactory.</span><span style="color:#6F42C1;">newClient</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">            config.</span><span style="color:#6F42C1;">getHostPort</span><span style="color:#24292E;">(),  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExponentialBackoffRetry</span><span style="color:#24292E;">(...)); </span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 启动Curator客户端</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">blockUntilConnected</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 阻塞当前线程，等待连接成功 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建ServiceDiscovery </span></span>
<span class="line"><span style="color:#24292E;">        serviceDiscovery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServiceDiscoveryBuilder </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">(ServerInfo.class) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">client</span><span style="color:#24292E;">(client) </span><span style="color:#6A737D;">// 依赖Curator客户端 </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">basePath</span><span style="color:#24292E;">(root) </span><span style="color:#6A737D;">// 管理的Zk路径 </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">watchInstances</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 当ServiceInstance加载 </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">serializer</span><span style="color:#24292E;">(serializer) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">         serviceDiscovery.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 启动ServiceDiscovery </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建ServiceCache，监Zookeeper相应节点的变化，也方便后续的读取 </span></span>
<span class="line"><span style="color:#24292E;">        serviceCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceDiscovery.</span><span style="color:#6F42C1;">serviceCacheBuilder</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(root) </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         serviceCache.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 启动ServiceCache </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerRemote</span><span style="color:#24292E;">(ServerInfo </span><span style="color:#E36209;">serverInfo</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception{ </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 将ServerInfo对象转换成ServiceInstance对象 </span></span>
<span class="line"><span style="color:#24292E;">         ServiceInstance&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; thisInstance </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            ServiceInstance.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ServerInfo</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">() </span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(root) </span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">(UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 随机生成的UUID </span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">(serverInfo.</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// host </span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">(serverInfo.</span><span style="color:#6F42C1;">getPort</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// port </span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">payload</span><span style="color:#24292E;">(serverInfo) </span><span style="color:#6A737D;">// payload </span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 将ServiceInstance写入到Zookeeper中 </span></span>
<span class="line"><span style="color:#24292E;">         serviceDiscovery.</span><span style="color:#6F42C1;">registerService</span><span style="color:#24292E;">(thisInstance); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">queryRemoteNodes</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt; ServerInfoDetails </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 查询 ServiceCache 获取全部的 ServiceInstance 对象 </span></span>
<span class="line"><span style="color:#24292E;">        List&lt;ServiceInstance&lt;</span><span style="color:#D73A49;">ServerInfo</span><span style="color:#24292E;">&gt;&gt; serviceInstances </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            serviceCache.</span><span style="color:#6F42C1;">getInstances</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        serviceInstances.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(serviceInstance </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 从每个ServiceInstance对象的playload字段中反序列化得 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 到ServerInfo实例 </span></span>
<span class="line"><span style="color:#24292E;">            ServerInfo instance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceInstance.</span><span style="color:#6F42C1;">getPayload</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">            ServerInfoDetails.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(instance); </span></span>
<span class="line"><span style="color:#24292E;">        }); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ServerInfoDetails; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="curator-recipes-简介" tabindex="-1">curator-recipes 简介 <a class="header-anchor" href="#curator-recipes-简介" aria-label="Permalink to &quot;curator-recipes 简介&quot;">​</a></h3><p>Recipes 是 Curator 对常见分布式场景的解决方案，这里我们只是简单介绍一下，具体的使用和原理，就先不做深入分析了。</p><ul><li><p><strong>Queues</strong>。提供了多种的分布式队列解决方法，比如：权重队列、延迟队列等。在生产环境中，很少将 ZooKeeper 用作分布式队列，只适合在压力非常小的情况下，才使用该解决方案，所以建议你要适度使用。</p></li><li><p><strong>Counters</strong>。全局计数器是分布式系统中很常用的工具，curator-recipes 提供了 SharedCount、DistributedAtomicLong 等组件，帮助开发人员实现分布式计数器功能。</p></li><li><p><strong>Locks</strong>。java.util.concurrent.locks 中提供的各种锁相信你已经有所了解了，在微服务架构中，分布式锁也是一项非常基础的服务组件，curator-recipes 提供了多种基于 ZooKeeper 实现的分布式锁，满足日常工作中对分布式锁的需求。</p></li><li><p><strong>Barries</strong>。curator-recipes 提供的分布式栅栏可以实现多个服务之间协同工作，具体实现有 DistributedBarrier 和 DistributedDoubleBarrier。</p></li><li><p><strong>Elections</strong>。实现的主要功能是在多个参与者中选举出 Leader，然后由 Leader 节点作为操作调度、任务监控或是队列消费的执行者。curator-recipes 给出的实现是 LeaderLatch。</p></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本课时我们重点介绍了 Apache Curator 相关的内容：</p><ul><li><p>首先将 Apache Curator 与其他 ZooKeeper 客户端进行了对比，Apache Curator 的易用性是选择 Apache Curator 的重要原因。</p></li><li><p>接下来，我们通过示例介绍了 Apache Curator 的基本使用方式以及实际使用过程中的一些注意点。</p></li><li><p>然后，介绍了 curator-x-discovery 扩展库的基本概念和使用。</p></li><li><p>最后，简单介绍了 curator-recipes 提供的强大功能。</p></li></ul><p>关于 Apache Curator，你有什么其他的见解？欢迎你在评论区给我留言，与我分享。</p><p>zk-demo 链接：<a href="https://github.com/xxxlxy2008/zk-demo" target="_blank" rel="noreferrer">https://github.com/xxxlxy2008/zk-demo</a> 。</p>`,11);function h(A,d,g,B,v,S){const n=o("Image");return e(),t("div",null,[r,a(n,{alt:"1.png",src:"https://s0.lgstatic.com/i/image/M00/43/54/Ciqc1F87iUKAAAs2AAE2Xaps_KE511.png"}),l(),E,a(n,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/43/54/Ciqc1F87iXuAQVanAABhI9RRD8M252.png"}),l(),y,a(n,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/43/54/Ciqc1F87iY6ACWnvAAA8jA9QVgM875.png"}),l(),i,a(n,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/43/60/CgqCHl87iZqAaG93AABwFnQJA7o497.png"}),l(),F,a(n,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/43/54/Ciqc1F87iaSAFZLpAABDyAm7vuE120.png"}),l(),C,a(n,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/43/60/CgqCHl87ia6AYvijAABBmFLfzx4213.png"}),l(),u,a(n,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/43/60/CgqCHl87icOABt59AADHccHcE1Q955.png"}),l(),D])}const I=p(c,[["render",h]]);export{k as __pageData,I as default};
