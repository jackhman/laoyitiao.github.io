import{_ as e,j as p,o as _,g as l,k as o,h as s,s as t,Q as n}from"./chunks/framework.4e7d56ce.js";const Z=JSON.parse('{"title":"31数据库文件系统实例：MySQL中B树和B+树有什么区别？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/重学操作系统_文档/(4641) 31  数据库文件系统实例：MySQL 中 B 树和 B+ 树有什么区别？.md","filePath":"posts/backEnd/重学操作系统_文档/(4641) 31  数据库文件系统实例：MySQL 中 B 树和 B+ 树有什么区别？.md","lastUpdated":1696682708000}'),i={name:"posts/backEnd/重学操作系统_文档/(4641) 31  数据库文件系统实例：MySQL 中 B 树和 B+ 树有什么区别？.md"},c=t("h1",{id:"_31数据库文件系统实例-mysql中b树和b-树有什么区别",tabindex:"-1"},[s("31数据库文件系统实例：MySQL中B树和B+树有什么区别？ "),t("a",{class:"header-anchor",href:"#_31数据库文件系统实例-mysql中b树和b-树有什么区别","aria-label":'Permalink to "31数据库文件系统实例：MySQL中B树和B+树有什么区别？"'},"​")],-1),r=t("p",null,[t("strong",null,"这一讲给你带来的关联面试题是：MySQL 中 B 树和 B+ 树的区别？")],-1),g=t("p",null,"B 树和 B+ 树是两种数据结构（关于它们的名字为什么以 B 开头，因为众说纷纭，本讲我就不介绍了），构建了磁盘中的高速索引结构，因此不仅 MySQL 在用，MongoDB、Oracle 等也在用，基本属于数据库的标配常规操作。",-1),h=t("p",null,"数据库要经常和磁盘与内存打交道，为了提升性能，通常需要自己去构建类似文件系统的结构。这一讲的内容有限，我只是先带你入一个门，如果你感兴趣后续可以自己深入学习。下面我们一起来探讨数据库如何利用磁盘空间设计索引。",-1),B=t("h3",{id:"行存储和列存储",tabindex:"-1"},[s("行存储和列存储 "),t("a",{class:"header-anchor",href:"#行存储和列存储","aria-label":'Permalink to "行存储和列存储"'},"​")],-1),d=t("p",null,"在学习构建磁盘数据的索引结构前，我们先通过行存储、列存储的学习来了解一些基本的存储概念，帮助你建立一个基本的认知。",-1),A=t("p",null,"目前数据库存储一张表格主要是行存储（Row Storage）和列存储（Column Storage）两种存储方式。行存储将表格看作一个个记录，每个记录是一行。以包含订单号、金额、下单时间 3 项的表为例，行存储如下图所示：",-1),m=t("p",null,"如上图所示，在计算机中没有真正的行的概念。行存储本质就是数据一个接着一个排列，一行数据后面马上跟着另一行数据。如果订单表很大，一个磁盘块（Block）存不下，那么实际上就是每个块存储一定的行数。 类似下图这样的结构：",-1),u=t("p",null,[s("行存储更新一行的操作，往往可以在一个块（Block）中进行。而查询数据，聚合数据（比如求 4 月份的订单数），往往需要跨块（Block）。因此，"),t("strong",null,"行存储优点很明显，更新快、单条记录的数据集中，适合事务。但缺点也很明显，查询慢"),s("。")],-1),C=t("p",null,"还有一种表格的存储方式是列存储（Column Storage），列存储中数据是一列一列存的。还以订单表为例，如下图所示：",-1),b=n("",28),y=t("p",null,"在上面的二叉搜索树中，每个节点的数据分成 Key 和 Value。Key 就是索引值，比如订单 ID 创建索引，那么 Key 就是订单 ID。值中至少需要序号（对行存储也就是行号）。这样，如果们想找 18 对应的行，就可以先通过二叉搜索树找到对应的行号，然后再去对应的行读取数据。",-1),M=n("",8),q=t("p",null,[t("strong",null,"上图中我们构造的树被称为 B 树"),s(" （"),t("strong",null,"B-Tree"),s("），开头说过，B 这个字母具体是哪个单词或者人名的缩写，至今有争议，具体你可以查查资料。")],-1),I=t("p",null,"B-Tree 是一种递归的搜索结构，与二叉搜索树非常类似。不同的是，B 树中的父节点中的数据会对子树进行区段分割。比如上图中节点 1 有 3 个子节点，并用数字 9,30 对子树的区间进行了划分。",-1),S=t("p",null,"上图中的 B 树是一个 3-4 B 树，3 指的是每个非叶子节点允许最大 3 个索引，4 指的是每个节点最多允许 4 个子节点，4 也指每个叶子节点可以存 4 个索引。上面只是一个例子，在实际的操作中，子节点有几十个、甚至上百个索引也很常见，因为我们希望树变矮，好减少磁盘操作。",-1),T=t("p",null,"B 树的每个节点是一个索引条目（例如：一个 <订单 ID，序号> 的组合），如果是行数据库可以索引到一条存储在磁盘上的记录。",-1),D=t("h4",{id:"继承-b-树-b-树",tabindex:"-1"},[s("继承 B 树：B+ 树 "),t("a",{class:"header-anchor",href:"#继承-b-树-b-树","aria-label":'Permalink to "继承 B 树：B+ 树"'},"​")],-1),P=t("p",null,"为了达到最高的效率，实战中我们往往使用的是一种继承于 B 树设计的结构，称为 B+ 树。B+ 树只有叶子节点才映射数据，下图中是对 B 树设计的一种改进，节点 1 为冗余节点，它不存储数据，只划定子树数据的范围。你可以看到节点 1 的索引 Key：12 和 30，在节点 3 和 4 中也有一份。",-1),k=t("h4",{id:"树的形成-插入",tabindex:"-1"},[s("树的形成：插入 "),t("a",{class:"header-anchor",href:"#树的形成-插入","aria-label":'Permalink to "树的形成：插入"'},"​")],-1),f=t("p",null,"下面我以一棵 2-3 B+ 树来演示 B+ 树的插入过程。2 指的是 B+ 树每个非叶子节点允许 2 个数据，叶子节点最多允许 3 个索引，每个节点允许最多 3 个子节点。我们要在 2-3 B+ 树中依次插入 3,6,9,12,19,15,26,8,30。下图是演示：",-1),x=t("p",null,"插入 3,6,9 过程很简单，都写入一个节点即可，因为叶子节点最多允许每个 3 个索引。接下来我们插入 12，会发生一次过载，然后节点就需要拆分，这个时候按照 B+ 树的设计会产生冗余节点。",-1),F=t("p",null,"然后插入 15 非常简单，直接加入即可：",-1),V=t("p",null,"接下来插入 19， 这个时候下图中红色部分发生过载：",-1),Q=t("p",null,"因此需要拆分节点数据，我们从中间把红色的节点拆开，15 作为冗余的索引写入父节点，就形成下图的情况：",-1),E=t("p",null,"接着插入 26， 写入到对应位置即可。",-1),L=t("p",null,"接下来，插入 8 到对应位置即可。",-1),w=t("p",null,"然后我们插入 30，此时右边节点发生过载：",-1),N=t("p",null,"解决完一次过载问题之后，因为 26 会浮上去，根节点又发生了过载：",-1),K=t("p",null,"再次解决过载，拆分红色部分，得到最后结果：",-1),H=n("",16);function O(R,G,U,W,v,X){const a=p("Image");return _(),l("div",null,[c,r,g,h,B,d,A,o(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image2/M01/04/4C/CgpVE1_sZ-GAVZtxAABQMz4nr2o681.png"}),s(),m,o(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/8C/68/Ciqc1F_sZ-qAWYp7AABVE_FTHT8211.png"}),s(),u,C,o(a,{alt:"Drawing 5.png",src:"https://s0.lgstatic.com/i/image/M00/8C/73/CgqCHl_sZ_GAV5BXAABYyBf77uc003.png"}),s(),b,o(a,{alt:"Drawing 7.png",src:"https://s0.lgstatic.com/i/image/M00/8C/68/Ciqc1F_saAWAQLD2AAEHA2b-QK4732.png"}),s(),y,o(a,{alt:"Drawing 9.png",src:"https://s0.lgstatic.com/i/image/M00/8C/73/CgqCHl_saAyAIC_4AAFHdR111Pg040.png"}),s(),M,o(a,{alt:"Drawing 11.png",src:"https://s0.lgstatic.com/i/image/M00/8C/68/Ciqc1F_saBaAXK5-AAFO9nLONPo957.png"}),s(),q,I,S,T,D,P,o(a,{alt:"Drawing 13.png",src:"https://s0.lgstatic.com/i/image/M00/8C/68/Ciqc1F_saCKADMzAAAEHeJ2-HvI282.png"}),s(),k,f,o(a,{alt:"10.gif",src:"https://s0.lgstatic.com/i/image/M00/8C/9F/Ciqc1F_yuGaAe34hAIFHQoSI9GI738.gif"}),s(),x,o(a,{alt:"6.png",src:"https://s0.lgstatic.com/i/image/M00/8C/9F/Ciqc1F_yt1uAUp9PAABNVsx4HM8009.png"}),s(),F,o(a,{alt:"7.png",src:"https://s0.lgstatic.com/i/image/M00/8C/AA/CgqCHl_yt36ANCL0AABO--TyyME355.png"}),s(),V,o(a,{alt:"8.png",src:"https://s0.lgstatic.com/i/image/M00/8C/9F/Ciqc1F_yt6GAarKkAABRlrOx8wQ337.png"}),s(),Q,o(a,{alt:"9.png",src:"https://s0.lgstatic.com/i/image/M00/8C/9F/Ciqc1F_yt9aAWPFwAABWeUsN-3w700.png"}),s(),E,o(a,{alt:"1.png",src:"https://s0.lgstatic.com/i/image2/M01/04/81/Cip5yF_ytRmAXVtMAABY0urP73M758.png"}),s(),L,o(a,{alt:"2.png",src:"https://s0.lgstatic.com/i/image/M00/8C/9F/Ciqc1F_ytbOABwB3AABY1XWgGI4978.png"}),s(),w,o(a,{alt:"3.png",src:"https://s0.lgstatic.com/i/image2/M01/04/83/CgpVE1_yteaATRGyAABdLxm53J0846.png"}),s(),N,o(a,{alt:"4.png",src:"https://s0.lgstatic.com/i/image2/M01/04/83/CgpVE1_ytjSAduc9AABnqqExax0913.png"}),s(),K,o(a,{alt:"5.png",src:"https://s0.lgstatic.com/i/image2/M01/04/81/Cip5yF_ytoaACk0NAAB41Q4jOn8459.png"}),s(),H])}const $=e(i,[["render",O]]);export{Z as __pageData,$ as default};
