import{_ as s,o as n,g as a,Q as p}from"./chunks/framework.a0d18f64.js";const u=JSON.parse('{"title":"05K8Pod：最小调度单元的使用进阶及实践","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4522) 05  K8 Pod：最小调度单元的使用进阶及实践.md","filePath":"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4522) 05  K8 Pod：最小调度单元的使用进阶及实践.md","lastUpdated":1696682708000}'),l={name:"posts/backEnd/113-Kubernetes 原理剖析与实战应用文档/(4522) 05  K8 Pod：最小调度单元的使用进阶及实践.md"},o=p(`<h1 id="_05k8pod-最小调度单元的使用进阶及实践" tabindex="-1">05K8Pod：最小调度单元的使用进阶及实践 <a class="header-anchor" href="#_05k8pod-最小调度单元的使用进阶及实践" aria-label="Permalink to &quot;05K8Pod：最小调度单元的使用进阶及实践&quot;">​</a></h1><p>通过上一节课的学习，相信你已经知道了 Pod 是 Kubernetes 中原子化的部署单元，它可以包含一个或多个容器，而且容器之间可以共享网络、存储资源。在日常使用过程中，也应该尽量避免在一个 Pod 内运行多个不相关的容器，具体原因在上一节课中也已经详细阐述。</p><p>在实际生产使用的过程中，通过 kubectl 可以很方便地部署一个 Pod。但是 Pod 运行过程中还会出现一些意想不到的问题，比如：</p><ul><li><p>Pod 里的某一个容器异常退出了怎么办？</p></li><li><p>有没有&quot;健康检查&quot;方便你知道业务的真实运行情况，比如容器运行正常，但是业务不工作了？</p></li><li><p>容器在启动或删除前后，如果需要做一些特殊处理怎么办？比如做一些清理工作。</p></li><li><p>如果容器所在节点宕机，重启后会对你的容器产生影响吗？</p></li><li><p>......</p></li></ul><p>在这一课时中，我将通过一些示例一一解答你的这些问题，并告诉你 Pod 最佳的使用方法。</p><p>在了解 Pod 的高阶用法之前，我们先聊聊 Pod 的运行状态。</p><h3 id="pod-的运行状态" tabindex="-1">Pod 的运行状态 <a class="header-anchor" href="#pod-的运行状态" aria-label="Permalink to &quot;Pod 的运行状态&quot;">​</a></h3><p>我们先回到上一节 04 课时中的例子：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#指定当前描述文件遵循v1版本的Kubernetes API</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#我们在描述一个pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">twocontainers</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#指定pod的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#指定当前描述的pod所在的命名空间</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#指定pod标签</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">twocontainers</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">annotations</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#指定pod注释</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">releasedBy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">david</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">purpose</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">sise</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#容器的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">quay.io/openshiftlabs/simpleservice:0.5.0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#创建容器所使用的镜像</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9876</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#应用监听的端口</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">shell</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#容器的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">centos:7</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#创建容器所使用的镜像</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">#容器启动命令</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;bin/bash&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;sleep 10000&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#指定当前描述文件遵循v1版本的Kubernetes API</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#我们在描述一个pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">twocontainers</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#指定pod的名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">default</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#指定当前描述的pod所在的命名空间</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#指定pod标签</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">twocontainers</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">annotations</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#指定pod注释</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">releasedBy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">david</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">purpose</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">sise</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#容器的名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">quay.io/openshiftlabs/simpleservice:0.5.0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#创建容器所使用的镜像</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9876</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#应用监听的端口</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">shell</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#容器的名称</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">centos:7</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#创建容器所使用的镜像</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: </span><span style="color:#6A737D;">#容器启动命令</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;bin/bash&quot;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;-c&quot;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;sleep 10000&quot;</span></span></code></pre></div><p>我们通过 kubectl 创建 Pod 成功后，可以通过如下命令看到 Pod 的状态:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">twocontainers</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o=jsonpath=</span><span style="color:#9ECBFF;">&#39;{.status.phase}&#39;</span></span>
<span class="line"><span style="color:#B392F0;">Pending</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">twocontainers</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o=jsonpath=</span><span style="color:#032F62;">&#39;{.status.phase}&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">Pending</span></span></code></pre></div><blockquote><p>注：我们这里使用了 kubectl 命令行 JSONPATH 模板能力，你可以将这条命令当作一个 tip，在日常工作中使用。在本专栏的最后，我们也会单独讲一些 kubectl 的使用秘笈，在此不展开讲。</p></blockquote><p>我们看到，这个时候 Pod 处于<code>Pending</code>状态，具体的值来自 Pod 对象的<code>status.phase</code>字段。</p><p>你也可以使用 kubectl get 命令来查看容器的状态：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">twocontainers</span></span>
<span class="line"><span style="color:#B392F0;">NAME</span><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">READY</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">STATUS</span><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">RESTARTS</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">AGE</span></span>
<span class="line"><span style="color:#B392F0;">twocontainers</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">/2</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">ContainerCreating</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">13</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">twocontainers</span></span>
<span class="line"><span style="color:#6F42C1;">NAME</span><span style="color:#24292E;">            </span><span style="color:#032F62;">READY</span><span style="color:#24292E;">   </span><span style="color:#032F62;">STATUS</span><span style="color:#24292E;">              </span><span style="color:#032F62;">RESTARTS</span><span style="color:#24292E;">   </span><span style="color:#032F62;">AGE</span></span>
<span class="line"><span style="color:#6F42C1;">twocontainers</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">/2</span><span style="color:#24292E;">     </span><span style="color:#032F62;">ContainerCreating</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">13</span><span style="color:#032F62;">s</span></span></code></pre></div><p>看到这里，你会发现这个地方显示的是<code>ContainerCreating</code>，这和上面的<code>Pending</code>不一致啊！先别急，我们来 describe 一下（这里我只截取跟 Pod 状态最相关的片段）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ kubectl describe pod twocontainers</span></span>
<span class="line"><span style="color:#E1E4E8;">Name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">         twocontainers</span></span>
<span class="line"><span style="color:#E1E4E8;">Namespace</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">Status</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">       Pending</span></span>
<span class="line"><span style="color:#E1E4E8;">IP</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">IPs</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">none</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">Containers</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  sise</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    Container ID</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    Image</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">          quay.io</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">openshiftlabs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">simpleservice</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">.</span><span style="color:#FDAEB7;font-style:italic;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    State</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">          Waiting</span></span>
<span class="line"><span style="color:#E1E4E8;">      Reason</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">       ContainerCreating</span></span>
<span class="line"><span style="color:#E1E4E8;">    Ready</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">          False</span></span>
<span class="line"><span style="color:#E1E4E8;">    Restart Count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  shell</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    Container ID</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    Image</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">         centos</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">7</span></span>
<span class="line"><span style="color:#E1E4E8;">    Image ID</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    State</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">          Waiting</span></span>
<span class="line"><span style="color:#E1E4E8;">      Reason</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">       ContainerCreating</span></span>
<span class="line"><span style="color:#E1E4E8;">    Ready</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">          False</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">Events</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  Type    Reason     Age        From               Message</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">----</span><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">------</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">----</span><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">----</span><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">-------</span></span>
<span class="line"><span style="color:#E1E4E8;">  Normal  Scheduled  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">unknown</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">default-</span><span style="color:#E1E4E8;">scheduler  Successfully assigned </span><span style="color:#F97583;">default/</span><span style="color:#E1E4E8;">twocontainers to node</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  Normal  Pulling    3m57s      kubelet, node</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">    Pulling image </span><span style="color:#9ECBFF;">&quot;quay.io/openshiftlabs/simpleservice:0.5.0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ kubectl describe pod twocontainers</span></span>
<span class="line"><span style="color:#24292E;">Name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">         twocontainers</span></span>
<span class="line"><span style="color:#24292E;">Namespace</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">Status</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">       Pending</span></span>
<span class="line"><span style="color:#24292E;">IP</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">IPs</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">          </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">none</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">Containers</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  sise</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    Container ID</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    Image</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">          quay.io</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">openshiftlabs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">simpleservice</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">0</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">    State</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">          Waiting</span></span>
<span class="line"><span style="color:#24292E;">      Reason</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">       ContainerCreating</span></span>
<span class="line"><span style="color:#24292E;">    Ready</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">          False</span></span>
<span class="line"><span style="color:#24292E;">    Restart Count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">  shell</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    Container ID</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    Image</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">         centos</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">7</span></span>
<span class="line"><span style="color:#24292E;">    Image ID</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">    State</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">          Waiting</span></span>
<span class="line"><span style="color:#24292E;">      Reason</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">       ContainerCreating</span></span>
<span class="line"><span style="color:#24292E;">    Ready</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">          False</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">Events</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">  Type    Reason     Age        From               Message</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">----</span><span style="color:#24292E;">    </span><span style="color:#D73A49;">------</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">----</span><span style="color:#24292E;">       </span><span style="color:#D73A49;">----</span><span style="color:#24292E;">               </span><span style="color:#D73A49;">-------</span></span>
<span class="line"><span style="color:#24292E;">  Normal  Scheduled  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">unknown</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">default-</span><span style="color:#24292E;">scheduler  Successfully assigned </span><span style="color:#D73A49;">default/</span><span style="color:#24292E;">twocontainers to node</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  Normal  Pulling    3m57s      kubelet, node</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">    Pulling image </span><span style="color:#032F62;">&quot;quay.io/openshiftlabs/simpleservice:0.5.0&quot;</span></span></code></pre></div><p>可以看到，这边 Status 依然是<code>Pending</code>。其实这是 kubectl 在显示时做的转换，它会遍历容器的 State，如果容器的状态为<code>Waiting</code>的话，就读取<code>State.Reason</code>字段作为 Pod 的 Status。这个时候由于镜像在本地不存在，需要去镜像中心拉取。</p><p>一般来说，处于<code>Pending</code>状态的 Pod，不外乎以下 2 个原因：</p><ol><li><p>Pod 还未被调度；</p></li><li><p>Pod 内的容器镜像在待运行的节点上不存在，需要从镜像中心拉取。</p></li></ol><p>等待镜像拉取结束，再来查看 Pod 的状态，已经变为<code>Running</code>状态。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">twocontainers</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o=jsonpath=</span><span style="color:#9ECBFF;">&#39;{.status.phase}&#39;</span></span>
<span class="line"><span style="color:#B392F0;">Running</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">twocontainers</span></span>
<span class="line"><span style="color:#B392F0;">Name:</span><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">twocontainers</span></span>
<span class="line"><span style="color:#B392F0;">Namespace:</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">default</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Time:</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Wed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Aug</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#9ECBFF;">:49:11</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+0800</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Status:</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">Running</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Containers:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sise:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Container</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ID:</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">docker://4dc8244a19e6766b151b36d986b9b3661f3bf05260aedd2b76dd5f0fcd6e637f</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Image:</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">quay.io/openshiftlabs/simpleservice:0.5.0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Image</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ID:</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">docker-pullable://quay.io/openshiftlabs/simpleservice@sha256:72bfe1acc54829c306dd6683fe28089d222cf50a2df9d10c4e9d32974a591673</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">State:</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">Running</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Started:</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">Wed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Aug</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span><span style="color:#9ECBFF;">:00:52</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+0800</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ready:</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">shell:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Container</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ID:</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">docker://1b6137b4cef60d0309412f5cdba7f0ff743ee03c1112112f6aadd78f9981bbaa</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Image:</span><span style="color:#E1E4E8;">         </span><span style="color:#9ECBFF;">centos:7</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Image</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ID:</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">docker-pullable://centos@sha256:19a79828ca2e505eaee0ff38c2f3fd9901f4826737295157cc5212b7a372cd2b</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">State:</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">Running</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Started:</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">Wed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Aug</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2020</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span><span style="color:#9ECBFF;">:01:46</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+0800</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ready:</span><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Conditions:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">Status</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Initialized</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Ready</span><span style="color:#E1E4E8;">             </span><span style="color:#9ECBFF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ContainersReady</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">PodScheduled</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">True</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">twocontainers</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o=jsonpath=</span><span style="color:#032F62;">&#39;{.status.phase}&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">Running</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">twocontainers</span></span>
<span class="line"><span style="color:#6F42C1;">Name:</span><span style="color:#24292E;">         </span><span style="color:#032F62;">twocontainers</span></span>
<span class="line"><span style="color:#6F42C1;">Namespace:</span><span style="color:#24292E;">    </span><span style="color:#032F62;">default</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Time:</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Wed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Aug</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#032F62;">:49:11</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+0800</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Status:</span><span style="color:#24292E;">       </span><span style="color:#032F62;">Running</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Containers:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">sise:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Container</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ID:</span><span style="color:#24292E;">   </span><span style="color:#032F62;">docker://4dc8244a19e6766b151b36d986b9b3661f3bf05260aedd2b76dd5f0fcd6e637f</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Image:</span><span style="color:#24292E;">          </span><span style="color:#032F62;">quay.io/openshiftlabs/simpleservice:0.5.0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ID:</span><span style="color:#24292E;">       </span><span style="color:#032F62;">docker-pullable://quay.io/openshiftlabs/simpleservice@sha256:72bfe1acc54829c306dd6683fe28089d222cf50a2df9d10c4e9d32974a591673</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">State:</span><span style="color:#24292E;">          </span><span style="color:#032F62;">Running</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Started:</span><span style="color:#24292E;">      </span><span style="color:#032F62;">Wed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Aug</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#032F62;">:00:52</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+0800</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ready:</span><span style="color:#24292E;">          </span><span style="color:#032F62;">True</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">shell:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Container</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ID:</span><span style="color:#24292E;">  </span><span style="color:#032F62;">docker://1b6137b4cef60d0309412f5cdba7f0ff743ee03c1112112f6aadd78f9981bbaa</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Image:</span><span style="color:#24292E;">         </span><span style="color:#032F62;">centos:7</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ID:</span><span style="color:#24292E;">      </span><span style="color:#032F62;">docker-pullable://centos@sha256:19a79828ca2e505eaee0ff38c2f3fd9901f4826737295157cc5212b7a372cd2b</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">State:</span><span style="color:#24292E;">          </span><span style="color:#032F62;">Running</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Started:</span><span style="color:#24292E;">      </span><span style="color:#032F62;">Wed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Aug</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2020</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#032F62;">:01:46</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+0800</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ready:</span><span style="color:#24292E;">          </span><span style="color:#032F62;">True</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Conditions:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">              </span><span style="color:#032F62;">Status</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Initialized</span><span style="color:#24292E;">       </span><span style="color:#032F62;">True</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Ready</span><span style="color:#24292E;">             </span><span style="color:#032F62;">True</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ContainersReady</span><span style="color:#24292E;">   </span><span style="color:#032F62;">True</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">PodScheduled</span><span style="color:#24292E;">      </span><span style="color:#032F62;">True</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><p>这个时候，就标志着 Pod 内的所有容器均被创建出来了，且至少有一个容器为在运行状态中。那么如果想知道 Pod 内所有的容器是否都在运行中呢？我们可以通过 kubectl get 来看到：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ kubectl get pod twocontainers</span></span>
<span class="line"><span style="color:#E1E4E8;">NAME            READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span style="color:#E1E4E8;">twocontainers   </span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">     Running   </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">          2m</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ kubectl get pod twocontainers</span></span>
<span class="line"><span style="color:#24292E;">NAME            READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span style="color:#24292E;">twocontainers   </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">     Running   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">          2m</span></span></code></pre></div><p>在这里，我们看到<code>2/2</code>。前一个 2 表示目前正在运行的容器数量，后一个 2 表示定义的容器数量。当这两个数值相等的时候，就可以标识着 Pod 内所有容器均正常运行。</p><p>Pod 的 Status 除了上述的<code>Pending</code>、<code>Running</code>以外，官方还定义了下面这些状态：</p><ul><li><p><code>Succeeded</code>来表示 Pod 内的所有容器均成功运行结束，即正常退出，退出码为 0；</p></li><li><p><code>Failed</code>来表示 Pod 内的所有容器均运行终止，且至少有一个容器终止失败了，一般这种情况，都是由于容器运行异常退出，或者被系统终止掉了；</p></li><li><p><code>Unknown</code>一般是由于 Node 失联导致的 Pod 状态无法获取到。</p></li></ul><p>既然 Pod 内的容器会出现异常退出状态，那么有没有一些重启策略可以让 Kubelet 对容器进行重启呢？</p><h3 id="pod-的重启策略" tabindex="-1">Pod 的重启策略 <a class="header-anchor" href="#pod-的重启策略" aria-label="Permalink to &quot;Pod 的重启策略&quot;">​</a></h3><p>Kubernetes 中定义了如下三种重启策略，可以通过<code>spec.restartPolicy</code>字段在 Pod 定义中进行设置。</p><ul><li><p>Always 表示一直重启，这也是默认的重启策略。Kubelet 会定期查询容器的状态，一旦某个容器处于退出状态，就对其执行重启操作；</p></li><li><p>OnFailure 表示只有在容器异常退出，即退出码不为 0 时，才会对其进行重启操作；</p></li><li><p>Never 表示从不重启；</p></li></ul><blockquote><p>注：<strong>在 Pod 中设置的重启策略适用于 Pod 内的所有容器</strong>。</p></blockquote><p>虽然我们可以设置一些重启策略，确保容器异常退出时可以重启。但是对于运行中的容器，是不是就意味着容器内的服务正常了呢？</p><p>比如某些 Java 进程启动速度非常慢，在容器启动阶段其实是无法提供服务的，虽然这个时候该容器是处于运行状态。</p><p>再比如，有些服务的进程发生阻塞，导致无法对外提供服务，这个时候容器对外还是显示为运行态。</p><p>那么我们该如何解决此类问题呢？有没有一些方法，比如可以通过一些周期性的检查，来确保容器中运行的业务没有任何问题。</p><h3 id="pod-中的健康检查" tabindex="-1">Pod 中的健康检查 <a class="header-anchor" href="#pod-中的健康检查" aria-label="Permalink to &quot;Pod 中的健康检查&quot;">​</a></h3><p>为此，Kubernetes 中提供了一系列的健康检查，可以定制调用，来帮助解决类似的问题，我们称之为 Probe（探针）。</p><p>目前有如下三种 Probe：</p><ul><li><p><strong>livenessProbe</strong> 可以用来探测容器是否真的在&quot;运行&quot;，即&quot;探活&quot;。如果检测失败的话，这个时候 kubelet 就会停掉该容器，容器的后续操作会受到其<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy" target="_blank" rel="noreferrer">重启策略</a>的影响。</p></li><li><p><strong>readinessProbe</strong>常常用于指示容器是否可以对外提供正常的服务请求，即&quot;就绪&quot;，比如 nginx 容器在 reload 配置的时候无法对外提供 HTTP 服务。</p></li><li><p><strong>startupProbe</strong> 则可以用于判断容器是否已经启动好，就比如上面提到的容器启动慢的例子。我们可以通过参数，保证有足够长的时间来应对&quot;超长&quot;的启动时间。 如果检测失败的话，同<strong>livenessProbe</strong> 的操作。这个 Probe 是在 1.16 版本才加入进来的，到 1.18 版本变为 beta。也就是说如果你的 Kubernetes 版本小于 1.18 的话，你需要在 kube-apiserver 的启动参数中，显式地在 feature gate 中开启这个功能。可以参考<a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gates/" target="_blank" rel="noreferrer">这个文档</a>查看如何配置该参数。</p></li></ul><p>如果某个 Probe 没有设置的话，我们默认其是成功的。</p><p>为了简化一些通用的处理逻辑，Kubernetes 也为这些 Probe 内置了如下三个 Handler：</p><ul><li><p><a href="https://kubernetes.io/docs/resources-reference/v1.7/#execaction-v1-core" target="_blank" rel="noreferrer">ExecAction</a> 可以在容器内执行 shell 脚本；</p></li><li><p><a href="https://kubernetes.io/docs/resources-reference/v1.7/#httpgetaction-v1-core" target="_blank" rel="noreferrer">HTTPGetAction</a> 方便对指定的端口和 IP 地址执行 HTTP Get 请求；</p></li><li><p><a href="https://kubernetes.io/docs/resources-reference/v1.7/#tcpsocketaction-v1-core" target="_blank" rel="noreferrer">TCPSocketAction</a> 可以对指定端口进行 TCP 检查；</p></li></ul><p>在这里 Probe 还提供了其他配置字段，比如 failureThreshold （失败阈值）等，你可以到<a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes" target="_blank" rel="noreferrer">这个官方文档</a>中查看更详细的解释。</p><blockquote><p>注：对于每一种 Probe，Kubelet 只会执行其中一种 Handler。如果你定义了多个 Handler，则会按照 Exec、HTTPGet、TCPSocket 的优先级顺序，选择第一个定义的 Handler。</p></blockquote><p>下面我们通过一个例子，来了解这三个 Probe 的工作流程。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">probe-demo</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">sise</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">quay.io/openshiftlabs/simpleservice:0.5.0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9876</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">readinessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">tcpSocket</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9876</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">livenessProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">httpGet</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/health</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9876</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">startupProbe</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">httpGet</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/health</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9876</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">failureThreshold</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">periodSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">probe-demo</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">sise</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">quay.io/openshiftlabs/simpleservice:0.5.0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9876</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">readinessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">tcpSocket</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9876</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">livenessProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">httpGet</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/health</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9876</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">startupProbe</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">httpGet</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/health</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9876</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">failureThreshold</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">periodSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span></span></code></pre></div><p>在这个例子中，我们在命名空间 demo 下面创建了一个名为 probe-demo 的 Pod。在这个 Pod 里，我们配置了三种 Probe。在 Kubelet 创建好对应的容器以后，会先运行 startupProbe 中的配置，这里我们用 HTTP handler 每隔 2 秒钟通过 <a href="http://localhost:9876/health" target="_blank" rel="noreferrer">http://localhost:9876/health</a> 来判断服务是不是启动好了。这里我们会尝试 3 次检测，如果 6 秒以后还未成功，那么这个容器就会被干掉。而是否重启，这就要看 Pod 定义的重启策略。</p><p>一旦容器通过了 startupProbe 后，Kubelet 会每隔 5 秒钟进行一次探活检测 （livenessProbe），每隔 10 秒进行一次就绪检测（readinessProbe）。</p><p>在平常使用中，建议你对全部服务同时设置 readiness 和 liveness 的健康检查。</p><p>有一点需要注意的是，通过 TCP 对端口进行检查，仅适用于端口已关闭或者进程停止的情况。因为即使服务异常，只要端口是打开状态，健康检查依然是通过的。</p><p>除了健康检查以外，我们有时候在容器退出前要做一些清理工作，比如利用 Nginx 自带的停止功能停掉进程，而不是强制杀掉该进程，这可以避免一些正在处理的请求中断。此时我们就需要一个 hook（钩子程序）来帮助我们达到这个目的了。</p><h3 id="容器生命周期内的-hook" tabindex="-1">容器生命周期内的 hook <a class="header-anchor" href="#容器生命周期内的-hook" aria-label="Permalink to &quot;容器生命周期内的 hook&quot;">​</a></h3><p>目前在 Kubernetes 中，有如下两种 hook。</p><ul><li><p>PostStart 可以在容器启动之后就执行。但需要注意的是，此 hook 和容器里的 ENTRYPOINT 命令的执行顺序是不确定的。</p></li><li><p>PreStop 则在容器被终止之前被执行，是一种阻塞式的方式。执行完成后，Kubelet 才真正开始销毁容器。</p></li></ul><p>同上面的 Probe 一样，hook 也有类似的 Handler：</p><ul><li><p>Exec 用来执行 Shell 命令；</p></li><li><p>HTTPGet 可以执行 HTTP 请求。</p></li></ul><p>我们来看个例子：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">lifecycle-demo</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">lifecycle-demo-container</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:1.19</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">lifecycle</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">postStart</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;/bin/sh&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-c&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;echo Hello from the postStart handler &gt; /usr/share/message&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">preStop</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">exec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;/usr/sbin/nginx&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;-s&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;quit&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">lifecycle-demo</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">lifecycle-demo-container</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:1.19</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">lifecycle</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">postStart</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;/bin/sh&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-c&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;echo Hello from the postStart handler &gt; /usr/share/message&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">preStop</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">exec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;/usr/sbin/nginx&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;-s&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;quit&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>可以看出来，我们可以借助<code>preStop</code>以优雅的方式停掉 Nginx 服务，从而避免强制停止容器，造成正在处理的请求无法响应。</p><h3 id="init-容器" tabindex="-1">init 容器 <a class="header-anchor" href="#init-容器" aria-label="Permalink to &quot;init 容器&quot;">​</a></h3><p>在 Kubernetes 中还有一种特殊的容器，即 init 容器。看名字就知道，这个容器工作在正常容器（为了方便区分，我们这里称为应用容器）启动之前，通常用来做一些初始化工作，比如环境检测、OSS 文件下载、工具安装，等等。</p><p>应用容器专注于业务处理，其他一些无关的初始化任务就可以放到 init 容器中。这种解耦有利于各自升级，也降低相互依赖。</p><p>一个 Pod 中允许有一个或多个 init 容器。init 容器和其他一般的容器非常像，其与众不同的特点主要有：</p><ul><li><p>总是运行到完成，可以理解为一次性的任务，不可以运行常驻型任务，因为会 block 应用容器的启动运行；</p></li><li><p>顺序启动执行，下一个的 init 容器都必须在上一个运行成功后才可以启动；</p></li><li><p>禁止使用 readiness/liveness 探针，可以使用 Pod 定义的<strong>activeDeadlineSeconds</strong>，这其中包含了 Init Container 的启动时间；</p></li><li><p>禁止使用 lifecycle hook。</p></li></ul><p>我们来看一个 Init 容器的例子：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp-pod</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">namespace</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">demo</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp-container</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox:1.31</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;echo The app is running! &amp;&amp; sleep 3600&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">initContainers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">init-myservice</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox:1.31</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;until nslookup myservice; do echo waiting for myservice; sleep 2; done;&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">init-mydb</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox:1.31</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;until nslookup mydb; do echo waiting for mydb; sleep 2; done;&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp-pod</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">demo</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp-container</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox:1.31</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;echo The app is running! &amp;&amp; sleep 3600&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">initContainers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">init-myservice</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox:1.31</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;until nslookup myservice; do echo waiting for myservice; sleep 2; done;&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">init-mydb</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox:1.31</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;until nslookup mydb; do echo waiting for mydb; sleep 2; done;&#39;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>在 myapp-container 启动之前，它会依次启动 init-myservice、init-mydb，分别来检查依赖的服务是否可用。</p><h3 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h3><p>其实作为 Kubernetes 内部最核心的对象之一，Pod 承载了太多的功能。 为了增加可扩展、可配置性，Kubernetes 增加了各种 Probe、Hook 等，以此方便使用者进行接入配置。所以在一开始使用的时候，会觉得 Pod 中配置项太多。</p><p>但是不要害怕，这些配置项都是有一定目的的 。通过上面合理地归类和示例，可以很好地帮助你理解 Pod Spec 中的一些定义。</p><p>下一节课开始，我们就要学习如何部署高可用业务。如果你对本节课有什么想法或者疑问，欢迎你在留言区留言，我们一起讨论。</p>`,72),e=[o];function c(t,r,E,y,i,F){return n(),a("div",null,e)}const C=s(l,[["render",c]]);export{u as __pageData,C as default};
